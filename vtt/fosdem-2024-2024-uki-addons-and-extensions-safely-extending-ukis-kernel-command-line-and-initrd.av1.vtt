WEBVTT

00:00.000 --> 00:17.440
Okay. Hello, everyone. My name is Emmanuel Giuseppe Sposto. I'm a software engineer at

00:17.440 --> 00:24.320
Red Hat. And today I'm talking about the UKI at Donson Extension, how to safely extend

00:24.320 --> 00:33.960
UKI, scan and comma line in E3D. So why this talk? First of all, because this is extremely

00:33.960 --> 00:42.840
new stuff, like it's very new, hopefully also exciting. Because there's not a lot of documentation,

00:42.840 --> 00:52.080
of course, because this stuff was just merged. And hopefully this talk will also help you

00:52.080 --> 00:59.800
understand a little bit more about what they are, how to use these addons and so on. And

00:59.800 --> 01:06.960
because they may be very useful because UKI, as also Vitaly explained in this talk one

01:06.960 --> 01:15.480
hour ago, is pretty static on the point of comma line in E3D. And with these addons,

01:15.480 --> 01:24.120
we can extend it, these two things without sacrificing the security. And also, yeah,

01:24.120 --> 01:30.920
this attempt to advertise a little bit to UKI, so what they are to the more public to

01:30.920 --> 01:37.880
be more recognized. So let's look first at Vitaly's slides. These are from last year,

01:37.880 --> 01:46.800
I think. So I will just briefly go through this. So Confidential VM provides data protection

01:46.800 --> 01:56.640
from the host he runs on. So we are protecting the VM from the hypervisor because it could

01:56.640 --> 02:03.560
be malicious and it's privileged, so we can access the VM and we don't want that. The

02:03.560 --> 02:11.320
host is still able to disrupt the execution of the VM. And there are specific hardware,

02:11.320 --> 02:18.400
SV, SMP and TDX responsible for encrypting memory and CPU. And storage encryption is

02:18.400 --> 02:23.320
necessary for security and must be done by the guest OS. This was already explained by

02:23.320 --> 02:32.720
Vitaly. And usually the situation that we have is that we usually encrypt, we have the

02:32.720 --> 02:41.560
encrypted part and while the kernel is signed by the vendor, in NITRA MFS and the common

02:41.560 --> 02:48.960
line are locally produced, are not signed and also it's difficult to measure them, of

02:48.960 --> 02:56.360
course. Whereas with the UKI unified kernel images, basically a single binary produced

02:56.360 --> 03:05.120
and signed by the vendor, in this case Red Hat. And it basically contains the important

03:05.120 --> 03:12.760
parts, the RP sections together with the signature, there is the kernel, the NITRA MFS and there

03:12.760 --> 03:22.000
is also the common line as a separate section that is then feed to the kernel. Before going

03:22.000 --> 03:30.440
to the next details, I wanted also to explain like the use case, like yeah, the use case

03:30.440 --> 03:36.840
in this case for this talk, that we have the UFI, the firmware that is in terms called

03:36.840 --> 03:43.040
shim the boot loader, which in terms called system distap which is very key piece for

03:43.040 --> 03:49.640
the add-ons and on both the kernel and common line the NITRA MFS which in turn unpacks the

03:49.640 --> 03:58.600
UKI and gets the kernel and runs the OS. The issue that also Vitaly mentioned is that the

03:58.600 --> 04:07.560
kernel line is immutable and is something that we don't like because there are limitations

04:07.560 --> 04:12.960
and you cannot have a static common line for every use case that you have, there is a crash

04:12.960 --> 04:21.160
kernel options, debugging options and we cannot ship different UKI for every basically use

04:21.160 --> 04:28.440
case. So what we are aiming for the UKI kernel common line is it cannot be static as I said

04:28.440 --> 04:35.800
because there are different use case, it has to be secure so whoever modifies the common

04:35.800 --> 04:41.400
line has to be authenticated otherwise the whole point of confidential computing is lost

04:41.400 --> 04:48.120
and by default nobody because the common line is inserted inside the UKI and then is signed

04:48.200 --> 04:54.120
so you cannot modify it anymore and has to be extensible of course because we don't want to

04:54.120 --> 05:05.240
ship a new UKI every single time. There are already ways for the one that are no UKIs to

05:05.240 --> 05:11.400
extend to add kernel common line to a new UKI but it's a little bit when we talk about

05:11.400 --> 05:16.680
confidential virtual machine it's a little bit tricky because as again I'll show you the option

05:16.680 --> 05:25.480
and you need to trust a lot of parts. So as I said there is the common line section it's embedded

05:25.480 --> 05:36.120
in UKI, it's generated with UKI, it's secure, it's shipped with UKI altogether but it's static,

05:36.920 --> 05:45.800
you cannot be modified. Then there is FI shell which is looked by system distable if the common

05:46.120 --> 05:51.960
line section inside the UKI is missing many distro for example they ship always something in the

05:51.960 --> 05:59.960
common line section inside the UKI so it's ignored. It's useful usually for type 1 entries but

06:01.400 --> 06:08.200
again it's unsafe because an attacker can easily inject its own parameter through the FI shell

06:08.200 --> 06:18.360
that's why it was disabled for CVMs so you cannot extend the kernel common line with the FI shell.

06:19.320 --> 06:25.960
There is SM BIOS system management BIOS, embedded metal this is good, it's trusted because it's

06:25.960 --> 06:32.840
coming from firmware and BIOS but it doesn't apply on CVMs again the hypervisor can easily inject

06:33.640 --> 06:42.040
kernel common line. So yeah as I said it's not good so it was also this was disabled

06:42.840 --> 06:49.160
and then there is QM firmware configuration by the name you can already figure that this is

06:49.160 --> 06:59.800
only from QM it's again coming from hypervisor so also disabled. Then what do we do? Our proposal

06:59.800 --> 07:06.360
initially upstream was an allow list basically an allow list is another P section where you

07:07.080 --> 07:15.320
use regex globbing and whatever just something like this to parse the common line that you want to

07:15.320 --> 07:22.680
get and the easy case will be if there is something that we don't accept in the regex we just discard

07:22.920 --> 07:30.520
the whole common line but the common line would come from FI shell SM BIOS all these sources but

07:30.520 --> 07:39.320
we try to filter and system desktop does the parsing. The advantage is of course that we can reject

07:39.320 --> 07:45.160
what we don't want but the problem is just moved to another place because then you can do

07:46.120 --> 07:52.040
attacks on the regex and globbing because they need to be very careful formulated so what's also

07:52.040 --> 08:00.200
this was disabled so was rejected actually and eventually we have the solution the system D solution

08:00.200 --> 08:09.160
nuclei addons. Nuclei addons is basically another separate binary which is contains a

08:10.280 --> 08:18.760
very few P section one of these is the common line and it's signed by yeah can be signed but

08:18.840 --> 08:25.720
should be signed for the CVMs and we take advantage of shim validate function offered by shim

08:26.840 --> 08:33.080
to validate the P signature so basically this means that system desktop will ask shim to validate if

08:33.080 --> 08:39.720
the binary has been signed by some key that we trust in the secure boot database. There is a very

08:39.720 --> 08:49.960
useful tool UQFI in system D upstream it's you can create UQIs very easily very better than

08:49.960 --> 08:59.080
drag up and object copy and you can also create addons and yeah basically the common line is very

08:59.080 --> 09:09.240
easy you can also provide the keys when you want to sign your own addon so it's this is the solution.

09:09.960 --> 09:19.800
So how UQI works the workflow is UQFI first you create the addons so you ask UQFI to create an

09:19.800 --> 09:26.680
addon with the common line that you want then the addons it needs to be put in the specific

09:26.680 --> 09:33.720
location in the ESP I will show you later where exactly is this system this tab looks for this

09:33.720 --> 09:41.960
location and finds automatically the addons asks shim calling shim verify on the addon to verify the

09:42.680 --> 09:49.000
if the addon is trusted so it's signed by somebody that we trust and then if a leadation is successful

09:49.000 --> 09:55.720
we read the addon the system read the addon and appends the common line inside the addon

09:55.720 --> 10:03.240
to the UQI common line section to extend it and then it's provided to VM linux to

10:03.240 --> 10:10.440
start links with the new common line there are two kinds of addons there is global and local

10:10.440 --> 10:18.040
addons so global addons can be applied to all installed UQIs and this is the location and UQFI

10:18.040 --> 10:23.720
UQI specific addons so if you want to apply all these to one specific UQI you have installed

10:23.720 --> 10:32.600
has to be provided in the UQI name has to be in an extra d folder in the same location where your

10:32.600 --> 10:42.200
UQI is and then has to be put in there just naming convention because last time I checked the system

10:42.200 --> 10:47.400
this tab was checking for also the extension name and this kind of stuff so you need to get them

10:47.400 --> 11:01.000
right UQIs are always located in the this part AFI linux UQIs always ends with the AFI and addons

11:01.000 --> 11:09.160
is dot addon dot AFI and specific addons here as I said you need to be located in the extra d

11:09.160 --> 11:20.200
folder okay so next next step is what is but white self so suppose that we as a vendor we

11:20.920 --> 11:27.640
shipped a new key I common line addon and we signed it and everybody's using it and then we figured

11:27.640 --> 11:35.960
the common line as an issue then what do we do because we signed it as a vendor so what it's

11:36.040 --> 11:45.400
trusted first solution just change the certificate so but this is basically impractical yeah good luck

11:45.400 --> 11:54.520
with that yeah we messes up all the measurements you invalidate all the addons so second solution

11:55.080 --> 12:01.880
try to create a blacklist on the cloud provider this is impractical third solution at the station

12:01.880 --> 12:08.600
check if the hash is matching your addon that you don't like anymore and the last solution

12:08.600 --> 12:15.320
these are these s but rules so what is s but is basically another p section inside the UQI

12:15.320 --> 12:24.520
the yeah the addons for example and contains component generation and also other information

12:24.520 --> 12:30.360
but the key part is the component generation table because there is the same table there should be

12:30.360 --> 12:37.960
the same table inside your shim that and then the we are at component level so for example every

12:37.960 --> 12:46.200
Linux PS action has should be should have the its own component generation version for the Linux one

12:46.200 --> 12:55.160
for the addon and so on and if the component generation match with the what shim has we accept

12:55.240 --> 13:02.040
it but if the generation for this component of the addon that is incoming is lower then we have

13:02.040 --> 13:08.440
a mismatch and even if the addon is signed by red dot or whatever it will be rejected

13:10.920 --> 13:16.680
and this part is done by shim when they verifies they are done in checks the s but components

13:16.680 --> 13:24.680
and generation just an example to clarify this in this case we have the shim has s but one myadon

13:24.680 --> 13:34.040
version two and then the addon contains the same version for s but and myadon so it's good it will

13:34.040 --> 13:41.400
be accepted of course has to be signed by somebody we trust in this case the my the addon as the

13:42.040 --> 13:49.800
s but version is correct but my addon component is lower which means that we don't accept it even

13:49.800 --> 13:55.640
if it's signed by whoever we trust in the secure boot database it won't be accepted

13:58.120 --> 14:05.000
one open problem it's combining addons so if you have two separate addons that contain

14:05.960 --> 14:13.160
common line that is safe but together can create a security issue because they enable something

14:13.160 --> 14:23.080
that we don't like how do we do it how do we solve this issue to be honest as of now I couldn't

14:23.080 --> 14:30.280
come up with a concrete example for this and yeah one solution will be to use that station to see if

14:30.360 --> 14:41.640
they are both there talking about the system dc6 in iterative addons so system dc6 already exist

14:43.320 --> 14:51.960
they are already famous so used and what is new is that you can also use them for uki so for what

14:52.840 --> 15:00.680
if you don't know is a system system extends an image extend the base system with an overlay

15:00.680 --> 15:08.040
containing additional files so you can extend base system and you can use this system this

15:08.040 --> 15:16.040
tab provides also the possibility to use this to extend the initer d inside the uki

15:17.000 --> 15:24.600
um more or less is same concept as the common line addons so you just use different tools

15:24.600 --> 15:30.840
because they are different things they are no p binary with p files sections so there are system

15:30.840 --> 15:39.240
extension images and micozi is used instead the uki fi and but the part for example where to put it

15:39.240 --> 15:48.200
is the same the workflow is more or less again the same create a system c6 extension you put it

15:48.200 --> 15:55.400
inside the extra d folder it must be a raw file and then this is the only difference system this

15:55.400 --> 16:04.200
tab will take the initer d the addon and will put it inside the initer d extra c6 folder where the

16:04.280 --> 16:10.360
c6 extension will then load it and apply it to the initer d

16:13.240 --> 16:22.840
yeah who uses this can use these addons the use case are various there are three groups of users

16:22.840 --> 16:32.040
that can use this the vendors for example read that they want to ship we want to debug kernel and uki

16:32.600 --> 16:42.200
and we ship our addon and there are there could be the vstod the virt host admins that can use

16:42.200 --> 16:49.560
host side tools like virt firmware or whatever to modify these these kind of variables more or

16:49.560 --> 16:56.840
less the same use case and the guest admins can add you can use guest side tools like mock to insert

16:56.840 --> 17:04.200
the key insecure boot even though this is a little bit tricky for in the cloud because on

17:04.200 --> 17:12.040
asia it's basically impossible to add a key in mock because when it reboots you cannot connect via

17:12.040 --> 17:18.040
when you connect with the shell you skip the mock reboot section when they ask you to confirm your

17:18.760 --> 17:27.480
key available tools there is a system d has a lot of tools uki fie is the main one in different

17:27.480 --> 17:35.480
version is supported gradually first how to build and then how to inspect them and then there is also

17:36.680 --> 17:43.000
i sent a pr to extend boot ctl to find addons and display already as a preview what will be the

17:43.000 --> 17:49.400
kernel command the full command line so if there is a system d maintainers right

17:52.440 --> 18:02.120
then and there is mico c to create a system d sex the image and then we have a uki director for fedora

18:02.120 --> 18:11.000
there is kernel boot config you can add update and remove uki's and then we and also added kernel

18:11.000 --> 18:19.400
addon which does the same thing for uki addons and the future work what are we planning to do next

18:21.800 --> 18:30.840
maybe an rpm so the vendor ships an rpm with the collection of addons generic addons that we want to

18:31.560 --> 18:40.040
ship signed by the vendor but of course we don't want to pollute the esp with the addons that

18:40.040 --> 18:46.760
the user doesn't need so there was a agreement also upstream to find these two locations user

18:46.760 --> 18:54.600
lib linux extra d for global and the other one for uki specific addons where the rpm should

18:54.600 --> 19:02.120
install these addons and then when the user needs them can simply use kernel addon or just copy the

19:02.120 --> 19:09.640
addon that for example we as a developer ask to for debugging the uki to copy it in the esp

19:09.640 --> 19:22.360
reboot and they will be there yeah on the cloud cloud if they want to allow the user to upload

19:22.360 --> 19:30.680
their own uki addons they need to be a way to inject to inject the owner certificate

19:30.760 --> 19:38.440
otherwise yeah you cannot do it this also there is a little bit an issue with the measurement

19:38.440 --> 19:45.880
because the when you add the user certificate has to be measured in pscr7 especially and the solution

19:45.880 --> 19:52.760
we found is to simply add the dummy addon before performing attestation so the certificate is part

19:53.480 --> 19:58.840
of the in the key ring so it will be attest is measured

20:01.480 --> 20:08.440
on prem more or less the same things who for us is libvirt we want to offer the same possibility

20:08.440 --> 20:17.400
to upload the certificate for secure boot and yeah and there is already a way to add the dummy addon

20:17.960 --> 20:26.040
so that's that's it from my e-talk if you have any question here outside thank you

20:37.560 --> 20:38.040
yes please

20:47.800 --> 20:51.160
uh

21:04.520 --> 21:07.480
so

21:10.440 --> 21:13.240
second comment is on all of the add-ons

21:17.400 --> 21:21.400
Right? Because you can trust the UiViceQ boot mechanism.

21:21.400 --> 21:26.400
Whereas in a confidential computer environment you cannot today use.

21:26.400 --> 21:33.400
I'm not aware of any stack right now that gives you a trustworthy UiViceQ boot environment.

21:33.400 --> 21:41.400
That means you need another mechanism to do that measurement for a confidential computer environment.

21:41.400 --> 21:47.400
The most natural path for that is to use the launch digest.

21:47.400 --> 21:55.400
Because you have the launch measurements, you need to know ahead of time.

21:55.400 --> 22:00.400
When you boot the VM in a way, in a way, in a way at boot time,

22:00.400 --> 22:10.400
all of the data that you need to launch at the end, which means you need to have the UiViceQ ready to be available including all the add-ons.

22:10.400 --> 22:18.400
At which point we go in full circle, I think we are much better off just building a separate UiViceQ for that one set of configuration you're doing.

22:18.400 --> 22:21.400
So you can attest that I'm actually running a set of configuration.

22:21.400 --> 22:24.400
You don't want your debug add-on in your production fleet.

22:24.400 --> 22:27.400
That is, you want to pre-aggressively.

22:27.400 --> 22:39.400
So I think the mechanism that is the most natural one here is to go and build a separate one-off UiViceQ even if they're made of add-ons if you want to.

22:40.400 --> 22:41.400
Okay.

22:41.400 --> 22:43.400
Okay, thank you.

22:57.400 --> 22:58.400
Okay.

22:58.400 --> 22:59.400
Thank you.

23:09.400 --> 23:12.400
We cannot do a vocation only with a firmware.

23:12.400 --> 23:16.400
The firmware cannot support a vocation mechanism outside of the DDX.

23:16.400 --> 23:18.400
And DDX has both space and around that.

23:18.400 --> 23:22.400
If you have a lot of space, if you ditch the microsoft solution, don't use the microsoft solution.

23:25.400 --> 23:26.400
Thank you.

23:26.400 --> 23:27.400
Bye.

23:29.400 --> 23:30.400
We know how it ends.

23:30.400 --> 23:34.400
Guys, you are more than welcome to present next year if you want.

23:34.400 --> 23:37.400
You are more than welcome to present next year.

23:39.400 --> 23:41.400
You are more than welcome.

