WEBVTT

00:00.000 --> 00:13.880
So, I'm Arnt, I work at ICANN with email and DNS.

00:13.880 --> 00:19.080
I wanted to talk about, I wanted to interrupt about 20 times in the past talk because I

00:19.080 --> 00:27.040
have been working with IMAP, email, DNS for many, many years.

00:27.040 --> 00:35.560
I wrote about half of the RFCs that Gmail supports as IMAP extensions.

00:35.560 --> 00:40.800
Alexei here wrote the other ones.

00:40.800 --> 00:47.920
My work at IMAP involves fixing bugs in any open source libraries that deal with email

00:47.920 --> 00:53.720
or the DNS and we're hiring someone so please will somebody come talk to me.

00:53.720 --> 01:02.360
I also need to talk to people, explain to them how to set up DoveCut for example and

01:02.360 --> 01:09.320
explain to people about Unicode email which is the main focus.

01:09.320 --> 01:15.200
I am Norwegian, I live in Germany and today is the first time that I've actually been

01:15.200 --> 01:19.000
in the city where my office is located.

01:19.000 --> 01:22.760
No, yesterday was the first day.

01:22.760 --> 01:27.480
Tomorrow I'm going into the office, I'm going to get a badge.

01:27.480 --> 01:31.480
I should, well, ICANN rules say I have to explain what ICANN does.

01:31.480 --> 01:34.560
It doesn't really matter, the important thing is we do boring things to do with a domain

01:34.560 --> 01:36.040
name system.

01:36.040 --> 01:40.920
Somebody has to do the backups for the main DNS, we do that.

01:40.920 --> 01:43.080
Somebody has to look after uptime.

01:43.080 --> 01:50.240
I have colleagues who grow seriously stressed when some domain has been down for two minutes.

01:50.240 --> 01:56.880
In the summer the domain administrator in Lebanon died in some accident.

01:56.880 --> 02:03.200
Things happened really quickly to get the DNS back up.

02:03.200 --> 02:13.040
My baby is email address internationalization, a set of RFCs that were written 15 years ago,

02:13.040 --> 02:16.280
10 years ago in two rounds.

02:16.280 --> 02:22.960
We had a testbed in China where we tried one architecture, then we simplified it, made

02:22.960 --> 02:28.920
it better and that's what we have now.

02:28.920 --> 02:33.280
It's the first email change that simplifies something.

02:33.280 --> 02:41.680
We have Unicode everywhere and that's why we have at least some support.

02:41.680 --> 02:45.280
This is a valid message.

02:45.280 --> 02:54.720
You may see there's no RFC 2047 encoding, there's no quoted printable, there's pretty

02:54.720 --> 02:56.640
much nothing.

02:56.640 --> 03:02.960
How many of you can see the syntax errors in that?

03:02.960 --> 03:04.760
Both?

03:04.760 --> 03:14.600
No, it's right.

03:15.280 --> 03:21.240
The syntax errors according to current RFCs are that there is no date field and there

03:21.240 --> 03:24.120
is no from field.

03:24.120 --> 03:33.960
Apart from that, all of them don't need, is optional.

03:33.960 --> 03:36.400
Message ID is optional.

03:36.400 --> 03:42.280
It is reduced.

03:42.280 --> 03:47.560
Technically it's optional.

03:47.560 --> 03:54.760
This stuff, that's a real life message with a couple of extra header fields, pretty much

03:54.760 --> 03:58.720
like the one I showed.

03:58.720 --> 04:05.720
It was actually written by a Ford K9 mail in the Indian company that forks that and sells

04:05.720 --> 04:08.400
it to the government.

04:08.520 --> 04:14.440
To Gmail, I'm supposed to blank out all the personal information but you can see that

04:14.440 --> 04:22.960
this is Devanagari, an Indian writing system that the main works in the sense that it works

04:22.960 --> 04:31.240
with Microsoft and Google and the rest of us, well, we don't match so much, right?

04:31.240 --> 04:38.360
The changes necessary to make this domain work in SMTP are fairly simple.

04:38.360 --> 04:48.880
The server has to say, yes, I support SMTP UTF-8 and then the sender says SMTP UTF-8 at

04:48.880 --> 04:50.840
the end there.

04:50.840 --> 04:56.800
If you do that with an unexcended server, you will provoke a syntax error and the mail

04:56.800 --> 04:58.640
will be returned as an error.

04:58.640 --> 05:01.680
This is a feature.

05:01.680 --> 05:03.120
It simplifies debugging.

05:03.120 --> 05:04.400
We tried it the other way.

05:04.400 --> 05:05.440
That was bad.

05:05.440 --> 05:13.960
This simplifies debugging and simplifying debugging is great.

05:13.960 --> 05:16.560
That domain existed for a while but it was removed.

05:16.560 --> 05:19.120
It's a test domain.

05:19.120 --> 05:26.920
I think I'm not going to go into the meaning of that.

05:26.920 --> 05:34.880
Once you have declared that you want to use SMTP UTF-8, all this is legal, including that

05:34.880 --> 05:36.840
domain.

05:36.840 --> 05:47.120
If you do not declare that support, then that domain is illegal, will provoke a syntax error.

05:47.120 --> 05:52.680
However most servers do declare support for it these days.

05:52.680 --> 05:58.960
I'm happy it's much the same.

05:58.960 --> 06:05.120
The client says enable UTF-8 equals accept, meaning the client will accept UTF-8.

06:05.120 --> 06:07.720
The server says yes, I've enabled that.

06:07.720 --> 06:16.560
After that, the client can just use UTF-8 in ordinary quoted strings, which has the

06:16.560 --> 06:25.640
side benefit of eliminating most of those literals that so plague people.

06:25.640 --> 06:34.040
If you have ever had a male client that couldn't handle a password containing non-ASCII character,

06:34.040 --> 06:39.760
that was probably due to lack of literal support for passwords.

06:39.760 --> 06:47.160
We eliminate that now.

06:47.160 --> 06:50.240
I don't know if it's not the only way that people read mail today.

06:50.240 --> 06:54.840
There are five main protocols.

06:54.840 --> 06:58.800
Three of them just support all of this.

06:58.800 --> 07:08.480
If you use Exchange or Office 365, your app will probably speak a protocol called EWS,

07:08.480 --> 07:15.560
Microsoft specific thing, find client library on GitHub, and so on.

07:15.560 --> 07:17.640
Everyone just support it in the core.

07:17.640 --> 07:21.560
I'm happy sort of the laggard there.

07:21.560 --> 07:27.360
Pop has a defined extensions, but I don't know anyone who has written any code for that.

07:27.360 --> 07:32.160
Have anyone here used pop in the past five years?

07:32.160 --> 07:33.680
Thanks.

07:33.680 --> 07:47.880
The nice things about this architecture we have just use Unicode everywhere is that code

07:47.880 --> 07:51.440
like this works.

07:52.320 --> 07:58.320
People recognize strings by saying, well, there's ASCII 34, then they just go on to find the next ASCII 34,

07:58.320 --> 08:02.680
and that works without change.

08:02.680 --> 08:07.080
People today use Unicode for all the strings in their program.

08:07.080 --> 08:09.640
Okay, here comes another Unicode string.

08:09.640 --> 08:11.840
It works.

08:11.840 --> 08:18.600
This is why when I patched the Ruby standard library, the change to support enable was

08:18.640 --> 08:24.800
as big as the change to support actual Unicode email.

08:24.800 --> 08:28.840
Enable needed an actual new command.

08:28.840 --> 08:34.520
The Unicode stuff pretty much only needed testing.

08:34.520 --> 08:41.360
The biggest program that I have patched was PostFix, which needed well over a thousand

08:41.360 --> 08:43.160
lines of code.

08:43.200 --> 08:48.480
The smallest one was PropMail with zero lines.

08:48.480 --> 08:52.000
Written in 1991 needed no changes to me.

08:52.000 --> 08:56.000
This says that it's a good extension.

08:56.000 --> 09:00.120
Most of the main, most of the modern languages have support for this in the standard library

09:00.120 --> 09:02.520
already.

09:02.520 --> 09:03.680
Rust should have, right?

09:03.680 --> 09:05.880
Yours should become the standard library.

09:06.880 --> 09:13.080
If you want to support it, I have a set of EAI test messages.

09:13.080 --> 09:15.000
That's currently seven messages.

09:15.000 --> 09:19.120
If you manage to render those seven, then you have support for it.

09:19.120 --> 09:29.480
Unfortunately, one of them will not be as simple as you wish, but that's life.

09:29.480 --> 09:34.400
If you want to see whether something does support it, I have an auto responder.

09:34.440 --> 09:40.280
Auto is the Norwegian word for gray.

09:40.280 --> 09:43.320
Also it's pronounced like, or except the other way.

09:43.320 --> 09:50.600
It demonstrates a really, very, very nice bug, which I'm not going to explain.

09:50.600 --> 09:55.400
It becomes a very rude word if you push it through a certain bug.

09:55.400 --> 10:05.520
Most of the service support it, at least six here.

10:05.520 --> 10:10.400
Postfix and Exim are the two biggest ones open source now.

10:10.400 --> 10:13.120
Something like the next four also support it.

10:13.120 --> 10:19.200
Halon and Momentum are the service that send you mail like your package has shipped.

10:19.200 --> 10:23.280
Mavis Clownout is pretty much support on the service side.

10:23.280 --> 10:24.520
Clownside is not so good.

10:29.840 --> 10:35.000
For my work, I run into a lot of bugs, speak to a lot of people who implement this.

10:35.000 --> 10:43.000
And this is the common bugs, things people tend to run into.

10:44.000 --> 10:52.000
The worst of them is the third Gmail uses all UTF-8.

10:52.000 --> 10:54.000
This is nice.

10:54.000 --> 10:58.000
It works smoothly with a lot of code.

10:58.000 --> 11:04.000
Exchange sends this awful things with Xn that you see there, which I hate.

11:04.000 --> 11:07.000
You can see why they do it, much does the same.

11:08.000 --> 11:11.000
It's something that needs to be handled.

11:11.000 --> 11:13.000
To my mind, it's a bug.

11:15.000 --> 11:19.000
There's a lot of code that looks at strings like in the header fields and say,

11:19.000 --> 11:22.000
oh, do I need to do RFC 2047 encoding here?

11:22.000 --> 11:25.000
That can be modified.

11:28.000 --> 11:31.000
You need extra tests to check things.

11:32.000 --> 11:41.000
In December, I went to China to do interrupt testing with various software companies

11:41.000 --> 11:43.000
providers there.

11:43.000 --> 11:49.000
Two of them had bugs where they accidentally encoded the local part, which is not legal.

11:49.000 --> 11:52.000
Absolutely not legal, will not work.

11:52.000 --> 11:59.000
It's complicated, but the short version is it won't work.

11:59.000 --> 12:01.000
It can't be made to work.

12:05.000 --> 12:11.000
You're the first audience that hasn't asked about downgrading either by rule or by interrupting.

12:14.000 --> 12:22.000
People always ask, what if people with a Chinese address want to send e-mail to someone with an ASCII address?

12:22.000 --> 12:26.000
It's a fascinating corner case for people like us.

12:26.000 --> 12:33.000
It doesn't really matter to the people who want Chinese e-mail addresses because they only write Chinese.

12:33.000 --> 12:39.000
If you only write Chinese, you're not going to want to send e-mail to somebody in India.

12:39.000 --> 12:47.000
So in real life, it doesn't really matter, and supporting it, which we did in the testbeds,

12:47.000 --> 12:50.000
made debugging really complicated.

12:50.000 --> 12:54.000
It was difficult to find out where a bug was.

12:54.000 --> 13:01.000
Better to kill the feature, have simplicity, have something that's simple to implement like those

13:01.000 --> 13:03.000
100 lines in Ruby.

13:07.000 --> 13:13.000
And these are the RFCs that need implementation.

13:14.000 --> 13:23.000
I'll be happy to talk to anyone about either using libraries, whether Java, Mail, Netimap, Netimap.

13:23.000 --> 13:26.000
There are several things called that.

13:26.000 --> 13:29.000
Talking about this on the wire.

13:29.000 --> 13:32.000
I'll also talk about any older RFC.

13:32.000 --> 13:35.000
And I'll talk to you about the job that I have.

13:35.000 --> 13:39.000
One more person to do my kind of work.

13:40.000 --> 13:43.000
Yes, Alex wants a new job.

13:48.000 --> 13:52.000
That's the official slide that I have to have at the end.

13:52.000 --> 13:54.000
I can policy.

13:54.000 --> 13:56.000
Thank you.

14:00.000 --> 14:03.000
I've not seen who has been first of you.

14:04.000 --> 14:08.000
Very short question about the UTF-8.

14:08.000 --> 14:15.000
How is the current proposed way to do comparison in server-side software, for example,

14:15.000 --> 14:18.000
usernames and password and addresses?

14:21.000 --> 14:22.000
Right.

14:22.000 --> 14:28.000
The question was, how do you do comparison of usernames, passwords, addresses?

14:28.000 --> 14:34.000
There is a set of RFCs for that called Precise, P-R-E-C-I-S,

14:34.000 --> 14:39.000
which I understand is only modestly supported.

14:39.000 --> 14:52.000
At present, I think that pausing on bytes unchanged is best if you can do that.

14:53.000 --> 15:01.000
If you do that, some Arab passwords won't work, but in most of the world, it works.

15:01.000 --> 15:08.000
On a somewhat longer term, we need a shareable open-source implementation of those RFCs.

15:10.000 --> 15:18.000
It will be a problem for more people than part of the Arab world.

15:19.000 --> 15:25.000
Still, some implementations have done this for years and not suffered.

15:25.000 --> 15:29.000
They happen to be outside the Arab world.

15:31.000 --> 15:33.000
Next, Eniets.

15:34.000 --> 15:41.000
So, if people have addresses with non-ESC local parts, do they also often have in practice

15:41.000 --> 15:47.000
a backup address in ESC only so that they can use that if they get the failure to deliver?

15:47.000 --> 15:51.000
It depends. In China, people have both.

15:51.000 --> 15:57.000
In India, the people who have Indic email addresses have only that.

15:57.000 --> 15:59.000
So, that's culturally dependent.

15:59.000 --> 16:04.000
I think it has a lot to do with what kind of input methods people use on the keyboard.

16:07.000 --> 16:09.000
In front.

16:10.000 --> 16:19.000
For IMAP, as UTF-8 equals accept, been completely folded into IMAP for revision 2.

16:19.000 --> 16:22.000
Are there some subtle differences?

16:22.000 --> 16:23.000
Yes.

16:23.000 --> 16:25.000
I think there are subtle differences.

16:25.000 --> 16:29.000
There is one subtle difference, and you should do what IMAP for revision 2 does.

16:29.000 --> 16:33.000
Alexei got it right. His RFC is right. The other one is bad.

16:33.000 --> 16:36.000
So, I should ignore what's said in the old one.

16:36.000 --> 16:43.000
Even if in the revision 1, if I implement revision 1 only, I should do the thing that revision 2 says.

16:43.000 --> 16:45.000
You should do what revision 2 says.

16:49.000 --> 16:53.000
Okay, I have three questions. Maybe take it quick.

16:55.000 --> 16:57.000
Okay, quick. Andrei here.

16:57.000 --> 17:02.000
I like to use my accent character, which is just Latin extended character.

17:02.000 --> 17:07.000
I see that this email address internationalization is mostly for different scripts,

17:07.000 --> 17:14.000
but with this extended Latin, I have very often the program that my email address is invalid for many websites

17:14.000 --> 17:16.000
because there's this accent character.

17:16.000 --> 17:20.000
And it's just the, I'm just the easy part. I'm just doing the IDN part.

17:20.000 --> 17:22.000
The local part is almost never working.

17:22.000 --> 17:29.000
The IDN part behind the ad sign is working better, but still I have to put it there and code it.

17:29.000 --> 17:34.000
So, wouldn't it for maybe extended Latin actually be better for sake of compatibility

17:34.000 --> 17:39.000
to have some standard way of let's say, remove all the critics and make it ASCII

17:39.000 --> 17:42.000
and so it would be backwards compatible?

17:45.000 --> 17:46.000
Quick answer, Art.

17:48.000 --> 17:53.000
Suppose you do that using the standard library that exists.

17:53.000 --> 17:56.000
What do you think Gros becomes?

18:00.000 --> 18:03.000
Okay, it's not in the dictionary.

18:05.000 --> 18:11.000
Which, when you change somebody's name to something not in the dictionary,

18:11.000 --> 18:15.000
you have a user experience problem.

18:19.000 --> 18:27.000
The larger answer is that people have suggested and tried various kinds of downgrading.

18:27.000 --> 18:33.000
They are overall, each of them, more work than just adding support for unicodes.

18:35.000 --> 18:37.000
Nice intention in practice.

18:39.000 --> 18:43.000
Really, when you compare it to writing 100 lines of codes, almost everything is bad.

18:47.000 --> 18:52.000
Okay, so I think you're trying to show that

18:53.000 --> 18:59.000
the negotiation happens between one point and another point.

18:59.000 --> 19:01.000
It's not end to end, right?

19:01.000 --> 19:05.000
So if any intermediate doesn't support this extension,

19:05.000 --> 19:08.000
how will it affect the actual message being composed?

19:08.000 --> 19:14.000
The second question is, does this have any impact on DKIM?

19:15.000 --> 19:18.000
Okay, first question.

19:18.000 --> 19:22.000
Yes, the entire chain of mail service has to support it,

19:22.000 --> 19:28.000
which is the reason that I was happy that Amarvis, PostFix, Xim, blah, blah,

19:28.000 --> 19:30.000
supported it so early.

19:30.000 --> 19:34.000
The chain is, in practice, not a big problem today.

19:37.000 --> 19:41.000
The user agent is a big problem today.

19:42.000 --> 19:48.000
And particularly, user agents like contact forms, often things.

19:50.000 --> 19:57.000
Second, DKIM could be a problem.

19:57.000 --> 20:01.000
I still haven't seen any bug related to that,

20:01.000 --> 20:03.000
and believe me, I see all the bugs.

20:04.000 --> 20:12.000
Bless the DKIM people, because they must have done something right.

20:14.000 --> 20:16.000
All right, thank you very much, Arndt.

20:16.000 --> 20:18.000
I think we have all the questions.

20:18.000 --> 20:20.000
It says more questions, says to the chat,

20:20.000 --> 20:22.000
and I think Arndt is also happy to join.

20:22.000 --> 20:25.000
And we switch over to the next session, so we...

20:33.000 --> 20:36.000
Thank you.

