WEBVTT

00:00.000 --> 00:08.360
Okay, so I think we're live now.

00:08.360 --> 00:12.440
So thank you very much everyone for coming.

00:12.440 --> 00:15.680
Today we're in for a bit of a treat as far as I'm concerned because we've got all the

00:15.680 --> 00:20.680
experts in the various, three of the various formats, naming formats.

00:20.680 --> 00:23.240
There's two hard problems in computer science.

00:23.240 --> 00:25.880
One is cash invalidation and the other is naming.

00:25.880 --> 00:29.960
And naming and how we actually refer to things is what we're going to be talking about today.

00:30.400 --> 00:35.800
And so with that, I'd like to ask each of the panelists to introduce themselves and then

00:35.800 --> 00:41.800
talk about the use case, other format that they're representing for naming and the use cases.

00:41.800 --> 00:47.840
And if we could do a round robin and then want to open it up for questions between panelists

00:47.840 --> 00:49.560
as well as the audience.

00:49.560 --> 00:56.760
And we will try to make sure we repeat the questions for the stream.

00:56.760 --> 00:59.840
And with that, I'll start off with Eva.

00:59.840 --> 01:01.280
Thanks Kate.

01:01.280 --> 01:02.680
Hello folks, hello stream.

01:02.680 --> 01:07.880
Eva Black currently leading open source security at CISA in the US.

01:07.880 --> 01:09.320
Only for about six months.

01:09.320 --> 01:10.880
Please don't ask me any questions about government.

01:10.880 --> 01:15.840
I've been an open source developer way, way longer starting in the late 90s.

01:15.840 --> 01:19.680
Did some hashing and encryption stuff way back then.

01:19.680 --> 01:23.200
Databases, cloud computing, infrastructure hardware security.

01:23.240 --> 01:28.960
And about three years ago had this weird idea as S bombs were becoming popular or in the

01:28.960 --> 01:31.760
sort of zeitgeistive discussion.

01:31.760 --> 01:39.000
How do we really do supply chain traceability, artifact resolution across heterogeneous languages,

01:39.000 --> 01:44.240
build tools, supply chains and open source without burdening developers.

01:44.240 --> 01:49.040
Without going around and telling an unbounded set of open source projects, volunteers, hey

01:49.040 --> 01:53.920
you need to adopt a bunch of new tools that will cost you either time or money to build

01:53.920 --> 01:55.760
these S bombs.

01:55.760 --> 02:02.920
Couldn't we find a finite set, a small set of projects to make changes in maybe GCC to

02:02.920 --> 02:09.520
start with and then on up the chain from there to Docker build, RPM, etc.

02:09.520 --> 02:12.400
To connect to the dots as it were.

02:12.400 --> 02:19.000
So that the end state, you download a package from PyPy, you download a container from Dockerhub.

02:19.000 --> 02:24.720
Whatever, that it has a signature and a graph and gosh we already have this technology, it's

02:24.720 --> 02:26.920
called Git.

02:26.920 --> 02:32.640
Underneath Git is a directed acyclic graph of hash identifier maps.

02:32.640 --> 02:33.800
Couldn't we repurpose that?

02:33.800 --> 02:35.200
Yeah, it turns out we can.

02:35.200 --> 02:37.120
It wasn't that hard.

02:37.120 --> 02:44.440
And you can build this hash map or what we call an artifact input manifest.

02:44.440 --> 02:48.400
At each step in a build process and then chain it to the next step in someone else's build

02:48.400 --> 02:54.200
process and if everyone did this automatically in our build tools, it wouldn't take more

02:54.200 --> 02:59.720
developer effort after we modify the build tools but at the end of it you could trace

02:59.720 --> 03:07.480
all the way back to the source files and the intermediate steps and the use case if we

03:07.480 --> 03:15.720
know that these versions of the log for J package, these file hashes have a known vulnerability

03:15.720 --> 03:19.040
and you have a Java binary, JVM.

03:19.040 --> 03:21.560
You don't know if log for J is in there or what version.

03:21.560 --> 03:25.400
You can do some composition analysis, maybe find it.

03:25.400 --> 03:28.400
You can look at the S-bomb but today they're not deep enough to tell you that.

03:28.400 --> 03:32.040
You can ask your vendor and wait for a response but if we had the full artifact dependency

03:32.040 --> 03:35.040
graph you could just do a hash lookup.

03:35.040 --> 03:41.440
Is this hash in this graph somewhere and then go oh, whoops, probably a problem here or

03:41.440 --> 03:42.840
probably safe.

03:42.840 --> 03:48.240
The goal is better fidelity information for defense teams.

03:48.240 --> 03:49.240
That's my use case.

03:49.240 --> 03:50.240
There are others.

03:50.240 --> 03:52.640
Other people have come up with four omnibor.

03:52.640 --> 03:53.640
That's it.

03:53.640 --> 03:54.640
Thank you.

03:54.640 --> 03:55.640
Thank you.

03:55.640 --> 03:59.640
So Philippe and Wadan, for those we are in the room.

03:59.640 --> 04:03.240
I've already introduced myself but the videos will be split.

04:03.240 --> 04:11.360
So I'm the maintainer of many open source tools in the SES space and I'm the co-creator

04:11.360 --> 04:16.400
and creator of something called package URL that I represent today.

04:16.400 --> 04:21.560
In contrast with what Eva said, I think there's another way to look at things which is not

04:21.560 --> 04:28.120
trying to change the world but just take it as it is and try to observe and very modestly

04:28.120 --> 04:32.640
try to extract what we have for that.

04:32.640 --> 04:40.480
Package URL, interestingly enough, was really introduced in this very room in 2018.

04:40.480 --> 04:46.120
It was a package and dependency management dev room.

04:46.120 --> 04:52.160
And it comes from work we did on scan code and the early version of vulnerable code where

04:52.160 --> 04:54.680
we had a very simple problem.

04:54.680 --> 05:02.320
We were collecting package data from many different package managers, parsing manifest,

05:02.320 --> 05:08.840
we're collecting dependencies and it was a mess to figure out when the package is named

05:08.840 --> 05:14.800
file as a Ruby package, is it the same as file in Debian?

05:14.800 --> 05:18.000
Well, it happens, they're completely different.

05:18.000 --> 05:24.360
And so what we said and say, well, Debian file version one, two, three is the name of

05:24.360 --> 05:28.160
the package and that's essentially the essence of Perl and that's all there is to it, not

05:28.160 --> 05:30.000
much more.

05:30.000 --> 05:34.080
If it's on Ruby gem, you say gem file one, two, three.

05:34.080 --> 05:39.800
And each of these ecosystems, we call package type, are the ones that are doing the hard

05:39.800 --> 05:45.680
work to ensure that the names are mostly unique.

05:45.680 --> 05:53.920
And the nice thing, I don't know how it happened, but eventually every tool in the space is

05:53.920 --> 05:59.840
using that spec at some level or something which is very close to it.

05:59.840 --> 06:08.000
And the NVD is considering something similar, for instance, database called OSV in part of

06:08.000 --> 06:14.200
the Linux foundation of NSSF and Google is using also Perl, they're also using some of

06:14.200 --> 06:16.440
the tools we built around Perl for version range.

06:16.440 --> 06:18.160
So it's great.

06:18.160 --> 06:23.720
I think it's awesome because it's a way to, even if we don't talk the same language, ensuring

06:23.720 --> 06:30.720
that when we talk about a package, we mostly talk about the same thing.

06:30.720 --> 06:31.720
Hello.

06:31.720 --> 06:37.200
Yeah, I'm Alexios Alvarez.

06:37.200 --> 06:39.600
You don't know me.

06:39.600 --> 06:45.240
Let me see if I can plug this in again.

06:45.240 --> 06:46.240
Right.

06:47.040 --> 06:48.040
Right.

06:48.040 --> 06:55.080
This slide I had prepared talks about things that you cannot see.

06:55.080 --> 07:02.720
Names and locators and identifiers and all this stuff which might or not not be.

07:02.720 --> 07:04.720
Yeah.

07:04.720 --> 07:07.000
Okay.

07:07.000 --> 07:09.000
We can do it without.

07:09.000 --> 07:11.800
Can I?

07:11.800 --> 07:12.800
You have.

07:12.800 --> 07:13.800
Go speak.

07:13.800 --> 07:14.800
I'm going to try to get yourself.

07:15.800 --> 07:18.800
You know, wonderful.

07:18.800 --> 07:20.800
Okay.

07:20.800 --> 07:30.080
So when we're talking about the naming as Kate mentioned, right, we have to think about

07:30.080 --> 07:38.960
name, locators and identifiers and the slide I was prepared to show was that there are

07:38.960 --> 07:42.120
two different ways to refer to things.

07:42.120 --> 07:43.840
First of all, why do we want to refer to things?

07:43.840 --> 07:49.240
We want to refer to things in order to communicate and say, okay, we're all talking about this

07:49.240 --> 07:50.560
thing, right?

07:50.560 --> 07:52.560
We give them a name.

07:52.560 --> 07:54.560
Right.

07:54.560 --> 07:56.560
Okay.

07:56.560 --> 08:07.560
You have an idea why?

08:07.560 --> 08:12.840
Yeah, yeah, definitely things.

08:12.840 --> 08:13.840
Okay.

08:13.840 --> 08:15.360
It will be discussion.

08:15.360 --> 08:16.360
It will be discussion.

08:16.360 --> 08:17.360
Right.

08:17.360 --> 08:23.160
So there are what we're calling intrinsic and extrinsic identifiers.

08:23.160 --> 08:24.160
Right.

08:24.160 --> 08:25.160
Oh, perfect.

08:25.160 --> 08:26.160
Thank you, Phillip.

08:26.160 --> 08:27.160
Oh, thank you, everyone.

08:27.160 --> 08:28.160
I don't know.

08:28.160 --> 08:29.160
Okay.

08:29.160 --> 08:30.160
You know me.

08:30.160 --> 08:31.160
You don't know that.

08:31.160 --> 08:32.160
Yeah.

08:32.160 --> 08:33.160
Right.

08:33.160 --> 08:42.080
So there are, I wanted to show, I took some time to create pictures.

08:42.080 --> 08:43.080
Right.

08:43.080 --> 08:47.360
So there are extrinsic and intrinsic identifiers.

08:47.360 --> 08:52.480
Extrinsic rely on a registry or catalog or directory, whatever you want to call it, which

08:52.480 --> 08:56.800
keeps the correspondence between the name and the object.

08:56.800 --> 08:57.800
Right.

08:57.800 --> 09:02.320
And intrinsic, there is the connection of the object is inside the name.

09:02.320 --> 09:03.320
Right.

09:03.320 --> 09:06.600
Referring to non-digital world examples.

09:06.600 --> 09:08.600
Right.

09:08.600 --> 09:10.800
We have ISBNs.

09:10.800 --> 09:11.800
Right.

09:11.800 --> 09:18.840
So the ISBN is a number, but there is somewhere some database, registry, whatever you want

09:18.840 --> 09:19.840
to call it.

09:19.840 --> 09:20.840
Right.

09:20.840 --> 09:25.360
That assign that corresponds a specific book to the ISBN.

09:25.360 --> 09:26.360
Right.

09:26.360 --> 09:29.440
Or a passport ID or something like that.

09:29.440 --> 09:35.520
Somebody else keeps the correspondence between the name and the entity.

09:35.520 --> 09:36.520
Right.

09:36.520 --> 09:41.400
And there are intrinsic and in real, I mean, analog world, non-digital world.

09:41.400 --> 09:42.400
Right.

09:42.400 --> 09:44.360
We have chemical formulas.

09:44.360 --> 09:45.360
Right.

09:45.360 --> 09:52.360
When you're saying, nature chloride, sodium chloride, it's salt.

09:52.360 --> 09:53.360
Right.

09:53.360 --> 09:58.760
And this is actually what is the components of the object.

09:58.760 --> 09:59.760
Right.

09:59.760 --> 10:05.480
Or in musical notation, when you listen, when you see this one, you see that it goes,

10:05.480 --> 10:09.000
da, da, da, da, and you understand it's bit of a truth.

10:09.000 --> 10:10.000
Right.

10:10.000 --> 10:16.960
And there is no registry or directory that gives you the correspondence between these

10:16.960 --> 10:17.960
two.

10:17.960 --> 10:18.960
Right.

10:18.960 --> 10:27.120
And on the digital world, as we've already heard, examples are, you know, URLs, URIs,

10:27.120 --> 10:35.760
DOIs, Perls that you just heard, and Omnibor, Ditoid, or whatever, software hash ID, these

10:35.760 --> 10:39.120
are based on the content and there is no.

10:39.120 --> 10:48.920
So I'm here because I'm involved with software hash ID, which is an attempt to produce unique

10:48.920 --> 10:51.880
IDs for every digital artifact.

10:51.880 --> 10:52.880
Right.

10:52.880 --> 11:00.240
It's been used in software heritage and the largest archive of source in the world.

11:00.240 --> 11:04.400
And it's on its way to become an ISO standard.

11:04.400 --> 11:10.520
And it's based as we heard there ever before on hashies, on the content.

11:10.520 --> 11:18.600
So you know, it uniquely identifies things based on the actual content.

11:18.600 --> 11:20.520
So let me try to summarize here.

11:20.520 --> 11:21.520
Okay.

11:21.520 --> 11:26.440
The software hash IDs is referencing to a global archive and you have this starting

11:26.440 --> 11:27.440
point.

11:27.440 --> 11:29.240
No, it's not reference archive.

11:29.240 --> 11:30.240
It's the content.

11:30.240 --> 11:31.840
The content in the archive.

11:31.840 --> 11:32.840
No.

11:32.840 --> 11:33.840
The content of the...

11:34.280 --> 11:36.080
It's the content of the object.

11:36.080 --> 11:37.080
Right.

11:37.080 --> 11:40.160
Where you find it, it's a completely different thing.

11:40.160 --> 11:41.160
Right.

11:41.160 --> 11:42.160
It's how do we call it.

11:42.160 --> 11:43.160
Right.

11:43.160 --> 11:48.320
There is an archive, software heritage archive, and you can find different things.

11:48.320 --> 11:50.840
You can find them or maybe not find them.

11:50.840 --> 11:54.200
It's not necessary that you will find it there.

11:54.200 --> 11:56.200
Our discussion here is about naming.

11:56.200 --> 11:57.200
Right.

11:57.200 --> 11:58.200
Yeah.

11:58.200 --> 11:59.200
Okay.

11:59.200 --> 12:03.520
So this is a source of truth for a naming.

12:03.520 --> 12:07.000
The omniborx Gidoids are...

12:07.000 --> 12:12.000
Here is how things have intermediately been named as they've gone through the build tools.

12:12.000 --> 12:13.000
Very close.

12:13.000 --> 12:14.000
Okay.

12:14.000 --> 12:15.000
Very close.

12:15.000 --> 12:20.560
So each of the objects in a build chain, including the final one, get a hash ID.

12:20.560 --> 12:25.080
A similar process, slightly different function, but same principle.

12:25.080 --> 12:31.720
The difference is we, instead of using the identifier of the object, use the identifier

12:31.720 --> 12:35.120
of the build tree behind it to identify it.

12:35.120 --> 12:39.480
That's the only functional difference.

12:39.480 --> 12:45.480
And then pearls are basically representing, oh, I found this and it may refer to things,

12:45.480 --> 12:48.800
other things may refer to these and link the pearls to these.

12:48.800 --> 12:49.800
It's a locator.

12:49.800 --> 12:50.800
Locator.

12:50.800 --> 12:51.800
Yeah.

12:51.800 --> 12:54.960
It's a locator and it's also an identifier.

12:54.960 --> 13:05.160
And we even summoned the authorities on URLs and URIs from W33 to ask whether it was a URL.

13:05.160 --> 13:06.160
Okay.

13:06.160 --> 13:07.160
And says, yes, it's a URL.

13:07.160 --> 13:09.320
It's also an identifier.

13:09.320 --> 13:13.920
The thing is that it's also something you observe when you have an NPM package called

13:13.920 --> 13:16.200
React version 2.3.

13:16.200 --> 13:17.200
That's what you have.

13:17.200 --> 13:22.000
So it's not based strictly on the content, but it's based on the package manifest and

13:22.000 --> 13:23.320
way of naming them there.

13:23.320 --> 13:24.320
Okay.

13:24.680 --> 13:27.360
We're starting to see the questions show up for questions.

13:27.360 --> 13:29.120
So just say your question.

13:29.120 --> 13:30.920
I'll repeat it for them.

13:30.920 --> 13:34.920
On the one for hashes, is it...

13:34.920 --> 13:35.920
Which one?

13:35.920 --> 13:36.920
The hash map.

13:36.920 --> 13:38.920
That's a false of them.

13:38.920 --> 13:39.920
Okay.

13:39.920 --> 13:45.920
So is it the case that anyone with a proper algorithm can come up with the same results?

13:45.920 --> 13:46.920
Yes.

13:46.920 --> 13:49.840
Independent later is no central authority.

13:49.840 --> 13:55.880
So the question is, for the hash IDs, can anyone come up with the same result independent

13:55.880 --> 13:58.920
and there's no central authority?

13:58.920 --> 13:59.920
Short answer is yes.

13:59.920 --> 14:04.320
Both of us use a published, widely known function to derive the hashes.

14:04.320 --> 14:07.360
This is why it's called an intrinsic identifier.

14:07.360 --> 14:14.680
Given an artifact, a file you found with any name, you can derive the identifier and then

14:14.680 --> 14:17.040
look it up somewhere else.

14:17.240 --> 14:20.240
Is the name part of the identifier?

14:20.240 --> 14:21.240
Doesn't have to be.

14:21.240 --> 14:22.240
Is that a...

14:22.240 --> 14:25.640
Is the name part of the identifier?

14:25.640 --> 14:28.240
With the question and not necessarily.

14:28.240 --> 14:33.240
I can download something off of BitTorrent with a random name.

14:33.240 --> 14:36.400
It could be named after a movie star.

14:36.400 --> 14:37.840
It doesn't matter.

14:37.840 --> 14:45.000
And I derive the identifier, look it up on some global database and realize it's actually

14:45.000 --> 14:46.560
an NPN package.

14:46.560 --> 14:51.080
Actually, it depends.

14:51.080 --> 14:52.400
Right.

14:52.400 --> 14:55.520
So do you want the name to be part?

14:55.520 --> 14:57.640
If you're talking about...

14:57.640 --> 15:00.920
Because this is about identifiers for digital artifacts.

15:00.920 --> 15:04.880
So if it's a file, you probably don't care how it's called.

15:04.880 --> 15:08.200
So you only look at the content.

15:08.200 --> 15:14.240
But if it's a directory or a tree, do you care about the names or the things in there

15:14.240 --> 15:15.840
or on the contents?

15:15.840 --> 15:22.720
If it's not a directory, if it's only a commit or it's a revision or it's a package thing,

15:22.720 --> 15:24.220
it's a release.

15:24.220 --> 15:27.520
So in some cases you care, some cases you don't care.

15:27.520 --> 15:31.800
But if we're talking about single files or snippets or something like that, yeah, you

15:31.800 --> 15:36.800
don't care about some other names that it has.

15:36.800 --> 15:37.800
Next question.

15:37.800 --> 15:38.800
Governance.

15:38.800 --> 15:39.800
Uh-huh.

15:39.800 --> 15:44.640
Can somebody tell me about the governance about any of these things such as the Perl spec

15:44.640 --> 15:51.960
on the door, how are these being governed, where are they being developed, who's issuing

15:51.960 --> 15:53.960
them, et cetera?

15:53.960 --> 15:54.960
Okay.

15:54.960 --> 15:57.040
I can answer on Perl.

15:57.040 --> 16:00.840
It's a loose coalition of volunteers.

16:00.840 --> 16:02.000
I'm going to repeat the question.

16:02.000 --> 16:05.680
So what's the governance for these different efforts and in particular I'll answer for

16:05.680 --> 16:06.680
Perl.

16:07.160 --> 16:16.200
It's the loose governance based on a coalition of willing participants, including folks originally

16:16.200 --> 16:21.200
from Microsoft, there were folks from Google, there's folks from Sonatype, from the Cyclone

16:21.200 --> 16:24.800
DX project and folks from ART and SPDX.

16:24.800 --> 16:29.200
Yeah, no, no, no, I go there.

16:29.200 --> 16:34.080
Eventually there's been a pressure to get more governance and process in place, which

16:34.080 --> 16:38.960
is a good thing, but that's something I like to also do only at the last minute.

16:38.960 --> 16:44.440
I'm a proponent of a bit less process whenever possible and I think most of the developers

16:44.440 --> 16:47.000
appreciate a bit less process when possible.

16:47.000 --> 16:54.440
So we're considering moving to a non-profit charity, potentially a wasp and that will

16:54.440 --> 16:58.840
mean also adopting at the same time a bit more formalized process.

16:58.840 --> 17:03.200
So that's the long answer.

17:03.320 --> 17:10.360
Software Hush ID started from the people who built the software heritage, but right now

17:10.360 --> 17:12.400
it's spun out of it.

17:12.400 --> 17:19.680
It's run under the community spec governance model, SWHD.org, everyone can contribute,

17:19.680 --> 17:28.240
everyone can help and it will follow the process for submitting a spec and becoming standard.

17:28.240 --> 17:30.120
And Omnibor is in about the same place.

17:30.120 --> 17:32.720
It's under the community specification license.

17:32.720 --> 17:36.000
It's a website, a calendar, weekly meetings.

17:36.000 --> 17:38.440
Anyone who shows up can participate, contribute.

17:38.440 --> 17:46.200
The actual governance right now is mostly the regulars are Microsoft or X Microsoft and

17:46.200 --> 17:52.080
Cisco or X Cisco and other folks from several other companies show up regularly, but there's

17:52.080 --> 17:54.840
not a certain governance until it moves into a non-profit.

17:54.840 --> 17:55.840
Okay, next.

17:55.840 --> 17:56.840
Go ahead.

17:56.960 --> 17:59.960
Yes, we have many identifiers.

17:59.960 --> 18:05.960
Is there a way to convert between some of them or not?

18:05.960 --> 18:11.400
Okay, so the question is we have many identifiers here.

18:11.400 --> 18:13.960
Is there a way to convert between some of them or not?

18:13.960 --> 18:14.960
What makes sense?

18:14.960 --> 18:17.960
Okay, I'll let the beat start.

18:17.960 --> 18:21.880
Okay, the short answer is yes.

18:21.880 --> 18:31.520
And in the end, if you get a checksum on say a Zilibar archive, that's essentially observing

18:31.520 --> 18:32.520
the content.

18:32.520 --> 18:38.760
So that's what you would get in a much more sophisticated way with the SWHD or Omnibor.

18:38.760 --> 18:43.520
If you know where you got it from, you can get a pearl.

18:43.520 --> 18:45.280
If you have a packet manifest, you get a pearl.

18:45.280 --> 18:50.680
The two are not in conflict, they're complementary.

18:50.680 --> 18:57.120
And the last answer I make is that in the things we do on a bot code, we have this database

18:57.120 --> 19:00.080
where we track in both the checksums.

19:00.080 --> 19:04.520
We don't track SWHD, but we don't track yet Omnibor.

19:04.520 --> 19:06.360
And we have the pearls for all the packages.

19:06.360 --> 19:13.320
So eventually there will be public data available to get this kind of mapping and correspondence.

19:13.320 --> 19:16.440
So as you can see from the table, they're two different.

19:16.440 --> 19:19.320
It's not easy to always translate, right?

19:19.320 --> 19:22.320
The same way, think of it, forget these things.

19:22.320 --> 19:28.720
If it's a URL and the text file, right, maybe it's always the same, maybe it has changed.

19:28.720 --> 19:32.040
Right, you don't know.

19:32.040 --> 19:33.680
This relies on the registry.

19:33.680 --> 19:37.880
We assume that the registry is responsible and it stays there.

19:37.880 --> 19:40.680
These are all based on the content, right?

19:40.680 --> 19:45.160
The nice thing is that I think we're using the same algorithm, so these are very easily

19:45.160 --> 19:47.000
convertible to each other.

19:47.000 --> 19:48.000
Right.

19:48.000 --> 19:52.880
These are just for files or, I mean, the usual things.

19:52.880 --> 19:54.640
I will borrow your phrase.

19:54.640 --> 19:59.800
It's complicated, but in this case, I think the short answer is no.

19:59.800 --> 20:07.520
Given a pearl, not all, but some pearls do not contain hash identifiers, only a location.

20:07.520 --> 20:12.160
If the content at that location is gone or inaccessible to you for some reason, you

20:12.160 --> 20:17.440
could not derive and could not translate that pearl into a hash ID.

20:17.440 --> 20:25.000
In either of these hash IDs, you cannot give only the hash ID, say the omnivore ID or the

20:25.000 --> 20:26.520
clever heritage ID.

20:26.520 --> 20:28.280
You can't just transform it to the other one.

20:28.280 --> 20:32.600
You have to go back to the original artifact and re-derive the other one.

20:32.600 --> 20:33.960
It's math.

20:33.960 --> 20:40.120
But there was a lovely research paper done recently on analyzing all of these.

20:40.120 --> 20:46.400
The outcome of that is to say, we probably need both at the same time, because there

20:46.400 --> 20:54.120
are certain benefits, use cases, needs that only can be answered from an extrinsic identifier

20:54.120 --> 20:57.840
and some that can only be answered from an intrinsic identifier.

20:57.840 --> 21:04.520
We've got to have a system that supports both at the same time to reference objects.

21:04.520 --> 21:08.200
Just one quick word there.

21:08.200 --> 21:12.720
We can do NPM install, react at 123.

21:12.720 --> 21:20.800
We cannot do today NPM install ABCD 3625, and it's not super expressive.

21:20.800 --> 21:22.800
We could.

21:22.800 --> 21:25.800
In the end, you may need both.

21:25.800 --> 21:26.800
Go ahead.

21:26.800 --> 21:27.800
Go ahead.

21:27.800 --> 21:38.800
So the question here is, really like the NPM, is there a way to do that?

21:38.800 --> 21:45.600
So the question here is, really like the omnibore information, and it's good for the

21:45.600 --> 21:51.320
compliance side of it, but will we have the information for the commercial components?

21:51.320 --> 21:55.480
And will basically people be providing it when they're sending things out, S-bombs,

21:55.480 --> 21:56.480
and so forth?

21:56.480 --> 21:57.480
Do you have any perspective?

21:57.480 --> 21:58.480
Right.

21:58.480 --> 21:59.480
Yeah.

21:59.480 --> 22:06.680
So things that are proprietary and commercial and they're not public, is it possible

22:06.680 --> 22:08.920
to use them effectively, efficiently?

22:08.920 --> 22:09.920
Okay.

22:09.920 --> 22:17.000
So the artifact graph that omnibore uses is content opaque.

22:17.000 --> 22:21.360
It's built out of the hash identifier of the content tree, but it doesn't tell you what

22:21.360 --> 22:22.900
the source code is.

22:22.900 --> 22:29.720
So hypothetically, a company which produces proprietary software could publish both the

22:29.720 --> 22:34.520
identifier of the end result and the full hash map of all of its components without

22:34.520 --> 22:36.280
telling you what's in it.

22:36.280 --> 22:37.280
They could.

22:37.280 --> 22:38.280
They could.

22:38.280 --> 22:39.280
Do they today?

22:39.280 --> 22:40.280
No, but they could.

22:40.280 --> 22:43.160
And some vendors are looking into doing this.

22:43.160 --> 22:44.160
Okay.

22:44.160 --> 22:46.680
He's been patient here, so.

22:46.680 --> 22:51.680
I would say the dinosaur I'm missing on the slide, there is this quote, CPE.

22:51.680 --> 22:52.680
Yeah, thank you.

22:52.680 --> 22:54.680
I was going to bring this.

22:54.680 --> 23:05.080
What I would encourage you is to find similar to the aliases in the vulnerabilities area,

23:05.080 --> 23:10.880
that you don't have just one system owning the truth, but you can digest multiple ones.

23:10.880 --> 23:13.440
I see very much a similarity here.

23:13.440 --> 23:15.520
Yeah, I do too.

23:15.520 --> 23:20.360
It was like I say, it was very much an elephant in the room and we will let Philippe talk

23:20.360 --> 23:23.160
to it because he's been dealing with it for a while.

23:23.160 --> 23:25.080
So two things there.

23:25.080 --> 23:30.000
First, we have to be grateful for CPE to exist.

23:30.000 --> 23:38.600
And I remember maybe about a year ago, I was in a call with folks that include the creator

23:38.600 --> 23:42.440
of CPE and he was apologetic saying, I'm really sorry for CPE.

23:42.440 --> 23:44.920
He says, don't be sorry, man.

23:44.920 --> 23:46.560
Nobody was doing anything before you.

23:46.560 --> 23:50.240
So it doesn't have to be sorry.

23:50.240 --> 23:52.880
So first, let's put things back in perspective.

23:52.880 --> 23:59.400
The second thing that comes from an era where the things people cared for was is Microsoft

23:59.480 --> 24:04.720
Office vulnerable is Adobe Acrobat vulnerable.

24:04.720 --> 24:11.360
We moved away from that massively and things are evolving and that's why we're here.

24:11.360 --> 24:18.200
The things about CPE versus other identifiers that you need to have knowledge that's external

24:18.200 --> 24:19.680
to the code.

24:19.680 --> 24:21.200
That makes it difficult.

24:21.200 --> 24:28.000
Originally, GNU ZeeLib was the name for ZeeLib.

24:28.000 --> 24:29.000
Nobody knows why GNU.

24:29.000 --> 24:32.400
It's changed since, but there's the difficulty.

24:32.400 --> 24:34.400
Each time you have something, you cannot observe the code.

24:34.400 --> 24:35.880
It makes things difficult.

24:35.880 --> 24:36.880
Okay.

24:36.880 --> 24:38.400
I think we're having to wrap up right now.

24:38.400 --> 24:39.400
We're getting pretty close.

24:39.400 --> 24:43.920
So if everyone just wants to give me a one minute summary of what their perspective is

24:43.920 --> 24:49.880
here and then I will let people meet up with the panelists outside the room, et cetera,

24:49.880 --> 24:51.680
if they want further discussions.

24:51.680 --> 24:52.680
Eva.

24:52.680 --> 24:54.000
Thanks, Kate.

24:54.000 --> 24:57.920
Moving on to what Philippe just pointed out and all of the conversations of the past few

24:57.920 --> 25:03.720
days and the last year around the European Commission and the CRA, the world has changed.

25:03.720 --> 25:09.000
Proprietary software is still super important, but we know that most software in the world,

25:09.000 --> 25:14.920
including lots of hardware, the stack is predominantly open source today.

25:14.920 --> 25:17.520
Open source is done by volunteers.

25:17.520 --> 25:18.520
It's heterogeneous.

25:18.520 --> 25:19.520
It's complex.

25:19.520 --> 25:20.520
The supply chains are deep.

25:20.520 --> 25:22.920
We try to do analysis.

25:22.920 --> 25:28.000
Our analysis tools fail because of the fractal nature of our dependency trees.

25:28.000 --> 25:36.560
I have yet to see any other proposals for identifiers that also give us visibility down

25:36.560 --> 25:38.640
that fractal dependency tree.

25:38.640 --> 25:41.200
I would love to see one.

25:41.200 --> 25:48.040
Just to add on top of this, there's a thing, a number of things you can observe.

25:48.040 --> 25:51.480
Other things you need to discover.

25:51.480 --> 25:56.320
There's two tools which are very useful there, being able to have an index.

25:56.320 --> 25:58.560
Index of omniboruses, the launched ID.

25:58.560 --> 26:03.520
Software it is a small index which has a couple of petabytes of code for you there to play

26:03.520 --> 26:07.000
with.

26:07.000 --> 26:12.120
The other thing is being able to do lightweight reverse engineering of the binaries that are

26:12.120 --> 26:15.240
built will go a very long way.

26:15.360 --> 26:16.480
There's existing techniques.

26:16.480 --> 26:19.560
I'm building a bunch of tools in this domain.

26:19.560 --> 26:25.560
Eventually there's, I think there will be ways to tag and document in the binaries and

26:25.560 --> 26:30.000
the more complex piece of code where the code comes from.

26:30.000 --> 26:31.000
Rust does it.

26:31.000 --> 26:38.360
There's a lot of binary tag also inside Go and other languages.

26:38.360 --> 26:43.160
In the end, it's a bit of a wide, wide West right now.

26:43.160 --> 26:48.600
There's transition as we said from proprietary only to mostly open source and this is difficult

26:48.600 --> 26:51.760
and we'll figure out something.

26:51.760 --> 26:53.160
Yeah.

26:53.160 --> 26:57.160
Yeah.

26:57.160 --> 27:01.360
I don't have much to add to this one.

27:01.360 --> 27:05.680
We need identifiers definitely in order to understand that we're talking about the same

27:05.680 --> 27:06.680
things.

27:06.680 --> 27:09.120
Right.

27:09.120 --> 27:14.000
We have seen there are different ways to approach it and there are different needs so you actually

27:14.000 --> 27:15.720
need more than one type.

27:15.720 --> 27:19.880
Don't think that you will ever get a single thing.

27:19.880 --> 27:24.400
And we will figure it out in the end.

27:24.400 --> 27:25.720
It's a problem for tomorrow.

27:25.720 --> 27:26.720
Yes.

27:26.720 --> 27:27.720
Well, yeah.

27:27.720 --> 27:28.720
Let's start.

27:28.720 --> 27:29.720
This afternoon.

27:29.720 --> 27:30.720
Yeah.

27:30.720 --> 27:31.720
Yeah.

27:31.720 --> 27:32.720
What are you doing after lunch?

27:32.720 --> 27:33.720
Yes.

27:33.720 --> 27:34.720
I'm going to take the panelists.

27:34.720 --> 27:35.720
Yeah.

27:35.720 --> 27:36.720
Yeah.

27:36.720 --> 27:37.720
Yeah.

27:37.720 --> 27:38.720
Yeah.

27:38.720 --> 27:39.720
Yeah.

27:39.720 --> 27:40.720
Yeah.

27:40.720 --> 27:41.720
Yeah.

27:41.720 --> 27:42.720
Yeah.

27:42.720 --> 27:43.720
Yeah.

27:43.720 --> 27:44.720
Yeah.

27:44.720 --> 27:45.720
Yeah.

27:45.720 --> 27:46.720
Yeah.

27:46.720 --> 27:47.720
Yeah.

27:47.720 --> 27:48.720
Yeah.

27:48.720 --> 27:49.720
Yeah.

27:49.720 --> 27:50.720
Yeah.

27:50.720 --> 27:51.720
Yeah.

27:51.720 --> 27:52.720
Yeah.

27:52.720 --> 27:53.720
Yeah.

27:53.720 --> 27:54.720
Yeah.

27:54.720 --> 27:55.720
Yeah.

27:55.720 --> 27:56.720
Yeah.

27:56.720 --> 27:57.720
Yeah.

27:57.720 --> 27:58.720
Yeah.

27:58.720 --> 27:59.720
Yeah.

27:59.720 --> 28:00.720
Yeah.

28:00.720 --> 28:01.720
Yeah.

28:01.720 --> 28:02.720
Yeah.

28:02.720 --> 28:03.720
Yeah.

