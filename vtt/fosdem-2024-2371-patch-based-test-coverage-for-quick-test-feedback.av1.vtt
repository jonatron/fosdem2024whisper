WEBVTT

00:00.000 --> 00:10.000
All right, next up, Shivam Gupta.

00:10.000 --> 00:11.000
Okay.

00:11.000 --> 00:13.000
Good afternoon, everyone.

00:13.000 --> 00:17.000
Today I will be talking about my GSOC project.

00:17.000 --> 00:23.000
It was mentored by Henrik Olson, and this GSOC project is about

00:23.000 --> 00:28.000
patch-based code coverage testing for LLVM patches.

00:28.000 --> 00:36.000
And so in this talk, the agenda is, first we will introduce what is the project is about,

00:36.000 --> 00:41.000
and then what is the terminology we use, like how LLVM test cases are written,

00:41.000 --> 00:51.000
and then we will see what is LLVM source-based code coverage that is used to get the code coverage of a patch.

00:51.000 --> 00:53.000
And then we see how it is implemented.

00:53.000 --> 01:01.000
It is basically a Python script, so we will see what are the functions used to implement this tool.

01:01.000 --> 01:05.000
And then we will see a demo, like it's already a patch is there in LLVM community.

01:05.000 --> 01:11.000
We will see like what is the lines are covered or what lines are not covered with this patch.

01:11.000 --> 01:16.000
So we will start by introducing introductions.

01:16.000 --> 01:20.000
So LLVM test cases are written in a lit format.

01:20.000 --> 01:27.000
Regression tests are written in lit format, and unit test cases are written in Google test format,

01:27.000 --> 01:30.000
or Google mock these formats.

01:30.000 --> 01:35.000
So the goal of this project is to help developer to create good test coverage for their patches,

01:35.000 --> 01:42.000
and it will also help the reviewers to know that the code they are submitting,

01:42.000 --> 01:44.000
it has a good test coverage or not.

01:44.000 --> 01:50.000
So this is the project, and to accomplish this project we have created a Python tool.

01:50.000 --> 01:57.000
It's around 800 lines of Python code, so it will fetch the patch as input,

01:57.000 --> 02:02.000
and then it will extract some information like what are the source lines in the patch,

02:02.000 --> 02:06.000
what are the test cases in the patch, test case lines in the patch,

02:06.000 --> 02:11.000
and then we build a LLVM project with the code coverage enabled.

02:11.000 --> 02:16.000
So it will instrument our binary.

02:16.000 --> 02:20.000
So whenever we run the test case with this binary,

02:20.000 --> 02:28.000
so it will generate a prof data file that will be further converted, further processed,

02:28.000 --> 02:36.000
and then it will show the lines which lines are covered or not covered by the source code of the patch.

02:36.000 --> 02:46.000
So LLVM test suits basically like they have two kind of test cases written for any patches.

02:46.000 --> 02:48.000
One is regression test, and second is unit test.

02:48.000 --> 02:53.000
Mainly the regression tests are written for most of the patches.

02:53.000 --> 03:01.000
So these regression tests are in .LL format or .C format for different tools.

03:02.000 --> 03:10.000
So mostly our focus is on regression tests, and some test cases are written in unit test case.

03:10.000 --> 03:16.000
So these test cases are test for libraries, like support libraries or FSEG data types.

03:16.000 --> 03:24.000
So these are checking the feature in the system, how it is well indicated in the system.

03:24.000 --> 03:27.000
So this is unit test case.

03:27.000 --> 03:45.000
Regression test is very small, but you can see at the top there is one run line which will actually run for this test case.

03:45.000 --> 03:47.000
Then there is unit test case.

03:47.000 --> 03:53.000
This is using Google Gold Test Library.

03:53.000 --> 03:55.000
So it has some micros to check.

03:55.000 --> 04:02.000
It is not important, but these two kind of test cases are in LLVM for any patches.

04:02.000 --> 04:08.000
And then we will see what is the source-based code coverage.

04:08.000 --> 04:12.000
So source-based code coverage consists of three steps.

04:12.000 --> 04:16.000
The first step is compiling the program with the coverage enabled.

04:16.000 --> 04:21.000
We want to instrument any binary.

04:21.000 --> 04:30.000
So we will use a fropile generate this flag we will use and this will generate foo binary which is instrumented.

04:30.000 --> 04:37.000
So in the next step when we run this binary, it will generate a prof data file.

04:37.000 --> 04:46.000
That prof data file contains the data for further creating coverage reports.

04:46.000 --> 04:49.000
So next is the tool is LLVM prof data.

04:49.000 --> 05:02.000
This tool is used to convert the prof format to prof data format which is further used by LLVM cov to generate or show the report of what lines are covered or not.

05:02.000 --> 05:09.000
In the next slide we have a simple test case and I have generated the report.

05:10.000 --> 05:13.000
It checks if the number is even or odd.

05:13.000 --> 05:22.000
If we pass suppose 5, it will say that the number is odd and this line, this if condition will not run.

05:22.000 --> 05:23.000
So it will show like this.

05:23.000 --> 05:29.000
This is the report of LLVM cov for any program.

05:29.000 --> 05:33.000
Next is implementation.

05:33.000 --> 05:36.000
So for implementation I have submitted two patches.

05:36.000 --> 05:43.000
For this first one is about the change in LLVM lit.

05:43.000 --> 05:51.000
This is the testing tool that is used to run the test case, regression test case in LLVM.

05:51.000 --> 05:59.000
So initially whenever we run a test case, it will generate prof data in some random name.

05:59.000 --> 06:05.000
So we have modified that and we have given a proper name for every test case.

06:05.000 --> 06:08.000
So it will generate a proper name in a specific directory.

06:08.000 --> 06:15.000
So this is categorization of prof data.

06:15.000 --> 06:28.000
Next we have the main tool that has all the functions that will pass the patch and then build the project, LLVM project and then generate data.

06:28.000 --> 06:35.000
Then process the data to show the coverage report to reviewer or a patch author.

06:35.000 --> 06:40.000
Next these are the some functions that are implemented in the tool.

06:40.000 --> 06:44.000
First two function is just a logging function.

06:44.000 --> 06:53.000
And then it is sequentially like we as a name suggest we have first we create the patch from the last commit or from the patch itself.

06:53.000 --> 07:06.000
And then we accept the source file and then we have write source file allow list that is used to reduce the coverage data.

07:06.000 --> 07:15.000
Because if we generate the coverage data for all the files of LLVM then it will be around 150 MB for each test case.

07:15.000 --> 07:17.000
So it will be difficult to process later.

07:17.000 --> 07:22.000
So we will use, we have used a flag afro file list.

07:22.000 --> 07:29.000
This flag used to generate coverage data for only the files in the patch.

07:29.000 --> 07:35.000
So next we accept the modified source line from the patch and then we build the project.

07:35.000 --> 07:38.000
We build the project with a flag LLVM build instrumentation.

07:38.000 --> 07:44.000
So this flag is passed during the CMECH invocation.

07:44.000 --> 07:54.000
So when we pass this the binary that will be old for LLVM project will have instrumentation enabled.

07:54.000 --> 08:04.000
And then we run the single test case with coverage and that is helper function next the modified lit test case or unit test case.

08:04.000 --> 08:09.000
Whichever they if it is if the patch contains a lit test case then it will run the regression.

08:09.000 --> 08:18.000
It will run the that function and if it has unit test case then this function will call and the test case will run.

08:18.000 --> 08:23.000
And next we have a process coverage data which will process the data.

08:23.000 --> 08:30.000
And next similarly we have a coverage file and it will run.

08:30.000 --> 08:35.000
Then we will have a print coverage detail that will actually be printing the coverage detail.

08:35.000 --> 08:42.000
We will also have a log file. So print coverage detail have a print a lot of details.

08:42.000 --> 08:55.000
So it will print something to log file and then we will print common uncovered line which is so in a patch there is one source file.

08:55.000 --> 08:57.000
But there are many test case.

08:57.000 --> 09:02.000
If one test case is covering the source file then it is covered.

09:02.000 --> 09:10.000
But if all the test case are not covering a source line then it means that this line is uncovered.

09:10.000 --> 09:20.000
So it will print the uncovered line this way and then there are some helper functions which is not important.

09:20.000 --> 09:32.000
This is the GitHub CI workflow that is actually is a file that is used to compile the project like on GitHub.

09:32.000 --> 09:40.000
So it is like it is holding the project and then at the end it is running a Python Git code coverage.

09:40.000 --> 09:55.000
This is the file name. So it will run here in the Python code and then it will print the coverage result.

09:55.000 --> 10:00.000
I will show this is the format.

10:00.000 --> 10:05.000
It will show the common uncovered line for the...

