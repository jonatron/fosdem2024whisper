WEBVTT

00:00.000 --> 00:11.800
Good morning everyone. I'm going to speak about a few stuff about different open source

00:11.800 --> 00:15.940
multimedia communities and I'm going to speak about what happened last year because we

00:15.940 --> 00:21.800
had the beginning of the year which is why we are talking about 2023. For those who

00:21.800 --> 00:27.000
don't know me, I'm the president of the VLAN nonprofit. I'm an active member on a few open

00:27.000 --> 00:31.240
source multimedia community. I'm also doing other things outside of the open source

00:31.240 --> 00:36.360
multimedia community but I won't say that because that shouldn't happen. I have also a few companies

00:36.360 --> 00:42.240
who are doing open source multimedia consulting. So I was here last year, I guess, quite a few

00:42.240 --> 00:50.240
things happened, mostly about releases on FFMPEG, on David, on VLC and others. The good thing is

00:50.240 --> 00:56.440
like last year I came and gave some promises and we actually did the promises. Well, people did.

00:56.880 --> 01:05.000
I did nothing except making some slides. So FFMPEG 6.0 was stuck just after 4th

01:05.000 --> 01:14.360
them last year. It was quite a large release because there was a lot of discussion about

01:14.360 --> 01:19.920
what it was because we are trying to move FFMPEG to a one-year release schedule. So what is a

01:19.920 --> 01:24.560
large release and what is not a large release? So I started doing stats because for some reason

01:24.680 --> 01:31.280
no one did stats in the past and seeing that one release gets 200 people around is quite large.

01:32.800 --> 01:37.720
Not people sending patches but actually merging them there because the FFMPEG community still has

01:37.720 --> 01:44.480
issues merging all the patches that we receive. Major changes. The beginning of work on

01:44.480 --> 01:50.640
multimedia spreading mostly on the Merx website at the beginning, risks 5 optimization, hardware,

01:51.000 --> 01:58.560
AV1 decoding and some work on FFTs, new APIs. Well, see my talk from last year because that's

01:58.560 --> 02:06.120
mostly it. A lot of new codecs and filters. Well, I did the presentation a few days before

02:06.120 --> 02:13.920
release. The release happened. It was a big success. I hope. So then the next major release

02:14.040 --> 02:21.360
was 6-off. It was a bit difficult to get. We were quite late compared to our initial schedule.

02:21.360 --> 02:26.920
Our initial schedule would have been summer. It was more autumn, like October, November.

02:26.920 --> 02:34.040
And this one was supposed to be a small release. It's not a major release. And you still see

02:34.040 --> 02:41.920
that it's 150 contributors and the number of line changes is insane. Of course, the larger

02:42.480 --> 02:50.760
contributor is Anton. You should see his talk from this afternoon. But a ton of work on

02:50.760 --> 02:57.760
multimedia spreading of the FFMPEG CLI. Of course, it's not completely activated in 6.1,

02:57.760 --> 03:02.440
right? But still all the commits went through because Anton knows how to do small commits

03:02.440 --> 03:08.400
instead of big, major patch sets, which is easy to review. A lot of things happened on the Vulcan

03:08.480 --> 03:18.160
decode. Acceleration, hardware acceleration, mostly the work from Lin. It's maybe one API to all the

03:18.160 --> 03:26.240
new hardware API in the future, right? Yeah, OK, no. It's another one. At least this one is

03:26.240 --> 03:36.040
supposed to work cross-platformally. Well, then like a VR API. I did push a lot on FLV plus and

03:36.040 --> 03:41.520
RTMP plus, which is basically extending RTMP and FLV for new collects. So if you're not happy, blame

03:41.520 --> 03:49.600
me. I was deeply unhappy about all the new stuff which were supposed to replace RTMP and like

03:49.600 --> 03:56.320
whether it's called RIS, the sortie, or Rush, or stuff like that, right? Oh, it's going to be great.

03:56.320 --> 04:03.080
Yes. But RTMP is here. RTMP is everywhere. RTMP is on devices. And like, oh, yeah, we're going to do

04:03.160 --> 04:09.240
a new stand-down in 10 years was not really what I liked. Also because never happens, right? See the

04:09.240 --> 04:17.720
XKCD about that. So we're extending the RTMP to support multi-track audio, multi-channel audio,

04:17.720 --> 04:25.800
new collects, especially so now you can give AV1 and also HDR over RTMP. Is that a good solution? No.

04:25.800 --> 04:33.000
Is it a pragmatic solution? Yes. New decoders like RivaTuner, but also VMIX, which I quite care about,

04:33.960 --> 04:40.600
and quite a few passes for decoders that are coming afterwards, but they got in C.1. And the

04:40.600 --> 04:48.600
beginning of RIS 5 optimization. And for those who care on Linux, there is now an AV1 via API

04:48.600 --> 04:59.560
encoder. 7.0. 7.0 is out soon, TM. It's a very large release, probably one of the largest.

04:59.960 --> 05:07.480
EVC, for those who don't know, it's Samsung Kodak that was underlined by ISO, which is supposedly

05:07.480 --> 05:14.280
with less patents than VVC. I say supposedly because of course that's not true, right? Because

05:14.280 --> 05:23.320
probably Cisvell will do another patent put around that. The major part is VVC, right? It's mostly

05:23.400 --> 05:32.440
done by a few people, some in China, some around here. And that's probably one of the largest

05:32.440 --> 05:37.640
decoder that we've seen in FFMPEG in the last few years. Because as you know, everyone decoder was

05:37.640 --> 05:46.680
done in David, mostly for licensing reasons. We wanted to have AV1, MIT and BSD license decoder,

05:47.560 --> 05:56.520
see the essay of Stolman about why that's okay. And now we have a VVC decoder, right? So it's

05:56.520 --> 06:01.880
probably the largest work that we've seen on FFMPEG since HVC decoder, and it went a lot better.

06:03.960 --> 06:08.360
It's still going to be marked as experimental because it's not first enough, so we don't know

06:08.360 --> 06:15.640
exactly the security of that. But what's interesting is that's around 18,000 lines of code.

06:16.760 --> 06:21.640
It doesn't support the whole full VVC almost. There are a few features missing,

06:21.640 --> 06:29.080
so I'm not sure how many will be in 70. And also it's reusing some of the assembly from HVC, but

06:29.080 --> 06:35.800
also some assembly from David, right? Which is something I did not expect. But we'll talk about

06:35.800 --> 06:41.800
that for the next year, I guess, because we'll have a lot of VVC assembly this year into FFMPEG.

06:42.760 --> 06:53.960
QoA, more RTMP, more AV1 work, and lately AVIF support is coming. I hope real video will come

06:53.960 --> 06:58.360
because there was a batch on the mailing list. I think it was forgotten. No one cares, but just

06:58.360 --> 07:04.680
like it. For old guys like me, like having real video six was cool, and I hope Lynn can finish

07:05.160 --> 07:07.880
HVAC. Else it will go to the next release.

07:10.120 --> 07:20.680
Stats. So I did two types of stats compared to 6.0 and compared to 6.1, right? So if you look at

07:21.560 --> 07:30.840
for major release, it's 180 contributors, 2,500 file touch, and more than 350,000 lines of code

07:30.840 --> 07:37.400
in one year. That is huge compared to what we've done for FFMPEG 6, right? So most like, well,

07:38.520 --> 07:46.040
a good 50% degrees. Of course, half of it is from Anton. No, okay, no. Maybe not, but if you've not

07:46.040 --> 07:53.960
seen the talks from Anton this afternoon or the one from Anton at VDD, you have to, right? Because,

07:53.960 --> 08:00.440
but basically it's much better for everyone. And mostly people who are using directly FFMPEG

08:00.440 --> 08:06.120
CLI. And if you want to have any ABR letter, multiple encodes, multiple protocols, and so on,

08:06.120 --> 08:15.160
you don't need to use directly the, the, do a new tool based on the APIs. Of course, a lot of cleanups

08:15.160 --> 08:19.560
and API changes because it's a major release. So of course, a lot of threat safety because

08:19.560 --> 08:27.000
else the military spreading work will not work. A lot of things on arm assembly, mostly for HVAC,

08:27.000 --> 08:33.080
but also for a few others. So good, better speeds. And on the API changes, there is lots of new

08:33.080 --> 08:37.720
codecs and profile because of the one that we added. Quite a few things about HGR metadata,

08:38.440 --> 08:46.200
IMF headers and the related channel mapping changes. There is a new thing called Stream Group,

08:46.200 --> 08:52.920
which we're going to use for IMF, maybe for enhancement layers like LCEVC or other things

08:52.920 --> 09:00.200
like that, some Dolby profile. Seven, eight, I don't remember, right? But some of those.

09:01.960 --> 09:08.520
Lots of discussion about side data, including the new packet side data from stuff on Direct3D12.

09:08.520 --> 09:15.240
So we can have a Direct3D12 acceleration. And of course, because it's a new major bump,

09:15.240 --> 09:22.200
a lot of deprecations, including the final YUVJ deprecation. Yay, we've only talked about that

09:22.200 --> 09:41.400
since 2013. Yeah, so military spreading, see the talk, right? You have to. So that's mostly

09:41.400 --> 09:49.960
it about for FFMPEG. I'm now going to speak a bit about David. So a lot of things happen on David.

09:53.160 --> 09:58.200
Yeah, sorry. A lot of things happened on David in the last year, right? We had like

09:58.200 --> 10:03.400
quite a few releases. They look small. They're not. There are a ton of work

10:04.760 --> 10:09.080
in February, in May, in September. But what's interesting is that we did basically all the

10:09.080 --> 10:13.800
optimization for everything that you care about today, right? So all the neon is done,

10:13.800 --> 10:21.560
all the SSC3 is done, 32 bits, 64 bits. AVX2 is done. We finished by all the intratools,

10:22.120 --> 10:28.440
Z1, Z2, Z3, like really the stuff that, except when you care about image, are very small in terms of

10:29.000 --> 10:35.000
runtime. But all of that is done, right? So for normal people, the work on David is done, right?

10:36.360 --> 10:44.360
Well, I'm not sure we are normal people. So now there are things happening on AVX512,

10:45.080 --> 10:49.880
mostly by Enric, right? So, and the good thing is, a contrario from what people have been saying

10:49.880 --> 10:55.240
for a long time, which, oh, no, you cannot use AVX512 to be faster than AVX2 because of the issue

10:55.240 --> 11:00.200
with TDP and the clock changes. It's actually faster, right? And in many cases. And also because

11:00.200 --> 11:04.600
now we have other chips, which are not done by Intel and are quite competent, you can have

11:05.640 --> 11:14.600
AVX512 without going, slowing down the whole CPU, right? So I think it's mostly done for AVX512,

11:14.600 --> 11:20.360
because on AVX512, we will not do all the coverage of AVX2 because in some places it's not

11:20.360 --> 11:25.240
worth it. But this is some of the things that are happening on the next release, which is happening

11:26.280 --> 11:34.760
next week. Martin, maybe. There is RISC5 that was done by Nathan. So we start the RISC5

11:34.760 --> 11:40.440
port. Mostly the inverse transform were done. Hopefully more people will help this year.

11:41.400 --> 11:51.160
And from nowhere, from China, some people arrive with a long arch support and they did a ton of

11:51.160 --> 11:56.920
things, right? Like a lot of the inverse transform, some loop filter, some loop restoration and MSAC,

11:56.920 --> 12:06.280
right? So that's quite useful. But still, it's like a bit more niche than the usual, the normal

12:06.360 --> 12:13.960
mainline users. Interesting things were done on reducing memory usage, because some people,

12:14.520 --> 12:21.320
I think, meta complain about that. And it was just like, oh, okay, yeah. One of the problems with

12:21.320 --> 12:27.640
memory on David is the way we're doing the frame threading, which is why David is so fast. But

12:27.640 --> 12:33.400
like one of the problems is that it can use a bit more memory. So we looked at that and we did

12:33.480 --> 12:39.880
some fixes for that. The next release, I don't know when exactly it's out, because there is some

12:39.880 --> 12:46.840
security issues that are integral overflows and I think are exploitable. So I need to discuss with

12:49.400 --> 12:56.600
Chromium people to be sure that they know before I do the release. But that's mostly about it on

12:56.600 --> 13:04.840
David. We are looking at David hybrid decoding on GPU, but so far I don't have much to say about that.

13:07.080 --> 13:19.400
A bit about VLC. We did quite a number of minor releases of VLC this year, mostly about

13:19.960 --> 13:31.320
3.0, lots of security issues. The last release was 3.0.20, three months ago. And we've had a large

13:31.320 --> 13:36.280
number of downloads. We've seen 150 million downloads in three months, which is around 50

13:36.280 --> 13:43.400
million per month. So that's very steady. And you know that I care about one release number

13:43.480 --> 13:49.400
or download on one release, because you can know, it can help to have the install base of VLC.

13:50.440 --> 13:54.600
So the good thing is that we are soon going to beat Firefox in terms of users,

13:56.280 --> 14:03.880
not because we're getting bigger, but because... But yes, that's interesting is that the number

14:03.880 --> 14:12.520
of downloads in VLC is actually increasing in the first month. Like in five months, we always get

14:12.520 --> 14:21.640
around 220 million. Now we're seeing that it's getting a bit more. Usually in three months,

14:21.640 --> 14:27.080
we have 120 million. This is what we had two years ago. So we're at least getting bigger.

14:29.720 --> 14:37.880
A lot of those users are of course on Windows and Mac OS. What we're seeing is that the number

14:37.880 --> 14:48.840
of users on Mac OS is increasing, which is worrying for me. But VLC4, a lot of work happening on the

14:48.840 --> 14:54.280
clock. We have lots of difficulties stabilizing the new clock, which is one of the large work on

14:54.280 --> 15:02.120
VLC4. And the cool stuff that we've been doing that are finally out, which is the VLC on Unity and

15:02.120 --> 15:08.280
VLC on Unreal so that you can use open source tools directly to output video and real time video

15:08.280 --> 15:14.120
inside 3D engines. And of course we did some stuff on VLC in the web browser because it's actually

15:14.120 --> 15:21.400
working now. But most of the things that happened this year on VLC are related to the Android and

15:21.400 --> 15:26.440
iOS versions. I don't talk often about those, but for them, because usually I don't have time,

15:26.520 --> 15:32.440
so this time I have. At the same time, we improved quite a bit the Android Auto, which is different

15:32.440 --> 15:40.120
from Android Automotive. Well, it's Google, right? They can find a great naming, then they fuck it up.

15:40.920 --> 15:48.120
So Android Auto is like your normal car and you can basically play with something that is on the

15:48.120 --> 15:54.920
phone. So we have had major stuff on Android Auto, right? So the app is actually usable. It's not

15:54.920 --> 16:05.320
done by a few nerds. And at the same time, we had Apple CarPlay, which is not like Apple Car

16:06.840 --> 16:13.400
because that's for 2028. But yeah, so actually now people are using it because it's usable. Most of

16:13.400 --> 16:17.960
the people use that for music, of course, and not really for video because you shouldn't watch video

16:17.960 --> 16:24.680
while you drive. Some people are laughing, but you know that now bigger cars have actually

16:25.240 --> 16:33.320
screens at the back for the kids to watch directly. Anyway, Android 3.5 and 3.6 of VLC got big jump on

16:33.320 --> 16:38.280
foldable, right? So because like we're back in the 90s, now you can have flip phones that you can

16:38.840 --> 16:46.360
open, right? Quite popular in the US, weirdly, when we see the stats. No one else cares.

16:47.320 --> 16:53.480
Support for Android 12, 13, 14 because, well, they need to justify new things. And of course,

16:53.480 --> 17:01.160
it's breaking the UI and breaking the permissions for absolutely no gain for their users. But mostly,

17:01.160 --> 17:07.160
we back ported or forward ported, I don't know how you call that, the web server features that we

17:07.160 --> 17:12.680
have on iOS, which is extremely popular to Android. So you can basically upload files directly through

17:12.760 --> 17:20.120
a web browser because MTP and USB is now completely broken on modern Android versions because

17:20.120 --> 17:28.280
they decided that, yeah, you can't use that anymore. On iOS, a lot of things that were already on the

17:28.280 --> 17:32.440
Android version came, right? The other way around, we tried to match them, play back history,

17:32.440 --> 17:39.880
but so everything like network library features, right? So you can use your Plex or DLNA server,

17:39.960 --> 17:46.120
SMB server and still have like continuity history and so on, right? External subs,

17:47.000 --> 17:52.040
for some reason, Felix, I did CDG support. Where is Felix? Why?

17:54.840 --> 18:03.960
People asked you to add karaoke of CDG? Who are they? Why? Okay, I'm sure, MKA. But the last thing

18:04.040 --> 18:11.720
interesting is we have now support for VisionOS. So if you have 200, then 300,000 euros, you can buy

18:11.720 --> 18:20.280
one, right? And so it seems that Apple has no idea why would we have support for VisionOS, right?

18:20.920 --> 18:25.640
The SDK is completely broken, nothing works, but you can run VLC on it and watch

18:26.600 --> 18:34.680
your favorite movies directly on VisionOS. Yeah, now I'm just going to speak a bit more

18:34.680 --> 18:42.680
about the community. We did great VDD in Dublin thanks to Anil and Vibhuti. We did, as usual,

18:42.680 --> 18:48.680
crazy stuff at night in Dublin. People thought we were crazy. We are. But it was like quite a good

18:48.680 --> 18:56.920
VDD. A lot of VLC and FFMPEG falls were here, so that was pretty cool. But it's important because

18:56.920 --> 19:07.080
like our communities are sometimes a bit difficult. And so on video land, we organized VDD 2023. It was

19:07.800 --> 19:13.240
important because like the last things were that we didn't have, we didn't do enough VDDs because

19:13.320 --> 19:20.280
of COVID. And so we did some elections. We have a lot of things that we're going to change in the

19:20.280 --> 19:24.840
nonprofit, mostly on the infrastructure work. We need to buy new servers and we do most of our

19:24.840 --> 19:32.520
infrastructure because our new servers are now 10 years old. We did a NAB boost, which was completely

19:32.520 --> 19:41.480
insane with our big Julien. It was quite fun. On the other side, on FFMPEG organization, there were

19:42.200 --> 19:48.680
lots of discussion about the community management. One of the reasons is that when we decided the

19:49.720 --> 19:58.120
General Assembly elections, and it was not precise enough the way we would update the list of members,

19:58.120 --> 20:05.640
so there was a lot of discussion. But like the problem is how do you reboot strap based on

20:05.640 --> 20:12.520
something that is not correctly well done? We should have used Lydia earlier to have like good

20:12.520 --> 20:22.440
organization. But anyway, this is fixed as part of this year. So we now have a good General Assembly

20:22.440 --> 20:27.560
and so we managed to be like T-Series, which is technical committee and community committee,

20:27.560 --> 20:35.160
so that we will be able to fix our discussions, at least decide on them. And also like we've

20:35.240 --> 20:42.280
been doing FFMPEG technical meeting, the last one was at VDD. We did offer one in June in Barcelona.

20:42.280 --> 20:46.840
Was it the year before I don't remember? And one at Fosdam, right? So trying to do what we've been

20:46.840 --> 20:55.320
doing on VLC, which helped a lot, also on the FFMPEG part. Last part is just like, and that's for a

20:55.320 --> 21:01.240
lot of people watching, not too many people in the room, but like the FFMPEG community needs more

21:01.240 --> 21:06.360
support, more corporate support, more money, right? It's now like a core infrastructure project,

21:06.360 --> 21:11.160
and it's one of the only ones that is not supported by Linux Foundation and CNCF and all those people

21:11.160 --> 21:17.480
who have a lot of money. So the only two companies were actually giving like really supporting

21:18.360 --> 21:26.040
YouTube and Meta. But the other one is very difficult to get any cent, because like some of the big

21:26.040 --> 21:29.400
GPU chip providers are very poor when I ask them.

21:33.880 --> 21:37.480
I would suggest that if you have time, look at the talks from Kiran at

21:38.120 --> 21:44.040
Demux where I explained all those issues, but like we really need help on all those things. And

21:45.480 --> 21:47.400
I think that's it. Thank you everyone.

21:47.960 --> 21:59.320
And because for once I'm not rushing, I even have time for questions.

22:03.800 --> 22:05.640
No questions? Yeah?

22:06.600 --> 22:08.120
What about the LTS?

22:11.560 --> 22:16.760
So in theory? Okay, so the question was, and someone asked the question to Anton before,

22:16.760 --> 22:20.920
and I think Anton skipped the answer. Yeah, I didn't answer the LTS part because I forgot.

22:21.560 --> 22:25.240
Yeah, yeah, yeah, yeah. You forgot or you did not like the question?

22:29.240 --> 22:34.680
If we follow the plans, 7.1, which will be at the end of this year, will be LTS.

22:35.640 --> 22:37.880
That's at least supposedly the plan.

22:40.840 --> 22:44.600
Are we going to match our plan? Yeah, I think so.

22:47.320 --> 22:54.920
The plan is to have 7.5, 7.9 as LTS, and so 7.1 as LTS. Yeah, there we go.

22:58.520 --> 23:03.000
No, 2027, that's a target.

23:06.280 --> 23:09.960
Other questions? Yes?

23:19.880 --> 23:27.400
Yeah, so Unity is a piece of shit company. They are using open source tooling and they're based

23:27.400 --> 23:33.640
at the beginning, the web completely based out of the work on C-Sharp on Linux, right? So it's

23:33.640 --> 23:42.120
basically a C-Sharp store. They're using a ton of open source libraries, but including LGPL and GPL

23:43.480 --> 23:49.960
libraries in their tooling and so on. But if you do extensions on the store, right,

23:49.960 --> 23:54.920
what like we're doing, they now refuse open source and not just GPL or GPLv3, right, like

23:55.880 --> 23:59.000
Apple or Microsoft, like just LGPL completely off, right?

24:03.640 --> 24:05.100
You

