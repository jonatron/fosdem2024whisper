WEBVTT

00:00.000 --> 00:11.920
That was helpful. Thank you. Thanks for joining. This is going to be a talk about a fun project

00:11.920 --> 00:17.920
that I started, I think it's almost four years now, so I feel like I'm sort of milking the

00:17.920 --> 00:24.800
idea, but it's pretty cool. It's back in 2019, I guess. I ended up building an artificial

00:24.800 --> 00:32.640
nose using some cool tech, and I'm going to talk a bit about the tech behind it and how I ended

00:32.640 --> 00:41.360
up moving the project from a really, really dirty weekend hack into something that's hopefully

00:41.360 --> 00:48.240
more future-proof and using cool things like Zephyr. So, a few words about myself. I'm a

00:48.240 --> 00:56.240
Benjamin. I'm based in France for the past year, almost to the day, actually. I've been working as

00:56.240 --> 01:02.640
a developer advocate for the Zephyr project at the Linux Foundation, and I do many things, including

01:02.640 --> 01:11.120
as a good French person, I guess, baking bread. And I don't know about you guys, but I've been

01:11.120 --> 01:16.720
trying to perfect my bread recipe for probably over 30 years. Like, I'm still not really happy about

01:17.440 --> 01:24.080
the way it turns out. Like, it's a bit random, right? And so, back, I think, in the really first few

01:24.080 --> 01:30.560
weeks of COVID, with like being stuck at home, lots of times on my hands, I was like, maybe technology

01:30.560 --> 01:37.840
can help me improve my bread recipe. What if I could figure out a device with maybe some AI

01:38.720 --> 01:46.480
in the mix that I could like train to figure out when my sourdough starter would be perfectly

01:46.480 --> 01:54.320
fermented? In my head, at least, the idea would be that I would buy AI, figure out when the sourdough

01:54.320 --> 01:59.760
kind of looks all right, bake the bread, figure out if the bread is good or not, give it a, like,

01:59.760 --> 02:05.360
oh, it's a nine out of 10. Like, it's really crispy, really nice. And then do the training that way,

02:05.360 --> 02:13.440
right? And so, the idea would be to smell the sourdough starter to capture some information,

02:13.440 --> 02:18.960
which in my head, at least, I'm not a chemist, I'm not a food chemist, but measuring things like

02:18.960 --> 02:25.600
the amount of volatilagony compounds and CO, CO2, whatever, there has to be a correlation and like

02:26.400 --> 02:31.440
the perfectly ripe sourdough starter, there has to be a way to identify it, right? And so,

02:32.320 --> 02:37.920
back in 2019, there was also this sort of cool kid on the block, new cool kid on the block,

02:37.920 --> 02:45.440
which was, and which is, tiny ML and things like TensorFlow Lite, finally available on micro

02:45.440 --> 02:52.720
controllers, things like that, right? And the thing is, I know really little about neural networks

02:52.720 --> 02:59.360
myself, like, for some reason, the math, like, whenever I would open a book about neural networks,

02:59.360 --> 03:04.880
and like, oh, yeah, it's easy, you're going to recognize handwritten digits, like, this is a bitmap,

03:04.880 --> 03:12.400
you go through some layers, blah, blah, blah, oh, you recognize the digits, that was going way

03:12.400 --> 03:20.560
over my head. The thing is, playing with physical things, more tangible things, I actually was a

03:20.560 --> 03:25.840
role in just a few hours, really, and with the help of some tools, some of you might have heard

03:25.840 --> 03:30.800
about something like, called edge impulse, it's not strictly speaking open source, although it's

03:30.800 --> 03:38.080
based on TensorFlow Lite for micros, but it helped me train a model, basically, taking some Arduino,

03:38.720 --> 03:47.360
like, an Arduino compatible device, this is a WIO terminal, a Cortex-M4, taking a gas sensor,

03:48.640 --> 03:54.480
feeding the data and like, capturing the data quite often, taking this data into some kind of

03:55.360 --> 04:01.600
training algorithms, and I would be able to figure out the difference, not necessarily between good

04:01.600 --> 04:07.840
bread and bad bread, because remember, COVID, like, flour wasn't even available in the supermarkets,

04:07.840 --> 04:17.360
but booze that I had in my house, so I actually figured that it was able to make the difference

04:17.360 --> 04:24.000
between not only, like, rum and whiskey, but it was actually accurate enough that two, like,

04:24.000 --> 04:30.160
one really pitted whiskey and one slightly less, so it would make up the difference, right? And I

04:30.160 --> 04:37.360
started to talk about the project, because I found it really cool, like, not do the silly bread thingy,

04:37.360 --> 04:43.200
but something slightly more useful, which is figuring out in the human breath, when there are,

04:43.840 --> 04:51.120
when you can spot the markers for fungal pneumonia, Kaleb, the kid almost died, basically, when he was

04:51.120 --> 04:56.800
really young and the doctors couldn't diagnose the disease, turns out that since then, there's now

04:56.800 --> 05:01.680
literature available out there that says that, yeah, there are some markers, and he sort of

05:01.680 --> 05:07.280
built a proof of concept for that, so that felt really good, but what didn't feel really good is

05:07.360 --> 05:13.360
that the code that was from day one available on GitHub of that project that I have to put together

05:13.920 --> 05:20.160
is horrible. It's like 2000 lines of boilerplate, copy paste, typical Arduino code, right? Like,

05:20.160 --> 05:25.760
I mean, I've been gathering bits here and there, of course it works, but it's really, really bad.

05:27.520 --> 05:30.640
Small, just like really quickly, because I think it's worth mentioning,

05:31.360 --> 05:36.960
how does a machine smell anyways, because we're all, I think, familiar, or we all think of

05:37.040 --> 05:42.480
things like temperature sensors and humidity and illuminance, like that certainly comes to mind,

05:42.480 --> 05:46.160
because we actually also use them every day, but there's also sensors that can smell,

05:47.360 --> 05:54.400
they measure the concentration of particular chemicals in the air. The way it works is basically

05:54.400 --> 06:02.080
just a chemical reaction between a tiny slice of metal oxide semiconductor, and based on how many

06:02.960 --> 06:09.760
of the offset compounds can be found in the air, you can measure a variation in the change

06:09.760 --> 06:17.280
in resistance, right? The more VOCs, voltallogonic compounds would be in the air, the higher the

06:17.280 --> 06:24.480
resistance, for example, which means that I could measure, like, start acquiring data,

06:24.480 --> 06:31.280
putting my sensor on top of bottles of alcohol and tea and coffee and whatnot, and capture

06:31.280 --> 06:37.360
basically what I would call the fingerprint or the olfactory fingerprint of a particular smell,

06:37.920 --> 06:45.840
and then with a bunch of AI and ML, basically figuring out what in this raw data identifies a

06:45.840 --> 06:54.000
smell, and so my intuition would be not knowing, again, a thing about signal extraction and all

06:54.000 --> 06:59.440
that kind of thing, would be, oh, well, but if this is whiskey, then if I were to write down what

06:59.440 --> 07:04.400
makes whiskey so special, it would be probably something like, oh, yeah, when you smell whiskey,

07:04.400 --> 07:11.520
nitrogen dioxide goes up, carbon monoxide, not so much, VOC goes up as well, maybe in a slightly

07:12.480 --> 07:18.240
more steady way, and so basically what happens then, the way the model works, is just that, except

07:18.240 --> 07:23.760
that it's a machine doing it, looking at the raw data, doing some basic statistics to extract the

07:23.840 --> 07:31.840
mean, the mean, the max, the standard deviation, like, all those things that could potentially

07:31.840 --> 07:40.640
characterize the smell, and then this pre-processing, this DSP, if you will, then goes through a typical

07:40.640 --> 07:47.280
neural network, so this is fun, you get to the point where you have this funny looking thing,

07:47.280 --> 07:53.120
like you can even go the extra mile and, like, sort of, 3D print, the enclosure, and there's,

07:53.120 --> 07:59.280
yeah, you have a lot of fun. I ended up building and packing, again, like, in those 2,000 lines of

07:59.280 --> 08:05.680
code, plus all the libraries, of course, that I'm pulling, I would have a GUI, I would have

08:06.560 --> 08:11.280
Wi-Fi integration, actually, that's something that I added eventually, and, like, whenever I smell

08:11.280 --> 08:17.040
something, I can push it using MQTT to a server, there's, of course, tons of hardware interactions,

08:17.200 --> 08:23.040
and all that needs to work at the same time, except that if you do it the Arduino way,

08:23.600 --> 08:29.520
and the lazy way, I guess, then you end up just doing this, which is, again, not necessarily,

08:29.520 --> 08:38.080
like, if you're lazy and just, like, eager to get your POC and your thing working, you end up putting

08:38.080 --> 08:46.000
a lot of code in, essentially, a superloop, and so, as often as possible, I need to do all this,

08:46.720 --> 08:52.400
which is acquiring sensor data, which, by the way, you don't need to do that often for getting

08:52.400 --> 08:59.680
good accuracy, like, the way the device works is that I just sample the gas sensor readings

09:00.800 --> 09:07.120
10 times a second, it's not all that much, so every 100 milliseconds, I would read sensor data,

09:07.120 --> 09:13.520
and then I need a bit of time to actually run data through the AI model, which, again,

09:13.520 --> 09:18.480
doesn't really take a lot. The model, at the end of the day, is really simple, so you really only

09:18.480 --> 09:24.720
need a couple milliseconds there, fair enough, and then there's the world GUI aspect, which, again,

09:24.720 --> 09:30.400
if you're lazy, I'm not even, like, whenever a button is pressed, it's not even interrupt driven,

09:30.400 --> 09:36.320
so you need to figure out, like, if a button is being pressed right in the loop, not ideal, but

09:36.320 --> 09:42.320
you do that, and then, if you want, you then post results to an IoT server, and then you don't even

09:42.320 --> 09:46.000
know how long it's going to take, right? Like, if this is synchronous, it might be a problem.

09:46.880 --> 09:53.680
Enter an autos, right? That's basically, for the first few years of the project, it was sitting

09:53.680 --> 09:58.640
there on GitHub, this really crappy thing where people would open issues to be like, really,

09:59.760 --> 10:06.160
I mean, yes, I would put the ready to flash, like, firmware for people to use, but anyone who wanted

10:06.560 --> 10:11.760
to basically tweak the code, they were just scared, and so the thing is, I ended up, yeah,

10:11.760 --> 10:18.080
using Zephyr to try and rewrite, and also to myself, frankly, to learn some of the best practices

10:18.080 --> 10:25.120
there, I ended up trying to leverage some of the features of Zephyr, which is beyond being an

10:25.120 --> 10:32.960
autos, which hopefully would help me move away from the super loop, also get a better solution for

10:32.960 --> 10:38.080
targeting multiple architectures. Like, originally, I would be targeting the weird terminal, which is

10:39.040 --> 10:45.200
some D51 Cortex-M4, but I actually don't mind ESP32, and having the same code,

10:46.240 --> 10:51.360
same portable code, and portable build infrastructure, test infrastructure, I don't mind

10:51.360 --> 10:57.280
getting that, plus all the libraries that also come pre-packaged, and yeah, that's basically what I did.

10:57.280 --> 11:05.040
So, from this point, I guess, the presentation is more about telling you, like, how I replaced some

11:05.040 --> 11:10.560
of the concepts or some of the things that I had in my Arduino code, and point you to some

11:11.520 --> 11:16.240
interesting areas in Zephyr of, like, features and subsystems that are available that you

11:16.240 --> 11:19.760
maybe didn't know existed, and, but frankly, I didn't know existed either.

11:20.640 --> 11:26.800
Sensor acquisition, that might be the sort of the easy part, but I really like the fact that now

11:27.760 --> 11:34.720
my V2 version, if you will, of the NOS, I have essentially, and literally, a dedicated thread

11:34.720 --> 11:40.640
that acquires the data exactly at the sampling rate that I require for my model to perform

11:40.640 --> 11:44.160
accurately, right? That's like, that could be an issue. If I do the super loop thing,

11:44.720 --> 11:48.640
and for some reason, the UI takes longer to refresh or communicating with the

11:48.640 --> 11:58.800
the cloud takes longer, then it will basically shift the sampling rate for the gas sensor data,

11:58.800 --> 12:05.760
which basically means that I will start feeding crap into my AI model at all. So, you may want to

12:05.760 --> 12:11.760
sometimes put the sensor to sleep and make sure that it doesn't draw energy unnecessarily, so it's

12:11.840 --> 12:18.240
actually also integrated in the Zephyr APIs. Then comes the TensorFlow Lite aspect. So, I'm

12:18.240 --> 12:23.920
basically pulling TensorFlow Lite as a library in my application and leveraging something that's

12:23.920 --> 12:29.680
called ZBUS that makes it, especially for someone like me who's not necessarily a hardcore embedded

12:29.680 --> 12:37.280
developer, I basically have this high-level framework where, okay, I have my sensor acquisition

12:37.360 --> 12:44.400
thread that does its stuff, basically puts the sensor readings in a ring buffer, and whenever

12:45.280 --> 12:49.120
there is data that's available for the rest of the world and the rest of my app

12:49.120 --> 12:55.200
to do something out of, then it's effectively like there's an eventing system where,

12:56.400 --> 13:04.240
effectively, my inference thread really gets data, like subscribes to sensor readings so that it does

13:04.240 --> 13:13.040
the stuff and figure out what is it smelling like, and also uses ZBUS to put the result on the same,

13:13.040 --> 13:18.800
like using the same topic mechanism, if you will, so that, guess what, the GUI, for example, can

13:20.480 --> 13:26.960
in turn subscribe to this piece of information to do something useful out of. No need for

13:27.040 --> 13:33.600
fifo's and cues and semaphores, like it's actually really nice, and the overhead is minimal. So,

13:34.400 --> 13:39.680
there's that, and then for the GUI, that's one thing that's really nice with Zephyr is that you

13:39.680 --> 13:46.320
have LVGL, it just works, like there's obviously in Zephyr tons of drivers already available for

13:47.360 --> 13:52.640
a wide variety of display controllers, but then on top of that you even have, like, the high-level

13:53.520 --> 14:01.440
framework that is LVGL for creating a GUI with, like, chart, like, this gauge,

14:01.440 --> 14:06.800
this gauge, and I never know how to pronounce it, like, this gauge, and the charts, like, those are

14:06.800 --> 14:14.400
effectively widgets that subscribe to the data that comes and is being sent on ZBUS and just

14:14.400 --> 14:18.640
displays it, and the code is really, really straightforward, it integrates also with things

14:18.640 --> 14:26.240
like the Zephyr input system, like, if you have buttons, keypads, touch screens, that basically

14:26.240 --> 14:33.920
send events, you can have the LVGL app automatically react to that, right, so that's nice, and as you

14:33.920 --> 14:42.320
may notice, this is not a photo of LVGL running on the actual device, it is a screenshot of LVGL

14:42.320 --> 14:47.200
running in a desktop environment, because you can actually run the full artificial nose

14:47.440 --> 14:57.760
code in a fully emulated environment, if you will, on a POSIX OS, including the GUI aspect,

14:57.760 --> 15:05.840
so that's pretty nice, and like I said, it really feels like you're writing, like, really high-level

15:06.880 --> 15:14.480
applications, I have, I'm defining, and, like, I have a listener that wants to be notified whenever

15:15.200 --> 15:21.680
there is an inference result that's being made available by, probably, by the TensorFlow light

15:21.680 --> 15:30.080
for micro task and thread, and when that's happening, then it's pretty straightforward, you get

15:30.880 --> 15:36.320
the data, you really get it actually as an actual, like, typed message, like, so it's something like

15:36.320 --> 15:42.080
you can actually really make a good sense out of, in my case, the inference result would contain both

15:42.640 --> 15:47.920
a label telling me it's smelling coffee, whiskey, whatever, and a confidence level,

15:48.560 --> 15:53.920
based on how confident the model is that it is effectively whiskey or coffee, and so I can

15:54.640 --> 15:59.760
actually display that on my UI, and the code is really, like, literally moved from, yeah,

15:59.760 --> 16:07.680
2,000 lines of code, I didn't count, but it's a couple hundred max, so there's that, and then

16:08.560 --> 16:17.360
this is sort of nice to have, if you were to do more than just a kind of prototype toy project,

16:17.360 --> 16:23.200
you could think about having the device, probably with something less stupid as the enclosure, but

16:23.200 --> 16:30.720
in the ceiling of the restrooms here in the building, so that whenever it smells pretty bad,

16:30.720 --> 16:36.480
you know that it's time to send someone to clean the place, but you don't want to send someone to

16:36.480 --> 16:41.840
clean the place, like, twice a day if, like, nothing happened, like, if it's, you're on the weekend,

16:41.840 --> 16:46.640
or it's like a day where there's strikes or whatever, or there's COVID and everyone is at home,

16:46.640 --> 16:55.840
so the device would need to be communicating somehow in a way, like, remotely, and for adding that

16:56.880 --> 17:01.840
to my project, it was also pretty straightforward, because there was a, like, full blown networking

17:01.920 --> 17:09.200
stack in Zephyr for, like, TCP, IP, and, like, co-op and MQTT, and, like, all the variants,

17:09.200 --> 17:14.960
all the flavors, and all the kind of connectivity options you may want to use, they're all there,

17:14.960 --> 17:23.360
and so effectively, and I can maybe quickly switch to a really quick demo, which is, I have, so, well,

17:23.360 --> 17:27.600
this is the version with the enclosure, this is the version, which is actually the WIO terminal,

17:27.600 --> 17:35.280
this one is M5 stack core 2, so this is effectively an ESP32, this is the sensor, it's already

17:35.280 --> 17:43.520
configured and already connected to Wi-Fi, so if I were to, I think I need to stop sharing maybe,

17:44.720 --> 17:49.440
if I were to connect to my MQTT, yeah, connected to an MQTT broker,

17:49.600 --> 17:58.000
and in real time, so this is really, like, reaching the internet and then my laptop connecting to the

17:58.000 --> 18:03.840
very same broker that this guy is connected to, and, yeah, apparently it's smelling ambient air,

18:03.840 --> 18:12.080
I guess it's more, like, nerdy or geeky air, and if I put, so this is, yeah, well, that was fast,

18:12.080 --> 18:18.240
actually, this is lemon, and for the anecdote, I, I mean, not that you care, but I actually forgot

18:18.240 --> 18:24.000
to bring the lemon from home, so I bought this one just this morning, so it's different lemon,

18:24.000 --> 18:28.720
I guess that the one I use for training the model, but it apparently works just the same,

18:29.520 --> 18:37.200
so that's, there's that, and what else, yeah, and many, many other things that are pretty cool in

18:37.200 --> 18:41.920
Zephyr, the fact that it leverages K-configured and device tree, just like Linux does, makes for

18:42.400 --> 18:49.760
pretty neat code when it comes to, oh, I want my GUI to be slightly different if my screen is large,

18:50.400 --> 18:56.080
I want to put, to cramp more into the UI, well, that's an information that you can get really

18:56.080 --> 19:02.560
easily from device tree, right, if my screen is wider than 300 pixels, blah, testing framework,

19:02.560 --> 19:08.000
CI integration, every time I commit something and push something and make a modification to the

19:08.080 --> 19:14.480
artificial nose, it gets built immediately, A1, basically, by the way, I wasn't working on

19:14.480 --> 19:18.880
Microsoft back then, and they are absolutely no problem with me putting everything on GitHub,

19:18.880 --> 19:26.800
so kudos to them for that, so now the new URL, if you wanted to check out the Zephyr version would

19:26.800 --> 19:32.480
be the same, with Zephyr in the name, you can find all the parts online, I don't get any royalties

19:32.480 --> 19:38.000
or whatever for that, but seed has actually sort of been like nice, ready to use bundle where you

19:38.000 --> 19:42.080
can order all the parts, and that's it, questions!

20:03.200 --> 20:10.400
Hello, thank you very much, so there is some abstraction where you can use different sensors,

20:10.400 --> 20:14.320
but surely the sensors don't give the same values for...

20:15.360 --> 20:20.080
Great question, I had a slide, I've removed the slide, removed the notes, I forgot,

20:20.080 --> 20:26.080
one thing that I would love to see happen to kind of answer your question is some kind of open

20:26.640 --> 20:34.560
data set, open ontology to actually describe smells in a consistent way, because you're right,

20:34.560 --> 20:39.600
like you would have sensors that are giving you readings in terms of like unitless

20:40.480 --> 20:46.560
concentration, like it's going between zero and 100% of VOC concentration, some would be

20:46.560 --> 20:53.280
talking PPM, some would be whatever, some would have like weird calibration things,

20:53.920 --> 20:57.520
there's, yeah, it's, you're right, so you would probably need to retrain the model,

20:57.520 --> 21:03.200
it's not like you can, at least with this code, it's not like you can easily be like,

21:03.200 --> 21:08.800
okay I'm going to switch from Bosch to Aliexpress, and it's going to work just the same, like you

21:08.800 --> 21:15.520
need to, yeah, I hope this answers the question. One more, yeah. We would like to know how it

21:16.640 --> 21:22.960
did it work with the sourdough and your baguettes? That's super, everyone asks the question, I never,

21:23.520 --> 21:30.240
like I never done the whole thing, like because back COVID, there was no flour, it would have

21:30.240 --> 21:36.480
been painful to bake dozens and dozens of baguettes and eat them anyways, and this is more fun to

21:36.480 --> 21:43.920
play with just random things like spices or booze, and the sourdough thing probably works, frankly,

21:44.880 --> 21:51.200
probably could be done more in a more simple way too, like maybe you just need a alcohol sensor

21:51.200 --> 22:02.560
and just measure the peak, and maybe that's it, I don't know. Thanks everyone. Okay, thank you.

