WEBVTT

01:30.000 --> 01:56.800
Thank you.

11:31.000 --> 11:35.000
I just used an upper around Ansible runner,

11:35.000 --> 11:38.000
which is part of Ansible core.

11:38.000 --> 11:49.000
So it doesn't expose us too much to any kind of red dot thing.

11:49.000 --> 11:51.000
But as you can see here, at the end,

11:51.000 --> 11:56.000
you really call Ansible like you would do normally.

11:56.000 --> 12:00.000
So in this case, we are populating some extra variables.

12:00.000 --> 12:04.000
These WF4 trunk JSON is our subscription

12:04.000 --> 12:08.000
with all the attributes that we need for that specific subscription.

12:08.000 --> 12:12.000
And then a bunch of extra variables.

12:12.000 --> 12:18.000
And you call this playbook iptrunks.yaml.

12:18.000 --> 12:24.000
So yeah, this is also available for the masses.

12:24.000 --> 12:28.000
Something very important, and I'm going back to this idea

12:28.000 --> 12:32.000
of describing your business logic, is the modeling behind it.

12:32.000 --> 12:35.000
So we first started to look at the node configuration

12:35.000 --> 12:38.000
as a composition of something we call base config,

12:38.000 --> 12:43.000
which is specific for the node, or it's the same of every node.

12:43.000 --> 12:49.000
And let's say plus a bunch of services and prerequisites

12:49.000 --> 12:54.000
that gets added to actually realize the final goal.

12:54.000 --> 12:57.000
And so we can map services with products,

12:57.000 --> 13:04.000
and then we decompose again a service in product blocks.

13:04.000 --> 13:07.000
So for example, we have a product block

13:07.000 --> 13:10.000
that represents your physical interface.

13:10.000 --> 13:14.000
It could be a link aggregation or a single interface.

13:14.000 --> 13:17.000
We have a product block that describes the VLAN

13:17.000 --> 13:20.000
with the IP address on top of this interface.

13:20.000 --> 13:22.000
And then we have multiple product blocks

13:22.000 --> 13:28.000
that describes layer-to-circuits, BGPP years, etc., etc.

13:28.000 --> 13:31.000
And so this is an example for something very, very simple,

13:31.000 --> 13:35.000
but that if you think about it, it's not really native Ansible,

13:35.000 --> 13:39.000
not because you want to describe a coordinate,

13:39.000 --> 13:42.000
so a pipe that goes from A to B.

13:42.000 --> 13:45.000
So normally in Ansible, you would split it in two,

13:45.000 --> 13:52.000
and you would say the A side goes as host-vars on the A node,

13:52.000 --> 13:56.000
and the B side goes as host-vars on the B node.

13:56.000 --> 13:58.000
But actually that's not true,

13:58.000 --> 14:02.000
because you want to kind of define attributes for the pipe itself.

14:02.000 --> 14:08.000
And here you can see how the models kind of allow you

14:08.000 --> 14:10.000
to separate these things.

14:10.000 --> 14:14.000
So what is there, it regards the target.

14:14.000 --> 14:17.000
So it regards it's about your router, the site,

14:17.000 --> 14:20.000
and whatever kind of attribute comes up.

14:20.000 --> 14:24.000
And up there there are the attributes for your core link.

14:24.000 --> 14:28.000
So for example, your IGP metric and stuff like that.

14:28.000 --> 14:31.000
Whew, I'm late.

14:31.000 --> 14:35.000
And so just to wrap it up, this is an example of workflow.

14:35.000 --> 14:40.000
The operator fills in a form, then the workflow ending starts,

14:40.000 --> 14:44.000
goes to IPAM, gets IP address, gets DNS configured,

14:44.000 --> 14:47.000
calls Ansible, configures the router,

14:47.000 --> 14:53.000
calls Netbox, puts the router in Netbox with all the interfaces, etc.

14:53.000 --> 14:57.000
Yeah.

14:57.000 --> 14:59.000
So in case you want to do network automation,

14:59.000 --> 15:02.000
don't forget that this is a network problem,

15:02.000 --> 15:05.000
so you need network engineers,

15:05.000 --> 15:09.000
but it's a lot of software, so you need developers.

15:09.000 --> 15:12.000
And we found this super complicated.

15:12.000 --> 15:17.000
We found our self-lost in translation many times,

15:17.000 --> 15:19.000
but it's doable.

15:19.000 --> 15:24.000
Yeah, I don't think that telling you how hard it is to do DTAP.

15:24.000 --> 15:27.000
Yeah, you know.

15:27.000 --> 15:30.000
Yeah, this is the main takeaway.

15:30.000 --> 15:34.000
And if you want to know more, please feel free to approach me.

15:34.000 --> 15:36.000
Now I'm around.

15:36.000 --> 15:42.000
I have a bunch of links that you should find in the FOSTEM site.

15:42.000 --> 15:45.000
So if you're interested, all the code is there.

15:45.000 --> 15:48.000
Everything is for you guys.

15:48.000 --> 15:50.000
Happy FOSTEM.

15:50.000 --> 15:52.000
Thank you.

15:52.000 --> 15:54.000
Thank you.

15:54.000 --> 15:58.000
Any questions?

16:01.000 --> 16:03.000
Thanks.

16:03.000 --> 16:08.000
Yeah, yeah.

16:16.000 --> 16:22.000
We use NetConf to push configuration.

16:22.000 --> 16:25.000
If you say something like this to a network engineer,

16:25.000 --> 16:27.000
he will start crying.

16:27.000 --> 16:31.000
And it's also not true, no?

16:31.000 --> 16:35.000
Because this is done for standard provisioning

16:35.000 --> 16:38.000
and the provisioning of service.

16:38.000 --> 16:43.000
If stuff explodes, of course you go CLI.

16:43.000 --> 16:52.000
Have you had a look at Nordnir and Naipalm in terms of...

16:52.000 --> 16:54.000
Can you hear me?

16:55.000 --> 16:57.000
Okay.

16:57.000 --> 17:02.000
Did you have a look at Nordnir and or Naipalm to replace Ansible?

17:02.000 --> 17:06.000
Like to execute configuration on routers?

17:06.000 --> 17:07.000
Yes, but no.

17:07.000 --> 17:08.000
Yes, but no.

17:08.000 --> 17:10.000
But that means...

17:10.000 --> 17:11.000
How to say...

17:11.000 --> 17:12.000
We didn't...

17:12.000 --> 17:13.000
No solution for you.

17:13.000 --> 17:14.000
Sorry?

17:14.000 --> 17:15.000
No solution for you.

17:15.000 --> 17:17.000
No, we have the solution.

17:17.000 --> 17:21.000
So the question was if we were looking at Nordnir

17:21.000 --> 17:24.000
or other automation tools,

17:24.000 --> 17:28.000
what I'm trying to give you is the concept

17:28.000 --> 17:31.000
that automation is kind of simple.

17:31.000 --> 17:32.000
Okay?

17:32.000 --> 17:35.000
And especially in our network, we have 40 nodes.

17:35.000 --> 17:37.000
I don't need anything super performant

17:37.000 --> 17:39.000
in terms of scalability or things.

17:39.000 --> 17:42.000
If you compile a GINJA template

17:42.000 --> 17:45.000
and you are able to talk with my device the way I want,

17:45.000 --> 17:47.000
so for example, Comfy Private,

17:47.000 --> 17:50.000
plus commit command and these kind of stuff,

17:50.000 --> 17:51.000
I'm happy with it.

17:51.000 --> 17:54.000
The complexity, the real complexity,

17:54.000 --> 17:58.000
is taking the process, the entire process

17:58.000 --> 18:01.000
made of emails and Word documents and calls

18:01.000 --> 18:04.000
and show it in the orchestrator.

18:04.000 --> 18:08.000
So maybe in the future we will look at Nordnir,

18:08.000 --> 18:10.000
maybe in the future we will do it,

18:10.000 --> 18:11.000
but for now, no need.

18:11.000 --> 18:13.000
I hope.

18:13.000 --> 18:15.000
Thank you.

18:15.000 --> 18:16.000
Thank you, guys.

18:16.000 --> 18:21.000
APPLAUSE

