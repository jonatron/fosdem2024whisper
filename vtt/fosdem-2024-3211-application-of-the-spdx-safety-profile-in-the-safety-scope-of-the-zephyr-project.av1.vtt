WEBVTT

00:00.000 --> 00:15.040
Yeah, okay.

00:15.040 --> 00:20.440
So hello everybody for lunchtime talk.

00:20.440 --> 00:26.520
We'll tell you a little bit about the SPDX safety profile that will come about 3.1, so

00:26.640 --> 00:31.800
I'll give you a short introduction to it and then Stan will show you how we actually

00:31.800 --> 00:33.560
apply this in the Zephyr project.

00:35.880 --> 00:41.760
So generally what we are speaking about is we always have systems or systems of systems and

00:41.760 --> 00:46.440
plugging this together and knowing what you have and knowing if you have all the evidences.

00:46.440 --> 00:49.720
That's the issue that we are currently dealing with.

00:49.720 --> 00:55.240
For those who are not familiar with functional safety, it's just a do no harm thing.

00:55.240 --> 00:59.160
Your system should not kill you or shouldn't kill anybody, should not harm anybody.

01:00.160 --> 01:04.760
For that, you need to know what you have, how things work,

01:04.760 --> 01:11.280
that you have corrective actions for unexpected behavior,

01:11.280 --> 01:16.000
that you can catch things, detect things, and that you have the evidences that you really do so.

01:17.560 --> 01:22.160
Yeah, most people always then give me the backwards saying, hey, yeah,

01:22.160 --> 01:24.800
safety is a system property, we cannot do this on element level.

01:24.800 --> 01:30.840
Yeah, we can't, but we can make sure that our element brings everything on the table that you can trust,

01:30.840 --> 01:33.120
that it behaves like you expected to behave.

01:36.080 --> 01:40.200
So usually what are the tasks and how do we know what to do?

01:40.200 --> 01:42.840
Yeah, there's a safety standard around that tell you what to do,

01:42.840 --> 01:46.400
they will tell you what the deliveries or deliverables that you need to show.

01:47.400 --> 01:52.200
They all come down to the same stuff, you need unique IDs of what you have,

01:52.200 --> 01:56.160
you need to be traceable, what you wanted to have, what you did implement,

01:56.160 --> 02:01.640
how you trusted it, all that to show that you're complete, to have all the evidences.

02:01.640 --> 02:06.200
And let's say in software speak, it just means you need to define your dependencies within your project.

02:08.800 --> 02:14.160
Yeah, functional safety projects come down to a lot of things, mainly documents.

02:14.160 --> 02:18.960
So I don't want to read this to you, but it's a lot usually and it's quite a pain.

02:19.000 --> 02:21.720
But these documents are in relation to each other.

02:21.720 --> 02:26.320
So the Meme model, which is originally a process model,

02:26.320 --> 02:30.200
more or less when you look at it from an informational knowledge point of view,

02:30.200 --> 02:32.200
it's a dependency model.

02:32.200 --> 02:37.600
And we need to keep these dependencies up through the whole life cycle of something and

02:37.600 --> 02:44.520
through all the releases, through all variants, through all bug fixes, vulnerability fixes.

02:45.480 --> 02:48.800
Yeah, variants are a big topic.

02:50.800 --> 02:55.840
And yeah, what we can use here really are these S-bombs that we have in the software world now.

02:55.840 --> 03:05.120
They are machine readable, they are exchangeable, and we can leverage that for our dependencies.

03:05.120 --> 03:12.840
And yeah, lucky us, we can express these dependencies in the V-model always relationships in SPDX.

03:15.400 --> 03:18.000
So how is the real world at the moment?

03:18.000 --> 03:22.520
So we have more or less three types of documents in our safety documentation.

03:22.520 --> 03:25.440
We have plans, processes, guidelines, how to do things.

03:25.440 --> 03:30.760
We have the actual specification, what you want to have, how is your structure,

03:30.760 --> 03:34.720
and you have all these verification and analysis evidences that you did things

03:34.720 --> 03:37.000
the way you have been intended to do so.

03:38.680 --> 03:43.240
Yeah, these documents are living all in their own little realms.

03:43.240 --> 03:49.200
They live all in their little formats, their little tools, and they don't talk a lot, which is other.

03:49.200 --> 03:52.600
So traceability usually breaks between the tools.

03:53.920 --> 03:55.440
It's quite a pain to keep this up.

03:55.440 --> 04:00.120
We have a very solid solution, mainly in the automotive world.

04:00.120 --> 04:06.960
The nearly most loved engineering tool, we have exalists.

04:06.960 --> 04:11.040
They usually also come with a very distinctive name that's very unique.

04:12.040 --> 04:16.240
And yeah, that's how things are.

04:16.240 --> 04:19.840
So why not put it in a little bit orderly fashion?

04:20.960 --> 04:26.960
Use S-bombs, S-bond types, SPDX relationships to really structure a project

04:26.960 --> 04:29.160
in a way where you really can use your relationships.

04:30.280 --> 04:34.200
And that's what we are actually applying in the art and the SAFRA project.

04:34.200 --> 04:38.000
SAFRA is a really brilliant little art house.

04:39.000 --> 04:43.960
It comes with its own build system, with tests and the framework for all that you need.

04:43.960 --> 04:50.960
We're currently adding all the systematic capability stuff like requirements, plans, the safety analysis,

04:50.960 --> 04:55.960
and we are using StrictDoc, the tool of stand to do so, and yeah,

04:55.960 --> 04:59.960
want to express this also with the SPDX relationships.

05:00.960 --> 05:05.960
So for example, for requirements, this can look like this.

05:06.920 --> 05:11.920
We have on the top level, we have the plans that are in a relationship to each other

05:11.920 --> 05:17.920
that specify how things should be done on the specification documents level,

05:17.920 --> 05:20.920
that specify that in the end what you need to implement,

05:20.920 --> 05:25.920
and you have requirements, acceptance criteria,

05:25.920 --> 05:30.920
meaning yeah, that's specifying your reviews, your tests,

05:30.920 --> 05:33.920
all the analysis evidence that you need.

05:33.920 --> 05:37.920
You can roll this out really through all the lifecycle of SAFRA,

05:37.920 --> 05:41.920
so we're saying okay, we have the concept and planning phase,

05:41.920 --> 05:44.920
we have the actual implementation phase,

05:46.920 --> 05:50.920
we have the tests and the build, everything,

05:50.920 --> 05:55.920
we can really put this all in SPDX relationships,

05:55.920 --> 05:58.920
so that once we have an issue,

05:59.920 --> 06:04.920
it's not like blind looking for the course that we had as we had before,

06:04.920 --> 06:10.920
but we can really follow our relationships through to do analysis,

06:10.920 --> 06:15.920
to do really maybe even automated analysis,

06:15.920 --> 06:20.920
and we have everything in place to really identify why do we have the issue,

06:20.920 --> 06:25.920
what do we need to do and what do we need to update in order to fix this issue.

06:26.920 --> 06:32.920
So, thanks, Nicole, thanks everyone for having us here today.

06:32.920 --> 06:35.920
Everyone is super fast presenting, I'll try to catch up.

06:35.920 --> 06:38.920
So before we go to talk about the tool,

06:38.920 --> 06:42.920
I actually want to mention a few issues about the requirements engineering in general,

06:42.920 --> 06:45.920
this has nothing to do yet with SPDX,

06:45.920 --> 06:49.920
so many of you probably know that the commercial requirements tool can be expensive,

06:49.920 --> 06:52.920
and they can be sometimes ridiculously expensive,

06:52.920 --> 06:56.920
and so one example question, how can you build a working group

06:56.920 --> 07:02.920
that needs to actually collaborate across organizations and across tools

07:02.920 --> 07:05.920
and across whatever, crossing all sorts of boundaries,

07:05.920 --> 07:09.920
what if you need to exchange all of these requirements,

07:09.920 --> 07:16.920
and very often also the worlds of requirements and software are not connected,

07:16.920 --> 07:20.920
so there is an original, let's say, Excel document that is started somehow

07:20.920 --> 07:23.920
with a bunch of requirements, but then developers take over,

07:23.920 --> 07:27.920
and they somehow get excited during the development,

07:27.920 --> 07:30.920
and then no one really knows what were the original requirements

07:30.920 --> 07:33.920
that the system was implemented against.

07:33.920 --> 07:39.920
And so the waterfall model actually is not designed to play well

07:39.920 --> 07:41.920
with the open source software development,

07:41.920 --> 07:46.920
and let's say the outcome of this is that very few open source projects

07:46.920 --> 07:49.920
are actually developed according to formal requirements.

07:51.920 --> 07:53.920
But everything is slowly changing,

07:53.920 --> 07:58.920
so by now I counted over 12 tools of various degrees of maturity,

07:58.920 --> 08:02.920
and StrikDoc actually, my tool is one of them,

08:02.920 --> 08:05.920
and the key question that I am trying to answer for myself

08:05.920 --> 08:08.920
and maybe for, let's say, the subset of the industry,

08:08.920 --> 08:11.920
can we actually make requirements useful for open source software

08:11.920 --> 08:16.920
so that developers are not annoyed, let's say, when working with requirements,

08:16.920 --> 08:20.920
and that actually requirements become first class citizens in open source software.

08:20.920 --> 08:24.920
And so I created this tool in 2019,

08:24.920 --> 08:28.920
it's originating from the spacecraft avionics,

08:28.920 --> 08:33.920
we had to exactly specify the onboard computer behavior,

08:33.920 --> 08:37.920
and this is how we got started with just,

08:37.920 --> 08:41.920
hey, what if we just do the text-based,

08:41.920 --> 08:44.920
git-based requirements management, generate something,

08:44.920 --> 08:48.920
and it turned out that actually there was a tool already called DoorStop,

08:48.920 --> 08:50.920
and I started contributing to it,

08:50.920 --> 08:53.920
and at some point I just realized that I'm moving a bit faster

08:53.920 --> 08:57.920
than, let's say, getting some patches in DoorStop modifying the code,

08:57.920 --> 08:59.920
and so I ended up doing something of my own.

08:59.920 --> 09:04.920
We spent most of the time actually polishing the HTML documentation generator

09:04.920 --> 09:08.920
in these years and somehow working out the traceability graph,

09:08.920 --> 09:13.920
and the previous year was literally the year of UI programming,

09:13.920 --> 09:17.920
so it was a lot of just making the UI support what is written in the text files.

09:17.920 --> 09:22.920
The project goals is to make a tool that just allows you for free

09:22.920 --> 09:25.920
and in a nice way to work with requirements.

09:25.920 --> 09:30.920
All groups are considered, we pretty much achieved the goal

09:30.920 --> 09:34.920
of being able to work with just PIP install in five minutes,

09:34.920 --> 09:36.920
you can start creating and publishing your requirements,

09:36.920 --> 09:40.920
and one core thing is that it should be very easy to get data in and out

09:40.920 --> 09:45.920
so that no one should be locked into this tool way of doing things.

09:45.920 --> 09:50.920
Then this is the text format that we came up with.

09:50.920 --> 09:53.920
It's a combination of a bunch of formats,

09:53.920 --> 09:58.920
but the main use case is that we need a format that supports both text,

09:58.920 --> 10:00.920
writing documents, and metadata,

10:00.920 --> 10:04.920
and so this hybrid is a practical compromise somehow,

10:04.920 --> 10:06.920
how to achieve both.

10:06.920 --> 10:09.920
I'm happy to be challenged on the specifics of this format,

10:09.920 --> 10:12.920
but this is what it is for now.

10:12.920 --> 10:15.920
By the way, the requirements are actually this statement thing,

10:15.920 --> 10:17.920
so you always have this shale of statements,

10:17.920 --> 10:20.920
and that's the core of what a requirements tool should do normally.

10:20.920 --> 10:23.920
For Zephyrus, Pedex and StickDoc,

10:23.920 --> 10:26.920
a big thanks to Roberto Bagnaro of Baxank,

10:26.920 --> 10:29.920
he made a connection, so we introduced basically that this tool exists

10:29.920 --> 10:32.920
to the Zephyr community, and that's how we started working together.

10:32.920 --> 10:34.920
There was a small competition,

10:34.920 --> 10:37.920
and the group after some time selected this tool,

10:37.920 --> 10:40.920
and right now we are structuring the requirements

10:40.920 --> 10:42.920
and writing the requirements in StickDoc.

10:42.920 --> 10:44.920
I will show just in a second all this.

10:44.920 --> 10:48.920
The interfaces of StickDoc with Zephyr are actually these text files

10:48.920 --> 10:53.920
with the requirements with the source files of Zephyr,

10:53.920 --> 10:55.920
the design documentation of Zephyr,

10:55.920 --> 10:57.920
and also as of recently,

10:57.920 --> 11:00.920
StickDoc can also produce an SPDX file with the requirements

11:00.920 --> 11:04.920
that connects to whatever parent Zephyr SPDX to become somehow.

11:04.920 --> 11:08.920
So now I'm really short on time,

11:08.920 --> 11:11.920
so I try to just jump over the screens.

11:11.920 --> 11:12.920
15 minutes.

11:12.920 --> 11:13.920
15 minutes, okay.

11:13.920 --> 11:17.920
So this is actually the UI that we will be,

11:17.920 --> 11:19.920
we have been working on so hard.

11:19.920 --> 11:22.920
The idea is that, let's say, in the IDE,

11:22.920 --> 11:24.920
we have the text files, the storage and git,

11:24.920 --> 11:27.920
so you can see this pretty much blocks of requirements.

11:27.920 --> 11:30.920
They have statements, they have meta information,

11:30.920 --> 11:33.920
and then our effort was to lift it up to the UI

11:33.920 --> 11:35.920
so that all this becomes editable.

11:35.920 --> 11:37.920
And so we got a bunch of features.

11:37.920 --> 11:40.920
I just created one requirement, which is called a FOSDEM requirement

11:40.920 --> 11:42.920
to show you how this works in Git.

11:42.920 --> 11:45.920
So in Git, this looks pretty much like this.

11:45.920 --> 11:48.920
So you'll see the IDE is already recognizing

11:48.920 --> 11:51.920
that we're doing the Git-based change,

11:51.920 --> 11:54.920
and this is how it can be committed.

11:54.920 --> 11:56.920
Currently, we don't support auto-committing,

11:56.920 --> 11:58.920
but the UI cannot commit the changes manually,

11:58.920 --> 12:01.920
but we can push it using a second terminal,

12:01.920 --> 12:03.920
just push these changes and create a commit

12:03.920 --> 12:05.920
that will publish this text.

12:05.920 --> 12:09.920
But what we try to do, sort of really hard,

12:09.920 --> 12:12.920
that all this is possible to be created in the UI,

12:12.920 --> 12:15.920
and you rarely, so the more and more rarely

12:15.920 --> 12:17.920
you ever need to use console,

12:17.920 --> 12:19.920
so this becomes more and more automated in the UI.

12:19.920 --> 12:22.920
We got some other cool things.

12:22.920 --> 12:24.920
So for example, there is now a diff feature,

12:24.920 --> 12:27.920
so how can you actually do diffs on the requirements documents?

12:27.920 --> 12:31.920
So when you not just want to do a Git diff,

12:31.920 --> 12:34.920
but you actually want to explore what are the...

12:34.920 --> 12:36.920
Sorry, let me just...

12:36.920 --> 12:38.920
It's a bit funny speaking this way.

12:38.920 --> 12:40.920
Sorry.

12:44.920 --> 12:47.920
We are comparing the documentation graph,

12:47.920 --> 12:50.920
and for each of the requirements nodes,

12:50.920 --> 12:53.920
we specify actually what...

12:53.920 --> 12:55.920
What...

13:24.920 --> 13:26.920
So...

13:28.920 --> 13:30.920
So...

13:31.920 --> 13:33.920
So...

13:35.920 --> 13:37.920
So...

13:38.920 --> 13:40.920
So...

13:42.920 --> 13:44.920
So...

13:45.920 --> 13:47.920
So...

13:49.920 --> 13:51.920
So...

13:51.920 --> 13:53.920
So...

13:55.920 --> 13:57.920
So...

13:59.920 --> 14:01.920
So...

14:03.920 --> 14:05.920
So...

14:08.920 --> 14:10.920
So...

14:12.920 --> 14:14.920
So...

14:14.920 --> 14:16.920
So...

14:18.920 --> 14:20.920
So...

14:23.920 --> 14:25.920
So...

14:34.920 --> 14:36.920
So...

14:36.920 --> 14:38.920
So...

14:51.920 --> 14:54.920
Lend, somehow, this is a small demonstration.

14:54.920 --> 14:58.920
Let's say we have dummy requirements specification

14:58.920 --> 15:00.920
and has a child requirements specification,

15:00.920 --> 15:03.920
and that child specification also links to the example.

15:06.920 --> 15:09.680
For example, for the snippets, for the requirements,

15:09.680 --> 15:12.120
it's possible to jump to the files

15:12.120 --> 15:16.320
and trace how they actually link to the requirements

15:16.320 --> 15:17.960
in the source files.

15:17.960 --> 15:20.560
So it becomes a sort of a browser for

15:20.560 --> 15:23.880
SPDX information with respect to requirements.

15:23.880 --> 15:26.520
I'm not intending this to be an SPDX browser,

15:26.520 --> 15:28.760
I just needed some way to visualize the requirements

15:28.760 --> 15:31.240
as we are working through them with Zephyr.

15:31.240 --> 15:33.620
And then I come back to the slides.

15:34.520 --> 15:36.400
Let's see if we can do this.

15:37.600 --> 15:42.160
Actually, maybe this way.

15:43.440 --> 15:46.440
Yes, so a couple of slides, some back up.

15:46.440 --> 15:50.280
I think we mostly turn it to the conclusions back to Nikon.

15:50.280 --> 15:51.120
Oh, yeah.

15:54.280 --> 15:56.440
Yeah, so the conclusion, let's say,

15:59.000 --> 16:02.680
notes to that is that if we use this approach,

16:02.680 --> 16:06.680
we really get finally a first way to do

16:10.960 --> 16:14.640
the impact analysis in an orderly way.

16:14.640 --> 16:18.960
Usually an impact analysis is, hey, who knows about this?

16:18.960 --> 16:20.960
And you get the people in the room

16:20.960 --> 16:23.960
and just depending on who knows what,

16:23.960 --> 16:25.880
you might do an impact analysis.

16:25.880 --> 16:30.000
And there might be this tool here, that tool there,

16:30.000 --> 16:34.640
and you're a bunch of Excel lists that explain to you

16:34.640 --> 16:36.920
what could be the right relationships between them.

16:36.920 --> 16:41.080
So this will give us an idea of how things really are

16:41.080 --> 16:42.920
in a project, in a certain release,

16:42.920 --> 16:45.680
in a certain configuration, on a certain point of time.

16:47.280 --> 16:49.840
When we use SPDX and S-bombs for this,

16:49.840 --> 16:51.800
we can pack it, we can sign it.

16:51.800 --> 16:55.800
So it's really, the integrity is kept completely.

16:56.800 --> 16:57.640
Yeah.

16:59.520 --> 17:01.800
We can formally demonstrate completeness.

17:01.800 --> 17:05.680
So speaking, automated safety cases, automated assessments,

17:05.680 --> 17:07.600
everything that we really want to automate

17:07.600 --> 17:10.520
to not always have somebody manually checking

17:10.520 --> 17:11.960
is everything is there.

17:11.960 --> 17:15.680
So really to have checks, if you have gaps somewhere,

17:15.680 --> 17:18.320
when you configure something, something might come up.

17:18.320 --> 17:20.640
You have your relationships that break.

17:20.640 --> 17:23.240
You have maybe your hashes that break

17:23.240 --> 17:25.840
because you change something in there

17:25.840 --> 17:28.960
and not the same as you would have expected them.

17:28.960 --> 17:32.800
So it's, I'd say it's a really very transparent way

17:32.800 --> 17:37.800
to see things and connect things in a safety project.

17:39.640 --> 17:41.200
Yeah, with using StrictDoc,

17:41.200 --> 17:45.920
we now found something that's pretty painless to use for that.

17:45.920 --> 17:49.600
Also with respect to, yeah, nobody wants to write requirements,

17:49.600 --> 17:52.200
nobody wants to use doors, obviously.

17:53.000 --> 17:57.680
If you have just a tab open with your requirements document

17:57.680 --> 18:00.000
and you can export it and you can even edit it

18:00.000 --> 18:03.440
if you're not a coding person through the web browser.

18:03.440 --> 18:05.400
So yeah, from the several projects perspective,

18:05.400 --> 18:06.520
that was God sent.

18:08.000 --> 18:09.680
And from the SPDX perspective,

18:09.680 --> 18:12.320
I think we also have so many use cases now.

18:13.240 --> 18:14.080
Okay.

18:14.080 --> 18:14.920
Perfect.

18:14.920 --> 18:15.760
Yeah, thank you.

18:15.760 --> 18:16.600
Questions?

18:16.600 --> 18:17.440
Yeah.

18:17.440 --> 18:18.280
Yeah.

18:22.120 --> 18:22.960
Really like that.

18:24.160 --> 18:26.360
Most systems are systems, systems, systems.

18:28.120 --> 18:31.360
So you have a very high level of requirement.

18:31.360 --> 18:32.200
Yes.

18:32.200 --> 18:34.080
Find out to multiple people

18:34.080 --> 18:36.560
and they've got multiple possibilities.

18:36.560 --> 18:38.800
Potentially some commonality as well.

18:41.200 --> 18:43.480
How do you, you know,

18:43.480 --> 18:45.760
consume this working on a small software project?

18:45.760 --> 18:49.760
How does this scale to something that might be a,

18:52.080 --> 18:53.520
mission critical system?

18:53.520 --> 18:54.360
Yes.

18:54.360 --> 18:55.960
The question is how does this approach

18:55.960 --> 19:00.160
and the tools that we're using scale to larger projects.

19:01.080 --> 19:03.440
This is what we have to explore together.

19:03.440 --> 19:06.280
So we are starting, the tool itself started very small,

19:06.280 --> 19:09.520
but then it was suddenly got the pressure from Zephyr

19:09.520 --> 19:13.680
and it has to already address several requirements

19:13.680 --> 19:15.960
coming from many directions.

19:15.960 --> 19:20.080
And so as of now, it's somehow on the starting,

19:20.080 --> 19:20.920
I would say.

19:22.920 --> 19:26.320
So I mean, one of the main benefits of having like

19:26.320 --> 19:30.880
dedicated requirements, you know, tools,

19:30.880 --> 19:33.000
is that if that's one requirement,

19:33.000 --> 19:34.840
you actually like notified, okay,

19:34.840 --> 19:36.840
and this all these other requirements

19:36.840 --> 19:39.040
that are somehow related to that requirement

19:40.160 --> 19:41.560
might need to be updated.

19:41.560 --> 19:44.120
Is there something that StrictOp can do?

19:44.120 --> 19:46.440
There is no automated impact analysis.

19:46.440 --> 19:47.400
It's on the roadmap,

19:47.400 --> 19:49.520
but for now you can see the traceability graph.

19:49.520 --> 19:52.520
And if you're interested about a specific requirement,

19:52.520 --> 19:55.600
you can just, sorry, I didn't repeat the question.

19:55.600 --> 19:57.600
The question was if there is an automated way

19:57.600 --> 20:00.240
to highlight which requirements are affected

20:00.240 --> 20:03.360
by a given requirement that gets modified.

20:03.360 --> 20:08.040
So it's on the roadmap, the fancy way of doing it.

20:08.040 --> 20:10.200
But for now you can already use kits,

20:10.200 --> 20:12.040
you can use the change log,

20:12.040 --> 20:14.480
and you can use also the traceability graph,

20:14.480 --> 20:15.640
which I didn't show,

20:15.640 --> 20:18.480
but it shows this deep traceability into,

20:18.480 --> 20:20.480
let's say, how all the parent requirements

20:20.480 --> 20:22.840
flow down into the child requirements.

20:22.840 --> 20:23.680
Yeah.

20:28.000 --> 20:29.920
Jos, there's a question.

20:33.160 --> 20:35.200
Speak up, please.

20:35.200 --> 20:36.540
There is a time.

20:40.200 --> 20:42.200
I'm gonna make this my time.

20:42.200 --> 20:43.040
Thank you.

20:43.040 --> 20:44.360
Go ahead.

20:44.360 --> 20:45.680
Sorry, I hope.

20:45.680 --> 20:47.200
Can you use the mic?

20:47.200 --> 20:48.520
No, I can't.

20:48.520 --> 20:50.720
Then we don't lose information.

20:50.720 --> 20:52.560
Here you go.

20:52.560 --> 20:55.920
Yeah, I was just curious about the framework

20:55.920 --> 20:56.760
that you've set up.

20:56.760 --> 20:58.160
So it's really awesome.

20:58.160 --> 21:01.560
So I'm curious with the requirements and specification,

21:01.560 --> 21:03.000
is it like a predefined structure,

21:03.000 --> 21:05.600
or is it just like a more abstract data type

21:05.600 --> 21:09.120
that we can impose whatever structure we want?

21:09.560 --> 21:10.400
It's both.

21:10.400 --> 21:13.200
So first of all, you can do whatever you want

21:13.200 --> 21:14.640
with the document structure

21:14.640 --> 21:17.720
and the metadata structure requirements,

21:17.720 --> 21:19.120
all these best practices.

21:19.120 --> 21:21.120
You can follow whatever you want.

21:21.120 --> 21:22.720
One thing that is happening is that

21:22.720 --> 21:24.580
some of the public formats,

21:24.580 --> 21:26.680
we are collecting in strict doc format,

21:26.680 --> 21:29.400
and then you can use them directly for your traceability.

21:29.400 --> 21:30.240
This is one thing.

21:30.240 --> 21:32.920
The second thing is if projects like Zephyr

21:32.920 --> 21:36.080
or whatever other projects would use this,

21:36.080 --> 21:37.600
let's say seriously,

21:37.600 --> 21:40.920
there will naturally be some best practice emerging

21:40.920 --> 21:42.440
because we are preparing tools,

21:42.440 --> 21:43.920
we are preparing the approaches,

21:43.920 --> 21:45.400
and yeah, maybe you.

21:47.040 --> 21:47.880
Yeah.

21:47.880 --> 21:48.720
There's nothing to add, I think.

21:48.720 --> 21:49.560
Exactly.

21:49.560 --> 21:50.400
So it's.

21:50.400 --> 21:52.120
If you want to, you can add a layer in between,

21:52.120 --> 21:52.960
and that's awesome.

21:52.960 --> 21:55.600
Yes, yes, it should be.

21:55.600 --> 21:56.440
That's cool.

21:56.440 --> 21:57.280
Thank you.

21:59.440 --> 22:02.600
Here about how you practice in tool fields,

22:02.600 --> 22:03.680
the requirements,

22:03.680 --> 22:06.200
then you take your template to the site.

22:06.200 --> 22:07.680
That was one question.

22:07.680 --> 22:08.520
Is this stable?

22:08.520 --> 22:10.480
If you manage to pull a file,

22:10.480 --> 22:14.360
will you still know that it's a tool field,

22:14.360 --> 22:19.120
and can you also link to the test to see in a tool field?

22:19.120 --> 22:19.960
Yes.

22:19.960 --> 22:21.800
The reason.

22:21.800 --> 22:22.640
That's why it was.

22:22.640 --> 22:23.480
Sorry.

22:23.480 --> 22:24.480
Yeah.

22:24.480 --> 22:25.320
Yes.

22:25.320 --> 22:27.720
The question is how to automate,

22:27.720 --> 22:29.720
how to automate,

22:29.720 --> 22:30.560
let's say,

22:30.560 --> 22:32.240
if a requirement has all the links,

22:32.240 --> 22:34.600
and if all source files links together.

22:34.600 --> 22:35.440
So for this,

22:35.440 --> 22:37.520
exactly the search query engine was created.

22:37.520 --> 22:38.880
You can query the graph,

22:38.880 --> 22:42.080
and you can implement or script your own things,

22:42.080 --> 22:44.880
or there are already default set of checks

22:44.880 --> 22:45.720
that are implemented.

22:45.720 --> 22:46.560
For example,

22:46.560 --> 22:47.960
you can ask questions like,

22:47.960 --> 22:50.000
are all parent requirements,

22:50.000 --> 22:50.840
sorry,

22:50.840 --> 22:53.420
are all root requirements connected to some child?

22:53.420 --> 22:56.360
Or are all child requirements are connected to,

22:56.360 --> 22:57.240
at least one parent,

22:57.240 --> 22:58.080
and things like that?

22:58.080 --> 22:59.320
So it's totally,

22:59.320 --> 23:01.960
let's say, a flexible territory.

23:01.960 --> 23:03.840
You can define checks that you want,

23:03.840 --> 23:06.420
and even script it yourself by using the API.

23:08.920 --> 23:10.040
Does it answer?

23:14.800 --> 23:18.600
Do you have plans to build artificial intelligence to it?

23:18.600 --> 23:20.080
Because an expert,

23:20.080 --> 23:22.040
when I'm looking at requirements,

23:22.040 --> 23:23.080
I can see bloats,

23:23.080 --> 23:26.600
or some things that at the time,

23:26.600 --> 23:28.040
I see it's there.

23:28.040 --> 23:31.920
It seems like a very machine field for child.

23:31.920 --> 23:32.920
Do you have plans?

23:33.320 --> 23:35.680
There are different kinds of requirements flows.

23:35.680 --> 23:36.960
Yeah, again, sorry,

23:36.960 --> 23:37.960
I apologize for that.

23:37.960 --> 23:39.560
So the question is,

23:39.560 --> 23:43.080
if the tool can use AI

23:43.080 --> 23:45.480
to automate the detection of flows,

23:45.480 --> 23:47.560
and the answer is clearly yes,

23:47.560 --> 23:48.880
but there are different kinds of flows

23:48.880 --> 23:51.200
which are easy or not so easy to automate.

23:51.200 --> 23:52.040
So for example,

23:52.040 --> 23:54.380
the syntactic stuff is easy even to just lint.

23:54.380 --> 23:56.000
You don't even need the AI.

23:56.000 --> 24:00.440
Where this could really help is to improve the readability

24:00.440 --> 24:01.280
of the requirements,

24:02.160 --> 24:03.760
or let's say teach a tool

24:03.760 --> 24:06.000
to follow some kind of guideline.

24:06.000 --> 24:09.160
For example, the InCase requirements altering guides

24:09.160 --> 24:10.280
provides recommendations.

24:10.280 --> 24:11.280
They are even numbered.

24:11.280 --> 24:13.360
You can literally take them to the tool.

24:13.360 --> 24:14.200
It's on the roadmap,

24:14.200 --> 24:15.600
but not yet implemented.

24:16.920 --> 24:18.800
So the answer is totally possible,

24:18.800 --> 24:20.160
but we're just not there yet.

24:21.880 --> 24:23.760
Let's thank again, Nicole and start.

24:23.760 --> 24:24.600
Thank you.

24:24.600 --> 24:25.440
Thank you.

24:25.440 --> 24:26.280
Thank you.

24:26.280 --> 24:27.120
Thank you.

24:27.120 --> 24:27.960
Thank you.

24:27.960 --> 24:28.800
Thank you.

24:28.800 --> 24:30.120
Really great to get some AI.

24:31.280 --> 24:32.960
Thank you.

