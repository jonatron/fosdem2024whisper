WEBVTT

00:30.000 --> 00:37.000
Before we get started, these folks in the blue vest, the ones that just left the ones here,

00:37.000 --> 00:40.000
give them a big round of applause.

00:40.000 --> 00:49.000
They have a lot of time and effort. They've been doing something like napping or eating.

00:49.000 --> 00:51.000
They're doing something more fun than this.

00:51.000 --> 00:54.000
They've got to do this for the lovely youth in the community.

00:55.000 --> 01:03.000
So today we're talking about building your own Postgres DBA out of available MySQL DBA.

01:03.000 --> 01:08.000
And Dave Stokes, I'm a technology evangelist for Percona.

01:08.000 --> 01:13.000
Two years ago I joined Percona. Before that I was on the community team for MySQL.

01:13.000 --> 01:18.000
Stars MySQL AD, you don't know through sun and the more flax acquisition.

01:19.000 --> 01:27.000
Origin story. 2007 I hired to join MySQL AB, which was then a cute little startup company.

01:27.000 --> 01:36.000
And became the, well, what's it mean a PHP programmer to be running the certification group?

01:36.000 --> 01:43.000
If you want to be certified to be a ZBA or developer, I was the guy who signed off on your application.

01:43.000 --> 01:48.000
The big trouble I had was that hiring managers would call me and they'd say,

01:48.000 --> 01:51.000
it's hard to find a MySQL DBA.

01:51.000 --> 01:54.000
And I said, well, you have a list of folks who recently certified on the website.

01:54.000 --> 01:59.000
And they're like, yeah, by the way, it's impossible to find Postgres DBAs.

01:59.000 --> 02:06.000
And over the past couple of years, or several years, I've noticed it's still that problem with getting DBAs.

02:06.000 --> 02:13.000
So an economics comes down to a make versus buy decision.

02:13.000 --> 02:17.000
If you go out in the free market trying to buy a DBA, it can be expensive.

02:17.000 --> 02:19.000
You're also not quite sure what you're going to get.

02:19.000 --> 02:24.000
But if you have folks who run MySQL databases and they're fairly tolerant at it,

02:24.000 --> 02:28.000
you might have a good chance of converting them over to running Postgres.

02:28.000 --> 02:35.000
This is the definition of make versus buy for those who are interested in that.

02:35.000 --> 02:40.000
So why MySQL DBAs? There's a lot of them out there.

02:40.000 --> 02:46.000
They have basic knowledge of what a database does, what you do to it, what you don't do to it.

02:46.000 --> 02:50.000
They know the care in feeding, watering, and taking care of the basics.

02:50.000 --> 02:53.000
They're usually Postgres curious.

02:53.000 --> 02:58.000
For years they've heard, yeah, MySQL is okay, doesn't do this, doesn't do this right.

02:58.000 --> 03:00.000
And Postgres is so much better.

03:00.000 --> 03:05.000
And they can go, yeah, well sure, eventually the curiosity gets to them.

03:05.000 --> 03:09.000
Also there's a lot of similarities between MySQL and Postgres.

03:09.000 --> 03:13.000
Both were started by guys named Michael who tend to piss people off by the things they say.

03:13.000 --> 03:19.000
Also, when you show them some of the goodies that Postgres has,

03:19.000 --> 03:22.000
it becomes very, very attractive to them.

03:22.000 --> 03:28.000
Also in the past couple of years we've had a lot of folks who weren't DBAs for businesses

03:28.000 --> 03:32.000
who have seen their data taken from underneath them and pushed up in the cloud.

03:32.000 --> 03:36.000
What they're doing now is either boring or redundant for now if they want to do.

03:36.000 --> 03:41.000
And they're looking for another opportunity to be database administrators.

03:41.000 --> 03:45.000
So how do you recognize MySQL DBAs?

03:45.000 --> 03:47.000
Now I recognize some folks in this room.

03:47.000 --> 03:50.000
It's a couple of them are kind of scooting down in their chairs.

03:50.000 --> 03:54.000
First sense are t-shirts and coffee cups.

03:54.000 --> 03:57.000
You'll see a whole bunch of wide variety of them.

03:57.000 --> 04:04.000
And some of them are kind of cute, some of them are clever, others are kind of scary.

04:04.000 --> 04:09.000
But if you know that they're not a Postgres DBA but you know they're the admin of database,

04:09.000 --> 04:12.000
you might see some of these signs around.

04:12.000 --> 04:18.000
So Postgres versus MySQL differences.

04:18.000 --> 04:22.000
Both are relational database management systems.

04:22.000 --> 04:24.000
Both open source.

04:24.000 --> 04:30.000
Both very popular and both are technically old enough to drink.

04:30.000 --> 04:32.000
And since that's turned...

04:32.000 --> 04:35.000
Uh-oh, did I not turn it on?

04:35.000 --> 04:38.000
Yeah.

04:38.000 --> 04:44.000
Oh, there we go.

04:44.000 --> 04:47.000
So Postgres.

04:47.000 --> 04:51.000
Postgres has better support of the SQL standards.

04:51.000 --> 04:54.000
It's governed by a mailing list, which I always thought was kind of crazy

04:54.000 --> 04:56.000
until I've seen in actions the past over years.

04:56.000 --> 04:59.000
It actually works fairly well.

04:59.000 --> 05:03.000
Active community as you've probably seen today in this room alone.

05:03.000 --> 05:05.000
MySQL has seen this easier.

05:05.000 --> 05:08.000
It's governed by Oracle.

05:08.000 --> 05:14.000
If you're one of the folks who spent Thursday and Friday in the MySQL Belgium days,

05:14.000 --> 05:20.000
you've seen a lot of the stuff that is coming out from Oracle that may not impress you.

05:20.000 --> 05:23.000
But they also have an active community.

05:23.000 --> 05:28.000
So someone once said the devil is in the details.

05:28.000 --> 05:33.000
Okay, so you found your candidate to make your brand new Postgres DBA.

05:33.000 --> 05:35.000
What do you do with them?

05:35.000 --> 05:38.000
Well, you're going to mention to them that they're going to,

05:38.000 --> 05:42.000
at the end of the process, have better skills, be cross-trained,

05:42.000 --> 05:44.000
have better job opportunities,

05:44.000 --> 05:48.000
and now complain about knowing two databases.

05:48.000 --> 05:52.000
How many folks here run more than one database?

05:52.000 --> 05:54.000
Okay.

05:54.000 --> 05:59.000
And by the way, what we start is you're going to tell them

05:59.000 --> 06:02.000
you have different approaches to the same problem.

06:02.000 --> 06:05.000
Different isn't better, isn't worse, it's just different.

06:05.000 --> 06:08.000
They're going to learn a whole bunch of new tools.

06:08.000 --> 06:10.000
The basics are still the basics.

06:10.000 --> 06:12.000
You still have to do backups.

06:12.000 --> 06:14.000
You still have to do restores.

06:14.000 --> 06:16.000
Account administration is very similar.

06:16.000 --> 06:20.000
Tuning is wildly different, but not in theory.

06:20.000 --> 06:25.000
Query tuning is a big difference in Postgres.

06:25.000 --> 06:28.000
It's a little more complicated.

06:28.000 --> 06:30.000
Then there's the really neat stuff.

06:30.000 --> 06:34.000
Postgres has two JSON data types versus just one.

06:34.000 --> 06:39.000
The merge operator, more indexes as you can shake a stick at.

06:39.000 --> 06:41.000
But unfortunately there's some stuff that I call the,

06:41.000 --> 06:44.000
oh my god, why do we still have this stuff in 2023?

06:44.000 --> 06:48.000
It should be 2024 that you need to warn them about.

06:48.000 --> 06:51.000
Let me get to that in a bit.

06:51.000 --> 06:53.000
First steps.

06:53.000 --> 06:57.000
Give them an environment that's similar to what they're used to working with.

06:57.000 --> 07:04.000
The way to do this is go down and download the video rental database.

07:04.000 --> 07:06.000
Now for you folks without gray hair,

07:06.000 --> 07:09.000
20 years ago if you wanted to watch a movie in your house,

07:09.000 --> 07:13.000
you had to leave the house, go to a store

07:13.000 --> 07:15.000
where they had these things made out of plastic,

07:15.000 --> 07:20.000
either VHS or Sony beta format that had the movie,

07:20.000 --> 07:23.000
and you take it home and you put it in a special player.

07:23.000 --> 07:25.000
You actually had to go out and get that.

07:25.000 --> 07:27.000
And they may not have your movie in stock.

07:27.000 --> 07:31.000
Now 15 years ago, rather than DVDs,

07:31.000 --> 07:33.000
rather than having video rentals,

07:33.000 --> 07:35.000
they actually had DVDs, which is a little bit easier

07:35.000 --> 07:38.000
because that was a standardized format.

07:38.000 --> 07:40.000
MySQL used the Secura database,

07:40.000 --> 07:43.000
which is also a DVD or video rental database

07:43.000 --> 07:48.000
in their documentation, training, and blogs for years and years and years.

07:48.000 --> 07:52.000
So you're going to give them a similar environment to what they're used to.

07:52.000 --> 07:57.000
And you'll talk them through how to do a simple create database,

07:57.000 --> 08:01.000
show them how to use PG restore to load in the data.

08:01.000 --> 08:03.000
Real simple.

08:03.000 --> 08:05.000
By the way, if you've never seen one of these,

08:05.000 --> 08:09.000
this is what a video store used to look like.

08:09.000 --> 08:16.000
Okay, now that they have that DVD and rental up there,

08:16.000 --> 08:18.000
have them log in.

08:18.000 --> 08:23.000
Well, they're still logged in to use your Postgres and create a user.

08:23.000 --> 08:26.000
Now, I advise you to do it as a super user.

08:26.000 --> 08:29.000
You might have heard Mr. Booze earlier having great ideas

08:29.000 --> 08:31.000
of why you don't want to do that.

08:31.000 --> 08:34.000
MySQL DVAs are used to having God privileges,

08:34.000 --> 08:38.000
and if they screw it up, you go back

08:38.000 --> 08:46.000
and you show them how to reinstall the database.

08:46.000 --> 08:48.000
As I mentioned, this is dangerous.

08:48.000 --> 08:50.000
You bypass a lot of security stuff,

08:50.000 --> 08:54.000
but you want them screwing up at this level,

08:54.000 --> 08:56.000
so you learn not to do it at a higher level,

08:56.000 --> 08:59.000
which is much more expensive for you.

08:59.000 --> 09:01.000
Okay, back in their user account,

09:01.000 --> 09:05.000
they type in PSQL minus D DVD rental.

09:05.000 --> 09:09.000
That tells them that they're talking to the database of DVD, DVD, rental,

09:09.000 --> 09:12.000
and they get that lovely little prompt.

09:12.000 --> 09:16.000
The prompt with the equal sign OctoThorpe is warning them

09:16.000 --> 09:18.000
that they have super user privilege.

09:18.000 --> 09:21.000
You'll have to point that out to them.

09:21.000 --> 09:25.000
So, at this point, we have a Sekela-like database,

09:25.000 --> 09:27.000
something they're used to,

09:27.000 --> 09:31.000
and you can have them do assignments, play around,

09:31.000 --> 09:33.000
do similar stuff that they're used to.

09:33.000 --> 09:36.000
And the great thing about this is it's a familiar to them,

09:36.000 --> 09:38.000
lots of stuff to join.

09:38.000 --> 09:43.000
It's easy to do, and up to now, it's been dirt cheap for you.

09:43.000 --> 09:45.000
Now, the first thing they're going to do

09:45.000 --> 09:49.000
is they're going to type in the command show tables.

09:49.000 --> 09:51.000
No, show tables.

09:51.000 --> 09:54.000
Oh, my God, this thing's broken. What's going on?

09:54.000 --> 09:57.000
This is where you tell them different, equal, isn't worse,

09:57.000 --> 09:59.000
or better, it's just different.

09:59.000 --> 10:03.000
So, you'll have to tell them how to use the slash D commands.

10:03.000 --> 10:06.000
Turn them out a cheat sheet, walk them through them,

10:06.000 --> 10:10.000
show them tables, show them indexes,

10:10.000 --> 10:13.000
show them sequences, and you'll have to explain what a sequence is.

10:13.000 --> 10:17.000
But it's just different, and it's going to take them a while

10:17.000 --> 10:18.000
to get used to this.

10:18.000 --> 10:21.000
Have them use cheat sheets, there's nothing wrong with that.

10:23.000 --> 10:27.000
So, if there's no show or create table,

10:27.000 --> 10:29.000
you show them how to do a slash D actor,

10:29.000 --> 10:32.000
and they get the information they're used to looking.

10:32.000 --> 10:36.000
Now, the format, I see one person who's a MySQL DBA that I know,

10:36.000 --> 10:40.000
is noticing that the format is a lot different than what they're used to,

10:40.000 --> 10:43.000
but it's the same information, column name, type,

10:43.000 --> 10:45.000
whether it's nullable or not.

10:45.000 --> 10:47.000
This is going to blow them away,

10:47.000 --> 10:49.000
but you're going to explain them what a sequence is.

10:49.000 --> 10:51.000
It tells them where the indexes are.

10:51.000 --> 10:53.000
The information's there.

10:53.000 --> 10:55.000
It's just in a different format.

10:55.000 --> 10:59.000
Once again, different isn't better or worse, it's just different.

11:01.000 --> 11:03.000
Now, have them do a simple query.

11:03.000 --> 11:06.000
That works like what they're used to seeing.

11:06.000 --> 11:07.000
Hooray.

11:07.000 --> 11:09.000
About this point, they're going,

11:09.000 --> 11:12.000
you know, this isn't so bad, I can get used to this.

11:12.000 --> 11:14.000
And at this point, you have them hooked.

11:15.000 --> 11:17.000
Have them do a simple backup.

11:17.000 --> 11:22.000
PG underscore dump, very much like MySQL dump.

11:22.000 --> 11:25.000
I know you probably use PG restore or something else,

11:25.000 --> 11:28.000
but this is a very simple, fairly generic, fairly common tool

11:28.000 --> 11:31.000
they can find just about anywhere.

11:31.000 --> 11:34.000
And show them that you're piping it to a file.

11:36.000 --> 11:39.000
And explain to them, you know, what's going on.

11:44.000 --> 11:47.000
By the way, if you're going to be at Confu in Montreal in two weeks,

11:47.000 --> 11:49.000
I'm giving the other side of this talk

11:49.000 --> 11:52.000
where it's the MySQL DBAs learning this information.

11:52.000 --> 11:55.000
This talk is mainly for folks who run Postgres,

11:55.000 --> 11:58.000
who want to see how they steer the boat of learning

11:58.000 --> 12:01.000
around the shoals and reefs and rocks that are out there

12:01.000 --> 12:03.000
for these folks who want to learn.

12:09.000 --> 12:11.000
Simple restore.

12:11.000 --> 12:13.000
They're used to doing this in MySQL.

12:13.000 --> 12:16.000
Now you've shown them how to get around not having show tables,

12:16.000 --> 12:18.000
how to do a backup and restore.

12:18.000 --> 12:21.000
For a lot of companies, that's 50% of what a DBA does

12:21.000 --> 12:23.000
when they get started.

12:23.000 --> 12:25.000
Whoops.

12:28.000 --> 12:31.000
Once again, print out this cheat sheet.

12:31.000 --> 12:34.000
The slides, I'll show you how to get that later.

12:34.000 --> 12:39.000
It's, once again, different, and they'll get used to it.

12:39.000 --> 12:41.000
The other thing is, when they start looking at data types,

12:41.000 --> 12:44.000
they're going to notice that auto increment has disappeared

12:44.000 --> 12:46.000
and it's been replaced by serial.

12:46.000 --> 12:49.000
There's a serial data type in MySQL.

12:49.000 --> 12:52.000
It's not heavily used. There's some issues with using it.

12:52.000 --> 12:57.000
But it's the same idea, two bytes, four bytes, eight bytes.

12:57.000 --> 13:00.000
That's great. Just call something different.

13:00.000 --> 13:03.000
Now we get to sneak in sequences.

13:03.000 --> 13:07.000
Now MariaDB has sequences MySQL doesn't.

13:07.000 --> 13:11.000
And to get around this, MySQL has something called auto increment.

13:11.000 --> 13:13.000
Every time you add a record,

13:13.000 --> 13:16.000
and don't specify that column name or specify null

13:16.000 --> 13:20.000
as the value for that column name, it auto-mentally increments.

13:20.000 --> 13:24.000
Now, you show them this and they're going to be happy.

13:24.000 --> 13:26.000
They're going to...

13:28.000 --> 13:32.000
We create a simple table and we tell them,

13:32.000 --> 13:35.000
okay, this is going to use a function called nextVal.

13:35.000 --> 13:38.000
It's going to go out to the sequence and pull the next one off in the stack.

13:38.000 --> 13:42.000
It's real simple. And they'll catch that.

13:42.000 --> 13:45.000
I give them a quick demo,

13:45.000 --> 13:51.000
point out that we're not giving any values for column X into table X,

13:51.000 --> 13:53.000
but the system automatically generates them.

13:53.000 --> 13:57.000
As you see over here, they're going to be happy with that.

13:57.000 --> 14:00.000
They're used to seeing that sort of that work.

14:03.000 --> 14:07.000
And you can tell them that if they go out to a slash D,

14:07.000 --> 14:10.000
they're going to see the entry for the table

14:10.000 --> 14:12.000
and the sequence that supports it.

14:12.000 --> 14:17.000
And you're telling them that this X here is the X same X here,

14:17.000 --> 14:20.000
this is the column name, this is to say that it's a sequence.

14:20.000 --> 14:22.000
So about this time, they realize that things work the same.

14:22.000 --> 14:26.000
They just...at the end, but the intermediate function,

14:26.000 --> 14:29.000
ality is a lot different.

14:29.000 --> 14:33.000
Something else you can do for them that will amaze them is

14:33.000 --> 14:38.000
create a table and have it populate itself with a generateSeries function.

14:38.000 --> 14:40.000
Can't do this in mySQL.

14:40.000 --> 14:45.000
I don't know how many hours I've wasted in my life generating test data in tables,

14:45.000 --> 14:49.000
and to have this suddenly unleashed was a big revelation.

14:50.000 --> 14:52.000
Wrapping sequences.

14:52.000 --> 14:55.000
This is the part where you're going to have to toss them very slowly

14:55.000 --> 14:57.000
because it takes a while to catch this.

14:57.000 --> 15:00.000
We create a sequence.

15:00.000 --> 15:04.000
Minimum value is one, maximum value is two, we tell it to cycle.

15:04.000 --> 15:09.000
As we do the next value function, it goes between one and two, one and two.

15:11.000 --> 15:14.000
Now there are some edge cases where this is extremely handy.

15:14.000 --> 15:19.000
I used to work in a place where we had product that came in a part one and a part two,

15:19.000 --> 15:24.000
and there was always a pain in the butt to generate the data for that.

15:24.000 --> 15:28.000
Show them how to check the details on sequences.

15:28.000 --> 15:32.000
Here's the one we just created, minimum one, maximum two.

15:32.000 --> 15:34.000
It increments and it cycles.

15:37.000 --> 15:38.000
Sticking points.

15:38.000 --> 15:41.000
This is where you're going to have to be patient.

15:41.000 --> 15:45.000
In some cases it's like talking to a five-year-old, other times it's like talking to a 15-year-old,

15:45.000 --> 15:48.000
and other times it's like talking to a 35-year-old.

15:48.000 --> 15:51.000
Explain is a lot different.

15:51.000 --> 16:00.000
The MySQL addition that they're used to shows them column, table, partitions, key length, references,

16:00.000 --> 16:05.000
but possible keys, gives them the query plan down here.

16:09.000 --> 16:15.000
Now, using the explain that's found in Postgres, it's the same rough material.

16:15.000 --> 16:17.000
It's just a different format.

16:17.000 --> 16:21.000
You'll have to explain to them why you want to put Analyze in here, or Buffers,

16:21.000 --> 16:27.000
or whatever else you want in there, and tell them that it's the same rough information.

16:28.000 --> 16:36.000
It gives us the query plan that doesn't actually show the SQL.

16:36.000 --> 16:43.000
The one thing that they're going to freak out at is they're going to see cost, the startup cost, and the overall cost.

16:43.000 --> 16:45.000
They're not used to seeing that information.

16:45.000 --> 16:49.000
Then you can explain to them that when you have things like indexes,

16:49.000 --> 16:58.000
there's some set up time before you use the index, and that's where this cost will pop up.

16:58.000 --> 17:05.000
Once again, different, not better, not worse, just different, they'll get used to the format soon enough.

17:05.000 --> 17:18.000
Also, my SQL is not used to seeing YAML or XML output from this.

17:18.000 --> 17:25.000
Now, talk them through how to read this, how the nodes are selected and mentioned here.

17:25.000 --> 17:28.000
It's a different format than what they're used to,

17:28.000 --> 17:36.000
and they will learn how to pick out the various information from the various tables.

17:36.000 --> 17:46.000
In this case, I put Film in Magenta, Film ID in Blue, and Actor in Red.

17:46.000 --> 17:53.000
Show them that the various types of joins that are available to them, and it's just in a different format.

17:54.000 --> 17:57.000
I don't want to calmly discuss.

17:57.000 --> 18:03.000
This is the hard part on you because you're used to this, they're not.

18:03.000 --> 18:06.000
I mentioned sequences already, they'll pick that up.

18:06.000 --> 18:08.000
Materialized views.

18:08.000 --> 18:12.000
There is a way to get materialized views in my SQL, but it's a third-party software.

18:12.000 --> 18:14.000
It doesn't always work the way you want.

18:14.000 --> 18:19.000
That is something that's going to pique their interest because they might have worked in a company

18:19.000 --> 18:25.000
where they have something like delayed stock quotes, where a materialized view would have been handy for them if they've had it.

18:25.000 --> 18:29.000
Explain, as I showed you, it's different for them.

18:29.000 --> 18:33.000
It's just formatted in a way they're not used to.

18:33.000 --> 18:38.000
They're used to connecting to the server and getting a thread.

18:38.000 --> 18:42.000
They're not used to the overhead of actually getting a Linux process.

18:42.000 --> 18:45.000
That's something that's a little different.

18:45.000 --> 18:49.000
They also need to be taught that everyone's using some sort of pooler.

18:49.000 --> 18:53.000
Not a big problem, but it's there.

18:53.000 --> 18:54.000
Now, vacuum.

18:54.000 --> 18:57.000
Be very careful when you mention vacuum.

18:57.000 --> 19:02.000
They're not used to calling rows tuples, and the idea of the heap will really throw them.

19:02.000 --> 19:06.000
That's the hardest part when I start talking to folks about this one-on-one.

19:06.000 --> 19:11.000
It's the equivalent of a teenager throwing all his laundry in the middle of the bedroom,

19:11.000 --> 19:17.000
and he knows exactly where it is, and he can pull out whatever he wants, but no one else can.

19:17.000 --> 19:24.000
Then tell him, yeah, when the stuff gets dirty, you actually run a vacuum over it and cleans it up or cleans up the tables.

19:24.000 --> 19:25.000
That will freak them out.

19:25.000 --> 19:30.000
There's lots of good documentation out there on the web about that.

19:30.000 --> 19:34.000
The next thing to do is teach them automatically about auto-vacuum.

19:34.000 --> 19:37.000
That will save a lot of problems.

19:37.000 --> 19:38.000
Toast.

19:38.000 --> 19:40.000
MySQL has something similar to toast.

19:40.000 --> 19:50.000
If you have things that don't neatly fit into a block, that's how it extends it calmly, and we'll actually tell them about that.

19:50.000 --> 19:55.000
Then buy them an adult drink and talk about wrap-around XIDs.

19:55.000 --> 20:04.000
For the MySQL folks who are in here, every transaction has a unique ID, and it's a 32-bit number.

20:04.000 --> 20:09.000
Unfortunately, in lots of possible...

20:09.000 --> 20:14.000
It's possible to wrap those around, and once you wrap those around, the older numbers, the data that's tied to them,

20:14.000 --> 20:21.000
you can't get to without doing a whole bunch of really nasty mechanical work to get that, and then you lost the new stuff.

20:21.000 --> 20:23.000
There's ways to modify...

20:23.000 --> 20:32.000
Well, ways to monitor how that goes, but the first couple of times you run into that, or here I mentioned of it, it's frightening.

20:32.000 --> 20:37.000
The other thing that you're going to show them that's going to really pique their interest is tricks like this.

20:37.000 --> 20:42.000
MySQL, you can't do a filter like this.

20:42.000 --> 20:52.000
This isn't a thing where we're going through movies, and we're trying to get the summary of the links for the R-rated and the PG movies.

20:52.000 --> 20:58.000
To do this in MySQL, you're going to have to write some CTEs and do some other nasty stuff or some winnowing functions.

20:58.000 --> 21:04.000
Here it's just a simple query.

21:04.000 --> 21:06.000
Now there's some reading out there for them in the watch.

21:06.000 --> 21:15.000
I produced and I'm about to reproduce a series of stuff on MySQL, teaching MySQL DBAs postgres.

21:15.000 --> 21:23.000
Halfway through my production of that, the company changed their logo, so I need to go back, update some of the material, change the logo.

21:23.000 --> 21:35.000
Checking for bloat and tables and how to scale postgres.

21:35.000 --> 21:38.000
The other thing I recommend is this book.

21:38.000 --> 21:41.000
You'll hear that it's postgres 14.

21:41.000 --> 21:42.000
We're on 16, 17.

21:42.000 --> 21:44.000
We'll come up with this later.

21:44.000 --> 21:49.000
This gentleman has done a marvelous job on documenting everything.

21:49.000 --> 21:53.000
It's been available free as a PDF for a long time.

21:53.000 --> 21:57.000
You can actually get print copies, recommend print copies.

21:57.000 --> 22:01.000
They make a nice impressive thump when you throw it when you get frustrated, but the material is there.

22:01.000 --> 22:08.000
I think it costs 20, 25 bucks to get the printed copy delivered to your house.

22:08.000 --> 22:10.000
Check out scaling postgres.

22:10.000 --> 22:13.000
That's an interesting weekly website.

22:13.000 --> 22:18.000
It gives you a lot of great information.

22:18.000 --> 22:20.000
These are the videos that I mentioned earlier.

22:20.000 --> 22:21.000
I'm redoing those.

22:21.000 --> 22:27.000
Follow my ex information and you'll see that.

22:27.000 --> 22:33.000
Now, if you want a longer version of this presentation, I have it there.

22:33.000 --> 22:38.000
I gave an early version of this at Percona Live last year.

22:38.000 --> 22:43.000
That was mainly from the MySQL folks learning postgres.

22:43.000 --> 22:46.000
I'm here right now to beg you for your help.

22:46.000 --> 22:52.000
Percona, the company that employs me, is working on transparent data encryption for postgres.

22:52.000 --> 22:54.000
Other databases have that natively.

22:54.000 --> 22:56.000
Postgres doesn't.

22:56.000 --> 22:59.000
We have it in alpha, about to go beta.

22:59.000 --> 23:02.000
Unfortunately, the guy who was here, who was the expert on it,

23:02.000 --> 23:06.000
is unfortunately recovering from his bad dinner last night.

23:06.000 --> 23:08.000
I was going to have him answer questions.

23:08.000 --> 23:10.000
Download the code.

23:10.000 --> 23:12.000
You can run it off Docker.

23:12.000 --> 23:17.000
I run it off Ubuntu's version of postgres.

23:17.000 --> 23:18.000
It encrypts your data.

23:18.000 --> 23:22.000
Someone just casually going through your data can't read what you have in there.

23:22.000 --> 23:26.000
It's very handy and we need people to try it.

23:26.000 --> 23:29.000
With that, I want to answer your questions.

23:29.000 --> 23:32.000
For folks who have suggestions on how to teach postgres,

23:32.000 --> 23:37.000
I'd love to hear that too.

23:37.000 --> 23:44.000
Thank you.

23:44.000 --> 23:47.000
Any hints?

23:47.000 --> 23:49.000
Any questions, please?

23:49.000 --> 23:51.000
Thank you.

23:51.000 --> 23:55.000
Any questions?

23:55.000 --> 23:57.000
Yes?

23:57.000 --> 24:04.000
How would you introduce my SQL DBA as a sort of postgres replication cluster, etc.?

24:04.000 --> 24:08.000
How would I introduce my SQL DBAs into the clustering models

24:08.000 --> 24:11.000
found in the postgres world?

24:11.000 --> 24:15.000
Replication.

24:15.000 --> 24:19.000
If they have a Galera background, it's a little easier.

24:19.000 --> 24:23.000
If they're used to an inner-DV cluster, it's a little more complex.

24:23.000 --> 24:27.000
You're going to have to speak to the options between running FCD to control everything.

24:27.000 --> 24:30.000
That's similar to kind of like my SQL router.

24:30.000 --> 24:34.000
Something like Petroni that does the coordination.

24:34.000 --> 24:38.000
There are some articles out there that people have them,

24:38.000 --> 24:41.000
but there's really no easy correlation.

24:41.000 --> 24:46.000
I think five years from now, postgres will kind of be on par with inner-DV cluster,

24:46.000 --> 24:48.000
and we won't have those problems.

24:48.000 --> 24:54.000
Right now, it's kind of a mess because you have third-party software all over the place.

24:54.000 --> 24:58.000
By the way, is booking.com seriously thinking of switching over?

24:58.000 --> 25:02.000
Yes, it's a postgres.

25:02.000 --> 25:06.000
For here. First of all, thanks a lot for the talk.

25:06.000 --> 25:10.000
I'm actually quite young, a SQL DBA.

25:10.000 --> 25:13.000
It's just two years since I've worked on that.

25:13.000 --> 25:17.000
It's actually pretty interesting to see the differences that you are showing up.

25:17.000 --> 25:23.000
One of the things that you mentioned, like it felt like having emphasis on is the explain,

25:23.000 --> 25:25.000
how could it be quite different?

25:25.000 --> 25:28.000
Actually, the latest version is not so different.

25:28.000 --> 25:31.000
There is this theme of the execution plan that is slightly different.

25:31.000 --> 25:34.000
But I guess that one of the key points for me, at least,

25:34.000 --> 25:39.000
while checking postgres recently, is about the amount of operations and operators that it actually has.

25:39.000 --> 25:43.000
That is like more than 50% of my time spent with engineers,

25:43.000 --> 25:48.000
helping them to fix their queries and to find creative ways to actually get around to the limitations.

25:48.000 --> 25:53.000
Postgres has an embarrassing amount of great features out there.

25:53.000 --> 25:57.000
There's like eight different types of indexes out there.

25:57.000 --> 26:00.000
In MySQL, you used to hashes and...

26:00.000 --> 26:03.000
I guess the index is the only one that works.

26:03.000 --> 26:07.000
So there's a lot of really neat stuff out there for MySQL DBA to discover.

26:07.000 --> 26:12.000
Getting it mastered and getting it running right, it's going to take a little bit of time learning in elbow grease.

26:12.000 --> 26:17.000
But it's a wonderful opportunity if you're in MySQL and you don't like the heat wave pressure

26:17.000 --> 26:21.000
that MySQL is pushing on everything, and you want to try something different.

26:21.000 --> 26:23.000
Thank you.

26:23.000 --> 26:25.000
Thank you.

26:25.000 --> 26:27.000
Thank you.

26:27.000 --> 26:30.000
Any other questions, please?

26:30.000 --> 26:35.000
Thank you.

26:35.000 --> 26:37.000
I was wondering if you could...

26:37.000 --> 26:42.000
I mean, I've worked a lot on Over the Years on Oracle and Postgres, but not so much on MySQL.

26:42.000 --> 26:48.000
And the thing which always intrigues me, and I was working with MySQL DBA, is the indexing.

26:48.000 --> 26:51.000
Now, you have... originally you had MyISAM, then you had INODB,

26:51.000 --> 26:56.000
but these are not traditional sort of heap and B-tree on top style indexes.

26:56.000 --> 26:59.000
It works differently, but I don't know.

26:59.000 --> 27:02.000
Can you just... is that a conversation? You did allude to it in your talk.

27:02.000 --> 27:04.000
Yeah.

27:04.000 --> 27:07.000
I mean, different isn't better or worse.

27:07.000 --> 27:14.000
MySQL, especially with the INODB storage engine, would love to have every table have a primary key on it,

27:14.000 --> 27:17.000
and they store everything in the primary key.

27:17.000 --> 27:23.000
When you update a row, race that row, put in the new stuff, write the old stuff off in the undo log,

27:23.000 --> 27:25.000
and away you go.

27:25.000 --> 27:28.000
You're not having an old version of that sitting out there in the heap.

27:28.000 --> 27:32.000
That's kind of the 10-cent version of how that works.

27:32.000 --> 27:36.000
Thank you. I'm very curious. I'm going to look into this more.

27:36.000 --> 27:38.000
It sounds expensive.

27:38.000 --> 27:41.000
Well, that's the great thing about open-source software.

27:41.000 --> 27:47.000
You can get, like the demonstration there, you can take an old laptop, put on a copy of Ubuntu for free,

27:47.000 --> 27:50.000
put down your favorite version of Postgres for free,

27:50.000 --> 27:54.000
have them download the DVD rental tar for free.

27:54.000 --> 27:57.000
Opportunity cost is doing things out the door.

27:57.000 --> 28:04.000
If you had to teach someone to be a DB2 or Oracle DBA and had to give them their own environment to get started up,

28:04.000 --> 28:09.000
you've got licensing costs, you've got a whole bunch of other stuff that's out the door.

28:09.000 --> 28:14.000
So...

28:14.000 --> 28:15.000
Thank you.

28:15.000 --> 28:17.000
Thank you.

28:17.000 --> 28:20.000
So thanks for coming.

