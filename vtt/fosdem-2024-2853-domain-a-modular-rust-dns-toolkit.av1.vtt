WEBVTT

00:00.000 --> 00:11.000
Our next speaker is Martin, who would be telling us about the domain crate, I think it's called.

00:11.000 --> 00:17.000
He's been building for Rust and all the cool tools you will be building with it.

00:17.000 --> 00:19.000
Probably, yeah.

00:19.000 --> 00:22.000
Hello.

00:22.000 --> 00:28.000
Back in 2015, so in the times before, two things happened.

00:28.000 --> 00:32.000
One was that Rust released version 1.0 and became stable.

00:32.000 --> 00:36.000
And the other was that I started working at a Nellitlabs.

00:36.000 --> 00:41.000
You probably know Rust as the thing that everyone wants to write everything in,

00:41.000 --> 00:48.000
and you might know Nellitlabs from things like Unbound, NSD, OpenDNSHack, and some more things.

00:48.000 --> 00:54.000
So I thought I want to teach myself some Rust, and I need to teach myself some DNS,

00:54.000 --> 00:57.000
so why not combine these things?

00:57.000 --> 01:01.000
Now, what also happened at the same time Benjamin Fry was working on trust DNS,

01:01.000 --> 01:07.000
which is now called Hickory DNS, and I figured, well, let's not do the same thing.

01:07.000 --> 01:08.000
That would be silly.

01:08.000 --> 01:14.000
So I came up with a different idea, which was instead of building a giant application,

01:14.000 --> 01:21.000
or a set of applications, build lots of building blocks that people can then use

01:21.000 --> 01:24.000
to build their own specialized DNS applications.

01:24.000 --> 01:30.000
Because what happens is we have a lot of good sort of stuff for generic use cases,

01:30.000 --> 01:33.000
resolvers, primary servers, that sort of stuff.

01:33.000 --> 01:38.000
But if you want to build your own specialized DNS application, that's actually surprisingly hard.

01:38.000 --> 01:40.000
I find that out the hard way.

01:40.000 --> 01:48.000
For a project that we were doing, I needed a very specific primary server that was having a like a Rust interface,

01:48.000 --> 01:54.000
and then instead of people actually telling me which specific resource records to publish,

01:54.000 --> 01:57.000
they just wanted me to tell, I want this thing to happen.

01:57.000 --> 02:05.000
And then I built this with a Python at the time with Flask and LDNS Python Reps,

02:05.000 --> 02:08.000
which are surprisingly weird.

02:08.000 --> 02:14.000
And I would rather have had something that I could just build this all in Rust.

02:15.000 --> 02:18.000
So I think this is really a good idea.

02:18.000 --> 02:24.000
And so I started working on it, learned a bunch of Rust, learned a bunch of DNS.

02:24.000 --> 02:26.000
And where are we now with it?

02:26.000 --> 02:34.000
This is the starting page for the documentation for the last released version, 093.

02:34.000 --> 02:38.000
It's also apparently quite a lot happened before at 09 already.

02:38.000 --> 02:41.000
So there's a bunch of things as you can see here.

02:41.000 --> 02:43.000
Base is also the handling of DNS data.

02:43.000 --> 02:47.000
So there's types in there for all the things you could think of.

02:47.000 --> 02:53.000
The main names, resource records, record data, all the R types and all these various types.

02:53.000 --> 03:00.000
And also messages, complete messages so you can build your own messages and whatnot.

03:00.000 --> 03:07.000
There's R data, which is a massively incomplete set of record data types.

03:07.000 --> 03:10.000
We only did the ones that we need because this is very early still.

03:10.000 --> 03:15.000
And whenever you change something and you have like what is it, 6,000 record types,

03:15.000 --> 03:18.000
you have to change all of that, which would be annoying.

03:18.000 --> 03:20.000
So we limited ourselves to the ones that we need.

03:20.000 --> 03:23.000
But there's a lot of stuff in there already.

03:23.000 --> 03:25.000
There's all the basic ones.

03:25.000 --> 03:26.000
There's the DNS-like ones.

03:26.000 --> 03:29.000
Even someone contributed the SVCB or HTTP ones.

03:29.000 --> 03:32.000
We even have that.

03:32.000 --> 03:40.000
There is a stop resolver, very simple one, just as like a proof of concept.

03:40.000 --> 03:44.000
Although that's, I think, the thing that most people actually use.

03:44.000 --> 03:47.000
I wrote a signer.

03:47.000 --> 03:52.000
Well, it's not complete because it doesn't do NSIC-3, but yeah.

03:52.000 --> 03:55.000
I wrote some T-SIC support that is actually complete.

03:55.000 --> 04:01.000
And that was kind of fun because that happened right at the time when there was an update to T-SIC.

04:01.000 --> 04:08.000
So I contributed back some thoughts on the quality of the RFC for T-SIC,

04:08.000 --> 04:12.000
which the original one is surprisingly weird.

04:12.000 --> 04:16.000
Someone contributed some very basic validation things.

04:16.000 --> 04:23.000
I think it's basically just validate and RR-SICs or nothing with looking at DNS keys and stuff like that.

04:23.000 --> 04:27.000
And we have a zone file part of there because everyone has one.

04:27.000 --> 04:29.000
And this is actually a second iteration.

04:29.000 --> 04:31.000
I wrote the first one, so I wrote the second one,

04:31.000 --> 04:34.000
which I probably also going to throw away and write the third one.

04:34.000 --> 04:36.000
But we'll see.

04:36.000 --> 04:44.000
This has also to do with, for NSD, a colleague recently built a zone file part that uses these,

04:44.000 --> 04:49.000
what is this, the things with the multiple SIMD, and that is ridiculously fast.

04:49.000 --> 04:53.000
So now I'm kind of embarrassed.

04:53.000 --> 04:57.000
So it actually kept growing quite nicely.

04:57.000 --> 04:59.000
But then, oh no, distractions.

04:59.000 --> 05:06.000
We did a thing for routing or RPKI, which we wrote two products for,

05:06.000 --> 05:10.000
Routinator and Krill, which are quite popular in that field.

05:10.000 --> 05:15.000
But it wasn't actually that bad because both of them are written in Rust, obviously.

05:15.000 --> 05:20.000
And these are actual products that are actually used by actual people.

05:20.000 --> 05:25.000
So we got a lot of experience with writing in Rust, deploying Rust,

05:25.000 --> 05:29.000
and also sort of got a bit more comfortable with doing things in Rust,

05:29.000 --> 05:32.000
because if you sort of listen to a lot of people and they're all,

05:32.000 --> 05:34.000
blah, blah, blah, fad, go away.

05:34.000 --> 05:36.000
But actually, nobody really cared.

05:36.000 --> 05:39.000
If you build an application that works, that is very convenient,

05:39.000 --> 05:42.000
then of course everyone will like it.

05:42.000 --> 05:46.000
And that then meant that we could take a step back.

05:46.000 --> 05:51.000
The DNS is changing quite currently, like there's all of these new things,

05:51.000 --> 05:54.000
like there is HTTPS, there's a lot of new transport protocols,

05:54.000 --> 05:57.000
there's a lot of stuff happening right now.

05:57.000 --> 06:02.000
So probably also the applications for DNS, the use cases for DNS are changing.

06:02.000 --> 06:06.000
And I think it's a good idea to sort of explore that space

06:06.000 --> 06:11.000
and see where we can get this by providing a lot of sort of building blocks

06:11.000 --> 06:16.000
that you can just put together quickly and just like play around with things.

06:16.000 --> 06:23.000
The sovereign tech fund, which is a German sort of funding organization

06:23.000 --> 06:28.000
for fundamental internet infrastructure, they agreed with us.

06:28.000 --> 06:33.000
So they funded a year of development for us, this,

06:33.000 --> 06:40.000
which then allowed us to spec what we're going to do with domain this year

06:40.000 --> 06:44.000
and allowed us to focus, to actually have like three people work on this

06:44.000 --> 06:46.000
full time more or less this year.

06:46.000 --> 06:48.000
So what's the plan?

06:48.000 --> 06:52.000
We came up with three tracks.

06:52.000 --> 06:57.000
First is the client track, which basically is all the things that need to be a DNS client.

06:57.000 --> 07:02.000
So the thing that sends requests and then receives responses, matches responses,

07:02.000 --> 07:06.000
and also sort of preprocesses responses.

07:06.000 --> 07:10.000
So the three things that we have here on our list right now is basic transports.

07:10.000 --> 07:16.000
We're currently only focusing on traditional DOS, DNS over Port 53,

07:16.000 --> 07:21.000
so UDP, TCP and DUT, the other ones are coming.

07:21.000 --> 07:25.000
But a year is actually not that long, surprisingly enough.

07:25.000 --> 07:33.000
We're doing response caching and we're doing, that's going to be fun, a DNS-seq validation.

07:33.000 --> 07:37.000
The second track is the server track.

07:37.000 --> 07:43.000
So the thing that receives requests and then figures out what to respond with.

07:43.000 --> 07:46.000
Again, basic transports.

07:46.000 --> 07:49.000
We're doing all the things that you need for zone handling.

07:49.000 --> 07:54.000
The key on plan is to have zone file parsing, which we've seen we already kind of sort of have.

07:54.000 --> 08:02.000
Just need to make it nicer, which also probably means we need to add lots more record types.

08:02.000 --> 08:08.000
Then stick all of that into a zone tree and use that zone tree to answer queries.

08:08.000 --> 08:10.000
Straightforward enough.

08:10.000 --> 08:12.000
Of course, DNS-exhining is a thing.

08:12.000 --> 08:14.000
As I said, I already have parts of that.

08:14.000 --> 08:19.000
We need to actually turn it from a proof of concept into an actual thing that you can use.

08:19.000 --> 08:27.000
We're going to do this zone transfer so that you can then basically, with this server track here,

08:27.000 --> 08:33.000
technically build your own authoritative, which then would solve the use case I heard earlier.

08:33.000 --> 08:39.000
Then we have a third track, which we just called the bonus track, which is sort of the idea is,

08:39.000 --> 08:43.000
well, we can build all of these things, but we don't know if they're any good if we don't use them.

08:43.000 --> 08:48.000
So let's build something where we actually use our stuff and put it together.

08:48.000 --> 08:56.000
One idea that we have is a DNS proxy.

08:56.000 --> 09:01.000
Sometimes you call forwarder, like all this terminology is terrible and non-standardized,

09:01.000 --> 09:05.000
but basically a thing that sits somewhere and receives requests,

09:05.000 --> 09:09.000
but doesn't do the actual recursive resolving just forwarded to someone else.

09:09.000 --> 09:18.000
What we've talked with various people about what they need is sort of a way to decide what to do with the request

09:18.000 --> 09:20.000
based on a set of rules.

09:20.000 --> 09:24.000
Look at the request, look at where it comes from, look at the R types, that sort of thing,

09:24.000 --> 09:29.000
and then say I want to process it, I want to send it forward to some other recursive,

09:29.000 --> 09:35.000
I want to respond to it here, or I just want to drop it because that's just the wrong thing.

09:36.000 --> 09:44.000
So the sort of long-term goal for this thing is to build something that can do that with maybe a scripting language and whatnot.

09:44.000 --> 09:49.000
But as an initial proof of concept, it will just basically be into some configuration.

09:49.000 --> 09:54.000
Maybe you have to write the rules in Rust by hand, but they're not yet.

09:54.000 --> 09:57.000
But no, there's even more.

09:57.000 --> 10:01.000
We also want to do a diagnostics tool.

10:01.000 --> 10:04.000
I'm not going to say dig.

10:05.000 --> 10:08.000
Mostly because we need it for testing anyway.

10:08.000 --> 10:12.000
But then we thought, well, just re-implementing dig is kind of sort of boring.

10:12.000 --> 10:15.000
Let's look into something more useful.

10:15.000 --> 10:20.000
And some of the things that we thought of was sort of like what DNSVis does.

10:20.000 --> 10:27.000
So have a thing that you can go and check if your DNSX for your zone is correct, correctly set up.

10:27.000 --> 10:33.000
Another idea was compare your resolver, your upstream recursive.

10:33.000 --> 10:37.000
What that actually has on data compared to your authoritative.

10:37.000 --> 10:39.000
Stuff like that.

10:39.000 --> 10:42.000
So if you have ideas, we're definitely open for it.

10:42.000 --> 10:47.000
First stage, we just want to sort of see how this thing is going to look.

10:47.000 --> 10:59.000
And then finally, we have a bunch of things in LDNS, which were intended as examples and not as actual applications for people to actually use,

10:59.000 --> 11:01.000
which then people actually used.

11:01.000 --> 11:05.000
And that's kind of annoying because we're actually not maintaining them.

11:05.000 --> 11:06.000
They're just there.

11:06.000 --> 11:08.000
And then people sort of, you know.

11:08.000 --> 11:15.000
So the thought here is, well, maybe we should actually make these official in some way for more shape and make them available.

11:15.000 --> 11:18.000
So things like check that your zone is correct.

11:18.000 --> 11:20.000
So was blah, blah, blah.

11:20.000 --> 11:24.000
Sign a zone and whatever else there is.

11:25.000 --> 11:31.000
And I think that all will keep us quite busy for the year.

11:31.000 --> 11:36.000
And we're also hoping that by the end of the year, we actually have something that is useful for people.

11:36.000 --> 11:44.000
So if you have ideas, if you want to, no, we don't have that yet.

11:44.000 --> 11:45.000
Sorry, what was the question?

11:45.000 --> 11:46.000
Oh, sorry.

11:46.000 --> 11:48.000
The question was support for zone MD.

11:48.000 --> 11:49.000
Zone MD, right.

11:49.000 --> 11:50.000
Yeah, no, we have none yet.

11:50.000 --> 11:54.000
Doing zone MD will expose all the mistakes you made in your design.

11:54.000 --> 11:55.000
Excellent.

11:55.000 --> 12:02.000
And or draw a path of destruction for your code base.

12:02.000 --> 12:04.000
Yeah, but that's what it did for us anyway.

12:04.000 --> 12:05.000
Yeah.

12:05.000 --> 12:10.000
So we should probably do this actually as part of designing the zone tree thing that we're doing right now.

12:10.000 --> 12:11.000
Yeah, that's a good idea.

12:11.000 --> 12:12.000
Yeah.

12:13.000 --> 12:14.000
Yeah.

12:14.000 --> 12:22.000
Can you maybe elaborate a bit, a tiny bit on the actual Rust experience for this?

12:22.000 --> 12:30.000
What did you learn, anything that surprised you in the DNS part or in the Rust part?

12:30.000 --> 12:36.000
Yeah, so the question was what was the experience with Rust and DNS with this all?

12:36.000 --> 12:41.000
Well, I started, this was basically my first real Rust project.

12:41.000 --> 12:49.000
So like you're like a kid, everything is as it is and everything is like how it should be because that's what it is.

12:49.000 --> 12:54.000
I think DNS wasn't all that surprising in and of itself.

12:54.000 --> 13:01.000
The situation with the RFCs and stuff being hidden where you don't expect it is super annoying.

13:01.000 --> 13:08.000
It absolutely helps if you have colleagues who have been doing DNS for 25 years, just like one desk over.

13:08.000 --> 13:12.000
But all in all, I didn't have any surprises.

13:12.000 --> 13:14.000
I couldn't think of anything.

13:14.000 --> 13:15.000
Which is great fun.

13:15.000 --> 13:17.000
I can recommend doing DNS.

13:17.000 --> 13:18.000
Yeah.

13:19.000 --> 13:20.000
Yeah.

13:20.000 --> 13:30.000
Any particular Rust libraries you're using for parsing, for making together the packet that goes over the line?

13:30.000 --> 13:35.000
So the question was whether we're using any other dependencies for parsing and whatnot?

13:35.000 --> 13:38.000
No, we did all of our stuff ourselves.

13:38.000 --> 13:41.000
Because ultimately it's relatively simple, right?

13:41.000 --> 13:45.000
It's just binary, sort of you just go over a sequence of bytes and you pick out the things.

13:45.000 --> 13:50.000
And I don't think it's worthwhile to just have some complicated thing for it.

13:50.000 --> 13:57.000
And what we did is what might be interesting for other people is we didn't want to stick to a specific representation for these octet sequences.

13:58.000 --> 14:05.000
So we did some abstractions over like vex or just slices or bytes or whatever.

14:05.000 --> 14:10.000
And made all of these types from the basic type scenario for that.

14:10.000 --> 14:15.000
Which makes the usage a bit iffy, because you now have these type arguments.

14:15.000 --> 14:17.000
But it's super flexible.

14:17.000 --> 14:23.000
In theory, you should be able to use this in an environment without an allocator.

14:23.000 --> 14:30.000
So if you just built this on top of arrays by the arrays, then you should be able to do probably only a UDP.

14:30.000 --> 14:37.000
But it should be possible to do a little DNS client for an embedded environment.

14:37.000 --> 14:45.000
Which was one of the use cases that I was looking into which I thought interesting, probably not very widely used but fun.

14:45.000 --> 14:55.000
Any other questions?

14:55.000 --> 14:57.000
Do you have a cell in the file, sir?

14:57.000 --> 14:58.000
Yes.

14:58.000 --> 15:00.000
Does it preserve comments?

15:00.000 --> 15:03.000
No.

15:03.000 --> 15:09.000
This keeps happening if you don't know.

15:09.000 --> 15:11.000
Is that something you would want?

15:11.000 --> 15:12.000
Yes.

15:12.000 --> 15:13.000
Okay.

15:13.000 --> 15:18.000
Any other questions for the audience?

15:18.000 --> 15:19.000
Oh, yes, sorry.

15:19.000 --> 15:25.000
The question was whether we had a zone file parser and whether it would preserve comments, which it does not.

15:25.000 --> 15:30.000
It currently only really just parses things into data structures too.

15:30.000 --> 15:32.000
So it's not like a manipulation thing.

15:32.000 --> 15:33.000
Yes.

15:33.000 --> 15:37.000
Talking about bind files, there's bind files.

15:37.000 --> 15:47.000
There's also the cop that you can have a name and you have a context to reference back to the previous record without having to fold things like people.

15:47.000 --> 15:48.000
That's awesome.

15:48.000 --> 15:49.000
Awesome.

15:49.000 --> 15:55.000
So the question was whether I guess whether it's compatible with whatever bind does.

15:55.000 --> 15:56.000
Yes.

15:56.000 --> 15:58.000
Which it is because that's the standard.

15:58.000 --> 16:05.000
Which is also super annoying because like the RFC is very.

16:05.000 --> 16:07.000
It's true.

16:07.000 --> 16:10.000
It really is.

16:10.000 --> 16:16.000
So what we're also looking because also colleagues were building a new zone for buzzer for NSD and that has to be compatible with whatever we have.

16:16.000 --> 16:17.000
Right.

16:17.000 --> 16:18.000
Or at least with whatever NSD was doing before.

16:18.000 --> 16:21.000
And I think they're mostly.

16:21.000 --> 16:22.000
Compatible.

16:22.000 --> 16:27.000
So what we're also looking into is maybe working on a sort of minimum definition of what is on.

16:27.000 --> 16:32.000
I should look like if it's if it's sort of portable between everything and have that as an actual grammar.

16:32.000 --> 16:33.000
That would be really cool.

16:33.000 --> 16:35.000
But it's also loads of work.

16:35.000 --> 16:41.000
So I'm not sure if this is going to happen.

16:41.000 --> 16:43.000
That we have a question.

16:43.000 --> 16:44.000
Yes.

16:44.000 --> 16:46.000
I had a question.

16:46.000 --> 16:47.000
So.

16:47.000 --> 16:49.000
Have I understood it correctly?

16:49.000 --> 16:53.000
You wrote.

16:53.000 --> 16:56.000
Building books for building entire server.

16:56.000 --> 16:57.000
Quite powerful.

16:57.000 --> 16:58.000
But.

16:58.000 --> 17:00.000
You never are.

17:00.000 --> 17:01.000
Going forward to it.

17:01.000 --> 17:03.000
Writing that server.

17:03.000 --> 17:05.000
That is.

17:05.000 --> 17:06.000
Yes.

17:06.000 --> 17:08.000
So the question was whether.

17:08.000 --> 17:13.000
We have plans to build an actual server and the answer is not currently.

17:13.000 --> 17:14.000
The.

17:14.000 --> 17:15.000
The.

17:15.000 --> 17:17.000
Our sort of the sort of the.

17:17.000 --> 17:20.000
What do you call it the distance that we're looking at is about five years.

17:20.000 --> 17:22.000
And we don't have a plan for that.

17:22.000 --> 17:24.000
But also we're very flexible.

17:24.000 --> 17:26.000
Stuff comes up.

17:26.000 --> 17:32.000
But currently we're very happy what we have with unbounded NSD.

17:32.000 --> 17:33.000
Yeah.

17:33.000 --> 17:34.000
And I'll be in a second.

17:34.000 --> 17:35.000
Of course.

17:35.000 --> 17:48.000
Thank you very much.

17:48.000 --> 17:49.000
We promise stickers.

17:49.000 --> 17:50.000
There's loads here.

17:50.000 --> 17:52.000
So if anyone needs more decorations.

