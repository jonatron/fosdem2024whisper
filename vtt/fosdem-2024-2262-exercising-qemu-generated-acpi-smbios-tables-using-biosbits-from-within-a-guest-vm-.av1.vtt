WEBVTT

00:00.000 --> 00:02.000
Thank you.

00:07.000 --> 00:09.000
Thank you.

00:13.000 --> 00:19.000
Good afternoon, everyone. Thanks for coming to my talk on using

00:19.000 --> 00:21.000
bias bits to test

00:21.000 --> 00:26.000
key moves, ACPI, and SM bias implementation.

00:26.000 --> 00:30.000
My talk is going to be structured around these four points.

00:30.000 --> 00:34.000
First, we're going to discuss what's bias bits and why we're

00:34.000 --> 00:37.000
using bias bits to test key moves.

00:37.000 --> 00:40.000
And then I'll be talking about some of the implementation

00:40.000 --> 00:43.000
choices of my test framework.

00:43.000 --> 00:46.000
And then I'll describe the test framework itself.

00:46.000 --> 00:50.000
And then I'll give a brief overview, depending on how much

00:50.000 --> 00:55.000
time I have on the changes that I made in bias bits to get

00:55.000 --> 00:58.000
everything working together.

00:58.000 --> 01:00.000
So what's bias bits?

01:00.000 --> 01:02.000
It's actually a software written by Josh Triplett.

01:02.000 --> 01:05.000
He wrote this software after he left Google.

01:05.000 --> 01:14.000
And the software had actually a real-life usefulness in the

01:14.000 --> 01:19.000
sense that the bias developers and Intel, they used it to test

01:19.000 --> 01:23.000
their bias implementations on real physical hardware boxes.

01:23.000 --> 01:28.000
And what this software comprises of is that you can exercise

01:28.000 --> 01:35.000
ACPI and SM bias objects in the bias directly from a grub

01:35.000 --> 01:37.000
environment.

01:37.000 --> 01:42.000
And even though it's a grub environment, it also has Python

01:42.000 --> 01:43.000
built into it.

01:43.000 --> 01:47.000
So you don't have to write tests using Bashish, which is grub's

01:47.000 --> 01:49.000
native scripting language.

01:49.000 --> 01:53.000
You can write all your tests using Python.

01:53.000 --> 01:57.000
And all of this is executed from ring zero.

01:57.000 --> 02:02.000
So there is no need to actually go from ring three to ring zero

02:02.000 --> 02:06.000
to execute your tests, et cetera.

02:06.000 --> 02:13.000
All of the components, that is grub, Python, ACPI, which is

02:13.000 --> 02:19.000
what bias bits uses to execute ACPI components.

02:19.000 --> 02:22.000
All of these comes together in the form for bootable ISO,

02:22.000 --> 02:27.000
which is then used to boot actual physical box or virtual

02:27.000 --> 02:30.000
machine, in our case.

02:30.000 --> 02:34.000
So this is what it looks like in a most simplest form.

02:34.000 --> 02:42.000
You just run Kimu KVM here.

02:43.000 --> 02:47.000
Using the bits ISO, and it spawns a virtual machine.

02:47.000 --> 02:51.000
It executes a bunch of tests, and then generates the logs,

02:51.000 --> 02:54.000
and it pushes the log out of the virtual machine.

02:54.000 --> 02:56.000
I'll describe that a little bit later.

02:56.000 --> 03:00.000
And then it shuts down the VM.

03:00.000 --> 03:03.000
So why use bias bits for testing?

03:03.000 --> 03:08.000
Well, first of all, like I said, all the tests you can write

03:08.000 --> 03:13.000
are based using Python in a pre-operating system environment.

03:13.000 --> 03:17.000
And so that means that we don't have to go through the OS to

03:17.000 --> 03:24.000
execute bias components, but we can directly execute ACPI from

03:24.000 --> 03:27.000
the grub environment itself.

03:27.000 --> 03:32.000
And it has already ACPI CA built in so that we can directly

03:32.000 --> 03:35.000
execute ACPI methods.

03:35.000 --> 03:43.000
And the current test framework that we have in Kimu is basically

03:43.000 --> 03:46.000
what it does is it spawns a VM.

03:46.000 --> 03:53.000
It extracts the bias, the ACPI tables from the virtual machine's

03:53.000 --> 03:57.000
memory, and then compares those tables with some golden master

03:57.000 --> 04:00.000
blobs that is already checked into Kimu repository.

04:00.000 --> 04:08.000
And then it compares the golden master blobs with the actual

04:08.000 --> 04:11.000
table which is what Kimu is using.

04:11.000 --> 04:16.000
And then if there is a difference between the two, it throws an error.

04:16.000 --> 04:20.000
So the main idea is that any time we're making changes into Kimu

04:20.000 --> 04:25.000
that affects ACPI or some bias tables, we can go through,

04:25.000 --> 04:29.000
inspect the changes, and we can make sure that the changes are

04:29.000 --> 04:31.000
not breaking anything.

04:31.000 --> 04:37.000
But what we don't have is an ability to actually execute the

04:37.000 --> 04:40.000
tables from a running VM.

04:40.000 --> 04:46.000
And using bias bits gives us the ability to execute the tables.

04:46.000 --> 04:53.000
So that's the main advantage of using bias bits.

04:53.000 --> 04:58.000
So let's discuss some of the implementation choice of the test

04:58.000 --> 04:59.000
work.

04:59.000 --> 05:02.000
So bias bits is a software in itself.

05:02.000 --> 05:04.000
So it has its own repository.

05:04.000 --> 05:06.000
And then we have the Kimu repository.

05:06.000 --> 05:11.000
And these two repositories, in the Kimu repository, we have all

05:11.000 --> 05:18.000
the changes that basically decide the ACPI implementation.

05:18.000 --> 05:22.000
And bias bits repository has all the bias bits specific stuff,

05:22.000 --> 05:27.000
like all the build scripts, all its internal logic,

05:27.000 --> 05:33.000
and the two things are kind of separate.

05:33.000 --> 05:37.000
And adding to the complication is the fact that bias bits has,

05:37.000 --> 05:42.000
so George gave up developing on bias bits around circa 2017.

05:42.000 --> 05:47.000
And any effort that I made to reach out to him failed,

05:47.000 --> 05:52.000
so he didn't respond to my queries.

05:52.000 --> 05:58.000
So we couldn't actually directly use the bias bits upstream.

05:58.000 --> 06:02.000
So what we had to do is we had to fork the upstream bias bit

06:02.000 --> 06:06.000
software and put it in GitLab under the Kimu project,

06:06.000 --> 06:08.000
and then make changes to it.

06:08.000 --> 06:11.000
And those changes involved a lot of build fixes.

06:11.000 --> 06:15.000
So bias bits turns out to be something that is not buildable

06:15.000 --> 06:18.000
under the Neo compiler and tool chain because nobody has been

06:18.000 --> 06:19.000
maintaining it.

06:19.000 --> 06:24.000
So we had to make a lot of changes to make bias bits just build.

06:24.000 --> 06:29.000
And then a lot of fixes to get all the parts of the test

06:29.000 --> 06:32.000
framework working together, which I'll describe a little bit

06:32.000 --> 06:33.000
later.

06:33.000 --> 06:39.000
And then we have the Kimu repository that has potentially

06:39.000 --> 06:43.000
the changes that affect the tables.

06:43.000 --> 06:48.000
And so the people who are actually making changes to the ACPI

06:48.000 --> 06:51.000
implementation in Kimu, they care about the Kimu repository.

06:51.000 --> 06:55.000
They don't know or understand the bias bits repository.

06:55.000 --> 06:59.000
So now we have to decide how these two repositories are going

06:59.000 --> 07:01.000
to work together.

07:01.000 --> 07:09.000
So one of the questions is, so do we make bias bits repository

07:09.000 --> 07:11.000
as a module of the Kimu repository?

07:11.000 --> 07:15.000
And there has been a lot of discussions upstream on that.

07:15.000 --> 07:18.000
And it turns out that people really hate some modules because

07:18.000 --> 07:20.000
of a multitude of reasons.

07:20.000 --> 07:27.000
And you can actually look into this thread upstream.

07:27.000 --> 07:31.000
And it has a lot of interesting discussion as to why we don't

07:31.000 --> 07:33.000
want to have another submodule.

07:33.000 --> 07:37.000
So how do we keep the two repositories in sync with each

07:37.000 --> 07:39.000
other is an interesting question.

07:39.000 --> 07:44.000
And then from developer's point of view, whoever is making

07:44.000 --> 07:49.000
changes to, say, ACPI implementation in Kimu, do we make

07:49.000 --> 07:51.000
them go back and forth between the two repositories?

07:51.000 --> 07:54.000
Say, for example, they make a change in Kimu that affects

07:54.000 --> 07:57.000
the tables, and they want to write a test for it.

07:57.000 --> 08:01.000
So do they go to the bias bits repository, make the change,

08:01.000 --> 08:05.000
build bias bits into an ISO, come back to the Kimu repository,

08:05.000 --> 08:08.000
point the test to the new ISO, run the test.

08:08.000 --> 08:10.000
Oh, something doesn't work and fail.

08:10.000 --> 08:13.000
OK, let's go back to the bias bits repository, make changes,

08:13.000 --> 08:17.000
come back to the Kimu repository, and go back and forth.

08:17.000 --> 08:19.000
That's kind of complicated.

08:19.000 --> 08:24.000
And developers don't like to do that because they don't really

08:24.000 --> 08:25.000
care about bias bits.

08:25.000 --> 08:27.000
They just want to test.

08:27.000 --> 08:30.000
They want to add a test to exercise their changes.

08:30.000 --> 08:31.000
Right?

08:31.000 --> 08:39.000
So another also going to question is what kind of test

08:39.000 --> 08:42.000
framework do we use to write the bias bits

08:42.000 --> 08:43.000
tests?

08:43.000 --> 08:46.000
Do we use Q-test framework?

08:46.000 --> 08:50.000
Or do we use something else like the integration

08:50.000 --> 08:52.000
Avogadro test framework?

08:52.000 --> 08:57.000
Now, the existing test that I just described before that

08:57.000 --> 09:00.000
compares the blobs, it's called Biostable Test, and it's

09:00.000 --> 09:02.000
actually a Q-test framework.

09:02.000 --> 09:06.000
And people are familiar with that framework, right?

09:06.000 --> 09:10.000
Because any time people make changes to SAP implementation,

09:10.000 --> 09:15.000
that's the test that fails because it compares tables blobs

09:15.000 --> 09:18.000
and it right away fails saying that you have these new

09:18.000 --> 09:19.000
changes in the tables.

09:19.000 --> 09:21.000
You better have a look at it.

09:21.000 --> 09:25.000
So people actually understand how Biostables Test work.

09:25.000 --> 09:31.000
But do we use the Q-test framework then?

09:31.000 --> 09:34.000
The problem with that is that Q-test framework is really

09:34.000 --> 09:38.000
not written for something like spawning a VM,

09:38.000 --> 09:43.000
the managing all the issues of VM management,

09:43.000 --> 09:47.000
collecting the logs, dealing with errors,

09:47.000 --> 09:50.000
and then shutting down the VM, et cetera.

09:50.000 --> 09:55.000
So I started writing a Q-test for bias bits,

09:55.000 --> 09:58.000
and then I realized that it's not really suitable.

09:58.000 --> 10:02.000
So I started then looking into writing a new Python-based

10:02.000 --> 10:06.000
test framework for just doing the VM management and then

10:06.000 --> 10:08.000
using bias bits with it.

10:08.000 --> 10:11.000
And then finally, when I proposed that upstream,

10:11.000 --> 10:14.000
then somebody pointed me to the Avogadro framework,

10:14.000 --> 10:16.000
and I looked at it, and it was right away,

10:16.000 --> 10:21.000
Avogadro framework already had all the libraries that deal

10:21.000 --> 10:23.000
with VM management.

10:23.000 --> 10:27.000
And all I had to do was just focus on the bias bits part

10:27.000 --> 10:28.000
and develop that part.

10:28.000 --> 10:32.000
So Avogadro Test framework kind of really nicely fit into

10:32.000 --> 10:37.000
what we really wanted to do and what was available already

10:37.000 --> 10:41.000
without doing any new development.

10:41.000 --> 10:45.000
So finally, we went with the Avogadro Test framework.

10:45.000 --> 10:48.000
But then the question is, how do we make people familiar

10:48.000 --> 10:50.000
with how to run Avogadro tests?

10:50.000 --> 10:53.000
Because not all people are familiar with this test framework.

10:53.000 --> 10:56.000
Not all people run integration tests.

10:56.000 --> 11:01.000
So then we decided that, OK, how about we write

11:01.000 --> 11:05.000
a documentation for bias bits test?

11:05.000 --> 11:06.000
And that's what we did.

11:06.000 --> 11:09.000
So Kimu repository has documentation

11:09.000 --> 11:13.000
to how to run a few simple commands to execute the test

11:13.000 --> 11:15.000
framework.

11:15.000 --> 11:20.000
So I just described all this stuff.

11:20.000 --> 11:24.000
So let's describe what the test framework is all about.

11:24.000 --> 11:28.000
Now, before I'll just keep a couple of slides,

11:28.000 --> 11:32.000
and I'll show you the diagram here.

11:32.000 --> 11:35.000
So like I said, there are two repositories.

11:35.000 --> 11:39.000
There is one Kimu repository, and there is one bias bits

11:39.000 --> 11:40.000
repository.

11:40.000 --> 11:42.000
So in bias bits repository, we want

11:42.000 --> 11:45.000
to maintain everything that's related to bias bits

11:45.000 --> 11:51.000
and nothing related to Kimu or a testing ACPI.

11:51.000 --> 11:55.000
So the way we did it is that in the fork, which

11:55.000 --> 12:03.000
is residing right here, we have all these branches in there.

12:03.000 --> 12:06.000
Now, the Kimu bits branch is the one where

12:06.000 --> 12:10.000
we have made all the changes specific to using bias bits

12:10.000 --> 12:11.000
for Kimu.

12:11.000 --> 12:19.000
And so there we have a GitLy CI job, which is basically

12:19.000 --> 12:24.000
a BAS script that builds bias bits.

12:24.000 --> 12:29.000
And as a part of this CI job, so every time you commit any

12:29.000 --> 12:34.000
change to bias bits repository, this CI job gets triggered,

12:34.000 --> 12:37.000
and it will generate a bunch of build artifacts, which are

12:37.000 --> 12:40.000
nothing but like pre-built binaries for things like

12:40.000 --> 12:43.000
rub, Python, ACPI, CAC, et cetera.

12:43.000 --> 12:49.000
And then all these build artifacts are pushed in a

12:49.000 --> 12:51.000
well-defined location.

12:51.000 --> 12:53.000
And there is a URL for it, and you can just go and

12:53.000 --> 12:55.000
download those artifacts.

12:55.000 --> 13:02.000
And so in the Kimu repository, what we do is we, in the

13:02.000 --> 13:06.000
Kimu repository, we maintain the actual tests that

13:06.000 --> 13:09.000
exercises ACPI and some bias tables.

13:09.000 --> 13:16.000
So the actual tests are here in this location that are run

13:16.000 --> 13:18.000
from within the bias bits environment.

13:18.000 --> 13:23.000
And then there is a main driver to put all these things

13:23.000 --> 13:24.000
together.

13:24.000 --> 13:28.000
And this is the one, this is the main Avogadro test, ACPI

13:28.000 --> 13:29.000
bits.py.

13:29.000 --> 13:34.000
So when you are running the bias bits ACPI,

13:34.000 --> 13:37.000
S&B bias test, you need to run this guy.

13:37.000 --> 13:42.000
And what this guy does is that it pulls in these

13:42.000 --> 13:46.000
changes, these test scripts, where you have potentially

13:46.000 --> 13:50.000
added new changes for your stuff that has gone into

13:50.000 --> 13:52.000
Kimu for ACPI.

13:52.000 --> 13:55.000
And then it pulls in these build artifacts.

13:55.000 --> 13:59.000
And together it generates an ISO here.

13:59.000 --> 14:03.000
And then with this ISO, it spawns a Kimu VM and it

14:03.000 --> 14:05.000
runs the tests.

14:05.000 --> 14:08.000
Once the test is running, it collects the logs.

14:08.000 --> 14:12.000
The logs are pushed out into outside the virtual machine

14:12.000 --> 14:14.000
into a well-defined location.

14:14.000 --> 14:17.000
This test script then analyzes the logs.

14:17.000 --> 14:20.000
And then it says whether it failed or passed, depending on

14:20.000 --> 14:25.000
how many tests it ran, whether it looks for certain

14:25.000 --> 14:29.000
patterns and says, OK, this test failed or what have you.

14:29.000 --> 14:39.000
So basically, this mechanism does two things.

14:39.000 --> 14:42.000
First of all, you don't need to go back and forth between

14:42.000 --> 14:44.000
the two repositories.

14:44.000 --> 14:47.000
Everything that is bias-bit-specific resides here.

14:47.000 --> 14:50.000
And if you're not concerned with bias-bits or if you don't

14:50.000 --> 14:53.000
care about how it is built or what changes are in there,

14:53.000 --> 14:55.000
you don't need to touch this repository.

14:55.000 --> 14:58.000
All you need to do is just remain here.

14:58.000 --> 15:02.000
So every time you make changes to ACPI implementation,

15:02.000 --> 15:05.000
you add corresponding test code in here.

15:05.000 --> 15:06.000
And then you run this guy.

15:06.000 --> 15:09.000
This guy will pull in your changes, use the existing

15:09.000 --> 15:11.000
artifacts, and you run your test.

15:11.000 --> 15:15.000
Now, after it runs your test, this has some verbose mode

15:15.000 --> 15:19.000
where it puts out more information in case there is

15:19.000 --> 15:20.000
a failure.

15:20.000 --> 15:23.000
So you can analyze the failure, make changes to these test

15:23.000 --> 15:25.000
scripts, and again, rerun this guy.

15:25.000 --> 15:31.000
So the advantage is that you are actually not,

15:31.000 --> 15:34.000
you're already within the chemo repository in your workspace.

15:34.000 --> 15:36.000
You're not going back and forth between the two.

15:36.000 --> 15:40.000
And then, because a pre-built artifacts are being used,

15:40.000 --> 15:46.000
generation of this ISO is a lot easier because these things

15:46.000 --> 15:47.000
need not be built.

15:47.000 --> 15:50.000
They're already built for you by the CI job.

15:50.000 --> 15:53.000
All you need to do is put these test scripts together with

15:53.000 --> 15:55.000
this guy and generate the ISO.

15:55.000 --> 16:04.000
So this is what I just described all these points here.

16:05.000 --> 16:12.000
And then, so let's look at the advantages which I briefly

16:12.000 --> 16:14.000
described.

16:14.000 --> 16:19.000
So, so no need to use some modules.

16:19.000 --> 16:22.000
There are pre-built artifacts that makes it a lot easier.

16:22.000 --> 16:26.000
And then if you need to make changes to the bias table,

16:26.000 --> 16:30.000
as to bias bits, you make the changes, build new artifacts,

16:30.000 --> 16:33.000
and you point the main test to the new artifacts.

16:33.000 --> 16:38.000
And the other advantage is that when you release chemo in

16:38.000 --> 16:41.000
turbos, that turbos does not have any bias bit specific

16:41.000 --> 16:42.000
binaries.

16:42.000 --> 16:45.000
They're completely mentored outside of the chemo repository.

16:45.000 --> 16:48.000
So they're completely separate, and you don't need to release

16:48.000 --> 16:51.000
chemo with any bias bits artifacts.

16:51.000 --> 16:57.000
The disadvantage is that because we're using pre-built binaries,

16:58.000 --> 17:00.000
therefore we are very architecture specific.

17:00.000 --> 17:04.000
So right now we only support 64-bit X86, and it does not

17:04.000 --> 17:06.000
support any other platforms.

17:06.000 --> 17:10.000
And supporting other platforms is kind of non-trivial,

17:10.000 --> 17:13.000
because you need to make sure bias bits can actually build

17:13.000 --> 17:15.000
for those platforms, right?

17:15.000 --> 17:19.000
And that is, and bias bits was never tested on platforms

17:19.000 --> 17:20.000
other than X86.

17:20.000 --> 17:23.000
So it's a non-trivial work anyway, right?

17:23.000 --> 17:27.000
And then there is tool dependencies to build the ISO,

17:27.000 --> 17:31.000
and the environment where you're running the test should have

17:31.000 --> 17:33.000
those tools available.

17:37.000 --> 17:42.000
So let's look at the overview of the changes that are in the

17:42.000 --> 17:44.000
bias bits fork.

17:44.000 --> 17:49.000
So like I said, bias bits was ever maintained after 2017,

17:49.000 --> 17:53.000
so I had to make numerous changes to make bias bits build

17:53.000 --> 17:57.000
with the latest toolchain and compiler, and changes were

17:57.000 --> 18:00.000
across all these guys.

18:00.000 --> 18:03.000
And I had to also upgrade a CPI-CA, because a CPI-CA is the

18:03.000 --> 18:07.000
main driver that knows about various tables.

18:07.000 --> 18:11.000
And if you don't upgrade a CPI-CA, you cannot write tests

18:11.000 --> 18:13.000
that uses the newer tables.

18:13.000 --> 18:16.000
So I had to upgrade a CPI-CA.

18:16.000 --> 18:21.000
I had to find a mechanism to push the logs out so that the

18:21.000 --> 18:23.000
test framework can analyze the logs.

18:23.000 --> 18:27.000
I had to make sure that the console logs are available.

18:27.000 --> 18:31.000
And one other thing is that the Python that runs from within

18:31.000 --> 18:37.000
the bias bits VM is still Python 27 and not 3,

18:37.000 --> 18:43.000
because upgrading Python is a non-trivial work.

18:43.000 --> 18:47.000
And since it is a very closed environment, very controlled

18:47.000 --> 18:51.000
environment, I didn't see the value of upgrading Python in that

18:51.000 --> 18:52.000
environment.

18:52.000 --> 18:55.000
So it is still running Python 2, whereas everything else in

18:55.000 --> 18:59.000
Kimu is Python 3.

18:59.000 --> 19:02.000
These are some of the useful resources, and you can have a

19:02.000 --> 19:05.000
look at those resources.

19:05.000 --> 19:10.000
This includes things like the Josh's presentation slides and

19:10.000 --> 19:14.000
his talk on bias bits itself, which is a lot more details than

19:14.000 --> 19:18.000
what I described about bias bits in this talk, and then the

19:18.000 --> 19:22.000
details about the test framework itself, the fork that we

19:22.000 --> 19:24.000
maintain here, et cetera.

19:24.000 --> 19:31.000
So the last but not the least is, before I talk about demo,

19:31.000 --> 19:34.000
is that I would really like to thank these guys.

19:34.000 --> 19:39.000
Igor is originally proposed the idea of using bias bits for

19:39.000 --> 19:43.000
exercising Kimu with the CPI tables, and so I'm grateful for

19:43.000 --> 19:44.000
that.

19:44.000 --> 19:49.000
And then all these other guys, they gave various useful

19:49.000 --> 19:52.000
feedback throughout the process while I was submitting patches

19:52.000 --> 19:56.000
upstream, and I'm grateful to all the reviewers of my

19:56.000 --> 20:00.000
batch sets and the entire upstream Kimu community for help.

20:00.000 --> 20:06.000
Lastly, if you really want to see a demo, there is no time for

20:06.000 --> 20:09.000
this in this presentation, but you can click on this link, and

20:09.000 --> 20:13.000
there is a video that describes a lot more details on actually

20:13.000 --> 20:17.000
how to run the test and all the scripts within the repository.

20:17.000 --> 20:25.000
So thank you so much, and now I can take questions if you have.

20:25.000 --> 20:35.000
Yes.

20:35.000 --> 20:37.000
I have a question.

20:37.000 --> 20:38.000
Yes.

20:38.000 --> 20:40.000
What do you mean by Python?

20:40.000 --> 20:42.000
I mean, what is that Python?

20:42.000 --> 20:46.000
It's just a copy based on the built in Python?

20:46.000 --> 20:48.000
No, no, it's Python.

20:48.000 --> 20:50.000
The interpreter is built from source.

20:50.000 --> 20:56.000
Wooden Biospits, it's actually, the Python is built from source.

20:56.000 --> 21:00.000
So Python 2.7 is the one that Biospits uses, and it builds

21:00.000 --> 21:04.000
everything because it has to build extensions so that it can

21:04.000 --> 21:05.000
integrate with Grub.

21:05.000 --> 21:09.000
So from Grub, you can actually run, you can say Pi, and then

21:09.000 --> 21:11.000
you can run a Python script.

21:11.000 --> 21:18.000
So all that happened because it was built from source with

21:18.000 --> 21:21.000
integration with Grub.

21:21.000 --> 21:26.000
The only problem is that it's a Python 2.7, and I didn't see the

21:26.000 --> 21:30.000
value upgrading it to 3, but you can actually run the whole

21:30.000 --> 21:34.000
Python script, and that's how all the tests work, because they're

21:34.000 --> 21:37.000
all running from Grub, but they're full-fledged Python 2.7

21:37.000 --> 21:38.000
scripts.

21:38.000 --> 21:41.000
So it's a full-fledged one, not only certain API that you can use?

21:41.000 --> 21:47.000
No, no, it's a full Python.

21:47.000 --> 21:58.000
Any other questions?

21:58.000 --> 21:59.000
Thanks.

21:59.000 --> 22:01.000
Thank you.

