WEBVTT

00:00.000 --> 00:11.220
They immediately think of dual stack and it's sort of like people put equation between

00:11.220 --> 00:15.980
IPv6 and dual stack and think that dual stack is the best.

00:15.980 --> 00:21.660
It sort of is except for one tiny detail and that is the one in the bottom that basically

00:21.660 --> 00:27.400
by using dual stack you are not addressing the problem by IPv6 was deployed in the first

00:27.400 --> 00:30.640
place and this addressing of scarcity of IPv4.

00:30.640 --> 00:36.880
Therefore there are some other transition mechanisms I think there are some other transition mechanisms

00:36.880 --> 00:44.120
that can help you with this thing and one that stands out is called NAT64 and yeah we

00:44.120 --> 00:49.160
are at this event where the network uses NAT64 for the default network since 2015

00:49.160 --> 00:52.400
if I remember correctly.

00:52.400 --> 00:53.400
How does it work?

00:53.400 --> 01:01.040
Well for IPv6 it's easy the path is clear for IPv4 the path is goes via translation

01:01.040 --> 01:07.600
box that is called NAT64 box into IPv4 internet.

01:07.600 --> 01:14.320
This works very well you can see it that yeah you can use it basically mostly for most networks

01:14.320 --> 01:21.520
but sometimes you can hit some very corner cases for which for some people could be very

01:21.520 --> 01:27.080
noticeable but for some people can be like critical usually it starts giving you hard

01:27.080 --> 01:31.920
time when you start playing with virtual machine or containers on your computer then usually

01:31.920 --> 01:38.840
those kinds of software are usually relying on IPv4 connectivity that native IPv4 connectivity

01:38.840 --> 01:41.320
that is not available.

01:41.320 --> 01:47.240
So there is another standard called 464XLAT which tries to closing the gap by editing

01:47.240 --> 01:52.240
a piece of software on the computer the piece of software is called CLAT and in that sort

01:52.240 --> 02:00.040
of like reverse translation to what NAT64 does which is called PLAT in this case and

02:00.040 --> 02:09.680
and then so by this trick of double translation first IPv4 into IPv6 here and then transferring

02:09.680 --> 02:17.200
via IPv6 to another translator translates IPv6 back to IPv4 we can have applications

02:17.200 --> 02:21.760
super happy because they see sort of like dual stack they see they see both IPv4 and

02:21.760 --> 02:24.120
IPv6 and everything works well.

02:24.120 --> 02:29.520
This is a technology that is very well used in many devices but not in Linux so I put

02:29.520 --> 02:37.120
there a slide with some like typical cases of what you plug into networks and how do

02:37.120 --> 02:41.880
they work on V6 only network like the one the main network here the one that is called

02:41.880 --> 02:43.080
FOSDEM.

02:43.080 --> 02:49.560
If you connect your Android phone your iOS device or your Mac OS computer it should work

02:49.560 --> 02:56.480
fully these three categories have CLAT there and also there are mobile networks in the

02:56.480 --> 03:02.800
world who are running V6 only for their mobile phones like for millions I said billions on

03:02.800 --> 03:06.560
the slide maybe it's just millions but it doesn't really matter lots of devices.

03:06.560 --> 03:12.840
These devices into one network and yet not waste IPv4 address for every single device

03:12.840 --> 03:18.200
that is in the left most category which objectively doesn't need it.

03:18.200 --> 03:24.960
That's the question here and the answer for this is quite recent RFC which introduced

03:24.960 --> 03:32.280
a new feature to DHCP the old DHCP protocol is used for IPv4 and this this option is called

03:32.280 --> 03:34.240
IPv6 only preferred.

03:34.240 --> 03:39.440
And it works like this if you have a standard every time a device attached to a network

03:39.440 --> 03:44.000
it starts this DHCP handshake it has these four messages discover offer request and

03:44.000 --> 03:50.480
aqua knowledge and the device if the device is capable of running IPv6 only it will just

03:50.480 --> 03:57.640
signal this in the request parameter list it's the option 108 and if the DHCP server

03:57.640 --> 04:03.680
is ignoring it and does not send the option 108 back in the offer that means the network

04:03.680 --> 04:10.120
is not capable of running IPv6 only therefore it will use normal DHCP and it will use normal

04:10.120 --> 04:18.600
IPv4 this is the case of the most networks but what if the server actually offers something

04:18.600 --> 04:25.000
in the DHCP offer in that case the device says oh that means I'm in an I'm in a network

04:25.000 --> 04:31.480
which does not need IPv4 for operation and therefore I will just stop the handshake here

04:31.480 --> 04:36.640
because the handshake is stopped midway it means the address is not committed the address

04:36.640 --> 04:41.240
is will be released after some time out and not used and therefore the address will be

04:41.240 --> 04:49.720
saved in the in the in the in the DHCP pool that's exactly how you define network that

04:49.720 --> 04:56.120
has a name the most stable name is IPv6 mostly IPv6 mostly doesn't mean that it's most it

04:56.120 --> 05:02.320
means that the network is designed to run IPv6 only but still have some IPv4 for legacy

05:02.320 --> 05:09.960
devices like windows or Linux or smart home such network has to provide perfectly working

05:09.960 --> 05:16.800
IPv6 and the IPv6 have to have not six for support ideal there should be signal 96 for

05:16.800 --> 05:20.880
support with this prep six for option which is an option in router advertisement so when

05:20.880 --> 05:24.760
you attach to network you receive route to advertisement you immediately know that there

05:24.800 --> 05:31.040
is not six for and how you configure it and also must provide not native IPv4 for the legacy

05:31.040 --> 05:38.040
devices so everything works yeah this was like sorry I'm a little rushing into it but yeah I

05:38.040 --> 05:45.360
want to focus on the main point of this talk which is Linux on IPv6 only basically how to

05:45.360 --> 05:51.240
move Linux from the second category works mostly into the first category works perfectly where

05:51.240 --> 06:01.640
are what are the gaps that needs to be closed to to have Linux not depend on native IPv4 there

06:01.640 --> 06:08.720
are basically two options how to tackle this problem and we somehow has to be and it turns out

06:08.720 --> 06:15.000
system yet for the has sort of like unsensible default that it's actually on by default so system

06:15.000 --> 06:20.400
yet for the in the latest version is refusing before even though it doesn't set up sealant so

06:20.440 --> 06:27.320
it makes your computer sort of broken but it has been reported and hopefully it will be fixed one

06:27.320 --> 06:34.560
way or another now how you learn sealant on your computer bad news is there is no native way of

06:34.560 --> 06:42.240
translating v4 into v6 inside Linux kernel so unlike BSD for instance it's not possible the good

06:42.240 --> 06:47.520
thing is there are at least four software solutions that are like third party but can be run easily

06:48.000 --> 06:53.080
first two of them are user space they use the tune tab device and they are working user space

06:53.080 --> 06:58.640
the next two net four six and jewel are actually kernel space so you can just compile the kernel

06:58.640 --> 07:04.480
module install it and it works there's also Perl script cause sealant D which takes care of setting

07:04.480 --> 07:12.360
up sealant it works sort of okay but it has some limitations that are making it not universally

07:12.440 --> 07:17.640
accessible and not something that will be in every single every single distribution the biggest

07:17.640 --> 07:23.880
issue here is that it works like this that the sealant is sort of like on a stick it's a separate

07:23.880 --> 07:29.840
network interface that means that to make it work you sort of have to set up router in your

07:29.840 --> 07:36.680
computer and also set up firewall to allow traffic between two interfaces on your computer and not

07:36.680 --> 07:42.120
only this you have to also undo it once you want to turn off sealant and just imagine the

07:42.120 --> 07:48.280
varieted the diversity of illinux distributions this is virtually impossible to do correct way so I

07:48.280 --> 07:56.680
don't think this this is going to fly what is supposed to fly ideal sealant should look like

07:56.680 --> 08:02.040
this it should support multiple instances so you can have more interfaces more interfaces can be

08:02.040 --> 08:08.200
connected to different IPv6 only networks so maybe you can have more instances of sealant it should

08:08.200 --> 08:14.200
set up automatically as soon as you detect net64 and it should that is key point also react

08:14.200 --> 08:20.440
dynamically to change IPv6 has changing protocol it supports dynamic renumbering of networks and

08:20.440 --> 08:25.000
all those things that can happen dynamically so it's not like you run it once and then it's then

08:25.000 --> 08:32.280
it stays it has to react on all the dynamic changes on the network and it shouldn't need to touch

08:32.280 --> 08:38.600
firewall or forwarding there's actually draft in ITF that is being worked on right now setting up

08:38.600 --> 08:47.640
the requirement for sealant so I was discussing with many people how such a sealant could work and

08:47.640 --> 08:53.640
I found out this solution that I'm quite happy with it and that's why I'm presenting in here it

08:53.640 --> 09:00.840
basically use IPv1 and network namespaces so the thing is you run the translator inside the

09:00.840 --> 09:08.040
network namespace to you and I hope some of you can maybe pick up on it is that I'm missing the

09:08.040 --> 09:13.000
piece of software that will orchestrate it that will listen to netlink events see that there is a new

09:13.000 --> 09:20.280
router it has net64 set up an IPv6 address for it finds a free address for the translation

09:20.280 --> 09:26.280
space from IPv4 we have another IPv4 scale set it are only eight address assigned for sealants

09:26.280 --> 09:32.840
so you can realistically run about four sealants if you are very creative you can maybe run a little

09:32.840 --> 09:37.560
bit more but to be honest four instances of sealant should be okay but the problem is you have to

09:37.560 --> 09:43.400
always dynamically figure out which addressing the sealant should use and react to subsequent

09:43.400 --> 09:50.200
configurations and of course my goal is to have this in common Linux distribution which means

09:50.600 --> 09:56.280
hopefully network manager will pick this up hopefully system dn4d and this will this will make

09:57.080 --> 10:05.480
the life of on IPv6 own network on linux much nicer that's everything for me if there's any question

10:05.480 --> 10:24.200
hello excellent presentation and work one question have you figured out how macOS x does it

10:25.080 --> 10:32.280
yes macOS does it by the sealant is actually integrated in the network interface so from

10:33.000 --> 10:39.080
from application point of view you see network card and has this v address 192002 just have a look

10:39.080 --> 10:44.840
if you have mac we will see it on your on this network and if you use vileshark and look what is

10:44.840 --> 10:50.040
getting out of the network card it's just ipv6 so basically so basically the translation happens

10:50.040 --> 10:55.320
between what application sends to it and what gets out of the on the wire so is it the kernel

10:55.320 --> 10:59.640
implementation or is it it's in the kernel and it's and it's and it's you know because it's part

10:59.640 --> 11:04.520
of the network interface it can be even duplicated if you have multiple interfaces active both each

11:04.520 --> 11:06.360
one has its own instance of sealant

11:18.360 --> 11:23.880
hi actually two questions first do you know how android is doing it because it's a bit closer to

11:24.760 --> 11:29.880
common links the solutions and also is there an argument against doing it in the kernel or is it

11:29.880 --> 11:36.760
just a case of nobody having done it yet sorry i missed the first first question how how is android

11:36.760 --> 11:41.560
doing it and is there an argument against doing it in the kernel or is it just that nobody did it

11:41.560 --> 11:49.880
oh yeah how is how is the android doing it android is doing it um similar way uh they have several

11:49.880 --> 11:57.000
generations and the last uh the last uh part of the android code is heavily using

11:58.040 --> 12:04.920
these three letter aquarium of network code that i don't remember uh e b thank you

