WEBVTT

00:00.000 --> 00:05.000
Thank you, mission.

00:05.000 --> 00:08.000
Hello, everyone.

00:08.000 --> 00:14.000
My name is Michal Pleban, and I would like to show you how to do cool things with a Commodore computer.

00:14.000 --> 00:19.000
So, back when dinosaurs roamed the earth, Commodore introduced the Pets.

00:19.000 --> 00:22.000
It was one of the first home computers on the market,

00:22.000 --> 00:30.000
and it started a succession of a lot of different business computers that were especially popular in Europe.

00:30.000 --> 00:36.000
But time went by, and competition were introducing more and more powerful machines.

00:36.000 --> 00:44.000
So, Commodore decided to upgrade the Pets, and in 1982 they introduced the CBM-2.

00:44.000 --> 00:51.000
And when you look at the hardware specification, you see that it's basically an upgraded Pets,

00:51.000 --> 00:57.000
a faster processor here, more memory there, but it's basically the same architecture.

00:57.000 --> 01:02.000
But there is one little detail that stands out, it makes this machine really unique.

01:02.000 --> 01:05.000
It's the second processor interface.

01:05.000 --> 01:11.000
It allows you to attach a different CPU to the system and run applications on it.

01:11.000 --> 01:16.000
So, if you want to do serious business, you can attach a Z80 and run CPM.

01:16.000 --> 01:21.000
Or maybe you want to do scientific stuff, so you can attach a Z6809 and run Pascal.

01:21.000 --> 01:25.000
It's all made possible because the architecture is very flexible.

01:25.000 --> 01:33.000
So, the way it works is both CPUs are connected by a message bus, so they can communicate with each other,

01:33.000 --> 01:38.000
and they share access to the main memory using an arbitrator.

01:38.000 --> 01:47.000
So, normally one CPU is running an application, and the other one is either waiting or doing some housekeeping tasks,

01:47.000 --> 01:54.000
maybe checking the keyboard, maybe updating the timer, but basically the CPUs run together at the same time.

01:54.000 --> 02:01.000
And the message passing bus allows you to use an inter-processal communication.

02:01.000 --> 02:06.000
So, if you have an application running on the second CPU, and you need to do some IEO,

02:06.000 --> 02:11.000
maybe load a sector from the disk, then the second CPU interrupts the first one.

02:11.000 --> 02:17.000
The first one grabs the memory access from it, loads whatever it needs to be loaded from the disk,

02:17.000 --> 02:22.000
puts it in the memory, and gives the access back.

02:22.000 --> 02:26.000
And the beauty of it is that it can work both ways.

02:26.000 --> 02:32.000
So, normally you would have an operating system running on the second CPU,

02:32.000 --> 02:37.000
and call the first one for IEO, that's the standard way we could say,

02:37.000 --> 02:42.000
but you can also do it the other way around, and use an application on the main CPU,

02:42.000 --> 02:45.000
and use the second one as an accelerator.

02:45.000 --> 02:48.000
That's also possible because the bus is very flexible.

02:48.000 --> 02:56.000
So, if you compare it, for example, to the A-Cord and Tube, which is also a popular and well-known second processor interface,

02:56.000 --> 03:01.000
that one works only one way. This is much more flexible.

03:01.000 --> 03:08.000
So, given this powerful architecture, what did Commodore actually do with it?

03:08.000 --> 03:15.000
Of course, there was a Z80 card plant, we have the schematic for it, but it was never produced,

03:15.000 --> 03:19.000
but what Commodore did produce in the end was this.

03:19.000 --> 03:29.000
It's an Intel 8088 processor card that's supposed to run CPM, and of course MS-DOS as well.

03:29.000 --> 03:35.000
So, yes, you can run MS-DOS on this computer, and it looks like this.

03:35.000 --> 03:42.000
I run a check disk, because that's about the only thing I could run on the machine.

03:42.000 --> 03:48.000
Because there's a tiny little problem with MS-DOS.

03:48.000 --> 03:53.000
Today, when we think about MS-DOS, we think about the PC,

03:53.000 --> 03:58.000
because that was the original operating system that launched with the PC,

03:58.000 --> 04:05.000
and the PC became so popular that it overwhelmed all the other personal computers except the Mac.

04:05.000 --> 04:08.000
So, we say MS-DOS, we think the PC.

04:08.000 --> 04:14.000
But in the early 80s, Microsoft had a different plan for MS-DOS.

04:14.000 --> 04:22.000
It wanted it to be a G operating system for all 16-bit machines, just like CPM was for 8-bit machines.

04:22.000 --> 04:27.000
So, we had more than a dozen different computers on the market,

04:27.000 --> 04:31.000
and each was running its own version of MS-DOS.

04:31.000 --> 04:37.000
And the theory was that once an application was written using MS-DOS APIs,

04:37.000 --> 04:41.000
it should be able to run on all of those computers.

04:41.000 --> 04:46.000
But the thing is, the MS-DOS API is very limited.

04:46.000 --> 04:50.000
So, for example, if you have a spreadsheet application,

04:50.000 --> 04:55.000
you need to be able to place a cursor on the screen and update a specific cell.

04:55.000 --> 05:00.000
Well, guess what? There's no API in MS-DOS to position a cursor on the screen.

05:00.000 --> 05:04.000
So, what you had to do, you had to go through the machine's BIOS.

05:04.000 --> 05:07.000
And of course, each computer had a different BIOS interface.

05:07.000 --> 05:13.000
And not to mention Bitmap graphics and any other advanced features.

05:13.000 --> 05:17.000
All of them had to be accessed in a machine-specific way.

05:17.000 --> 05:24.000
So, what really happened is the applications were written first and foremost for the PC,

05:24.000 --> 05:30.000
maybe for a few other architectures, but if your computer was not PC-compatible,

05:30.000 --> 05:33.000
then you had very little software to run on it.

05:33.000 --> 05:39.000
And the Commodore is about as incompatible as possible with the PC,

05:39.000 --> 05:42.000
so there's nothing that you can run on it.

05:42.000 --> 05:46.000
So, the big question is, can we do something about it?

05:46.000 --> 05:54.000
Can we somehow make this great machine PC-compatible and run real applications on it?

05:54.000 --> 05:59.000
And the answer is, of course, we can.

05:59.000 --> 06:02.000
And the way to do it is we need three things.

06:02.000 --> 06:08.000
First of all, we need something that has the same interface as the PC BIOS,

06:08.000 --> 06:15.000
so that applications can use actual PC BIOS interrupt calls to interactive the hardware.

06:15.000 --> 06:20.000
We need video memory, because there's one thing that all PC applications do

06:20.000 --> 06:24.000
is they write directly to the video memory instead of using the BIOS,

06:24.000 --> 06:26.000
because that's so much faster.

06:26.000 --> 06:30.000
And first, third, we need virtual hardware,

06:30.000 --> 06:35.000
because the PC has a lot of I-O chips that the Commodore does not.

06:35.000 --> 06:39.000
So, if you want to generate sound with PC speaker, for example,

06:39.000 --> 06:44.000
there's no BIOS interface for it, you need to interface with the I-O chip.

06:44.000 --> 06:51.000
So, we need to do something and make up for the fact that the Commodore is lacking all those chips.

06:51.000 --> 06:57.000
So, this is what is needed to create a PC-compatible BIOS.

06:57.000 --> 07:04.000
These are all the interrupts that need to be implemented to have MS-DOS boot on the machine.

07:04.000 --> 07:09.000
If you are familiar with low-level DOS programming, you will recognize what they are.

07:09.000 --> 07:15.000
They give access to the screen, to the keyboard, to the disk, some basic stuff.

07:15.000 --> 07:24.000
So, the good news is that we can reuse a lot of code from existing MS-DOS 1.25,

07:24.000 --> 07:28.000
because, for example, if you want to put a character on the screen,

07:28.000 --> 07:31.000
there's already a function in Commodore Kernel that does it,

07:31.000 --> 07:35.000
and there's already an inter-processor call in the old MS-DOS that uses it,

07:35.000 --> 07:39.000
so we just need to slap a different interface on it.

07:39.000 --> 07:43.000
The bad news is that it is a lot of functions.

07:43.000 --> 07:50.000
And you need to get all of them right before anything starts to work.

07:50.000 --> 07:54.000
So, if you have a few years of free time, this is a good way to spend it.

07:54.000 --> 08:01.000
The video memory is actually the easiest one of those three.

08:01.000 --> 08:08.000
So, of course, the PC stores the video data at a different location than the Commodore,

08:08.000 --> 08:14.000
so what we need to do is to use a timer interrupt to copy the data from one location to the other.

08:14.000 --> 08:19.000
Of course, doing ASCII and Petski conversion, but it's very simple.

08:19.000 --> 08:26.000
So, this way, anything that the application writes to the memory where a video memory would be on the PC

08:26.000 --> 08:30.000
will actually appear on the Commodore screen.

08:31.000 --> 08:40.000
And the third thing, we need to pretend that the computer has the same peripheral chips as the PC.

08:40.000 --> 08:45.000
So, of course, we could try putting all those chips inside the Commodore

08:45.000 --> 08:49.000
and basically making just another PC clone, but that's not cool.

08:49.000 --> 08:54.000
And that's another way to do it. We can use virtualization.

08:54.000 --> 09:02.000
So, how do we create a virtualization platform on an Intel 88 processor from the 70s?

09:02.000 --> 09:05.000
Well, this is a virtualization platform.

09:15.000 --> 09:17.000
And the way it works...

09:24.000 --> 09:31.000
We need to be able to detect when the computer is trying to perform an I-O operation and stop it.

09:31.000 --> 09:43.000
So, we put a virtualization environment here and every time when the computer tries to access the I-O,

09:43.000 --> 09:49.000
it is interrupted. The interrupt routine checks what kind of I-O access is being done.

09:49.000 --> 09:54.000
That's whatever magic is necessary to emulate this I-O chip,

09:54.000 --> 09:59.000
most likely using inter-processor calls to perform the actual I-O.

09:59.000 --> 10:04.000
And then it turns back and the application thinks that it has actually accessed an I-O chip.

10:04.000 --> 10:06.000
Then it's done.

10:06.000 --> 10:13.000
So, well, is it all enough to actually make this platform PC compatible and run those applications?

10:13.000 --> 10:17.000
I'll grab a couple of bugs and let's find out.

10:20.000 --> 10:35.000
So, we are booting the computer and we are starting to load the operating system, which seems to be free-dose.

10:35.000 --> 10:43.000
And once we have free-dose running, of course we are starting not on Commander, what else would be?

10:49.000 --> 11:00.000
And because we are dealing with Microsoft, of course we start with basics.

11:00.000 --> 11:04.000
So, this is the QBasic from MS-DOS.

11:04.000 --> 11:08.000
This is some very simple Hello World program.

11:08.000 --> 11:12.000
And let's just find out if it works.

11:12.000 --> 11:15.000
Yes, it does.

11:20.000 --> 11:28.000
And of course we are going to use Turbo Pascal as well.

11:28.000 --> 11:31.000
Prince of Persia.

11:31.000 --> 11:50.000
So, again, a Hello World program.

11:50.000 --> 11:55.000
Is it going to work?

11:55.000 --> 11:57.000
Yes, it is.

12:02.000 --> 12:05.000
So, just for good measure, let's try to change it.

12:05.000 --> 12:09.000
So, indeed we can position the cursor on the screen.

12:09.000 --> 12:12.000
We can do some changes.

12:19.000 --> 12:21.000
And it works again.

12:22.000 --> 12:32.000
So, that was the Intel 88 processor card from the Commodore.

12:32.000 --> 12:40.000
But as I showed before, you can attach many different processors to the bus.

12:40.000 --> 12:45.000
So, how about we do something really cool?

12:45.000 --> 12:49.000
This is Commodore 900.

12:49.000 --> 12:56.000
It's an abandoned Unix workstation prototype that was being developed by Commodore,

12:56.000 --> 13:02.000
but it was cancelled because they bought the Amiga and they tried to focus on that one.

13:02.000 --> 13:06.000
And if you look at the hardware, it's a very strange machine

13:06.000 --> 13:11.000
because it uses a Xiloc 8000 processor, which is very rare.

13:11.000 --> 13:15.000
It was used in some Olivetti machines, some industrial equipment,

13:15.000 --> 13:21.000
but basically in 1994 nobody was using it anymore, except Commodore, of course.

13:21.000 --> 13:25.000
It has a memory management unit and it runs coherent.

13:25.000 --> 13:28.000
And coherent is like Linux, but 10 years earlier.

13:28.000 --> 13:36.000
So, it's a system written from scratch to act exactly as Unix, but it was much cheaper.

13:36.000 --> 13:40.000
And it's a truly multitasking and multi-user machine.

13:40.000 --> 13:46.000
You can attach many terminals to it, log in at the same time around applications.

13:46.000 --> 13:52.000
The problem is because it was cancelled, only a few dozen prototypes were made,

13:52.000 --> 13:57.000
so unless you are very lucky and very rich, you can't have one.

13:57.000 --> 14:08.000
So, how about we do something about it and we put a Z8000 processor on the second processor interface?

14:08.000 --> 14:15.000
Here's what is needed to create a virtual Commodore 900 using this interface.

14:15.000 --> 14:18.000
Nothing very difficult here.

14:18.000 --> 14:22.000
So, of course, we need to create virtual hardware again.

14:22.000 --> 14:29.000
We need a keyboard controller, we need a disk controller, we need a serial-poll controller, and so on.

14:29.000 --> 14:37.000
But the good news is once the Iotips are emulated properly, we can use the original Commodore BIOS.

14:37.000 --> 14:39.000
We don't need to write a new one.

14:39.000 --> 14:49.000
And even better, because it's Unix-like with resource protection, then no applications are touching the Iotips directly.

14:49.000 --> 14:52.000
They are all going through the operating system.

14:52.000 --> 14:57.000
So, once the operating system works, then everything is supposed to work as well.

14:57.000 --> 15:06.000
And this is very different from MS-DOS, where every application had its own dirty ways to play with the Iotips

15:06.000 --> 15:12.000
and it's needed to emulate all of that stuff to let them run.

15:12.000 --> 15:15.000
So, you know what happens now.

15:15.000 --> 15:24.000
But before I'm going to show you how it works, this is the Z8000 processor card that I made.

15:24.000 --> 15:28.000
So, it has one megabyte of memory.

15:28.000 --> 15:31.000
It can be accessed either as 8-bit or 16-bit.

15:31.000 --> 15:36.000
It has a memory card that emulates the hard disk.

15:36.000 --> 15:42.000
And, of course, it has the virtualization environment as well.

15:42.000 --> 15:50.000
So, is it going to work? Let's find out.

15:50.000 --> 15:54.000
So, now the original BIOS is starting.

15:54.000 --> 15:58.000
It's going to perform a self-test of all the hardware.

15:58.000 --> 16:05.000
The hardware does not exist, but the self-test passes.

16:05.000 --> 16:11.000
And now we are booting the operating system.

16:11.000 --> 16:18.000
Router can't without the password. That's a very secure installation.

16:18.000 --> 16:23.000
It's a nice Unix file system. And, of course, because it's Unix,

16:23.000 --> 16:29.000
we are going to program it in C.

16:29.000 --> 16:33.000
That's a Hello World program again.

16:33.000 --> 16:41.000
We have a C compiler on board, which takes a bit of time to compile this tiny program

16:41.000 --> 16:47.000
because that's just six megahertz.

16:47.000 --> 16:52.000
But, finally, it's done. And, the program works.

16:52.000 --> 17:03.000
And that, ladies and gentlemen, was Unix running on a Commodore.

17:03.000 --> 17:16.000
Thank you very much.

17:16.000 --> 17:24.000
Three minutes for questions.

17:24.000 --> 17:28.000
Hi, and thank you for the presentation.

17:28.000 --> 17:32.000
Stand up.

17:32.000 --> 17:36.000
Have you tried, like, there's another project for the Commodore,

17:36.000 --> 17:43.000
for the BBC Micro that uses a Raspberry Pi to emulate other professors.

17:43.000 --> 17:51.000
Have you tried using, not using the hardware that you cannot obtain today,

17:51.000 --> 17:54.000
like the ZE-8000 and so on?

17:54.000 --> 17:59.000
Have you tried using better metal or Raspberry Pi to do the emulation

17:59.000 --> 18:05.000
of the other hardware or maybe the emulation of other professors and so on?

18:05.000 --> 18:08.000
Have you had a thought of that?

18:08.000 --> 18:12.000
Yeah, well, you can obtain the ZE-8000 from eBay very easily.

18:12.000 --> 18:18.000
But, I have not tried using any platform from this.

18:18.000 --> 18:20.000
I'm a Commodore guy.

18:20.000 --> 18:24.000
The main problem with emulating the Commodore 900 specifically

18:24.000 --> 18:32.000
is that nobody has ever written any software emulation for the memory management unit of it.

18:32.000 --> 18:38.000
So, you can emulate the CPU because, for example, in the main repository,

18:38.000 --> 18:40.000
you can find the code, does it?

18:40.000 --> 18:44.000
But there is no emulation existing right now for the MMU,

18:44.000 --> 18:49.000
and that makes it really hard to do it without the real chip.

18:49.000 --> 18:55.000
But try the Intel stuff.

18:55.000 --> 18:58.000
Yes, the Intel stuff should be done easily.

18:58.000 --> 19:01.000
Yes, of course.

19:01.000 --> 19:05.000
As long as you can virtualize it.

19:05.000 --> 19:07.000
Thanks for the good talk.

19:07.000 --> 19:14.000
How much performance is being lost in the emulation of the various IO chips?

19:14.000 --> 19:19.000
A lot.

19:19.000 --> 19:26.000
Yes, it takes a lot of time because, first, it needs to go through the interrupt routine,

19:26.000 --> 19:32.000
then it needs to go through the message bus, then it needs to go back through all this.

19:32.000 --> 19:34.000
So, that's quite a lot.

19:34.000 --> 19:38.000
And that's why I decided to bump the processor speed a little bit.

19:38.000 --> 19:45.000
So, for example, the original Commodore 900 has a 6 MHz CPU.

19:45.000 --> 19:47.000
I put a 10 MHz.

19:47.000 --> 19:50.000
And that makes a nice difference.

19:50.000 --> 19:55.000
Otherwise, yes, you would really notice the difference.

19:55.000 --> 19:57.000
But there's also one thing.

19:57.000 --> 20:03.000
If you have static memory in the computer, you don't need to waste cycles for memory refresh.

20:03.000 --> 20:07.000
And that also gives you a nice speed boost.

20:07.000 --> 20:13.000
So, all in all, it works quite well.

20:13.000 --> 20:15.000
Okay, time's up, unfortunately.

20:15.000 --> 20:17.000
Many thanks, Michel.

20:17.000 --> 20:18.000
Thank you.

20:18.000 --> 20:20.000
Thank you.

