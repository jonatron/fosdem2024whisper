WEBVTT

00:00.000 --> 00:14.600
So, hello everybody.

00:14.600 --> 00:16.560
My name is Jesus Pelai.

00:16.560 --> 00:20.440
I am a developer in the HEDI programming language.

00:20.440 --> 00:25.360
I also a teacher in the University of Carabobo, which is located in Venezuela, where you come

00:25.360 --> 00:26.360
from.

00:26.360 --> 00:27.960
Here is also Pink there.

00:27.960 --> 00:34.880
She teaches with HEDI, so she will also be answering your questions.

00:34.880 --> 00:40.240
And today we will be talking a little bit about the HEDI programming language, what

00:40.240 --> 00:48.200
it is, why it is useful over its alternatives, at least for user cases, and also how you

00:48.200 --> 00:51.160
might get involved with the project.

00:51.160 --> 00:54.160
So let's begin.

00:54.160 --> 00:56.160
Okay.

00:56.160 --> 00:58.160
Okay.

00:58.160 --> 01:00.280
So, what is HEDI?

01:00.280 --> 01:05.960
And I will summarize it really fast for those of you who are also jet lag like me.

01:05.960 --> 01:09.360
And these are the three core concepts of HEDI.

01:09.360 --> 01:16.400
So HEDI is a gradual, multilingual, textual programming language built for teaching.

01:16.400 --> 01:18.760
So this is what our entire deal is about.

01:18.760 --> 01:21.240
One outside asks you what is HEDI?

01:21.240 --> 01:26.400
You can tell them that it is gradual, multilingual, and you can use it in the classroom.

01:26.400 --> 01:32.040
And it's a bit of a mouthful, but I will be explaining each one of these concepts along

01:32.040 --> 01:33.040
the talk.

01:33.040 --> 01:39.360
But first, let's talk a little bit about our misconceptions when it comes to teaching

01:39.360 --> 01:40.360
programming.

01:40.360 --> 01:47.160
Because us as programmers, we don't really are that good when we want to teach programming,

01:47.160 --> 01:53.360
because we have this series of misunderstanding how people understand things.

01:53.360 --> 01:56.560
Another thing is that compilers are friends.

01:56.560 --> 01:59.960
And that is a lie made by the compiler PR group.

01:59.960 --> 02:01.440
The compiler is not your friend.

02:01.440 --> 02:05.240
It is a tool, and especially not friend for a kid.

02:05.240 --> 02:08.480
Because the compilers are made for professionals.

02:08.480 --> 02:14.200
And the error messages are very much tailored for adults who are working with the language.

02:14.200 --> 02:20.720
So when a kid sees an error message that is meant for an engineer, it is really intimidating.

02:20.720 --> 02:27.000
And also this second issue is also a sense from the fact that programming languages are

02:27.000 --> 02:29.440
made for adults and engineers.

02:29.440 --> 02:34.800
And people think often that that is not really a problem, that syntax is not really an issue.

02:34.800 --> 02:41.920
And one of the core things of HEDI is that syntax really poses a barrier for entry-level

02:41.960 --> 02:44.160
barrier for novices.

02:44.160 --> 02:51.240
50% of, there's a study that says that 50% of programs submitted by novices have syntax

02:51.240 --> 02:52.240
errors.

02:52.240 --> 02:58.040
And 75% of programs submitted by the weaker students have errors.

02:58.040 --> 03:02.400
So this is not a kid that is having fun reading the error messages and fixing them.

03:02.400 --> 03:07.480
It's a kid that is trying stuff around, trying to make the program work.

03:07.520 --> 03:14.520
So it's really a really tall barrier for someone to get into programming when you have the

03:14.520 --> 03:16.800
syntax right away.

03:16.800 --> 03:20.400
And the other misconception is that you mostly learn alone.

03:20.400 --> 03:27.360
We often, when we think about learning programming, we think about someone who is sitting in front

03:27.360 --> 03:29.720
of a computer alone in the room.

03:29.720 --> 03:33.920
And that was the case 20, 30, even 10 years ago.

03:33.920 --> 03:37.560
But today there are many schools that teach programming.

03:37.560 --> 03:42.200
So now we also have to think about programming as a discipline that you can learn in the

03:42.200 --> 03:44.200
classroom.

03:44.200 --> 03:51.280
And these were some of the misconceptions that the creator of HEDI, Felina Hermans, had.

03:51.280 --> 03:56.760
When she was asked to teach a class of high school programming.

03:56.760 --> 04:00.480
Felina, she is a researcher from the Netherlands.

04:00.520 --> 04:03.200
She has a PhD in computer science.

04:03.200 --> 04:09.440
But she was teaching high schoolers as a Saturday activity.

04:09.440 --> 04:12.000
And now she thought, okay, fine, I know programming.

04:12.000 --> 04:13.880
I can teach programming.

04:13.880 --> 04:18.040
And for that she used Scratch.

04:18.040 --> 04:19.960
And Scratch is a great tool.

04:19.960 --> 04:22.000
It's a great language.

04:22.000 --> 04:29.120
Scratch is a visual-based language where for programming you only drag stuff around.

04:29.120 --> 04:31.440
And by dragging stuff around you have a program.

04:31.440 --> 04:37.200
For example, this one right here makes the cat move around and play meow-meow sounds.

04:37.200 --> 04:41.280
And kids, they love making the cat do meow sounds.

04:41.280 --> 04:48.080
However, as time went on, the kids grew up and they said to Felina, we like Scratch,

04:48.080 --> 04:49.960
but we don't like a toy anymore.

04:49.960 --> 04:51.960
You know, this is like a toy.

04:51.960 --> 04:54.520
Drag stuff around is like making a puzzle.

04:54.520 --> 04:56.360
We want real programming languages.

04:56.360 --> 05:00.840
They want that programmers use the ones that can get me a job.

05:00.840 --> 05:04.760
Because these were students from a technical school.

05:04.760 --> 05:11.120
So they were very much interested in learning programming as a way to get jobs in the future.

05:11.120 --> 05:13.800
And many people learn programming this way.

05:13.800 --> 05:18.120
Not everyone learns programming now because of a passion of computing, but because it is

05:18.120 --> 05:23.400
a really viable way to get out of poverty, to get a job.

05:23.400 --> 05:25.640
So now she said, yeah, that's fine.

05:25.640 --> 05:26.640
I can do that.

05:26.640 --> 05:29.720
Let's teach you Python.

05:29.720 --> 05:32.240
And Python is also a great language.

05:32.240 --> 05:39.560
It is certainly easier, the syntax is certainly easier than the likes of Java, C or C++.

05:39.560 --> 05:44.400
But still, it's very much a language made for professionals.

05:44.400 --> 05:46.440
Error messages are for professionals.

05:46.440 --> 05:48.840
And the syntax is a barrier right away.

05:48.840 --> 05:55.360
And you can see here, if I'm trying to teach a classroom how to write this, I would say,

05:55.360 --> 05:59.080
yeah, kids, today we are learning to print some text.

05:59.080 --> 06:03.800
And for some students, that is not really that exciting to just print text on a screen.

06:03.800 --> 06:04.800
But you got along.

06:04.800 --> 06:07.000
We are going to print text.

06:07.000 --> 06:11.120
And to do that, you write print, and then you write a parenthesis.

06:11.120 --> 06:15.840
To write a parenthesis, you have to do shift eight in the keyboard.

06:15.840 --> 06:17.160
And then a quotation mark.

06:17.360 --> 06:19.960
Yeah, the quotation mark is right beside the answer.

06:19.960 --> 06:24.280
So you have to do shift that, keep it pressed, write the text, and again.

06:24.280 --> 06:31.440
So as you can see, the kids, at this level, they might not have the proficiency in typing

06:31.440 --> 06:37.440
or proficiency knowing how to type stuff or clicking and selecting text.

06:37.440 --> 06:39.760
So that is also a barrier for them.

06:39.760 --> 06:41.960
But let's assume that the kids do it.

06:41.960 --> 06:46.400
And then you have text on a screen.

06:46.400 --> 06:47.400
Awesome.

06:47.400 --> 06:50.800
But what about some kid makes an error?

06:50.800 --> 07:00.760
For example, this kid, they wrote an uppercase P. And for them, this will look pretty fine.

07:00.760 --> 07:04.680
Perhaps this kid does not know that their rates quickly line means that they have an

07:04.680 --> 07:05.680
error.

07:05.680 --> 07:07.240
So they try to run it.

07:07.240 --> 07:09.920
And they are faced with this.

07:09.920 --> 07:12.520
A really uglier message, you know?

07:12.520 --> 07:14.640
It says, trace back.

07:14.640 --> 07:17.640
Most recent call last, a file and a path.

07:17.640 --> 07:23.960
And then in the end, it says, name error, name print is not defined, did you mean print?

07:23.960 --> 07:27.520
And a frack it, this is really intimidating stuff.

07:27.520 --> 07:30.760
The kids probably didn't even read the complete error message.

07:30.760 --> 07:34.240
They would say, teacher, teacher, what is happening here?

07:34.240 --> 07:38.360
And if they read it, and if they know English, it's another barrier.

07:38.360 --> 07:41.360
Because Python is an English-based language.

07:41.360 --> 07:45.320
So if the kid does not know English, there is no clue that they will understand this.

07:45.320 --> 07:49.440
But you know, they read it, they fix it, it's fine.

07:49.440 --> 07:51.800
But now you also have this mistake.

07:51.800 --> 07:57.000
Now this kid switched around their parentheses and the quotation mark.

07:57.000 --> 08:00.160
And now it says, syntax error.

08:00.160 --> 08:01.280
parentheses was never closed.

08:01.280 --> 08:02.600
And they might say, yeah, I closed it.

08:02.600 --> 08:07.040
And what the heck, it's a syntax error.

08:07.040 --> 08:10.720
Now, I have this program.

08:10.720 --> 08:16.120
And it looks perfect, except for the squiggly line that it tells us, adults, that there

08:16.120 --> 08:18.480
is an error, but the kid doesn't see it.

08:18.480 --> 08:21.160
And now they try to run it.

08:21.160 --> 08:24.600
And it says, indentation error, unexpected indent.

08:24.600 --> 08:26.640
Teacher, what is an indent?

08:26.640 --> 08:30.400
Now you don't want to be explaining all of these to a kid.

08:30.400 --> 08:32.320
This is just the first class, remember.

08:32.320 --> 08:36.240
They are just learning to print text on a screen.

08:36.240 --> 08:43.680
They are faced with complicated error messages and syntax element that has to be placed exactly

08:43.680 --> 08:46.760
as the programming line was expected.

08:46.760 --> 08:49.040
Otherwise, you don't have anything.

08:49.040 --> 08:51.280
And what an ugly error message.

08:51.280 --> 08:57.320
So it was also a problem when she tried to teach concepts.

08:57.320 --> 09:03.880
Because for example, if I show these to my students, I want them to understand the underlying

09:03.880 --> 09:06.080
concept of repetition.

09:06.080 --> 09:11.640
I want them to know that these right here will say, you will print 0, 1, 2, and 3.

09:11.640 --> 09:13.400
But they are not seeing that.

09:13.400 --> 09:18.480
They are seeing that they have to put a column and brackets and spaces and put it in such

09:18.480 --> 09:22.080
a way that it's perfect for the computer to understand.

09:22.080 --> 09:29.320
And the kids, they think, why is not the computer as smart to understand while I'm throwing

09:29.320 --> 09:30.320
at it?

09:30.320 --> 09:31.880
You know, there is artificial intelligence.

09:31.880 --> 09:33.120
They can write stuff.

09:33.120 --> 09:37.360
Why can't it understand a simple program that I'm making?

09:37.360 --> 09:43.200
So we see here that syntax is creating cognitive overload.

09:43.200 --> 09:49.040
So we humans have a limited space in our minds to work.

09:49.040 --> 09:52.120
We have a small amount of short-term memory.

09:52.120 --> 09:56.880
And when you are learning a programming language, your short-term memory is filled with the

09:56.880 --> 09:57.880
symbols.

09:57.880 --> 10:03.600
So you've got to have a short-term memory, so a spot for where the variable is, and

10:03.600 --> 10:09.320
another spot for where the bracket is, and the name of the programming, and the name

10:09.320 --> 10:10.320
of the function.

10:10.320 --> 10:15.160
So it really is complicated for the kids to understand syntax.

10:15.160 --> 10:20.280
And on top of that, understand the programming concept that you are trying to teach.

10:20.280 --> 10:25.760
But now, this is not only a programmer, a problem that us programmers face.

10:25.760 --> 10:29.920
Because there is also other disciplines that are very hard to understand.

10:29.920 --> 10:35.120
We have language and mathematics, and those are famously hard disciplines.

10:35.120 --> 10:37.400
But we don't teach them right away.

10:37.400 --> 10:40.720
You don't expect a kid to understand the Riemann hypothesis.

10:40.720 --> 10:43.320
We do it step by step.

10:43.320 --> 10:49.360
For example, if I'm teaching language to a kid, and the kid writes these letters, I

10:49.360 --> 10:52.440
don't say to the kid, kid, this is a really ugly letter.

10:52.440 --> 10:55.000
This is an ugly A. This doesn't make any sense.

10:55.240 --> 10:57.560
No, you tell them, this is really good.

10:57.560 --> 11:02.880
You wrote the A, you wrote the I, the N, and you are beginning to understand that.

11:02.880 --> 11:10.400
And then you tell them that the words, the vowels, and the consonants, they make words.

11:10.400 --> 11:13.800
And then you put more complicated stuff on top of that.

11:13.800 --> 11:19.040
And then you have that, you can have uppercase letters and punctuation marks.

11:19.080 --> 11:25.240
And then you end up with an understandable sentence.

11:25.240 --> 11:27.840
And now the rules change rapidly.

11:27.840 --> 11:31.040
You didn't start with the whole thing all at once.

11:31.040 --> 11:37.200
You were changing the rules little by little, little by little, so the kid could understand

11:37.200 --> 11:38.160
all the steps.

11:38.160 --> 11:42.720
Now, changing the rules creates also a little bit of cognitive overload.

11:42.720 --> 11:48.320
But that very much makes up for the fact that they are understanding each one of the concepts

11:48.320 --> 11:50.800
individually to then learn the other one.

11:50.800 --> 11:55.360
And they were learning on top of those foundations.

11:55.360 --> 11:57.720
And this is also the case for mathematics.

11:57.720 --> 12:04.200
If I'm trying to teach a kid to subtract numbers, I can tell them that you can't subtract

12:04.200 --> 12:09.760
a greater number from a lesser number because they don't know that negative numbers exist.

12:09.760 --> 12:17.920
So I can tell them 5 minus 3 equals 2 and 3 minus 5 equals 2, but then I change it.

12:17.920 --> 12:22.840
And I tell the kid, actually, 3 minus 5 equals minus 2.

12:22.840 --> 12:28.640
And now that you just changed the algorithm of subtraction a little bit, they didn't

12:28.640 --> 12:34.760
have to take all in advance that there are negative numbers and positive numbers.

12:34.760 --> 12:37.160
And the same happens for division.

12:37.160 --> 12:41.640
You're first telling that 8 divided by 3 is 2, reminder 2.

12:41.640 --> 12:45.040
And then you introduce the concept of fractions.

12:45.040 --> 12:47.000
And now it changed a little bit.

12:47.000 --> 12:50.720
And now 8 divided by 3 is 2 and 2-third.

12:50.720 --> 12:58.000
And the same happens for, and also the same 8 divided by 3 is 2.6666.

12:58.000 --> 13:04.840
So as you see, the same operation for the kid had three forms, and it became more complex

13:04.840 --> 13:07.200
as time went on.

13:07.200 --> 13:09.080
Now this is the idea.

13:09.080 --> 13:13.000
We can do that for programming too.

13:13.000 --> 13:15.080
And that is how Heady was born.

13:15.080 --> 13:17.760
We have a gradual programming language.

13:17.760 --> 13:20.560
And we can see here an example of Heady.

13:20.560 --> 13:25.040
So as you see, in the level 1, we have a really simple language.

13:25.040 --> 13:29.000
You can only print and ask input from the user.

13:29.000 --> 13:33.520
But you see here that there are no syntactic elements attached to it.

13:33.520 --> 13:37.840
So in its simple form, print just, print some text, print hello.

13:37.840 --> 13:44.280
I can ask input from the user, but I don't have to send a variable or do an equal sign

13:44.280 --> 13:45.280
off.

13:45.280 --> 13:46.960
Just ask what's your name.

13:46.960 --> 13:53.880
And the echo command will repeat the information just given to us by the user.

13:53.880 --> 13:55.600
So you just use that.

13:55.600 --> 13:58.960
And this level consists of six commands.

13:58.960 --> 14:04.680
Distribute for text 2 for the total module of Python, so you can also make drawings.

14:04.680 --> 14:08.040
So it's not as boring as just printing text.

14:08.040 --> 14:10.280
And you can also play some music.

14:10.280 --> 14:11.280
We just merged that.

14:11.280 --> 14:17.040
And so you can also now do some simple music notes in this level.

14:17.040 --> 14:20.480
And now you move on, because that is a really simple language.

14:20.480 --> 14:23.120
And I put some stuff to it.

14:23.120 --> 14:29.680
And now in level 4, I already introduced quotation marks and also variables.

14:29.680 --> 14:32.400
So you see here that the program changed a little bit.

14:32.400 --> 14:37.480
So now I have that if I want input, I store it in a variable.

14:37.480 --> 14:40.640
So now his name is ask what is your name.

14:40.640 --> 14:45.520
And I can concatenate that in the print command.

14:45.520 --> 14:52.440
And then in level 18, you end up using a subtractively valid subset of Python.

14:52.440 --> 14:55.600
So in the end, you will just be premming in Python.

14:55.600 --> 14:58.080
And you can move on from Heady to Python.

14:58.080 --> 14:59.880
And I start using that ecosystem.

14:59.880 --> 15:03.960
So you can use Piberix or anything else that you like.

15:03.960 --> 15:09.600
But you don't have to explain all of these syntactic elements right away, because you

15:09.600 --> 15:11.360
do it slowly.

15:11.360 --> 15:19.160
And also the levels, they offer you an opportunity for the kids to all be in the same place.

15:19.160 --> 15:25.360
Because you don't have many different things going on with kids using 4 and others using

15:25.360 --> 15:26.840
other stuff.

15:26.840 --> 15:33.640
Now, also it's important to note that the syntax of level 1 is not valid in level

15:33.640 --> 15:35.120
4, for example.

15:35.120 --> 15:40.120
So when you move on from level to level, you are basically switching to another programming

15:40.120 --> 15:41.120
language.

15:41.120 --> 15:47.440
So in essence, we have 18 different programming languages which are built on top of each other.

15:47.440 --> 15:53.320
And each one has its own parser and its own syntax.

15:53.320 --> 15:57.000
And these are our design goals.

15:57.000 --> 16:02.080
So we have these six goals here that we use when we are designing a level.

16:02.080 --> 16:06.240
So the first one is that the concepts are offered at least three times.

16:06.240 --> 16:12.400
So in the example of print, the first way is you do a print text, then you print variables,

16:12.400 --> 16:16.520
and then you add quotation marks and everything.

16:16.520 --> 16:21.000
The second one is the concept is introduced as simple as possible.

16:21.000 --> 16:26.840
For example, in the repeat command, we first introduce it with repeat and a single sentence

16:26.840 --> 16:28.160
in a single line.

16:28.160 --> 16:31.760
So you don't have to deal with blocks or multiple commands at the same time.

16:31.760 --> 16:34.520
It's just repeat a single instruction.

16:34.520 --> 16:37.680
And then only one aspect changes at the time.

16:37.680 --> 16:41.960
So if I introduce the repeat command in level 7, I do it in a single line.

16:41.960 --> 16:46.520
So the next change is just do it and now we have blocks.

16:46.520 --> 16:51.120
And in the next one, in the level 9, we introduce nested blocks.

16:51.120 --> 16:57.840
So you see that we try to change as little as possible to make the levels feel like a

16:57.840 --> 17:01.640
gentle progression and not so steep.

17:01.640 --> 17:07.600
And also the syntactic elements are deferred to the latest moment possible.

17:07.600 --> 17:09.680
An example was the quotation mark.

17:09.680 --> 17:16.680
They are introduced in level 4 because you can't do more complex programs if you don't

17:16.680 --> 17:17.680
introduce them.

17:17.680 --> 17:21.400
And this also poses a problem for the students.

17:21.400 --> 17:25.960
Some kids, they really struggle with the introduction of the quotation marks.

17:25.960 --> 17:31.600
But we cannot do it any later because it would mean that we cannot make more complex programs.

17:32.560 --> 17:38.480
And the concepts are interleaved, which means that if we change something in one level,

17:38.480 --> 17:41.920
we don't change it in the next level and the next two levels.

17:41.920 --> 17:48.160
So concepts can be really taken for the students, by the students.

17:48.160 --> 17:53.440
And then it's always possible to create meaningful programs because in the end, this has to be

17:53.440 --> 17:57.120
fun otherwise the kid won't like to use it.

17:58.080 --> 17:59.880
OK, so that is for Grad-Walt.

17:59.880 --> 18:02.200
But that is not all what we are all about.

18:02.200 --> 18:04.160
We also are multilingual.

18:04.160 --> 18:08.560
And we ran a user study with Dutch kids.

18:08.560 --> 18:14.320
It was composed for 21 kids, I think, in an online class during the pandemic.

18:14.320 --> 18:17.320
And they told us that they liked Heady.

18:17.320 --> 18:20.560
They liked that the error messages were easier than Python.

18:20.560 --> 18:24.480
They liked that it offered a state-by-state guide.

18:24.480 --> 18:29.280
So they told us we would like to program in Dutch.

18:29.280 --> 18:34.080
We just don't want that the interface is Dutch.

18:34.080 --> 18:36.080
We want the keywords to be in Dutch.

18:36.080 --> 18:41.680
And it was a bit of a surprise because Dutch kids, they know English, but even then they

18:41.680 --> 18:45.160
want to program in their own language.

18:45.160 --> 18:50.640
And that is more so the case for Arab kids and Spanish-speaking kids, because, for example,

18:50.640 --> 18:54.440
for an Arab kid, I don't only have to teach them what is a program.

18:54.440 --> 19:00.600
I have to teach them what is a P, what is an R, what is an I, because they don't use

19:00.600 --> 19:02.400
the same script as us.

19:02.400 --> 19:06.760
On top of understanding syntax, they also have to understand the Latin script.

19:06.760 --> 19:08.280
So it's very hard for them.

19:08.280 --> 19:13.440
And on top of that, they have to change the tweet from the Arab keyboard to the English

19:13.440 --> 19:14.720
keyword and then back.

19:14.720 --> 19:15.720
So it is a mess.

19:15.720 --> 19:17.840
It's kind of a mess for them.

19:17.840 --> 19:19.000
So we did it.

19:19.000 --> 19:22.200
And now Heady is available in 49 languages.

19:22.200 --> 19:24.600
I made these slides like two weeks ago.

19:24.600 --> 19:26.520
Now we have 49 languages.

19:26.520 --> 19:31.600
So as you can see here, we have Spanish, we have Arab there, we have Japanese, and we

19:31.600 --> 19:32.600
also have Dutch.

19:32.600 --> 19:33.600
Dutch or German?

19:33.600 --> 19:34.600
That's German.

19:34.600 --> 19:35.600
German.

19:35.600 --> 19:40.640
So, and this is kind of hard.

19:40.640 --> 19:47.480
And I will talk a little bit about, it is a compromise for us to be able to support the

19:47.480 --> 19:49.360
49 languages and growing.

19:49.360 --> 19:53.040
Because each one, you know, some languages have their own quirks.

19:53.040 --> 19:58.760
So Arab has something called Tatwill, which is like a valid space.

19:58.760 --> 20:03.840
So when you add a space, you can add it any place in the world.

20:03.840 --> 20:07.680
And we needed to highlight, because it's the same world.

20:07.680 --> 20:10.760
It's just have like that space in there.

20:10.760 --> 20:17.240
So when the language has these quirks, we tell the translator, translate the program

20:17.240 --> 20:20.080
as close as you can, as many languages as you can.

20:20.080 --> 20:24.840
And we will try to solve the problems that arise in the grammar.

20:24.840 --> 20:30.280
And there are some cases where we can't solve it because of, you know, limitations with

20:30.280 --> 20:31.440
passing technology.

20:31.440 --> 20:38.520
For example, in Chinese, the words for plural and singular are the same symbol.

20:38.520 --> 20:44.640
So if I say for animal in animals, they place the same symbol in both of those places.

20:44.640 --> 20:47.800
So there is no way to differentiate the variables.

20:47.800 --> 20:50.160
That is a problem that we really cannot solve.

20:50.160 --> 20:53.320
But there are some others like Tatwill in Arab.

20:53.320 --> 20:57.000
And also some key words have spaces in them.

20:57.000 --> 20:58.000
We can solve that.

20:58.000 --> 21:06.360
And there are some conquers of French has also valid spaces in the end of the world.

21:06.360 --> 21:11.600
So yeah, now let's do a demo.

21:11.600 --> 21:14.240
So this is, hey, this is level seven.

21:14.240 --> 21:20.560
Let's go back to level one.

21:20.560 --> 21:23.040
So this is the interface.

21:23.040 --> 21:26.000
Here we can see that we have several elements.

21:26.000 --> 21:33.880
We have the editor where kids can write the programs, the output window, and this top

21:33.880 --> 21:38.200
part is where they can read the assignment.

21:38.200 --> 21:43.240
So these are sort of like exercises that they can make.

21:43.240 --> 21:45.520
So this one we have to build them.

21:45.520 --> 21:50.800
So these are provided by us and are translated by the community.

21:50.800 --> 21:53.800
What if I want to change to another language?

21:53.800 --> 21:58.720
Now I say that I want to switch to Spanish.

21:58.720 --> 22:06.160
And you see here that it's with the interface, but the keywords are seen in English.

22:06.160 --> 22:10.040
See if this works.

22:10.040 --> 22:13.040
And you see now that the keywords now are translated.

22:13.040 --> 22:18.760
Which only translates, the keyword doesn't translate the program because for that we

22:18.760 --> 22:22.000
would need to use like an automatic technology for that.

22:22.000 --> 22:27.120
And that is kind of hard to integrate and also poses its own problems.

22:27.120 --> 22:29.440
But you can switch the keywords.

22:29.440 --> 22:31.080
And what about bilingual kids?

22:31.080 --> 22:37.280
What about I know English and also know Spanish?

22:37.280 --> 22:43.640
So I can mix in Spanish and English keywords.

22:43.640 --> 22:47.440
And you can only miss your own language and English.

22:47.440 --> 22:50.880
You cannot mix any combination up to languages.

22:50.880 --> 22:57.360
But this is really useful for kids, for example, Latino kids in the USA where they know Spanish

22:57.360 --> 23:02.680
and they know a little bit of language and a little bit of the other.

23:02.680 --> 23:05.160
Okay, cool.

23:05.160 --> 23:07.400
Now that's it for multilingual.

23:07.400 --> 23:08.720
But we are not only that.

23:08.720 --> 23:11.760
We also build for teaching.

23:11.760 --> 23:19.840
So one of the main aspects of Heady is that it's not only made for learning programming

23:19.840 --> 23:22.960
but it's also a system for teaching programming.

23:22.960 --> 23:30.560
So we are the primary language, but we also are the system that is built around it, learning

23:30.560 --> 23:31.800
and teaching system.

23:32.240 --> 23:38.080
And also this is very good for a teacher because the levels offer a state by state guy and

23:38.080 --> 23:39.960
they are already like a lesson plan.

23:39.960 --> 23:43.080
So they don't need to make a lesson plan from the beginning.

23:43.080 --> 23:46.360
So that makes it a little easier to teach.

23:46.360 --> 23:49.440
So let's compare that to teaching scratch.

23:49.440 --> 23:54.680
So this is scratch and you are when you open it, we are met with like a black canvas.

23:54.680 --> 23:58.440
So the kids can do whatever they want.

23:58.440 --> 24:01.400
But that also poses a problem for the teacher.

24:01.400 --> 24:03.880
Because what can my students build?

24:03.880 --> 24:07.440
Some of them will not have no idea.

24:07.440 --> 24:11.560
Others will have many ideas that they will want to build.

24:11.560 --> 24:17.520
So now you also have to either get lessons from the internet or build your own or you

24:17.520 --> 24:21.240
don't really know whether those will work.

24:21.240 --> 24:23.480
So you make your lesson.

24:23.480 --> 24:28.080
And now there will be a kid who will tell you, hey teacher, what do I do now?

24:28.080 --> 24:29.480
I don't know what next to do.

24:29.480 --> 24:30.480
And this is fine.

24:30.480 --> 24:31.480
They are all in their place.

24:31.480 --> 24:34.600
There are other five kids calling you but you go to them and you help them.

24:34.600 --> 24:39.480
But there is this kid who ignored your lesson.

24:39.480 --> 24:40.480
I build this.

24:40.480 --> 24:41.760
Can you help me debug it?

24:41.760 --> 24:46.280
And now I have to understand this program and help this kid debug it and there are other

24:46.280 --> 24:49.960
five kids around me calling me teacher, teacher, I don't know what to do.

24:49.960 --> 24:56.880
So this is hard for a teacher to manage because there is too much freedom and too much variation

24:56.880 --> 25:01.720
between the levels of proficiency in the students.

25:01.720 --> 25:07.360
So what we do, what we can do is that in Heady you can build your class.

25:07.360 --> 25:08.360
You can make a class.

25:08.360 --> 25:15.520
You have a student account and the students can submit their own programs in a class.

25:15.520 --> 25:20.080
So you don't have to download or upload any sort of files.

25:20.080 --> 25:22.600
So that is done automatically by your system.

25:22.600 --> 25:31.080
You can have quizzes so you can block the next level if the kid does not have the necessary

25:31.080 --> 25:32.080
grade.

25:32.080 --> 25:33.640
And you can also block it by date.

25:33.640 --> 25:39.280
So you don't have kids at a kid in level two and a kid in level 18 with the aligned levels

25:39.280 --> 25:40.440
of proficiency.

25:40.440 --> 25:43.040
So you have all of them right in the middle.

25:43.040 --> 25:48.960
So the slower ones will pick up the speed of the faster ones and the faster ones will

25:48.960 --> 25:54.240
not have, you know, will not build such complex programs because they will be limited by the

25:54.240 --> 25:56.360
level.

25:56.360 --> 25:58.720
And all of this is customizable.

25:58.720 --> 26:02.840
You can make your own lessons also by building your own adventures.

26:02.840 --> 26:08.840
So it is possible to just ignore what we've built or build your own adventures on top

26:08.840 --> 26:09.840
of that.

26:09.840 --> 26:15.840
Some teachers, they like to have an adventure that is like a project.

26:15.840 --> 26:22.040
So the project starts in level one and it changes from level to level and in the end

26:22.040 --> 26:24.000
you have to make a really big program.

26:24.000 --> 26:31.040
And that was they built it bit by bit in all of the levels.

26:31.040 --> 26:35.120
Now let's start a little bit about how does this work?

26:35.120 --> 26:36.800
What is our architecture?

26:36.800 --> 26:41.360
An architecture is a really simple client to server architecture.

26:41.360 --> 26:44.960
In the server we transpiled the programs using LARC.

26:44.960 --> 26:48.600
And LARC is a library that generates parser.

26:48.600 --> 26:56.560
You write your parsing, your syntax grammar using eb and f and then it generates the parser

26:56.560 --> 26:58.000
for that.

26:58.000 --> 27:01.800
And to that, and then we build the Python program in the server.

27:01.800 --> 27:07.440
We send it back to the client and it's called which is a library that executes Python in

27:07.440 --> 27:13.480
the browser and that is done by translating the Python program to a JavaScript that they

27:13.480 --> 27:17.280
can understand and then execute it.

27:17.280 --> 27:20.520
But what are some architectural challenges?

27:20.520 --> 27:25.720
So A is an editor that didn't work well with right to left languages.

27:25.720 --> 27:34.360
So we were having problems with Hebrew and Arab and I also think that's how it is.

27:34.360 --> 27:36.680
And so it was really a challenge.

27:36.680 --> 27:41.480
So we have, changing this wasn't easy.

27:41.480 --> 27:44.720
But we did it and it was hard.

27:44.720 --> 27:54.600
So as I told you, making a language that is available in many languages, it is very challenging

27:54.600 --> 27:59.520
because you have to debug in languages that you don't understand.

27:59.520 --> 28:04.120
You have to look like an Arab program and you don't understand Arab.

28:04.120 --> 28:11.720
So it's very much a decision by the team to make this program, this language more accessible

28:11.720 --> 28:18.160
to everyone because it's not really about this social justice problem but it's also

28:18.160 --> 28:19.880
an economics problem.

28:19.880 --> 28:27.360
Like it will be so much more easier for the kids to program in their own languages.

28:27.360 --> 28:30.240
For Arab people, they don't use our numbers.

28:30.240 --> 28:33.720
They have their own numerical system with other symbols.

28:33.720 --> 28:35.520
And they can use those in heavy.

28:35.520 --> 28:38.280
So it's really like programming at home.

28:38.280 --> 28:44.680
They don't have to learn everything else from other languages.

28:44.680 --> 28:50.880
And for this, to support these many languages, we use parser generators because building

28:50.880 --> 28:56.240
our own parser for 18 levels, 47 languages, would be really hard.

28:56.240 --> 29:03.040
So we generate them using LARC and that one is laser, the one we used in the front end.

29:03.040 --> 29:08.760
So we have to maintain 18 different grammars times 47 languages.

29:08.760 --> 29:10.840
So that is a lot.

29:10.840 --> 29:12.080
And we have some tricks for that.

29:12.080 --> 29:17.160
For example, we don't build the entire grammar all at once.

29:17.160 --> 29:21.400
So we only change bits that change from level to level.

29:21.400 --> 29:29.240
So if level 4, I'm just introducing quotation marks, I only change the print and ask commands.

29:29.240 --> 29:31.560
So it becomes a little bit easier.

29:31.560 --> 29:35.840
And we have to make some creative way to do that.

29:35.840 --> 29:42.520
So we made a grammar merger and also the same for LARC, for laser.

29:42.520 --> 29:48.120
So you see, it's complicated because both of these use different parsing algorithms.

29:48.120 --> 29:53.120
So you have to take that count for that.

29:53.120 --> 29:56.120
Okay, now let's talk a little bit about me.

29:56.120 --> 29:59.880
I am, as you see, I am Venezuelan.

29:59.880 --> 30:03.920
So what is a Venezuelan doing here giving this talk?

30:03.920 --> 30:08.600
And I became involved with Haiti in 2021.

30:08.600 --> 30:15.400
And by that point, I was an undergrad student trying to get involved in an open source project

30:15.400 --> 30:22.640
to understand a little bit more about professional projects and Python, et cetera.

30:22.640 --> 30:26.680
And I heard about Haiti because I followed Felina on Twitter.

30:26.680 --> 30:27.920
So I texted her.

30:27.920 --> 30:30.200
Hey, I want to get involved with Haiti.

30:30.200 --> 30:31.800
It could be possible.

30:31.800 --> 30:36.160
And she had a meeting with me on Google Meet.

30:36.160 --> 30:41.680
And that was really impressive for me, for a researcher from the Netherlands to be meeting,

30:41.680 --> 30:45.480
you know, an undergrad student from around the world.

30:45.480 --> 30:47.160
That really meant a lot for me.

30:47.160 --> 30:52.040
And then I became more and more involved with the project.

30:52.040 --> 30:58.840
And now she offered me the opportunity to work full-time at Haiti and then give this talk.

30:58.840 --> 31:04.160
So to me, the open source has not only been, you know, about building a great product,

31:04.160 --> 31:07.680
it has been life-changing for me.

31:07.680 --> 31:12.640
And this can be, you know, the case for other people because, for example, my students,

31:12.640 --> 31:18.920
they, I teach now in the university where I studied, and they told me, teacher,

31:18.920 --> 31:21.000
I want to get a job.

31:21.000 --> 31:22.920
I want to support my family.

31:22.920 --> 31:28.680
And now I'm telling them that come here, help us with Haiti with open source,

31:28.680 --> 31:31.160
and then will you have something in your resume?

31:31.160 --> 31:37.880
And this is very important for us in Haiti that not only our product is accessible to everyone,

31:37.880 --> 31:40.520
but also our system are accessible to everyone.

31:40.520 --> 31:48.080
So if you are a new time programmer, if you are learning Python and you are not as proficient

31:48.080 --> 31:53.880
in professional systems, we try to help you and make it as simple as possible for you.

31:53.880 --> 31:59.920
So you can boot Haiti really quickly in your computer and there won't be a problem.

31:59.920 --> 32:02.200
You don't have to deal with complicated stuff.

32:02.200 --> 32:06.440
If you only know Python, you can help us a lot in the back end,

32:06.440 --> 32:09.840
so you don't even have to know JavaScript or HTML.

32:09.840 --> 32:16.920
And this is also something that we embrace a lot when we're doing changes to our system.

32:16.920 --> 32:24.680
When we try to improve our systems, we think would this be accessible for students to build with Haiti?

32:24.680 --> 32:28.480
Because students have helped us a lot.

32:28.480 --> 32:33.560
They have built some of the features that you can see in Haiti, and then we polish them.

32:33.560 --> 32:34.840
And so we welcome everyone.

32:34.840 --> 32:39.280
We welcome novice programmers and we welcome professional programmers.

32:39.280 --> 32:43.320
So if you can get involved with us, you will very much welcome.

32:43.360 --> 32:50.400
So you can join us on our Discord and GitHub and you can try at Haiti.org.

32:50.400 --> 32:51.400
Thank you very much.

32:59.080 --> 33:01.080
Now we are open for questions.

33:03.600 --> 33:04.600
Yes?

33:04.600 --> 33:06.600
Just a quick question.

33:06.600 --> 33:10.600
You mentioned that one of the problems is syntax and errors.

33:10.600 --> 33:17.600
And I just wanted to know what language is used for showing errors in the language.

33:17.600 --> 33:23.600
And how you will not define but understand in which language should you show errors?

33:23.600 --> 33:25.600
Oh, right.

33:25.600 --> 33:30.600
So the user sets their own language.

33:30.600 --> 33:32.600
For example, I have Spanish here.

33:32.600 --> 33:45.600
And if I make a mistake, you can see here that the error message is shown in Spanish.

33:45.600 --> 33:51.600
And the same if I go to Arab.

34:03.600 --> 34:05.600
The error message is in Arab.

34:05.600 --> 34:12.600
So it does know which language to use for the user, for the error messages.

34:15.600 --> 34:18.600
And this is also the problem with the student itself.

34:18.600 --> 34:24.600
So because all of the expensive ideas that we use like day to day are so over complicated.

34:24.600 --> 34:27.600
It's profiling, the borders, etc. etc.

34:27.600 --> 34:28.600
Okay.

34:28.600 --> 34:33.600
There should be just like a small tool for kids just with a window.

34:33.600 --> 34:38.600
And as you show in the wrap, I made it directly on the computer.

34:38.600 --> 34:41.600
So you're talking about tools for the student.

34:41.600 --> 34:44.600
Yeah, like ideas that could help you.

34:44.600 --> 34:45.600
Oh, okay.

34:45.600 --> 34:46.600
Right.

34:46.600 --> 34:51.600
So they can, for HEDI or IDE, is there in the page?

34:51.600 --> 34:53.600
But they have included some tools.

34:53.600 --> 34:56.600
For example, we do have HEDI bogey.

34:56.600 --> 35:00.600
So you can debug HEDI programs and execute them step by step.

35:00.600 --> 35:05.600
And you can also know which variables are defined in the program.

35:05.600 --> 35:09.600
So we do have some light IDE features that can help the students.

35:09.600 --> 35:13.600
We do not want to make it very complicated.

35:13.600 --> 35:18.600
For example, you could also show like auto-completion.

35:18.600 --> 35:24.600
But that would mean that it would crowd the page a little bit and it would be more complicated

35:24.600 --> 35:26.600
and more stuff for the kid to take in.

35:26.600 --> 35:30.600
So we try to make it also as simple as possible for them.

35:30.600 --> 35:31.600
Yes?

35:31.600 --> 35:40.600
Have you thought about interfacing the IDE and HEDI with external algorithm like microcontroller

35:40.600 --> 35:42.600
or GPIOs or LAPs?

35:42.600 --> 35:47.600
Which is more, kids can take their hands and stuff.

35:47.600 --> 35:50.600
Yes, that is actually something that is in the works.

35:50.600 --> 35:54.600
We have a student right now working on interfacing HEDI.

35:54.600 --> 35:56.600
Which I think is microblocks.

35:56.600 --> 35:58.600
Microbits.

35:58.600 --> 36:00.600
Microbits, yeah, microbits.

36:00.600 --> 36:05.600
Yeah, it's starting to move from LED 38 into micro.

36:05.600 --> 36:07.600
I don't know how you do it.

36:07.600 --> 36:10.600
I am not personally involved with that student.

36:10.600 --> 36:12.600
So I don't know exactly who he is doing it.

36:12.600 --> 36:15.600
But we know that that is in the works.

36:15.600 --> 36:19.600
So it will be coming shortly.

36:19.600 --> 36:22.600
Also maybe I can step in here as a teacher.

36:22.600 --> 36:24.600
Yeah.

36:24.600 --> 36:26.600
Is the other microphone still there?

36:26.600 --> 36:29.600
Yes.

36:29.600 --> 36:34.600
So it's a question we often get when we show this.

36:34.600 --> 36:36.600
Is it boring for the kids only text?

36:36.600 --> 36:40.600
And that is exactly what I thought before I was teaching with it.

36:40.600 --> 36:44.600
But I wanted to teach them anyway because I wanted to do pie bricks with them.

36:44.600 --> 36:46.600
Lego robots with Python.

36:46.600 --> 36:48.600
So I needed to learn in Python first.

36:48.600 --> 36:51.600
So I thought maybe HEDI is the way to go then.

36:51.600 --> 36:55.600
And then I found out that in the classroom I teach nine and ten year olds.

36:55.600 --> 37:00.600
I actually enjoy doing these text things over and over and over and over again.

37:00.600 --> 37:07.600
And also at the end of my lessons I always have the portion that they can show their work to me.

37:07.600 --> 37:12.600
And often six or seven kids want to show exactly the same things.

37:12.600 --> 37:16.600
And they're still proud of it even if the ones ahead of them are exactly the same.

37:16.600 --> 37:20.600
So for kids it isn't as boring as I thought it would be.

37:20.600 --> 37:23.600
And also the turtle they love obviously.

37:23.600 --> 37:30.600
I'm not saying it is boring but maybe HEDI could be an alternative for a system like you're doing.

37:30.600 --> 37:33.600
Because programming is impossible.

37:33.600 --> 37:42.600
If you could do similar things but using a simple language that would be very useful for the kids.

37:42.600 --> 37:44.600
That's my idea.

37:44.600 --> 37:48.600
Because I have a kid and I'm facing this problem with her.

37:48.600 --> 37:55.600
You can go two ways there I guess because you can use the micro blocks that Peter can tell you everything about.

37:55.600 --> 37:59.600
And also the micro bits for instance.

37:59.600 --> 38:02.600
They have their own Python in their own websites.

38:02.600 --> 38:07.600
If you go to python.microbit.org I think then you can do Python as well.

38:07.600 --> 38:10.600
But there you do have the full syntax and stuff.

38:10.600 --> 38:15.600
So if they know all the concepts and the syntax before diving into that it's probably more successful.

38:16.600 --> 38:19.600
And there is somebody working on that.

38:19.600 --> 38:30.600
Yeah I think the idea with the micro bits within HEDI is that you can do a print and then it will come on the pixel screen on the micro bit for instance.

38:30.600 --> 38:32.600
Yeah probably the way to go is to...

38:32.600 --> 38:43.600
Probably is that what we do often when we do these connections to Python libraries is we have the HEDI code and it will get translated to Python.

38:43.600 --> 38:46.600
And it will probably be Python brick.

38:46.600 --> 38:50.600
And it will be executed.

38:50.600 --> 38:52.600
Any other questions?

38:52.600 --> 38:53.600
Yes.

38:53.600 --> 38:54.600
Very nice presentation.

38:54.600 --> 38:55.600
Thank you.

38:55.600 --> 39:01.600
How much does the children spend from level one to level 18 usually?

39:01.600 --> 39:03.600
How long did it take to get from level one?

39:03.600 --> 39:07.600
It does depend on age and prior knowledge obviously.

39:07.600 --> 39:14.600
At the nine year olds I teach I have them an hour a week and I do two or three weeks for one level.

39:14.600 --> 39:21.600
But the quicker kids could do way quicker than that but I want everybody to come along so I take it slowly.

39:21.600 --> 39:24.600
And the second question is is there an offline version?

39:24.600 --> 39:25.600
No.

39:25.600 --> 39:27.600
There is no offline version of HEDI.

39:27.600 --> 39:31.600
To use HEDI you need to be connected to the internet.

39:31.600 --> 39:32.600
Okay.

39:32.600 --> 39:37.600
Because I'm also a teacher and I have problems in bigger rooms with many children.

39:37.600 --> 39:40.600
The Wi-Fi is terrible.

39:40.600 --> 39:41.600
Yeah.

39:41.600 --> 39:43.600
Yeah just check the GitHub.

39:43.600 --> 39:45.600
You have an offline version.

39:45.600 --> 39:46.600
It's already a works.

39:46.600 --> 39:52.600
Yeah there is an offline version but this was like a person who took it as a personal project.

39:52.600 --> 39:59.600
So it doesn't work very well and it's not updated to the latest version of HEDI.

39:59.600 --> 40:09.600
Because you are using parcel generators so every time you change the set of keywords you have from

40:09.600 --> 40:15.600
Python every time you update you have to regenerate the parcel.

40:15.600 --> 40:21.600
Is this a real programming language or just a transpilation?

40:21.600 --> 40:25.600
You have a set of keywords and then it's Python.

40:25.600 --> 40:29.600
So you execute it there and you get the result and show it in the screen.

40:29.600 --> 40:30.600
Yeah.

40:30.600 --> 40:33.600
So what we do is we cache the parsers.

40:33.600 --> 40:38.600
So we have the grammars and we generate the parsers using lark.

40:38.600 --> 40:43.600
And this is like a Python object and we cache that Python object in the server.

40:43.600 --> 40:52.600
So when the user for example someone from the common used languages tried to use that they

40:52.600 --> 40:56.600
didn't have to wait and it would not overload the server.

40:56.600 --> 41:06.600
But if you are changing to a lesser used languages, yeah we will generate the grammar for that level.

41:06.600 --> 41:11.600
The total grammar and then generate the parcel and that will be in the memory.

41:11.600 --> 41:16.600
Is it automatic or do you have to rebuild the project?

41:16.600 --> 41:18.600
No this is all automatic.

41:18.600 --> 41:25.600
Lark takes the grammar file and automatically from the server.

41:25.600 --> 41:31.600
So we have the Spanish grammar, the Arabic grammar, the English grammar all of them in the server.

41:31.600 --> 41:36.600
But you have to change the grammar file of lark?

41:36.600 --> 41:38.600
Yes we have of course.

41:38.600 --> 41:39.600
When we...

41:39.600 --> 41:40.600
Did you build?

41:40.600 --> 41:42.600
Yes when we build.

41:42.600 --> 41:45.600
So you will have the new version of the parcel.

41:45.600 --> 41:46.600
Of the parcel, yeah.

41:46.600 --> 41:48.600
And do you cover...

41:48.600 --> 41:51.600
I think you cover just like the...

41:51.600 --> 41:54.600
Let's say the...

41:54.600 --> 41:59.600
Let's print some basic keywords.

41:59.600 --> 42:05.600
But if it is about advanced algorithm it's not part of the thing.

42:05.600 --> 42:07.600
It is a full premise.

42:07.600 --> 42:11.600
At level 7 you already have repeat and conditionals.

42:11.600 --> 42:15.600
So you can do some somewhat complex algorithms.

42:15.600 --> 42:19.600
Of course you don't have interface to archives or anything.

42:19.600 --> 42:24.600
So you are limited in what you can do for the interface to the outside.

42:24.600 --> 42:28.600
But it's a fully functional programming language.

42:28.600 --> 42:30.600
But there is still a subset of Python.

42:30.600 --> 42:32.600
There is a subset of Python in the end, yeah.

42:32.600 --> 42:33.600
Yeah, of course.

42:33.600 --> 42:34.600
It's just a subset.

42:34.600 --> 42:39.600
And for example you said from level 1 to level 18 let's take Arabic.

42:39.600 --> 42:42.600
At the beginning you will start learning in...

42:42.600 --> 42:45.600
The kid will start learning in Arabic, you know what I mean?

42:45.600 --> 42:46.600
Yeah.

42:48.600 --> 42:50.600
In level 18 it's still Arabic.

42:50.600 --> 42:51.600
No more than Arabic.

42:51.600 --> 42:57.600
But later you have to switch to Python to write a fully correct,

42:57.600 --> 43:02.600
a scientifically correct program.

43:02.600 --> 43:04.600
How do you do that?

43:04.600 --> 43:12.600
So that transition we haven't yet gotten to the point of designing content for that transition.

43:12.600 --> 43:16.600
So you end up in level 18 programming in Python in your own language.

43:16.600 --> 43:24.600
So then it is up to the teacher or the student to then learn Python using the English keywords.

43:24.600 --> 43:28.600
But you already have some part of the syntax and understand how some of it works.

43:28.600 --> 43:34.600
So what they have to do is it's a little bit less hard than in the first lesson in the beginning.

43:35.600 --> 43:42.600
And also obviously we're hoping that other programming languages will pick up on the whole multilingual thing

43:42.600 --> 43:48.600
and do maybe Arabic versions of Python for you, for the real Python thing.

43:48.600 --> 43:50.600
It's a long way to go though.

43:50.600 --> 43:55.600
So still I think for people not in the English language part of the world

43:55.600 --> 44:01.600
it's hard to get into programming in almost all languages based on English.

44:01.600 --> 44:04.600
So we're hoping to help.

44:04.600 --> 44:07.600
The other languages is not just about the language itself.

44:07.600 --> 44:08.600
No.

44:08.600 --> 44:10.600
It's about the computational thing we have.

44:10.600 --> 44:11.600
Yeah, absolutely.

44:11.600 --> 44:14.600
Everything is built in English, all the meanings and all that.

44:14.600 --> 44:15.600
Yeah.

44:15.600 --> 44:17.600
It is designed for professionals.

44:17.600 --> 44:24.600
It's easy to have an RTL algorithm.

44:24.600 --> 44:28.600
I'm not that sufficient always.

44:28.600 --> 44:38.600
There are a lot of problems to create something in a language other than English or whatever

44:38.600 --> 44:43.600
from the left to right.

44:43.600 --> 44:48.600
But when you go to that part you would always face problems even for the smallest.

44:48.600 --> 44:54.600
Yeah, and that's why Hedy is trying to do it for right to left as well.

44:54.600 --> 44:59.600
So when you're learning to code you can learn the concepts of doing loops and variables

44:59.600 --> 45:04.600
and all those concepts that are most of us could probably dream about.

45:04.600 --> 45:08.600
But kids it's really hard to learn and new people to coding as well.

45:08.600 --> 45:15.600
You can learn the concepts without learning the Latin alphabet or having to switch your

45:15.600 --> 45:20.600
keyboard because you want your output to be an Arabic, probably if you're an Arabic.

45:20.600 --> 45:25.600
And you can't type Latin and Arabic on the same keyboard.

45:25.600 --> 45:33.600
So we try to make it so that you can learn programming apart from learning English and

45:33.600 --> 45:34.600
the rest of it.

45:34.600 --> 45:35.600
Yeah.

45:35.600 --> 45:36.600
You have a question?

45:36.600 --> 45:41.600
Can we use the turtle library?

45:41.600 --> 45:44.600
Yes, we have embedded turtle functionality.

45:44.600 --> 45:46.600
It's not the complete library I think.

45:46.600 --> 45:47.600
No.

45:47.600 --> 45:51.600
I don't think you can do fills at the moment but you can do the turtle and colors and stuff.

45:51.600 --> 45:52.600
Yeah.

45:52.600 --> 45:53.600
Yes?

45:53.600 --> 45:56.600
You can do inputs in the keyboard.

45:56.600 --> 46:01.600
You can do the students can do input, output in the screen.

46:01.600 --> 46:03.600
Move the students from the screen object.

46:03.600 --> 46:04.600
No.

46:04.600 --> 46:05.600
No.

46:05.600 --> 46:13.600
No, there is no long term storage.

46:13.600 --> 46:17.600
So you can only do the output is to the output screen.

46:17.600 --> 46:22.600
So open it's printing, asking for input is directly from the keyboard, from the user.

46:22.600 --> 46:26.600
So there is no connection to files.

46:26.600 --> 46:29.600
No pixels as well.

46:29.600 --> 46:35.600
You can have the output read aloud by the building text to speech thing.

46:35.600 --> 46:38.600
And you can also download the turtle drawings.

46:38.600 --> 46:41.600
That's the only thing you can download.

46:41.600 --> 46:42.600
Yes?

46:42.600 --> 46:47.600
Why did you choose to use Lex and Nap?

46:47.600 --> 46:52.600
Not another modern part.

46:52.600 --> 46:54.600
Oh, it's not.

46:54.600 --> 46:56.600
It's called laser.

46:56.600 --> 47:00.600
No, it's from, it's not Jack.

47:00.600 --> 47:03.600
Larek is a Python library.

47:03.600 --> 47:08.600
And the other one is from code, the part of the code mirror which is in editor.

47:08.600 --> 47:13.600
So laser is purposely built to work with that code editor.

47:13.600 --> 47:16.600
So we're not using Jack.

47:16.600 --> 47:17.600
No.

47:17.600 --> 47:22.600
So it's a little bit more modern than those.

47:22.600 --> 47:23.600
Yes?

47:23.600 --> 47:26.600
Yeah, I need to follow up with the offline question.

47:26.600 --> 47:28.600
Can you self-host it?

47:28.600 --> 47:30.600
You want to run it locally?

47:30.600 --> 47:32.600
Yeah, you can self-host it.

47:32.600 --> 47:38.600
Okay, and another thing, yeah, it's really nice this approach to incrementally teach kids program.

47:38.600 --> 47:47.600
Is it also an approach to incrementally at the same time, teach the kids to read technical documents?

47:47.600 --> 47:51.600
Because at the end they're going to face this challenge of reading technical documents.

47:51.600 --> 47:57.600
So if you could teach them to do it on the ground, then there are...

47:57.600 --> 48:08.600
So our exercises and adventures are very much tailored to be, you know, fun and tailored for kids around, you know, 12, 13.

48:08.600 --> 48:11.600
So we don't teach them to read complex stuff.

48:11.600 --> 48:17.600
It's more like we want them to understand the programming aspect of it before moving on to other endeavors.

48:17.600 --> 48:23.600
Yeah, of course, but incrementally teach how to approach the things of information.

48:23.600 --> 48:26.600
No, it's the same approach across the levels.

48:26.600 --> 48:28.600
That's a good point, though.

48:28.600 --> 48:29.600
Yeah.

48:29.600 --> 48:36.600
Because the question that they ask about the warnings, I suppose that if you're a level one, you get a simple warning,

48:36.600 --> 48:43.600
but when you're a level 17, you get that more technical warning message, for example.

48:43.600 --> 48:53.600
So the error messages change a bit because we are adding more complexity to the language.

48:53.600 --> 49:00.600
So the error messages do get a little bit more complex, but they want that, for example, if you make an error in level one,

49:00.600 --> 49:04.600
that is the same as in level seven, it will be the same error message.

49:04.600 --> 49:13.600
I think it would be a great opportunity for students working on the project or anybody working on the project to help on,

49:13.600 --> 49:26.600
say, graduating from Haiti to real world Python and introduce a constant just like that and also more concepts such as using a code editor,

49:26.600 --> 49:34.600
instead of doing it on a web page, stuff like that, could be a level 18 or level 19 or something, extension.

49:34.600 --> 49:37.600
The Haiti project is only two or three years old.

49:37.600 --> 49:45.600
Yeah, we are very fast moving still with new features and stuff, like the music notes that are in there for about a week

49:45.600 --> 49:49.600
and only available in English because the translators haven't come round to translating it yet.

49:49.600 --> 49:53.600
So what's not now maybe next year, you never know.

49:53.600 --> 49:59.600
Yeah, you are very much welcome to come join us in our meetings because we have public meetings.

49:59.600 --> 50:06.600
We put them in the Discord so you can come join us and give us this idea so we can begin working on them and consider them.

50:06.600 --> 50:08.600
Yes?

50:08.600 --> 50:16.600
Can you talk about at the beginning as a preliminary exercise about typewriting?

50:16.600 --> 50:23.600
Kids do not even know how to do an app case.

50:23.600 --> 50:25.600
Yeah.

50:25.600 --> 50:27.600
App case later.

50:27.600 --> 50:31.600
Just to help them understand how to do that.

50:31.600 --> 50:33.600
Shall I answer that?

50:33.600 --> 50:40.600
There's not anything in there particularly in Haiti, but as a teacher, do that bit before I start them on Haiti.

50:40.600 --> 50:45.600
So I teach them how to make a password, why it's so important to have a password and keep a secret, stuff like that,

50:45.600 --> 50:53.600
and how to type your name with capital letters and accent letters if we have them a lot in the Netherlands.

50:53.600 --> 51:02.600
So I do that before I start them off in Haiti, but not for too long because once they are in, they are really eager to learn that kind of stuff

51:02.600 --> 51:04.600
because they really, really need it.

51:04.600 --> 51:08.600
And kids want to learn the stuff they need to do what they want.

51:08.600 --> 51:17.600
So if they need to type the quotation marks, they'll just ask me or the person next to them,

51:17.600 --> 51:20.600
and within 10 minutes everybody knows how to do it.

51:20.600 --> 51:23.600
And they don't forget because they try it, they have to use it all the time.

51:23.600 --> 51:25.600
So it works both ways I guess.

51:25.600 --> 51:28.600
You have your finger for a while.

51:28.600 --> 51:34.600
I can see how it's analogous to learn to read, to write, to learn.

51:34.600 --> 51:37.600
But what happens after level 18?

51:37.600 --> 51:41.600
Have you done any studies to see how impact what it is?

51:41.600 --> 51:48.600
Here you subjected to your learning from, as I understand it, from stage 1 to 18 in any of those four languages,

51:48.600 --> 51:54.600
but then to progress to, I don't know, hopefully your professional development,

51:54.600 --> 51:57.600
suddenly you have to learn everything else that you haven't learned,

51:57.600 --> 52:00.600
and you have to learn different languages and so on.

52:00.600 --> 52:07.600
So how useful it is beyond teaching, programming, and Haiti?

52:07.600 --> 52:15.600
So when you finish level 18, you already know, you know, Haiti in your language,

52:15.600 --> 52:20.600
or Python, you know, because it's level 18, but you already know the programming concepts,

52:20.600 --> 52:23.600
which is the important thing that we are trying to teach,

52:23.600 --> 52:29.600
because we are not trying to teach the syntax for that, because the syntax will change with every programming language.

52:29.600 --> 52:34.600
So we want the kids to know what it is, what is a loop, what is a conditional.

52:34.600 --> 52:39.600
So if they move on from Haiti to, you know, Python, or some other language that is English based,

52:39.600 --> 52:46.600
it will help them a great deal, because they already know the concepts behind those, behind that syntax.

52:46.600 --> 52:49.600
So the transition is easier.

52:49.600 --> 52:52.600
It's easier, but is it easier now?

52:52.600 --> 52:57.600
Julia, do you know if Filina did any research on that?

52:57.600 --> 53:00.600
There has been some research on this, yes.

53:00.600 --> 53:06.600
I do know that it's still, like, going from a level in Haiti to the next level is a smaller step,

53:06.600 --> 53:11.600
than going from level 18 to real world Python.

53:11.600 --> 53:17.600
So, yeah, they are still thinking about how can we make this a smaller step,

53:17.600 --> 53:24.600
so that it really feels like going from Haiti to Python is just a smaller step as between the levels.

53:24.600 --> 53:32.600
But it does help a lot, of course, because if you have no programming experience and you come through Haiti,

53:32.600 --> 53:36.600
then it's really smaller to go to Python than if you go to Python without anything in between.

53:36.600 --> 53:39.600
So, what I'm asking, I'm not questioning whether it's easier,

53:39.600 --> 53:44.600
or I'm asking if there is any evidence that it's easier enough for people to make the transition.

53:44.600 --> 53:46.600
Do you know?

53:46.600 --> 53:48.600
Do they make the transition or do they...

53:48.600 --> 53:53.600
Yeah, I do know that at the school actually, Filina, aside from being a researcher,

53:53.600 --> 53:58.600
is also a high school teacher, so one day she's teaching in the Netherlands,

53:58.600 --> 54:02.600
mostly the 12 year olds around that age,

54:02.600 --> 54:09.600
and she has students in her classroom of 12 year olds who go to Python after being done with Haiti.

54:09.600 --> 54:15.600
So, she does use it herself, and I've been observing in that class myself.

54:15.600 --> 54:19.600
Yeah, and it's working fine.

54:19.600 --> 54:27.600
Yeah, so I know, I mean, it's very anecdotal, so I don't know about big study with lots of kids,

54:27.600 --> 54:34.600
but I have seen a classroom where there were 12 year olds who switched from Haiti to Python and were enjoying themselves.

54:34.600 --> 54:38.600
So, yeah, it is possible at least.

54:38.600 --> 54:45.600
Also, if you'd like to hear Filina's answer, I encourage you to come into the Discord and ask the question there as well.

54:45.600 --> 54:49.600
She's on there every day, all day, so it seems to me anyway.

54:49.600 --> 54:55.600
So, she'll definitely answer the question if she's done any research,

54:55.600 --> 55:01.600
or maybe even put a student on it to research it, because it's a really, really good question.

55:01.600 --> 55:06.600
I know there is a paper about multilingual programming that she published a while back,

55:06.600 --> 55:12.600
but I don't think that it's specifically about Haiti, much more about the concept.

55:12.600 --> 55:17.600
So, I don't know if that will answer your question, that paper.

55:17.600 --> 55:18.600
Yes?

55:18.600 --> 55:27.600
Related to the previous question, is there an option in Haiti to show the program you wrote in the actual Python to make that process?

55:27.600 --> 55:28.600
No.

55:28.600 --> 55:32.600
There is no built-in functionality for that in the interface,

55:32.600 --> 55:41.600
but if you know a little bit your way in the browser, you can actually see what was transpired.

55:41.600 --> 55:43.600
Let me put this back in English.

55:43.600 --> 55:51.600
And maybe to add to this, I don't know if it's clear, but if you have code in maybe level 18, you can just copy-paste it into Python.

55:51.600 --> 55:53.600
It's actually a code.

55:53.600 --> 55:57.600
There's still a program about the English from Morocco.

55:57.600 --> 55:59.600
Well, if it's in English?

55:59.600 --> 56:00.600
Yeah.

56:00.600 --> 56:07.600
Assume that your program in Haiti in English, then you can copy-paste your level 18 code into Python, and then it's exactly the same.

56:07.600 --> 56:11.600
So, level 18, Haiti in English is actually Python same.

56:11.600 --> 56:13.600
It's a subset of Python.

56:13.600 --> 56:16.600
Remember that you can also mix in English and your own language.

56:16.600 --> 56:19.600
So, you can also do that transition within Haiti.

56:19.600 --> 56:25.600
So, you can mix English keywords and keywords in your own language right there in the editor.

56:25.600 --> 56:29.600
So, it makes the transition a little bit easier.

56:29.600 --> 56:30.600
Yes?

56:30.600 --> 56:32.600
How do you handle the zero word?

56:32.600 --> 56:35.600
How do I handle what?

56:35.600 --> 56:39.600
Zero word, variable that could not have some names.

56:39.600 --> 56:42.600
Like, you cannot have a variable called print.

56:42.600 --> 56:43.600
Ah, okay.

56:43.600 --> 56:47.600
When you translate it from one language to another one, the variable change is the zero word.

56:47.600 --> 56:51.600
Yeah, that depends on the specific variables.

56:51.600 --> 56:56.600
So, there are some keywords that we can parse in context.

56:56.600 --> 57:03.600
If your name or variable, for example, I don't know, color I think once you can make it.

57:03.600 --> 57:04.600
So, it depends.

57:04.600 --> 57:11.600
If it's a variable that you cannot assign, it will tell you that you are misusing the command or something like that.

57:11.600 --> 57:13.600
Otherwise, it will work normally.

