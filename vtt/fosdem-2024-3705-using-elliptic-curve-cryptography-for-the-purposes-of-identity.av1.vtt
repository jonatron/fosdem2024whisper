WEBVTT

00:00.000 --> 00:12.800
Hi everybody, next talk is about to start. We'll have Yamo Makinbach talking about using

00:12.800 --> 00:18.920
elliptic curve cryptography for the purposes of online identity.

00:18.920 --> 00:24.600
Thank you. Shall I start the buzzer?

00:25.600 --> 00:29.600
Shall I? And we're off apparently.

00:29.600 --> 00:37.600
Yeah. Alright, welcome. So I'm Yamo. I work on this project called Keogh's side, which is about online identity.

00:37.600 --> 00:45.600
And we're going to talk about it in a minute. First, because of the last previous talks, I wanted to specify the skill.

00:45.600 --> 00:53.600
There will be no 5 terabyte database here or serialization of billions of nodes, which is going to make a little script.

00:53.600 --> 01:01.600
It's a bit of a Bob Ross talk, I guess, which is going on a journey together and have fun, discover.

01:01.600 --> 01:12.600
And before I really start, we're going to try something experimental. We're going to try a little interactive demo at the end.

01:12.600 --> 01:18.600
We're going to write the script, but you're going to verify if the script that we're going to write actually works.

01:18.600 --> 01:27.600
So for this, for whoever wants to participate, you should consider downloading the Keogh's mobile app.

01:27.600 --> 01:34.600
It's available on these locations. You can just get the APK from the CodeBerg repo.

01:34.600 --> 01:40.600
Alright, let's get started. So if someone makes a claim, how do we verify that?

01:40.600 --> 01:44.600
Well, quite simply, with a proof. What do I mean with that?

01:44.600 --> 01:50.600
So for example, if Alice lost her luggage and then Bob found it very conveniently, and then Alice says it's hers,

01:50.600 --> 02:01.600
then Bob asked for the proof, of course, because, you know, and then Alice fiddles with the little dials and unlocks the luggage,

02:01.600 --> 02:08.600
and then she verified that the claim was indeed true, that it is indeed her luggage.

02:08.600 --> 02:13.600
So now we want to know, is this also true over the internet? Can we do this over the internet?

02:13.600 --> 02:24.600
Well, yes, we can. We can claim things over the internet, but humans travel rather poorly through ethernet cables,

02:24.600 --> 02:29.600
so we need to find a way to connect Alice and Bob in a different way, so that Alice can make her claim,

02:29.600 --> 02:34.600
and Bob can verify that claim, each in their own space and time.

02:34.600 --> 02:39.600
And so for this, we're going to use cryptographic signatures.

02:39.600 --> 02:45.600
So, yeah, we could talk for a long time about cryptographic signatures.

02:45.600 --> 02:54.600
For the purpose of this talk, let's just... the important stuff is basically just like a real signature, but digital,

02:54.600 --> 03:02.600
but the big difference, I guess, is that it's really difficult to forge, so that's good.

03:03.600 --> 03:08.600
And in short, we have a secret key, which we will use to sign documents, text documents,

03:08.600 --> 03:13.600
with a public key that we will use to verify those signatures, combine those two keys, and you have a key pair,

03:13.600 --> 03:18.600
and each key pair is identified by a unique fingerprint.

03:18.600 --> 03:23.600
All right. So let's try and work out this process then.

03:23.600 --> 03:31.600
So let's say that I will write this text document, which just says that this is my account on the Fediverse, on Macedon,

03:31.600 --> 03:41.600
now I will sign it with a key, which has this conveniently fingerprint, which starts with very familiar letters.

03:41.600 --> 03:47.600
And now the signature itself is just zeros and ones. We're not going to worry about that.

03:47.600 --> 03:53.600
So now I will give this text document, my claim, together with the signature to my friend,

03:53.600 --> 03:57.600
and my friend will use those two pieces of data.

03:57.600 --> 04:02.600
They will first verify that indeed the signature corresponds to this text document,

04:02.600 --> 04:08.600
and once that is done, they're going to my actual Fediverse account, and then they're going to read in the bio,

04:08.600 --> 04:13.600
oh, this person indeed wrote in their bio that they have this key.

04:13.600 --> 04:20.600
So that is the proof with which I verify my claim, and that it is indeed my account.

04:20.600 --> 04:28.600
So now we're going to do that whole process. We're going to try to create an online identity with just 100 lines of rust.

04:28.600 --> 04:36.600
I did need five dependencies. I tried to minimize it, but without these, it will be a lot more than 100 lines of code.

04:36.600 --> 04:39.600
So yeah, these will be it.

04:39.600 --> 04:45.600
So we're going to generate a key. This is where the elliptic curve part comes in.

04:46.600 --> 04:57.600
Elliptic curves are a technique of creating cryptographic keys, and in this case, we're using these specifically the P256 curve,

04:57.600 --> 05:03.600
but all this just to say, yeah, we're using these two lines of code just to create an entire cryptographic key.

05:03.600 --> 05:08.600
So this includes a public key and a secret key.

05:08.600 --> 05:15.600
Now, of course, I said every key pair has a fingerprint, so that's what this code does.

05:15.600 --> 05:19.600
It looks a bit complicated. This is the most complicated part.

05:19.600 --> 05:28.600
So the most important part about this script is basically we'll just get some data from the key, we'll get some parameters from the key,

05:28.600 --> 05:33.600
and then we're going to hash it, and that is how we get the actual fingerprint.

05:33.600 --> 05:37.600
Now we're going to collect the identity data.

05:37.600 --> 05:41.600
So we're going to create what we call a profile.

05:41.600 --> 05:48.600
Just a profile is just a name, some other metadata about the person, and claims, multiple claims.

05:48.600 --> 05:52.600
So I'm just going to continue with the same example as before.

05:52.600 --> 05:56.600
I'm just going to claim that that is my account on the Internet.

05:57.600 --> 06:03.600
Now we need a way to encode all this data, because we need the text document and we need a signature.

06:03.600 --> 06:14.600
So for this, we're going to use a JSON web token, which for the purposes of this talk is just a convenient way of combining a document and a signature.

06:14.600 --> 06:18.600
We'll need three parts. We'll need a header, a payload, and a signature.

06:18.600 --> 06:21.600
So let's make each of those.

06:21.600 --> 06:30.600
Oh yeah, some quick notes. So whenever you see that are you at ID, that is just the namespace that we use for the creation of the tokens.

06:30.600 --> 06:34.600
And sometimes you will see JWS instead of JWT.

06:34.600 --> 06:40.600
Those are different, but for the purposes of this talk, we'll just consider them the same.

06:40.600 --> 06:43.600
So let's create a header.

06:43.600 --> 06:49.600
So the header is just a little bit of metadata about the key that is creating this profile.

06:49.600 --> 06:55.600
So we'll set the fingerprints and we'll set the actual key. We'll just give it.

06:55.600 --> 06:59.600
And the public key, of course, not the secret key, because that one should be secret.

06:59.600 --> 07:03.600
We'll create the payload. The payload is the actual profile itself.

07:03.600 --> 07:09.600
So we're going to say like, oh, it's the type as a profile of this token.

07:09.600 --> 07:15.600
We're going to say line 10. We're going to say like, oh, what is the name? It will be the name and the identity claims.

07:15.600 --> 07:25.600
Don't mind all the payload set claims. That's just to confuse you, because JWT also uses the term claim in a different way.

07:25.600 --> 07:27.600
Just to make it easy.

07:27.600 --> 07:32.600
Now that we have the header and we have the payload, we're going to sign the two. That's what we do here.

07:32.600 --> 07:37.600
So line three, we get our key that we built earlier, generated earlier.

07:37.600 --> 07:43.600
And in line four and five, we're going to use it to sign the payload and the header.

07:43.600 --> 07:47.600
And with that, we are done. We have our profile.

07:47.600 --> 07:51.600
So now, if you would like to copy this, write this over.

07:51.600 --> 07:57.600
Yeah, that's not convenient. So we need to do a second part. We need to do a second step.

07:57.600 --> 08:07.600
I need to get this from my computer to your phone, to your device, whatever, so that you can verify for yourself that I do indeed have that account.

08:07.600 --> 08:13.600
So we need a way to transport, I guess, documents and preferably sign it.

08:13.600 --> 08:18.600
You guess where this is going? We're going to use another JSON web token.

08:18.600 --> 08:23.600
So we're actually going to reuse the same header, because we're going to use the same key.

08:23.600 --> 08:28.600
So we'll just use the same metadata about the key.

08:28.600 --> 08:33.600
We're going to create a second payload, which will be very similar.

08:33.600 --> 08:37.600
This time, instead of being a profile, it would just be a request.

08:37.600 --> 08:42.600
And we're just going to ask the server to create this profile.

08:42.600 --> 08:48.600
And then in line 14 and 15, we're actually going to give that document that we created earlier.

08:48.600 --> 08:52.600
We're just going to give it to the server.

08:52.600 --> 09:00.600
And this second outer JSON web token, we are actually going to upload it to...

09:00.600 --> 09:11.600
Sorry, we're going to sign it first, so we'll have a similar string, a piece of data that we can actually then send to the server.

09:11.600 --> 09:17.600
So this is where we're going to send it to what we call an ASPE server that we're working on.

09:17.600 --> 09:24.600
And it's just basically a way of storing and exchanging these kinds of profiles.

09:24.600 --> 09:28.600
And yeah, that is basically it, what you need to do.

09:28.600 --> 09:34.600
Those were the lines of code that you need to actually make an entire profile, make a claim,

09:34.600 --> 09:44.600
and make it so that people could verify for themselves with their own devices, with their own methods.

09:44.600 --> 09:47.600
So yeah, it is a fun script.

09:47.600 --> 09:49.600
You can actually just try it at home.

09:49.600 --> 09:53.600
Or as I said, we could try it live on stage.

09:53.600 --> 09:56.600
That is what we're going to try right now.

09:56.600 --> 10:09.600
So I did prepare it somewhere.

10:09.600 --> 10:15.600
So you'll see that apart from some cosmetic changes, if it loads...

10:15.600 --> 10:19.600
Yeah, that's the big risk of doing this on the stage.

10:19.600 --> 10:21.600
We'll give it a second.

10:21.600 --> 10:28.600
Apart from some cosmetic changes, it is largely the same script.

10:28.600 --> 10:34.600
And you'll see that it will fit neatly within 100 lines.

10:34.600 --> 10:37.600
And it might not.

10:37.600 --> 10:45.600
We'll give it another second.

10:45.600 --> 10:48.600
And if it...

10:48.600 --> 10:52.600
Alright, well, maybe it won't do it.

10:52.600 --> 11:00.600
It would have been phenomenal, I can promise you.

11:00.600 --> 11:04.600
Alright, I'll reload it once and then...

11:04.600 --> 11:13.600
I do have a sort of a backup.

11:13.600 --> 11:18.600
Alright, it's not playing game.

11:18.600 --> 11:24.600
Alright, so let's go back to the presentation.

11:24.600 --> 11:33.600
I think it's this one.

11:33.600 --> 11:42.600
I don't... wait.

11:42.600 --> 11:45.600
I have lost the presentation.

11:45.600 --> 11:58.600
That's a different presentation.

11:58.600 --> 12:04.600
What?

12:04.600 --> 12:14.600
That was not supposed to happen.

12:14.600 --> 12:17.600
Yeah, I don't know what's happening.

12:17.600 --> 12:19.600
But basically, yeah, this would have been...

12:19.600 --> 12:22.600
We would have run scripts and we would have created a profile.

12:22.600 --> 12:28.600
And then it would have presented you with a QR code

12:28.600 --> 12:30.600
that you could have scanned on your phone.

12:30.600 --> 12:32.600
And it would actually have worked.

12:32.600 --> 12:36.600
And then you could have seen that the script would have created a profile

12:36.600 --> 12:39.600
that we built here on stage.

12:39.600 --> 12:41.600
Yeah, and just with a couple of lines of code,

12:41.600 --> 12:45.600
we can work with cryptography, we can work with identity.

12:45.600 --> 12:48.600
And, yeah, thank you very much.

12:48.600 --> 12:50.600
Thank you.

