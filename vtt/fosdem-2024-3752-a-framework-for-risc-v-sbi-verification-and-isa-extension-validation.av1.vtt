WEBVTT

00:00.000 --> 00:07.000
I'll get one more minute.

00:07.000 --> 00:08.000
Sure.

00:08.000 --> 00:11.000
You got some naked nathalus.

00:11.000 --> 00:18.000
You got sick just kind of out of the blue and then like, didn't have any.

00:18.000 --> 00:19.000
I thought it was.

00:19.000 --> 00:20.000
It was so sick like, nothing.

00:20.000 --> 00:23.000
It's sick sick or sick as it is.

00:23.000 --> 00:24.000
Yeah.

00:24.000 --> 00:25.000
I've never known.

00:25.000 --> 00:28.000
Yeah, I've got the beer induced one.

00:28.000 --> 00:34.000
I'm the last speaker and it's our hero that fills in for, you know, the.

00:34.000 --> 00:36.000
Yeah, I want to thank one or two missing.

00:36.000 --> 00:38.000
So yeah, take it away from.

00:38.000 --> 00:40.000
Yeah, thanks, Bjorn for letting me fill in.

00:40.000 --> 00:46.000
I heard I had wanted like a 15 minute session just to kind of advertise this framework because

00:46.000 --> 00:49.000
I'd like to encourage people to contribute to it.

00:49.000 --> 00:55.000
I ended up with a 30 minute or however long minutes the session is because of the cancellation.

00:55.000 --> 00:56.000
I'll have an hour.

00:56.000 --> 00:57.000
Don't worry.

00:57.000 --> 01:03.000
No, no, no, no, there's lunch and I can do it four times maybe.

01:03.000 --> 01:10.000
Anyway, so quickly just about who's standing in front of you talking.

01:10.000 --> 01:12.000
I work for Bentana.

01:12.000 --> 01:20.000
I work on Linux kernel, also KVM, open SPI and KEMU.

01:20.000 --> 01:25.000
And I'm trying to build, you know, the software system that we need for risk five.

01:25.000 --> 01:31.000
So I'm also participating in these RVI working groups and rise that we'd heard about earlier today as well.

01:31.000 --> 01:39.000
Prior to that, I worked on air 64 before risk five air 64 red hat also virtualization.

01:39.000 --> 01:43.000
So the Linux and the KVM bits KEMU as well.

01:43.000 --> 01:52.000
I've carried over into the risk five world as part of the vert stuff that I did previously.

01:52.000 --> 01:58.000
I got involved with Katie Munitess, which existed before my time because it's quite old.

01:58.000 --> 02:03.000
But I started, I wanted to use it for air 64 specifically.

02:03.000 --> 02:05.000
And so I did some ports.

02:05.000 --> 02:11.000
I'll support it to power PC and then kind of left that for others to maintain.

02:11.000 --> 02:15.000
I don't think it's getting a lot of action, but it's there.

02:15.000 --> 02:17.000
And I'm bringing it to risk five.

02:17.000 --> 02:24.000
And that's what this talk is about is the fact that we now have this tool available to us.

02:24.000 --> 02:28.000
So the outline is just Katie Munitess.

02:28.000 --> 02:32.000
First, I'll give a quick overview of the framework generally.

02:32.000 --> 02:41.000
And then it regarding risk five, the use cases I see that we could apply it to right away and also as the framework evolves.

02:41.000 --> 02:46.000
And then the the and you part is my kind of appeal for contribution.

02:46.000 --> 02:50.000
So, so as I said, Katie Munitess is actually quite old.

02:50.000 --> 02:52.000
It's as old as KVM.

02:52.000 --> 02:59.000
Avi created it shortly after his first couple of KVM commits in order to start testing.

02:59.000 --> 03:02.000
So to make sure it actually works.

03:02.000 --> 03:09.000
And then over that time, though, we've we've been expanding its targets.

03:09.000 --> 03:13.000
So now we can actually test not just with QMU as the user space is originally,

03:13.000 --> 03:18.000
but with KVM tool or you could probably put in Rust VMM or whatever you want in there.

03:18.000 --> 03:20.000
Cross VMM.

03:20.000 --> 03:24.000
I mean, with some efforts, probably it doesn't just drop in at the moment.

03:24.000 --> 03:26.000
But you can already test other hypervisors.

03:26.000 --> 03:28.000
People do that.

03:28.000 --> 03:34.000
And we can even test it on hardware now because we've added at least x86 and air 64 at this point,

03:34.000 --> 03:40.000
the ability to boot over some sort of a if you capable boot loader.

03:40.000 --> 03:46.000
So then what is this test actually that I keep talking about these KVM tests?

03:46.000 --> 03:52.000
And so they're actually like a little tiny guest kernel because that's what Avi needed for testing KVM, right?

03:52.000 --> 04:01.000
He needed to have a guest, a guest OS that would have to boot and maybe exercise some stuff that the hypervisor needed to provide for it.

04:01.000 --> 04:02.000
So that's what they are.

04:02.000 --> 04:09.000
These little guest kernels and originally, you know, kind of booted in maybe hacky ways or whatever.

04:09.000 --> 04:17.000
But over the time, we've actually tried to build the framework in a way that is easy to port and easy to maintain.

04:17.000 --> 04:24.000
And so we even have DT support in there, some limited ACPI support for this booting.

04:24.000 --> 04:34.000
Like I mentioned, we can boot with CFI protocol, which helps us to be able to do the booting over hardware directly rather than through hypervisor.

04:34.000 --> 04:44.000
And then for air 64 ARM and RISC-5, I've also taken my notes from the Linux kernels boot requirements.

04:44.000 --> 04:51.000
So, you know, particular registers need to be set in a particular way when you first jump into the kernel code.

04:51.000 --> 04:58.000
And so we follow that protocol and then it makes, you know, everything just kind of work for bootloaders that already know how to do that.

04:58.000 --> 05:03.000
Any bootloader that can boot Linux in this direct way can boot these unit tests.

05:04.000 --> 05:09.000
And so, yeah, you're in privilege mode because it's like a little kernel in kernel mode.

05:09.000 --> 05:16.000
So you can do all the things that you would do, manipulate the page tables, set up your own exception handlers,

05:16.000 --> 05:21.000
generate exceptions and make sure they do what you expected them to do, things like that.

05:21.000 --> 05:25.000
You know, you're privileged, so go nuts.

05:26.000 --> 05:35.000
So, despite the fact that we're actually writing kernel code, we don't have to make it complicated.

05:35.000 --> 05:42.000
We don't have to make it something that's hard to do or at least feel hard to do at first look.

05:42.000 --> 05:48.000
So the framework tries to allow the unit tests to be written in a C-app type of way.

05:48.000 --> 05:50.000
So you kind of look and feel that way.

05:50.000 --> 05:54.000
You've got your main function, which is actually the entry point for the test.

05:54.000 --> 06:03.000
And then we have a bunch of libc, api, ported over, not a bunch, but enough for most tests.

06:03.000 --> 06:10.000
And we are, you know, of course welcome to add as necessary, whatever kind of looks like it's needed.

06:10.000 --> 06:17.000
So all your expected ones, assert is there, which is, you know, of course one of the most important ones for a test framework.

06:17.000 --> 06:25.000
Also, with the scripting wrapped around these tests, when you execute them, at least over QMU,

06:25.000 --> 06:29.000
then when you do, when you get an assert or any sort of an unhandled exception,

06:29.000 --> 06:40.000
you actually get a back trace for all the ports in a way that support stack walking.

06:40.000 --> 06:48.000
So we have that, and then this is just a little snippet of code to show you that, you know, don't be afraid.

06:48.000 --> 06:57.000
It's just the, and very simple. See, it's just main, even environment variables can be provided to the unit tests.

06:57.000 --> 07:04.000
For that, we do a little trick where we take a text file of environment variables.

07:04.000 --> 07:09.000
So, you know, your usual key equals val, just a whole list of those.

07:09.000 --> 07:12.000
And we put them into an NDRD, so they're in RAM disk.

07:12.000 --> 07:17.000
And we can just read them out of there, and we can find it through the DDE, all that stuff, just like we're supposed to.

07:17.000 --> 07:23.000
And then we can load those environment variables into memory, and you can use them like a normal C program.

07:23.000 --> 07:30.000
So that can also be nice for passing in your expected values and whatnot for unit tests.

07:30.000 --> 07:34.000
You can also pass in expected values for the command line, of course, which is a little bit easier to do.

07:34.000 --> 07:38.000
But it's, you know, if you have too many of them, it gets kind of ugly.

07:38.000 --> 07:47.000
So, of course, you can also, for at least people who want to test on hardware, they're free to manipulate their device tree in any way they want.

07:47.000 --> 07:50.000
So they could create a special node for test cases, sure, why not.

07:50.000 --> 07:54.000
And then the unit tests would just, you know, parse that node and get all their input.

07:54.000 --> 07:58.000
However, however you want to do it.

07:58.000 --> 08:00.000
So how do you run the test?

08:00.000 --> 08:05.000
So originally, it was, you know, from the command line just for running KVM Guests.

08:05.000 --> 08:07.000
So that still, of course, works.

08:07.000 --> 08:10.000
You can just pass the test, you know, as a kernel.

08:10.000 --> 08:12.000
That's the kernel parameter to continue.

08:12.000 --> 08:18.000
Depending on which KVM user space you're using, you'll do it in some similar way.

08:18.000 --> 08:22.000
There's also some bash wrapped around all of that stuff.

08:22.000 --> 08:28.000
It allows you to run all the tests for you automatically so it can be built into CI very easily.

08:28.000 --> 08:33.000
And we do have it built into many different CI already.

08:33.000 --> 08:35.000
So we run just a single group.

08:35.000 --> 08:39.000
And then the reason is bash.

08:39.000 --> 08:48.000
I mean, some people wonder why, because it gets kind of awkward to add more advanced functionality to the test harness having to write it in bash.

08:48.000 --> 08:52.000
It was historically in bash, is probably the main reason.

08:52.000 --> 09:00.000
But then we actually had a discussion a couple of times, like should we use Python or whatever, go whatever the latest thing is these days.

09:00.000 --> 09:02.000
It's a little bit easier for the harness.

09:02.000 --> 09:07.000
And we had some pushback from people who have been using this framework quite a lot.

09:07.000 --> 09:14.000
And they like to have a very lightweight framework that they can put on an embedded, you know, busy box type thing.

09:14.000 --> 09:16.000
There's nothing there except for bash.

09:16.000 --> 09:21.000
And they didn't want to bring in libraries and everything else for something else.

09:21.000 --> 09:24.000
So bash is not that painful.

09:24.000 --> 09:26.000
We don't have that much functionality.

09:26.000 --> 09:28.000
So I don't really have a problem with it.

09:28.000 --> 09:33.000
Another thing we can do, we can build standalone tests with it.

09:33.000 --> 09:36.000
So nothing changes except make space standalone.

09:36.000 --> 09:48.000
And it'll actually wrap a lot of that bash around the binary after it converts the binary with base 64 to be embedded all into one nice text file,

09:48.000 --> 09:52.000
each text file depending on how big your test is.

09:52.000 --> 09:55.000
And you can actually just email that or send it to people.

09:55.000 --> 10:02.000
So if you build a quick and dirty test, and I'll get to talking about quick and dirty tests a little later in the talk,

10:02.000 --> 10:07.000
if you do that, like, you know, a few lines is to like prove your point that this is broken.

10:07.000 --> 10:13.000
Then maybe you just want to package it up with this make standalone thing and mail it to somebody.

10:13.000 --> 10:16.000
They can run it and see for themselves.

10:16.000 --> 10:19.000
I don't think that's used a lot.

10:19.000 --> 10:23.000
That was one of the things I invented that I thought would be useful,

10:23.000 --> 10:29.000
but not too many people have been mailing these tests or whatever.

10:29.000 --> 10:35.000
So now we know what the framework is, and this is a risk five talk, so we finally get to risk five.

10:35.000 --> 10:41.000
So we already have a use case for it.

10:42.000 --> 10:50.000
The tech PRS working group has more or less committed to using it for the SBI verification framework.

10:50.000 --> 10:55.000
So the SBI for those of you that don't know, I guess most people in this room do,

10:55.000 --> 11:01.000
is this interface between either supervisor mode and in mode, machine mode,

11:01.000 --> 11:05.000
or also between a virtual supervisor mode and hypervisor.

11:05.000 --> 11:14.000
And so we, you know, we either respect community or trying to keep that interfaces from going nuts

11:14.000 --> 11:15.000
in all sorts of different directions.

11:15.000 --> 11:18.000
We have a standard for it, the SBI spec.

11:18.000 --> 11:22.000
And so we write when we want new functionality that we need,

11:22.000 --> 11:28.000
the supervisor needs to ask for some service or some information from in mode

11:28.000 --> 11:32.000
or we want to emulate that in mode for the guest.

11:32.000 --> 11:35.000
Then we need to provide this interface, right, this SBI.

11:35.000 --> 11:41.000
And so as we add these functions to the spec, we explain how in the spec it's supposed to work,

11:41.000 --> 11:43.000
the parameters, etc., like usual.

11:43.000 --> 11:48.000
Then it would be nice to be able to have a verification framework for that

11:48.000 --> 11:53.000
so you also say, okay, you've written a nice, you know, addition to our spec,

11:53.000 --> 11:57.000
a new extension, SBI extension, please show us, you know, how it's supposed to work.

11:58.000 --> 12:03.000
And you could do that, and we do do that with Linux proof of concept codes.

12:03.000 --> 12:14.000
We always submit patches for Linux and also for open SBI or Rust SBI that show that, you know, it works, right?

12:14.000 --> 12:15.000
We prove our extensions.

12:15.000 --> 12:21.000
But with the verification framework, we can actually avoid having to any,

12:22.000 --> 12:30.000
focus on any specific projects or people having to involve an entire Linux kernel for the test.

12:30.000 --> 12:34.000
They can just do this quick and, this quick small thing here.

12:34.000 --> 12:37.000
And so that's the idea is to try to build all those function tests in there

12:37.000 --> 12:42.000
and have regression tests for that as well for everybody's SBI implementations.

12:42.000 --> 12:48.000
So we can test already, right now you can start writing tests for open SBI.

12:48.000 --> 12:51.000
It's quite easy to run over QMU, you don't need hardware for that.

12:51.000 --> 12:56.000
You can actually, with QMU, you can swap out open SBI and drop in Rust SBI.

12:56.000 --> 12:57.000
That also works over QMU.

12:57.000 --> 13:01.000
Probably other SBI implementations can be run from QMU.

13:01.000 --> 13:06.000
Of course KVM is a SBI implementation because it emulates, so you can already test that as well.

13:08.000 --> 13:12.000
That's one use case already, which could be started now.

13:12.000 --> 13:17.000
So, we have a CPU validation as people actually have CPUs to validate.

13:17.000 --> 13:23.000
And when we get the EFI support merged.

13:23.000 --> 13:24.000
So I haven't done that yet.

13:24.000 --> 13:26.000
I'll come to that too, like with current status.

13:26.000 --> 13:32.000
But as we, when we get that done, then you'll be able to just put these tests directly,

13:32.000 --> 13:36.000
boot them from U-boot or CBEFI and you'll be able to do some validation tests.

13:36.000 --> 13:42.000
So ARM does that, I'm quite aware, because they've been involved with KVM unit tests for a long time now.

13:42.000 --> 13:51.000
They're doing their memory model, litmus testing, they use KVM unit tests using the EFI support to go straight on hardware and run that.

13:51.000 --> 14:05.000
So microbenchmarks are another great use case for KVM unit tests because while you can always find a way to create like some sort of a privilege level test where you write a kernel module in Linux

14:05.000 --> 14:16.000
and then you like put it, I used to do that a lot, just like in the init of the module, I would have my whole test case and then I'd, you know, I just mod probe it and now it runs my test, right, that privilege.

14:16.000 --> 14:21.000
But, which is kind of awkward to begin with, it's not a real test framework.

14:21.000 --> 14:25.000
But it also requires Linux to be booted up and working and everything.

14:25.000 --> 14:30.000
And it's not very good for a microbenchmark because you've got Linux doing whatever Linux wants to do.

14:30.000 --> 14:34.000
And so you're not really isolating your instruction sequence.

14:34.000 --> 14:37.000
But with KVM unit tests, you know, the world is yours.

14:37.000 --> 14:40.000
The unit test is running there and nothing else.

14:40.000 --> 14:42.000
So it's actually quite good for that.

14:42.000 --> 14:47.000
When you get your timing numbers from that, they're pretty reasonable to trust.

14:47.000 --> 14:49.000
Question.

14:49.000 --> 14:50.000
Yeah.

14:50.000 --> 14:53.000
So in this diagram, what does the test say?

14:53.000 --> 14:54.000
Ah, yeah.

14:54.000 --> 14:57.000
So the test is either this guest kernel or actually the host kernel.

14:57.000 --> 14:59.000
It's one of those two.

14:59.000 --> 15:03.000
So if it's bare metal, if you just launch it from the boot loader, you'll be the host.

15:03.000 --> 15:06.000
That support isn't in the RISC-5 port yet.

15:06.000 --> 15:09.000
But you can already do the guest kernel version.

15:09.000 --> 15:14.000
Okay.

15:14.000 --> 15:20.000
So, yeah, the tests are easier to write as we already talked about.

15:20.000 --> 15:22.000
And the quick and dirty ones are even easier.

15:22.000 --> 15:25.000
I do, I do the, so, so I do this a lot.

15:25.000 --> 15:30.000
I actually, because I'm familiar with the test suite, I use it for a tool while I'm working on something else.

15:30.000 --> 15:32.000
Like something for Linux or whatever.

15:32.000 --> 15:35.000
I use it just for my own testing purposes.

15:35.000 --> 15:40.000
And then it's kind of ugly and it doesn't really look like people would be maybe interested anyway.

15:40.000 --> 15:42.000
It's too, like, one-off.

15:42.000 --> 15:44.000
And so I just kind of toss it.

15:44.000 --> 15:48.000
Or maybe I keep it for myself to look at later, but it's not shared,

15:48.000 --> 15:51.000
which isn't really a very good open source approach.

15:51.000 --> 16:01.000
So I've actually been thinking about that, that for these types of tests that don't really necessarily fit what we consider the main test suite,

16:01.000 --> 16:03.000
maybe we should have a separate branch though for them.

16:03.000 --> 16:05.000
So we still collect the code.

16:05.000 --> 16:07.000
And I kind of did that already.

16:07.000 --> 16:10.000
I recently wanted to test TCG.

16:10.000 --> 16:20.000
So I kind of forgot to mention that for CPU validation, we already can, of course, test our, you know, emulators and our other models to see if they're correct.

16:20.000 --> 16:27.000
So TCG is, you know, QME's emulation framework.

16:27.000 --> 16:38.000
So I wanted to make sure that the MMU model that it had was able to handle the access to dirty bits correctly,

16:38.000 --> 16:41.000
because there's actually a couple different ways to do it in spec.

16:41.000 --> 16:44.000
And QME had picked one by default.

16:44.000 --> 16:49.000
And then a couple extensions came along that actually allow you to decide which one you're going to use.

16:49.000 --> 16:55.000
And a new bit was added, which is actually going to require another SPI call.

16:55.000 --> 16:57.000
So we'll go back to the SPI verification for that.

16:57.000 --> 17:01.000
Anyway, kind of, you know, balloons as we know.

17:01.000 --> 17:05.000
And I wanted to make sure it was actually working the way it's supposed to right now.

17:05.000 --> 17:08.000
So I wrote a test case in KVMunit tests.

17:08.000 --> 17:14.000
And then I wasn't sure, okay, this is maybe not the one that we're going to merge because it's just for this one-off test.

17:14.000 --> 17:22.000
But I've already decided maybe at least goes to a branch that we should keep track of these things.

17:23.000 --> 17:29.000
And then, you know, and the other reason why posting them, even if they don't get merged in the end,

17:29.000 --> 17:33.000
or at least not to the main branch, but to the side branch,

17:33.000 --> 17:41.000
is because when people do post-tests, sometimes they reinvent something they need inside the test case to get the job done.

17:41.000 --> 17:45.000
And that looks like something, oh, we should probably pull that into the common code, right?

17:45.000 --> 17:50.000
We can let the framework evolve better the more people who contribute.

17:50.000 --> 17:52.000
And there's no one and done.

17:52.000 --> 17:55.000
Usually I write something, some quick and dirty test, and then like three weeks later,

17:55.000 --> 18:00.000
I'm like, oh, yeah, I actually need that again because something similar is broken or whatever.

18:03.000 --> 18:08.000
Yeah. I think I talked about everything on this slide.

18:08.000 --> 18:11.000
Those are some links.

18:11.000 --> 18:14.000
And, yeah.

18:14.000 --> 18:18.000
So one thing I was going to do, because I have way more time than I need,

18:18.000 --> 18:24.000
but I was just going to show that test that I just got done talking about.

18:24.000 --> 18:29.000
So it's a little bit more complicated than that little snip that I shoved in the slide.

18:29.000 --> 18:34.000
So you can see that it's still not that complicated, right?

18:34.000 --> 18:39.000
Oh, yeah, sorry, everyone can try to brighten the screen somehow, maybe.

18:39.000 --> 18:42.000
Yeah.

18:42.000 --> 18:46.000
I don't know if I can turn off the light. Just smash it with a hammer.

18:47.000 --> 18:57.000
Yeah, it's probably, you know what, maybe I can go to a black background and just cut the file.

18:57.000 --> 19:00.000
It might be better.

19:03.000 --> 19:05.000
Is this better than before?

19:05.000 --> 19:09.000
Yeah, because black background is better.

19:12.000 --> 19:14.000
Don't touch that.

19:14.000 --> 19:18.000
That sounds like fire hazard there.

19:18.000 --> 19:22.000
Anyway, so I'll just, you know, just kind of slowly scroll through it, I don't know.

19:22.000 --> 19:28.000
Just to show you that really you can build these tests with like 100 lines of code,

19:28.000 --> 19:34.000
and they achieve a pretty reasonably good goal, like making sure that an NMU

19:34.000 --> 19:37.000
behaves correctly in like three different modes.

19:37.000 --> 19:43.000
So, yeah, so I don't know if there's any particular lines here I want to point out,

19:43.000 --> 19:50.000
so I wanted you to get a feel for what a test would look like if you guys decided to go sit down and write one.

19:50.000 --> 19:57.000
You don't have to like, you know, you don't have to learn a whole big framework with some bizarre looking APIs.

19:57.000 --> 20:03.000
The APIs that we have are minimal to begin with, so you're going to write your own functions.

20:03.000 --> 20:08.000
But when you do need them, you know, they're pretty self-explanatory and C,

20:08.000 --> 20:12.000
so you just, you know, you can grab for anything you need to know.

20:12.000 --> 20:17.000
And yeah, that's the bottom of the file already. It's only like three page downs.

20:17.000 --> 20:20.000
So, um...

20:20.000 --> 20:27.000
So, does the actual return value get used? I mean, I noticed you're carefully returning a report summary.

20:27.000 --> 20:28.000
Yeah.

20:28.000 --> 20:30.000
But does anything actually look at the return value of this, May?

20:30.000 --> 20:36.000
Yeah, so CIs will do that. So, like, this will dump a summary to the screen.

20:36.000 --> 20:40.000
So, if you're just running it yourself, which I guess I might as well go ahead and...

20:41.000 --> 20:42.000
So...

20:42.000 --> 20:46.000
Yeah, you know, I'm feeling brave.

20:46.000 --> 20:53.000
But, um, so, yeah, you can just run it.

20:53.000 --> 20:56.000
And then it'll dump...

20:56.000 --> 20:58.000
Yeah.

20:59.000 --> 21:01.000
It'll dump stuff like this out.

21:01.000 --> 21:05.000
And then CIs will, they know how to parse that, right?

21:05.000 --> 21:07.000
So, they'll be looking...

21:07.000 --> 21:09.000
And we have the...

21:09.000 --> 21:18.000
We have those, you know, reports and report, pass type API to try to make sure you get a nice, uh, consistent format so that it's parsable.

21:18.000 --> 21:23.000
You know, we don't use a TAP. Maybe we should.

21:23.000 --> 21:26.000
We've done that in a different test suite that I'm involved in as well,

21:26.000 --> 21:29.000
KVM self-test that's in the kernel.

21:29.000 --> 21:30.000
We're starting to...

21:30.000 --> 21:33.000
We're not there yet, but we're starting to migrate the TAP for that one.

21:33.000 --> 21:38.000
Uh, yeah. This one we have our kind of our own thing going. We've had it a long time now.

21:38.000 --> 21:43.000
Um, anyway, so that's like one and then there's like this...

21:43.000 --> 21:46.000
Yeah, there was another test. You probably saw it said skip.

21:46.000 --> 21:52.000
And it's skipping because I didn't give it an environment variable.

21:52.000 --> 21:56.000
Uh, let's see. Yeah, that's the file.

21:56.000 --> 22:03.000
So, this is that text file I mentioned before. You can create just, uh, you know, plain old text with all your environment variables.

22:03.000 --> 22:07.000
And then when you want to pass it to the thing...

22:07.000 --> 22:09.000
Um,

22:09.000 --> 22:11.000
Oops.

22:11.000 --> 22:16.000
It passes...

22:16.000 --> 22:19.000
Like this.

22:19.000 --> 22:24.000
And we'll just run that one group of tests this time.

22:24.000 --> 22:27.000
We're seeing about live demo is I have to type in front of people.

22:27.000 --> 22:33.000
Um, and, uh, so now we, now we're not skipping anymore.

22:33.000 --> 22:39.000
Now we're passing because I gave it, I gave it the inventor ID, which is zero for KMU.

22:39.000 --> 22:43.000
Um, and, uh, it matched.

22:43.000 --> 22:49.000
Working demos, working passing, passing SPI test.

22:49.000 --> 22:54.000
Uh, yeah.

22:54.000 --> 22:56.000
You showed the failing test also.

22:56.000 --> 22:57.000
Oh, yeah.

22:57.000 --> 22:58.000
Yeah.

22:58.000 --> 23:00.000
I want to see that it's true.

23:00.000 --> 23:01.000
Yeah.

23:01.000 --> 23:02.000
Yeah.

23:02.000 --> 23:03.000
Good challenge.

23:03.000 --> 23:05.000
Uh, yeah.

23:05.000 --> 23:07.000
Forgive what I called this one. There we go.

23:07.000 --> 23:13.000
So, yeah, this is that other one was the, uh, was the, uh, in a new testing.

23:13.000 --> 23:15.000
Um, oh, yeah.

23:15.000 --> 23:16.000
And so now it's here.

23:16.000 --> 23:17.000
It is failing.

23:17.000 --> 23:18.000
It's skipping.

23:18.000 --> 23:20.000
Um, that's failing, but skipping.

23:20.000 --> 23:29.000
And that's because, uh, this, uh, CPU, the default CPU is missing the, um, the extensions needed.

23:29.000 --> 23:32.000
So we can, we can fix that, of course.

23:32.000 --> 23:43.000
Um, something like this, um, we can actually add, um, we can add the extensions.

23:43.000 --> 23:48.000
So, uh, still spot.

23:48.000 --> 23:51.000
It was not there because I don't know why.

23:51.000 --> 24:07.000
Oh, no, because that requires an extra, uh, extra step of adding an SPI implementation that allows you to turn on, uh, the, uh, AD bits, um, uh, the hardware AD bits, um, where you don't have that yet.

24:07.000 --> 24:11.000
That's actually, we need to add an SPI extension.

24:11.000 --> 24:25.000
I think we're going to call it FWFT, allowing us to tell SPI to flip, uh, bits and registers the machine, uh, environment, config, enable bits.

24:25.000 --> 24:34.000
Because if you want to turn on this particular feature, uh, you need them, you need, uh, to be at the machine, uh, uh, mode level to be able to do that.

24:34.000 --> 24:38.000
So I can't do it from, uh, the s mode level.

24:38.000 --> 24:43.000
And so I actually hacked OpenSBI to let me do it and to test this out.

24:43.000 --> 24:47.000
And I, I'm not going to look for that in a live demo file.

24:47.000 --> 24:49.000
But, um, yeah, I have that.

24:49.000 --> 24:51.000
It does work.

24:51.000 --> 24:52.000
Yeah.

24:52.000 --> 24:57.000
Um, yeah, I think, uh,

24:57.000 --> 25:00.000
So what's in the run test.sh?

25:00.000 --> 25:02.000
So you wrote the C file, right?

25:02.000 --> 25:05.000
Uh, again?

25:05.000 --> 25:08.000
So then you had this run test.sh?

25:08.000 --> 25:09.000
Yeah.

25:09.000 --> 25:13.000
So, did you write it as well or is it, so, or is that the test?

25:13.000 --> 25:18.000
Okay, run test is just the, the, the test suite that kind of pulls everything together.

25:18.000 --> 25:26.000
So, um, if we look at, uh, this one, for example, this on the screen, uh, the log here shows at the very top.

25:26.000 --> 25:28.000
Which is at the bottom of the screen.

25:28.000 --> 25:31.000
Uh, this, this time out, et cetera, et cetera, et cetera.

25:31.000 --> 25:39.000
So that's actually the command line, the run test, figured out how to compose, uh, based on some configuration files and stuff.

25:39.000 --> 25:41.000
And then this is the output of that.

25:41.000 --> 25:51.000
There's, uh, this, um, uh, configuration file that you can, uh, provide, uh, for your groups of tests or for individual tests.

25:51.000 --> 25:59.000
Uh, allowing you to, um, um, to tell run tests what to do to pull it all together.

25:59.000 --> 26:03.000
I mean, of course, you can also just manually do the command line.

26:03.000 --> 26:14.000
And I do do the manual QMU command line, uh, when I want to also, like, do something with GDB or, you know, make sure I get the, the address is dumped out and I can find them as obj dump or something.

26:14.000 --> 26:17.000
So, um, yeah, I don't always do everything through run tests.

26:17.000 --> 26:21.000
Actually, very rarely. That's more for the CIs after you've got the thing working.

26:21.000 --> 26:25.000
Which one?

26:25.000 --> 26:28.000
No, that's already there. That's, that's a static.

26:28.000 --> 26:30.000
Yeah, it's committed to the repo.

26:30.000 --> 26:32.000
Yeah. Yeah.

26:32.000 --> 26:38.000
Um, yeah, nothing for scripts is automatically generated except for when you do the make standalone.

26:38.000 --> 26:42.000
And then you get, uh, might as well show that because we're in demo mode now.

26:43.000 --> 26:48.000
Um, so then you get this guy, which is generated.

26:48.000 --> 26:51.000
So this batch script was automatically generated.

26:51.000 --> 26:56.000
All this junk is the, uh, base 64 of the actual test code that was written in C.

26:56.000 --> 27:00.000
Um, yeah.

27:00.000 --> 27:10.000
And then, you know, this, some of this stuff is just kind of extracted directly from, uh, other scripts that are used by run tests and they're just chucked in there.

27:10.000 --> 27:13.000
And now you can, now it's all one unit.

27:19.000 --> 27:22.000
Yeah, you could put anything in there. I mean, don't trust someone to send you a reproducer.

27:22.000 --> 27:26.000
Yeah, it could be like, sure. Yeah.

27:26.000 --> 27:30.000
This is for developers passing things among trusted friends.

27:30.000 --> 27:32.000
Yeah. Yeah.

27:32.000 --> 27:36.000
Yeah. Make them sign it or yeah, just, yeah.

27:40.000 --> 27:43.000
Sure. Yeah. Yeah. I mean, yeah, anything could, absolutely anything could be in there.

27:43.000 --> 27:44.000
Right.

27:44.000 --> 27:46.000
Like enter your password. Please. Thank you.

27:46.000 --> 28:02.000
Uh, those tests are very similar to what is a case of test does and, uh, those tests integrated to case of test and if no, do we have such plans?

28:02.000 --> 28:07.000
Yeah. So the question is more or less, how does this relate to his, uh, case of test?

28:07.000 --> 28:14.000
Yeah. So there's, there's definitely overlap in what is tested.

28:14.000 --> 28:17.000
Um, the frameworks are quite different and how they work.

28:17.000 --> 28:25.000
Uh, there's, there's more overlap between this particular one and KVM self test, which are in case of test.

28:25.000 --> 28:28.000
That's one of the many sub directors in there.

28:28.000 --> 28:36.000
Uh, KVM self tests, KVM case self tests, uh, has started to be probably, uh,

28:36.000 --> 28:40.000
be probably the, the main place we add new tests for KVM.

28:40.000 --> 28:47.000
So actually, you may have noticed I did an entire presentation on KVM unit tests and I think I said KVM like only when I said the name of the framework,

28:47.000 --> 28:49.000
but I never actually talked about testing KVM.

28:49.000 --> 28:51.000
Uh, we do that still.

28:51.000 --> 29:03.000
Uh, we have CI that's specifically testing KVM using this framework, but, um, now we usually use KVM case self tests for the new ones and even some of these reporting to that framework.

29:04.000 --> 29:12.000
Um, and I'm seeing that this one's more going towards the testing of hardware or other hypervisors are still using it and stuff like that.

29:12.000 --> 29:21.000
But, um, yeah, KVM wise, uh, and, and, and actually I talked to Paulo about that yesterday, uh, on my third beer or whatever.

29:21.000 --> 29:32.000
But, um, I was like, you know, KVM self, the case self test is, is the way for the future for KVM testing and I'm not going to really talk about it too much tomorrow.

29:32.000 --> 29:37.000
When I talk about KVM unit tests and say, ah, but KVM unit tests are still easier to write and he's right.

29:37.000 --> 29:41.000
Like you can write a test case, uh, quicker, faster here.

29:41.000 --> 29:56.000
So if you're doing KVM testing and you want to do those quick and dirty tests I was talking about, uh, you might jump to this one first because the other framework, uh, uh, well, it's growing like support quite fast,

29:56.000 --> 30:05.000
but you have a little more boilerplate code and everything you have to do because you're actually, when you write that you're writing both the user space code and the guest code simultaneously for a test.

30:05.000 --> 30:07.000
And here you only do the guest code.

30:07.000 --> 30:19.000
So they initially, uh, here we can just simply read a test and if it's worse then we can move it to a case self test with bigger overhead.

30:19.000 --> 30:20.000
Yeah, yeah.

30:20.000 --> 30:26.000
And for your question on the other case self test stuff, like risk, there's a risk five directory there too, right?

30:26.000 --> 30:27.000
Where we test some instructions.

30:27.000 --> 30:28.000
That stuff is good.

30:28.000 --> 30:30.000
We need that too, but it's user space only, right?

30:30.000 --> 30:31.000
Yeah.

30:31.000 --> 30:33.000
So this, this is down in the kernel level.

30:33.000 --> 30:34.000
Okay. Thank you.

30:34.000 --> 30:35.000
S mode.

30:38.000 --> 30:39.000
Any other questions?

30:39.000 --> 30:49.000
No, let me, let me appropriately go to the last slide.

30:49.000 --> 30:50.000
There.

30:50.000 --> 30:52.000
Thank you.

30:52.000 --> 31:01.000
All right. That's it. See you next year.

