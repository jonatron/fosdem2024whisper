WEBVTT

00:00.000 --> 00:10.000
Hello. This is Scheme in the Browser with Guile Hoot and WebAssembly. I am surrogate

00:10.000 --> 00:19.600
Robin Templeton. We are the Spritely Institute. We build decentralized network technology.

00:19.600 --> 00:27.000
I'm going to open up with what is WebAssembly. It's a W3C open standard. It is a low level

00:27.000 --> 00:33.000
compilation target for the web. It's available in browsers since 2017. One of the big things

00:33.000 --> 00:40.000
we needed to make this happen is support for Wazem GC. It stands for garbage collection.

00:40.000 --> 00:48.000
Supported in Firefox and Chromium since very recently, late 2023. Why should you care?

00:48.000 --> 00:53.000
Why should you give a hoot? JavaScript is no longer the only game in town. You have a language

00:53.000 --> 00:59.000
that you really like. You can use that language. If you are familiar with some, I know there are

00:59.000 --> 01:03.000
a bunch of Guile people in the room. We have tried compiling to JavaScript and we have seen

01:03.000 --> 01:08.000
a lot of languages that have done such things in the past. You had to take a lot of compromises.

01:08.000 --> 01:13.000
They were a lot slower. It was messy. By compiling to WebAssembly instead, you are compiling to a

01:13.000 --> 01:19.000
virtual machine designed for you to bring your language to it. It follows the capability

01:19.000 --> 01:24.000
security model. As you may know, we are all about the object capability security model.

01:24.000 --> 01:31.000
Things are reasonably fast. It is increasingly used in non-browser context.

01:31.000 --> 01:36.000
Despite the name web, it is used as an abstract virtual machine for many different things, including

01:36.000 --> 01:43.000
people to write and use it as a Docker replacement, etc. What is Guile? We are targeting this

01:43.000 --> 01:50.000
Guile thing. It is a flexible scheme. It supports a bunch of standards, etc. It has a nice VM.

01:50.000 --> 02:02.000
It is also traditionally used for very unixy systems. Robins here. Until today. We will do a tradeoff

02:02.000 --> 02:11.000
when Robin gets up here. We have had some decisions that we have needed to make. I will let Robin

02:11.000 --> 02:18.000
resume with what those decisions are. I will come straight up.

02:18.000 --> 02:21.000
We are abstractly replacing.

02:21.000 --> 02:28.000
Yes, I was in the next room for a few minutes accidentally. Continuing with decisions.

02:28.000 --> 02:35.000
Thanks for starting it off. Sorry I am running late. Continuing with the decisions we had to make

02:35.000 --> 02:42.000
starting this project. We could have just compiled Guile in C via M script in it or something

02:42.000 --> 02:49.000
and run it straight in the web browser along with its various C dependencies like the BGMP and the BWGC.

02:49.000 --> 02:56.000
We would have probably gotten that done in a week or two. We would have paid a big performance

02:57.000 --> 03:05.000
penalty and also we would have had much worse integration with JavaScript. We expect.

03:05.000 --> 03:12.000
The second option was to work with the experimental WebAssemblyGC extensions and we could expect a higher

03:12.000 --> 03:17.000
performance with that. In fact, that is what we are seeing. Not that we have a comparison, but

03:17.000 --> 03:24.000
presumably we are getting decent performance and excellent integration with JavaScript.

03:24.000 --> 03:30.000
We will not with option two, of course. That is Guile Hoot. It is a WebAssembly to Scheme compiler.

03:30.000 --> 03:40.000
It is built on the newly shipped WebAssemblyGC extensions. It includes a full WebAssembly toolchain.

03:40.000 --> 03:51.000
We are bringing the whole Scheme language to web applications so you can use Continuation,

03:51.000 --> 03:59.000
Nubium, Merrick Tower, any normal Scheme thing in your interactive Web application.

03:59.000 --> 04:04.000
The goals for this project were, of course, first of all, to run Goblet's applications in Web browsers,

04:04.000 --> 04:12.000
which essentially means general support for Guile applications. Plus some sort of user interface library.

04:12.000 --> 04:19.000
As well as to advocate for dynamically typed languages in general in the WebAssembly world.

04:19.000 --> 04:29.000
We are also providing an alternative WebAssembly toolchain as a consequence of our development process.

04:29.000 --> 04:37.000
I am not going to go through the code for this, but this is the inner loop for Wireworld, which is a

04:37.000 --> 04:47.000
sort of a circuit simulator. We will quickly...

04:47.000 --> 04:52.000
You can switch tabs, but I have it open.

04:52.000 --> 04:55.000
Okay, thanks. Is this the tab for it?

04:55.000 --> 05:01.000
Control tab through. This will be good enough.

05:01.000 --> 05:16.000
This is a graphical demonstration of Wireworld. We might have a live version here.

05:16.000 --> 05:25.000
This is a bit slow actually drawing, but yes, as we all learn in physics class, electrons have a head and tail.

05:25.000 --> 05:32.000
There will generate one, and that is a tiny circuit simulator.

05:32.000 --> 05:45.000
Back to the presentation.

05:45.000 --> 05:54.000
As far as our status, as far as how far we have gotten in Gauhut, we have basically all of our 7-in-1-small Scheme.

05:54.000 --> 06:04.000
That was our initial target because it is a very small and modern specification and has several implementations and a nice benchmark suite and so on.

06:04.000 --> 06:08.000
We are starting to add Gauhut in R6RS features.

06:08.000 --> 06:14.000
In version 3 that we released this week, we just added an R6RS library system.

06:14.000 --> 06:19.000
A couple of hash table types based on R6RS.

06:19.000 --> 06:26.000
We are starting to work on debugability in the browser starting with names for WebAssembly level objects.

06:26.000 --> 06:32.000
WebAssembly functions, for example, have names that you can see in the browser debugger like in backtraces.

06:32.000 --> 06:36.000
We can also run the R7RS benchmarks now.

06:36.000 --> 06:46.000
We are getting decent results there. We are now focusing on performance as well as functionality.

06:46.000 --> 06:55.000
Who does a bit of an unusual list implementation because it is not a standalone self-hosting self-contained compiler.

06:55.000 --> 07:04.000
It is heavily integrated with Gauhut. It will presumably always be integrated with Gauhut, but it is not a normal Unix Gauhut.

07:04.000 --> 07:12.000
We reuse the compiler tower that Gauhut has that takes in Scheme or another language like EmacsLisp on the front end.

07:12.000 --> 07:15.000
It goes through a couple of intermediate representations.

07:15.000 --> 07:27.000
Normally we would output at the last stage after TRIAL, which is Minimum List Scheme basically, and a Continuation Passing Style layer that is quite low level.

07:27.000 --> 07:35.000
We would output Gauhut bytecode, which is a high level bytecode for list-byte languages.

07:35.000 --> 07:43.000
With some tweaks to the compiler tool chain, we are able to output WebAssembly instead of Gauhut bytecode.

07:43.000 --> 07:48.000
That required very minor changes to the compiler, comparatively speaking.

07:48.000 --> 07:57.000
We also cannot use libGaile, which is in C and has a bunch of C dependencies, including its own garbage clutter where we want to use the browsers.

07:57.000 --> 08:01.000
We are building a new Scheme Runtime as part of Gauhut.

08:01.000 --> 08:10.000
That is written in WebAssembly as well as Scheme and Scheme Intermix with WebAssembly and so on.

08:10.000 --> 08:17.000
We are targeting Gauh compatibility overall and making progress on that front.

08:17.000 --> 08:22.000
From the host, typically the browser and WebAssembly terms,

08:22.000 --> 08:27.000
we need a few things beyond the basic WebAssembly that would have been available a few years ago,

08:27.000 --> 08:31.000
that you might have used in Google Docs or something like that.

08:31.000 --> 08:34.000
We need the garbage collection extensions.

08:34.000 --> 08:43.000
Those only got enabled in browsers by default in Chromium and Firefox last December, so quite new.

08:43.000 --> 08:49.000
We need tail calls, which are part of the basic specification as far as I know,

08:49.000 --> 08:56.000
and so that's very nice to not have to have any workarounds there with trampolining and things like that.

08:56.000 --> 09:01.000
We need string support, which is not part of base WebAssembly at this time.

09:01.000 --> 09:05.000
There's a proposal we like that we use on the source code level,

09:05.000 --> 09:13.000
but we have workarounds that work in browsers with native JavaScript strings with a bit of overhead.

09:13.000 --> 09:18.000
Like I mentioned, the latest Firefox and Chromium have all the extensions you need,

09:18.000 --> 09:22.000
and it is being actively worked on in WebKit,

09:22.000 --> 09:28.000
so we're expecting all major browsers to support Hoot programs in the very near future.

09:28.000 --> 09:31.000
End of the year, definitely.

09:31.000 --> 09:35.000
Any project like this has its pros and cons, so on the good side,

09:35.000 --> 09:42.000
WebAssembly text is the source code format for WebAssembly, and it's just S expressions.

09:42.000 --> 09:47.000
We don't even have a separate parser for anything, we just write scheme S expressions.

09:47.000 --> 09:56.000
That's quite nice for both generating WebAssembly code and for integrating it, embedding it, and scheme.

09:56.000 --> 10:01.000
We have tail calls for free, which is definitely convenient,

10:01.000 --> 10:07.000
and the reference type system that WasmGC provides for heap objects,

10:07.000 --> 10:11.000
which gives you more than just numbers, it gives you structures for subtyping,

10:11.000 --> 10:19.000
it gives you arrays, it gives you 31-bit integer value for tags, stuff, and dynamic languages.

10:19.000 --> 10:24.000
So that's all good, and then there are some difficulties that we will be addressing,

10:24.000 --> 10:32.000
so there's limited support for strings in WebAssembly or in browsers in general.

10:32.000 --> 10:39.000
There are no first class continuations, so we have to sort of reify a lot of the things

10:39.000 --> 10:44.000
that would normally just be implicit in the scheme program to get access to it

10:44.000 --> 10:49.000
for where, say, access to the stack is limited from WebAssembly for security reasons.

10:49.000 --> 10:55.000
Access to the heap is limited for security reasons, so things like that.

10:55.000 --> 10:59.000
And there are limited GC features, so there are no finalizers for example,

10:59.000 --> 11:06.000
and that's mostly because languages are so diverse in what they allow for that kind of feature.

11:06.000 --> 11:10.000
But we'll want some advanced GC features for goblins.

11:10.000 --> 11:16.000
So this is a little example from the runtime, showing a bit of WebAssembly code.

11:16.000 --> 11:20.000
This is a portp predicate, testing if x is a port object.

11:20.000 --> 11:29.000
You see the inline Wasm special form, and then a quoted bit of WebAssembly source code

11:29.000 --> 11:32.000
that represents an anonymous function.

11:32.000 --> 11:38.000
RefEek is the scheme untypes, scheme value, so we have a function from a scheme value

11:38.000 --> 11:45.000
to a scheme value, and it just tests if the x object is a port structure or not

11:45.000 --> 11:50.000
and returns the magic five values for true or false depending.

11:50.000 --> 11:56.000
So pretty simple, but very convenient for writing the standard library.

11:56.000 --> 12:00.000
So we provide our own self-contained WebAssembly tool chain.

12:00.000 --> 12:06.000
It lets you develop WebAssembly in one place conveniently from your REPL or whatever you like to use,

12:06.000 --> 12:13.000
so it is an alternative to the more mainstream options like binary N or the WebAssembly binary toolkit.

12:13.000 --> 12:20.000
It's a set of scheme modules that provide easy access in programs and from the REPL,

12:20.000 --> 12:23.000
also some command line tools where that makes sense.

12:23.000 --> 12:29.000
That can name basically what you'd expect, parser, assembler, disassembler, linker, dumper.

12:29.000 --> 12:34.000
But we also have a very nice interpreter that my co-worker Dave Thompson mostly wrote,

12:34.000 --> 12:43.000
and that allows you to do debugging of WebAssembly using tools very similar to what you get in a GaL REPL,

12:43.000 --> 12:47.000
which is great for interactive development.

12:47.000 --> 12:52.000
So a little example is a function that squares the number.

12:52.000 --> 12:58.000
We're importing a couple of packages to get access to the runtime or the interpreter.

12:58.000 --> 13:02.000
And we're compiling this Lambda expression.

13:02.000 --> 13:06.000
When we look at the Hoot square expression on the next line,

13:06.000 --> 13:12.000
the Hoot wrapper indicates that it is a WebAssembly object, not a regular scheme procedure.

13:12.000 --> 13:19.000
And then we can call it transparently like a scheme procedure to see that 4 times 4 equals 16.

13:19.000 --> 13:21.000
So the basics work.

13:21.000 --> 13:25.000
In the future, we're going to be working on more R7 or R5 small features.

13:25.000 --> 13:31.000
That's mainly the library system where we just landed R6RS libraries.

13:31.000 --> 13:37.000
So we'll be building our 7RS small libraries and GaO modules on top of that functionality.

13:37.000 --> 13:45.000
We're going to want definitely a lot more GaO compatibility in terms of libraries and surfies and stuff,

13:45.000 --> 13:48.000
and especially fibers for concurrency.

13:48.000 --> 13:50.000
It's very important for goblins.

13:50.000 --> 13:55.000
And finally, we want to be able to run goblins programs on top of GaO Hoot,

13:55.000 --> 14:04.000
and we really expect to be able to do that with few to no changes in terms of the network interfaces and things like that.

14:04.000 --> 14:09.000
And the future of WebAssembly also has some bearing on the direction of our projects.

14:09.000 --> 14:14.000
We had a pretty decent impact on the WASM GC proposals.

14:14.000 --> 14:21.000
The W3C WebAssembly community group is open to anyone who's interested.

14:21.000 --> 14:23.000
You don't have to be a big organization.

14:23.000 --> 14:30.000
We're definitely not, but we had some influence on the proposal as an early adopter,

14:30.000 --> 14:36.000
along with languages like OCaml and Kotlin.

14:36.000 --> 14:44.000
And so GaO Hoot makes a scheme, a practical alternative to JavaScript for interactive web applications.

14:44.000 --> 14:53.000
So you can write full programs with no JavaScript besides what is needed for loading the WebAssembly file.

14:53.000 --> 14:59.000
We believe WebAssembly should have space for all languages, not just low-level statically type ones,

14:59.000 --> 15:05.000
and hooters for scheme, but not necessarily just for scheme because our tool chain may be interesting for other projects.

15:06.000 --> 15:08.000
We have...

15:08.000 --> 15:11.000
We'll skip the rebel demo.

15:11.000 --> 15:13.000
We have to stop Robin.

15:13.000 --> 15:15.000
Alright.

15:15.000 --> 15:17.000
So next speaker can set up.

15:26.000 --> 15:28.000
Robin, you can still answer questions.

15:28.000 --> 15:30.000
Oh yes.

15:30.000 --> 15:32.000
Any questions?

15:32.000 --> 15:34.000
Here's one.

15:34.000 --> 15:36.000
Where's the microphone?

15:36.000 --> 15:38.000
You can have one.

15:38.000 --> 15:40.000
I can sound.

15:40.000 --> 15:42.000
What happened to the mic?

15:42.000 --> 15:44.000
The microphone.

15:44.000 --> 15:46.000
There you go.

15:46.000 --> 15:48.000
Oh, thank you.

15:48.000 --> 15:50.000
I got it.

15:50.000 --> 15:52.000
Enjoy the actual question.

15:52.000 --> 15:54.000
Do you have a place to get a form in the background?

15:54.000 --> 15:56.000
No, maybe.

15:56.000 --> 15:58.000
It's not going to work out because there's no narration.

15:58.000 --> 16:00.000
Okay, a question.

16:00.000 --> 16:13.000
You said that you don't support first class continuations, but you also said that you already do CPS in real.

16:13.000 --> 16:23.000
So my question is, if you already do CPS, if you verify your stack, then it seems not so difficult to do that first class continuations after all.

16:23.000 --> 16:25.000
We have first class continuations.

16:25.000 --> 16:27.000
Repeat the question.

16:27.000 --> 16:29.000
Yes, so repeat the question.

16:29.000 --> 16:31.000
I think the question was basically...

16:31.000 --> 16:35.000
Sorry, could you repeat the premise that started the question?

16:35.000 --> 16:41.000
I mean, you said you don't have first class continuations yet, right?

16:41.000 --> 16:43.000
We do have...

16:43.000 --> 16:45.000
So the question was whether we...

16:45.000 --> 16:48.000
was partly whether we have first class continuations, and we do.

16:48.000 --> 16:59.000
So we had to modify, add a pass to the GAL compiler tower to do tailification, which is just turning all non-tail calls into tail calls.

16:59.000 --> 17:01.000
And so that turns the...

17:01.000 --> 17:09.000
That gets us to the point on the Web assembly level where everything is split into small basic blocks.

17:09.000 --> 17:11.000
And we have...

17:11.000 --> 17:20.000
An ABI that reifies various stacks, and so we do have access to delimited continuations and who...

17:20.000 --> 17:29.000
And actually, call with current continuation is implemented in terms of delimited continuations, which I think is pretty rare for schemes.

17:29.000 --> 17:31.000
Okay, so you do reify the stack.

17:31.000 --> 17:33.000
Yeah, we have to reify stack.

17:33.000 --> 17:39.000
We have to reify several stacks because of Web assembly details, but we do have first class...

17:39.000 --> 17:43.000
Delimited and full continuations available right now.

17:43.000 --> 17:46.000
It's one of the first things we designed for.

17:46.000 --> 17:51.000
And that was Andy's design work for getting you out to work with Web assembly.

17:51.000 --> 17:53.000
Any more questions?

17:53.000 --> 17:55.000
I think we have a couple of questions.

17:55.000 --> 18:02.000
Andy, you have to go back for getting you out to work with Web assembly.

18:02.000 --> 18:04.000
Any more questions?

18:04.000 --> 18:06.000
You have to go back?

18:06.000 --> 18:08.000
Yes.

18:08.000 --> 18:13.000
How do you shoot in Strigoform?

18:13.000 --> 18:16.000
How do you shoot in Strigoform?

18:16.000 --> 18:21.000
I believe that you hit the Z or Z button.

18:21.000 --> 18:23.000
Strigoform.

18:23.000 --> 18:25.000
Strigoform?

18:25.000 --> 18:27.000
Okay, so yes.

18:27.000 --> 18:29.000
So Z fires.

18:29.000 --> 18:41.000
And yes, if you load the talk in or just load up the game directly on HIO, it's by my co-worker David Thompson with Graphics by Christine.

18:41.000 --> 18:47.000
And it's got particle effects, parallax shooting, audio, etc. are going on.

18:47.000 --> 18:50.000
But Scheme is not the bottleneck in terms of performance.

18:50.000 --> 18:53.000
The bottleneck is the JavaScript canvas.

18:53.000 --> 19:00.000
So we're doing that well on performance already without having taken it into consideration before.

19:00.000 --> 19:03.000
Thank you.

19:06.000 --> 19:10.000
Oh. Do we have time for another?

19:10.000 --> 19:13.000
I have a question from Matrix.

19:13.000 --> 19:16.000
I understand one of the goals is compatibility with Gile.

19:16.000 --> 19:24.000
However, some of the functions in the Gile standard library like open file and networking functions are not defined with security capabilities in mind.

19:24.000 --> 19:27.000
What's your plan to deal with these cases?

19:27.000 --> 19:29.000
That's a fantastic question.

19:29.000 --> 19:33.000
Christine will address some of this in hard talk at noon.

19:33.000 --> 19:49.000
And there are also some WebAssembly proposals like Wazzy and Wazix that could provide POSIX compatibility if we wanted to run it on a non-vouser runtime for, say, geeks integration or something like that.

19:49.000 --> 19:58.000
But in general, those APIs won't be used by Goblin's programs for the most part.

19:58.000 --> 20:00.000
But we will provide the compatibility.

20:00.000 --> 20:03.000
We will provide both because we already started the next talk.

