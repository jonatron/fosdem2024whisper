WEBVTT

00:00.000 --> 00:02.060
you

00:30.000 --> 00:32.060
you

01:00.000 --> 01:29.000
yes sorry so let's talk about case which is a keyword that hopefully most of you have

01:29.000 --> 01:34.120
used, if you haven't, it's okay, we're gonna go through it. And we're gonna figure out

01:34.120 --> 01:39.400
how we can use it, how it works, how we can use it better, and what the latest

01:39.400 --> 01:47.000
versions of Ruby have given us to play with this operator more. So yeah, that's

01:47.000 --> 01:50.560
more as what I'm talking about. So just in case we're gonna go through what case

01:50.560 --> 01:56.240
is, what the different syntaxes are, how you usually use it, and then we're gonna

01:56.280 --> 02:00.640
look at how it's implemented, which is terrifying, and we're gonna have a small

02:00.640 --> 02:06.520
dive into how the Ruby VM works and the instructions and stuff like that. After

02:06.520 --> 02:11.200
that we're gonna go through several use cases, some of them are pretty basic, some

02:11.200 --> 02:16.040
of them I think are pretty cool on a Ruby standpoint. And finally we're gonna

02:16.040 --> 02:20.960
take a look at pattern matching, which has been coming to Ruby since 2.7 and

02:21.080 --> 02:27.480
is mainly operated right now using the case keyword. So let's start. What's a

02:27.480 --> 02:36.920
case? So does anyone not know what a case is, or has anyone not used it? Cool. So

02:36.920 --> 02:41.280
that will go fast. So basically a case is more or less a big if-else, that's

02:41.280 --> 02:44.800
usually how people think about it. So you have your case, you have your different

02:44.800 --> 02:50.600
branches, and then you match each branch against your case. And depending on the

02:50.640 --> 02:55.880
branch that matches, you go to a different path. So in this case we can assume

02:55.880 --> 02:59.200
that, I don't know, status is something you get back from an API, you match it

02:59.200 --> 03:03.200
against different cases, and then if you have a success you proceed, otherwise you

03:03.200 --> 03:09.520
want to fail depending on what you have. If you want to, you could be even more

03:10.040 --> 03:15.280
compact by moving the stuff up a line and using then, and if you want it to be

03:15.280 --> 03:20.080
even more compact, you could even add more things to a branch. So if you wanted

03:20.120 --> 03:23.800
different conditions to go to the same branch, you can separate them with a

03:23.800 --> 03:30.360
comma. So that's basic case. One interesting use case that I don't think I've

03:30.360 --> 03:34.320
ever seen before, I don't know if it's useful, but it's still cool to look at,

03:34.920 --> 03:39.720
is you can write a case without anything at the top, just an empty case, and then

03:39.720 --> 03:45.560
it behaves exactly like an if-else if, so you have to use usual predicates,

03:45.800 --> 03:52.680
the same way you would an if-else. So I'm honestly not sure that has much

03:52.680 --> 04:00.920
interest, but it's cool. So how does case work? And in general, I kind of also

04:00.920 --> 04:05.560
wanted to take the opportunity to talk about a bit about how anything works in

04:05.560 --> 04:09.120
Ruby and how you can, when you're debugging something and trying to figure

04:09.120 --> 04:13.200
out how something works, how you can go deeper into your code or someone else's

04:13.240 --> 04:18.120
code. So if you're, for example, if you have a method that you've written or

04:18.120 --> 04:21.840
someone else has written and you don't know where it is, so let's say you're in

04:21.840 --> 04:27.720
a big code base and you have 20 methods called, I don't know, count or show, and

04:27.720 --> 04:32.320
you don't know which one is being resolved. In Ruby, everything's an object,

04:32.440 --> 04:37.400
as you might have heard before. So, so are methods. And you can, on any instance

04:37.400 --> 04:42.320
of anything, call dot method, capture your method, and then you have access to

04:42.360 --> 04:46.680
two methods that are pretty cool. One is called source location, which will tell

04:46.680 --> 04:50.720
you in which file it is. So interesting when you don't know which method is

04:50.720 --> 04:55.240
being resolved. And another one is just dot source, which will print out the

04:55.240 --> 05:01.240
source in your terminal. Just plain up. So that's interesting also. If you're

05:01.240 --> 05:06.880
looking for something more lower level, so a Ruby method, like array.last or

05:07.080 --> 05:10.880
integer.next, and you don't know how it works and you don't know where to go,

05:11.840 --> 05:15.760
you're kind of stuck. You're going to have to go read the fabulous manual of

05:15.760 --> 05:22.480
Ruby to figure out where it is. But in our case, we're kind of one level deeper

05:22.480 --> 05:27.360
because we're not looking at a Ruby method, we're looking at a Ruby keyword. So

05:27.360 --> 05:31.920
you, if you go to the documentation, you're going to find how it behaves, but

05:31.920 --> 05:37.320
you're not really going to be able to see the source code per se. So in this case,

05:37.560 --> 05:43.920
one way that I've used to figure out how the internals of case work is to go

05:43.920 --> 05:50.440
look at the Ruby VM instructions. So big-ish caveat for the next couple of

05:50.440 --> 05:54.720
slides. That's the very limit of what I'm trying to understand this year. I'm

05:54.720 --> 05:59.080
kind of in that phase in my Ruby journey when I want to understand how things

05:59.080 --> 06:06.960
work. So if I say something outrageous, stop me. So from my understanding, the

06:07.000 --> 06:11.720
Ruby code that you write goes through a journey before it is compiled and

06:11.720 --> 06:17.200
interpreted. So your Ruby code first gets turned into tokens. So for example, you

06:17.200 --> 06:24.480
can imagine that your entire program gets turned into a big array of syntactically

06:24.480 --> 06:28.840
relevant stuff. So that could be depth, for example, or an open parenthesis or a

06:28.840 --> 06:34.800
space or part of a string. So everything gets turned into a token. And then those

06:34.840 --> 06:39.520
token get organized into something called an AST, which is an abstract syntax

06:39.520 --> 06:44.680
tree, which is really hard to say. And basically what an AST is, is that big

06:44.680 --> 06:49.840
array, but formatted into something that is more understandable. So if anyone has

06:49.840 --> 06:55.160
ever played with RuboCop before, that's probably where you've seen something

06:55.160 --> 06:58.520
like that, because you have to play with syntax tree, which you want to write your

06:58.520 --> 07:04.040
own cops. So the tree is composed of a lot of nodes, and each node has a name. So

07:04.080 --> 07:08.880
you have a class node or a method node or a begin node. And then inside the node,

07:08.880 --> 07:12.640
you have all relevant information for that specific class or method or begin

07:12.640 --> 07:20.760
block or anything. And then all of those, all that tree gets turned into virtual

07:20.760 --> 07:25.160
machine instructions. So that's the part where I think this, what I'm going to

07:25.160 --> 07:31.200
talk about probably only work on C Ruby. I'm not sure this applies to other

07:31.240 --> 07:36.000
implementations of Ruby, like Truffle or JRuby. It probably works a bit

07:36.000 --> 07:44.760
differently. So if we look at the case that we're looking at before, and in the

07:44.760 --> 07:49.680
Ruby console, you have a class called RubyVM, which gives you access to any tool

07:49.680 --> 07:54.160
you might want to, to turn your code into either the tokens or the tree or the

07:54.160 --> 08:01.400
instructions. You can end up with all of this, which we're going to try and go

08:01.400 --> 08:08.120
through in some kind. So first of all, in case you've never used it, the Ruby

08:08.120 --> 08:13.920
virtual machine, the one from C Ruby is a stack based VM. So interact, everything

08:13.920 --> 08:18.720
in the VM is a stack. So you end up, you have a lot of instruction here that just

08:18.720 --> 08:22.840
interact with the stack. Like the put object over there just puts an object on

08:22.880 --> 08:27.120
the stack, the top end finds an object and then moves it to the top of the stack.

08:27.120 --> 08:33.640
And you have a lot of things like that. So in our case, if we look in detail, we

08:33.640 --> 08:39.440
can see a few things. So first of all, here we're mainly preparing the stack and

08:39.440 --> 08:43.360
here we have something, here we can find the status that we have over there. So

08:43.360 --> 08:47.280
this is basically calling status to fetch the value that we want to match

08:47.280 --> 08:52.880
against. And under this, you have a Ruby optimization, a Ruby VM optimization

08:52.880 --> 08:58.840
called case dispatch. What this does is in some cases, if you're using a simple

08:59.120 --> 09:04.080
case with simple objects inside of it, like strings or integers or symbols or

09:04.080 --> 09:09.280
stuff like that, what it will do is it will create a hash where the keys are

09:10.080 --> 09:15.640
basically this and this and the values are the number of the line in your VM

09:15.640 --> 09:20.680
structure that you need to jump to. So what that means, at least the way I

09:20.680 --> 09:25.880
understand it, is if you have a lot of if, else if, else if, else if, it will be

09:26.280 --> 09:29.640
usually faster to build a case because you're losing some time here to build

09:29.640 --> 09:35.960
your hash. But then whatever case you want to go to, it's just a hash access.

09:36.520 --> 09:40.200
Whereas if you're doing a bunch of if and else if you have to go through each of

09:40.200 --> 09:43.320
them to see does this work or does this work or does this work, etc.

09:44.280 --> 09:49.000
If we go a bit below, we can see what that would look like technically if we

09:49.000 --> 09:55.080
would need it to go through each of the branches to see which one works. So here

09:55.240 --> 10:00.280
we have our success symbol, which was our first branch. And what this does is it

10:00.280 --> 10:04.440
going to compare it to the status using the triple equal method. And that's the

10:04.440 --> 10:07.800
cool part of case. That's technically what's doing the heavy lifting behind.

10:08.600 --> 10:14.920
And if that equal works, then it's going to jump to instruction 28 below. If it

10:14.920 --> 10:18.360
doesn't work, then it's going to keep going. So second branch is error. So we're

10:18.360 --> 10:22.040
going to take error, put it on the stack, compare it to status. And if it doesn't,

10:22.040 --> 10:27.560
if it works, we go to 33. If none of those work, if you remember the case,

10:27.560 --> 10:33.560
then that means we're in our error case or like our else, which is over there. So if

10:33.560 --> 10:37.400
none of those work, so we keep going down our instruction and we end up here

10:37.880 --> 10:42.760
called the fail harder and then leave, which is instruction 28. And then under that,

10:42.760 --> 10:48.200
then you have the lines that you would have jumped to if anything worked before. So the

10:48.200 --> 10:53.320
28 here, which will call the proceed and the 33, which will call the fail. So that's

10:53.320 --> 11:00.440
more or less the instruction patterns of a case. So that turned our question before,

11:00.440 --> 11:05.480
answers our question before, right, of how a case works. And the simplest answer that I can

11:05.480 --> 11:09.560
give it, it works thanks to triple equal. That's what it's going to use to match everything

11:09.560 --> 11:15.880
against everything. So if we wanted to push case to the limit, the question that we want to answer

11:15.880 --> 11:23.400
now is what does implement triple equal? And in Ruby, that's a bunch of classes. And the

11:23.400 --> 11:27.480
interesting thing and the main reason I wanted to do that presentation is that depending on what

11:27.480 --> 11:34.360
you're calling triple equal on, it will behave differently. So the simplest example that we've

11:34.440 --> 11:41.160
all used is all the base classes. So string strings, integers, float, arrays, hashes,

11:41.720 --> 11:47.560
anything you want. And in this case, it checks for equality. So that's the thing we've seen

11:47.560 --> 11:55.800
before. You might have seen that code. You get a param that has a response and then you don't

11:55.800 --> 12:00.520
know what the fuck the other person in the API has done, whether it's a string or a 200 or a

12:00.520 --> 12:06.200
success or a string or a true or true as a string or anything. So you do your case and you match it

12:06.200 --> 12:11.640
against whatever and try to figure out. So in this case, it's always going to check for equality.

12:11.640 --> 12:15.480
So here with the come out that we've seen before, it's one or the other or the other.

12:16.520 --> 12:23.480
And then you have arrays, you have hashes. Otherwise, yes, you can give up. Another thing

12:23.480 --> 12:29.000
that implements triple equal with another behavior are classes and modules. On classes and on modules,

12:29.560 --> 12:35.400
triple equal checks for, I don't really know how to say it in one word, checks for type,

12:35.400 --> 12:41.320
for ancestry. It's a bit like the is a method of Ruby. So when you have an object and you call is

12:42.200 --> 12:46.840
my dog an animal, it's not only going to check the class, it's going to check a bit above to see if

12:46.840 --> 12:51.800
animal is included in it if you're going composition way or if it inherits from animal, if you're

12:51.800 --> 12:57.160
going the inheritance way. And that's more or less what we can do here, for example, with errors.

12:57.160 --> 13:03.880
So I say you have your code and you've defined a bunch of different types of errors. And you've

13:03.880 --> 13:09.400
tagged some of them maybe as ignorable. So if it returns any errors that's in that type, then I

13:09.400 --> 13:15.640
want to ignore them. If it returns those two different errors, I want to return a not found.

13:15.640 --> 13:22.040
If someone forgot about safe navigation, I want to tell them. And then a lot of errors, for example,

13:22.040 --> 13:25.560
in Rails, and I'm assuming in Ruby, not entirely sure, don't put me on that,

13:26.360 --> 13:31.640
inherit from standard error. And so those maybe you want to raise, but if you have something else,

13:32.360 --> 13:36.760
then that's probably a lower level, maybe a PG error if you're dealing with a database,

13:36.760 --> 13:42.360
and then you want to do something else. So that's it for classes and modules. Another

13:43.640 --> 13:49.480
class, another type of classes that implement triple equal or ranges that I'm assuming most of

13:50.280 --> 13:55.880
most of us have already used that check for inclusion. So for example, if you have

13:56.600 --> 14:01.160
an integer at the top, then you can check that it's included in this range or this range. And it

14:01.160 --> 14:08.280
works with the endless ranges of Ruby. So you can be very, I mean, this might as well use an if

14:08.280 --> 14:12.120
else if and just check that it's greater or lower than, but it's good to have options.

14:13.080 --> 14:20.440
You never know. And one thing that I found, if you're working in networking, that could be cool,

14:20.440 --> 14:26.440
IP address works the exact same way. So you can define IP addresses with their masks and everything,

14:26.440 --> 14:31.080
and then have them act as ranges, and then check that your IP address belongs to one or the other.

14:34.200 --> 14:41.000
This one we've all probably used is also is reg X. So this one checks for just a match. It's the

14:41.000 --> 14:47.880
exact same equivalent as if you wanted to match your against string. So that's a kind of real

14:47.880 --> 14:51.720
use case that I have from the company that I'm working for where we manage a lot of messages

14:51.720 --> 14:57.000
between clients and providers. And so we want to check in those messages that they're not trying

14:57.000 --> 15:01.160
to bypass us, for example, by sending an address and trying to meet somewhere, or they're not

15:01.160 --> 15:06.760
sending sensitive information or sometimes people can keep their dick in their pants. So we have to

15:06.760 --> 15:14.680
be careful about that also. Stuff like this, right? So this one checks for match. Probably one of the

15:15.560 --> 15:20.120
most interesting example, but yet the one that have the most trouble coming up with a good example

15:20.120 --> 15:28.520
for are prox and lambdas. On prox and on lambdas, triple equal calls the lambda and gives it the

15:28.520 --> 15:35.240
object that you're matching with. So for example, here we can define, let's say we want to define

15:35.240 --> 15:43.720
simple prox or lambdas that just delegate to another method. So for example, unknown host will take

15:45.240 --> 15:49.480
an element and then check if the host is included in the list of something.

15:51.480 --> 15:58.200
Oh shit, yeah, I've done it again. In case this is just, it's the new way of writing the old thing

15:58.200 --> 16:03.640
here with the pipe pipe and you enter a variable, this does the exact same thing. It just takes the

16:03.640 --> 16:07.400
first one. So underscore one would be the first variable that you enter here, underscore two,

16:07.400 --> 16:11.480
the second one, underscore three, et cetera, et cetera, et cetera. So let's say that we've defined

16:11.480 --> 16:18.360
a simple list of hosts. So when we get, in this case, probably a request, we could delegate to

16:18.360 --> 16:25.400
one of those to see if it whitelisted or if something went wrong. And then we can, if it goes

16:25.400 --> 16:31.560
there, yes, we can take a request, let's say a web book for example, and write our case on it and say,

16:31.560 --> 16:37.080
okay, when it's whitelisted, then I want to do something. If the host is unknown, I want to

16:37.080 --> 16:41.080
do something else. If the action is unknown, it's going to do something else. And what this is going

16:41.080 --> 16:48.280
to do behind the curtain is it's going to call whitelisted and give it web book as a first parameter.

16:50.920 --> 16:56.360
So it's a more, again, more compact way and allows you to put that code somewhere else

16:56.360 --> 17:05.480
instead of having to copy paste it into three ifs. And the last one, we're in Ruby, thankfully.

17:05.480 --> 17:11.720
So for every other class, we got duck typing. We can just implement the triple equal method and

17:11.720 --> 17:19.400
have it work for more or less anything that we want. So bear with me because that's going to take

17:19.400 --> 17:26.280
a little bit of time. So in this case, same, still sticking with my response example that we've

17:26.280 --> 17:33.160
been following the entire presentation. So here I can define in my response class or module or

17:33.160 --> 17:38.840
whatever different classes that implement the triple equal and that do anything that I want.

17:39.400 --> 17:44.520
And then I can, if I do this and I call them, this is going to do what we've seen before in the

17:45.160 --> 17:50.200
VM instructions, right? It's going to take the response called triple equal with this and then

17:50.200 --> 17:56.040
see if the answer is true or not. So with this, you can basically create as many matches as you

17:56.040 --> 18:01.400
want, especially on custom class that can be pretty interesting. If you have one example that came

18:01.400 --> 18:05.320
to mind also is payments, for example, if you're managing payments, then you can in your payment

18:05.320 --> 18:11.320
class define different subclasses that could be success or canceled or processing that just

18:11.320 --> 18:15.800
calls your payment API and checks if it works. And so all that code is it's in own place and then

18:15.800 --> 18:20.440
you instantiate your object here and you can use case to easily delegate where you're going.

18:20.680 --> 18:30.280
Another example that we've kind of used is a wrapper for services. So basically you define

18:30.840 --> 18:35.480
new classes for your service and your service answer a class that's either a success or an error

18:35.480 --> 18:40.840
and then you can use this to do some kind of early, early days pattern matching.

18:42.520 --> 18:49.080
So speaking of pattern matching, how does it work? So just in, again, just in case,

18:49.320 --> 18:55.240
we're going to go quickly through what it is and what it works, how it works, sorry.

18:56.520 --> 19:03.160
So the whole idea of pattern matching is that you define as the naming price, you define a pattern,

19:03.640 --> 19:10.040
then you try and match it against something and see what sticks. So here my pattern is going to be a

19:10.040 --> 19:15.400
hash with a status key, a body key inside of which I'll have a user with a name and an age

19:15.800 --> 19:20.680
and whatever is in here, if I can match it, I want to store it in the variable and then once you

19:20.680 --> 19:26.440
have your pattern, you can try and match it against any collection of stuff. So in this case,

19:27.160 --> 19:31.800
it's going to work because we had the same status and the form that we're trying to match against

19:31.800 --> 19:36.920
was the same and what it's going to do is it's going to assign the name variable to whatever was

19:36.920 --> 19:42.440
there and the age variable to whatever was there. If you want to match it against something that

19:42.520 --> 19:48.120
looks very different, so this hash for example is not going to work because either status and body

19:48.120 --> 19:53.320
are here, this value is not going to match against that one, right? So if you try and do this, then

19:54.760 --> 20:00.520
it doesn't work, so you're going to get an error. In Ruby at least, this is going to, sorry, this is

20:00.520 --> 20:08.760
going to raise an error that just tells you I wasn't able to match it and in Ruby that was implemented

20:09.640 --> 20:20.120
using case. So the way it works is if you have a response or literally anything, you want to create

20:20.120 --> 20:26.280
your different patterns that you're going to want to match it against and one thing to note is that

20:26.280 --> 20:31.720
it's no longer, you know, to make the difference, you no longer use case when, using case in because

20:31.720 --> 20:36.600
in is going to be the keyword that's going to be mainly used for pattern matching even out of cases.

20:37.560 --> 20:44.440
So in this case, if the response that I get has a status success, I'm going to take whatever is in

20:44.440 --> 20:50.360
the body and put it there and otherwise if it's an error, I'm going to fail and put it over there.

20:50.360 --> 20:57.960
So it's, again, it kind of does the same. You could do the whole counterpoint to this presentation

20:57.960 --> 21:04.680
is I could do it with an if, else if. You always can, but I do think this is a bit more verbose and

21:04.680 --> 21:09.000
makes it more clear what you're trying to do because you can see the entire pattern. Whereas if you

21:09.000 --> 21:13.400
wanted to do an if, you would have to open response and do if the status is success, then I want to

21:13.400 --> 21:20.600
look at the body. For this example looks the same, but if you're dealing with big jasons from APIs

21:20.600 --> 21:25.880
where everything is nested like four times and you have response body value and then you take the

21:25.880 --> 21:30.520
first element and then the address and then whatever this starts to become more interesting.

21:31.080 --> 21:38.840
Another thing that we get with pattern matching that we can do with case when is we get access to

21:38.840 --> 21:45.880
guard closes. So whatever that allows us to do is I want response to match with this only if I'm not

21:45.880 --> 21:51.720
in maintenance. So this gives us a bit more control over whether or not we want the pattern to match

21:51.720 --> 21:57.880
because sometimes you might want to put patterns that are very similar, but you want to condition

21:58.360 --> 22:06.360
them to something different. Another example and another thing that we can do with pattern matching,

22:06.360 --> 22:19.160
so let's look at a more complex pattern. We have access to a lot of new tools. So for example, here,

22:19.960 --> 22:27.560
what this thing here means is that I want to match this pattern where the ID is whatever I put on

22:27.560 --> 22:33.240
top. If I didn't put it, then it would act as the one we store before and store it into the

22:33.240 --> 22:38.600
variable ID, but by doing this I can tell it no, no, no, use the value that's already there and match

22:38.600 --> 22:46.680
one that has 69 as an ID. I don't want anything else. And we also have access to splat operators,

22:47.640 --> 22:54.040
kind of. So simple splat for arrays, double splat for hashes, the same as with method arguments.

22:54.040 --> 23:00.840
So what this allows me to do is I want to take user and if the user is in an array with some

23:00.840 --> 23:05.160
elements at the beginning, some elements at the end, and then somewhere in the middle,

23:05.160 --> 23:12.520
an element with ID 69, I want to store the value of admin. So this is kind of equivalent to take

23:12.520 --> 23:20.200
my entire array and do a detect where ID 69 and then print admin. So this kind of does the same

23:20.200 --> 23:26.360
thing, but in a more flexible way because I can then kind of keep putting more patterns underneath

23:26.360 --> 23:39.960
to filter out more stuff or try to find more elements. So how does it work? I kind of, at this

23:39.960 --> 23:45.240
point in the talk, I kind of wanted to go through the same journey with pattern matching as I did

23:45.240 --> 23:50.920
with a simple case. So try to open it up and look at the VM instructions and see how it works and

23:50.920 --> 23:57.160
try and figure out what's underneath. The problem is that pattern matching is kind of new. So in the

23:57.160 --> 24:02.920
Ruby VM, that is a lot of instructions to go through. So I ain't going to go through everything.

24:03.080 --> 24:13.400
But there are a few things that we can see here. So for example here, we have the same response.

24:13.400 --> 24:17.160
So that's the beginning of our case. So this calls the thing that's going to go in the case that we're

24:17.160 --> 24:22.280
going to try and pattern match against the same. We're looking at pattern matching. So of course,

24:22.280 --> 24:27.000
the thing called check match, we kind of kind of assume that it's going to match or pattern

24:27.000 --> 24:31.880
against something. So the way, at least the way I understand it is that all of this is going to

24:31.880 --> 24:37.240
build or pattern and then it's going to match it to continue. And if we look at the way it builds

24:37.240 --> 24:45.320
the pattern, we can find one method that is interesting, which is this one, which is deconstruct

24:45.320 --> 24:51.080
keys. And after looking at it a bit more and going to read out the documentation, this is what

24:51.800 --> 24:57.320
Ruby used to do, at least for now, to do pattern matching. So you have two methods. One is called

24:57.320 --> 25:04.520
deconstruct keys that is used on patterns that are hashes. And another one is called deconstruct,

25:04.520 --> 25:14.840
which is used on pattern that are arrays. That make sense? And so this does all of the deconstruction

25:14.840 --> 25:22.360
and then if the pattern that you're sending doesn't respond to the deconstruct keys or the

25:22.440 --> 25:27.000
deconstruct method, then it's just going to give up and tell you to implement it yourself

25:27.000 --> 25:33.160
so that it works. And after that, it's more of the same thing, right? So that's the second

25:35.400 --> 25:38.760
pattern that we have. It's still trying to deconstruct them. And then eventually,

25:38.760 --> 25:42.440
if it doesn't find anything, it's going to return a no match error.

25:45.400 --> 25:51.320
So the interesting thing then is how do we implement it ourselves? So if you have your

25:51.320 --> 25:57.720
class and you want it to be, you want to use pattern matching on it, then one thing that you can do

25:57.720 --> 26:05.000
is use, is implement the deconstruct keys method. So in this case, we have a location and we want

26:05.000 --> 26:10.120
to have a latitude and a longitude in the deconstruct keys. And then that allows us every time we

26:10.120 --> 26:14.840
have a location to use pattern matching on it, because it's going to deconstruct this,

26:15.320 --> 26:22.440
deconstruct this, and then see what matches. And so in this case, and interesting thing also is

26:22.440 --> 26:28.440
inside of our pattern, we have access to everything that we've been talking about earlier. So in your

26:28.440 --> 26:35.800
pattern, you can put classes, you can put reg X, you can put ranges in this case. And the only thing

26:35.800 --> 26:41.880
I think we haven't seen before is this little thing magic that just takes like, it wants to match it

26:41.880 --> 26:47.240
against this and then store it into the variable that we can then use for anything else.

26:49.160 --> 26:53.160
And I think that's it. I've tried to go through everything.

27:01.800 --> 27:03.400
I sped through that one, sorry.

27:07.800 --> 27:08.760
We have so much time.

27:12.840 --> 27:13.800
I didn't.

27:15.160 --> 27:17.960
You used a variable that was not declared before.

27:18.600 --> 27:23.320
Yeah, probably. Where? In the right address before?

27:29.320 --> 27:29.800
One?

27:29.800 --> 27:32.920
latitude. Did you declare length to be equal to new before?

27:32.920 --> 27:37.480
No, you don't have to declare it before. Basically what this does is it takes this and then store it.

27:37.480 --> 27:43.400
It takes whatever matches here. So that would be technically this and then store it into the

27:43.400 --> 27:47.800
latitude variables. You don't have to declare it before. And what's the scope of that variable?

27:48.440 --> 27:53.800
It's going to be a scope to whatever the case is in. Right? So if your case is defined in a method,

27:53.800 --> 27:55.800
then you have access to it in the entire method.

28:03.640 --> 28:05.640
This is in current? Yeah.

28:07.880 --> 28:13.640
I think this might be, this might have been implemented in Ruby three.

28:14.920 --> 28:21.000
And the first occurrence of pattern matching, the one with the case in, was experimental in 2.7

28:21.000 --> 28:28.520
and then actually arrived in Ruby three. And they've been trying to push it a bit more in

28:28.520 --> 28:34.840
subsequent versions. So now, for example, you don't necessarily need to have case. If you want it,

28:34.840 --> 28:40.200
if you want to use pattern matching, then you can just write your variable in something and

28:40.200 --> 28:42.200
use it as a predicate to see if it matches or not.

28:45.240 --> 28:50.840
In your example where you're looking for an admin user in an array of users and you have those

28:50.840 --> 28:57.960
operations at the back, does that work if your admin user is the first or the last?

28:58.840 --> 29:00.840
Yeah, yeah, yeah, yeah. Then the, then the,

29:01.080 --> 29:04.520
Like it might not. Yeah, fair. Yeah, yeah, definitely fair.

29:05.560 --> 29:10.040
What this will do is it will put nil in here and nil in the other variable.

29:10.040 --> 29:13.480
Right? It's like there's nothing after, there's nothing before or there's nothing before.

29:25.480 --> 29:28.920
Yeah, that's the thing that I was a bit, if you about this,

29:29.800 --> 29:33.400
basically the, shit, I have to go through all the animations. Sorry, bear with me.

29:34.680 --> 29:38.680
It's going to scroll again on. Okay, sure, whatever, shit.

29:40.680 --> 29:45.640
The argument that it takes is in case you only want to deconstruct some keys.

29:46.680 --> 29:50.760
Right? So if that is, if you have a big object and you only want to deconstruct latitude,

29:50.760 --> 29:54.600
for example, you could work it this way. That's what it's supposed to do.

29:55.160 --> 29:58.200
In the example, I didn't go through the trouble of implementing all of it,

29:58.200 --> 30:00.840
because if I want to write code big, I can write too much code.

30:03.240 --> 30:03.960
And yeah, that's why.

30:06.920 --> 30:09.480
So it was deconstruct for arrays and deconstruct keys, though.

30:09.480 --> 30:09.960
Yeah.

30:09.960 --> 30:14.200
And you can define deconstruct as well. If you've got a class that implements an interval or something.

30:14.200 --> 30:16.120
Probably, yeah, yeah, I think so.

30:16.120 --> 30:25.560
Just to take how stable you think the syntax is. Do you think it's going to stay the same?

30:25.560 --> 30:26.520
Huh.

30:27.560 --> 30:30.360
Would you, would you, would you, would you want to do, for example, like the, the, the, the, the,

30:30.360 --> 30:39.000
the, the, the, the, the, the, the, I think it's going to stay the same. No, sorry.

30:39.000 --> 30:42.520
Yeah. I know I was thinking in my head, I think it's going to stay the same because it's the

30:42.520 --> 30:47.480
exact same syntax that Alexia uses, for example. Like they've probably been inspired from other

30:47.480 --> 30:52.440
languages and used it. And so I'm expecting it to stay the same. But then again, I don't know.

31:04.600 --> 31:11.480
I think right now I'm still, I'm trying, I tried to push for it in very simple use cases.

31:12.120 --> 31:18.680
So usually in a, if we get, if we have to make an API call, that's probably the best,

31:18.680 --> 31:24.120
like, foot in the door to get it working in your code basis. Like, because that's the thing that

31:24.120 --> 31:29.080
seems the most obvious, right? I get an answer and then I can, not only fetch the status,

31:29.080 --> 31:35.640
but assign everything in the answer and then give it to another method. I think that's a bit,

31:36.840 --> 31:41.320
not a frontend dev. So don't quote me on this at all. But it looks a bit like the object

31:41.320 --> 31:45.480
deconstruction thing from JavaScript. Or you can get an object and then assign all the variables

31:45.480 --> 31:49.800
into it. In this use case, I think it's a good first step to implement it in a code base. I

31:49.800 --> 31:53.480
wouldn't go all out and start putting deconstruct keys in every class.

32:05.240 --> 32:10.360
That would be really, I really hope that, I really hope they put it in Ruby at some point. I don't

32:10.360 --> 32:16.360
think that's in the plans right now. I think the idea, the main idea behind was, like, when they

32:16.360 --> 32:21.960
put it in Ruby at all, pattern matching in 2.7, it was kind of touch and go. People were discussing

32:21.960 --> 32:27.880
a lot about do we want this in our code base because pattern matching in the collective

32:28.600 --> 32:35.400
brain is usually more functional than object oriented. But now that it's there and it's past

32:35.400 --> 32:41.480
the experimental and it's now stable, I think they're eventually going to do it. It'd be a shame not to, right?

32:46.680 --> 32:50.200
Do you think some of this stuff is going to end up in the Ruby style guy?

32:51.640 --> 32:55.000
And be something like Ruby cop goes and says, no, no, you don't want to do that.

32:55.000 --> 32:56.040
You don't want to do that.

32:56.040 --> 32:57.320
You want to use this instead.

32:59.640 --> 33:04.680
Probably not in the near future. Because I think people are still very much like trying to figure

33:04.680 --> 33:10.600
out what the good style is. Even when I was preparing this, I couldn't find a lot of examples.

33:10.600 --> 33:15.720
So I kind of came up with what I think would look the best. But I don't think for now, at least,

33:15.720 --> 33:19.400
there are a lot of established guidelines.

33:24.520 --> 33:26.840
We good? Cool.

33:29.720 --> 33:33.560
Nice.

