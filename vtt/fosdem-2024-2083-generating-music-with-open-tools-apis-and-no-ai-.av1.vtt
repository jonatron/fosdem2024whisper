WEBVTT

00:00.000 --> 00:12.680
Okay. Thank you everybody. As this part of the slide says, my name is Steve, and as this

00:12.680 --> 00:16.520
part of the slide says, I'm a little bit of a geek. Now, if you've all turned up to the

00:16.520 --> 00:21.160
correct room, this is a talk about generative music. Over the course of the next 20 minutes

00:21.160 --> 00:25.560
or so, I'm going to be talking about some of the processes that I use to generate music

00:25.560 --> 00:30.840
with algorithms. I'll be looking at some APIs, not all of them. I'll be looking at some tools,

00:30.840 --> 00:36.440
not all of them. Doing some of the live coding environments that you may see around and talk

00:36.440 --> 00:41.360
about some other ideas that you might like to apply. Also, what's not in the talk is

00:41.360 --> 00:47.960
AI. There's a room downstairs for that. Everyone has been doing so much AI for the last year.

00:47.960 --> 00:53.560
I just said, I'll do something completely different. It's not that I hate AI. Last year,

00:53.560 --> 01:01.120
I wrote an album, five songs, four were co-written with AI, one wasn't. And I said, can you tell

01:01.120 --> 01:07.840
the difference? The answer was, no one so far has told the difference. Therefore, AI is not

01:07.840 --> 01:16.040
stealing our jobs. So, first off, who am I? What have I done to deserve a place on this

01:16.040 --> 01:22.880
stage? Or is this slide should be called the ego slide? This is where the speaker brags

01:23.200 --> 01:27.120
about themselves for 10 minutes. Everyone looks for the live streams of somewhere else in the

01:27.120 --> 01:33.080
building. I'm a computer geek. I'm a developer. Essentially, I've never done marketing, never

01:33.080 --> 01:40.040
done sales. I build stuff. I like building stuff. I build stuff in cloud. I build stuff on game

01:40.040 --> 01:46.840
consoles. I wrote a book about old retro computers last year. It was reasonably well accepted. I

01:46.840 --> 01:52.400
compose stuff. I've spoken at this conference a few times. And all that's really nice and fun

01:52.440 --> 01:57.440
and interesting. But what's more interesting is what's not on that slide. I'm not a professional

01:57.440 --> 02:02.520
composer. I make this stuff because I like it. I'm not a professional algorithm person. I do it

02:02.520 --> 02:10.000
because it's fun. That's a nice long-winded way of saying, if I can do this, anyone can do this. So,

02:10.000 --> 02:14.880
what is this? What are we going to do? So, the first thing up, I've got some audio on this, so I

02:14.880 --> 02:20.560
will have to put my mic closer to the laptop. So, the first thing is, let's look at simulating tape

02:20.600 --> 02:27.160
loops. Back in the 60s, there's a guy called Steve Reich, and he had this idea of having a piece of

02:27.160 --> 02:32.520
tape that just went around in a complete loop and then again on another machine running at a very

02:32.520 --> 02:38.200
slightly different speed. This calls sometimes the music would cry, sometimes it would separate

02:38.200 --> 02:45.000
apart. And this was really quite interesting if you want to spend 18 minutes listening to a New

02:45.040 --> 02:50.400
York preacher saying, it's going to rain, it's going to rain. So, it needs to say, no one has

02:50.400 --> 02:58.080
actually listened to this the whole way through. But today's your lucky day. It's okay, maybe not,

02:58.080 --> 03:05.600
we don't have time. So, this is a version of how to simulate a tape loop. And I'm going to do this

03:05.600 --> 03:13.920
with HTML5 JavaScript because JavaScript is the best language. Excuse me, because JavaScript is the

03:13.960 --> 03:22.000
best language. Correct answer. And it's all very simple. You create an audio context that just

03:22.000 --> 03:26.520
says, I would like to do some audio, please. You then say, I need to load a sample. I use the fetch

03:26.520 --> 03:31.320
library because everyone does. You bring it in, you do some munging of that data because you have

03:31.320 --> 03:38.240
to. And then you just say, I want to play the sample. And that's it, the job's done. Now, you get

03:38.240 --> 03:42.520
some additional things you can do once you've got that sample. You can say, right, well, I want to loop

03:42.640 --> 03:47.560
it between the one second mark and the two second mark. Just a parameter. You say, oh, I want to play

03:47.560 --> 03:53.760
it at the normal speed. Or if you change 1.0 to 1.1, you're playing it 10% faster. You change that to

03:53.760 --> 03:59.760
0.9, you change it 10% slower. If you want to use semi-tones, then math power 2 to the power of 1 over

03:59.760 --> 04:06.240
12 is the obvious mathematics you need to use. You can change the panning to move between the left

04:06.240 --> 04:11.400
and the right speakers. And you're doing this connect thing. All of the system is just basically,

04:11.440 --> 04:15.840
you connect this node to that node. You connect the sample node to your panning node. You connect the

04:15.840 --> 04:21.320
panning node to your audio context on the output. And that's it. It's the sound of the thing, any kind

04:21.320 --> 04:26.880
of pipelining system, you're doing it in the browser. So the first attempted audio, let's see how this

04:26.920 --> 04:43.920
goes. And you can see they're slightly in time. Completely out of sync. And then after a while, they're

04:43.920 --> 04:51.960
back in time again. And if anyone wants, that's an audio sample from Nine Inch Nails, which we'll

04:52.000 --> 05:00.520
come back to later on. If anyone was interested about the math power 2 function, if you're looking at

05:00.520 --> 05:06.680
the mathematics of music, every note and the note, an octave above it, is double the frequency. So you've

05:06.680 --> 05:11.200
got to do those little pieces of mathematics if you want semi-tones, but that's just math. That's

05:11.200 --> 05:16.880
easy enough, right? So let's create a remix. We know how to play sounds. We know how to load the sound

05:16.920 --> 05:22.960
in. We know how to play it. We know how to change its pitch. So what we'll do is find some source

05:22.960 --> 05:29.560
material. Nine Inch Nails, I think, for the seventh album called the slip, they made the album, I say

05:29.560 --> 05:35.720
they trend made the album, and then released under Creative Commons license all of the individual

05:35.720 --> 05:40.120
tracks from the album. So you could take any individual part, you could take the drums, you could

05:40.120 --> 05:44.320
take the bass, you could take the synths and guitars, and you could then do whatever you want with them

05:44.640 --> 05:52.680
under the Creative Commons license. So I did. I found some sounds that I liked. I chopped them up. I

05:52.680 --> 05:58.680
decided two parameters. How long into the song before I start playing that sample? And then how

05:58.680 --> 06:04.680
often after that do I play that sample? And that encode looks very, very simple. You load them in,

06:04.680 --> 06:11.480
you have two numbers. I have used prime numbers here. All of these are prime. There's a reason for

06:11.520 --> 06:17.200
that. I like prime numbers. I also know that because they're prime, they are going to clash less

06:17.200 --> 06:22.160
frequently. If I had the numbers two and four, those sounds would always come together. But with

06:22.160 --> 06:28.360
the primes, there's a longer time before they clash again. So in a lot of my music, you'll spot

06:28.360 --> 06:34.400
that if you are so inclined. We then write a little loop. We play samples, we do intervals and all

06:34.400 --> 06:38.840
the normal JavaScript loveliness, and we get an industrial remix that sounds like this.

06:41.480 --> 07:06.200
Now, you may or may not consider that music, but I do. And I'm the one with the microphone.

07:06.640 --> 07:13.480
So now we're playing samples, we're looping samples, we're doing all sorts of clever stuff. Now,

07:13.480 --> 07:19.120
it's your turn to go and do it. I did that because I found some sounds that I like to use. How would

07:19.120 --> 07:25.120
I describe to a room full of people how to build your own symphony? Well, first off, pick six notes

07:25.120 --> 07:32.240
that work together musically. Doesn't matter if you're not musical. Go to the library. Find some

07:32.280 --> 07:38.680
sheet music from some old white dude who's been dead 200 years, all out of copyright. Turn to the

07:38.680 --> 07:42.800
very last page, because the last bit of the symphony is when all the instruments come together,

07:42.800 --> 07:48.280
go da-da! So you know all of those notes are going to sound good together, whatever six you pick.

07:48.280 --> 07:56.400
Pick any six of those notes. Go to Google and map the notes on that page to what you actually have

07:56.560 --> 08:03.000
to play. Then go and find six sounds. They can be short sounds, they can be loop sounds, they can be

08:03.000 --> 08:09.400
long sounds, it doesn't matter. Pick six sounds that you like. Then attach one of those notes to

08:09.400 --> 08:15.560
one of those sounds. Pick a start point, pick a loop time, and congratulations! You've just written

08:15.560 --> 08:24.720
the Brian Eno album. That's all there is to it. And let's face it, if just, if 10% of you go away

08:25.040 --> 08:31.080
and try that now, next year we're going to have a full schedule of that music. And I can sit back

08:31.080 --> 08:36.600
there drinking my beer in peace. So what if we don't want just sounds? What if we want to create

08:36.600 --> 08:41.760
actual notes? And we want to decide what note goes where. So at that point we're moving to MIDI.

08:41.760 --> 08:48.480
MIDI is a specification about notes, not sounds. MIDI says play the middle C, but it doesn't say

08:48.480 --> 08:52.920
how the middle C should sound, because middle C on a piano sounds different to middle C on a violin.

08:53.280 --> 08:59.600
I use these libraries because I wrote them, not because they're the best, it's that because I

08:59.600 --> 09:04.280
wrote them I know how they work. That's the only reason. There are better libraries out there,

09:04.280 --> 09:09.160
go use them, but just find some library that lets you generate a MIDI file. That's what you need

09:09.160 --> 09:14.640
to do. Then you create an algorithm. Have an idea, doesn't matter what it is, have an idea,

09:14.640 --> 09:20.360
generate a series of MIDI notes, let the sequencer play them, assign a different sound to each of the

09:20.360 --> 09:28.440
notes and see what you come up with. And this is where I started. Back in 1996, I was reading a

09:28.440 --> 09:35.480
book on modern music, and by modern we're talking 1950s, and there was a piece by Giorgio Sighetti

09:35.480 --> 09:42.320
who poems symphonique. In this he said, this piece of music has 100 metronomes all ticking

09:42.320 --> 09:49.920
slightly out of time with one another. And I lived in a small seaside town, in the words of the song

09:49.960 --> 09:56.160
they should have closed down. They call it holiday resort. I live there, I call it a last resort.

09:56.160 --> 10:01.680
Actually, I really hope we're not recording this because this might go back to someone I used to go

10:01.680 --> 10:11.320
to school with. We had no record stores of any worth. I like the idea of poems on the field.

10:11.320 --> 10:16.280
I was like, what on earth does 100 metronomes ticking out of time actually sound like? I had no idea.

10:17.040 --> 10:22.760
And this is before Tintorwebs, Amazon, there were no record shops selling this stuff. So I just wrote a

10:22.760 --> 10:29.200
MIDI library and I simulated it myself. But I thought, well, instead of doing a metronome, because

10:29.200 --> 10:35.960
metronome being mechanical, will do exactly what you say. I said, well, I've got a computer. Back in

10:35.960 --> 10:39.960
the 50s, they didn't have a computer. So what I'm going to do is I'm going to sign a different note.

10:39.960 --> 10:45.120
I'm going to have one note that plays once a bar, which is that one at the top, then I'll have a note

10:45.160 --> 10:50.320
that plays twice a bar, then a note that plays, you know where I'm going with this, right? A note that

10:50.320 --> 10:57.120
plays four times and five times. And because I had a computer that could play 32 notes at once, I decided

10:57.120 --> 11:03.200
I would build up to that. And the code is very, very simple. You pick a series of notes that work

11:03.200 --> 11:08.960
together. You have a massive loop that just says play this note, wait an amount of time, then play the

11:08.960 --> 11:15.760
note again, because MIDI is a serial protocol. It is all about time. You play a note, time happens, you

11:15.760 --> 11:22.960
wait, play another note. That's what I did. And I created a piece of music with a bunch of channels

11:22.960 --> 11:27.560
that sounds something like this. One note, two.

11:27.560 --> 11:47.560
And it gets quite chaotic to the point of you can't hear any particular notes or beats anymore. And at the end,

11:48.560 --> 11:57.560
you notice I've also changed the instrument because the important part here is the refining bit. I was going

11:57.560 --> 12:05.560
through, I say this sounds very archaic. So what I did is I introduced every note individually. So you could

12:05.560 --> 12:11.560
hear them coming in, hear them dropping out. I morphed the sound of the piano into the sound of a harp. And I

12:12.560 --> 12:19.560
slowed the whole thing down. So as you get to the end, it just feels like very gentle and plucking. Completely different

12:19.560 --> 12:26.560
to where you start the piece. And that's what I wanted to portray with the idea. So if you've got an idea, you just

12:26.560 --> 12:32.560
generate music. You could use the digits of Pi. You could use gray codes. So gray codes is basically a binary system

12:32.560 --> 12:48.560
where only one binary digit changes from one step to the next. So I've done this. Every melody is different.

12:53.560 --> 13:00.560
Every single one of those is different to the one before. But it sounds identical, but it's not quite. Which means it

13:00.560 --> 13:06.560
doesn't fall foul of stupid laws that say you are not allowed to play repetitive music. Because not one bar is repeated

13:06.560 --> 13:13.560
for eight minutes. Everyone is different. Which you can only sense of being do if you're coding this stuff up. You can

13:13.560 --> 13:20.560
use prime numbers. I've used prime numbers a lot. You've seen. I wrote a piece of music for an audio book. The audio

13:20.560 --> 13:26.560
book talks about, it's a story about going to Mars and bringing a martian back to Earth. And I thought, what's the only

13:26.560 --> 13:34.560
common language between Earth and Mars? I figured mathematics and prime numbers. So all the sounds on here are generated by

13:34.560 --> 13:54.560
primes. Audio book bit. All generated by whatever the number happens to do. So I don't have control. I set this up and go,

13:54.560 --> 14:03.560
off you go. And sometimes it doesn't work. Sometimes it's a load of junk. But that's where the human comes in. I edit this

14:03.560 --> 14:10.560
stuff. I look at it and go, well, this did a bad job. That did an okay job. I keep going on. I've done something with all of these.

14:10.560 --> 14:21.560
We'll come to these later. And the online encyclopedia of integer sequences, brilliant. You'll never get bored. But the Fibonacci

14:21.560 --> 14:29.560
one on there is an interesting case in point. Fibonacci numbers generally shouldn't work for a music composition. Fibonacci

14:29.560 --> 14:34.560
numbers, you have two numbers, you add them up, that's your next number. You add the last two numbers, you add them up, that's your next

14:34.560 --> 14:41.560
number. And you go on like that. But very quickly, you run out of numbers. Or more precisely, you run out of keys on your piano.

14:41.560 --> 14:50.560
Because after about two bars, you've just run out of notes. So I said, well, obviously Fibonacci is useless. We cannot use this for

14:50.560 --> 14:59.560
music. Then I actually realized, well, what if you go backwards? What happens to Fibonacci numbers if you go the other way?

14:59.560 --> 15:06.560
And this is what happens. They alternate between positive and negative. So okay, there's something that means they can't go out of a

15:06.560 --> 15:17.560
range that quickly. So I said, okay, there's an idea here. But what is it? Do these notes represent semitones, tones? Are they going to be

15:17.560 --> 15:26.560
part of a key? Are they not part of a key? What are they? I didn't know. So what do I do? I wrote an algorithm that processes all of them.

15:26.560 --> 15:36.560
It just generated two hours of music essentially, using every combination of everything I could think of, until it produced this piano piece.

15:47.560 --> 15:52.560
You can hear it's going up bits and down bits and up bits and down bits following the patterns.

16:06.560 --> 16:16.560
And this is just me picking up the best bits of what it did. So naturally, it's not an AI here. It's a more artificial stupidity on my part.

16:17.560 --> 16:26.560
But it sounds okay. It's not awful. I've heard worse. I've written worse, to be fair. And if you're wondering why I haven't gone into the

16:26.560 --> 16:33.560
whole Web MIDI thing, I gave a talk on this a number of years ago. I refer you to the link if you're interested in the Web MIDI components.

16:33.560 --> 16:40.560
So we've looked at taking samples, looping them, and doing funny things with samples. What if, and looking at the MIDI, how do we want to

16:40.560 --> 16:46.560
generate actual notes? But what if we want to generate the sounds? Where there are a whole load of ways of generating sounds via little

16:46.560 --> 16:54.560
algorithms that you code up. So, Mozzie, for example, if you like arduinos, you've got this nice little soft synth thing inside an arduino.

16:54.560 --> 17:01.560
This was me building craft work out of four arduinos and another arduino to synchronize them all together.

17:02.560 --> 17:14.560
The very raw 8-bit sounds. So if you like that crunchiness in that old techno, they've got a drum coming in a minute.

17:19.560 --> 17:29.560
Very raw, very rough, but if that's the type of sound you're going for, all you need is an arduino. Synchronize them with I2C.

17:29.560 --> 17:41.560
Jobs are good. If you've got a Raspberry Pi, you can get an entire DX7 synthesizer into a Raspberry Pi that boots up from the flashcard in

17:41.560 --> 17:48.560
probably much zero seconds. In fact, if you've got a decent Raspberry Pi, you can get eight of them multiplexed on the same Raspberry Pi,

17:48.560 --> 17:57.560
which means you can build yourself a portable DX7 synthesizer. It's fun, it's great fun. Sonic Pi is a lot of people use this for the live coding

17:57.560 --> 18:07.560
thing, for its music. Fluid synths, if you're old school and you like the font synths, there's a synth font thing where instead of fonts being used for typography,

18:07.560 --> 18:16.560
they had fonts for sounds. And there's a whole fluid synth thing that lets you create, you know, use your own fonts.

18:16.560 --> 18:25.560
Super Collider, you'll probably recognize this as something that looks like code. That's something like a drum.

18:25.560 --> 18:35.560
That's what it's doing. C-sound is a much more low level approach to the same idea. Here you can see I'm programming in various frequencies,

18:35.560 --> 18:51.560
inputs and outputs, and at the end I just say make some tones. Or if you want them together. It's craft work in the box.

18:52.560 --> 19:01.560
This is a new one on me, so I don't know if it's pronounced glikol or glycol. Again, it's another programming thing. You say, oh, I have a bass drum running at speed four,

19:01.560 --> 19:08.560
I'm sequencing this 60 and this is how it works. And then you piece them all together at the bottom saying this is my output, and it sounds like this.

19:08.560 --> 19:23.560
Mercury is another one that I haven't heard of. It's the same approach again. You say these are the type of sounds I want and this is how I want it working,

19:23.560 --> 19:38.560
but the timbre is so different. Possibly a bit early in the day for this one. But it's all generated from those six lines of code.

19:38.560 --> 19:46.560
So you can imagine generating that and then playing around with it in real time. If you're someone that likes to use desktop, there's a whole load of other stuff.

19:47.560 --> 20:01.560
I did a thing inspired by a FOSDEM trip back in, I think, 2020. I gave a talk where I was talking about Web MIDI and someone said, you know what, wouldn't it be great if you could change the thing that you just did?

20:01.560 --> 20:12.560
Because I'd written a piece of music that was a fractal. You have a melody line and if you play every other note of the melody line, you have exactly the same melody line again, just half as long.

20:12.560 --> 20:21.560
And if you take every other note of that melody line, you've got the same melody line again, but just half as long and so on, all the way down to a single note.

20:21.560 --> 20:27.560
And someone said, that's a really good idea. Could you do a whole bigger version of it? So I ended up doing that.

20:27.560 --> 20:41.560
And I called it Symphony 1.1. I generated an interface which was using a graphics library. I generate the score using ABC, so you can actually see it, and then it plays in the web browser.

20:41.560 --> 20:48.560
Which seems crazy. You're generating an entire symphony in a web browser. So that's obviously not going to work as a live demo, is it?

20:48.560 --> 20:51.560
Yeah, okay, let's give it a go.

20:51.560 --> 20:55.560
Now, is that actually... No, that's not going to be on the screen, so it's not...

21:00.560 --> 21:06.560
So here we are. What we're saying is these are the notes where you're going to play every other.

21:07.560 --> 21:19.560
Pick whatever you like. Generate the score. There we go. Programmed and actually generated the score, rendering, and then we just play.

21:19.560 --> 21:44.560
And you can export that out as MIDI, play it with real humans or whatever you like. So with that in mind, I'm going to put this as some background music.

21:44.560 --> 21:49.560
While I switch back to some actual slides, this is also generated algorithmically.

21:53.560 --> 22:05.560
I'll say, thank you for your attention. This is me. I'm going to update my scorecard there. Okay, 23 postems. That's now 24. 24 talks. That's me done. Thank you all.

22:14.560 --> 22:17.560
Now, is it time up or is there time up and time for questions?

22:20.560 --> 22:29.560
Okay, yeah. So now I've told you how I do it. You probably want to know why. And I don't have an answer for that, so find another question.

22:33.560 --> 22:37.560
There's a question at the back. Do we have a microphone or just shout? I'll repeat.

22:38.560 --> 22:50.560
I'm wondering about what to do with harmony. Because the power is all the melodies, do you usually state a single key or do you have similar algorithms for harmonic modulation or stuff like that?

22:51.560 --> 23:02.560
So the question is, what do I do about harmony? And my knowledge of harmony is very limited. So I am generally sticking to a key. I'm generally sticking to the basic major and minor chords in that key.

23:02.560 --> 23:14.560
And then I will use a process that say, well, what note is in this key that fits the chord patterns that I'm going to use? And if I'm doing a basic CFG chord pattern, I'll go, right, well, I can use one of these three notes and I'll do that.

23:15.560 --> 23:28.560
In the Fibonacci example, which I played earlier, I used a process called tintin' boole, where you look at the notes you're playing and you just say, okay, well, I'll play the next note down that is either a B and F or an F sharp.

23:28.560 --> 23:33.560
And it just picks one. So I don't get to choose what the note is, I just get to choose the algorithm.

23:33.560 --> 23:51.560
And this is something that a lot of composers started doing in the late 1940s, 50s, because they just come through a world war. They weren't happy with it. They didn't like the fact that the people of the time were saying, you cannot like music this way.

23:52.560 --> 24:05.560
You have to do this with music. So they were saying, okay, well, how do I know what I'm doing? It might be subconscious. So they came up with a series of rules and they apply the rules and that's what I'm doing, just picking the rule and let's running with it.

24:05.560 --> 24:07.560
So good question to end on.

