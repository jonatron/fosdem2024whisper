WEBVTT

00:00.000 --> 00:12.000
Hello everyone, my name is RÃ©mi Nicole, I'm this dude on the internet and I work for

00:12.000 --> 00:16.760
the CEA which is the commissariat for atomic energy and alternative energy.

00:16.760 --> 00:24.600
But the CEA is quite big so I should say technically that I'm CEA, DRF, IRFU, DISC

00:24.600 --> 00:25.760
and all the way at the bottom.

00:25.760 --> 00:26.760
What do we do?

00:26.760 --> 00:34.080
Well, we do control systems for big physics experiments like particle accelerators.

00:34.080 --> 00:35.920
And so what is a particle accelerator?

00:35.920 --> 00:38.880
Basically, it's a bunch of hardware.

00:38.880 --> 00:45.440
There is a plasma chamber that just exposes protons and then you need to give protons

00:45.440 --> 00:51.480
some energy, you need to control them and you need to do some diagnostics.

00:51.480 --> 00:57.400
For example, if you want to make the protons turn, you need to have an industrial power

00:57.400 --> 00:59.480
supply and an electromagnet.

00:59.480 --> 01:05.160
And so you need to control the power supply to control the strength of the magnet.

01:05.160 --> 01:11.240
And so we use a framework which is called EPIX, DayLake acronym in this space.

01:11.240 --> 01:16.280
So it means experimental physics and industrial control system.

01:16.280 --> 01:18.880
And it's quite old software.

01:18.880 --> 01:23.240
I'm showing you the old logo because it quite explains well what it does.

01:23.240 --> 01:30.160
It's a single protocol which is represented by the line and some clients and servers.

01:30.160 --> 01:37.480
So we have, for example, the input-output controller which does the control of the power

01:37.480 --> 01:39.520
supply, for example.

01:39.520 --> 01:44.560
And we also have some graphical clients, alarm system and some archiver.

01:44.560 --> 01:47.440
And so what do we do when you're an EXPAN?

01:47.440 --> 01:49.120
Well, you package it with NICS.

01:49.120 --> 01:54.400
And so you can see the logo of NICS kind of eating the EPIX logo.

01:54.400 --> 01:59.040
And I'm not going to talk too much about that because chances are you don't have a particular

01:59.040 --> 02:02.280
accelerator at home, so you won't really need this project.

02:02.280 --> 02:08.560
To be fair, someone did use EPIX to control a beer brewing system.

02:08.560 --> 02:12.960
Yeah, beer people are weird.

02:12.960 --> 02:16.240
And so what in terms of network?

02:16.240 --> 02:21.600
So you need a network as isolated as possible so you don't exactly need to do this much

02:21.600 --> 02:22.600
update.

02:22.600 --> 02:24.520
And usually you don't want to update something.

02:24.520 --> 02:31.840
If something works, you don't want to touch it because it takes a lot of money to restart

02:31.840 --> 02:34.240
the accelerator.

02:34.240 --> 02:40.040
And so what you need usually is a good resilience of the system.

02:40.040 --> 02:42.040
You have a lot of assumptions to rethink.

02:42.040 --> 02:48.880
And we could ask you, we could be asked to modify some software 10 years after it was

02:48.880 --> 02:51.040
in production.

02:51.040 --> 02:56.040
And so what I'm going to present is how we use NICS and EXPAN for this kind of resilience.

02:56.040 --> 03:05.480
So first things is we use Flake for pinning projects, which is good because anyone can

03:05.480 --> 03:10.600
just pick up the project back up and it should compile and work.

03:10.960 --> 03:18.320
There are some exceptions that you have when you have such a large time scale.

03:18.320 --> 03:21.560
For example, some software might not be available in 10 years.

03:21.560 --> 03:25.320
Maybe GitHub went down because Microsoft or something.

03:25.320 --> 03:34.880
And what we have as a solution is to do a lot of CI and use our own cache server extensively.

03:34.880 --> 03:38.280
And by caching, I mean caching really everything.

03:38.280 --> 03:43.640
So usually what you want to cache is the runtime dependencies, but what we want here is we

03:43.640 --> 03:47.400
also want to cache every build time dependencies.

03:47.400 --> 03:54.160
And so what we should have as a system is that even 10 years after it was deployed, we

03:54.160 --> 04:00.000
could modify anything down the stack and we could pick any project back up.

04:00.000 --> 04:06.800
We also need to cache fake inputs, which is a bit weird to do.

04:06.800 --> 04:12.480
We also need to cache NICS itself because maybe in the future NICS won't evaluate, we

04:12.480 --> 04:17.680
will have some deprecation and won't evaluate the old NICS code.

04:17.680 --> 04:22.560
And so the system that we have, thank you Maurice for working on this, is that we have

04:22.560 --> 04:30.160
a CI server, in our case it's a GitLab CI, which will build our derivation and we also

04:30.160 --> 04:39.160
build a build time derivation, which depends on all the build dependencies of the software.

04:39.160 --> 04:43.640
And then the CI we call a webhook in the cache server and the cache server will actually

04:43.640 --> 04:47.080
pull all of those dependencies.

04:47.080 --> 04:54.360
And why do we have a separate cache server is that with this system we can use profiles

04:54.760 --> 05:02.520
because over time the cache server will fill up and so we need to figure out what old version

05:02.520 --> 05:06.120
of the software we need to clean.

05:06.120 --> 05:12.440
Yeah, I have a hopes that NICS can be used for building resilient systems.

05:12.440 --> 05:18.760
And yeah, if you're curious, here's some links.

05:18.760 --> 05:24.160
And if you want to build time derivation, there's an example code here.

05:24.160 --> 05:25.160
Thank you.

