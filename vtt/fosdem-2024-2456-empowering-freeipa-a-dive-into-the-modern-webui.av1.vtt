WEBVTT

00:00.000 --> 00:07.000
So ready?

00:07.000 --> 00:09.000
Okay.

00:09.000 --> 00:15.000
So, yeah, I have a huge disclaimer before I start.

00:15.000 --> 00:22.000
It's that this talk I'm giving now, it was supposed to be done by Carla, who drives this

00:22.000 --> 00:24.000
effort in Rehat.

00:24.000 --> 00:34.000
So, yeah, she was explaining me a lot of things, a lot of things that I hope I will remember.

00:34.000 --> 00:44.000
So, yeah, and also if you have challenging questions, we will probably need to get redirected to Carla somehow.

00:44.000 --> 00:49.000
So this is all about the web UI, the free API web UI.

00:49.000 --> 00:58.000
Okay. So, yes, I just would like to go quickly through the agenda.

00:58.000 --> 01:05.000
So I'm planning to, on doing a very quick overview of the background and historical context.

01:05.000 --> 01:09.000
Then I'll talk about the main motivation for the chain.

01:09.000 --> 01:14.000
We will see the technology stack transition from the current one to the new one.

01:14.000 --> 01:23.000
And this some stack transition not only applies to the technology or the components,

01:23.000 --> 01:29.000
but also has implications on the whole testing framework and documentation.

01:29.000 --> 01:37.000
So then if there is no demo effect, we will have a look to the modern UI from a live and public instance

01:37.000 --> 01:41.000
that all of you will be able to access as well.

01:41.000 --> 01:47.000
And you can play, if you have your laptop on, you will be able to play with it as well as we speak.

01:47.000 --> 01:55.000
And finally, yeah, before the Q&A, we will have a look to the future roadmap because this is a working progress.

01:55.000 --> 01:58.000
We haven't implemented all the functionality yet.

01:58.000 --> 02:04.000
We have big pieces, but it's not ready yet and we are working in upstream, you know.

02:04.000 --> 02:11.000
And what is more important, we will also cover how you can contribute to it as well.

02:11.000 --> 02:15.000
And then, yes, this is kind of the background.

02:15.000 --> 02:25.000
Free API is an identity management solution combining Linux, 3D9DS, MIT, Kervos, NTP, DNR, DocTag, Certificate System.

02:25.000 --> 02:32.000
I mean, one of the most important aspects is that it provides a centralized authentication authorization

02:32.000 --> 02:36.000
built on top of very well-known open source components, as you know.

02:36.000 --> 02:42.000
And it consists of a web interface, the web UI, and a command line administration tools.

02:42.000 --> 02:53.000
And, yeah, the very first version was released in August 2007, so it's been a while, the first version.

02:53.000 --> 03:04.000
And at that point in time, yeah, in the very beginning, one of the main goals, it was simply to have party TV between the UI and the click commands

03:04.000 --> 03:10.000
so that you get the same stuff from the web UI and also from the click commands.

03:10.000 --> 03:14.000
So that was one of the main goals at the very beginning, very long time ago.

03:15.000 --> 03:23.000
And the first implementation was based on Turbogears, which is, as you know, probably a Python web framework,

03:23.000 --> 03:29.000
consisting of Seral, WS-GNA components that this is still active if I'm not mistaken.

03:29.000 --> 03:33.000
So there is still activity in GitHub.

03:33.000 --> 03:38.000
So this web UI consisted of some sort of a tool wrapper,

03:38.000 --> 03:46.000
capable of interacting with the IPA server through the IPA IPI commands.

03:46.000 --> 03:54.000
And it was capable of sending IPA server commands, fetch the data, and modify before displaying.

03:54.000 --> 03:56.000
So very basic thing.

03:56.000 --> 04:04.000
So as you can imagine, during those days, no React, no Angular, so they had yet to emerge.

04:05.000 --> 04:08.000
It was a plain JavaScript in the end.

04:08.000 --> 04:14.000
And there was a lot of limitations, like it was necessary to optimize the number of HTTP requests

04:14.000 --> 04:18.000
and also minimize on how the JavaScript files exist.

04:18.000 --> 04:24.000
So in the end, we ended up using a lot of files for the web UI.

04:25.000 --> 04:35.000
So the first significant evolution of the web UI was driving by the Dojo library.

04:35.000 --> 04:44.000
So with the help of this library, it was possible to transform free API JavaScript packages in AMD modules

04:44.000 --> 04:50.000
so that it was possible to build into a single file, and this was helping a lot with performance.

04:50.000 --> 04:56.000
We managed to reduce all this inside number of JavaScript files to be processes.

04:56.000 --> 05:09.000
And then around 2014, all the styles and guidelines for UI, for UX, for the web UI, you know, were adjusted.

05:09.000 --> 05:17.000
This was done to align with the Red Hat, Common User, Environment, RQ, you know,

05:17.000 --> 05:20.000
which later became the pattern fly.

05:20.000 --> 05:25.000
The pattern fly that you know today comes from the Red Hat Common User and Environment.

05:25.000 --> 05:34.000
So basically, pattern fly is a set of best practices to provide users

05:34.000 --> 05:41.000
and unify them into the experience when navigating through the UI.

05:42.000 --> 05:48.000
So, yeah, and this is how it looks like the current web UI, the one that you can see today.

05:48.000 --> 05:55.000
So, yeah, so this is why we summarize somehow why are we changing it

05:55.000 --> 05:58.000
and what are the main motivations for this change.

05:58.000 --> 06:04.000
First of all, the current web UI is following pattern fly 2 and it's unsupported.

06:04.000 --> 06:11.000
So, some of the functionality that we need, this is kind of blocking us somehow

06:11.000 --> 06:17.000
to implement new features in the web UI because we are still following the pattern fly 2.

06:17.000 --> 06:28.000
So, it makes evolving the UI very difficult and what is more important is to stop using outdated tools and libraries

06:28.000 --> 06:34.000
like the Dojo library that I was talking about before that is going to be replaced by React.

06:34.000 --> 06:43.000
So, and then how are we doing, yeah, and this slide is somehow trying to summarize how are we going to do this.

06:43.000 --> 06:48.000
So, it's basically following some sort of guiding principles.

06:48.000 --> 06:55.000
So, the most important thing for us is to minimize the disruption with our assistant users.

06:55.000 --> 07:01.000
So, this is like when you go to the supermarket and the location of all the products is changed.

07:01.000 --> 07:08.000
Every time you go to the supermarket you are unable to find the things because they change the things so that you spend more time on the supermarket and buy more things.

07:08.000 --> 07:11.000
So, we are not going to follow that strategy.

07:11.000 --> 07:15.000
So, in the new web UI you will find all the things in the same place.

07:15.000 --> 07:21.000
So, we will focus more on improving the components and yeah.

07:22.000 --> 07:29.000
So, then now you can see the technical stack transition that we are making.

07:29.000 --> 07:36.000
Okay, on the left you can see the current web UI, all the technologies we are using there and this is what we are moving now.

07:36.000 --> 07:40.000
Okay, so the first one is pattern fly from the version 2 to the version 5.

07:40.000 --> 07:46.000
Okay, these are all the guidelines I was mentioning at the beginning and best practices.

07:46.000 --> 07:59.000
Okay, then we are going to move from dojo to react which is more modular content and is based on components and is kind of the modern way.

07:59.000 --> 08:03.000
And another one which is a very important piece is how we test the web UI.

08:03.000 --> 08:10.000
We are currently using PyTest and we are going to replace that by Cypress and Cucumber.

08:10.000 --> 08:19.000
As you know these two technologies follow the behavior driving test.

08:19.000 --> 08:28.000
They are more human readable. It is super easy to test with Cucumber and Cypress and yeah, this is an important change as well.

08:29.000 --> 08:36.000
So, okay, yeah, let's start with the comparison between the old one and the new one.

08:36.000 --> 08:42.000
So, the most significant one I think is the navigation bar.

08:42.000 --> 08:56.000
So, instead of having it there and the sub task, now we have it on the left bar and it is very well organized in the sense that all the sections,

08:56.000 --> 09:03.000
they depend on each other. We have three levels now and then you can collapse and expand as you go.

09:03.000 --> 09:09.000
So, this is kind of a huge improvement.

09:09.000 --> 09:19.000
And then, and it is always visible and now you have the ability also to hide it and have more space for the other bar.

09:19.000 --> 09:30.000
Another big change in this comparison is that the settings form and now we implemented a very cool thing here is the jumping links that we have here.

09:30.000 --> 09:41.000
Okay, so you have them available all the time and then you can click on them and then they will move you to the correct view.

09:41.000 --> 09:47.000
So, another one is that all these buttons, they are floating buttons and they will stay there all the time.

09:47.000 --> 09:56.000
So, also the tables, they are kind of refactored now and this is now much more clear as you can see, you know.

09:56.000 --> 10:05.000
So, another one is the scrolling. This is another important one because in the old one, when you were scrolling through all the list of users, for instance,

10:05.000 --> 10:13.000
I mean, you lose the navigation bar. I mean, the whole UI was scrolling. So, now this is not happening anymore.

10:13.000 --> 10:20.000
And now you can scroll and then you will have all the time the navigation bar there. Okay.

10:20.000 --> 10:26.000
So, this is a very nice improvement as well. Yes.

10:26.000 --> 10:33.000
So, let's continue then about modernizing the UI. So, this is kind of the architecture. We're following.

10:33.000 --> 10:40.000
Okay. So, on the left part you have the front end. You have the modern web UI is sitting on React.

10:40.000 --> 10:49.000
Okay. The React is kind of umbrella for all those libraries. From top to bottom. Then we have butterfly 5 that we already talked about that.

10:49.000 --> 10:55.000
The testing libraries, it's capable of connecting with the testing libraries with Cypress and Cucumber.

10:55.000 --> 11:05.000
Then we have the React router library that this is providing the multi-paging functionality.

11:05.000 --> 11:17.000
And this is because React's only built single-page applications. So, this library provides the feeling of moving through multiple pages.

11:17.000 --> 11:27.000
Okay. So, this is why we are using that one. And as you can see, we have the internalization one here, but with dots.

11:27.000 --> 11:36.000
With dots because we haven't implemented yet. This is not available. But it is on our plan and we need to investigate and see what will be the design.

11:36.000 --> 11:43.000
How can we connect that library also with React so that we can also cover different languages and stuff like that.

11:43.000 --> 11:51.000
And then the communication layer is one of the most important libraries that we are using. It's using RTK query library.

11:51.000 --> 11:59.000
And we are using this one because the connection with the IPA server is through RPC.

11:59.000 --> 12:10.000
This is one of the best libraries to do so. So, basically, from the modern web UI, from the forms, we are kind of collecting the data.

12:10.000 --> 12:20.000
And then we send an API call to the IPA server. Then we grab the response back and then we process the data that we show in the web UI.

12:20.000 --> 12:34.000
This is the way it works somehow. Yeah, basically, this RTK query is capable of performing group operations in JSON RPC.

12:34.000 --> 12:40.000
That's the whole idea. So, yeah, let's continue.

12:40.000 --> 12:52.000
Yeah, this is about the testing framework I was mentioning at the beginning. So, we moved from PyTest to Cucumber and Cypress using the behavioral driving development.

12:52.000 --> 12:58.000
This method that you know is more human readable and then implemented tests now.

12:58.000 --> 13:06.000
Super easy, but you are going to see that with this sample, this side-to-side comparison. This is the old version. This is PyTest.

13:06.000 --> 13:14.000
And this is the new one. It's more oriented on the user. So, you just describe what do you want to do in the web UI.

13:14.000 --> 13:23.000
Like adding a user. Okay, I open the side menu. I click on this and click on that. And this is the test. All right.

13:23.000 --> 13:31.000
And even better, I think I have a video. It was done by Michal Polovka, one of my colleagues. He's working on this.

13:31.000 --> 13:41.000
Yeah, it's working. Let's reproduce it. So, this bit is really kind of...

13:41.000 --> 13:52.000
Yeah, you are going to see now how one test is executed. This is going very fast because it's supposed to be fully automated, you know.

13:52.000 --> 14:04.000
You see? And the good thing about this is that if everything... If something fails at some step, it will freeze there.

14:04.000 --> 14:12.000
It will wait until you have a look and you will see exactly the step that is failing with all the locks and stuff like that. So, it's amazing.

14:12.000 --> 14:21.000
Yeah. So, with this framework, it's kind of really fun to implement tests now, you know.

14:26.000 --> 14:39.000
Yes. All these tests are obviously running in the GitHub project. We have enabled GitHub actions. And yeah, it's really easy to implement this. Okay.

14:39.000 --> 14:44.000
So, if we continue... If this is working...

14:52.000 --> 15:00.000
So, yeah. This is the same video, right? Yeah. Okay. So, now, yes. Let's have a look.

15:00.000 --> 15:09.000
So, before this presentation, I deployed a public instance in EC2 Amazon Web Services. So, I did a trick with the...

15:09.000 --> 15:17.000
Well, we have a trick to expose the modern UI, okay? Because we haven't implemented yet the login page for the modern UI.

15:17.000 --> 15:24.000
So, we are reusing the old one to login. Once you login, you can access to the other one. So, let me try.

15:25.000 --> 15:34.000
But yeah, you can access, try to access with the laptop and you can start playing it and start adding users if you like or whatever.

15:34.000 --> 15:42.000
So, on my end, I'm going to try to access it now. So, yeah.

15:43.000 --> 15:46.000
So, this is...

15:50.000 --> 15:53.000
Modern UI.

15:56.000 --> 16:07.000
So, yeah. So, yeah. This is the modern... I mean, the demo instance, but it's loading the old one. Because I need to login here first.

16:13.000 --> 16:25.000
So, do you know the credentials? I guess it was in the slide. Okay. Admin and secret 123.

16:25.000 --> 16:36.000
So, this is supposed to work. Yeah, this is the old one. Okay. So, now, I'm going to access to the modern UI.

16:36.000 --> 16:39.000
And then I just need to change here.

16:43.000 --> 16:48.000
Yeah, and this will give access... No, wait. Modern...

16:58.000 --> 17:03.000
Yeah, this is the modern one. So, if I open it a little bit.

17:03.000 --> 17:13.000
So, one of the cool things that Carla told me to show is that all the... is that this web UI is very dynamic thanks to React and pattern flying.

17:13.000 --> 17:20.000
Okay. And for instance, if I go here and inspect, you can see how dynamic is the new one.

17:20.000 --> 17:27.000
For instance, we start reducing the size. You see how all the things are getting little there.

17:27.000 --> 17:34.000
And it's kind of... For instance, now the panel disappears because of... to have more space.

17:34.000 --> 17:43.000
But if you continue doing so, it will... all the entries, it will appear like some sort of cart. Okay.

17:45.000 --> 17:54.000
So, yeah. So, this is gradually improving a lot of things here. So, yes.

17:57.000 --> 18:05.000
So, what I mentioned in the mock-ups that you have in the navigation, you can collapse, you can hide the one.

18:05.000 --> 18:14.000
I mean, the entire navigation if you like. And you have three levels. You can go for more sections. And, yeah.

18:15.000 --> 18:32.000
So, yeah. So, this is... there are available. And don't trust too much from this instance because I reset every night with one of these nice automations in the Amazon Web Services that destroyed the instance and then recreated again.

18:32.000 --> 18:40.000
But, yeah, you can play with it. So, let's continue with the presentation then.

18:45.000 --> 18:56.000
Yes. Yes, I embedded another video where Carlisle is playing way much more things than I. Okay. So, you have available in the slides. This is pointing to a YouTube video.

18:56.000 --> 19:03.000
So, where she basically is playing in a lot of content. Okay.

19:04.000 --> 19:16.000
That you can also watch if you like. And she's using a model, an instance with a lot of data populated so that you will see more content there.

19:18.000 --> 19:29.000
All right. So, yeah. Then, as part of future roadmap, what is next? I mean, the situation of the project. I mean, we implemented two major sections in the new YPI already,

19:29.000 --> 19:41.000
but we need to keep implementing new pages and functionality. So, it is on the roadmap to improve the routing and somehow figure out how to add direct links to pages.

19:41.000 --> 19:55.000
This was in the old one, but not in the new one. And we need to investigate. Also, we need to explore because the new web UI is capable of sorting the data or listing a lot of entry records.

19:55.000 --> 20:07.000
And we have limitations with held up. So, this is something that is still open and we need to test performance with that and see how can we improve the internalization that I was mentioning before is still missing.

20:07.000 --> 20:19.000
Also, we would love to implement a new login page, but in this new login page, we will, yeah, we would love to enable new authentication types.

20:20.000 --> 20:28.000
Like, for instance, if you have been in the other talks, passwordless external IDP, all this type of stuff, we will implement it in the new login page.

20:28.000 --> 20:33.000
Okay. And also, there is another topic, which is for a little bit for the future.

20:33.000 --> 20:47.000
Once we have the project more advanced is how are we going to adapt all those external plugins that user or the community, they have kind of plugins that they are able to connect to the web UI.

20:47.000 --> 20:59.000
And then we need to provide a solution for them as well. And, yeah, and the last thing is that we are driving all this initiative all this product in GitHub.

20:59.000 --> 21:13.000
We are engaged a lot with the community. And so, I can show you in the GitHub project, we have GitHub project, sorry.

21:18.000 --> 21:37.000
So that we didn't strive for in the sense that it's super easy to contribute to the project. I mean, if you are, if you like these technologies, and you will love to work with the Red Hat Web UI team.

21:38.000 --> 21:53.000
So you will be able to do so. This is the project and then it's super simple. You just follow whatever is in the read me file and then in terms of one minute, you can get all the development environment in your own laptop.

21:53.000 --> 21:58.000
And, oh yeah, I see. Wow.

21:59.000 --> 22:11.000
I miss the time. Yeah, so everything is well explained. I mean, with background you can bring up and yeah. So, sorry.

22:13.000 --> 22:23.000
So I think that was the last slide. Yeah, the next is kind of, yeah, how to contribute, but I already explained that. So there are open discussions as well. And yeah.

22:24.000 --> 22:26.000
So, yeah, that was it then.

22:36.000 --> 22:38.000
So I guess we don't have time for questions or.

22:39.000 --> 22:59.000
Yeah, that's a good question. I mean, so the development is happening in upstream. So it's very easy to follow what is happening there. Right.

23:00.000 --> 23:09.000
And let's say that there are three main sections in the Web UI project. We have implemented two of them. I mean, the most difficult one was the first one.

23:09.000 --> 23:21.000
Implement the first one because you need to take the decisions or investigate about things. But now almost all the things are sorted out and we are speeding a lot with the project.

23:21.000 --> 23:26.000
And we believe that maybe by the end of the year we will see the new one.

23:26.000 --> 23:34.000
We will see. But we can speed up if we get more contribution. Thank you.

