WEBVTT

00:00.000 --> 00:12.000
So our next speaker is a very good friend of mine.

00:12.000 --> 00:18.000
I call him the big boss because he's a co-chair of the TC39, which is the committee that manages

00:18.000 --> 00:20.760
the JavaScript specs.

00:20.760 --> 00:26.000
So he's going to talk about message format, the future of internationalization.

00:26.000 --> 00:28.720
I hope I will say it right.

00:28.720 --> 00:37.720
And big round of applause for Rojoa.

00:37.720 --> 00:39.720
Let's go.

00:39.720 --> 00:43.720
Thank you, Aiman, for the gracious introduction.

00:43.720 --> 00:47.720
Major thanks to Leo for setting up the stage for me.

00:47.720 --> 00:52.720
There's no pressure there at all.

00:52.720 --> 00:58.720
Well, I thought a lot about this. It's very anxiety inducing to follow up to a talk like that.

00:58.720 --> 01:09.720
But I realized that it's nothing to be anxious about because why not follow up that very intense technical talk with something simpler?

01:09.720 --> 01:11.720
So I try to talk to you.

01:11.720 --> 01:17.720
It's mostly propaganda. It's a program that I need to induce you to.

01:17.720 --> 01:19.720
But yeah, I hope you're ready.

01:19.720 --> 01:21.720
Everybody ready? Let's start.

01:21.720 --> 01:24.720
Okay, great. So welcome.

01:24.720 --> 01:31.720
A little bit about me before we begin because that's obviously the most important part of the presentation.

01:31.720 --> 01:37.720
I am Ujwal. You might remember me from my username on the internet.

01:37.720 --> 01:40.720
It's not easier, but it's fine.

01:40.720 --> 01:42.720
I'm from New Delhi in India.

01:42.720 --> 01:45.720
And I live in Akharunya.

01:45.720 --> 01:48.720
It's a beautiful little city.

01:48.720 --> 01:51.720
I would describe myself as well.

01:51.720 --> 02:00.720
Zellet may be a strong word, but trust me, I care a lot about open source software and believe in the web,

02:00.720 --> 02:06.720
which is what I'm here to sort of make you fanatisized about as well.

02:06.720 --> 02:12.720
But I suppose, given that this is the JavaScript room, you all share a lot of these ideas as well.

02:13.720 --> 02:20.720
I love dogs and massage video games that hurt me psychologically.

02:20.720 --> 02:22.720
And I work at Agalia.

02:22.720 --> 02:25.720
So quick show of hands. How many of you know about Agalia?

02:25.720 --> 02:30.720
Wow. Only at this conference. Thank you.

02:30.720 --> 02:34.720
At Agalia, well, this is me trying to read a newspaper.

02:35.720 --> 02:38.720
Agalia is an open source consultancy.

02:38.720 --> 02:42.720
If you don't know about us, we are also a worker-owned cooperative.

02:42.720 --> 02:44.720
So that's neat.

02:44.720 --> 02:48.720
We've worked across a lot of open source projects and ecosystems,

02:48.720 --> 02:52.720
mostly around low-level software like the Linux kernel,

02:52.720 --> 02:55.720
different things in the Linux user space,

02:55.720 --> 02:58.720
and in the multimedia space and graphics and so on.

02:59.720 --> 03:03.720
You might know about some of our contributions in the web platform.

03:03.720 --> 03:12.720
A lot of the browser projects have a lot of interesting work that has been put in by my colleagues,

03:12.720 --> 03:14.720
which I'm very proud about.

03:14.720 --> 03:19.720
And lastly, but not the least, I suppose, we work in the compiler space,

03:19.720 --> 03:22.720
which is all about programming language design, right?

03:22.720 --> 03:26.720
It includes WebAssembly and JavaScript, but also stuff on LVM.

03:26.720 --> 03:32.720
And that's what I need to talk to you about, about JavaScript, about TC39, as he said,

03:32.720 --> 03:36.720
which is a very descriptive name for an organization.

03:36.720 --> 03:40.720
Do any of you know about TC39? What does it do?

03:40.720 --> 03:42.720
Wow. That is surprising to me.

03:42.720 --> 03:51.720
But TC39, long story short, designs and develops this programming language called JavaScript that we all love, I hope,

03:51.720 --> 03:55.720
to some extent. It's a complicated subject.

03:55.720 --> 03:58.720
What would you describe JavaScript? What do you think of JavaScript?

03:58.720 --> 04:00.720
Do you have a definition for JavaScript?

04:00.720 --> 04:04.720
We know what JavaScript is. I would like to describe it, hopefully, non-controversially,

04:04.720 --> 04:08.720
as a general purpose programming language, and now general purpose programming language,

04:08.720 --> 04:12.720
that is designed primarily for scripting web interfaces.

04:12.720 --> 04:14.720
Are you web developers?

04:14.720 --> 04:18.720
Are there any non-web developers that use JavaScript?

04:18.720 --> 04:20.720
No. See?

04:20.720 --> 04:28.720
Like, while JavaScript is a growing language ecosystem, it is still very heavily influenced by the web ecosystem,

04:28.720 --> 04:33.720
and it owes a lot to the web ecosystem for making it what it is, and therefore,

04:33.720 --> 04:41.720
as the primary language for making web interfaces, it needs a lot of tools that are required for web interfaces.

04:41.720 --> 04:43.720
But what is the web?

04:43.720 --> 04:49.720
I couldn't even find a logo or an image to describe the web, and I feel that the web is such a weird concept

04:49.720 --> 04:52.720
because we all know what the web is, right?

04:52.720 --> 04:57.720
But could any of you define what the web is?

04:57.720 --> 05:04.720
So I do feel that the web is hard to define or really put a finger on because it's gone through so much.

05:04.720 --> 05:09.720
I always rely on my good friend, Baudrillard, for explaining what the web is.

05:09.720 --> 05:18.720
So we have, for example, web as we know it, and then it just keeps what?

05:18.720 --> 05:25.720
And now it's everywhere. The web is in your gaming consoles, it's in your cars, in your toasters, probably.

05:25.720 --> 05:31.720
Does it need the web? Probably not, but I don't know. I don't trust toasters.

05:31.720 --> 05:41.720
But the point is that over the last couple of decades, the web has more or less emerged as the main platform

05:41.720 --> 05:44.720
for designing interfaces for people.

05:44.720 --> 05:47.720
This is not a controversial statement, I hope.

05:47.720 --> 05:50.720
But what is the web platform that I'm talking about?

05:50.720 --> 05:56.720
So to define the web platform, I would say that it's an interactive, decentralized communication platform at the scale,

05:56.720 --> 05:58.720
but that makes no sense.

05:58.720 --> 06:03.720
So the web is a standard platform for making widely accessible.

06:03.720 --> 06:09.720
They're deployed at the scale of everyone and rich user interfaces.

06:09.720 --> 06:18.720
We are not in the early days of the web. The interfaces that we use on the web have changed substantially.

06:18.720 --> 06:26.720
But this ambition of universality, universe, yeah, that's the, okay.

06:26.720 --> 06:30.720
Yeah, this ambition is built into the web and it's ethos, right?

06:30.720 --> 06:33.720
It is supposed to be for everyone.

06:33.720 --> 06:38.720
It is supposed to be accessible by a vast group of people.

06:38.720 --> 06:48.720
And any platform with such ambitions is not needed, but I would argue required to be accessible and internationalizable

06:48.720 --> 06:57.720
and localizable because how else do you reach the anywhere near like the target audience of the web, right?

06:57.720 --> 07:01.720
So the web has a responsibility as this platform.

07:01.720 --> 07:05.720
A quick note before we start, I've already started using these terms,

07:05.720 --> 07:13.720
but if you're unfamiliar in a nationalization, basically is the process of making an interface in a way that it can be localized

07:13.720 --> 07:18.720
into various different languages, cultures to suit your users.

07:18.720 --> 07:20.720
And as I mentioned, localization.

07:20.720 --> 07:27.720
Localization is the specific act of, you know, modifying your interface to suit a target audience.

07:27.720 --> 07:31.720
This is just a primer to, because I'm going to use this a lot.

07:31.720 --> 07:33.720
I hope that was obvious.

07:33.720 --> 07:40.720
But let's talk about the early web, the early interfaces that started thinking about internationalization.

07:40.720 --> 07:48.720
Because as much as I would like to talk about how the web has revolutionized internationalization, it doesn't start there.

07:48.720 --> 07:52.720
The story starts in the beginning because user interfaces were everywhere.

07:52.720 --> 08:00.720
Like people who were writing text based video games and C were also very keen on things like internationalization.

08:00.720 --> 08:04.720
UIs are composed of string content.

08:04.720 --> 08:09.720
These content, like these strings are what we are referring to messages.

08:09.720 --> 08:13.720
So when I say formatting a message, that is what I mean.

08:13.720 --> 08:19.720
Manual localization is a way to do this.

08:19.720 --> 08:23.720
I'm sure everybody is familiar with Wikipedia.

08:23.720 --> 08:28.720
It's kind of possible to have a website work in that way.

08:28.720 --> 08:33.720
But it was quickly proving to be unmanageable.

08:33.720 --> 08:38.720
Not only because it's hard to do it manually, it is.

08:38.720 --> 08:45.720
But also that it represents a very slim vision of what it means, what true internationalization means.

08:45.720 --> 08:50.720
Changing from a language to another doesn't actually mean internationalization.

08:50.720 --> 08:57.720
There's so many different axes within any given country, within any given language.

08:57.720 --> 09:09.720
There's so many different ways of expressing things that to reduce internationalization to merely catering to languages or locales is, well, locales can be complicated.

09:09.720 --> 09:14.720
But merely focused on languages, it's too simplistic.

09:14.720 --> 09:19.720
So the actual diversity of locales can never be catered to using this simple approach.

09:19.720 --> 09:26.720
Imagine having a different website, having a different version of your website for every currency that you support.

09:27.720 --> 09:35.720
And basically to promote a better, cleaner, more modular approach for building interfaces that can be localized,

09:35.720 --> 09:39.720
C-Hackers first came up with Get Text.

09:39.720 --> 09:41.720
Have any of you ever used Get Text?

09:41.720 --> 09:43.720
It's everywhere, right?

09:43.720 --> 09:48.720
In all of your operating systems, it's actually part of Lib C, so basically everywhere.

09:48.720 --> 09:50.720
But let's talk about Get Text. What was it?

09:50.720 --> 09:53.720
And I know that we are in the JavaScript room, but bear with me.

09:53.720 --> 09:56.720
It all makes sense, hopefully.

09:56.720 --> 10:02.720
Get Text was one of the two main internationalization systems that the early hackers cooked up.

10:02.720 --> 10:09.720
The other was CAD-GETs, but the presentation can only be so long.

10:09.720 --> 10:11.720
So let's not get into that.

10:11.720 --> 10:13.720
But it was the dominant system over time.

10:13.720 --> 10:17.720
CAD-GETs, as you might know, now not used anymore.

10:17.720 --> 10:19.720
And it was not standardized.

10:19.720 --> 10:30.720
We're going to be talking a lot about standards here and how they enable people to build stuff in a way that is reliable across boundaries.

10:30.720 --> 10:33.720
But Get Text was never standardized.

10:33.720 --> 10:46.720
It was, however, standardized in a de-factor way by programmers using it across their tooling and basically through documentation and education and so on.

10:46.720 --> 10:58.720
But its adoption by Sun and then GNU in like G-Lib C basically made it so popular that it was standardized through popularization, for instance.

10:58.720 --> 11:04.720
It was not as powerful as the internationalization systems we would use today.

11:04.720 --> 11:09.720
It mainly dealt with very static strings, and you could replace them with different strings and different languages.

11:09.720 --> 11:12.720
So already it's not perfect, right?

11:12.720 --> 11:15.720
But it was good for the time.

11:15.720 --> 11:17.720
It was what we had.

11:17.720 --> 11:19.720
It was better than nothing.

11:19.720 --> 11:33.720
But what it did was it went on to inspire an entire generation of applications, of interfaces that were not only utilizing internationalization but were built with internationalization in mind.

11:33.720 --> 11:40.720
And one topic that I'm going to, this is one topic that I'm going to keep returning to throughout the presentation.

11:40.720 --> 11:47.720
Giving power to your users is by far the easiest way, in my opinion, to, well, people do wacky things.

11:47.720 --> 11:49.720
That's the web for you.

11:49.720 --> 11:58.720
But it's the most interesting way, in my opinion, to allow people to innovate and come up with completely new paradigms that were unimaginable.

11:58.720 --> 12:04.720
And we'll see how Get Text inspired these things in its own right.

12:04.720 --> 12:06.720
So there's Python's Get Text.

12:06.720 --> 12:12.720
It's basically Get Text, but in Python, Python likes to keep things simple, I guess, in some way.

12:12.720 --> 12:18.720
Java introduced, however, for the first time, the concept of message format.

12:18.720 --> 12:24.720
So the context here, like you might also already remember, well, it's in the same slide.

12:24.720 --> 12:39.720
And the micro systems already big in this idea of interfaces in internationalization, of basically deploying their products and their users products across the market, so to say,

12:39.720 --> 12:41.720
was very keen on internationalization.

12:41.720 --> 12:53.720
And therefore, they basically, through acquisition and innovation, created the first sort of beginnings of message format in Java.

12:53.720 --> 12:57.720
At the time, to be this like, it's so funny to think about it.

12:57.720 --> 13:02.720
Java was, to that generation, what the web is to us.

13:02.720 --> 13:08.720
Java was a cross-platform way of building interfaces that can be then deployed to a massive audience.

13:08.720 --> 13:12.720
Minecraft, I guess, if it's the bill.

13:12.720 --> 13:15.720
ICU then, however, picked up message format.

13:15.720 --> 13:22.720
ICU was also formed by these organizations working closely together, but it was a much bigger effort.

13:22.720 --> 13:31.720
It was standardized, and it was developed in a way that was general enough for everyone to use and integrate in their apps.

13:31.720 --> 13:33.720
So ICU creates message format.

13:33.720 --> 13:44.720
It was originally a very close sort of copy, is maybe a bad word, but a very close imitation of the Java message format.

13:44.720 --> 13:49.720
But in its own right, it added more features and more power.

13:49.720 --> 13:54.720
And we can see how that affects things very soon.

13:54.720 --> 13:58.720
But here's a quick and dirty example of how that works.

13:58.720 --> 14:03.720
So you have this message, and it has an expression inside of it, right?

14:03.720 --> 14:07.720
And this expression is basically selecting for a number.

14:07.720 --> 14:12.720
So if there are no files, well, if there are zero files, you can say there are no files.

14:12.720 --> 14:19.720
And there's one file, and then anything before above one is, you know, there are X files.

14:19.720 --> 14:24.720
But this needs to be, this is just one message in one language.

14:24.720 --> 14:26.720
It needs to be translated into various languages.

14:26.720 --> 14:29.720
But finally, we had a format to express all of this, right?

14:29.720 --> 14:34.720
If you're writing in Arabic, for example, you need a lot more.

14:34.720 --> 14:37.720
In Japanese, you need just one.

14:37.720 --> 14:48.720
But, yeah, so if you think about this, ICU's message format not only subsumed the original Java message format that it built out of,

14:48.720 --> 14:53.720
but it added more, and it experimented in its own sample space.

14:53.720 --> 14:59.720
But some important things was that ICU message format, because it was separated from Java,

14:59.720 --> 15:06.720
it was able to rethink some of the design details about some of the processes that happened.

15:06.720 --> 15:15.720
And it was designed for the first time almost with massive feedback from implementers and translators at the forefront.

15:15.720 --> 15:22.720
Translators being a key word here, because I think it's not very controversial when I say,

15:22.720 --> 15:32.720
and it's kind of obvious from the documentation even to this day, that tools like GetText were primarily designed keeping programmers in mind.

15:32.720 --> 15:43.720
And finally, we have a lot of organizations who are very invested in translating their interfaces and their translators being part of this process of designing this format.

15:43.720 --> 15:48.720
So things were really starting to pick up, at least I would feel so.

15:48.720 --> 15:55.720
What it ended up with is a much better or, well, a much more powerful syntax,

15:55.720 --> 16:01.720
and that, as I mentioned previously, just opens up the space for innovation as it did.

16:01.720 --> 16:06.720
So here's a quick example. It looks huge, but please bear with me.

16:06.720 --> 16:10.720
But basically, here we have a simple message.

16:10.720 --> 16:11.720
Whoops.

16:11.720 --> 16:12.720
Hello?

16:12.720 --> 16:14.720
Is, okay.

16:16.720 --> 16:21.720
But yeah, you're, one of the things, okay, I'm going to go back.

16:21.720 --> 16:30.720
But one thing that I didn't focus on much was that ICU message format at the time allowed nesting.

16:30.720 --> 16:39.720
So messages could be nested, and this, as you might see here, opens you up to new use cases that you didn't think of before.

16:39.720 --> 16:43.720
So here we have like a nested select statement of sorts.

16:43.720 --> 16:53.720
And what we're doing is we're setting for the pronouns of the host who's hosting a party and the number of guests that we have to display a simple message.

16:53.720 --> 17:04.720
Well, simple at the end of it, but that's the amount of work that goes into making sure that you have a message that works for all the combinations.

17:04.720 --> 17:05.720
Right?

17:05.720 --> 17:07.720
And this was great.

17:07.720 --> 17:11.720
People were now doing more powerful things than they ever did.

17:11.720 --> 17:13.720
But what was going on with the web?

17:13.720 --> 17:18.720
So talking about the good old days of the web, whatever that means.

17:18.720 --> 17:28.720
The early days of the web were very dominated by either absolutely static documents or very static crowd apps, basically.

17:28.720 --> 17:29.720
What does that mean?

17:29.720 --> 17:33.720
It's basically about some simple operations.

17:33.720 --> 17:42.720
If you think about it early internet applications, so to say, even Twitter, for example, were built as very simple crowd apps.

17:42.720 --> 17:46.720
There were very few operations that you could do there, right?

17:46.720 --> 17:52.720
And if you compare that with anything we ever do now, it is a completely different landscape.

17:52.720 --> 17:56.720
I mean, even just Twitter and how it works now.

17:56.720 --> 18:10.720
So the early websites, because they didn't have a very powerful medium on the front end, they were like almost entirely on the server run times for their content, for whatever kind of dynamic things that they did.

18:10.720 --> 18:13.720
And guess what?

18:13.720 --> 18:15.720
For internationalization.

18:15.720 --> 18:25.720
So while the early web was not as powerful as it is now, people were still, there was a lot of appetite for internationalization and people did what they could.

18:25.720 --> 18:29.720
So they used Java's message format using Java text.

18:29.720 --> 18:32.720
Java.tex has a number of other APIs as well.

18:32.720 --> 18:38.720
PHP had an Intel object, if you think the JavaScript was the first to do internationalization.

18:38.720 --> 18:40.720
That is not the case.

18:40.720 --> 18:44.720
And Ruby on Rails also had this IETN.

18:44.720 --> 18:46.720
I don't know why I keep mentioning this.

18:46.720 --> 19:01.720
It's just one that is closest to my heart, I feel, because that's what introduced me personally to internationalization, how it's important, and how it can really bring life, spell life into your interfaces.

19:01.720 --> 19:11.720
And this allowed the early web developers to tinker with things like message formatting and more complicated internationalization use cases.

19:11.720 --> 19:23.720
So there was a lot of tinkering happening, but basically with the combination of this message formatting style that we talked about, the popularization of templating languages.

19:23.720 --> 19:38.720
You have to remember this is the time when templating languages were really taking off and HTTP content negotiation, which meant that the client would tell basically what languages the client accepts to the server and then the server could localize based on that.

19:38.720 --> 19:47.720
We reached not a great point, but a very important point for internationalization on the web because now things are starting to get serious.

19:47.720 --> 19:51.720
So we have a platform for building interfaces.

19:51.720 --> 20:04.720
It is being used by a vast community of people who are building websites, and they are utilizing internationalization techniques to make their content more accessible to a wide range of users.

20:04.720 --> 20:06.720
What about the Mpesky.js developers, though?

20:06.720 --> 20:07.720
What are they up to?

20:07.720 --> 20:09.720
Up to no good, I hope.

20:09.720 --> 20:16.720
But no, jokes apart, JavaScript also had its own parallel development during this time.

20:16.720 --> 20:26.720
But basically, for reasons that are not worth getting into in this presentation, JavaScript remained mostly not very popular.

20:26.720 --> 20:35.720
I mean, for a long time, people were hesitant to really do a lot in JavaScript, and it was not their fault.

20:35.720 --> 20:46.720
JavaScript was not as powerful as it is now, but things, again, on the theme of somebody giving power to a bunch of users and them taking it across the board.

20:46.720 --> 20:50.720
jQuery released in 2006.

20:50.720 --> 20:53.720
So that's almost two decades now.

20:53.720 --> 20:56.720
And how far have we come from there?

20:56.720 --> 21:08.720
It just, it sparked a whole sort of space of people experimenting and building more and more interactive web pages, basically.

21:08.720 --> 21:14.720
Fast forward to some years, we have React and the age of SPAs is dawning on us.

21:14.720 --> 21:24.720
Some of the most annoying websites kind of were created during this time, but all in sort of good time, and it all led up to something important,

21:24.720 --> 21:34.720
which is that now we have a very dynamic, a very expressive web that people interact with in very different ways than they did with the early web.

21:34.720 --> 21:49.720
Some of the interactions that we have with websites today are just, they probably weren't something the early designers of the web had any sort of idea they were enabling, maybe for good reason.

21:49.720 --> 22:01.720
But TC39, which, as we mentioned, is the standards body that is tasked with designing the language recognized at the time that internationalization is a growing concern for us,

22:01.720 --> 22:08.720
and we need to enable JavaScript developers to make the best use of this area and the techniques with it.

22:08.720 --> 22:15.720
They formalized a task group, task group two in this case, to work on internationalization.

22:15.720 --> 22:21.720
So a lot of internationalization features were developed and deployed to the web.

22:21.720 --> 22:31.720
As of this day, you may know about the Intel object in JavaScript and the various formatters and other things that it has.

22:31.720 --> 22:47.720
But basically modern JavaScript interfaces use these like in line, well, not in line entirely in the context of interfaces, but basically they use these APIs to internationalize,

22:47.720 --> 22:58.720
to localize for that context on the client and then sprinkle them across the interface, but it's not perfect, or is it?

22:58.720 --> 23:16.720
Well, the state of internationalization on the web is that outside of what was being done in JavaScript, most of the work and effort in terms of internationalization was directed at very specific things,

23:16.720 --> 23:25.720
like supporting more writing systems, which is great. We need to support all the writing systems, but it was very limited in its scope and ambition.

23:26.720 --> 23:35.720
On the other hand, internationalization grew and have now so many different features just to talk about them formatters.

23:35.720 --> 23:44.720
So you can format all these different types of information like numbers, including currencies and different kinds of numbers in different formats.

23:44.720 --> 23:49.720
You have dates and times that can be formatted in various different ways in so many things.

23:49.720 --> 24:01.720
You have collation, segmentation of text, which is something that is now supported by the interl object, and then there is some selection.

24:01.720 --> 24:08.720
So there's not a whole lot of selectors that are available to this date, but we have plural and ordinal selection.

24:08.720 --> 24:23.720
So if you have a number, you can basically select for the plural rules of any given language, which was cool, which has a lot of the building blocks that we need, but we're still missing important pieces.

24:24.720 --> 24:41.720
So talking about the timeline of where we end up with message format 2, the JavaScript group that was designing the internationalization API essentially realized they needed something of the sort.

24:41.720 --> 24:52.720
It was discussed over the course of many years, as you can see. It was iterated upon, but there was a general agreement among this group that message formatting on the way.

24:53.720 --> 25:03.720
The web is something that is both needed and necessary step to enable further use cases.

25:03.720 --> 25:13.720
Do you remember this slide? Like, this is not a great format, but that's what we had.

25:13.720 --> 25:29.720
So message format and the syntax and all the details of it were standardized 20 years ago at this point, and it is not sufficient for the modern dynamic interfaces that we built that JavaScript has enabled now.

25:29.720 --> 25:42.720
So why do we need a new thing? Well, first of all, as I just mentioned, we have so many more ways of interacting with our interfaces that just require

25:42.720 --> 25:53.720
new tooling, rethinking how the fundamentals work and the sort of outdated, outmoded tools don't exactly fit the bill.

25:53.720 --> 25:59.720
They are too imperative. They are too static to actually support our new use cases.

25:59.720 --> 26:09.720
There's also a sad lack of modularity and extensibility in the existing message format a bit more on that later.

26:09.720 --> 26:21.720
And because it's a standard that is designed for being accessible to basically everyone who uses ICU, which by the way is a great thing,

26:21.720 --> 26:25.720
the unfortunate side effect of that is that you can't really deprecate anything.

26:25.720 --> 26:33.720
You can't just clean it up and move on without making a breaking change that would annoy every user.

26:33.720 --> 26:39.720
So there needed to be kind of like there was Python 3, I don't know, that's controversial, right?

26:39.720 --> 26:48.720
But we needed a heartbreak, a message format 2 that would be designed from the ground up to deal with some of these things.

26:48.720 --> 26:58.720
And the diversity of locales that we know now makes it basically impossible to map any localization structures one to one.

26:58.720 --> 27:07.720
A great example of that is one that we just used in the past, like the number, the plural selection example.

27:07.720 --> 27:09.720
Do you remember that? Yeah.

27:09.720 --> 27:18.720
English has two plural rules or modes, which is that either things are singular or plural. Zero is plural, for example.

27:18.720 --> 27:20.720
And that's simple and that works for us.

27:20.720 --> 27:26.720
Well, Welsh, a language that is not so far, you would assume, has five.

27:26.720 --> 27:30.720
Arabic has six, I think. I'm sorry if I'm...

27:30.720 --> 27:33.720
But you get the point, right? Japanese has one.

27:33.720 --> 27:38.720
When it comes to any of these things, you cannot map messages one to one.

27:38.720 --> 27:41.720
You need something that is more expressive than that.

27:41.720 --> 27:51.720
And basically, like the design constraints of the old API made it very limited for the modern JavaScript ecosystem that we have.

27:51.720 --> 28:00.720
So not only do we need to take everything that the original message format did right, do it better, if possible.

28:00.720 --> 28:08.720
We need to also accommodate a lot of the innovation that was now happening outside of the standard space, right?

28:08.720 --> 28:11.720
In proprietary tooling or elsewhere.

28:11.720 --> 28:17.720
So we needed to really get our act together and that was message format two.

28:17.720 --> 28:23.720
So I am going to start on a quick and clumsy, as I said, intro of message format two.

28:23.720 --> 28:25.720
But are you ready? Okay.

28:25.720 --> 28:27.720
Context setting done? Yeah.

28:27.720 --> 28:31.720
So for context... Well, okay, more context.

28:31.720 --> 28:38.720
But a dynamic message string is the string that is not just a static string,

28:38.720 --> 28:44.720
but as we perceive and use strings on the modern web, they can change.

28:44.720 --> 28:46.720
They can morph around each other.

28:46.720 --> 28:48.720
It's ridiculous, honestly.

28:48.720 --> 28:58.720
But the goal of message format two is to enable a lot of these complex use cases that we haven't covered now while keeping the basics simple.

28:58.720 --> 29:08.720
Because at the same time, a very important goal is to lower the bar to make it easier for anyone who at the moment,

29:08.720 --> 29:16.720
and I'm not saying incorrectly, that they rightly consider message formatting to be a complex thing to integrate.

29:16.720 --> 29:27.720
But lowering the bar would allow more people to experiment with it and to basically think of new solutions for their new innovative problems.

29:27.720 --> 29:36.720
So, for example, it's text mode first, which means that for very simple messages, it's very simple to get into it.

29:36.720 --> 29:42.720
At the same time, it allows a lot of complex messages and expressions, which we'll get to.

29:42.720 --> 29:47.720
It also allows you to have declarations and annotations.

29:47.720 --> 29:51.720
So basically, we're getting dangerously into programming territory here.

29:51.720 --> 29:55.720
You can have variables and functions being called.

29:55.720 --> 30:01.720
And it's great because you have this great deal of expressivity that you didn't have before, right?

30:01.720 --> 30:09.720
And finally, talking of functions, there is the idea of extensibility and modularity, right?

30:09.720 --> 30:19.720
So now we have the concept of a function registry, which you can add to and a bunch of built-in functions that you can easily utilize for common use cases.

30:19.720 --> 30:29.720
So yeah, quickly talking about the kind of messages that we have, we have simple messages, which is, well, a message.

30:29.720 --> 30:38.720
We can have expressions where you can interpolate variables kind of like you might be familiar with in JavaScript, but yeah, different.

30:38.720 --> 30:40.720
Same but different.

30:40.720 --> 30:50.720
And then we have complex messages like selectors here where you can actually match for a particular value, kind of like a switch case statement.

30:50.720 --> 30:53.720
So this is the various kind of messages we have.

30:53.720 --> 30:55.720
Then as I mentioned, you can call functions.

30:55.720 --> 31:01.720
So in this case, we're calling a formatter function to format a date, and then it's part of a larger message.

31:01.720 --> 31:04.720
There's support for markup elements.

31:04.720 --> 31:16.720
So if you have some messages that have markup built into them, simple example would be text sort of base markup elements like bold and italic.

31:16.720 --> 31:19.720
More complicated things could be like this.

31:19.720 --> 31:22.720
And then there's support for declarations.

31:22.720 --> 31:25.720
So you can have variables and play around with them.

31:25.720 --> 31:27.720
But there's more.

31:27.720 --> 31:33.720
There is an extensible function registry apparently, which is a great thing.

31:33.720 --> 31:35.720
You can have your own functions.

31:35.720 --> 31:37.720
You can have private use annotations as well.

31:37.720 --> 31:48.720
And there's support for popular built-in formatters and selectors, kind of like we did already in the JavaScript API, but specifically built into message format.

31:48.720 --> 31:52.720
So this means date and time, possibly durations.

31:52.720 --> 31:55.720
It's kind of not settled yet.

31:55.720 --> 32:00.720
There's support for formatting numbers and integers and selecting for them and matching them.

32:00.720 --> 32:09.720
And plural and ordinal rules are on the table and possibly lists, formatting complex heterogeneous lists of objects.

32:09.720 --> 32:13.720
But yeah, as I mentioned, this is still something that is up in the air.

32:13.720 --> 32:23.720
This is one of the final pieces of the puzzle that we are yet to completely sort of put in the puzzle, I guess.

32:23.720 --> 32:24.720
How do you do that?

32:24.720 --> 32:27.720
But the point is that this needs to be settled.

32:27.720 --> 32:28.720
This needs feedback.

32:28.720 --> 32:34.720
This needs more data than we already have because we know what is generally useful.

32:34.720 --> 32:44.720
But what mostly helps is getting actual data from people who use these things or might want to use these things, but things that matter to them.

32:44.720 --> 32:47.720
So that was part of the shtick.

32:47.720 --> 32:50.720
But basically, do you remember that slide?

32:50.720 --> 32:52.720
It's still here.

32:52.720 --> 32:54.720
This is how it looks now.

32:54.720 --> 32:58.720
So you can have a more complex matcher.

32:58.720 --> 33:02.720
And now it's matching for both the guest count and the pronouns of the host.

33:02.720 --> 33:05.720
And yeah, you have an expression.

33:05.720 --> 33:14.720
It's basically achieving the same thing, but with a cleaner syntax and hopefully something more manageable than what we had before.

33:14.720 --> 33:17.720
Why does any of this matter, you may ask?

33:17.720 --> 33:19.720
Where did I start with?

33:19.720 --> 33:21.720
I kind of lost context.

33:21.720 --> 33:28.720
But as we talked in the beginning, UI design has evolved a lot since the beginning of UIs.

33:28.720 --> 33:41.720
And the web platform was developed for something but ended up becoming essentially the most reliable standardized way for deploying user interfaces.

33:41.720 --> 33:44.720
But a lot has happened since then.

33:44.720 --> 33:54.720
For example, the UI space has done a lot of innovation around internationalization about making more localizable UIs in a cleaner way,

33:54.720 --> 34:01.720
in a way that helps programmers and translators and everyone else in essentially message formatting.

34:01.720 --> 34:05.720
On the other hand, the web platform has evolved substantially with JavaScript.

34:05.720 --> 34:09.720
Things are very different from what they were.

34:09.720 --> 34:17.720
To bridge this gap, however, to fill the final piece of the puzzle, as I mentioned before, we need Intel message format.

34:17.720 --> 34:25.720
Because we have developed a lot in the web and interfaces are more complex and more dynamic than ever.

34:25.720 --> 34:30.720
At the same time, we have better tooling in every way when it concerns internationalization.

34:30.720 --> 34:36.720
But these two spaces have not yet benefited completely from the innovation in each other.

34:36.720 --> 34:39.720
So this is the idea.

34:39.720 --> 34:46.720
Not only is message format to built on top of a lot of the innovation that has happened within JavaScript,

34:46.720 --> 34:54.720
JavaScript is now sort of importing years of work that has gone into the internationalization space.

34:54.720 --> 34:59.720
So what is the message format from internationalization?

34:59.720 --> 35:03.720
That's where we were supposedly starting but it got lost somehow.

35:03.720 --> 35:11.720
After talking about it in Unicode and sort of coming to this format,

35:11.720 --> 35:17.720
we finally brought Intel message format back to the committee and it is now a proper proposal.

35:17.720 --> 35:30.720
So it's at stage one and hopefully it would reach stage two soon and could get deployed to various browsing engines and non-browser engines.

35:31.720 --> 35:42.720
But it is built on top of the things that we know and that we have discovered around familiar patterns that internationalization built-ins use.

35:42.720 --> 35:54.720
For instance, format two parts is this whole thing that we do in internationalization in JavaScript to allow people to essentially have more control over their formatters,

35:54.720 --> 35:57.720
which is not really a concern outside, right?

35:57.720 --> 36:03.720
But that is a major design point for the proposal, among other things.

36:03.720 --> 36:05.720
This is how it looks like.

36:05.720 --> 36:10.720
So you have Intel constructor like any other.

36:10.720 --> 36:19.720
Instead of what we do with most Intel constructors where we have the message at the beginning, sorry, we have the locale at the beginning.

36:19.720 --> 36:22.720
Here we have the message and then the locale and the options follow.

36:23.720 --> 36:25.720
And yeah, it works.

36:25.720 --> 36:29.720
This is very simple, but you get the point.

36:29.720 --> 36:36.720
But I hope that this was convincing enough for you to feel that this is something important happening here.

36:36.720 --> 36:40.720
And if it is, then how can you get involved?

36:40.720 --> 36:49.720
Well, one thing I mentioned is the actual message format two syntax and data model and everything that is being standardized under Unicode.

36:49.720 --> 36:56.720
You can go to this repo and read all the issues, see what's been done and give your feedback there.

36:56.720 --> 36:58.720
Help us out in any way you'd like.

36:58.720 --> 37:01.720
And then there is the JavaScript proposal.

37:01.720 --> 37:02.720
It's early stage.

37:02.720 --> 37:03.720
It needs a lot of work.

37:03.720 --> 37:14.720
It needs a lot of feedback and it needs people to be motivated about it, to write tests, to help us figure out the spec, to help us figure out the design details.

37:14.720 --> 37:17.720
And we'd really appreciate your help.

37:17.720 --> 37:23.720
You can find us or me on GitHub and Matrix and start from there.

37:23.720 --> 37:26.720
I'd be more than happy to guide you with this.

37:26.720 --> 37:28.720
And that's all.

