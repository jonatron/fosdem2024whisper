WEBVTT

00:00.000 --> 00:10.640
Whether you have used pink or trace road or trace path, some of those implementations,

00:10.640 --> 00:14.600
I just wonder, does anybody use arping?

00:14.600 --> 00:20.840
Okay, you are network administrators, I guess.

00:20.840 --> 00:25.280
And clock diff, has anyone used recently clock diff?

00:25.280 --> 00:28.720
No, that's a nice question.

00:28.720 --> 00:31.000
Thank you.

00:31.000 --> 00:34.360
IPv2 is a very old project.

00:34.360 --> 00:37.640
It was started by Alex Seikyuznetsov in 1999.

00:37.640 --> 00:41.360
He was a Linux-Cannell network upstream developer.

00:41.360 --> 00:46.240
He was also IPv2 upstream developer at the time.

00:46.240 --> 00:56.240
He ported some BSD sources from Linux and he wrote some other tools for IPv2.

00:56.240 --> 01:00.720
And he maintained the project till 2002.

01:00.720 --> 01:08.560
He also used net-death-linux-cannell mailing list.

01:08.560 --> 01:10.520
Hideaki Yoshifuji was the next maintainer.

01:10.520 --> 01:15.640
He was also Linux-Cannell network developer.

01:15.640 --> 01:19.440
He was doing IPv6 at the time.

01:19.440 --> 01:22.800
Hideaki improved the project a lot.

01:22.800 --> 01:26.560
He started to use Git, so we have some history now.

01:26.560 --> 01:33.560
He moved the project to source for Chnet, which was popular at the time.

01:33.560 --> 01:36.720
And he still continued to use net-death-mailing list.

01:36.720 --> 01:44.040
He introduced use-illipsee support, so it was not just for G-Lipsee.

01:44.040 --> 01:52.280
Although he made his last release in 2015, the last widely-adopted release was probably

01:52.280 --> 01:58.240
the previous one from 2012.

01:58.240 --> 02:05.880
Because IPv2's development slowed down, David Heidelberg forked IPv2 and moved development

02:05.880 --> 02:09.440
on GitHub in 2014.

02:09.440 --> 02:17.360
The initial goal was to upstream various patches from Linux distributions.

02:17.360 --> 02:22.240
Still at that time, I did also muscle-lipsee support and other things, because the tools

02:22.240 --> 02:24.160
were very old.

02:24.160 --> 02:32.680
License cleanup was done, which people from Linux distributions approved or were happy

02:32.680 --> 02:33.680
about that.

02:33.680 --> 02:38.880
There were other people at the time, for example, Janssen Aček and Pavel Šimetdá.

02:38.880 --> 02:40.600
They were both from Redezhet.

02:40.600 --> 02:44.760
Pavel improved a lot, modernized the code.

02:44.760 --> 02:54.360
He started to use the new C-functions, get other info instead of the old ones, which

02:54.360 --> 02:58.680
were for IPv4 or for IPv6.

02:58.680 --> 03:02.600
And there were other improvements.

03:02.600 --> 03:07.280
Semi-Carola was the next maintainer, starting in 2017.

03:07.280 --> 03:09.840
He modernized the code a lot.

03:09.840 --> 03:15.080
And he also introduced Messonbelt system.

03:15.080 --> 03:20.440
There were other people at the time, Noach, Myron Hans and Yuri Hornovian, who still maintains

03:20.440 --> 03:21.440
localization.

03:21.440 --> 03:27.400
There could be another question, who needs localization for tools like Pink?

03:27.400 --> 03:28.400
Really?

03:28.400 --> 03:37.240
I guess not really many people, but I got approached that people really like localization.

03:37.680 --> 03:40.760
So I kept that.

03:40.760 --> 03:47.880
I came in 2017 and actually there were obviously many people in Git history.

03:47.880 --> 03:52.560
There are nearly 140 contributors.

03:52.560 --> 03:56.880
And there was history before.

03:56.880 --> 04:00.080
So current tools.

04:00.080 --> 04:07.600
IPv2 tools have currently Pink, Arping, Tracepath and Clogdiff.

04:07.600 --> 04:11.160
Pink sends ICMP a correct Vest to network host.

04:11.160 --> 04:16.320
It's very old-called from 1983.

04:16.320 --> 04:19.840
I think it's the most important IPv2 tool.

04:19.840 --> 04:28.240
And it supports both Sockets, raw socket and ICMP datagram socket, which is more secure.

04:28.880 --> 04:32.040
Unfortunately, not all distros use that.

04:32.040 --> 04:35.080
I see some of the people from the Bien.

04:35.080 --> 04:40.520
So I would recommend to stop using raw socket.

04:40.520 --> 04:49.520
But the reason why it's used is system D, which is not used on all systems.

04:49.520 --> 04:53.480
You know, the Bien supports other, other in its system.

04:53.480 --> 04:59.040
So that is reason why Pink wouldn't work by default.

04:59.040 --> 05:00.040
Yeah.

05:00.040 --> 05:04.920
Below we have example, pingingsusa.com.

05:04.920 --> 05:05.920
That's very basic example.

05:05.920 --> 05:06.920
I'm sorry.

05:06.920 --> 05:10.480
Pink supports obviously a lot of functionality.

05:10.480 --> 05:12.600
So there are loads of switches.

05:12.600 --> 05:16.280
So just a simple example.

05:16.280 --> 05:17.280
Arping.

05:17.280 --> 05:19.960
It sends ARP requests to network host.

05:19.960 --> 05:23.760
It was written by Alexei Kuznetsov.

05:23.760 --> 05:30.160
And it supports IPv4 only because the protocol itself is for IPv4 only.

05:30.160 --> 05:34.120
So, again, basic example.

05:34.120 --> 05:35.120
Trace path.

05:35.120 --> 05:39.680
It traces path to network host discovering MTU.

05:39.680 --> 05:43.280
Again, it was written by Alexei Kuznetsov.

05:43.600 --> 05:47.240
There's a small example.

05:47.240 --> 05:52.480
Tracing path to suce.com.

05:52.480 --> 05:54.400
And clock diff.

05:54.400 --> 06:03.280
That's again very old quote from 1985 from unknown author supports IPv4 only.

06:03.280 --> 06:10.040
We removed some obsolete tools in 2021.

06:10.040 --> 06:15.560
Those tools were using some experimental protocol which were not relevant later.

06:15.560 --> 06:18.760
Or there were much better implementation of other tools.

06:18.760 --> 06:25.360
So there was no point to maintain something which is not really well used or it's kind

06:25.360 --> 06:29.320
of buggy.

06:29.320 --> 06:34.520
Because those tools we have in IPv2 are basic network tools.

06:34.520 --> 06:36.800
You know, written long time ago.

06:37.080 --> 06:41.200
There are obviously other projects which are implementing similar tools.

06:41.200 --> 06:43.520
So just to highlight some of them.

06:43.520 --> 06:48.800
F-Ping is very enhanced ping.

06:48.800 --> 06:53.040
It's written in modern C.

06:53.040 --> 06:56.160
It allows to ping any number of targets.

06:56.160 --> 06:58.960
Its output is designed to be parsed.

06:58.960 --> 07:02.520
So it's good for using in scripts.

07:03.240 --> 07:09.280
Also it doesn't perform reverse DNS lookup by default.

07:09.280 --> 07:13.640
Which is in some cases faster.

07:16.320 --> 07:19.000
MTR, my trace road.

07:19.000 --> 07:24.840
It's a tool which combines trace road and ping.

07:24.840 --> 07:27.800
It uses QE and N-Curses.

07:27.800 --> 07:30.000
And it's also for free BSD.

07:30.000 --> 07:32.000
Very nice tool.

07:33.520 --> 07:36.400
Those two projects are collection of tools.

07:36.400 --> 07:43.840
So busybox is for low power embedded devices.

07:43.840 --> 07:49.000
It has many tools and among them are ping, ping and trace road.

07:49.000 --> 07:58.000
It's somehow compatible with tools from IPv2 but it implements just part of the functionality.

07:58.000 --> 08:05.000
Inetutils is old GNU project which also has RHS and stuff like that.

08:05.000 --> 08:07.480
So very old project.

08:07.480 --> 08:12.000
Not that active nowadays and it has also ping and trace road.

08:15.600 --> 08:20.160
So future, IPv2's future, what we should do.

08:20.160 --> 08:24.800
We should rewrite the code to the modern C.

08:24.800 --> 08:28.800
We concentrate mainly on ping so other tools are neglected.

08:28.800 --> 08:33.600
I wonder whether we should keep clock diff.

08:33.600 --> 08:40.200
Also trace path, it's questionable because my trace road is much better.

08:40.200 --> 08:45.400
There is trace road, the original project which is also better than trace path.

08:45.400 --> 08:48.600
So it's a question whether to keep this.

08:48.600 --> 08:52.880
Project would need reviewers and real network developers.

08:52.880 --> 08:59.480
We should write tests because we have CI tests but we don't have functional tests.

08:59.480 --> 09:04.480
So sometimes regression slips in.

09:04.480 --> 09:10.080
Tools could have JSON output and color output.

09:10.080 --> 09:11.480
So that's it.

09:11.480 --> 09:13.480
Do you have any question?

09:14.080 --> 09:30.080
Sorry, I didn't quite understand how system D or lack of it can force to use row circuits.

09:37.080 --> 09:42.080
There is a sys control tool which handles kernel parameters for networking.

09:42.680 --> 09:47.680
ICMP data gram socket is by default allowed just for root.

09:47.680 --> 09:52.880
So if you want to have ping just for normal users and you want to use

09:52.880 --> 09:56.480
safer ICMP data gram socket you need to set something.

09:56.480 --> 10:04.280
And this row says that with ETC, CCTL config or somehow is called that file.

10:04.280 --> 10:09.480
And this works differently for system D and for other tools.

10:09.480 --> 10:17.080
So if you want to use busy boxes in its system then you would lose this configuration.

10:17.080 --> 10:23.080
I would say mainly there should be a solution just not to block this and there is the band bug report.

10:23.080 --> 10:26.080
But no one works about that.

10:29.080 --> 10:31.080
Any other questions?

10:40.080 --> 10:41.080
Hello.

10:41.080 --> 10:43.080
So I have one question.

10:43.080 --> 10:45.080
What is the future of the IP tools?

10:45.080 --> 10:51.080
So what's the next feature or roadmap that you are actually getting on?

10:51.080 --> 10:52.080
What's the future?

10:52.080 --> 10:54.080
Or like five years or ten years?

11:00.080 --> 11:03.080
So those tools are very old.

11:03.080 --> 11:07.080
So one would say the work has been done.

11:07.680 --> 11:13.480
But the problem is there are bugs, there are improvements which can you know,

11:13.480 --> 11:14.480
broad regression.

11:14.480 --> 11:20.080
My motivation to join the development was to keep ping working because I need that for

11:20.080 --> 11:23.080
Kana network testing.

11:23.080 --> 11:32.080
So I would say there is no future otherwise someone finds interesting to rewrite the tool

11:33.080 --> 11:38.080
as an exercise to rewrite them into more than C because the code is terrible.

11:38.080 --> 11:42.080
It's 40 years old or something.

11:42.080 --> 11:48.080
So no real future but I think JSON output would be a good feature and color output would be also good.

11:48.080 --> 11:50.080
So some of those.

11:50.080 --> 11:52.080
But mainly maintenance mode.

