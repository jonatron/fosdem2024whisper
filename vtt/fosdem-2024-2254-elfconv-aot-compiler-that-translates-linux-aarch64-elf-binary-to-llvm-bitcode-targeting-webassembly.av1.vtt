WEBVTT

00:00.000 --> 00:12.680
that transits Reax-664L binary to LNBM bit code targeting web assembly.

00:12.680 --> 00:19.960
So first, I will explain what is web assembly or

00:19.960 --> 00:24.040
wasn't for short and why we use wasn't.

00:24.040 --> 00:27.600
And wasn't with a virtual machine instruction set and

00:27.600 --> 00:34.080
currently this is used on servers or

00:34.080 --> 00:36.840
as well as browsers in production environments.

00:39.480 --> 00:42.480
And compared to existing applications,

00:42.480 --> 00:45.520
there are mainly two features, portability and security.

00:46.680 --> 00:51.520
And portability wasn't enabled us to run applications on both

00:51.520 --> 00:55.840
browsers and servers without modification.

00:55.840 --> 01:01.280
And of course, wasn't dependent on CPU architecture so

01:01.280 --> 01:05.840
that we can run wasn't applications on computers with various

01:05.840 --> 01:07.720
CPU architectures without modification.

01:11.280 --> 01:16.360
And in security, in the case of outside browsers,

01:16.360 --> 01:21.520
wasn't is highly isolated from the host kernel by Washi.

01:21.520 --> 01:27.680
And Washi is an API that provides access to

01:27.680 --> 01:29.600
similar OSR like features.

01:30.880 --> 01:33.520
For example, for systems so gets and so on.

01:41.520 --> 01:45.520
Yes, yes, and, yes, and

01:45.520 --> 01:48.040
Washi is implemented by Washi at times.

01:48.040 --> 01:50.520
For example, wasn't time and wasn't H and so on.

01:51.800 --> 01:57.600
And was was was Harvard, Harvard architecture designs and

01:57.600 --> 02:01.640
so the memory of the wasn't was wasn't instance is

02:01.640 --> 02:06.560
which clearly separated into right now data memory and

02:06.560 --> 02:12.720
memory and code of was can access only right now.

02:12.720 --> 02:17.320
Data memory and which include increases security.

02:18.320 --> 02:24.240
However, there are some limitations in the capability of

02:24.240 --> 02:27.040
applications.

02:27.040 --> 02:32.280
And first, wasn't can, wasn't can jump to only the course that

02:32.280 --> 02:35.640
are determined at compare time and

02:35.640 --> 02:40.560
in other words, it is impossible to indirectly jump to the code

02:40.560 --> 02:42.560
generated in the data memory.

02:43.560 --> 02:49.200
And second, was she implementation doesn't cover all

02:49.200 --> 02:53.680
projects API, for example, folk and exec and so on.

02:53.680 --> 02:57.600
So when you develop wasn't applications,

02:57.600 --> 03:00.480
you should consider the limitations.

03:04.000 --> 03:09.480
And now, many programming languages support was,

03:09.480 --> 03:13.000
for example, C C plus plus plus and go and so on.

03:13.000 --> 03:18.800
And however, it it isn't easy to build was in some cases as

03:18.800 --> 03:19.800
follows.

03:21.800 --> 03:27.960
And mainly there are three cases for us the programming

03:27.960 --> 03:31.120
language that you want to use doesn't completely support

03:31.120 --> 03:32.120
wasn't.

03:34.360 --> 03:39.440
And, and currently many major languages have begun to

03:39.440 --> 03:43.600
support wasn't, but only limited number of languages

03:43.600 --> 03:46.520
are available in production environments now.

03:49.080 --> 03:52.800
Second, binary is available, but source codes of the

03:52.800 --> 03:54.200
binaries are not available.

03:55.560 --> 04:00.960
And recently the number of op source, op source

04:00.960 --> 04:06.600
programs has increased, but several, several programs are

04:06.600 --> 04:07.720
still not published.

04:10.440 --> 04:15.080
And third, the case of time consuming to building the

04:15.080 --> 04:16.280
environment.

04:16.280 --> 04:21.760
And if the dependent libraries of the target program are not

04:21.760 --> 04:28.400
maintained, you might be not able to build the

04:28.400 --> 04:30.000
libraries.

04:30.000 --> 04:33.560
And in such a case, it might take much time to build.

04:34.560 --> 04:40.560
So next, I show existing projects that run in X binary

04:40.560 --> 04:41.560
on wasn't.

04:41.560 --> 04:48.560
And the first, and the first project is tiny mu.

04:48.560 --> 04:54.560
And this is the X86 and describe emulator available on

04:54.560 --> 04:55.560
the browser.

04:57.560 --> 05:02.560
And, and the next kernel can run on the browser.

05:03.560 --> 05:08.560
And so, and the second project is counter to wasn't.

05:08.560 --> 05:12.560
And this enables us to run the X kernel and counter,

05:12.560 --> 05:15.560
run time with emulators compared to wasn't.

05:15.560 --> 05:16.560
For example, tiny mu.

05:16.560 --> 05:20.560
And, and, and this can, can run, well,

05:20.560 --> 05:24.560
counter us without modification, but it can run

05:24.560 --> 05:26.560
with the same amount of time.

05:26.560 --> 05:30.560
And, and, and this can, can run, well, counter us

05:31.560 --> 05:34.560
with modification both on the browsers and wash-around

05:34.560 --> 05:35.560
times.

05:36.560 --> 05:41.560
And, but, however, these projects, these, these

05:48.560 --> 05:55.560
projects use PM on emulator that compiles a,

05:55.560 --> 06:00.560
a, relax, describe 32 L binary to a,

06:00.560 --> 06:01.560
a, several binary formats.

06:04.560 --> 06:08.560
So next, I will show the demo of L, L comp.

06:21.560 --> 06:22.560
Can you see? Watch.

06:22.560 --> 06:23.560
Okay.

06:23.560 --> 06:24.560
Okay. Thank you.

06:26.560 --> 06:31.560
So, and, well, well, I have prepared the

06:32.560 --> 06:35.560
counter image for the L comp project.

06:35.560 --> 06:40.560
And, and, and now in, in this terminal, the container

06:40.560 --> 06:43.560
of L comp has already started.

06:43.560 --> 06:47.560
And the target sample L binary to be converted is

06:49.560 --> 06:53.560
examples, L-sensitive, L-thousand.

06:54.560 --> 06:58.560
And, and this program outputs 100, 100 prime

06:59.560 --> 07:00.560
numbers in ascending order.

07:00.560 --> 07:04.560
And, okay.

07:04.560 --> 07:09.560
So we, we try to compare this L binary to was with L comp.

07:15.560 --> 07:20.560
And in the directory, there's a one file L comp.sh

07:20.560 --> 07:25.560
and L comp.sh is used to try to L comp to compile.

07:27.560 --> 07:31.560
So, and, okay.

07:34.560 --> 07:39.560
Okay. So, and target this was browser and L comp.

07:39.560 --> 07:44.560
And target this was browser and L comp.

07:45.560 --> 07:50.560
And target this L-sensitive L-thousand.

07:54.560 --> 07:55.560
Now L comp comp.

07:55.560 --> 07:56.560
Okay. Great.

07:58.560 --> 08:03.560
And, and serial files are generated and we can

08:03.560 --> 08:07.560
execute the was application with MS Gryffin.

08:08.560 --> 08:09.560
So, run.

08:12.560 --> 08:13.560
The browser.

08:18.560 --> 08:21.560
Okay. So the cyber was the was application has

08:21.560 --> 08:22.560
started now.

08:26.560 --> 08:29.560
And, okay.

08:29.560 --> 08:30.560
Wait.

08:30.560 --> 08:33.560
You can see the, I'll put this correct in the browser.

08:37.560 --> 08:38.560
Okay.

08:39.560 --> 08:40.560
So, okay.

08:40.560 --> 08:43.560
So now let's return to the presentation.

08:49.560 --> 08:54.560
So, so, so in compiling L binary to L and B and B code

08:56.560 --> 08:58.560
two, two modules are used.

08:58.560 --> 08:59.560
Okay.

08:59.560 --> 09:01.560
First is L comp lifter.

09:01.560 --> 09:05.560
This process L binary and maps every section and

09:06.560 --> 09:07.560
operates the next module.

09:07.560 --> 09:12.560
And, and is a library for lifting machine code to L and B

09:13.560 --> 09:14.560
and B code.

09:14.560 --> 09:16.560
And, as this figure shows L comp comp,

09:16.560 --> 09:20.560
L binary to L and B, L and B code with these two modules.

09:22.560 --> 09:25.560
And next, I will explain how L comp comp,

09:25.560 --> 09:29.560
L binary to L and B code and was binary.

09:30.560 --> 09:35.560
And, and ramming converter function to one L,

09:35.560 --> 09:37.560
B, M, I, R function.

09:37.560 --> 09:41.560
For example, as you can see, the, the, the, the,

09:41.560 --> 09:43.560
the, the square function one of the machine code is

09:43.560 --> 09:46.560
combative to the underscore function one and the

09:46.560 --> 09:50.560
square lift function is a L, M, B, M, I, R.

09:54.560 --> 09:55.560
Yeah.

09:56.560 --> 10:01.560
So, and also one CPU instruction is combative to one L,

10:02.560 --> 10:03.560
B, M, I, R block.

10:03.560 --> 10:08.560
And as you can see, the machine, the instruction of move X

10:08.560 --> 10:13.560
to X zero of the machine code is combative to one underscore

10:13.560 --> 10:14.560
move.

10:14.560 --> 10:15.560
Yeah.

10:15.560 --> 10:16.560
Okay.

10:17.560 --> 10:18.560
Okay.

10:22.560 --> 10:27.560
So next, I will explain the details of the combative,

10:27.560 --> 10:31.560
combative L, B, M, I, R block from CPU instruction.

10:32.560 --> 10:37.560
And there are three steps in the combative L, B, M, I, R block.

10:37.560 --> 10:42.560
And the first step is the program counter calculation.

10:42.560 --> 10:49.560
And this here shows percent 29 is a program counter of this

10:49.560 --> 10:50.560
instruction.

10:50.560 --> 10:55.560
And the next piece is updated to the next program counter.

10:56.560 --> 10:57.560
Yeah.

10:57.560 --> 11:00.560
And the second step is open calculation.

11:00.560 --> 11:06.560
And in this here, this, this instruction uses X seven and

11:06.560 --> 11:09.560
X three, X seven and X three registers.

11:10.560 --> 11:16.560
And in the open calculation, the X seven and X three is

11:16.560 --> 11:17.560
loaded.

11:18.560 --> 11:19.560
Okay.

11:19.560 --> 11:26.560
So, and the third step is calling the, calling the function

11:26.560 --> 11:29.560
of the instruction-specific operation.

11:29.560 --> 11:34.560
For each CPU instruction, RAMU generates a function that

11:34.560 --> 11:37.560
performs the instruction-specific operation.

11:37.560 --> 11:42.560
And the corresponding function is called at the end of the LM, I,

11:42.560 --> 11:43.560
R block.

11:43.560 --> 11:44.560
At this end.

11:52.560 --> 11:57.560
So next, as I explained in the beginning, the code of the

11:57.560 --> 12:02.560
quantum can indirectly jump to only the code that is

12:02.560 --> 12:04.560
determinable at compare time.

12:04.560 --> 12:11.560
And this figure shows how to deal with indirect jump VR

12:11.560 --> 12:12.560
instruction.

12:13.560 --> 12:18.560
So in this figure with VR X seven, indirectly jump to the

12:18.560 --> 12:22.560
instruction of move X eight and X nine.

12:23.560 --> 12:30.560
And in the error, the VR instruction.

12:30.560 --> 12:40.560
And the address to jump is 30% IDR and jumps the block of

12:40.560 --> 12:43.560
percent error on the square IDR.

12:43.560 --> 12:46.560
This is the VR instruction.

12:46.560 --> 12:47.560
Okay.

12:47.560 --> 13:00.560
So, and after jumping, R on the square IDR, we get the target

13:00.560 --> 13:04.560
rubber by calling the getR function and, and, and

13:04.560 --> 13:06.560
start to pass the VR.

13:06.560 --> 13:13.560
And after that, with the VR instruction, we jump to the

13:13.560 --> 13:15.560
target block.

13:16.560 --> 13:21.560
And also in that VR instruction, it requires all candidate

13:21.560 --> 13:24.560
labels as the argument.

13:24.560 --> 13:34.560
And this is, yeah, and this array consists of all labels in

13:34.560 --> 13:35.560
this function.

13:35.560 --> 13:42.560
And, well, but in the current design, the array of candidate

13:42.560 --> 13:46.560
labels includes only the labels within this function.

13:46.560 --> 13:50.560
So, and, and Elf Comp doesn't, doesn't support the jump and

13:50.560 --> 13:51.560
long jump now.

13:53.560 --> 13:56.560
And that is a future task.

14:00.560 --> 14:06.560
And next in converting the LNB bit code to a wasn't

14:06.560 --> 14:10.560
statically links the LNB bit code and Elf Comp runtime.

14:11.560 --> 14:16.560
And Elf Comp runtime includes the mapped, mapped memory of the

14:16.560 --> 14:18.560
original error binary.

14:18.560 --> 14:22.560
And that is stuck in the heap area of the error binary.

14:22.560 --> 14:26.560
So, and also Elf Comp runtime includes the program of the

14:26.560 --> 14:28.560
system called the emulation.

14:31.560 --> 14:36.560
And existing compiler, for example, M script and Washi CK

14:36.560 --> 14:38.560
compiles these two modules to wasn't.

14:41.560 --> 14:42.560
Okay.

14:42.560 --> 14:46.560
So, and in the React system called emulation, there are two

14:46.560 --> 14:49.560
ways of implementing the emulation.

14:49.560 --> 14:54.560
And the way of implementing depends on the

14:54.560 --> 14:57.560
RibBushy implementation.

14:57.560 --> 15:02.560
And in case one, if the RibBushy implements the

15:02.560 --> 15:07.560
tag system call, Elf Comp just uses the RibBushy function as

15:07.560 --> 15:11.560
shown in this figure of the right system call.

15:11.560 --> 15:12.560
Okay.

15:15.560 --> 15:20.560
And in case two, if the RibBushy doesn't implements the

15:20.560 --> 15:24.560
target, target system call, Elf Comp should implements the

15:24.560 --> 15:26.560
system call.

15:26.560 --> 15:32.560
And as shown in this figure of the not used PRK function in

15:32.560 --> 15:33.560
this code.

15:33.560 --> 15:35.560
So, it implements the system call.

15:38.560 --> 15:39.560
Just watch out.

15:46.560 --> 15:47.560
Okay.

15:47.560 --> 15:50.560
So, next, I will show the parameters of the generated

15:50.560 --> 15:53.560
binary, parameters evaluation.

15:53.560 --> 15:54.560
Okay.

15:54.560 --> 16:00.560
So, and the target sample F binary is a simple prime

16:00.560 --> 16:01.560
number calculator.

16:01.560 --> 16:05.560
And this program computes all prime numbers, lessens the

16:06.560 --> 16:08.560
input to integer.

16:08.560 --> 16:13.560
So, and one thing to notice here is that in this

16:13.560 --> 16:20.560
program, the evaluation are using X H6 under square 64

16:20.560 --> 16:24.560
binary instead of the wasn't binary.

16:24.560 --> 16:28.560
Because in the current implementation, the system

16:28.560 --> 16:32.560
call emulation for wash-down time is insufficient.

16:32.560 --> 16:38.560
So, we use X H6 under square 64 as the output binary for

16:38.560 --> 16:39.560
benchmark test.

16:39.560 --> 16:40.560
I'm sorry.

16:42.560 --> 16:51.560
So, and the comparison method is QM emulation X64 to X H6

16:51.560 --> 16:53.560
and square 64.

16:55.560 --> 17:00.560
So, we compare QM emulation with binary LD

17:00.560 --> 17:01.560
compilation.

17:04.560 --> 17:09.560
So, and I measure the power months in two cases.

17:09.560 --> 17:13.560
In the first case, the input integer is 10 million.

17:13.560 --> 17:16.560
And the second case is 15 million.

17:16.560 --> 17:21.560
So, and the power month evaluation is as follows.

17:21.560 --> 17:26.560
So, and as you can see, in both cases, one and the case two,

17:26.560 --> 17:31.560
LD compiling by LFCOM is 4,000 QM emulation.

17:31.560 --> 17:35.560
And therefore, we can say that LD compiling is 4,000 QM

17:35.560 --> 17:38.560
emulation, at least in some cases.

17:46.560 --> 17:50.560
So, okay, so last, I will show future works.

17:51.560 --> 17:58.560
And first, we will support the output of other binary formats.

17:58.560 --> 18:04.560
And currently, LFCOM supports the output binary of only

18:04.560 --> 18:09.560
Wazm and LFX H664 binary now.

18:09.560 --> 18:15.560
So, we will support the output of other binary as output of mine.

18:20.560 --> 18:25.560
So, second, we will never as compiles LF binary

18:25.560 --> 18:29.560
of other CPU architectures.

18:29.560 --> 18:35.560
Now, LFCOM can compile H664 LF binary.

18:38.560 --> 18:40.560
Yeah, so, yes.

18:42.560 --> 18:45.560
In the future, we will support other input binary.

18:51.560 --> 19:00.560
Okay, so, and third, we will, we will, we will

19:00.560 --> 19:03.560
append system calls emulation.

19:03.560 --> 19:09.560
And now LFCOM implements a part of system calls and

19:09.560 --> 19:14.560
a lot of system calls are not implemented.

19:14.560 --> 19:18.560
So, and specifically, when targeting Wazm as

19:18.560 --> 19:23.560
the output binary formats, some system calls are

19:23.560 --> 19:25.560
difficult to implement.

19:25.560 --> 19:29.560
For example, for exec and so on.

19:29.560 --> 19:35.560
Yeah, so, so, so, I think that

19:35.560 --> 19:41.560
implementing that system calls is very variable.

19:41.560 --> 19:46.560
So, and fourth, supporting dynamic linking.

19:46.560 --> 19:52.560
And now LFCOM can compile the static,

19:52.560 --> 19:57.560
static, link, LFU binary.

19:57.560 --> 20:04.560
So, and that's where that dynamic linking is an

20:04.560 --> 20:08.560
important function and will support in the future.

20:08.560 --> 20:10.560
Yeah.

20:11.560 --> 20:19.560
Okay, so, and fifth is the promise analysis of

20:19.560 --> 20:21.560
the Wazm targets.

20:21.560 --> 20:24.560
Yeah.

20:24.560 --> 20:30.560
Now, I measure the promise evaluation under the

20:30.560 --> 20:34.560
H664.

20:34.560 --> 20:39.560
So, I shoot promise at the binary of the

20:39.560 --> 20:41.560
Wazm targets.

20:41.560 --> 20:43.560
Okay.

20:50.560 --> 20:55.560
Okay, so, and the sixth is making LNB bit calls

20:55.560 --> 20:57.560
generated more efficient.

20:57.560 --> 21:01.560
Yeah, and, and so, yeah, okay.

21:01.560 --> 21:06.560
So, in the current implemented.

21:06.560 --> 21:09.560
I translate that to Wazm 32.

21:09.560 --> 21:13.560
Sorry, well, I, sorry.

21:13.560 --> 21:18.560
I, the 32 bit x86 platform.

21:18.560 --> 21:25.560
So, I think that the H664 L binary is

21:25.560 --> 21:29.560
mainly used in the world.

21:29.560 --> 21:34.560
So, I think the support of the L binary H664 is

21:34.560 --> 21:36.560
a big influence.

21:36.560 --> 21:38.560
I think that's.

21:43.560 --> 21:45.560
Yeah.

21:45.560 --> 21:47.560
I take the top.

21:47.560 --> 21:50.560
And you consider using it instead of

21:50.560 --> 21:53.560
Remila revenge, if you know revenge.

21:53.560 --> 21:56.560
I'm a core developer of revenge, disclaimer.

21:56.560 --> 22:03.560
So, I'm sorry.

22:04.560 --> 22:08.560
Could you, could you, if you have a question, more sorry.

22:08.560 --> 22:09.560
Yeah.

22:09.560 --> 22:13.560
Remila is a tool to leave from executable code to

22:13.560 --> 22:14.560
bit code.

22:14.560 --> 22:15.560
Yeah.

22:15.560 --> 22:18.560
There's another tool which we developed, which is called

22:18.560 --> 22:20.560
revenge that does something similar.

22:20.560 --> 22:22.560
Maybe have you considered that?

22:22.560 --> 22:24.560
Are you interested in that?

22:24.560 --> 22:26.560
I don't know.

22:26.560 --> 22:32.560
Sorry, I could use a more, sorry, sorry, sorry.

22:32.560 --> 22:35.560
Yeah.

22:35.560 --> 22:38.560
Is it an alternative to, revenge is an alternative

22:38.560 --> 22:40.560
library to, Remila.

22:40.560 --> 22:42.560
Have you, have you heard of that?

22:42.560 --> 22:46.560
Well, have you heard of the revenge library?

22:46.560 --> 22:50.560
Sorry.

22:50.560 --> 22:57.560
It was just saying, if you'd heard of the revenge library,

22:57.560 --> 22:59.560
does something similar to Remila.

23:00.560 --> 23:03.560
It sounds like you haven't heard of it.

23:03.560 --> 23:08.560
That was, that was my interpretation of the question.

23:08.560 --> 23:11.560
I think that will fly.

23:11.560 --> 23:13.560
I'm sorry.

23:16.560 --> 23:18.560
Yeah.

23:18.560 --> 23:24.560
When you measured, you did a performance between

23:24.560 --> 23:27.560
Kwemu and Elfkong.

23:27.560 --> 23:28.560
Yeah.

23:28.560 --> 23:33.560
Was that like the, what did you measure there?

23:33.560 --> 23:37.560
I didn't understand was it the compilation or running?

23:37.560 --> 23:40.560
What did you measure in that performance?

23:40.560 --> 23:42.560
Well, comparison performance.

23:42.560 --> 23:44.560
Yes.

23:44.560 --> 23:48.560
So, and, okay.

23:48.560 --> 23:49.560
Yes.

23:49.560 --> 23:53.560
Basically the, component performance is of Elfkong.

23:53.560 --> 23:55.560
It's very long.

23:55.560 --> 24:01.560
But in this project, in this program of the sample,

24:01.560 --> 24:10.560
sample F binary, about, about it takes one minute

24:10.560 --> 24:12.560
for the compiling.

24:12.560 --> 24:14.560
Oh, yes.

24:14.560 --> 24:16.560
It's the compilation that is faster.

24:16.560 --> 24:21.560
Or is it the running of the thing that is faster?

24:21.560 --> 24:27.560
Is it like, I don't, I don't understand.

24:27.560 --> 24:33.560
We're measuring the, the running, like the produced results

24:33.560 --> 24:36.560
for the compilation.

24:36.560 --> 24:38.560
Like which?

24:38.560 --> 24:41.560
Like which, I'm sorry.

24:41.560 --> 24:50.560
And, I guess that is for like running.

24:51.560 --> 24:53.560
That, yes.

24:53.560 --> 25:04.560
So, by Kwemu, it runs, it runs like the, it has the,

25:04.560 --> 25:07.560
the G that turns into the native code.

25:07.560 --> 25:11.560
Like it has the, ahead of time, or you have ahead of time

25:11.560 --> 25:16.560
compilation for that, what, what, what's that you run

25:16.560 --> 25:17.560
on a browser, right?

25:17.560 --> 25:18.560
Later.

25:18.560 --> 25:22.560
So, are you looking at the performance running on the

25:22.560 --> 25:24.560
browser here and comparing that to Kwemu?

25:24.560 --> 25:27.560
Or are we looking at that, like some compilation item,

25:27.560 --> 25:30.560
just understand like what are we comparing?

25:37.560 --> 25:42.560
Sorry, so, could you ask after the presentation again?

25:42.560 --> 25:43.560
Sorry.

25:43.560 --> 25:44.560
I'm sorry.

25:44.560 --> 25:45.560
Thank you.

25:45.560 --> 25:50.560
Yeah.

25:50.560 --> 25:56.560
So, you compare the performance with like emulated ARH 64

25:56.560 --> 26:00.560
versus a X86 binary, binary.

26:00.560 --> 26:05.560
Have you also tried, like after converting this with,

26:05.560 --> 26:09.560
it was Alphcon to convert it back to ARH 64

26:09.560 --> 26:12.560
and benchmark that against the original source?

26:13.560 --> 26:15.560
So, like what is the overhead of one,

26:15.560 --> 26:17.560
like lifting it and?

26:17.560 --> 26:23.560
So, the question is overhead of the lifting,

26:23.560 --> 26:25.560
binary lifting.

26:25.560 --> 26:26.560
Oh, yeah.

26:26.560 --> 26:36.560
So, yeah, so, and in the program of this

26:36.560 --> 26:41.560
performance evaluation, the performance overhead of the

26:41.560 --> 26:45.560
lifting is very small.

26:45.560 --> 26:51.560
And maybe it takes maybe three or four seconds to

26:51.560 --> 26:57.560
compare the lift, the binary to L and B bitcalls.

26:59.560 --> 27:03.560
Yeah, but what I meant is like, if you combine the big bitcalls

27:03.560 --> 27:06.560
back to the original architecture,

27:06.560 --> 27:12.560
so how is the performance of that binary compared to the original binary?

27:12.560 --> 27:17.560
So, you say that from L binary to the target architecture binary,

27:17.560 --> 27:24.560
the performance overhead in the LB bitcalls to target binary.

27:26.560 --> 27:28.560
Oh, sorry.

27:33.560 --> 27:35.560
I just follow up on that.

27:35.560 --> 27:38.560
So, if you just, I will just drop in directly,

27:38.560 --> 27:39.560
but from experience.

