WEBVTT

00:00.000 --> 00:14.480
Now, second talk about OSDRD, it's about the running time calculation and the best way

00:14.480 --> 00:21.160
to calculate the running time is to save energy and Alex will present it.

00:21.160 --> 00:22.160
Thank you, Loïc.

00:22.160 --> 00:23.160
Hi, everyone.

00:23.160 --> 00:25.720
Thanks for coming to this talk.

00:25.720 --> 00:33.000
Today, how to drive a train using the least amount of energy with Mariko algorithm.

00:33.000 --> 00:39.840
This talk could have been how to drive a bus using the least amount of energy or how to

00:39.840 --> 00:46.000
drive any public transport that has wheels to use the least amount of energy and actually

00:46.000 --> 00:48.840
even worse with bikes.

00:48.840 --> 00:55.560
So I'm Alex Roland working also at SNSEF Réseau on the same project OSDRD for those who were

00:55.760 --> 00:57.680
at the previous talk.

00:57.680 --> 01:01.840
Here is our GitHub repo if you want to check it out.

01:01.840 --> 01:09.600
And I'm going to mostly spend some time on one type of graph, not the space time that

01:09.600 --> 01:14.080
you've seen just before, but this one is called the space speed.

01:14.080 --> 01:20.760
So it's a very easy graph that just represents the speed along the path of the train from

01:20.760 --> 01:26.320
its departure to its destination throughout the stops that it might take.

01:26.320 --> 01:32.840
On this graph, you have some speed limits that are on the line.

01:32.840 --> 01:38.080
Most of the time, the speed limits are quite lower on train stations.

01:38.080 --> 01:44.080
And then the train will leave the departure station with a speed of zero and then it will

01:44.080 --> 01:47.680
accelerate until reaching the different speed limits.

01:47.680 --> 01:54.400
Then it will break to reach the stop at speed zero again and then accelerate and then break

01:54.400 --> 01:55.560
again.

01:55.560 --> 02:01.080
So this is the fastest drive that the train can make.

02:01.080 --> 02:06.320
It accelerates as much as possible, drives as fast as possible and breaks at the last

02:06.320 --> 02:12.280
moment to reach the stop and to reach each speed limit restriction.

02:12.280 --> 02:18.720
In that case, let's pretend that the departure is at eight and then the stop is at nine twenty

02:18.720 --> 02:20.800
and the destination is at ten.

02:20.800 --> 02:22.640
This is still distance in this graph.

02:22.640 --> 02:26.440
I'm just showing you time because this graph does not show the time and we're going to

02:26.440 --> 02:28.000
need this.

02:28.000 --> 02:34.640
The problem is with public transport, if the train leaves five minutes late, it won't be

02:34.640 --> 02:37.280
able to catch up because this is the fastest drive.

02:37.280 --> 02:45.040
So it will at most arrive with five minutes late at the stop and at the destination.

02:45.040 --> 02:50.720
That's also a problem if the driver does not accelerate as much as the fastest drive.

02:50.720 --> 02:55.480
It will also be late even though it left on time.

02:55.480 --> 03:00.520
It's also a problem if the driver does not drive at the maximum speed, which spoiler

03:00.520 --> 03:04.400
happens.

03:04.400 --> 03:10.120
So going back to the fastest drive, this is actually a very bad way to plan trains, buses

03:10.120 --> 03:15.360
or any public transport because everything can fail very easily from the example I've

03:15.360 --> 03:16.720
shown.

03:16.720 --> 03:26.200
So we kind of want this public transport planification to have some margin to it.

03:26.200 --> 03:31.400
So if I'm adding, let's say, a ten percent time margin, I want to stop eight minutes

03:31.400 --> 03:35.600
later, so at 9.28 and then 12 minutes later here.

03:35.600 --> 03:42.880
So then I have some margin to like damp the few, I don't know, leaving late or not driving

03:42.880 --> 03:46.320
as fast type of problems.

03:46.320 --> 03:48.400
But we are here to save energy too.

03:48.400 --> 03:53.120
So we want to add that straight time, but we also want to save energy.

03:53.120 --> 03:58.200
Well the good thing is, physics does both of it.

03:58.200 --> 04:00.760
If you drive slower, you will save some energy.

04:00.760 --> 04:01.760
That's great.

04:01.760 --> 04:02.760
Great news.

04:02.760 --> 04:08.000
Okay, this is due to the different forces that apply on the train when it's running.

04:08.000 --> 04:12.280
You can see here, well let's not care about the weight and ground resistance.

04:12.280 --> 04:19.040
What's important here is the air drive and solid friction that scales with V and V squared.

04:19.040 --> 04:21.560
So at high speeds, it will be much greater.

04:21.560 --> 04:28.440
So driving slower, you experience it if you bike, if you drive slower, you use less energy,

04:28.440 --> 04:34.040
same with cars and every transportation system.

04:34.040 --> 04:40.360
So let's lower the speeds with a very basic way, a linear margin.

04:40.360 --> 04:46.040
So we are lowering the speeds at the same percentage all the way through the train's

04:46.040 --> 04:47.040
path.

04:47.040 --> 04:50.840
And then we arrive at 9.28 and we arrive at 10.12.

04:51.600 --> 04:53.800
Did we save that much energy?

04:53.800 --> 04:56.600
Not quite sure.

04:56.600 --> 05:02.880
This is also another way to lower the speed and then be on time with the margin that has

05:02.880 --> 05:03.880
been planned.

05:03.880 --> 05:08.160
We are lowering the high speeds only this time.

05:08.160 --> 05:13.920
But what I'm going to show you is actually the best strategy to lower the speeds because

05:13.920 --> 05:16.920
there are infinite ways to lower the speed and arrive on time.

05:17.000 --> 05:22.400
I could also just stop in the middle and then come back on track.

05:22.400 --> 05:30.200
So I'm going to show you what's been published by engineers from SNCF a few dozen years ago.

05:30.200 --> 05:38.080
I think the original paper is from 1979, so I was not born, which shows the best strategy

05:38.080 --> 05:42.880
to run trains in terms of energy consumption.

05:42.880 --> 05:45.440
So how does it work?

05:45.480 --> 05:47.720
There are four types of actions.

05:47.720 --> 05:51.480
Here I'm showing the same graph, but like a very simplified one.

05:51.480 --> 05:56.480
The train can be either accelerating, maintaining speed, posting.

05:56.480 --> 06:04.520
Posting means the driver cuts down the traction and then the train rolls with, drives with

06:04.520 --> 06:06.920
thanks to its inertia.

06:06.920 --> 06:08.440
And then the train can be braking.

06:08.440 --> 06:12.080
That's four driving actions that we are going to study.

06:12.080 --> 06:17.160
The idea is to study each type of action and see how much energy we can save per unit of

06:17.160 --> 06:20.280
time that we add.

06:20.280 --> 06:28.000
If we look at the accelerations, we can try to accelerate a bit not as strong as the maximum.

06:28.000 --> 06:35.160
So let's say V0, we like accelerate a bit slower and then we accelerate at maximum again.

06:35.160 --> 06:40.240
And I'm saving the formulas because it would be too long for this talk, but basically this

06:40.280 --> 06:48.360
can lead to a nice but small amount of energy saved per unit of added time.

06:48.360 --> 06:56.840
If we look at maintaining speed, as we saw the speed has a huge impact on the air friction.

06:56.840 --> 07:03.600
And so driving at V1 a bit lower saves actually lots of energy per unit of time added, so

07:03.600 --> 07:06.200
that's interesting.

07:07.160 --> 07:09.640
There are two reasons for coasting.

07:09.640 --> 07:14.440
The first one, the small triangle you see here, corresponds to a slope.

07:14.440 --> 07:20.920
So the driver will cut down the traction before the slope, slow down a little bit and then

07:20.920 --> 07:24.400
accelerate again thanks to gravity in the slope.

07:24.400 --> 07:28.480
And then on this distance, no traction was used.

07:28.480 --> 07:29.880
So it's interesting.

07:29.880 --> 07:34.880
And before braking, if we know we are going to need to brake and slow down, we might as

07:34.920 --> 07:41.560
well cut the traction before and then thanks to the inertia, the train will drive and lose

07:41.560 --> 07:42.880
some speed.

07:42.880 --> 07:50.400
So this is, we have two parameters here, the same V1, so the maximum speed and then VF

07:50.400 --> 07:57.480
here, the velocity at which we want to stop the coasting and start braking.

07:57.480 --> 08:02.640
And this is also very interesting in terms of energy saving per added time.

08:02.640 --> 08:11.160
And for braking, well, no energy used at braking, so no possible energy savings at

08:11.160 --> 08:13.160
braking.

08:13.160 --> 08:19.520
So what this analysis shows is that the two most interesting parts are actually saving

08:19.520 --> 08:25.320
energy on maintaining speed and coasting, which would, if we combine them, look like

08:25.320 --> 08:28.120
something like this.

08:28.120 --> 08:34.600
We want them to be equal so that the margin is as evenly distributed as possible.

08:34.600 --> 08:39.840
We don't want all the margin to be on one spot for reason I'll explain a bit later.

08:39.840 --> 08:45.560
And then basically how the algorithm works in the end.

08:45.560 --> 08:52.040
We start with the fastest drive that we compute and then we do a binary search algorithm with

08:52.040 --> 08:53.040
iteration.

08:53.040 --> 08:58.880
So we start with V1 and VF that leads to, let's say, this result.

08:58.880 --> 09:04.080
Then we get an output of how much time this represents actually.

09:04.080 --> 09:11.320
And we compare this time to the time we want, the 9, 28 and the 10, 12 from before.

09:11.320 --> 09:16.200
And then we iterate and we compute different ones until we converge to the solution that

09:16.200 --> 09:18.840
leads to the time we want.

09:18.840 --> 09:24.840
So if we come back to the first example, this leads to something like this, where the higher

09:24.840 --> 09:31.640
speeds are lowered and then you can see the coasting phases before each braking phase.

09:31.640 --> 09:37.720
And we arrive on time with the margin that we added.

09:37.720 --> 09:43.880
Now let's see how it looks like on some examples using OSRD simulation.

09:43.880 --> 09:50.840
So here a train between Paris and Lyon, so it's a high speed train, a TGV.

09:50.840 --> 09:56.360
Here you can see it on the map and then you have a linear margin.

09:56.360 --> 10:00.920
I don't know if everyone can see the green lines, yes.

10:00.920 --> 10:05.720
Okay, so linear margin on top and then maricot algorithm at the bottom.

10:05.720 --> 10:13.200
And then here the orange curve is the slopes along the path of the train.

10:13.200 --> 10:19.760
So here on this example you can see some like the triangle parts correspond to the train

10:19.760 --> 10:23.040
cutting down traction and then using the slope to accelerate again.

10:23.040 --> 10:28.620
And then you can see here that it's cutting the traction about a bit before the final

10:28.620 --> 10:30.000
braking here.

10:30.000 --> 10:37.080
So in this case we get 12% of energy saving between those two strategies for the same

10:37.080 --> 10:39.760
running time.

10:39.760 --> 10:45.080
Another example between gap and brilliance, so this is in the Alps, in the mountains.

10:45.080 --> 10:51.560
So the slopes here are quite strong and there are many like uphill and downhill slopes.

10:51.560 --> 10:56.080
So it's interesting because then we can use the triangle technique many times, cutting

10:56.080 --> 11:00.480
down the traction and then keeping up with the speed, the fence to the slope.

11:00.480 --> 11:04.680
As you can see here, there are many triangle shape.

11:04.680 --> 11:09.720
And then there are more stops here, so also more braking phases that we can use for coasting.

11:10.400 --> 11:18.400
In that case, it's 13% of energy saving also because the overall decliivity goes uphill.

11:18.400 --> 11:24.400
So it's not as great for this algorithm to work well.

11:24.400 --> 11:29.960
Another example in Bretagne, so this is the west of France between Rennes and Camper.

11:29.960 --> 11:33.960
With many stops this time, so I simulated a regional train that stops in many cities.

11:33.960 --> 11:39.200
So there are many stops, hence many coasting phases before braking.

11:39.200 --> 11:41.960
And the overall decliivity is quite flat.

11:41.960 --> 11:47.400
So in that case, we get 20% energy saving, which starts being a lot.

11:47.400 --> 11:54.560
And last example would be near Paris, so between Paris and Mont-Flajoli.

11:54.560 --> 11:58.720
Also many stops, but this time the overall decliivity is mostly descending.

11:58.720 --> 12:03.600
So it's very good situation for the algorithm to be efficient.

12:03.600 --> 12:07.160
Well in that case, we get 32% of energy saving.

12:09.360 --> 12:11.920
So let's plan all the trains with this algorithm.

12:11.920 --> 12:12.720
What can go wrong?

12:12.720 --> 12:21.520
Well, there are some impacts of the Marico algorithm on train planning and operation.

12:21.520 --> 12:23.520
I'm going to start with the few downsides.

12:24.920 --> 12:32.320
Most of the margin end up towards the braking phases because that's where the main coasting phases are.

12:32.320 --> 12:36.440
So we need to use it a bit carefully, especially in the long distances.

12:36.440 --> 12:40.760
I showed you the Paris to Lyon trip without no stops in between.

12:40.760 --> 12:44.720
So most of the margin was at the end, which means if the train leaves late,

12:44.720 --> 12:51.040
it's going to catch up near Lyon, but it's not going to be able to really catch up on the way.

12:51.040 --> 12:54.720
So it's going to be a bit late all the time, which is not great.

12:54.720 --> 12:56.960
So it needs to be used carefully.

12:56.960 --> 13:03.720
You can also deteriorate the headway, so how many trains can run in a certain amount of time

13:03.720 --> 13:07.120
because it can lower the speeds a bit too much in some areas.

13:09.840 --> 13:14.560
It also considers that drivers will follow the fastest drive at low speeds,

13:14.560 --> 13:21.680
so accelerating as much as possible, which is not the case if we study at driver behaviors.

13:21.680 --> 13:31.600
So we in the end plan trains a bit wrong if we consider that every driver will accelerate using 100% of the traction force.

13:34.400 --> 13:38.760
The good news is, sorry, energy savings.

13:38.760 --> 13:43.160
Well, this can be a lot of money in the end for the company.

13:43.160 --> 13:46.880
Each percent can be a lot, so imagine 20 or 30%.

13:47.840 --> 13:56.800
It's a bit more similar to driver behaviors, especially experienced drivers that know where they are driving.

13:56.800 --> 14:01.600
They will anticipate the slopes and they will cut down traction to save some energy.

14:01.600 --> 14:05.920
So it's more similar to the actual driving than the linear margin.

14:05.920 --> 14:12.520
Strong accelerations are better for the headway, especially in dense lines.

14:12.520 --> 14:20.040
So you want trains to leave the stations as early as possible and then drive at high enough speed

14:20.040 --> 14:24.720
because trains that drive slowly have really bad, sorry, for the headway.

14:26.000 --> 14:30.920
And coasting before braking, also in dense lines,

14:30.920 --> 14:37.800
brings drivers to approach to reach the stations at lower speed because they have been using the coasting before.

14:37.800 --> 14:44.320
So they can anticipate and adapt to braking better if there is a train in front of them with

14:44.320 --> 14:50.120
and they get like a caution signal, asking them to slow down.

14:50.120 --> 14:52.400
And that's it. Thank you.

14:52.400 --> 15:00.400
APPLAUSE

15:00.400 --> 15:05.400
We have three minutes for questions, I think here and here now.

15:05.400 --> 15:09.400
Yeah, you mentioned that grading doesn't cost any energy.

15:09.400 --> 15:13.400
We generate a risk braking. It does save energy if you rate slower.

15:13.400 --> 15:15.400
Does it take a different program?

15:15.400 --> 15:19.400
This algorithm doesn't take it into account because it's too old.

15:19.400 --> 15:27.400
So I don't think trains that could gain energy at braking were a thing at that time.

15:27.400 --> 15:33.400
I personally would like to adapt this algorithm to take this into account in the future

15:33.400 --> 15:37.400
if that becomes one of our needs for OSRD simulations.

15:37.400 --> 15:39.400
But yeah, you're right.

15:39.400 --> 15:43.400
What about the length of the train?

15:43.400 --> 15:48.400
I mean, for instance, a long freight train, you can get some very different things

15:48.400 --> 15:52.400
because there are supposed to be a sensing and a sending.

15:52.400 --> 15:58.400
Yeah, so I forgot to, I think I need to say the questions again for the microphone.

15:58.400 --> 16:03.400
So yeah, the question was what about long trains, especially freight trains, that can be very long?

16:03.400 --> 16:08.400
Well, yes, the cleavities, the slopes can compensate on very long trains.

16:08.400 --> 16:14.400
Well, this effect, this algorithm also works, no matter the length of the train.

16:14.400 --> 16:20.400
It's just because of the binary search, we don't know the exact output.

16:20.400 --> 16:28.400
So we simulate it, we see the total time, and then we adapt the V1 and Vf velocities

16:28.400 --> 16:33.400
for the right time that we want.

16:33.400 --> 16:38.400
So it's actually taking into account those, as long as the algorithm you use

16:38.400 --> 16:43.400
is taking this into account in the simulation.

16:43.400 --> 16:45.400
One last question.

16:45.400 --> 16:47.400
Sorry.

16:47.400 --> 16:53.400
I see your graphs because they're on time, but when you save energy,

16:53.400 --> 17:00.400
I will assume from the graph that the graph is now shown, it covers less distance

17:00.400 --> 17:03.400
because you have time over speed.

17:03.400 --> 17:06.400
But where is the time actually saved?

17:06.400 --> 17:12.400
Is it normally that the train would just get at its end station earlier,

17:12.400 --> 17:19.400
and now just take that extra five minutes away and spread it out by saving energy?

17:19.400 --> 17:25.400
No, actually the graph was showing only show speed and distance.

17:25.400 --> 17:32.400
So the time, if you show it on, I don't know if there is, yeah.

17:32.400 --> 17:34.400
No, we don't have time for this, okay?

17:34.400 --> 17:35.400
Sorry.

17:35.400 --> 17:39.400
But they actually arrive on the time.

17:39.400 --> 17:44.400
They drive a bit slower, so if you represent it as a space-time diagram,

17:44.400 --> 17:51.400
you will see that there will be a bit more horizontal because they drive slower.

17:51.400 --> 17:53.400
Thank you, Alex.

17:53.400 --> 17:55.400
Thank you.

