WEBVTT

00:00.000 --> 00:21.400
So, good morning everyone. This is talk about Geeksforge. So, first let me explain what

00:21.400 --> 00:27.560
Geeksforge is about. So, Geeksforge is a Geeks channel that has services that will allow

00:27.560 --> 00:34.120
you to run a complete GitHub like software forge, but fully on free software and using

00:34.120 --> 00:42.720
existing free software components like Seagate and Git, of course, the laminar continuous

00:42.720 --> 00:50.680
integration system, something like public inbox and so on. So, usually when we try to

00:50.680 --> 00:57.520
build GitHub alternatives, we have monolithic systems like GitLab or GitE, Gox and so on.

00:57.520 --> 01:06.760
What Geeksforge tries to do different is use old and existing very stable components like

01:06.760 --> 01:13.960
Seagate and assemble it all together into a system that resembles a software forge. And

01:13.960 --> 01:20.200
it is assembled together using Geeks. So, you have a nice declarative configuration that

01:20.200 --> 01:25.160
you can just deploy practically anywhere. So, in a sense, it's like million a box if

01:25.160 --> 01:30.640
you have heard of the project, million a box, they set up complete mail server on a

01:30.640 --> 01:36.880
system using by integrating many different components. It's like that, but for software

01:36.880 --> 01:51.360
forges and using Geeks. So, first I'll start with a quick demo of the Geeks system containers.

01:51.360 --> 01:59.160
This is quite widely used as a package manager, but as a means to deploy Geeks, a full operating

01:59.160 --> 02:07.720
system and operating system containers, it's not so widely used. So, I just want to quickly

02:07.720 --> 02:13.480
show you a demo of how it works. So, this is a really simple operating system configuration.

02:13.480 --> 02:23.440
It just has an engine service that listens on 8080 and serves static directory. So, let

02:23.440 --> 02:35.360
me build that. So, the static directory has a simple HTML file that I just wrote up. So,

02:35.360 --> 02:43.120
first let's build the container. You build it using Geeks system container. And the hyphen

02:43.160 --> 02:49.080
capital N is to enable network access. And the container is completely stateless, something

02:49.080 --> 02:55.960
like Docker where you have attached storage somehow. So, you have to mount all storage,

02:55.960 --> 03:04.840
all state into the container. And that's why we have the expose here. So, you have this

03:04.840 --> 03:11.760
script that has been returned. So, if you open it, it's really just a guy's script that

03:11.760 --> 03:19.240
sets up the container and has all the dependencies built into the store itself. So, let me now

03:19.240 --> 03:47.120
run it. So, pseudo... Yeah. It says that my Geeks is two worlds, older than 30 days. So, I have started

03:47.120 --> 03:55.080
up the container. Let's just go to localhost 8080. And it works. So, this is just the static

03:55.080 --> 04:04.520
HTML page. Now, let's try to set up a container that actually uses the Geeks 4 channel. So, this

04:04.520 --> 04:11.320
is a more complicated configuration, operating system configuration. Here, I want to show you

04:11.960 --> 04:19.320
the Seagate service that Geeks 4 provides. So, it's really simple and it just takes a server name,

04:19.320 --> 04:23.160
which is the domain name. And then the repository directory where all the gate repositories are

04:23.160 --> 04:28.040
stored. And then you have something called a Forge engine X service, which is similar to the

04:28.040 --> 04:35.600
basic engine X service that you have in Geeks upstream. But it automatically handles things

04:35.600 --> 04:43.400
like HTTPS, acquiring a TLS certificate, setting up a crown job to periodically renew the certificate,

04:43.400 --> 04:49.880
automatic redirection from HTTP to HTTPS and so on. So, it does a lot of things in a very

04:49.880 --> 04:56.040
turnkey, fully automated way. You just push the button and you get it essentially. And this is

04:56.040 --> 05:01.680
the Acme service configuration. So, Acme is the protocol behind the Let's Encrypt. You have to

05:02.560 --> 05:08.760
register an email ID of that. So, that's my email ID. So, in this configuration, I'm currently

05:08.760 --> 05:12.920
using the staging URL. It's good for testing because you won't run into any rate limits.

05:12.920 --> 05:24.160
So, I'll actually take the risk and delete that. We'll try to build with a real Acme server. So,

05:24.160 --> 05:29.920
here again, I'll build a container and run it. I'm mounting a couple of state directories,

05:30.240 --> 05:37.920
Acme directory and the GitR Poster directory. So, there it is. It started. So, I'll go to

05:37.920 --> 05:44.320
git.demo.system.rego.net. So, initially, the container set up with a self-signed certificate.

05:44.320 --> 05:59.680
So, it doesn't work. So, let's actually get real certificates. So, find the shepherd.

05:59.680 --> 06:16.000
So, the PID of the container is 19.262. I drop into a shell. Get some source and profile. So,

06:16.000 --> 06:26.360
GitX4 sets up a script under user bin. Acme is any... Yeah, I'm inside the container. Yeah. So,

06:27.240 --> 06:32.440
around the script. And the script has been automatically configured with all the domain

06:32.440 --> 06:40.440
names that need certificates. And now it is actually getting certificates from Let's Encrypt. If you

06:41.240 --> 06:47.080
can see the logs, it's telling you what it's doing. Yeah, that it has a certificate and it has

06:47.080 --> 06:54.840
restarted the Nginx service as well. Now, if I reload this, it should work with proper certificates.

06:54.840 --> 07:10.120
Let's try. Yeah, there you go. So, this is Git. And you can browse some repositories that I put in

07:10.120 --> 07:20.520
there. So, Git is really simple, but it doesn't come with all features properly enabled by default.

07:20.520 --> 07:25.800
And you have to do a lot of manual tinkering to get it to work. For example, by default,

07:25.800 --> 07:33.880
it only serves the dumb HTTP transport protocol for Git. So, but the C Git Nginx 4G is set up

07:33.880 --> 07:42.840
with the smart HTTP protocol. That's one. And then you have things like... So, this C Git can render

07:42.840 --> 07:48.200
org mode readme files, which the basics it can't do. So, this is actually an org mode readme file

07:48.280 --> 07:56.840
in this repo. Then you have things like syntax highlighting that is automatically set up again.

07:57.480 --> 08:05.000
So, let's just look at the make file maybe. Yeah, so, yeah, you see the syntax highlighting.

08:06.280 --> 08:16.040
So, for that it uses Python pigments. So, my point is that Gitx 4G tries to do all this for you and

08:17.000 --> 08:21.960
doesn't expose all this complexity to the administrator. And all you're really saying here in this

08:21.960 --> 08:27.960
configuration is domain name and the directory where the repositories are. So, it handles a lot of

08:27.960 --> 08:39.160
things with very sensible defaults behind your back. So, that's that. Yeah. How much time do I have?

08:39.400 --> 08:51.480
Okay. Okay. So, the philosophy behind Gitx 4G is that it has to be really minimalistic.

08:53.000 --> 09:00.280
I don't want to be running a full database server just to publish a few GitHub postries and run a

09:00.280 --> 09:05.800
small project. And it should be as stateless as possible. Of course, you need a little bit of

09:05.800 --> 09:11.720
state for if you need a mailing list or if you need to backup your Git reports, of course.

09:12.840 --> 09:18.040
But it should not have hard to backup state like a database that you have to be

09:20.760 --> 09:24.760
that takes a lot of cognitive overhead to keep working successfully.

09:25.880 --> 09:31.160
As to, should be as donkey as possible, but it should still be able to inspect it and fit it

09:31.160 --> 09:37.480
in your head. It should not be something that is so complex that you cannot hold it in your head.

09:38.440 --> 09:46.120
And effectively, what the, what Geeks 4 and the, the Geeks 4 channel is doing is that it's,

09:46.120 --> 09:54.200
it's crowdsourcing server management in some sense. So, the regular server which you are always,

09:54.200 --> 09:57.160
which have, for which you have to mutate configuration files, you are the only one

09:57.880 --> 10:04.280
who's in charge of the server. But when you have Geeks 4 doing a lot of things for you,

10:04.280 --> 10:08.760
you're essentially getting a community to help you with managing your server.

10:08.760 --> 10:16.360
And so hopefully that will reduce configuration errors and let you run a polished server setup

10:16.360 --> 10:20.360
without putting in too much work. So that's it. Thank you.

10:27.720 --> 10:32.040
Nobody complains when the speaker is too quick, right?

10:35.240 --> 10:39.400
Is this a replacement from GitHub? Yeah, it's meant to be.

10:41.800 --> 10:45.240
What about the fast pushing process and we having these things?

10:45.240 --> 10:49.880
Can we support them with this Geeks 4? Do you mean the email workflow?

10:49.880 --> 10:55.400
Yeah. Yeah, so I don't mean to support public inbox based mailing list.

10:55.640 --> 11:02.680
Instead of pull request based model. I think that's easy to set up using existing tools and

11:03.640 --> 11:07.160
personally I think it's better than the pull request based model.

11:09.160 --> 11:09.640
Questions?

11:12.200 --> 11:12.600
Yeah.

11:12.600 --> 11:15.000
So I think you mentioned it's in a separate channel.

11:15.000 --> 11:15.640
Yeah.

11:15.640 --> 11:19.640
And are you planning to upstream it and what would be needed for that?

11:20.440 --> 11:23.640
So, can we repeat the question?

11:23.720 --> 11:25.160
Yes. Yes. Yes. Sorry.

11:25.160 --> 11:30.600
So I'm planning to upstream it into Geeks upstream instead of having a separate channel.

11:30.600 --> 11:33.720
So certainly there are some parts that can be upstream.

11:33.720 --> 11:39.320
For example, the automatic HTTPS that I demo it can certainly it should be upstreamed.

11:40.120 --> 11:43.000
But the all the other services I'm not really sure.

11:43.000 --> 11:50.760
So I'm not sure how much of this fits into Geeks upstream itself.

11:51.000 --> 11:55.640
We already have a Seagate service in Geeks upstream that doesn't do as much as the Seagate

11:55.640 --> 12:00.200
service in Geeks 4. So upstreaming this will essentially break the old service.

12:00.200 --> 12:02.200
Maybe it should be called something else now.

12:02.200 --> 12:05.400
So that's a difficult conversation to have.

12:05.400 --> 12:07.480
Could you have a Meta service?

12:09.000 --> 12:09.240
Sorry?

12:09.240 --> 12:11.560
Do you have a service with all your special services?

12:11.560 --> 12:18.200
I do have a 4 service. It's not fully integrated but it aims to be a full Meta service.

12:18.200 --> 12:18.680
Yeah.

12:19.400 --> 12:20.680
Can you show Laminar?

12:21.240 --> 12:23.240
Oh yes. I can show it in the browser.

12:24.680 --> 12:34.120
So this is Laminar which is a continuous integration system.

12:34.120 --> 12:36.440
So this is a system that we are already running.

12:38.440 --> 12:40.680
It's not running on this laptop. It's running on a different server.

12:41.960 --> 12:47.800
And it's a really simple continuous integration system that is very easy to set up.

12:49.560 --> 12:55.960
Like most continuous integration systems are so complex that they read the very

12:55.960 --> 12:59.560
enterpracy projects that are not meant for a single person to set up.

13:00.520 --> 13:05.160
But Laminar is really easy and you should have a look at the documentation itself.

13:05.160 --> 13:09.560
It's just a single page of documentation and you can set it up.

13:09.560 --> 13:11.160
So we use that in Geeks 4.

13:11.160 --> 13:14.920
And it fits in with the philosophy of using very minimal tools.

13:15.240 --> 13:19.640
We also have class in Geeks 4.

13:19.640 --> 13:24.920
Class is another Git reviewer which is written in Python.

13:24.920 --> 13:28.440
So you have even a choice for...

13:28.440 --> 13:35.400
If you don't like CGIT you can use class and maybe you can support Git delay and other Git viewers too.

13:37.960 --> 13:38.680
Sure.

13:39.400 --> 13:46.600
So these are the Git logs. Maybe... Yeah, make file again.

13:49.560 --> 13:54.120
So class is just a Git reviewer. It doesn't do anything else.

13:56.280 --> 13:58.440
Yeah, it supports the Smart HTTP protocol.

13:58.520 --> 13:59.160
Yeah.

14:04.680 --> 14:07.400
So you mentioned that the TLS stuff is automated as well.

14:07.400 --> 14:11.560
But with the demo there was something that seemed kind of manual?

14:12.280 --> 14:16.360
Oh yeah. So the manual step that I showed you is only the first time.

14:17.960 --> 14:20.520
And after that that same script is ran as a cron job.

14:21.560 --> 14:26.440
I need to get rid of the first manual step but I think I need to patch something in Geeks upstream for it to happen.

14:26.760 --> 14:28.040
So yeah.

14:30.200 --> 14:30.680
Question.

14:30.680 --> 14:41.160
Would it be easy to use this process to set up your own channel and then auto build your packages and then deliver that as a substitute?

14:41.160 --> 14:41.640
Yeah.

14:41.640 --> 14:42.120
Yeah.

14:42.120 --> 14:43.400
Get them to end the flow?

14:43.400 --> 14:49.720
Yeah. So we already do that in my Geeks 4 instance.

14:50.040 --> 14:52.440
And we also have the...

14:55.400 --> 14:59.240
So that is the Geeks bioinformatics channel which Pewter runs.

14:59.240 --> 15:03.240
And we already do that for all the packages in Geeks bioinformatics.

15:03.240 --> 15:08.360
For example, here you see names of many packages.

15:08.360 --> 15:09.720
Some of them build, some of them fail.

15:09.720 --> 15:12.680
And I think it's...

15:14.280 --> 15:18.760
Using laminar and Geeks 4 is simpler than something as complicated as...

15:19.880 --> 15:22.120
As Geeks is quicker as CIS.

15:22.120 --> 15:26.040
And I really don't want to be running Postgres to have...

15:27.560 --> 15:29.960
To just provide substitutes for my channel.

15:35.480 --> 15:38.360
So we have a replacement here for many things, right?

15:38.360 --> 15:38.840
Yeah.

15:38.840 --> 15:39.800
Including GitHub CI.

15:41.480 --> 15:42.680
We don't use GitHub CI anymore.

15:43.560 --> 15:44.840
Yeah, we don't use GitHub CI anymore.

15:45.160 --> 15:49.640
Alright.

15:49.640 --> 15:57.980
Thank you.

