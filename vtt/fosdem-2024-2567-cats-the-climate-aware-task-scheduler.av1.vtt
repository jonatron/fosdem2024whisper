WEBVTT

00:00.000 --> 00:16.880
The Institute which tries to promote best practice in research software across the UK.

00:16.880 --> 00:22.240
And earlier this year we worked on this project called Cats, the Climate Aware Task Scheduler

00:22.240 --> 00:26.040
that we'd like to talk to you about today.

00:26.040 --> 00:31.680
So very simply the idea behind Cats is to try and time shift when we do our compute

00:31.680 --> 00:37.960
to the times when the carbon emissions of producing electricity are at their lowest.

00:37.960 --> 00:44.160
We are probably aiming this at smaller to mid-size HPC and HTC systems that are not

00:44.160 --> 00:49.000
100% loaded and therefore we have that flexibility to time shift.

00:49.000 --> 00:52.840
If you've got a super busy system that's always at 100% then there's not much you

00:52.840 --> 00:57.960
can achieve by time shifting your compute.

00:57.960 --> 01:02.520
I'm sure that most of you are familiar with the very pressing need as to why this is important

01:02.520 --> 01:07.720
but carbon dioxide levels are now getting higher than we can tell they have ever been

01:07.720 --> 01:10.120
for the last 800,000 years.

01:10.120 --> 01:14.040
Before that our records are not so clear because we don't have things like ice cores

01:14.040 --> 01:19.680
readily available but it looks like this is very, very much human caused and because

01:19.680 --> 01:25.880
of burning fossil fuels and this is causing a rather dramatic and alarming increase in

01:25.880 --> 01:27.480
temperature.

01:27.480 --> 01:33.520
Very worryingly in 2023 we saw temperatures going dramatically off the scale and with

01:33.520 --> 01:37.600
a far bigger jump than we had seen in any prior year.

01:37.600 --> 01:40.920
We get to see if that trend is going to repeat last year but I don't know how many of you

01:40.920 --> 01:44.840
have been to Fozden before but for me this is the warmest Fozden I've ever been to and

01:44.840 --> 01:48.840
I think this is my fifth one.

01:49.000 --> 01:52.000
Most specifically in activation.

01:52.000 --> 01:56.000
Have I gone?

01:56.000 --> 02:00.000
No, that's going.

02:00.000 --> 02:01.000
Is that working?

02:01.000 --> 02:02.000
Yes.

02:02.000 --> 02:05.360
We don't want to set the world on fire from doing our computational work but that work

02:05.360 --> 02:10.480
is important and we would like to do it but having the most minimal impact we can while

02:10.480 --> 02:13.080
we do so.

02:13.080 --> 02:17.720
So our plan is, as I said, to time shift our compute to when electricity has the lower

02:17.760 --> 02:19.760
carbon intensity.

02:19.760 --> 02:23.640
We focus this very much on the UK because that's where at least most of us were based

02:23.640 --> 02:25.760
and where we met to come up with this idea.

02:25.760 --> 02:31.280
The UK has a very, very variable level of carbon intensity in its electricity.

02:31.280 --> 02:35.880
Some other countries are not so variable but we have quite a lot of wind power now and

02:35.880 --> 02:40.960
quite a bit of solar but it's always windy and it's not always sunny.

02:40.960 --> 02:45.080
Carbon intensity can actually vary from in some regions as low as zero grams of carbon

02:45.120 --> 02:49.320
dioxide per kilowatt hour to about 400.

02:49.320 --> 02:54.320
The average across the whole of the EU in 2022 was about 250.

02:54.320 --> 03:01.320
And we have some huge regional variations within the UK.

03:01.920 --> 03:07.720
Scotland is normally very green and very low carbon because it's got a lot of wind power,

03:07.720 --> 03:14.720
a lot of hydro, not that many people demanding it, not that much industry compared to England.

03:14.960 --> 03:19.360
And although it is interconnected into England, those interconnected are of limited capacity

03:19.360 --> 03:23.880
so all of that electricity can actually be made to other parts of the country.

03:23.880 --> 03:29.040
Conversely, the south of England has a very high population density and is very dependent

03:29.040 --> 03:30.840
on gas power still.

03:30.840 --> 03:35.160
It does have a bit of solar power because it's the sunniest part of the country and

03:35.160 --> 03:39.200
a little bit of wind but not so much as Scotland by any means.

03:39.200 --> 03:43.880
As we do have this relations connection, we have a lot of international interconnections

03:43.920 --> 03:44.920
now.

03:44.920 --> 03:47.240
A new one just came online to Denmark.

03:47.240 --> 03:51.000
Another new one came online to Norway a couple of years ago and an additional one to France.

03:51.000 --> 03:55.280
We've had another one to France since the 1980s and there's also interconnected Belgium,

03:55.280 --> 03:57.560
the Netherlands and Ireland.

03:57.560 --> 04:04.560
But again, those represent maybe 30% of typical generation capacity.

04:06.360 --> 04:12.240
Unfortunately in the UK we also have this great web API called carbonintensity.org.uk

04:12.240 --> 04:17.120
that provides us with regionalised forecasts for the next 48 hours with 30 minute time

04:17.120 --> 04:18.120
windows.

04:18.120 --> 04:23.160
And it has both JSON and XML APIs that will allow us to interrogate this data and very

04:23.160 --> 04:30.000
easily get hold of what our regional forecasts are and it will show us how things are performing

04:30.000 --> 04:35.040
both against the forecast and previous measurements.

04:35.040 --> 04:37.920
So just to give an example of some of the data we get out of this site, this is an example

04:37.920 --> 04:43.440
of a really good day in October last year where the whole country was green, which I

04:43.440 --> 04:49.440
think means under 75, no, maybe 100 grams of CO2 per kilowatt hour and about half the

04:49.440 --> 04:54.200
country is dark green, which means I think under 35.

04:54.200 --> 04:55.640
And we can see some of these regional variations.

04:55.640 --> 05:01.040
So just comparing two regions here, these are two regions where my employer has offices.

05:01.040 --> 05:08.040
So in the north Wales and Merseyside region, which is this one here, we had only grams

05:08.240 --> 05:10.880
of CO2 per kilowatt hour.

05:10.880 --> 05:15.440
In the south of England we had 92, which still for the south of England is very low.

05:15.440 --> 05:20.520
But if you look at it later, the situation had changed drastically and we now have 289

05:20.520 --> 05:25.120
grams in the south and 235 in north Wales.

05:25.120 --> 05:29.400
So if we could have made sure our compute jobs ran on the 6th instead of the 9th, we

05:29.440 --> 05:34.600
could have reduced the amount of carbon being put into the atmosphere to run those jobs

05:34.600 --> 05:37.800
quite considerably.

05:37.800 --> 05:41.480
So just thinking about how much this might actually save us, imagine we have a fictional

05:41.480 --> 05:47.480
HPC or part of an HPC, which has 64 core AMD epic CPUs.

05:47.480 --> 05:51.720
There's 10 nodes, a 1280 cores in total.

05:51.720 --> 05:57.800
And we reckon each one of those will use about 255 watts fully loaded or 37.5 idle.

05:57.840 --> 06:01.720
So if we can bring that node down from full to idle, assuming we don't turn it off or

06:01.720 --> 06:08.520
suspend it or anything clever like that, then we're looking at around 217 watt per CPU saving.

06:08.520 --> 06:12.360
If we can timeshift from when the grid would be at 200 grams of CO2 per kilowatt hour to

06:12.360 --> 06:14.960
50, that's 150.

06:14.960 --> 06:20.400
If we had a 12 hour job that used all those 1280 cores, that's around 50 kilowatt hours,

06:20.400 --> 06:25.360
which equates to about 7.5 kilograms of carbon dioxide, which is the same as driving a car

06:25.400 --> 06:28.080
50 kilometers.

06:28.080 --> 06:32.880
So how many of us might consider not driving to work or not driving a 50 kilometer route

06:32.880 --> 06:35.040
because it might reduce the environmental impact?

06:35.040 --> 06:38.720
How many of our employers might also have a policy that says you shouldn't drive those

06:38.720 --> 06:40.920
kind of distances, you should take public transport?

06:40.920 --> 06:43.360
Well, why shouldn't we have the same policies for compute?

06:43.360 --> 06:47.080
If we can achieve similar savings, we should be doing that for our compute systems as well

06:47.080 --> 06:49.440
as for our travel.

06:50.440 --> 06:53.760
I'd just think about this across the wider world.

06:53.760 --> 06:59.080
There was a paper published in, I think, 2021, looking at the potential savings of doing

06:59.080 --> 07:04.600
time shifting for AI based jobs in cloud providers, just showing us the different levels of savings

07:04.600 --> 07:06.720
that could be achieved in different regions.

07:06.720 --> 07:10.320
So as you see, these vary quite dramatically from region to region, normally depending on

07:10.320 --> 07:17.160
how much renewable energy is available in that region and how bad the alternative is

07:17.200 --> 07:21.920
when they are not using renewable energy as well.

07:21.920 --> 07:26.320
Now, a lot of people might suggest, well, the grid is going to go net zero soon anyway.

07:26.320 --> 07:28.440
Is it really important to do this?

07:28.440 --> 07:34.880
And the UK has put out a set of future scenarios about how they might achieve their net zero

07:34.880 --> 07:37.280
transition.

07:37.280 --> 07:40.240
One of those scenarios, though, is where we don't actually achieve it.

07:40.240 --> 07:43.720
And it's not quite clear whether we're actually on that pathway or one of the more optimistic

07:43.720 --> 07:45.600
ones at the moment.

07:45.640 --> 07:50.080
But even if we do achieve this, and their target is by 2035, we should actually be near

07:50.080 --> 07:57.320
net zero, that's still another 11 years of us putting carbon dioxide into the atmosphere

07:57.320 --> 08:02.720
when we use electricity, when we could reduce that impact now if we do something with time

08:02.720 --> 08:03.720
shifting.

08:03.720 --> 08:08.000
So let's do something now instead of waiting 11 years for someone else to solve the problem

08:08.000 --> 08:11.880
and possibly not solve the problem in that time.

08:11.880 --> 08:13.760
There is also a financial incentive to do this.

08:13.760 --> 08:19.520
There are starting to be variable rate electricity tariffs that roughly reflect the carbon intensity

08:19.520 --> 08:24.960
because wind and solar power don't have any fuel costs, so they're much cheaper to offer.

08:24.960 --> 08:29.920
And if you've got your own electricity production like rooftop solar or your own wind farm, then

08:29.920 --> 08:35.240
there's also a saving to use that power, and it's normally better to use it than to export

08:35.240 --> 08:38.760
it and be paid normally quite poor rates for that export.

08:39.760 --> 08:45.160
So I'm now going to hand over to Appalachic who will talk more specifically about CATS

08:45.160 --> 08:47.160
and what it does.

08:53.160 --> 08:56.160
Checking, okay, seems to be working.

08:56.160 --> 08:57.680
Thanks Colin.

08:57.680 --> 09:04.640
So I've been introducing the climate error task schedule, and so CATS figures out the

09:04.640 --> 09:12.000
best time to start your HPC job, or really a job that you want to run in a laptop.

09:12.000 --> 09:17.680
The users need to submit run times, of course they need to have some idea of how long the

09:17.680 --> 09:21.360
job will take, and a postcode.

09:21.360 --> 09:26.320
So this graph shows for example that if you schedule a job to the optimal time, you can

09:26.320 --> 09:31.520
save your carbon footprint by 70%.

09:31.520 --> 09:37.320
So right now it's like a proof of concept, we haven't released version one yet.

09:37.320 --> 09:43.080
It was built in one day at these SSIs collaboration workshops.

09:43.080 --> 09:47.320
It's kind of a hackathon that we have every year.

09:47.320 --> 09:49.720
It won the first prize.

09:49.720 --> 09:57.480
So what it is is a Python script, and it targets the at scheduler, so the at scheduler on Linux

09:57.480 --> 10:02.880
and BSDs, schedules the starting time of a job.

10:02.880 --> 10:08.520
So if you want a thing to start at 6 in the morning, it's at 0600, and it will start the

10:08.520 --> 10:10.520
job then.

10:10.520 --> 10:16.560
So that's a very easy, simple way to integrate CATS into this scheduling system.

10:16.560 --> 10:21.160
So that's what we started with.

10:21.160 --> 10:26.800
So the limitation is of course that if your HPC is running at full load all the time,

10:26.800 --> 10:33.200
then it doesn't matter what you shift around because it will always be 100%.

10:33.200 --> 10:39.040
So it's really meant more for computing systems that are not on all the time, so time shifting

10:39.040 --> 10:40.520
will actually make a difference.

10:40.520 --> 10:43.880
Of course you'll need to know how long the job will take.

10:43.880 --> 10:47.600
Without that, this doesn't work at the moment.

10:47.600 --> 10:51.480
If it's an HPC, then other users might be trying to run at the same moment, so how do

10:51.480 --> 10:53.720
you do that sort of resuscitation?

10:53.720 --> 10:59.720
Currently, it only works in the UK because we're using the Carbon Intensity UK API.

10:59.720 --> 11:04.560
Of course, we open to pull requests for other APIs.

11:04.560 --> 11:09.920
If other countries have energy data, energy forecasting data, so far we have not found

11:09.920 --> 11:12.080
any free to use APIs.

11:12.080 --> 11:15.800
So if you know, please let us know.

11:15.800 --> 11:19.360
And of course, this is not the only thing you should do.

11:19.360 --> 11:28.760
You can use cooling or there's a lot of carbon, embodied carbon in the manufacturing cost of

11:28.760 --> 11:31.640
the server that things are running on.

11:31.640 --> 11:37.920
So that's probably why you have HPC refreshers because newer servers are much more efficient.

11:37.920 --> 11:42.680
So there's a lot of considerations, but in terms of what you as a user can do, I think

11:42.680 --> 11:46.480
this is a good place to start.

11:46.600 --> 11:54.120
So the way to use CATS is, it's a Python script, so you run it as a module, give it a job duration,

11:54.120 --> 11:55.120
give it a postcode.

11:55.120 --> 11:57.840
The postcode is a proxy for the location.

11:57.840 --> 12:03.360
And using this, it fetches data from the Carbon Intensity API and it calculates the optimal

12:03.360 --> 12:06.640
starting time for your job.

12:06.640 --> 12:14.280
So we return data in a format that can be passed to AT and it also gives additional data in

12:14.280 --> 12:15.280
JSON.

12:16.280 --> 12:22.360
So what the other feature of CATS is that it will try to inform the user about the carbon

12:22.360 --> 12:28.400
savings that take place when they're offsetting the time.

12:28.400 --> 12:35.800
So we do some estimates on how much carbon would be saved by using some year after specify

12:35.800 --> 12:42.640
configuration using like what kind of CPU or GPU you have, kind of power use efficiency

12:42.640 --> 12:45.520
and thermal design power.

12:45.520 --> 12:51.320
And using that, we have a simple formula that will calculate the amount of carbon that you

12:51.320 --> 12:57.560
would have saved by running it in this time that CATS wants you to run it rather than

12:57.560 --> 12:58.560
will right now.

13:02.560 --> 13:07.680
So this is a demo of CATS running.

13:07.720 --> 13:12.640
So we specify duration of 60 minutes.

13:12.640 --> 13:16.760
And this is RT1, which is redding.

13:16.760 --> 13:24.240
And it gives a time on 16th May, 1130.

13:24.240 --> 13:36.480
And it also shows you the amount of carbon saved.

13:36.480 --> 13:42.600
And that scheduled, so this is a last bit, you can run what you want as long as it takes

13:42.600 --> 13:43.800
around 60 minutes.

13:52.200 --> 13:54.640
Okay, that's it.

13:54.640 --> 14:02.760
So if you have any questions, please email us or put up an issue in our GitHub.

14:02.760 --> 14:06.320
And I skip the slide.

14:07.160 --> 14:12.040
So what we're doing is we are going to release vision on this month.

14:12.040 --> 14:13.600
We're cleaning the common line options.

14:13.600 --> 14:19.560
So right now we only support AT, but we also want to support SBAT, which is the Slurm command

14:19.560 --> 14:21.880
scheduler similar to AT.

14:21.880 --> 14:28.120
And so we'll clean on the command line options and we'll release a vision.

14:28.120 --> 14:33.000
But of course, going forward, we want to integrate with Slurm, which is the main scheduler for

14:33.000 --> 14:34.000
ACs.

14:34.000 --> 14:39.520
And the simplest method, of course, is SBAT, so the start time, the other option is green

14:39.520 --> 14:44.320
cues where you have cues that don't run 100% because again, with running 100%, you don't

14:44.320 --> 14:48.120
get the benefits of cats.

14:48.120 --> 14:52.520
So we have green cues which don't run 100% and also integrating carbon accounting.

14:52.520 --> 14:59.080
So Slurm has a plugin that allows you to look at the total power used in your job.

14:59.080 --> 15:02.560
So way to integrate carbon accounting into that would be great.

15:02.920 --> 15:07.880
That would require rewrites in C because Slurm plugins are in C.

15:07.880 --> 15:12.560
And we have got funding from the Software Sustainability Institute for a few months of developer time.

15:12.560 --> 15:20.480
So we're looking forward to making great progress and have something more polished soon.

15:20.480 --> 15:23.600
And yeah.

15:23.600 --> 15:25.600
And now, thank you.

15:25.600 --> 15:28.600
Thank you.

15:28.640 --> 15:35.520
Thank you, Kavain and Abish.

15:35.520 --> 15:37.520
We have time for some questions.

15:37.520 --> 15:38.520
Yes.

15:38.520 --> 15:41.960
Thank you for your last presentation.

15:41.960 --> 15:47.080
But my question is how often clusters are not load on 100%?

15:47.080 --> 15:48.080
Yes.

15:48.080 --> 15:50.600
I mean, that's a very good question.

15:50.600 --> 15:56.200
So I think we need to think about how these things will work moving forward.

15:56.200 --> 16:01.720
So we are talking with HBCs and I think this is more proof of concept and prototype to

16:01.720 --> 16:05.480
look at how these carbon footprints might be achieved.

16:05.480 --> 16:11.000
Obviously, if you do keep things 100% on time, then there is no point.

16:11.000 --> 16:18.680
But I think if we do move to a future where we don't move to a net zero grid soon, then

16:18.680 --> 16:24.160
we might see funders asking for carbon budgets or government putting carbon budgets just like

16:24.160 --> 16:25.600
your financial budget.

16:25.600 --> 16:26.840
And then you do want to see this.

16:26.840 --> 16:30.880
So it's more like playing the groundwork for what might come next and not for the current

16:30.880 --> 16:32.880
generation of HBCs.

16:32.880 --> 16:34.880
Any more questions?

16:34.880 --> 16:35.880
Sorry.

16:35.880 --> 16:38.880
I wasn't looking over there.

16:38.880 --> 16:43.560
Thank you very much.

16:43.560 --> 16:47.600
Couldn't you use also energy prices like energy stock prices for forecasting?

16:47.600 --> 16:51.320
Are they usually at least in Germany or lower when there's more renewable energy in the

16:51.320 --> 16:52.320
net?

16:52.320 --> 16:53.320
Thanks.

16:53.480 --> 16:56.880
Yeah, that's a good point that we'll look into.

16:56.880 --> 16:59.840
A good place to start with is to correlate, I guess, energy prices.

16:59.840 --> 17:06.120
Yeah, yeah, we'll do the care and look at carbon intensity.

17:06.120 --> 17:09.120
Thank you.

17:09.120 --> 17:13.960
Hi.

17:13.960 --> 17:20.760
I don't want to be Dell specific, but there's a web based tool from Dell called EIPT, Enterprise

17:20.760 --> 17:21.960
Infrastructure Planning Tool.

17:22.000 --> 17:28.720
You can configure servers with your particular build and you get their CO2 and power usage

17:28.720 --> 17:32.720
for various workloads, computational memory intensive and idle.

17:32.720 --> 17:37.600
And also Dell have a plugin for their IDRAX called Power Manager.

17:37.600 --> 17:45.680
You can take a rack or a group of workstations servers and turn down the energy capping dynamically.

17:45.680 --> 17:49.320
And that also works for Fujitsu and HPE servers for other brands.

17:49.320 --> 17:53.920
I wonder if you would like to extend your work into that rather than scheduling the

17:53.920 --> 17:58.200
jobs to turn down the power cap dynamically.

17:58.200 --> 17:59.200
That'd be quite possible.

17:59.200 --> 18:00.200
Thanks.

18:00.200 --> 18:08.080
Yeah, I was at a word that there was a carbon accounting plugin for Slurm already.

18:08.080 --> 18:13.320
So yes, ideally we have something that goes into Slurm and does the carbon accounting

18:13.320 --> 18:15.840
rather than having user-shadow jobs.

18:15.840 --> 18:17.520
That's definitely not optimal.

18:17.520 --> 18:18.520
So yeah, thanks.

18:18.520 --> 18:19.520
We'll look into that.

18:19.520 --> 18:22.520
Any more questions?

18:22.520 --> 18:23.520
Sorry.

18:23.520 --> 18:28.040
Are you also planning to integrate this into HD Condor?

18:28.040 --> 18:30.040
Sorry, could you repeat?

18:30.040 --> 18:33.800
Are you also planning to integrate this into HD Condor?

18:33.800 --> 18:38.520
It's another scheduling software?

18:38.520 --> 18:39.520
Not at the moment.

18:39.520 --> 18:43.200
At the moment we are focusing on Slurm, but once we have got something there we'll focus

18:43.200 --> 18:44.200
on other schedulers.

18:44.200 --> 18:45.200
Okay, thank you.

18:45.200 --> 18:46.200
Hi there.

18:46.200 --> 18:54.320
First of all, love it.

18:54.320 --> 18:55.920
So thanks very much for the talk.

18:55.920 --> 19:00.360
I'm looking forward to version one being released just to throw another thing out there that

19:00.360 --> 19:01.360
you could do.

19:01.360 --> 19:08.560
It'd be cool to have two locations and you can imagine an office having two offices in

19:08.560 --> 19:14.240
the UK and they're kind of deciding where to deploy that task.

19:15.240 --> 19:19.400
Maybe that extends even globally and you can choose where to run your task.

19:19.400 --> 19:21.640
Yeah, spatial shifting would be a nice thing to have.

19:21.640 --> 19:23.480
The problem with that is moving the data with it.

19:23.480 --> 19:30.160
You need to have the data in both locations or move the data in advance of the job starting.

19:30.160 --> 19:31.160
Anyone else?

19:31.160 --> 19:33.760
That's one over there.

19:33.760 --> 19:37.480
This is really just a comment.

19:37.480 --> 19:45.400
I made a calculation of how much commuting to work costs in terms of energy compared

19:45.400 --> 19:51.320
to what the supercomputers in that computing center are.

19:51.320 --> 19:55.440
Just to give you a perspective, usually when you go to work and go back home it's like

19:55.440 --> 19:57.760
the 100% that you can save here.

19:57.760 --> 20:03.360
So just to give in general to whenever you're doing such savings estimates, just be aware

20:03.360 --> 20:09.720
that tell your employer that just by working from home you can save that exact amount.

20:09.720 --> 20:12.720
Sorry, it's just a statement.

20:22.920 --> 20:28.640
Just a quick question on how CATS works.

20:28.720 --> 20:35.480
I don't recall if you got into detail about it, but does it use the API data for time

20:35.480 --> 20:43.440
series prediction or does it have some kind of internal calculation to do that?

20:43.440 --> 20:47.480
It tries to find the lowest carbon window in the forecast period.

20:47.480 --> 20:51.480
So if your job is going to be six hours it will try and find the lowest six hours in

20:51.480 --> 20:54.360
that period and schedule your job to that time period.

20:54.360 --> 20:57.280
Okay, but the predictions are already available.

20:57.640 --> 20:58.840
The predictions are not made by us.

20:58.840 --> 21:01.440
The predictions are available from the carbon intensity API.

21:13.440 --> 21:16.640
Thanks for the talk.

21:16.640 --> 21:18.080
I have one question.

21:18.160 --> 21:30.120
If you already saw an API which is called Wattime API, I think it does the same, but

21:30.120 --> 21:31.920
all over the world.

21:31.920 --> 21:34.960
I wasn't aware of that one, but that is very useful.

21:34.960 --> 21:36.560
We will look into that one.

21:49.080 --> 21:51.080
Hi there.

21:51.080 --> 21:52.080
One, two.

21:52.080 --> 21:53.080
You can hear me, right?

21:53.080 --> 21:54.080
Yeah.

21:54.080 --> 21:56.560
Hi, I'm Chris Adams from the Green Software Foundation.

21:56.560 --> 22:01.360
I'm curious about whether when you're doing this, if I know what jobs I did last year,

22:01.360 --> 22:05.880
is there a way for me to run any of this against, say, last year's worth of compute jobs to

22:05.880 --> 22:10.160
see what my savings could have been if I were to find something like this?

22:10.160 --> 22:14.120
Because a lot of this is forward-looking, but if I've got some data now, that will make

22:14.160 --> 22:18.520
it easier for me to make the case that this could create some meaningful savings inside

22:18.520 --> 22:20.600
my team or inside my organization.

22:20.600 --> 22:21.600
Yeah.

22:21.600 --> 22:25.640
Slurm normally has some accounting built in that logs when jobs ran, so that would give

22:25.640 --> 22:28.320
you the data that you'd need to go and do that.

22:28.320 --> 22:31.240
I think there's also a simulator available, which is something we want to look into in

22:31.240 --> 22:35.560
our next phase as to whether we can make use of that to do that kind of prediction, or

22:35.560 --> 22:37.560
not prediction analysis.

22:37.560 --> 22:42.200
I saw your talk last year, and that was actually some of the inspiration behind this.

22:42.200 --> 22:49.200
I think that's it.

22:49.200 --> 22:52.200
One more.

22:52.200 --> 22:54.200
Hi.

22:54.200 --> 22:57.960
I was wondering, we're also in the purchase of buy-in new cluster, and we have also raised

22:57.960 --> 23:00.960
this thing with the users.

23:00.960 --> 23:02.800
Turns out they don't really like this.

23:02.800 --> 23:07.680
The idea that there would be free resources in the cluster, and their job would not start

23:07.680 --> 23:08.680
immediately.

23:08.680 --> 23:12.280
Is this a cluster with people actually using the HPC clusters?

23:12.280 --> 23:15.280
So far, it's very hard.

23:15.280 --> 23:20.320
We're finding that from users, there's sort of a three-way split of some who care enough

23:20.320 --> 23:24.960
to definitely go out their way to do things, some who might use it if it was available,

23:24.960 --> 23:28.960
but aren't going to go out their way, and some who they want their science now, and

23:28.960 --> 23:31.240
they don't care what the carbon emissions are.

23:31.240 --> 23:35.200
I guess we can target the other two groups first, and the other third might get dragged

23:35.240 --> 23:39.240
out, kicking and screaming one day when carbon accounting comes in for them.

23:39.240 --> 23:43.240
Okay, can we thank the speakers again, please?

