WEBVTT

00:00.000 --> 00:07.000
All right, folks, we're going to start. David, it's you.

00:07.000 --> 00:16.000
Hello. Hi. I'm David, or Jorick. I work at Pascal. I'm going to tell you a few more words

00:16.000 --> 00:22.000
about that in a minute. And I am here to tell you about an ongoing work at Pascal called Cadence.

00:22.000 --> 00:29.000
And as you can guess from the name and possibly from the logo, it's related to quantum computing.

00:29.000 --> 00:35.000
So before I proceed, I would like to stress out one thing. None of the things I'm going to tell are my work.

00:35.000 --> 00:42.000
I'm just, for one thing, I joined Pascal recently with a baggage in programming language theory,

00:42.000 --> 00:48.000
compilers and things like this. And this project has not reached the stage where we can use

00:48.000 --> 00:54.000
programming language theory or compilers just yet, but maybe someday.

00:54.000 --> 00:59.000
So a few words about Pascal. What do we do? We build qubits.

00:59.000 --> 01:05.000
More generally, we build quantum computers. We build quantum algorithms. We build quantum tools.

01:05.000 --> 01:10.000
We build quantum teaching materials. I forgot to mention we are a private company,

01:10.000 --> 01:16.000
but we are a spin-off from several laboratories. Sorry, there is a strong research background at Pascal.

01:16.000 --> 01:23.000
And importantly for today, we build open source tools related to quantum computing.

01:24.000 --> 01:28.000
And if you're interested in knowing what the inside of a quantum computer looks like,

01:28.000 --> 01:33.000
well, that's part of the inside of one of ours. I think this one is called Fresnel, but I'm not sure.

01:33.000 --> 01:39.000
You can see lots of lenses which suggest that lots of lasers are involved.

01:39.000 --> 01:45.000
Yes, lots of lasers are involved. We're not generally allowed in this room because of the class 4 lasers.

01:45.000 --> 01:49.000
Way too dangerous. Still, cool to have.

01:50.000 --> 01:57.000
So if you're like me, you might have a question. What the heck is quantum computing?

01:57.000 --> 02:05.000
I mean, we all hear about it. A little bit. Well, I hear about it every day, but I pay for that.

02:05.000 --> 02:11.000
But we hear about it in mass media and everywhere on LinkedIn, etc.

02:11.000 --> 02:16.000
It's still not clear. At least it wasn't clear to me. It might still not be entirely clear yet.

02:16.000 --> 02:19.000
What quantum computing is all about?

02:19.000 --> 02:24.000
So the first thing is quantum computing is about computing with qubits, not with bits.

02:24.000 --> 02:30.000
An important part of it is quantum computing is very much research.

02:30.000 --> 02:41.000
You may have seen many announcements, each of them informing us nicely that the last few problems in quantum computing have been solved.

02:41.000 --> 02:47.000
I'm sure that we are going to see these announcements for the next 5 to 10 years.

02:47.000 --> 02:54.000
Quantum computing is currently a very active research domain, but it's a research domain.

02:54.000 --> 03:01.000
And while there are companies that are actually building quantum hardware, we are not there yet.

03:01.000 --> 03:08.000
It's not something you can buy at the local shop or even if you go further down the road.

03:08.000 --> 03:17.000
And it's probably going to be a few years before we can do anything really useful except in a few domains.

03:17.000 --> 03:23.000
I'm going to mention that a bit later with quantum computers. Still, it's extremely exciting.

03:23.000 --> 03:29.000
And when I say it's open research, it's open research for the hardware, it's open research for algorithms.

03:29.000 --> 03:37.000
And these algorithms most of the time are designed based on mathematical models of quantum computing.

03:37.000 --> 03:44.000
There are a few algorithms, but not many algorithms that actually run on quantum hardware.

03:44.000 --> 03:53.000
And there is lots of research on compilers and tools, but again based on mathematical models usually and simulators.

03:53.000 --> 03:56.000
Lots of hype too on quantum computing.

03:56.000 --> 04:02.000
So on the upside, it means that lots of credits for quantum computing, lots of funding,

04:02.000 --> 04:08.000
which is why companies such as Pascal and a few others can do their work.

04:08.000 --> 04:14.000
It's also thanks to this that a number of academic laboratories can do their work.

04:14.000 --> 04:20.000
And it's a good time to be working on quantum in general and quantum computing in particular.

04:20.000 --> 04:25.000
It makes things a bit complicated when you have to read a press release and it's a bit hard to understand

04:25.000 --> 04:32.000
whether the new problem that has been solved on a mathematical model has been reproduced in labs

04:32.000 --> 04:36.000
or is actually ready to come out in production.

04:36.000 --> 04:39.000
Why do we care about quantum computing?

04:39.000 --> 04:45.000
Well, we do care about quantum physics anyway because in computing, I mean,

04:45.000 --> 04:52.000
because CPUs need to deal with quantum phenomena on a daily basis.

04:52.000 --> 04:59.000
One of the reasons why we cannot make CPUs that are much faster anymore

04:59.000 --> 05:03.000
is that we have hit some physical limits.

05:03.000 --> 05:08.000
I'm not exactly sure which ones, I'm not a field physician, but they exist.

05:08.000 --> 05:12.000
So we want to go for the next generations of hardware and at some point

05:12.000 --> 05:16.000
you can either continue fighting quantum physics or try to embrace it.

05:16.000 --> 05:19.000
So that's one of the reasons.

05:19.000 --> 05:26.000
Another reason is that there are hopes that quantum computing will be faster.

05:26.000 --> 05:34.000
I mentioned hopes because despite some papers including a famous paper by Google two years ago each,

05:34.000 --> 05:37.000
we don't know yet.

05:37.000 --> 05:43.000
There are good reasons to be hopeful that for some classes of algorithms

05:43.000 --> 05:47.000
we will have something very fast, but we're not sure yet.

05:47.000 --> 05:52.000
Similarly, we hope that we can be energy efficient.

05:52.000 --> 05:57.000
I'm going to show you some algorithms later during this presentation.

05:57.000 --> 06:04.000
And there are good reasons to be hopeful that we could possibly someday replace

06:04.000 --> 06:12.000
entire data centers working on very specific algorithms with something much smaller.

06:13.000 --> 06:19.000
Again, this needs to be validated in labs and on industrial hardware.

06:19.000 --> 06:21.000
We're not quite there yet.

06:21.000 --> 06:25.000
And also simply because we don't know how to build new hardware at the moment.

06:25.000 --> 06:31.000
If you look at what's needed to train chat GPT or at least an old version of chat GPT,

06:31.000 --> 06:33.000
I assume it's worse now.

06:33.000 --> 06:38.000
If I recall correctly, they were using 10,000 boards, each of them carrying,

06:38.000 --> 06:44.000
I don't know how many GPUs each of them carrying, I don't know how many cores for the training part.

06:44.000 --> 06:47.000
And I don't know how long training lasts.

06:47.000 --> 06:53.000
So how we do it at the moment is we expand as many resources as we can,

06:53.000 --> 06:57.000
which is not something that can last forever.

06:58.000 --> 07:00.000
Again.

07:02.000 --> 07:06.000
So I mentioned bits, 0, 1, easy.

07:06.000 --> 07:11.000
Cubits, three dimensional, more complicated.

07:11.000 --> 07:19.000
Plus you have the question of whether the qubits are 0, 1, which is a complicated phenomenon,

07:19.000 --> 07:25.000
its measurement, and I'm starting to have a few intuitions about it,

07:25.000 --> 07:29.000
which probably means that I'm wrong.

07:29.000 --> 07:33.000
So there are two flavors of quantum computing.

07:33.000 --> 07:37.000
The first favor is digital quantum computing.

07:37.000 --> 07:40.000
This is a program in digital quantum computing.

07:40.000 --> 07:44.000
If you look at it, you'll see something that looks very much like a circuit.

07:44.000 --> 07:48.000
Well, that's why it's called a digital circuit.

07:48.000 --> 07:54.000
You have quantum data coming from the left conveniently.

07:54.000 --> 08:03.000
All these rx, ry, rz are gates, which operate on the quantum, on the qubit, sorry,

08:03.000 --> 08:09.000
in these, all the ones prefixed with r, r rotations on the sphere.

08:09.000 --> 08:15.000
These x, z, and I could have had, y's also are symmetries on the spheres.

08:15.000 --> 08:20.000
There are all other gates, but these are the ones that I had an example to use with.

08:20.000 --> 08:24.000
And at the end, you might be able to do some measurement, and in practice,

08:24.000 --> 08:30.000
you'll have to run your experiment many times because what you end up with is probabilities.

08:30.000 --> 08:34.000
So you need to measure probabilities by taking pictures, essentially,

08:34.000 --> 08:38.000
which means you have to take many pictures.

08:38.000 --> 08:41.000
So as I mentioned, a program is a circuit.

08:41.000 --> 08:46.000
And there are programming languages for almost 10 years, I think,

08:46.000 --> 08:51.000
there have been programming languages designed to create those circuits,

08:51.000 --> 08:56.000
or at least to give a syntax to the circuits and possibly to do modeling and simulation on those circuits.

08:56.000 --> 09:00.000
But the big snag is the hardware isn't there yet.

09:00.000 --> 09:05.000
One of the big difficulties that digital has is noise.

09:05.000 --> 09:10.000
I know it's not the only difficulty, but that's the one I remember, which is already good for me.

09:10.000 --> 09:15.000
Again, I'm coming from a different field, adapting is complicated.

09:16.000 --> 09:19.000
On the other side, you have analog programs.

09:19.000 --> 09:22.000
This is an analog program.

09:22.000 --> 09:26.000
This is actually part, I believe, of the test suite of one of our computers.

09:26.000 --> 09:31.000
So the test here is, hey, can we make a program that looks like our logo?

09:31.000 --> 09:35.000
Needless to say, it's probably not a very useful program.

09:35.000 --> 09:40.000
But we need to manipulate things at a very fine level.

09:40.000 --> 09:45.000
So in practice, when you're dealing with analog, a program is not a circuit,

09:45.000 --> 09:50.000
but it's also called a circuit and some parts of it will model as a circuit.

09:50.000 --> 09:53.000
But in practice, it's geometry and pulses.

09:53.000 --> 09:58.000
It might be different for other kinds of hardware support,

09:58.000 --> 10:01.000
but I think the ideas are generally the same.

10:01.000 --> 10:07.000
When I say pulses, I mean laser pulses, so you have to set up a frequency, a shape, and things like that,

10:08.000 --> 10:11.000
which is a bit complicated.

10:11.000 --> 10:15.000
I'm not going to claim that I have any understanding of how it works.

10:17.000 --> 10:19.000
And this, why do we care?

10:19.000 --> 10:20.000
Well, there are two reasons.

10:20.000 --> 10:25.000
One of them is this actually takes advantage of the hardware.

10:25.000 --> 10:33.000
It maps extremely naturally to hardware constraints and to some classes of problems.

10:33.000 --> 10:39.000
So from the top of my head, there are a number of graph algorithms that map very naturally to this.

10:39.000 --> 10:44.000
I showed you a two-dimensional representation, but it could also be three-dimensional.

10:44.000 --> 10:50.000
And so graph algorithms, a number of optimization algorithms.

10:50.000 --> 10:54.000
I'm going to show you a little bit of an example later.

10:54.000 --> 11:00.000
And if we have a problem that maps naturally to an analog circuit,

11:00.000 --> 11:08.000
the big advantage is that this is something that you can mostly run today on some machines.

11:08.000 --> 11:13.000
Not everything can be run, but we're much closer to this than in a digital world.

11:13.000 --> 11:18.000
And one thing I should mention, if you are familiar with the history of computing,

11:18.000 --> 11:24.000
well, every computer nowadays is digital, but before World War II,

11:24.000 --> 11:28.000
there were already many computers and they were pretty much all analog.

11:28.000 --> 11:36.000
So if you look at the battleships of the UK, US, French, German, Navy,

11:36.000 --> 11:42.000
they all had onboard computers that were electromechanical and that were used for aiming precisely.

11:42.000 --> 11:45.000
So they were computing ballistic trajectories.

11:45.000 --> 11:49.000
It worked before we knew how to do digital,

11:49.000 --> 11:54.000
and it worked because this specific problem that they wanted to solve

11:54.000 --> 11:59.000
had a very nice physical, electromechanical representation.

11:59.000 --> 12:02.000
In the end, they disappeared.

12:02.000 --> 12:05.000
It took a few decades for them to disappear replaced by digital,

12:05.000 --> 12:08.000
because digital was so much more generic,

12:08.000 --> 12:11.000
but it took lots of time for digital to catch up with analog.

12:11.000 --> 12:15.000
So these justifies war were interested not just in the digital,

12:15.000 --> 12:18.000
which is going to be much easier to program once it works,

12:18.000 --> 12:23.000
but also in the analog, which might give much better results in some specific cases

12:23.000 --> 12:28.000
and which is much closer to being actually something that we can use.

12:28.000 --> 12:31.000
Of course, the problem is how do you program that?

12:31.000 --> 12:35.000
I mean, that logo was not very intuitive.

12:35.000 --> 12:37.000
Well, it's easy.

12:37.000 --> 12:40.000
Well, no, really.

12:43.000 --> 12:46.000
And I apparently accidentally removed one of my slides,

12:46.000 --> 12:49.000
which was a big differential equation,

12:50.000 --> 12:53.000
which showed on one side the interactions between atoms

12:53.000 --> 12:57.000
and the other side the interactions with the laser itself,

12:57.000 --> 13:02.000
which I have no idea how someone can go from this differential equation

13:02.000 --> 13:04.000
to actually writing an algorithm,

13:04.000 --> 13:09.000
but some people succeed and they have my complete admiration.

13:09.000 --> 13:13.000
Anyway, that's why we, and when I say we again,

13:13.000 --> 13:16.000
I mean they have devised cadence.

13:16.000 --> 13:18.000
Cadence is a toolkit.

13:18.000 --> 13:20.000
It's designed for experimenting.

13:20.000 --> 13:24.000
You can experiment both with digital circuits, with analog circuits.

13:24.000 --> 13:26.000
You can mix them.

13:26.000 --> 13:32.000
Once you have written your circuit, you can simulate or execute it.

13:32.000 --> 13:36.000
When I say simulate, the world is a bit overloaded, but simulate.

13:36.000 --> 13:40.000
I mean, an emulator running on your CPU or GPU

13:40.000 --> 13:43.000
that's going to pretend that it's doing quantum physics

13:43.000 --> 13:46.000
usually at a fairly deep level.

13:46.000 --> 13:49.000
You can pick a level or execute.

13:49.000 --> 13:53.000
Well, if you end up in the subset that actually runs on the machine,

13:53.000 --> 13:58.000
that you need big glasses and be very careful to look at,

13:58.000 --> 14:01.000
that we have in the basement, we have a few of them.

14:01.000 --> 14:04.000
They're not really in the basement, but we do have them.

14:04.000 --> 14:07.000
So if you end up with this, you can compile your program

14:07.000 --> 14:10.000
to essentially a sequence of laser pulses

14:10.000 --> 14:15.000
and then send laser pulse to the computer for execution.

14:15.000 --> 14:23.000
We do that because there are many experiments that still remain to be done.

14:23.000 --> 14:26.000
We're not quite there yet.

14:26.000 --> 14:30.000
One of the reasons, I'm putting it first because that's the one I'm most interested in,

14:30.000 --> 14:33.000
but it's not necessarily the main reason,

14:33.000 --> 14:38.000
is this is the kind of thing that can help us find out

14:38.000 --> 14:43.000
how to design a programming language that is both usable,

14:43.000 --> 14:49.000
ideally by human beings, and also executable on the hardware,

14:49.000 --> 14:53.000
which is something that doesn't really exist at the moment.

14:53.000 --> 14:56.000
Another thing is, even without that,

14:56.000 --> 14:59.000
just having some abstractions on top of laser pulses,

14:59.000 --> 15:02.000
for instance, we have libraries of geometries,

15:02.000 --> 15:06.000
well, that makes life easier when you don't have to actually solve

15:06.000 --> 15:09.000
that differential equation all the time.

15:09.000 --> 15:17.000
An interesting aspect of simulating and executing circuits

15:17.000 --> 15:21.000
is that we can run optimizations for at least two different meanings of optimizations,

15:21.000 --> 15:24.000
one of them being how we deal with noise.

15:24.000 --> 15:30.000
Noise is a big problem with quantum computing if you put your substrate,

15:30.000 --> 15:32.000
you should put your atoms too close to each other,

15:32.000 --> 15:35.000
they're going to interact, if you put them too far away from each other,

15:35.000 --> 15:38.000
they're not going to interact, how do you send exactly the data you want

15:38.000 --> 15:41.000
and not the data you don't want from one to the other.

15:41.000 --> 15:46.000
So that's the kind of thing we can simulate using CADNs or lower level tools,

15:46.000 --> 15:48.000
or possibly other tools, but anyway.

15:48.000 --> 15:54.000
And the other thing is something I'm going to show you very soon, again, still might work.

15:54.000 --> 15:58.000
So at some point, I assume that some people will ask questions,

15:58.000 --> 16:02.000
don't be surprised if my answer is, I have no clue.

16:02.000 --> 16:09.000
Okay, so let's look at a few demos.

16:09.000 --> 16:15.000
So this is an example of a graph.

16:15.000 --> 16:19.000
Let's re- yeah, okay, this is a random graph.

16:19.000 --> 16:22.000
We want to solve the MaxCAD problem.

16:22.000 --> 16:26.000
It's a well-known problem in graph theory.

16:26.000 --> 16:28.000
The detail is not extremely important.

16:28.000 --> 16:35.000
We want to find the best places to cut the graph according to some criteria.

16:35.000 --> 16:41.000
So this can be reformulated as maximizing this value.

16:41.000 --> 16:48.000
And someone, I was sure I had written my sources somewhere.

16:48.000 --> 16:52.000
Okay, so someone has devised an algorithm to do that.

16:53.000 --> 16:58.000
Sorry, I didn't sort my sources.

16:58.000 --> 17:08.000
So this starts by waiting, yes, after the wait.

17:08.000 --> 17:15.000
So we derive a circuit from the graph.

17:15.000 --> 17:19.000
So there are as many nodes as edges, if I recall correctly.

17:19.000 --> 17:27.000
And we do a number of operations whose objective is to eventually make some configurations

17:27.000 --> 17:29.000
more likely than others.

17:29.000 --> 17:33.000
So I couldn't tell you exactly how it works.

17:33.000 --> 17:38.000
Many operations, many, many operations.

17:38.000 --> 17:43.000
Yeah, and in the end, we can measure stuff.

17:44.000 --> 17:53.000
So once we have this, we can represent the quantity we want to maximize

17:53.000 --> 18:00.000
as an optimization problem for one of the many different, what?

18:00.000 --> 18:03.000
Okay.

18:04.000 --> 18:10.000
Demo effect.

18:10.000 --> 18:13.000
Hop.

18:13.000 --> 18:23.000
And so this code is basically PyTorch for people who are familiar with PyTorch.

18:23.000 --> 18:28.000
And then we can run what we call training in that case.

18:28.000 --> 18:31.000
So we can run the optimization problem.

18:31.000 --> 18:36.000
So what we're going to do is iterate.

18:36.000 --> 18:44.000
So there is a theorem in the paper which I forgot to cite that shows that this computation

18:44.000 --> 18:47.000
is eventually going to converge.

18:47.000 --> 18:50.000
There's no guarantee that it's about after 100 iterations.

18:50.000 --> 18:54.000
But in practice for a demo, it seems to work.

18:54.000 --> 19:02.000
And if we pick the configuration that was most likely, again, there is this problem

19:02.000 --> 19:06.000
with the cat which might or might not get out of the box.

19:06.000 --> 19:10.000
If we pick the configuration that is most likely, it happens to map to the solution

19:10.000 --> 19:12.000
that we're looking for.

19:12.000 --> 19:17.000
And here, so we need to cut in such a way that something, something.

19:17.000 --> 19:21.000
I don't remember exactly how to read this, but I'm going to read it.

19:21.000 --> 19:25.000
I don't remember exactly how to read this result.

19:25.000 --> 19:30.000
But the interesting part is, hey, quantum algorithm, give me the grants.

19:30.000 --> 19:40.000
So that was a digital algorithm.

19:40.000 --> 19:45.000
I'm going to show you something that has a very similar outline.

19:45.000 --> 19:48.000
We want to fit a curve.

19:48.000 --> 20:01.000
So this, we're just going to take the curve x maps to x2 and see if we can teach a quantum

20:01.000 --> 20:05.000
circuit to basically represent this curve.

20:05.000 --> 20:11.000
For this, we're going to use the quantum, the ansatz quantum learning algorithm, which

20:11.000 --> 20:14.000
exists.

20:14.000 --> 20:21.000
And basically, we're going to try and optimize a number of parameters, a number of angles

20:21.000 --> 20:26.000
here, and see what we can do.

20:26.000 --> 20:29.000
So again, let's finish our circuit.

20:29.000 --> 20:31.000
What is going on?

20:31.000 --> 20:33.000
It was working this morning.

20:33.000 --> 20:38.000
Yes.

20:38.000 --> 20:40.000
Yes, no more error messages.

20:40.000 --> 20:45.000
Okay.

20:45.000 --> 20:51.000
Okay, so this is with the initial state of our quantum circuit.

20:51.000 --> 20:56.000
The dots are the approximation, the, are samples that we want to approximate.

20:56.000 --> 20:59.000
And the curve is the initial result.

20:59.000 --> 21:04.000
As you can see, it's not exactly a perfect match just yet.

21:04.000 --> 21:08.000
So we're going to run a few steps of learning algorithm.

21:08.000 --> 21:15.000
So this one is just pure by torch, just regular optimization.

21:15.000 --> 21:22.000
And usually it works.

21:22.000 --> 21:25.000
Normally it works.

21:25.000 --> 21:29.000
I'm going to pretend that it has worked and I'm going to pre, to start.

21:29.000 --> 21:31.000
Yep.

21:31.000 --> 21:37.000
What the?

21:37.000 --> 21:40.000
Yeah.

21:40.000 --> 21:41.000
All right.

21:41.000 --> 21:45.000
So after a few steps of learning, this is what we get.

21:45.000 --> 21:54.000
We have an orange curve that why not absolutely perfect actually matches fairly well the blue dots.

21:54.000 --> 22:00.000
So okay, it's not, not time to call the noble committee for that.

22:00.000 --> 22:03.000
But this has applications.

22:03.000 --> 22:09.000
Of course, this is a very simple example for a very simple curve that we want to fit.

22:09.000 --> 22:15.000
But if you look at it with a little tolerance for approximations,

22:15.000 --> 22:19.000
this is kind of the things that neural networks are doing.

22:19.000 --> 22:25.000
That the learning phase is something kind of like this.

22:25.000 --> 22:30.000
In fact, there is an entire subdomain of quantum computing.

22:30.000 --> 22:32.000
That's quantum machine learning.

22:32.000 --> 22:37.000
And this is, I believe, one of the simplest algorithms of quantum machine learning.

22:37.000 --> 22:45.000
If you look at the API documentation of cadence, you will actually see a QNN module.

22:45.000 --> 22:47.000
So quantum neural networks.

22:47.000 --> 22:54.000
And this is a very, well, a very active subfield of an already very active field.

22:54.000 --> 23:04.000
Because if the hypothesis we have on, if the models we have of energy use and computational power are correct,

23:04.000 --> 23:09.000
this means that hopefully we could replace these tens of thousands of cores

23:09.000 --> 23:15.000
used by a chat GPT or whatever its competitors are named

23:15.000 --> 23:20.000
and replace them by something that consumes way less energy

23:20.000 --> 23:24.000
and hopefully runs at least as fast.

23:24.000 --> 23:30.000
So time to reach conclusions.

23:30.000 --> 23:32.000
What do we have?

23:32.000 --> 23:37.000
We have a toolkit designed for exploring the design of quantum circuits,

23:37.000 --> 23:40.000
both on hardware that already exists,

23:40.000 --> 23:45.000
on hardware that we believe is possible and might come out of,

23:45.000 --> 23:49.000
into labs or out of labs within the next five years,

23:49.000 --> 23:53.000
and on purely hypothetical hardware because why not?

23:53.000 --> 23:57.000
Experiments are interesting.

23:57.000 --> 24:02.000
We have this mechanism circuit optimization, which I've showed you.

24:02.000 --> 24:07.000
I showed you how it could be used to solve problems or to approximate curves.

24:07.000 --> 24:11.000
It has also other applications such as the problem of noise.

24:11.000 --> 24:14.000
I mentioned noise between atoms, for instance.

24:14.000 --> 24:18.000
Sometimes you want to optimize based on noise models

24:18.000 --> 24:23.000
and make your things work because you know that your model isn't perfect

24:23.000 --> 24:26.000
or at least your high level model isn't perfect

24:26.000 --> 24:28.000
and you want to go to a lower level model.

24:28.000 --> 24:31.000
And again, it's not a programming language,

24:31.000 --> 24:36.000
but I hope that maybe someday it could serve as the beginning of one.

24:36.000 --> 24:39.000
Ongoing work about enriching everything,

24:39.000 --> 24:43.000
writing libraries for domain-specific problems,

24:43.000 --> 24:47.000
for known algorithms, for geometries, etc.

24:48.000 --> 24:51.000
There are many questions.

24:51.000 --> 24:56.000
There is ongoing work on compilation, on the subset that we already know

24:56.000 --> 24:59.000
how to compile and more larger subsets.

24:59.000 --> 25:02.000
And of course, I'm trying to make this easier to program.

25:02.000 --> 25:06.000
And when I say we, of course, I mean them.

25:06.000 --> 25:11.000
There was a paper recently accepted and presented at Planck.

25:11.000 --> 25:14.000
If you were interested, it's on the last line here.

25:14.000 --> 25:18.000
And all the documentation and the source code are on GitHub.

25:18.000 --> 25:20.000
So thank you for listening.

25:20.000 --> 25:27.000
APPLAUSE

25:27.000 --> 25:31.000
We have like four minutes for questions, my friends.

25:40.000 --> 25:42.000
I'm sorry, did you catch it?

25:42.000 --> 25:44.000
Was there any attempt to implement the circuits

25:44.000 --> 25:46.000
that we mentioned as an actual problem?

25:46.000 --> 25:49.000
I can see the question for the mic.

25:49.000 --> 25:52.000
Yes, the question is whether these particular circuits

25:52.000 --> 25:54.000
have been implemented on hardware.

25:54.000 --> 25:57.000
The answer is I have no idea, I'm sorry.

25:57.000 --> 25:59.000
LAUGHTER

25:59.000 --> 26:02.000
I believe...

26:02.000 --> 26:04.000
No, sorry.

26:04.000 --> 26:06.000
I'm not going to say random crap.

26:06.000 --> 26:08.000
I don't know.

26:08.000 --> 26:16.000
Right now, the main use case is experimenting with this.

26:16.000 --> 26:20.000
But again, for the second algorithm, for instance,

26:20.000 --> 26:24.000
if we can manage to make its scale to very large...

26:24.000 --> 26:30.000
to a large number of curves and more complicated curves,

26:30.000 --> 26:35.000
there is a potential application to basically machine learning

26:35.000 --> 26:38.000
in general, not just artificial intelligence, but...

26:38.000 --> 26:42.000
And the former one, I can't think of any specific example

26:42.000 --> 26:46.000
for the former one, but I know that graph algorithms

26:46.000 --> 26:50.000
are very interesting for many things, because, well,

26:50.000 --> 26:52.000
for one thing, there are good reasons to believe

26:52.000 --> 26:57.000
that they can be executed on existing or almost existing hardware.

26:57.000 --> 27:00.000
And there are many important problems that can be modeled

27:00.000 --> 27:02.000
as graph algorithms.

27:03.000 --> 27:07.000
For instance, we are in an energy crisis at the moment,

27:07.000 --> 27:11.000
and all the energy distribution problems, for instance,

27:11.000 --> 27:14.000
are graph algorithms.

27:14.000 --> 27:17.000
I've heard of people who want to work on it.

27:17.000 --> 27:19.000
I have no idea whether they actually work on it.

27:19.000 --> 27:22.000
Also, for car...

27:22.000 --> 27:27.000
for modeling the circulation in cities, things like that.

27:27.000 --> 27:31.000
I couldn't tell you about more than that.

27:31.000 --> 27:34.000
Okay, I think we should also thank you very much.

27:34.000 --> 27:36.000
Thank you very much.

