WEBVTT

00:00.000 --> 00:12.400
Hi everyone. I like being early so we're going to start a little bit early. First of all,

00:12.400 --> 00:19.440
who's enjoying the room? Yes? Yeah? Yeah, make some noise. Come on. There we go. There

00:19.440 --> 00:26.520
we go. It's all Will's work by the way, so thank him after this fact. All right, I have

00:26.520 --> 00:32.480
the pleasure of introducing Will again today. He started our event office this morning and

00:32.480 --> 00:38.560
he's continuing here helping us to do it today. He recently took up bouldering and fell two meters

00:38.560 --> 00:44.520
his first time of doing it and still keeps going on. I have to admit that is impressive. Take it

00:44.520 --> 00:55.000
away Will. Thank you. Yes, so I'm quickly plugging this talk because one of our speakers

00:55.000 --> 01:00.240
dropped out. So if I'm going anywhere nearer over time, just let me know. Just cut me off. It's

01:00.240 --> 01:07.480
fine. And what I want to talk about is a little bit of work I did while I was in neuroscience

01:07.480 --> 01:14.200
researcher. I think we had one of those earlier. Anyone else neuroscience? Nope, not a single one.

01:14.200 --> 01:20.320
Never mind. Well, it doesn't matter. It was there was some interesting work I did while I was a

01:20.360 --> 01:26.440
neuroscientist that looked at how to reverse engineer the causality between different brain

01:26.440 --> 01:34.160
regions. So the idea is we go out, we take FMRI of somebody, we take EEG, we get a signal of how

01:34.160 --> 01:40.360
their brain activity evolves over time. And what we want to understand is how these different

01:40.360 --> 01:45.600
brain regions are interacting with each other to produce this activity, which is a useful thing

01:45.720 --> 01:53.160
to do in research. It's useful in medical applications as well. And what we're actually doing

01:53.160 --> 01:58.080
here at its core is something I think it's really interesting and it's really powerful. We're

01:58.080 --> 02:05.760
simultaneously estimating a causal system that has engineered our behavior and we're

02:05.760 --> 02:09.200
parameterizing it at the same time with the values that made that happen. And that's actually a

02:09.200 --> 02:13.440
really difficult and challenging problem to do. And it's a bit of a shame that the technology

02:13.520 --> 02:18.720
sort of confined to academia at the moment. So this project I did, what I'll talk about today,

02:18.720 --> 02:25.280
is the work I did to make this more free and open source and not that the old code was bad,

02:25.280 --> 02:31.720
but it was research code to make it better and more commercially viable. So let's talk a little

02:31.720 --> 02:36.840
bit. We'll back off a little bit now and talk a little bit about what this technology does in a

02:36.920 --> 02:45.400
bit more detail and we'll talk about then what I did with it. So what we do with this technology,

02:45.400 --> 02:50.560
it's a Bayesian technology for anyone who knows what that means, but that means that we start with

02:50.560 --> 02:56.400
an estimate of everything we do know about the problem or at least an estimate of all the things

02:56.400 --> 03:02.840
that we don't know. We take this, we take our data and then with a dynamic causal modeling framework,

03:03.240 --> 03:10.040
we infer simultaneously a system that describes this behavior and also, as I said, the values of

03:10.040 --> 03:15.400
the parameters that parameterize the system. And we do this because it's Bayesian in an uncertainty

03:15.400 --> 03:24.120
aware way. So every parameter, everything we estimate comes with a, it comes with a probability

03:24.120 --> 03:32.040
distribution. It comes with an error estimate of how wrong we could be about this. So let's walk

03:32.120 --> 03:41.320
through a simple example. So the way this systems inference works is we infer what is called a

03:41.320 --> 03:47.760
dynamical system. That is what physicists use to describe how, I mean, basically everything works.

03:47.760 --> 03:55.200
And this consists of two things. It consists of a state that is in our planet's example, that could

03:55.200 --> 04:00.800
be the position mass of velocity of each planet. And it consists of a rule for how that state evolves

04:00.880 --> 04:05.920
over time, which would in this case be the laws of physics. Things like this, I was going off the

04:05.920 --> 04:14.080
slides a bit, but GM1M2 forces that two bodies with mass are applying to each other. And this is a

04:14.080 --> 04:20.080
dynamical system and it's what we're trying to infer from our data. And some of our viewers may

04:20.080 --> 04:25.720
notice the one I'm describing here, in fact, even on the slides is a differential equation. And for

04:25.720 --> 04:33.640
those guys, I would point out that dynamical systems are known for basically, basically not

04:33.640 --> 04:42.680
having any good solutions, which is partially a neutral framework. And in the dynamical, dynamic

04:42.680 --> 04:46.840
course of modelling world, we would be doing something like taking the position mass and

04:46.840 --> 04:52.840
velocity of planet A and saying, okay, I know there's probably some other planetary bodies

04:52.840 --> 04:57.080
affecting this, but I don't know how many, how many planetary bodies are affecting this planet

04:57.080 --> 05:01.320
that I can observe? And what is the position mass and velocities of each of these? And how

05:01.320 --> 05:08.200
uncertain am I about that? That's an interesting thing to be able to do. A real world application

05:08.200 --> 05:14.120
of this was in the COVID-19 pandemic. Here we have two very, very noisy things, hence the need

05:14.120 --> 05:18.840
for uncertainty that we understand about the pandemic. That is the number of positive COVID tests

05:18.840 --> 05:25.640
and the number of deaths. And we have a broad understanding of how the pandemic works. It's

05:25.640 --> 05:29.880
or at least broad understanding of ways we can model it, something like a CER model, which is

05:29.880 --> 05:34.040
what we opted for here. Well, I didn't originate this work, but I did make it work at the end.

05:35.320 --> 05:41.720
A CER model, which is susceptible, exposed, infected, recovered. And so we can take these two

05:41.720 --> 05:45.880
things. We can take the observed deaths and positive COVID tests and our understanding, and we can

05:45.880 --> 05:53.080
project backwards to a dynamical system that explains this. And there's three reasons this is

05:53.080 --> 06:00.360
a sort of particularly useful thing to be able to do. The first one is because we're understanding

06:00.360 --> 06:05.800
our data from partially, at least, or as much as we want to, we can tip in the things that we

06:05.800 --> 06:10.840
understand about the model beforehand. We can include things like hospital admissions and ventilator

06:10.840 --> 06:15.480
usage. And because we can include these parameters in our model, that means we can estimate them

06:15.480 --> 06:20.040
and it means we can look at them afterwards and have good guesses at them. And then we can do things

06:20.040 --> 06:27.080
like we did here, where we look at the number of deaths from COVID-19 over time. And we can

06:27.080 --> 06:33.720
estimate these parameters and fairly accurately, if you can see these graphs, because we knew they

06:33.720 --> 06:37.080
were there, they've been included, we can estimate them. That's a powerful thing to be able to do.

06:38.360 --> 06:42.280
Similarly, because we've included them out in model, and because of the way these things work,

06:42.280 --> 06:47.800
because it is a dynamical system with different parts, and we now have it all interact with each

06:47.800 --> 06:54.840
other, we can do things like look at counterfactuals. So we can say, what if I only have 200 hospital

06:54.840 --> 06:59.880
beds this week? What happens then? What happens? How bad do things become? And again, that's a

06:59.880 --> 07:09.320
really, really nice thing to be able to do. Finally, because this is a Bayesian method,

07:09.320 --> 07:14.200
because it is uncertainty aware, we don't just get single point estimates out of this method.

07:14.200 --> 07:20.200
We get probability distributions. So we can say things instead of like, I need 200 hospital beds

07:20.200 --> 07:27.240
this week. We can say, the model says, I'm 95% sure that I need between 200 and 400, or I'm 90%

07:27.240 --> 07:32.120
sure I need at least 300. And that's much, much, much more valuable than if you're planning things.

07:32.120 --> 07:35.640
That's what you need to know. You don't need to guess at what's going to happen. You need to know

07:36.600 --> 07:45.160
what might happen and how likely that is. In terms of the project we did about this,

07:45.880 --> 07:51.880
my work about this, it was really about making it more open source. And I say more because the

07:51.880 --> 07:57.240
original code base was open source, but it was written in MATLAB. And MATLAB is not really free

07:57.240 --> 08:03.800
and open source. And I will give credit to the original researchers. They did modify things

08:04.600 --> 08:08.920
so that it could mostly be run in Octave. But the unfortunate fact of the matter is,

08:10.440 --> 08:15.000
Octave is a wonderful thing. It really is. I can't give enough credit to developers, but it is not

08:15.000 --> 08:19.560
a replacement for MATLAB. Complicated MATLAB code, particularly MATLAB code, but dependencies

08:19.560 --> 08:24.440
will just break and then it's annoying to fix. And it's at least 10 times slower. Depending on what

08:24.440 --> 08:28.840
you're doing, it could be much, much, much slower than that. So having your code in MATLAB, even

08:28.840 --> 08:34.600
if it's open sourced, it's not really open sourced. So we rewrote the project in C++,

08:35.240 --> 08:39.480
which I know some people will disagree is an improvement, but it certainly goes a lot quicker.

08:41.000 --> 08:47.480
And yeah, as we did this, we have tried really hard to make this code more generic as well,

08:47.480 --> 08:51.320
because the original code was research code. It was designed for just two problems,

08:51.880 --> 08:56.680
neuroscience stuff and a little bit of COVID stuff. Now the code works generally.

08:57.000 --> 09:02.600
The other thing that we have been trying to do with this is to try and make it more open in other

09:02.600 --> 09:08.680
ways. Again, a problem with this is its research work. And so although there are papers describing

09:08.680 --> 09:13.640
how all of this works, I'm not going to lie, I literally did a PhD in this, they're incomprehensible.

09:14.600 --> 09:18.680
It's really, really, really difficult to get to the bottom of the papers, even if you really

09:18.680 --> 09:22.680
understand the subject material. If you don't understand the subject material, it's just awful.

09:23.640 --> 09:27.800
And the thing is, when you've gone through it, and you do understand all of this, it's not that hard.

09:29.080 --> 09:35.400
It's interesting and useful and creative, but it's difficult, it is not. And it doesn't need to

09:35.400 --> 09:39.400
be, so that's the other part of the work we have been doing with this. To try and make it

09:39.400 --> 09:44.280
free and open source by making it open about exactly what's happening and why.

09:44.920 --> 09:53.000
Anyway, that is the end of my talk. That is my GitHub repo. If anybody wants to look at it,

09:54.040 --> 09:55.000
do we have any questions?

10:04.600 --> 10:12.040
William, you've written it in C++. A lot of AI people expect to use Python. What's your solution

10:12.120 --> 10:19.240
for them? I have been writing a Python front-end for it. Is the solution.

10:19.880 --> 10:23.240
It's a little bit of work in progress, but you can draw from this in Python if you want to.

10:25.960 --> 10:31.240
Any other questions? You're going to make me run? No? All right, everyone give

10:31.240 --> 10:38.040
another round of applause for Will.

