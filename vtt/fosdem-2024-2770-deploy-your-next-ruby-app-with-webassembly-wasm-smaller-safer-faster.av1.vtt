WEBVTT

00:00.000 --> 00:15.920
Hello. Yeah, you can hear me?

00:15.920 --> 00:28.400
Oh, perfect. Okay, great. Very disconcerting. Okay, great. Last talk of the day, so we still

00:28.400 --> 00:34.640
have some people here. That's nice. Good. All right, so my name is Dan Phillips and today

00:34.640 --> 00:41.800
I'm going to talk about deploying Ruby on WebAssembly, smaller, safer, faster, and more

00:41.800 --> 00:47.320
universal. The faster parts should have an asterisk here, and I'll talk about that too,

00:47.320 --> 00:53.040
but we'll get into the details during the talk. A bit about me before we get started.

00:53.040 --> 00:57.840
I'm an engineer at an illustrious company called Loophole Labs, and I've got three of my co-workers

00:57.840 --> 01:04.680
right here, and we do a couple different things, but we like to call it primitives for software

01:04.680 --> 01:10.160
infrastructure, so we kind of focus on really specific pieces of cloud infrastructure specifically.

01:10.160 --> 01:17.600
I mostly focus on WebAssembly, server-side WebAssembly, and we also have a product that does live

01:17.600 --> 01:23.560
migrations of VMs, which my colleague Felicitas here demoed a couple months ago in Chicago.

01:23.680 --> 01:29.080
It's really awesome talk. You should check it out. That's the end of my pseudo-pitch for that.

01:29.080 --> 01:33.840
I work primarily on the scale function runtime. It's a scale plug-in framework that is based

01:33.840 --> 01:40.120
in WebAssembly. It is sort of a language agnostic way to build plug-ins, and I'll talk a bit

01:40.120 --> 01:45.960
about that sort of in conjunction with what I'm going to talk about with Ruby.

01:45.960 --> 01:52.640
And on the Internet, I'm d-underscore-filla, so on GitHub it's d-filla without the underscore,

01:52.720 --> 01:57.920
because they don't allow underscores in usernames, but on Twitter or X, whatever you want to call it,

01:57.920 --> 02:00.920
that's me, and I mostly tweet about stuff kind of like this.

02:00.920 --> 02:06.040
Also, I'm from Chicago. That's where I live, and I run the Wasm Chicago group, so if you're ever

02:06.040 --> 02:10.240
in town, you'd like to come by and hang out. We would love to have you.

02:10.240 --> 02:15.040
Also, all of our stuff is online too, so it's virtual if you'd like to check it out.

02:15.040 --> 02:22.040
Okay, so what is WebAssembly? Who here has done any work with WebAssembly on the server?

02:22.240 --> 02:26.240
Anybody? We've got two. We've got my colleagues and one person.

02:26.240 --> 02:32.240
Okay, great. Excellent. Okay, so we're going to just talk about the background of what Wasm is.

02:32.240 --> 02:37.240
Wasm, for short, you can say Wasm, Wasm. It doesn't really matter technically if you want to be pedantic.

02:37.240 --> 02:44.240
It might be Wasm because the precursor was Asm.js, which was a toolset for compiling C, C++ libraries

02:44.240 --> 02:49.240
to JavaScript in very performant ways, so Asm, Wasm, maybe.

02:49.440 --> 02:54.440
WebAssembly is a safe, portable, low-level code format designed for efficient execution and compact

02:54.440 --> 03:00.440
representation, which doesn't mean much yet. It's a safe sandbox execution environment.

03:00.440 --> 03:07.440
It is a deny-by-default sort of security pattern, and it makes no assumption about languages or hosts.

03:07.440 --> 03:11.440
So we're going to get more specific, a little bit less abstract.

03:11.440 --> 03:16.440
The best way to think about it is that it's a virtualized CPU. It's a new type of architecture.

03:16.640 --> 03:23.640
So it's a compilation target, just like when we compile things to x86 or R64, whatever.

03:23.640 --> 03:28.640
It is a virtualized instruction set architecture.

03:28.640 --> 03:35.640
That it utilizes a bytecode binary format, so what you get when you compile to Wasm is a Wasm binary,

03:35.640 --> 03:41.640
which is a binary, but it's not machine code yet. It's sort of an interstitial representation.

03:41.840 --> 03:46.840
It uses a stack machine model for this, but it's not actually a stack machine.

03:46.840 --> 03:50.840
It's just sort of virtualized in this way. You could say that it is if you use the interpreter,

03:50.840 --> 03:54.840
but you can also compile AOT. So what does that all mean?

03:54.840 --> 03:57.840
In a broad sense, it's really just another architecture. That's the way to think about it.

03:57.840 --> 04:03.840
The difference is that it is virtualized, so you need a runtime to translate it to machine code.

04:03.840 --> 04:08.840
Again, many of the runtimes, specifically those that came out first, that are in the browsers,

04:09.540 --> 04:16.540
all the major browsers, utilize both interpreted execution and ahead of time compilation.

04:19.240 --> 04:24.240
It's universal, meaning that anywhere where there's a spec-compliant runtime, you can run Wasm.

04:24.240 --> 04:27.240
That's the sort of biggest sell, right?

04:27.240 --> 04:33.240
So is it just a client-side technology? A couple months ago we were speaking at DevOps,

04:33.240 --> 04:36.240
and we would just talk about it. People were like, yeah, I don't really do front-end stuff that much.

04:36.640 --> 04:39.640
I was like, no, no, no, no. That's actually not what we're talking about.

04:39.640 --> 04:43.640
We're talking about using Wasm on the server. And why would you do that?

04:43.640 --> 04:46.640
This is from the spec itself, WebAssembly.org.

04:46.640 --> 04:51.640
It's a safe sandbox execution environment that makes no assumption about languages or hosts.

04:51.640 --> 04:54.640
Extremely important.

04:54.640 --> 05:00.640
The cold start times for Wasm binaries for a Wasm module are in the Nanos microsecond range.

05:01.040 --> 05:06.040
Even with many megabytes, you could still see microseconds start-up times,

05:07.540 --> 05:10.540
just like we have with Ruby, which I'll talk about.

05:10.540 --> 05:13.540
It's a universal compilation target.

05:13.540 --> 05:18.540
So there's this saying in the Wasm community that Wasm is neither web and it is neither assembly.

05:20.540 --> 05:23.540
That's a very important point.

05:24.440 --> 05:30.440
So I like to think of WebAssembly as kind of cloud infrastructure's penicillin moment.

05:30.440 --> 05:35.440
WebAssembly came out of a long tradition of trying to write more performant code on the web.

05:35.440 --> 05:42.440
If you just take V8, for example, or the JSVM, they've gone through many, many iterations to make that extremely performant.

05:44.440 --> 05:47.440
Actually, it's quite amazing what they've done.

05:47.440 --> 05:52.440
But even still, there wasn't quite a good way to have extremely performant code run in the browser.

05:53.340 --> 05:58.340
So WebAssembly came around after these sort of earlier iterations with ASM and some other things.

05:58.340 --> 06:01.340
And I like to think of it as sort of a penicillin moment.

06:01.340 --> 06:06.340
It was like people wanted to have a safe way to run code from any language, very performantly.

06:06.340 --> 06:11.340
And it must be safe because it's going to be like overnight on billions of users' devices.

06:11.340 --> 06:16.340
So what they decided to do is go in the same direction with a bytecode format and a VM.

06:17.240 --> 06:24.240
And then if you kind of think about it, and if you kind of squint, if you think about what the WebAssembly VM is,

06:24.240 --> 06:29.240
you could have traditional VMs, and then you could think about containers,

06:29.240 --> 06:33.240
and then possibly in the next iteration, we have WASM.

06:33.240 --> 06:37.240
So smaller, safer, faster, much more universal.

06:37.240 --> 06:41.240
And faster has an asterisk here, thankfully.

06:41.240 --> 06:43.240
I meant to put it on the first slide, but I forgot.

06:44.140 --> 06:48.140
Faster means, in this context, especially startup times.

06:48.140 --> 06:56.140
And then when we think about performance with WASM, it's typically described as near-native speed, if not native speed.

07:01.140 --> 07:09.140
There's a famous quote here from Solomon Hikes that said that if WASM had existed in 2008, they wouldn't have needed to make Docker.

07:10.040 --> 07:13.040
This got a lot of VCs, very excited in 2019.

07:13.040 --> 07:18.040
And there was kind of a hype cycle that got kicked off, probably when he tweeted this.

07:18.040 --> 07:27.040
And we're going to kind of talk through whether or not this has come to fruition and what the sort of next steps are in this space.

07:30.040 --> 07:32.040
Cool. So WASI.

07:32.040 --> 07:36.040
WASI is the WebAssembly system interface. Has anyone heard of WASI?

07:36.940 --> 07:38.940
Okay, good. A few people.

07:38.940 --> 07:43.940
Started in 2019, it was initially kind of like a POSIX interface for WebAssembly.

07:43.940 --> 07:45.940
WebAssembly is just a VM.

07:45.940 --> 07:49.940
And when we think of it, it's the dumbest VM because it's really just like a VM that's an architecture.

07:49.940 --> 07:55.940
So if you think about just machine code, it has no concept of syscalls or libcs or anything until you give it to it.

07:55.940 --> 07:57.940
It's the same thing with WASM.

07:57.940 --> 08:01.940
So WASM itself just executes very simple instructions.

08:02.840 --> 08:07.840
So if we want to run this stuff on the server, we need to think about a way that we can interface with this sort of underlying host.

08:07.840 --> 08:13.840
It utilizes a security model called capability-based security.

08:13.840 --> 08:22.840
If anyone here has heard of Plan 9, the operating system, it borrowed some of the approaches that were sort of explored there and implemented them.

08:22.840 --> 08:25.840
And it's an evolving standard, right?

08:25.840 --> 08:27.840
There's Preview 1, 2, 3.

08:27.840 --> 08:30.840
Preview 2 literally just got released last week.

08:31.740 --> 08:36.740
That also means that it's not implemented yet in all of the runtimes, but it's getting there.

08:36.740 --> 08:41.740
Preview 1 was kind of this base layer that kind of wrapped standard POSIX calls.

08:41.740 --> 08:47.740
Preview 2 introduces networking for the first time, so things like BSD sockets.

08:47.740 --> 08:51.740
And then Preview 3 is going to be very important for dealing with async.

08:51.740 --> 08:54.740
And that's going to be a very big advance.

08:54.740 --> 08:58.740
That will probably happen by next year or so.

08:59.640 --> 09:02.640
And then, after all those things are there, we'll probably get to 1.0.

09:02.640 --> 09:05.640
So it's been kind of a long journey with Wazzy.

09:05.640 --> 09:07.640
Is it required to run Wazum on the server?

09:07.640 --> 09:09.640
No, it is not.

09:09.640 --> 09:11.640
You don't need to use Wazzy.

09:11.640 --> 09:13.640
Oh, is that my time?

09:13.640 --> 09:15.640
Okay, okay.

09:15.640 --> 09:17.640
I was like, no.

09:17.640 --> 09:19.640
Yeah, so is it required?

09:19.640 --> 09:21.640
It's not required.

09:21.640 --> 09:23.640
You can run Pure WebAssembly on the server just like you do in a browser.

09:24.540 --> 09:28.540
So, I'm going to go through some techniques there that we can do with system requirements and the host.

09:28.540 --> 09:32.540
And I'll kind of talk through those as we get into the actual Ruby stuff.

09:32.540 --> 09:36.540
So, briefly, I'd like to just mention the project that I focus on at work.

09:36.540 --> 09:38.540
This is the scale, function runtime.

09:38.540 --> 09:40.540
It's a plug-in framework.

09:40.540 --> 09:43.540
This is a link to the actual page.

09:43.540 --> 09:45.540
You can also think of it as a serverless function runtime.

09:45.540 --> 09:50.540
It gives you a polyglot programming environment in the same runtime environment.

09:51.440 --> 10:01.440
So, this means that in the same runtime, you could run Rust code, Timescript code, and Go code, all talking to each other at native speeds, or maybe even faster than native in certain cases.

10:03.440 --> 10:15.440
We've done some interesting things where we took the, so if anyone does Golang in here at all, we took Go's Regex library, which has some performance issues, and we swapped it out using scale with Rust's Regex library.

10:16.340 --> 10:21.340
And we got a four-time, four-times improvement over native.

10:21.340 --> 10:26.340
So, running it in WebAssembly was four times faster than running it in native when we did this.

10:26.340 --> 10:29.340
And from the Go side, you had no idea that you were even using Rust.

10:29.340 --> 10:31.340
That's kind of the cool part of it.

10:31.340 --> 10:32.340
Right?

10:32.340 --> 10:33.340
This is written in Golang.

10:33.340 --> 10:34.340
Right now, we support Rust.

10:34.340 --> 10:37.340
Go, Timescript, the future holds Python and maybe some other things.

10:37.340 --> 10:38.340
Hopefully Ruby soon too.

10:38.340 --> 10:39.340
I don't know.

10:39.340 --> 10:41.340
I've got to convince my boss if that's going to happen.

10:41.340 --> 10:42.340
So, yeah.

10:42.340 --> 10:43.340
So, building Ruby.

10:44.240 --> 10:46.240
Many people in here probably built Ruby from source.

10:46.240 --> 10:49.240
And we're going to talk about building it to WebAssembly.

10:51.240 --> 10:52.240
Ruby has some assumptions.

10:52.240 --> 10:53.240
Right?

10:53.240 --> 10:56.240
One of the first assumptions is that you're going to run it on a Unix-like environment.

10:56.240 --> 10:57.240
Right?

10:57.240 --> 10:58.240
This is a big one.

10:58.240 --> 10:59.240
Right?

10:59.240 --> 11:01.240
And if you're compiling this to something that has no concept of Unix, this could be quite a challenge.

11:01.240 --> 11:10.240
When we, when people were first looking at this, they saw that one of the most developed tool chains for Wasm was with C and C++.

11:10.240 --> 11:12.240
And people said, oh, C Ruby.

11:13.140 --> 11:15.140
I can take C Ruby, compile it to Wasm.

11:15.140 --> 11:16.140
Voila.

11:16.140 --> 11:17.140
Turns out that was not quite the case.

11:17.140 --> 11:19.140
There was a lot of work to do to make that work.

11:19.140 --> 11:21.140
And we'll kind of talk through some of those steps.

11:21.140 --> 11:23.140
The other one is a file system.

11:23.140 --> 11:25.140
Wasm doesn't have a file system.

11:25.140 --> 11:27.140
You have to give it a file system.

11:27.140 --> 11:29.140
You have to either give it access to a file system.

11:29.140 --> 11:31.140
Wasi allows you to do this now pretty easily.

11:31.140 --> 11:35.140
But maybe you don't want to give it access to the underlying host file system in the browser.

11:35.140 --> 11:40.140
Obviously, there's no access to the file system there for very good reason.

11:41.040 --> 11:43.040
Dynamic linking.

11:43.040 --> 11:46.040
Again, Wasm has no concept of this like we have in the C world.

11:46.040 --> 11:48.040
So this is something that is also a challenge.

11:49.040 --> 11:52.040
And then obviously system calls and libc.

11:52.040 --> 11:55.040
There is no concept of that in a pure Wasm module.

11:55.040 --> 11:57.040
So that's something we also have to give it.

11:57.040 --> 12:00.040
Some of the specific pain points were exceptions.

12:00.040 --> 12:04.040
Exceptions in Ruby and the Ruby VM depend on set jump, long jump.

12:04.040 --> 12:06.040
This is something that had to be worked around.

12:06.040 --> 12:09.040
And this was quite challenging at first.

12:09.940 --> 12:11.940
Fibers.

12:11.940 --> 12:15.940
Wasm has no concept of context switching.

12:15.940 --> 12:20.940
There's no concept of kernel space or user space or anything like that.

12:20.940 --> 12:22.940
So this is something that had to be figured out.

12:22.940 --> 12:24.940
GC, you must be able to inspect the VM.

12:24.940 --> 12:29.940
This is also not easy to do because there are no locals that you can inspect in Wasm.

12:29.940 --> 12:33.940
So one of the ways that this was achieved was with a project called Asyncify.

12:34.840 --> 12:40.840
Asyncify is a project that allowed you to run WebAssembly code in the browser.

12:40.840 --> 12:42.840
And also do Async JavaScript at the same time.

12:42.840 --> 12:48.840
So when you run WebAssembly in a browser, you interface with it through JavaScript.

12:48.840 --> 12:50.840
But WebAssembly is single threaded right now.

12:50.840 --> 12:56.840
And the problem there is that we needed to be able to sort of pause the stack, copy things,

12:56.840 --> 12:58.840
resume the stack, rewind, unwind, and so on.

12:59.740 --> 13:06.740
So what the people in the Ruby world found out is that we could take that and use it to solve all of these problems, which was quite nice.

13:06.740 --> 13:12.740
If you want more detail on that, you should check out Yuda Saito's talk from Ruby Kagi last year.

13:12.740 --> 13:15.740
He is the main contributor to Ruby Wasm.

13:15.740 --> 13:20.740
And he is also a really, really great guy to talk to about any of this stuff.

13:20.740 --> 13:22.740
He's super, super good at this.

13:23.640 --> 13:27.640
So check out that talk for a lot more technical detail there.

13:27.640 --> 13:29.640
This talks about deploying, actually.

13:29.640 --> 13:31.640
And I will get there.

13:31.640 --> 13:33.640
Otherwise, I would go more into detail on those points.

13:33.640 --> 13:39.640
So I'd like to talk to you about how you can deploy a Ruby project today with Wasm.

13:39.640 --> 13:41.640
So I made this little project called Boxer.

13:41.640 --> 13:43.640
It's a side project of mine.

13:43.640 --> 13:45.640
I've been working on it in my spare time.

13:45.640 --> 13:51.640
And what this lets you do is it lets you take a container declaration and you can use it to run the WebAssembly code.

13:52.540 --> 13:56.540
It lets you take a container declaration like a Docker file and then it spits out a Wasm binary.

13:56.540 --> 13:58.540
Pretty simple.

13:58.540 --> 14:00.540
You can check it out.

14:00.540 --> 14:02.540
It's Boxer.dev.

14:02.540 --> 14:04.540
And I'll talk through this in the demo too.

14:04.540 --> 14:06.540
But there's quite a bit that has to go into this.

14:06.540 --> 14:12.540
But the point is, right now, if you want to do a Ruby app on WebAssembly,

14:12.540 --> 14:15.540
you have to bring in the runtime itself.

14:15.540 --> 14:17.540
You have to compile it.

14:17.540 --> 14:19.540
You have to set up the linking.

14:20.440 --> 14:24.440
You have to pack the actual files that you want to use into the WebAssembly itself.

14:24.440 --> 14:26.440
And a lot of this is quite complex.

14:26.440 --> 14:28.440
So this kind of does it all for you in a single step.

14:31.440 --> 14:33.440
So what's in one of these boxes?

14:33.440 --> 14:35.440
I like to call them Wasm boxes.

14:35.440 --> 14:37.440
I don't know.

14:37.440 --> 14:39.440
There's kind of a nice metaphor compared with a container.

14:39.440 --> 14:41.440
This is a box.

14:41.440 --> 14:43.440
It's smaller.

14:43.440 --> 14:45.440
You've got the base layer.

14:45.440 --> 14:48.440
What the base layer does is the base layer gives you basically imports and exports.

14:49.340 --> 14:51.340
So the Wasm module only knows about its imports and exports.

14:51.340 --> 14:53.340
That's all it gets from the outside world.

14:53.340 --> 14:55.340
And so if you want to set up an import into a Wasm module,

14:55.340 --> 15:01.340
you have to provide that on the host side or on the side of another module.

15:01.340 --> 15:06.340
This also gives you a virtual file system, virtualized syscode subs.

15:06.340 --> 15:09.340
There's a project called Wasix from single store labs.

15:09.340 --> 15:14.340
Not to be confused with Wasix from Wasm, which is another Wasm runtime.

15:14.340 --> 15:16.340
It's naming things as hard, I guess.

15:17.240 --> 15:21.240
So what this does is it gives you stubbed out syscalls

15:21.240 --> 15:27.240
and then the VFS is actually usable syscalls, POSIX-based FS syscalls.

15:27.240 --> 15:29.240
And I'll talk about that too.

15:29.240 --> 15:33.240
The compiled runtime gives you a compiled Ruby runtime.

15:33.240 --> 15:37.240
And then obviously it packs up the user source code.

15:37.240 --> 15:39.240
And the only thing, this is very important,

15:39.240 --> 15:43.240
is that the only thing that it knows about is what is inside it,

15:44.140 --> 15:48.140
is the Ruby VM and the source code and the imports and exports.

15:48.140 --> 15:50.140
So how is this done?

15:50.140 --> 15:52.140
Right?

15:52.140 --> 15:56.140
Interfaces, libc, a sandbox file system, Wiser.

15:56.140 --> 15:58.140
Wiser is a really cool project.

15:58.140 --> 16:01.140
If you're interested in WebAssembly, this allows you to pack up

16:01.140 --> 16:03.140
WebAssembly into a single binary.

16:03.140 --> 16:05.140
It allows you to deconstruct it.

16:05.140 --> 16:07.140
It allows you to analyze it.

16:07.140 --> 16:09.140
It's a really, really great project.

16:09.140 --> 16:11.140
I highly recommend checking it out if you're interested.

16:12.040 --> 16:14.040
This is a very simple project.

16:14.040 --> 16:16.040
It's just like a container does.

16:16.040 --> 16:18.040
This gives you the imports and exports.

16:18.040 --> 16:20.040
Here in the VFS we make a directory.

16:20.040 --> 16:22.040
We copy that using Wiser.

16:22.040 --> 16:26.040
This is a C example, but this a.out would normally be a binary.

16:26.040 --> 16:28.040
The big difference here is this must be a WebAssembly binary.

16:28.040 --> 16:30.040
That's the big difference.

16:30.040 --> 16:32.040
Set the working directory.

16:32.040 --> 16:34.040
That does that in the container in the box, rather, itself.

16:34.040 --> 16:36.040
And then executes it.

16:36.040 --> 16:38.040
And what this does is this also bundles up the runtime itself,

16:38.040 --> 16:40.040
passes in the correct arguments,

16:40.940 --> 16:42.940
and then executes the WASM module inside it.

16:44.940 --> 16:46.940
So, WASM VFS.

16:46.940 --> 16:48.940
This is another project of mine,

16:48.940 --> 16:50.940
and we worked on it for a while at Loophole.

16:50.940 --> 16:52.940
This project basically is pretty simple.

16:52.940 --> 16:54.940
It gives you the most standard POSIX SysCalls

16:54.940 --> 16:56.940
for file systems,

16:56.940 --> 16:58.940
all implemented virtually in WebAssembly.

16:58.940 --> 17:00.940
So, this is kind of cool because this means

17:00.940 --> 17:02.940
that you can just use most things

17:02.940 --> 17:04.940
that depend on a Unix-based file system,

17:04.940 --> 17:06.940
which is a lot of things.

17:07.840 --> 17:09.840
Specifically, tomorrow I'm giving a very similar talk

17:09.840 --> 17:11.840
to this in the Python room.

17:11.840 --> 17:13.840
Compiling Python, it really, really depends

17:13.840 --> 17:15.840
on the file system itself.

17:15.840 --> 17:17.840
So, you can check that out if you're interested.

17:17.840 --> 17:19.840
And go through this.

17:19.840 --> 17:21.840
Yep.

17:21.840 --> 17:23.840
Cool.

17:23.840 --> 17:25.840
And now I'm going to do the demo, which is why I'm sitting.

17:25.840 --> 17:27.840
Cool.

17:27.840 --> 17:29.840
All right.

17:29.840 --> 17:31.840
So, we've all worked with Docker, right?

17:31.840 --> 17:33.840
Mostly with Docker.

17:34.740 --> 17:36.740
So, we've all worked with Docker, right?

17:36.740 --> 17:38.740
Mostly probably everyone, every single person here.

17:38.740 --> 17:40.740
Okay, cool.

17:40.740 --> 17:42.740
Yeah, so this is a simple Docker file.

17:42.740 --> 17:44.740
You got from Ruby 3.0,

17:44.740 --> 17:46.740
setting the working directory,

17:46.740 --> 17:48.740
copying the source code to the

17:48.740 --> 17:50.740
to the current directory,

17:50.740 --> 17:52.740
which is user-source-app,

17:52.740 --> 17:54.740
and then running the actual code, right?

17:54.740 --> 17:56.740
And the source code is this.

17:56.740 --> 17:58.740
It's just a simple little script

17:58.740 --> 18:00.740
that does some square rooting

18:00.740 --> 18:02.740
and prints it out.

18:04.740 --> 18:06.740
So, by the way,

18:06.740 --> 18:08.740
please ignore my Rust warnings

18:08.740 --> 18:10.740
that I haven't fixed yet.

18:10.740 --> 18:12.740
This is written in Rust.

18:12.740 --> 18:14.740
But here's a little information about Boxer.

18:14.740 --> 18:16.740
And what I can do then is

18:16.740 --> 18:18.740
the...

18:18.740 --> 18:20.740
Basically, I wanted to keep a similar API

18:20.740 --> 18:22.740
to Docker,

18:22.740 --> 18:24.740
because we're all pretty familiar with it.

18:24.740 --> 18:26.740
We have BoxBuild passing the Docker file itself.

18:26.740 --> 18:28.740
Okay, you can see at the bottom.

18:28.740 --> 18:30.740
It found the base image, right?

18:30.740 --> 18:32.740
The base layer.

18:33.640 --> 18:35.640
It is building. Take several seconds.

18:35.640 --> 18:37.640
What that did is that bundled the run time,

18:37.640 --> 18:39.640
the standard library, the source code,

18:39.640 --> 18:41.640
and the FS all in the right place

18:41.640 --> 18:43.640
so that it can be executed into a single binary.

18:43.640 --> 18:45.640
So now it's one binary.

18:45.640 --> 18:47.640
Okay?

18:47.640 --> 18:49.640
And then if we do Box Run,

18:49.640 --> 18:51.640
there we have it.

18:51.640 --> 18:53.640
Ruby on WebAssembly.

18:53.640 --> 18:55.640
That's that.

18:55.640 --> 18:57.640
Okay?

18:57.640 --> 18:59.640
So pretty simple.

18:59.640 --> 19:01.640
Whoops.

19:02.540 --> 19:04.540
There's some big caveats.

19:04.540 --> 19:07.540
So one of the big ones is threads are not supported yet.

19:07.540 --> 19:09.540
Right?

19:09.540 --> 19:11.540
There, pthreads are not that are pretty typical

19:11.540 --> 19:13.540
used in like green threads,

19:13.540 --> 19:15.540
things with like Ruby and Python.

19:15.540 --> 19:17.540
This is not supported yet in WebAssembly.

19:17.540 --> 19:19.540
There's some ways to do it with asyncify.

19:19.540 --> 19:21.540
It's pretty challenging, but basically like with stack switching,

19:21.540 --> 19:23.540
you can do some fancy stuff.

19:23.540 --> 19:25.540
Networking, this is also a big one.

19:25.540 --> 19:27.540
Out of the box, this is not supported.

19:27.540 --> 19:29.540
So if you want to do something with a network,

19:29.540 --> 19:31.540
this is very challenging.

19:31.540 --> 19:33.440
So if you want to do this,

19:33.440 --> 19:35.440
and there are ways to virtualize layers

19:35.440 --> 19:37.440
of the kernels networking stack

19:37.440 --> 19:39.440
and then combine them with the sort of

19:39.440 --> 19:41.440
WASM module that you have

19:41.440 --> 19:43.440
and then pass them across to the host.

19:43.440 --> 19:45.440
And there are some techniques for this

19:45.440 --> 19:47.440
and this is actually kind of the way forward for that.

19:47.440 --> 19:49.440
Native dependencies, this is also a big one.

19:49.440 --> 19:51.440
But, native dependencies,

19:51.440 --> 19:53.440
there's a whole other benefit

19:53.440 --> 19:55.440
with using WebAssembly for

19:55.440 --> 19:57.440
native dependencies, which means you just have to compile it once.

19:57.440 --> 19:59.440
Right?

20:00.340 --> 20:02.340
So you can compile a native dependency once

20:02.340 --> 20:04.340
for all platforms

20:04.340 --> 20:06.340
and then anywhere that you have a WASM runtime,

20:06.340 --> 20:08.340
then you can use that native dependency.

20:08.340 --> 20:10.340
So, yeah, there's a lot of work going on here

20:10.340 --> 20:12.340
and this is sort of like the next steps

20:12.340 --> 20:14.340
in what need to be solved.

20:14.340 --> 20:16.340
But things like

20:16.340 --> 20:18.340
WASI Preview 2 and 3

20:18.340 --> 20:20.340
solve things like networking

20:20.340 --> 20:22.340
and then threads will also be part of it too

20:22.340 --> 20:24.340
within the next year.

20:24.340 --> 20:26.340
So this is a little thing

20:26.340 --> 20:28.340
that I had ChatGP teammate.

20:28.340 --> 20:30.340
I got like a box and then a container. It's pretty fun.

20:30.340 --> 20:34.340
Now for some actual metrics.

20:34.340 --> 20:36.340
A container of the same exact code

20:36.340 --> 20:40.340
that I showed you using the same exact Docker file.

20:40.340 --> 20:43.340
A container could be anywhere from 80 to 900 megabytes

20:43.340 --> 20:45.340
depending on which container that you use

20:45.340 --> 20:47.340
and if you want to bundle the entire standard library.

20:47.340 --> 20:49.340
Right?

20:49.340 --> 20:51.340
Startup speed could be 800 milliseconds to 2 seconds.

20:51.340 --> 20:53.340
The cold start problem for serverless functions

20:53.340 --> 20:55.340
is a big problem that a lot of cloud providers have.

20:55.340 --> 20:57.340
They try to do a lot of trickery

20:57.340 --> 20:59.340
and then things can start up fast.

20:59.340 --> 21:01.340
This is a big problem

21:01.340 --> 21:03.340
because most of those use container...

21:03.340 --> 21:05.340
Security models are shared kernel.

21:05.340 --> 21:07.340
A container is not really an isolated environment.

21:07.340 --> 21:09.340
It kind of is, but it relies on a kernel

21:09.340 --> 21:11.340
and all the images share the same kernel.

21:11.340 --> 21:13.340
So that's something.

21:13.340 --> 21:15.340
In a box, the sizes of this one is 16 megabytes.

21:15.340 --> 21:17.340
Startup speeds are

21:17.340 --> 21:19.340
100 microseconds to about 1 millisecond.

21:19.340 --> 21:21.340
And the security model is a virtualized sandbox

21:21.340 --> 21:23.340
that's built into the virtualized sandbox.

21:23.340 --> 21:25.340
So it's a very simple,

21:25.340 --> 21:27.340
and the security model is a virtualized sandbox

21:27.340 --> 21:29.340
machine code execution.

21:29.340 --> 21:31.340
So the future.

21:31.340 --> 21:33.340
Full support for libc and syscall interfaces.

21:33.340 --> 21:35.340
Right?

21:35.340 --> 21:37.340
This is something that we have worked on a little bit

21:37.340 --> 21:39.340
and have done some cool stuff at scale with...

21:39.340 --> 21:41.340
Or at loophole on scale,

21:41.340 --> 21:43.340
we have this thing called extensions,

21:43.340 --> 21:45.340
which allows you to generate

21:45.340 --> 21:47.340
host functions that can then act

21:47.340 --> 21:49.340
as the underlying layer that you wouldn't have

21:49.340 --> 21:51.340
in the WebAssembly VM.

21:51.340 --> 21:53.340
So we did a talk in Seattle last year

21:53.340 --> 21:55.340
where we talked about how we

21:55.340 --> 21:57.340
stubbed out the GVisor container runtime

21:57.340 --> 21:59.340
and took the syscalls

21:59.340 --> 22:01.340
and provided them

22:01.340 --> 22:03.340
with WebAssembly

22:03.340 --> 22:05.340
using that technique.

22:05.340 --> 22:07.340
So you had WebAssembly-based syscalls

22:07.340 --> 22:09.340
on the other side of what we would

22:09.340 --> 22:11.340
consider a container

22:11.340 --> 22:13.340
isolated environment.

22:13.340 --> 22:15.340
The other next step

22:15.340 --> 22:17.340
is to modularize kernel stacks,

22:17.340 --> 22:19.340
which is kind of terrifying.

22:19.340 --> 22:21.340
But this is kind of cool because

22:21.340 --> 22:23.340
if you could have a plug-able

22:23.340 --> 22:25.340
networking stack, you could do things like

22:25.340 --> 22:27.340
run things that require Unix

22:27.340 --> 22:29.340
in places that don't actually have

22:29.340 --> 22:31.340
a Unix operating system.

22:31.340 --> 22:33.340
You could use the WasmVFS.

22:33.340 --> 22:35.340
And then when needed, you could write

22:35.340 --> 22:37.340
shims and put modules

22:37.340 --> 22:39.340
wherever you want them to be.

22:39.340 --> 22:41.340
So this kind of creates a cool thing.

22:41.340 --> 22:43.340
We got a paradigm shift, a kernel-free,

22:43.340 --> 22:45.340
composable, universal, Wasm-based operating environment.

22:45.340 --> 22:47.340
There are some people trying this.

22:47.340 --> 22:49.340
Wazzy is kind of getting there.

22:49.340 --> 22:51.340
Wally, which is the names here, I know.

22:51.340 --> 22:53.340
Wally is the WebAssembly

22:53.340 --> 22:55.340
Linux interface.

22:55.340 --> 22:57.340
This was just released by group at Carnegie Mellon

22:57.340 --> 22:59.340
at the end of last year.

22:59.340 --> 23:01.340
Incredible stuff. They basically take that approach.

23:01.340 --> 23:03.340
They virtualize everything.

23:03.340 --> 23:05.340
Signals,

23:05.340 --> 23:07.340
threads,

23:07.340 --> 23:09.340
file systems, and then they create

23:09.340 --> 23:11.340
host functions which match those things

23:11.340 --> 23:13.340
for the top, like, 150

23:13.340 --> 23:15.340
Unix-based syscalls

23:15.340 --> 23:17.340
and make those available. So you can run stuff

23:17.340 --> 23:19.340
like this out of the box.

23:19.340 --> 23:21.340
It was a little bit rough.

23:21.340 --> 23:23.340
I was going to try to incorporate that in this talk,

23:23.340 --> 23:25.340
but I didn't have time.

23:25.340 --> 23:27.340
Bare metal runtimes with a

23:27.340 --> 23:29.340
unicernel. This is a big one, too.

23:29.340 --> 23:31.340
You take a unicernel, give you just

23:31.340 --> 23:33.340
the syscalls that the Wasm runtime needs,

23:33.340 --> 23:35.340
and then run them.

23:47.340 --> 23:49.340
You can run them

23:49.340 --> 23:51.340
in a virtual machine.

23:51.340 --> 23:53.340
You can run them in a virtual machine.

23:53.340 --> 23:55.340
You can run them in a virtual machine.

23:55.340 --> 23:57.340
You can run them in a virtual machine.

23:57.340 --> 23:59.340
You can run them in a virtual machine.

23:59.340 --> 24:01.340
You can run them in a virtual machine.

24:01.340 --> 24:03.340
You can run them in a virtual machine.

24:03.340 --> 24:05.340
You can run them in a virtual machine.

24:05.340 --> 24:07.340
You can run them in a virtual machine.

24:07.340 --> 24:09.340
You can run them in a virtual machine.

24:09.340 --> 24:11.340
You can run them in a virtual machine.

24:11.340 --> 24:13.340
You can run them in a virtual machine.

24:13.340 --> 24:15.340
You can run them in a virtual machine.

24:15.340 --> 24:17.340
You can run them in a virtual machine.

24:17.340 --> 24:19.340
You can run them in a virtual machine.

24:19.340 --> 24:21.340
You can run them in a virtual machine.

24:21.340 --> 24:23.340
You can run them in a virtual machine.

24:23.340 --> 24:25.340
You can run them in a virtual machine.

24:25.340 --> 24:27.340
You can run them in a virtual machine.

24:27.340 --> 24:29.340
You can run them in a virtual machine.

24:29.340 --> 24:31.340
You can run them in a virtual machine.

24:31.340 --> 24:33.340
You can run them in a virtual machine.

24:33.340 --> 24:35.340
You can run them in a virtual machine.

24:35.340 --> 24:37.340
You can run them in a virtual machine.

24:37.340 --> 24:39.340
You can run them in a virtual machine.

24:39.340 --> 24:41.340
You can run them in a virtual machine.

24:41.340 --> 24:43.340
You can run them in a virtual machine.

24:43.340 --> 24:45.340
You can run them in a virtual machine.

24:45.340 --> 24:47.340
You can run them in a virtual machine.

24:47.340 --> 24:49.340
You can run them in a virtual machine.

24:49.340 --> 24:51.340
You can run them in a virtual machine.

24:51.340 --> 24:53.340
You can run them in a virtual machine.

24:53.340 --> 24:55.340
You can run them in a virtual machine.

24:55.340 --> 24:57.340
You can run them in a virtual machine.

24:57.340 --> 24:59.340
You can run them in a virtual machine.

24:59.340 --> 25:01.340
You can run them in a virtual machine.

25:01.340 --> 25:03.340
You can run them in a virtual machine.

25:03.340 --> 25:05.340
You can run them in a virtual machine.

25:05.340 --> 25:07.340
You can run them in a virtual machine.

25:07.340 --> 25:09.340
You can run them in a virtual machine.

25:09.340 --> 25:11.340
You can run them in a virtual machine.

25:11.340 --> 25:13.340
You can run them in a virtual machine.

25:13.340 --> 25:15.340
You can run them in a virtual machine.

25:15.340 --> 25:17.340
You can run them in a virtual machine.

25:17.340 --> 25:19.340
You can run them in a virtual machine.

25:19.340 --> 25:21.340
You can run them in a virtual machine.

25:21.340 --> 25:23.340
You can run them in a virtual machine.

25:23.340 --> 25:25.340
You can run them in a virtual machine.

25:25.340 --> 25:27.340
You can run them in a virtual machine.

25:27.340 --> 25:29.340
You can run them in a virtual machine.

25:29.340 --> 25:31.340
You can run them in a virtual machine.

25:31.340 --> 25:33.340
You can run them in a virtual machine.

25:33.340 --> 25:35.340
You can run them in a virtual machine.

25:35.340 --> 25:37.340
You can run them in a virtual machine.

25:37.340 --> 25:39.340
You can run them in a virtual machine.

25:39.340 --> 25:41.340
You can run them in a virtual machine.

25:41.340 --> 25:43.340
You can run them in a virtual machine.

25:43.340 --> 25:45.340
You can run them in a virtual machine.

25:45.340 --> 25:47.340
You can run them in a virtual machine.

25:47.340 --> 25:49.340
You can run them in a virtual machine.

25:49.340 --> 25:51.340
You can run them in a virtual machine.

25:51.340 --> 25:53.340
You can run them in a virtual machine.

25:53.340 --> 25:55.340
You can run them in a virtual machine.

25:55.340 --> 25:57.340
You can run them in a virtual machine.

25:57.340 --> 25:59.340
You can run them in a virtual machine.

25:59.340 --> 26:01.340
You can run them in a virtual machine.

26:01.340 --> 26:03.340
You can run them in a virtual machine.

26:03.340 --> 26:05.340
You can run them in a virtual machine.

26:05.340 --> 26:07.340
You can run them in a virtual machine.

26:07.340 --> 26:09.340
You can run them in a virtual machine.

26:09.340 --> 26:11.340
You can run them in a virtual machine.

26:11.340 --> 26:13.340
You can run them in a virtual machine.

26:13.340 --> 26:15.340
You can run them in a virtual machine.

26:15.340 --> 26:17.340
You can run them in a virtual machine.

26:17.340 --> 26:19.340
You can run them in a virtual machine.

26:19.340 --> 26:21.340
You can run them in a virtual machine.

26:21.340 --> 26:23.340
You can run them in a virtual machine.

26:23.340 --> 26:25.340
You can run them in a virtual machine.

26:25.340 --> 26:27.340
You can run them in a virtual machine.

26:27.340 --> 26:29.340
You can run them in a virtual machine.

26:29.340 --> 26:31.340
You can run them in a virtual machine.

26:31.340 --> 26:33.340
You can run them in a virtual machine.

26:33.340 --> 26:35.340
You can run them in a virtual machine.

26:35.340 --> 26:37.340
You can run them in a virtual machine.

26:37.340 --> 26:39.340
You can run them in a virtual machine.

26:39.340 --> 26:41.340
You can run them in a virtual machine.

26:41.340 --> 26:43.340
You can run them in a virtual machine.

26:43.340 --> 26:45.340
You can run them in a virtual machine.

26:45.340 --> 26:47.340
You can run them in a virtual machine.

26:47.340 --> 26:49.340
You can run them in a virtual machine.

26:49.340 --> 26:51.340
You can run them in a virtual machine.

26:51.340 --> 26:53.340
You can run them in a virtual machine.

26:53.340 --> 26:55.340
You can run them in a virtual machine.

26:55.340 --> 26:57.340
You can run them in a virtual machine.

26:57.340 --> 26:59.340
You can run them in a virtual machine.

26:59.340 --> 27:01.340
You can run them in a virtual machine.

27:01.340 --> 27:03.340
You can run them in a virtual machine.

27:03.340 --> 27:05.340
You can run them in a virtual machine.

27:05.340 --> 27:07.340
You can run them in a virtual machine.

27:07.340 --> 27:09.340
You can run them in a virtual machine.

27:09.340 --> 27:11.340
You can run them in a virtual machine.

27:11.340 --> 27:13.340
You can run them in a virtual machine.

27:13.340 --> 27:15.340
You can run them in a virtual machine.

27:15.340 --> 27:17.340
You can run them in a virtual machine.

27:17.340 --> 27:19.340
You can run them in a virtual machine.

27:19.340 --> 27:21.340
You can run them in a virtual machine.

27:21.340 --> 27:23.340
You can run them in a virtual machine.

27:23.340 --> 27:25.340
You can run them in a virtual machine.

27:25.340 --> 27:27.340
You can run them in a virtual machine.

27:27.340 --> 27:29.340
You can run them in a virtual machine.

27:29.340 --> 27:31.340
You can run them in a virtual machine.

27:31.340 --> 27:33.340
You can run them in a virtual machine.

27:33.340 --> 27:35.340
You can run them in a virtual machine.

27:35.340 --> 27:37.340
You can run them in a virtual machine.

27:37.340 --> 27:39.340
You can run them in a virtual machine.

27:39.340 --> 27:41.340
You can run them in a virtual machine.

27:41.340 --> 27:43.340
You can run them in a virtual machine.

27:43.340 --> 27:45.340
You can run them in a virtual machine.

27:45.340 --> 27:47.340
You can run them in a virtual machine.

27:47.340 --> 27:49.340
You can run them in a virtual machine.

27:49.340 --> 27:51.340
You can run them in a virtual machine.

27:51.340 --> 27:53.340
You can run them in a virtual machine.

27:53.340 --> 27:55.340
You can run them in a virtual machine.

27:55.340 --> 27:57.340
You can run them in a virtual machine.

27:57.340 --> 27:59.340
You can run them in a virtual machine.

27:59.340 --> 28:01.340
You can run them in a virtual machine.

28:01.340 --> 28:03.340
You can run them in a virtual machine.

28:03.340 --> 28:05.340
You can run them in a virtual machine.

28:05.340 --> 28:07.340
You can run them in a virtual machine.

28:07.340 --> 28:09.340
You can run them in a virtual machine.

28:09.340 --> 28:11.340
You can run them in a virtual machine.

28:11.340 --> 28:13.340
You can run them in a virtual machine.

28:13.340 --> 28:15.340
You can run them in a virtual machine.

28:15.340 --> 28:17.340
You can run them in a virtual machine.

28:17.340 --> 28:19.340
You can run them in a virtual machine.

28:19.340 --> 28:21.340
You can run them in a virtual machine.

28:21.340 --> 28:23.340
You can run them in a virtual machine.

28:23.340 --> 28:25.340
You can run them in a virtual machine.

28:25.340 --> 28:27.340
You can run them in a virtual machine.

28:27.340 --> 28:29.340
You can run them in a virtual machine.

28:29.340 --> 28:31.340
You can run them in a virtual machine.

28:31.340 --> 28:33.340
You can run them in a virtual machine.

28:33.340 --> 28:35.340
You can run them in a virtual machine.

28:35.340 --> 28:37.340
You can run them in a virtual machine.

28:37.340 --> 28:39.340
You can run them in a virtual machine.

28:39.340 --> 28:41.340
You can run them in a virtual machine.

28:41.340 --> 28:43.340
You can run them in a virtual machine.

28:43.340 --> 28:45.340
You can run them in a virtual machine.

28:45.340 --> 28:47.340
You can run them in a virtual machine.

28:47.340 --> 28:49.340
You can run them in a virtual machine.

28:49.340 --> 28:51.340
You can run them in a virtual machine.

28:51.340 --> 28:53.340
You can run them in a virtual machine.

28:53.340 --> 28:55.340
You can run them in a virtual machine.

28:55.340 --> 28:57.340
You can run them in a virtual machine.

28:57.340 --> 28:59.340
You can run them in a virtual machine.

28:59.340 --> 29:01.340
You can run them in a virtual machine.

29:01.340 --> 29:03.340
You can run them in a virtual machine.

29:03.340 --> 29:05.340
You can run them in a virtual machine.

29:05.340 --> 29:07.340
You can run them in a virtual machine.

29:07.340 --> 29:09.340
You can run them in a virtual machine.

29:09.340 --> 29:11.340
You can run them in a virtual machine.

29:11.340 --> 29:13.340
You can run them in a virtual machine.

29:13.340 --> 29:15.340
You can run them in a virtual machine.

29:15.340 --> 29:17.340
You can run them in a virtual machine.

29:17.340 --> 29:19.340
You can run them in a virtual machine.

29:19.340 --> 29:21.340
You can run them in a virtual machine.

29:21.340 --> 29:23.340
You can run them in a virtual machine.

29:23.340 --> 29:25.340
You can run them in a virtual machine.

29:25.340 --> 29:27.340
You can run them in a virtual machine.

29:27.340 --> 29:29.340
You can run them in a virtual machine.

29:29.340 --> 29:31.340
You can run them in a virtual machine.

29:31.340 --> 29:33.340
You can run them in a virtual machine.

29:33.340 --> 29:35.340
You can run them in a virtual machine.

29:35.340 --> 29:37.340
You can run them in a virtual machine.

29:37.340 --> 29:39.340
You can run them in a virtual machine.

29:39.340 --> 29:41.340
You can run them in a virtual machine.

29:41.340 --> 29:43.340
You can run them in a virtual machine.

29:43.340 --> 29:45.340
You can run them in a virtual machine.

29:45.340 --> 29:47.340
You can run them in a virtual machine.

29:47.340 --> 29:49.340
You can run them in a virtual machine.

29:49.340 --> 29:51.340
You can run them in a virtual machine.

29:51.340 --> 29:53.340
You can run them in a virtual machine.

29:53.340 --> 30:10.360
seems true.

30:10.360 --> 30:21.660
Yeah.

30:21.660 --> 30:27.060
So is it worth it to port 0B to pure wasm or to the POSIX interfaces?

30:27.060 --> 30:29.540
Yes, that's a great question.

30:29.540 --> 30:34.820
So right now, so there's a couple ways to answer this,

30:34.820 --> 30:41.700
but the capability based security is a big part of Wazzy specifically.

30:41.700 --> 30:46.420
And this works in a way that basically you exchange handles and you exchange permission.

30:46.420 --> 30:50.940
So compared with the UNIX way of having user group space or

30:50.940 --> 30:56.380
whatever namespaces, things like that, this is actually based on each capability.

30:56.380 --> 30:58.500
Wasm itself has no concept of that.

30:58.500 --> 31:01.620
Wasm itself just knows to execute the code in the module and

31:01.620 --> 31:03.740
it can't know about anything else outside of it.

31:03.740 --> 31:05.220
So Wazzy kind of tax that on.

31:06.460 --> 31:11.700
So this technique kind of takes that approach where your second approach,

31:11.700 --> 31:17.420
where basically it stubs out all of the sort of UNIX and POSIX capabilities and

31:17.420 --> 31:19.620
puts it all in Wasm, right?

31:19.620 --> 31:23.860
So Ruby thinks it's in UNIX, but it's not, right?

31:23.860 --> 31:27.900
In this example, there's a benefit to that too though,

31:27.900 --> 31:32.380
is when I mentioned about modularizing the kernel libraries.

31:32.380 --> 31:37.100
I'm dead serious about that because what that could do is allow for

31:37.100 --> 31:45.460
a greater sense of isolation and security and resource sort of alignment.

31:45.460 --> 31:49.180
Because when you run certain applications, like we know with containers,

31:49.540 --> 31:53.420
kind of introduce this, you don't need everything necessarily, right?

31:53.420 --> 31:56.780
So if you could only have what you need and each of those components could be

31:56.780 --> 32:01.900
completely isolated, memory safe, and they could be reused across multiple different

32:01.900 --> 32:05.860
things just like an operating system does, but faster and safer.

32:05.860 --> 32:08.020
There's a pretty exciting future there.

32:08.020 --> 32:11.700
And I think that you'll see certain people,

32:11.700 --> 32:16.460
while he kind of takes that approach, you'll see certain people pushing that more.

32:16.460 --> 32:20.140
I'm definitely a proponent of that, but there's some disagreements about whether

32:20.140 --> 32:22.900
it's the best thing, but yeah, absolutely.

32:23.940 --> 32:25.820
Cool, I've kept you guys here a lot.

32:25.820 --> 32:26.980
Anyone else?

32:26.980 --> 32:28.900
Feel free to talk to me after too.

32:28.900 --> 32:29.660
Cool, thanks again.

