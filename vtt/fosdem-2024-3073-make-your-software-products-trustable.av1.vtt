WEBVTT

00:00.000 --> 00:12.400
Hello everyone. Thanks for coming. My name is Dejan. Unfortunately Marco couldn't be

00:12.400 --> 00:19.920
here today. He got a call but yeah. What I want to talk about today is so we saw a lot

00:19.920 --> 00:25.920
of sessions today about producing gas bombs and producing the data a little very little.

00:25.920 --> 00:31.760
I think only Philip sessions was about managing actually the produce data right. So the challenge

00:31.760 --> 00:39.360
we try to tackle with the justification project is how to get all these data that are currently

00:39.360 --> 00:44.960
being produced by the more and more organizations like S bombs but also X files and more and more

00:44.960 --> 00:52.240
advisory data that we get and get them into some kind of manageable system because without that

00:53.200 --> 01:00.240
information is just a bunch of mostly JSON files spread all over the place right. So what we want

01:00.240 --> 01:07.040
to what we try to do is to provide a system that will get all this data put it in into a system

01:07.040 --> 01:16.320
that can be searchable and queryable and actually get us get us actionable information. So making

01:16.400 --> 01:23.520
software development more proactive in managing security but also making it much more easier to

01:23.520 --> 01:33.760
respond to the security issues. And yeah as I said these got us to start working on a

01:33.760 --> 01:40.000
justification project which basically set these goals for itself. So being able to ingest and

01:40.960 --> 01:49.040
store all kind of S bombs and VEX documents are open source but also proprietary company products

01:49.040 --> 01:57.760
right. Discover for those ingested S bombs and VEX is learn about all the new vulnerabilities

01:57.760 --> 02:06.400
and advisories related to the packages inside of the S bombs and being able to explore and search

02:06.960 --> 02:11.680
those information but also create an API that can be

02:13.280 --> 02:19.440
integratable in other systems and provide us to share this information with the rest of the

02:19.440 --> 02:29.680
developer toolchain like IDEs and CI CD tools. So ideally we would want to mark all the vulnerable

02:30.400 --> 02:37.200
dependencies directly in the developer's IDE and also for example fail the builds that

02:38.320 --> 02:44.960
tries to build a software that contains some of the dependencies that are known to be vulnerable.

02:46.480 --> 02:54.080
When we started to do this sometime last year this time last year we also figure out that

02:54.080 --> 03:03.120
there is another open source initiative that revolves around the similar ideas and it's called

03:03.120 --> 03:10.320
GUAC. It was mentioned in the previous session as well and I will cover it a little bit more here.

03:11.120 --> 03:18.480
So GUAC stands for Graph for Understanding Artifact Composition and the idea is to being able to

03:18.480 --> 03:27.360
ingest all different kinds of artifact documents like S bombs and VEX files and advisory data from

03:27.360 --> 03:35.600
all kinds of sources and basically create a graph ontology of that. So at first we started just

03:35.600 --> 03:42.400
experimenting with the GraphQL database but today ontology is based on the GraphQL API and can be

03:42.400 --> 03:48.480
implemented by the multiple persistent backends. That's on the left side right on the right side

03:48.480 --> 03:57.360
of the graph we also want to be able to query all these data. So GUAC should be able to provide us

03:57.360 --> 04:05.040
with all the answers about what are the dependencies in my S bomb, how these dependencies correlate

04:05.040 --> 04:11.360
with each other, so what's dependent on the what, so it's easy to find all the graph tree of dependency

04:11.440 --> 04:20.000
in your project but also being able to attach to this particular dependency all the vulnerability

04:20.000 --> 04:26.560
and the advisories and VEX data that we can find in additional systems.

04:28.720 --> 04:35.120
This is the basic architecture. Let me just see how much time I have here. But I basically

04:35.920 --> 04:43.120
explained it in the previous graph. So we can collect documents from different sources,

04:43.120 --> 04:49.040
we can certify them against different sources like OSV or DApps Dev, get it all through the

04:50.160 --> 04:56.640
GraphQL API ontology into a database. Two currently supported databases today is POSGRES,

04:56.640 --> 05:02.080
relational database that we use basically and works just fine and there's an Orango DB back end

05:02.080 --> 05:08.480
which is a pure GraphQL back end right and then on the other side provide the GraphQL API to

05:09.600 --> 05:16.480
be able to query that and provide a bunch of CLIs that it can be able to extract the data from the

05:16.480 --> 05:27.360
system. So in the classification project we try to provide a little bit more functionality on top

05:27.360 --> 05:36.560
of that. First of all we want to be able to actually not just ingest all the data about

05:36.560 --> 05:42.080
different relations in the database but we also want to provide a central place to store all

05:42.080 --> 05:48.960
your documents for the organization. So it provides an S3 compatible storage for storing

05:48.960 --> 05:56.080
and ingesting all the company's data into a single place so it can be an S3

05:56.800 --> 06:02.880
bucket in the AWS but also for local deployments it can be some kind of a

06:02.880 --> 06:11.600
Minio instance for that. It has what we call walkers for different kind of CSEF repositories

06:11.600 --> 06:22.000
so that we can automatically ingest Asgum and Vex files and then provide what we can see

06:22.000 --> 06:29.040
on top and on the bottom. So what we call a single pane of glass like a nice UI to be able to

06:29.040 --> 06:37.040
search all this data that we have but also the Exort API as I said for integrating the system

06:37.040 --> 06:46.000
to the rest of the developer tool chain. So there's a nice VS Code plugin that can work basically

06:46.480 --> 06:53.280
with justification today and automatically from the project get all the dependencies and flag

06:54.720 --> 07:04.000
vulnerabilities if it's found in the system. So I thought to do a little demo so let's see how

07:04.000 --> 07:14.480
it's going to work. So Neil it will be easier. So here we can see the UI with some pre-loaded data

07:16.400 --> 07:21.440
and we can see that we have basically what we call six products here which are actually

07:21.440 --> 07:28.400
six S-bombs that are already already ingested in the system and a large number of CVs that

07:29.760 --> 07:37.360
have been collected from multiple sources and we can see that we identified around 2000 packages

07:37.840 --> 07:47.120
for these S-bombs and most importantly from the Vex files ingested here we identified 29

07:48.080 --> 07:57.280
advisories for these. So if we go to a certain product we can see a couple of information

07:58.880 --> 08:06.720
obtained from the S-bombs so we can see the basic metadata that we have. Usually we can see all

08:06.720 --> 08:13.040
the packages and how they relate to each other. I think this S-bombs is pretty flat in structure so

08:13.040 --> 08:20.480
there's no much dependency going on there but the most important thing is that we can see

08:21.040 --> 08:27.840
different kinds of advisories that are against and also immediately see which

08:29.280 --> 08:36.080
actual packages are being affected by these advisories. We can go back and forth through

08:36.080 --> 08:43.920
this system so we can go to the actual package see that it's actually affected by this vulnerability.

08:43.920 --> 08:50.800
We can also go from the package and find the S-bombs that it belongs to, the S-bombs or the product

08:51.360 --> 08:58.880
but also what we can provide is that nice search capability as we said like maybe at some point

08:59.280 --> 09:04.480
you don't remember exact vulnerability we're looking for so you can basically

09:07.760 --> 09:18.480
just do a full text search or maybe yeah and find that there's a packages related to that but also

09:18.480 --> 09:27.360
find the exact vulnerabilities that we talked about a little bit earlier. So this is just

09:27.360 --> 09:35.760
like a basic demo right? I have a little bit more time just to explain so what were the challenges

09:35.760 --> 09:43.200
for us and I think we heard in a lot of sessions all about these challenges so it's mostly

09:43.200 --> 09:50.400
still early adopters everywhere, tools are immature including the project I'm working on so we definitely

09:51.360 --> 09:58.000
don't consider it mature but also there's a lot of inconsistency in the data wherever you look right

09:58.000 --> 10:04.240
so we heard today about all the multiple computing formats in S-bombs space and all the work that

10:04.240 --> 10:09.360
people are doing to bring that more closer and together over time which I think is awesome.

10:10.400 --> 10:13.520
We also heard a nice discussion about all the different kind of

10:14.240 --> 10:20.960
identifiers and you can see so if you work only with one source of data then it's easier but then

10:20.960 --> 10:27.680
if you try to correlate this S-bomb with this Vex file and this S-bomb is using PURELs and these

10:27.680 --> 10:35.200
are the CPEs it's becoming impossible to correlate data and build the graph basically

10:36.640 --> 10:42.960
properly. Also what we found is that even all these things are standards there's a lot of unwritten

10:42.960 --> 10:50.000
rules in all the organizations about how they are presenting their data so the documents will pass

10:50.000 --> 10:57.200
but what you have as an information from the document really depends so I think yeah it's good

10:57.200 --> 11:04.160
that you're all here and there's a lot of things to do right because it's early early days. For the

11:04.160 --> 11:09.760
project itself we'll try to additionally simplify architecture and the deployment model we're all

11:09.760 --> 11:17.040
about microservices and Kubernetes for now which is okay but I think we could reach much more

11:17.040 --> 11:23.360
people with simplifying how much resources and where they can deploy a project like this

11:24.240 --> 11:33.280
and go into supporting more standards. So you saw here just basic searches and basic

11:33.280 --> 11:38.880
correlation I think once we have much more data in the system we can get much more

11:38.880 --> 11:47.120
vision from all this data in and provide that as that's the value of the project in my opinion

11:47.120 --> 11:54.000
right and continue working on the future integrations because in my mind if you do continue doing this

11:54.000 --> 11:59.680
right I think at some point in a couple years all these infrastructures should be invisible to

11:59.680 --> 12:04.720
developers right so it should be part of your developer toolchain automatically working in

12:04.720 --> 12:11.680
VS code in all the Git for pipelines and everything right so we are just beginning

12:12.560 --> 12:18.720
that's it so justification side doesn't have too much data saying about immature projects but

12:18.720 --> 12:24.640
there's a dev box sandbox that you can try there's a code there and we always on the

12:24.640 --> 12:31.200
metric channel so if you're interested please reach out and yeah. I'm going to ask the question

12:32.160 --> 12:35.440
are you using the SPX libraries for helping with the ingestion?

12:37.040 --> 12:44.320
No no we're using yeah sorry yeah the question is are we using existing SPX libraries yes we are

12:44.320 --> 12:51.040
yeah so there's one in Golan using in in guac but there is also in Rust one using the classification

12:51.040 --> 12:56.800
itself because they are good yeah. So why is the reason that you decided to start a project from

12:56.800 --> 13:01.520
the ground instead of help at least four or five open source projects big ones that already do

13:01.520 --> 13:06.400
exactly what they do but not yet on the level but mostly 90 percent that we are doing today.

13:06.400 --> 13:13.520
Why you not helping that one instead of creating one? So yeah why we are starting a new project

13:13.520 --> 13:19.920
instead of instead of helping others so first of all we joined the guac project which is also

13:20.000 --> 13:27.120
another new project but yeah I can't answer that I mean a lot of people were involved in that kind

13:27.120 --> 13:33.120
of decision but we are trying to be as much I mean it's all open source we are contributing to other

13:33.120 --> 13:42.000
projects so it's not a closed source product basically yeah. So one of your early slides said

13:42.000 --> 13:47.200
this can be used to sort of share S-bomb data can you talk a little about that feature how

13:48.000 --> 13:51.520
you this can be used to sort of send S-bomb data around to other projects?

13:52.480 --> 14:00.480
So it's not about yeah sorry about it so about sharing the S-bomb data it's not about sharing

14:00.480 --> 14:07.680
the data but providing the API so the external systems can query things so basically the VSCode

14:07.680 --> 14:15.200
plugin would get all the URLs from the current project and being able to query this and get

14:15.200 --> 14:22.320
actionable item back so there's no any distributed sharing of the data just integration API.

14:24.080 --> 14:31.120
Okay please thank you. Thank you.

