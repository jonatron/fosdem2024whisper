WEBVTT

00:00.000 --> 00:09.900
I had my second talk of the day. The first talk was very somewhat topic, but it focused

00:09.900 --> 00:14.640
more on the distribution side of things, how to build all this stuff. I welcome you to

00:14.640 --> 00:20.800
look at the video if you have some time later, because what I'll not be able to answer in

00:20.800 --> 00:24.360
these 20 minutes, hopefully the other talk might.

00:24.360 --> 00:29.680
So I will talk about this in boots, this in BSTAP UKIs and what those are, and why you

00:29.680 --> 00:33.280
should all switch to that, of course.

00:33.280 --> 00:38.560
So let's jump right in. So system reboot, what is it? We usually call it bootloader,

00:38.560 --> 00:44.320
but it actually isn't. It's a stupid boot menu. Like if a bootloader, at least in my

00:44.320 --> 00:49.040
view, is something that actually is capable of loading sectors onto disk, parthing them,

00:49.040 --> 00:53.520
and then eventually setting up the boot params and jumping into this, we do nothing of that

00:53.520 --> 00:57.240
in system reboot. All we do is we give you a menu and you pick something, and then we

00:57.280 --> 01:02.600
chain load some other UFI binary. So yeah, it's a fancy boot menu, nothing else. Makes

01:02.600 --> 01:07.800
it on one hand dumb, but also nice and robust.

01:07.800 --> 01:10.800
It's built around this model that you have drop-in files inside of a directory, which

01:10.800 --> 01:13.920
I guess is very different from Grub where you have these boot scripts and things like

01:13.920 --> 01:20.400
this. Our way to configure things is supposed to be as simple as possible and modeled after

01:20.400 --> 01:26.240
how we started doing things in package management and classic Linux distributions like that,

01:26.240 --> 01:30.240
but it's not this pattern where it has this directory, like a configuration directory or

01:30.240 --> 01:35.240
a directory where you put desktop files on the desktop into and things like that, where

01:35.240 --> 01:39.440
every package can put more stuff into it, and then the combination of all of them is what

01:39.440 --> 01:44.360
makes the system work. And we just said, okay, let's do it the same way. Have one directory

01:44.360 --> 01:49.960
in the ESP, and people that want to populate the boot menu just put one file in there,

01:49.960 --> 01:53.360
and that's what populates the boot menu, and that's already it.

01:53.480 --> 01:58.760
So, yeah, it just takes basically this Linux pattern around package management and just

01:58.760 --> 02:01.160
takes it to the boot loader stuff.

02:01.160 --> 02:05.200
So, this boot is UFI only, right? Like, this makes things nice because it basically means

02:05.200 --> 02:09.320
we don't have to actually do any boot loading. It implements something we call the boot loader

02:09.320 --> 02:14.240
spec, which is spec we wrote ourselves. Actually, it just basically tries to define in abstract

02:14.240 --> 02:22.680
terms how, like, where to place kernels, where to place descriptions of what to boot.

02:22.680 --> 02:29.160
It supports two kinds of menu entries. Type one and type two, we call them, I think the

02:29.160 --> 02:33.680
focus should always be nowadays on type two because they have much nicer properties regarding

02:33.680 --> 02:37.840
measurement, cryptography, and things like that. But type one still exists, and people

02:37.840 --> 02:42.240
will continue to use it because it's more flexible in regards, it allows you to configure

02:42.240 --> 02:44.080
the individual items manually.

02:44.080 --> 02:48.600
Type one is a configuration file, basically, which just says use that kernel, use that

02:48.600 --> 02:53.680
in already, use that stuff and things like that. Type two is something where the boot

02:53.680 --> 02:59.400
menu items are just binaries, UKIs, as we call them, UKIs. We'll talk about this later

02:59.400 --> 03:05.040
in more detail, but the very short version of that is it's a kernel glued together with

03:05.040 --> 03:09.040
its init.rd and a couple of other things and then turned into one UFI binary. So, basically

03:09.040 --> 03:15.640
takes much of the early state of the OS and makes one thing out of it that can be updated

03:15.640 --> 03:20.560
as one, signed as one, measured as one, loaded as one, which makes it robust and secure and

03:20.560 --> 03:22.960
very nice.

03:22.960 --> 03:28.080
Since Friday or something, System Boot is also like eligible for signing, like Suze actually

03:28.080 --> 03:33.880
did this ahead of time, but now it's officially okay, so you can get it assigned by Shim with

03:33.880 --> 03:38.640
the same infrastructure and things like exactly like you can get grub signed.

03:38.640 --> 03:42.920
System Boot is supposed to be fully automatic, no configuration, right? Like there's no boot

03:42.920 --> 03:47.120
scripts, no nothing. I mean, there are some configuration options, but the design is to

03:47.120 --> 03:52.160
just work and not require configuration, right? It should be just one binary you drop in and

03:52.160 --> 03:55.520
then you have this other directory where you drop in the menu entries and that's supposed

03:55.520 --> 03:59.600
to be it. Of course, there is something like you can configure something in EFI variables

03:59.600 --> 04:03.720
and there is also a configuration file, but that's just for the nerds and it's not supposed

04:03.720 --> 04:05.520
to be the default.

04:05.520 --> 04:10.880
It also has a nice functionality that besides looking at these directories for boot menu

04:10.920 --> 04:14.240
items actually capable of finding Windows installations automatically and Mac OS, which

04:14.240 --> 04:17.640
is kind of nice because you don't have to configure that either, right? Like from the

04:17.640 --> 04:22.640
West you don't need to do anything. SD boot when it boots up, it just looks, oh, is there

04:22.640 --> 04:26.840
also Windows installation that adds the one awake? It's really nice because it's robust

04:26.840 --> 04:30.480
and it has also benefited that if you add Windows after you install Linux it will just

04:30.480 --> 04:33.400
show up.

04:33.400 --> 04:38.000
It also has APIs to user space, which I think is very important, right? Like for us, the

04:38.120 --> 04:44.120
bootloader world and the user space world are not distinct, right? Like they are closely

04:44.120 --> 04:50.640
intertwined for various reasons, like for example, because user space adds and manages

04:50.640 --> 04:55.120
the boot menu entries because from user space you generally might want to be able to select

04:55.120 --> 04:58.680
what's going to be booted next because there are things like automatic boot assessment,

04:58.680 --> 05:02.760
right? That you figure out did this boot actually work? If it worked, booted forever

05:02.760 --> 05:07.960
in the next time, if it didn't work and you've tried a couple of times and give up and revert

05:07.960 --> 05:12.200
to the previous thing. So this always requires communication between the bootloader and the

05:12.200 --> 05:16.560
operating system. So we defined, that's actually another spec where we defined this generically

05:16.560 --> 05:21.240
with CFI variables and things like that. We said this is how bootloader and user space

05:21.240 --> 05:26.480
can communicate and can send each other commands basically. It also does early boot random

05:26.480 --> 05:32.240
seed stuff. This is because traditionally in particularly in VM environments there was

05:32.240 --> 05:37.920
no RDRan, no Virtio RNG things and then Linux really didn't like it. You didn't have to

05:38.120 --> 05:43.840
any entropy in your VM and then certain things just hung and that's super annoying. So we

05:43.840 --> 05:47.560
took a bit of inspiration with something that FreeBSD did which is an early boot random

05:47.560 --> 05:51.360
seed. So basically you have a random seed that is stored in the ESP. You can update it

05:51.360 --> 05:57.320
from user space and it is updated from user space. After we did this, Jason Donfeld who's

05:57.320 --> 06:00.760
also the maintainer of the Linux kernel RNG, we wrote a couple of things that we kind of

06:00.760 --> 06:04.720
confident nowadays that it's really good actually and the good thing is it works everywhere,

06:04.760 --> 06:08.560
at least everywhere where you have EFI and make sure that from earliest moment on you

06:08.560 --> 06:14.200
have really good entropy in addition to whatever the hardware might support you. It has automatic

06:14.200 --> 06:17.160
enrollment of Secure Boot keys which I think is actually kind of nice. It implements like

06:17.160 --> 06:23.280
this tofu concept for Secure Boot enrollment. So if you want to change your certificates,

06:23.280 --> 06:28.400
which I think people should do and particularly in virtualized environments, then you can

06:28.400 --> 06:33.880
just add the keys to the ESP and then on first boot up when we are in setup mode we'll just

06:33.920 --> 06:37.080
enroll the whole thing and then we'll be locked down. So you have the trust on first use.

06:37.080 --> 06:41.880
Like on first time you boot up, nothing is enrolled, nothing is trusted. That's the moment

06:41.880 --> 06:46.920
where everything is trusted. Then you add the keys and from that point on this is how it's

06:46.920 --> 06:52.120
locked down. It also has this thing where again with the drop in deer you can load additional

06:52.120 --> 06:57.080
drivers mostly exist so that people who really want can make the ESP or something like that,

06:57.080 --> 07:02.400
one of the weird file systems. Yeah, already mentioned briefly automatic boot assessment

07:02.440 --> 07:07.240
exists which is like the infrastructure that we count before. We boot something,

07:07.240 --> 07:11.240
how often we have booted it and then from user space can report back if that actually worked

07:11.240 --> 07:17.080
and then I get this kind of robustness thing going. So much about system reboot. Boot control is

07:17.080 --> 07:22.520
one part of the user space part side of things. Boot control is like a command line tool for

07:22.520 --> 07:25.640
installing system reboot. That's kind of its primary job but it can do a couple of other

07:25.680 --> 07:36.000
things as well. It's a use space side. You can tell it to boot on the next boot up to specific

07:36.000 --> 07:40.240
menu entries. You can list the menu entries. You can update the random seed in a couple of

07:40.240 --> 07:44.720
other things. We hope that it actually runs automatically on boot for example to update

07:44.720 --> 07:49.160
the boot loader. It always will do this. To make sure that the copy of the boot loader that is

07:49.160 --> 07:54.680
in slash user is instantly copied also like if it's for some reason the package manager

07:54.720 --> 07:58.920
who ever updated system forgot this it's always kept up to date. So the focus is really that

07:58.920 --> 08:04.240
the boot loader is always up to date. It also resets the random seed by the way like from the

08:04.240 --> 08:09.400
Linux pool so that there's a good chance that the random seed is as good as it could possibly be.

08:09.400 --> 08:16.880
So much about boot control. Next thing system destub. System destub is also UFI binary.

08:16.880 --> 08:22.200
System destub is basically a little UFI binary that you glue in front of a Linux kernel and an

08:22.240 --> 08:27.760
inodori that runs in UFI mode. It does a couple of things before it transitions into the actual

08:27.760 --> 08:33.800
kernel. Why do we have this? It does a couple of things like for example it measures the payload

08:33.800 --> 08:38.480
of what it's going to start. So now you might wonder if it's a UFI binary that a second would

08:38.480 --> 08:42.400
sign and things like that. Why does it need to measure because firmware already measures all

08:42.400 --> 08:48.000
second boot binaries. Very good question if you ask that. The reason we do this is because these

08:48.080 --> 08:53.720
measurements that the firmware does are PCR9 I think and there's a lot of stuff in there and that

08:53.720 --> 08:58.560
basically means it's hard to predict because there's stuff that is controlled by the firmware and

08:58.560 --> 09:04.960
there's stuff that comes from the West and you cannot bind security to a PCR that has sources

09:04.960 --> 09:09.040
that you cannot really control. At least you cannot do this in a predictable way from the West

09:09.040 --> 09:12.680
point of view like figure it already out. Like you cannot predict it on basically the Fedora

09:12.720 --> 09:18.040
bridge systems if you build Fedora. But if we do the measurement separately of the payload of the

09:18.040 --> 09:23.240
UKI we can do that in a separate PCR and then we can predict it because in that PCR there's only

09:23.240 --> 09:27.120
going to be the stuff that the West vendor controls and not also the firmware stuff and then cover

09:27.120 --> 09:34.880
the firmware stuff with something else. UKI is what this becomes when you use system-based stuff

09:34.880 --> 09:40.560
right like the combination of system-based stuff plus a kernel plus an inodori plus kernel

09:40.600 --> 09:45.240
command line plus all these other kind of things that's what we call a UKI unified kernel image.

09:47.840 --> 09:54.400
Yeah it is system-based stuff supports a couple of sidecars right like this UKI model that we try

09:54.400 --> 09:59.000
to want to push distributions towards where you unify everything into one image that you can

09:59.000 --> 10:04.040
sign measure as one update as one and things like that that comes as with problems like inherent

10:04.040 --> 10:10.280
problems like for example the inodori that you built into this you like we expect that vendors

10:10.320 --> 10:14.640
will build those on their build system so they're always going to be the exact same ones on every

10:14.640 --> 10:21.120
installation which is great for many reasons but also horrible for others because depending on the

10:21.120 --> 10:27.040
machines you will need large drivers large firmwares like Nvidia driver for example comes with

10:27.040 --> 10:32.120
multiple hundred megabytes of firmware if you would always build that into all the UKIs that you

10:32.160 --> 10:40.080
as a generic distro vendor ship to your people then yeah this will be really really large

10:40.080 --> 10:46.160
second-build binary as it turns out because of all the measurements booting really large second-build

10:46.160 --> 10:54.200
binaries works but it's kind of slow so I also had this inherent problem that yeah in this model

10:54.200 --> 11:01.360
where UKIs are built on OS vendor build systems the question is open how do you parameterize that

11:01.400 --> 11:06.080
right like because on a simple laptop you do not need to parameterization you can figure out

11:06.080 --> 11:12.040
everything on its own but a learner is supposed to be generic right like you have these installations

11:12.040 --> 11:17.200
that want additional parameters like they want to configure I don't know additional ways like

11:17.200 --> 11:22.360
route passwords so that it can log into the inodori or a boot ice-gazzy device that you

11:22.360 --> 11:26.640
actually want to boot to so these this I mean there's a reason why the kernel command line exists

11:26.760 --> 11:31.160
people want to want to be able to do this in certain setups not a laptop is mentioned that

11:31.160 --> 11:36.960
should not necessarily be necessary but the more you go to the server side they all want to do this

11:36.960 --> 11:45.120
so we came up with a couple of ways how you can have sidecars so that even though while we push

11:45.120 --> 11:48.840
everything to the UKI model where you have a single thing that is self-contained and that has

11:48.840 --> 11:54.880
everything you can put next to it the sidecars that configure individual things like there's one

11:55.000 --> 11:59.680
concept we call system creds I went into this in more detail in my earlier talk but let's just

11:59.680 --> 12:06.520
summarize this at system decreds like the asterisk cred stuff that is that is basically short little

12:06.520 --> 12:12.800
bits of information like like keys like cryptographic keys and passwords and things like that that you

12:12.800 --> 12:20.320
need to operate but they're individual bits and they they are encrypted and locked to TPM so that

12:20.360 --> 12:24.960
you can actually put them in an untrusted environment like for example the ESP where there's no

12:24.960 --> 12:28.880
implicit trust and you have to authenticate it before you use it there's another concept we

12:28.880 --> 12:37.800
called add-on if I add-ons which are basically the same idea as UKI's right you take you make a

12:37.800 --> 12:43.760
PE binary that you can sign can you can measure as one however you leave out the Linux kernel the

12:43.760 --> 12:48.400
inner D in all these kind of stuff and just insert the kernel command line that you would also

12:48.480 --> 12:54.240
add to UKI so you basically have a binary that looks like a binary but doesn't contain any

12:54.240 --> 13:00.440
code however you can authenticate it via the usual Secureboot usual shim APIs like it was a binary

13:00.440 --> 13:07.680
because the UFI just cares that it's a PE thing so these add-ons as we call them are our way how we

13:07.680 --> 13:14.520
can allow people to extend the kernel command line because when a UKI is booted and system D

13:14.560 --> 13:19.400
stop takes over it will look for the side card files find this add that to the kernel command line

13:19.400 --> 13:25.160
and boot on and it's in a fully trusted way because these things need to be authenticated the same

13:25.160 --> 13:31.640
way as everything else is authenticated via the the shim Secureboot stuff I already mentioned this

13:31.640 --> 13:35.360
the system you stop also does measurements right like of the content so that we get this isolated

13:35.360 --> 13:41.960
out so that we have yeah one PCR that only contains the US stuff separate from the stuff where the

13:41.960 --> 13:49.400
firmware is this means duplicate measurement but that's fine at least I think it's fine something

13:49.400 --> 13:53.520
that also does it can read additional kernel command line options from SM bias type 11 I'm

13:53.520 --> 13:58.600
not sure SM bias type 11 well I'm in the boot loader room so I hope you know what that is like

13:58.600 --> 14:03.680
SM bias you you you probably all know is like this descriptive thing that the firmware passes to

14:03.680 --> 14:08.560
the West and there's one object type you can add that's type 11 and it's wonderful because it's just

14:08.600 --> 14:13.320
called vendor strings and you can put we can put anything in there that you want and various

14:13.320 --> 14:17.760
virtualizers like QEMO for example allow you to directly set that from the kernel command line

14:17.760 --> 14:24.800
from the QEMO command line and yeah we use that also to extend the kernel command line right like

14:24.800 --> 14:30.320
so you can just on the QEMO command line sets a string that is just implicitly added to appended

14:30.320 --> 14:35.000
to the kernel command line that is eventually booted we kind of want to push people actually to

14:35.040 --> 14:43.160
the model where they use this more often it's actually an awesome thing and I'm kind of pushing

14:43.160 --> 14:49.680
like trying to push all the cloud renters to adopt this as a generic way to provision data into

14:49.680 --> 14:56.120
VMs but anyway other topic another component is UQify it's a basically it's a Python script that

14:56.120 --> 15:02.040
helps you gluing together UKI so it will take system to stop kernel and I read sign it as one it

15:02.080 --> 15:09.880
will also do the TPM predictions of what will the PCR will look like when it booted the signs

15:09.880 --> 15:14.880
all that with second boot it gives you one EFI binary that you can just drop in the in the

15:14.880 --> 15:19.320
SP and boots up and everything's secure and wonderful then one other tool system be measured

15:19.320 --> 15:22.800
like much of this like all of the what I'm talking about here is actually part of system

15:22.800 --> 15:28.320
me because I'm system the guy system the measure is a tool you probably don't have to interface

15:28.360 --> 15:34.200
with it anymore because UK UK fight does that behind the back for you it's the actual engine

15:34.200 --> 15:41.160
that predicts the PCRs that the UKI will will result in if booted yeah I just want to mention

15:41.160 --> 15:46.640
that exists and yeah there's another tool called common stall as for the traditional distributions

15:46.640 --> 15:55.360
so that they can ship inside of a devian package or RPM a kernel and that this tool it's like

15:55.400 --> 16:03.200
plugin based and things that will copy the kernel into the SP and potentially it built the UKI at

16:03.200 --> 16:06.920
that moment right like because we want to cover a couple of different models like one model where

16:06.920 --> 16:12.080
the UKI is built on build servers of the OS vendor and another model more for the let's say

16:12.080 --> 16:18.000
democratic devian style distributions where they can do this locally so that they can use their own

16:18.000 --> 16:22.720
keys so yeah the kernel and styles are infrastructure to make this happen it's really nice this full

16:22.760 --> 16:27.800
UKI support for example for this like so if you want to do your sign your own stuff you can

16:27.800 --> 16:33.280
trivially do this because you can just use that and drop in your keys and Etsy and then it happens

16:33.280 --> 16:40.000
magically there's something I don't have that much time anymore should we switch to questions

16:40.000 --> 16:48.480
okay this is one of my last slides anyway assistant you part PCR log is one of the most

16:48.800 --> 16:53.680
recent things it's a more complete prediction engine like I already mentioned the system

16:53.680 --> 16:58.480
we measure tool which is able to predict the PCR measurements that a specific UKI will result in

16:58.480 --> 17:02.880
system dPCR log is supposed to cover all the other PCRs that they are that are firmware stuff and

17:02.880 --> 17:09.200
things like that system dPCR log deals with like all the other operating systems generally have this

17:09.200 --> 17:13.520
like Windows Chrome OS Android they nowadays have all these predictions and well depending if they

17:13.520 --> 17:19.040
actually care about TPMs or have some other second-hand clif thing doesn't really yeah it's all a

17:19.040 --> 17:23.360
little bit different rare but the ones that care about TPMs generally have this prediction engine

17:23.360 --> 17:28.960
where they just look at all the different things that happened during boot analyze the UEFI event

17:28.960 --> 17:34.720
log and try to calculate a TPM policy to lock disk secrets to our version of the tool is called

17:34.720 --> 17:39.040
system dPCR log it's supposed to be modular so you have again drop-in directories where

17:39.760 --> 17:45.920
different components of the west that will show up in the boot pass like the UKI boot loader shim

17:46.400 --> 17:52.080
and things like that plus components that are not even necessarily under the OS control but

17:52.080 --> 17:58.160
our firmware stuff can be described with little jason fragments to just say the measurements that

17:58.160 --> 18:02.880
I expected for each of these components there is a concept of alternatives because usually you

18:02.880 --> 18:07.600
don't want to lock your secrets to exactly one kernel or one boot loader version because you

18:07.600 --> 18:11.200
want to update them and then if that update fails you want to be able to go back and things like

18:11.200 --> 18:16.480
that so usually for each component you want alternatives also very well supported and

18:16.480 --> 18:25.440
system pcr log takes all this information explodes what all the the the pcr values could be in the

18:25.440 --> 18:32.080
end and then generates a TPM policy out of this that it stores in a TPM and v index and that then

18:32.560 --> 18:39.280
our disk encryption stuff can reference as an access policy long story short this covers like this

18:39.280 --> 18:47.600
basically locks down the OS against the firmware versions with all the measurements that firmware

18:47.600 --> 18:52.960
does that are not necessarily predictable for the OS because yeah the firmware people suck

18:54.720 --> 18:59.600
there's also like support of course that if we cannot predict firmware measurements we have some

18:59.920 --> 19:05.520
some logic there to deal with that so if you do all the combination of this then you get a super

19:05.520 --> 19:10.800
secure system and everything's great my recommendation is do this but these components are relatively

19:10.800 --> 19:17.360
independent of each other and as the things happen and different distributions started adopting

19:17.360 --> 19:23.440
different parts of this earlier like for example Susan nowadays adopted system to boot already but

19:23.920 --> 19:29.280
rel for example for the confidential computing stuff already adopted system to stop and they all

19:29.280 --> 19:36.160
pick different parts of this okay my time is over so this is my my summary here if you use all in

19:36.160 --> 19:40.080
combination everything works great but if you pick what you want you don't have to pick anything at

19:40.080 --> 19:44.720
all if you don't want but if you use in combination you get this full boot chain stuff everything's

19:44.720 --> 19:48.800
secure and relatively robust because all the update cycles are around individual files you have

19:49.440 --> 19:54.080
ways how to parameterize it and extend it and yeah there are a couple of more slides we don't have

19:54.080 --> 19:57.200
to cover them but let's move to questions

20:02.720 --> 20:05.200
we have five minutes for questions

20:18.880 --> 20:26.800
so yeah so the question was regarding whether the system D stop stuff works outside of UFI

20:26.800 --> 20:32.240
environment the answer is no like it uses UFI APIs and it's just UFI all of the what I was talking

20:32.240 --> 20:39.280
about here is more or less model after UFI system to boot system you stop absolutely only UFI but

20:39.280 --> 20:44.320
the further you go with the with the like carline store for example that has nothing to do with UFI

20:44.320 --> 20:46.640
like unless you actually use the parts with

20:56.400 --> 20:59.600
well I mean I know it isn't there I think there are

21:00.720 --> 21:01.120
sorry

21:06.720 --> 21:10.480
so my my suggestion would that it would be a well just just

21:10.560 --> 21:12.320
adopt UFI and avoid all this mess

21:19.520 --> 21:24.640
I don't know I think everything has problems UFI have some my general like I mean I get this all

21:24.640 --> 21:28.800
the time like this thing like oh we have to stick to grub because it supports all the non-UFI world

21:28.800 --> 21:34.800
and I say sure my recommendation would always be if you look at this stuff like there are certain

21:34.800 --> 21:39.200
like philosophical ideas built into this right like you have a drop-in directory you put on

21:39.280 --> 21:43.360
type one type this kind of stuff is entirely generic and there's like type two is not generic

21:43.360 --> 21:51.360
but type one is totally generic right like so my recommendation for it for that by the way is

21:51.360 --> 21:57.280
just use UK eyes as they are right like they they are a PE wrapper like it's a really simple

21:57.280 --> 22:01.600
format actually PE right like and it's just an envelope that carries sections for you

22:02.320 --> 22:08.160
if I think grub now this can parse that too cannot see so if grub can parse it you stupid

22:09.520 --> 22:14.160
bootloader should have no problem at all parsing it and then you suddenly have a universal format

22:14.160 --> 22:18.320
and you boot windows style PE binaries even though it's not Windows but it's I think it's

22:18.320 --> 22:24.320
it's the way to go like model it after UFI UFI has its words everything has its words but I think

22:24.320 --> 22:28.480
it's way better than than the stuff that came before for it and just yeah so my recommendation

22:28.480 --> 22:35.600
would always be if you can't do this stuff at least consider the ideas behind her a bit behind

22:35.600 --> 22:39.920
that and like drop-in directories and sing like single file updates and these kind of things and

22:39.920 --> 22:44.400
then try to model it afterwards and the more you can take over the easier will be your life because

22:44.400 --> 22:50.160
this probably will end up in all the distributions and the less differences there are the easier it

22:50.160 --> 22:56.000
is right so I think even grub supports type one at least on type two or something like this

23:06.480 --> 23:10.000
so

23:12.720 --> 23:18.720
so we're on purpose we wrote the spec as a generic thing both of like of all like there's a spec about

23:18.720 --> 23:22.960
yuki yuki i there's a spec about the bootloader spec there's a spec about the bootloader interface

23:22.960 --> 23:27.680
like where how how we do because we will always clear to us that not everybody's gonna do you if I

23:27.680 --> 23:31.760
so uh yeah we did that as a nice service to the community but the other people have to figure out

23:31.760 --> 23:36.080
if they actually want to adopt this it took them long enough to not adopt it so far but now things

23:36.080 --> 23:41.360
are changing if you want to not do you if I my recommendation would be let's yeah look at the

23:41.360 --> 23:46.880
specs and I'm sure like adds to shit to it like it's a spec senders like there's a getup issue

23:46.880 --> 23:50.960
thing and if you need something else then send an issue and like if it makes any sense at all

23:52.000 --> 23:57.520
we have no problem with adding that to specs very short yeah very short so all these projects are

23:58.240 --> 23:59.520
system

24:03.200 --> 24:06.720
well it depends like the specific age like so the question was if all these

24:07.600 --> 24:13.040
projects are under the system the umbrella so that depends right like so we we created

24:13.040 --> 24:18.960
like a group which you call the uapi group where we try to standardize these things right this is to

24:18.960 --> 24:25.680
a large degree admittedly system the adjacent people right like who like adopted a way of

24:25.680 --> 24:30.880
thinking like we do it but there's nothing specific in it and the specifications are on purpose

24:30.880 --> 24:35.520
written independently of like the word system B doesn't show up in this but like it might show up in

24:35.520 --> 24:42.960
the things but it's that's not the point of it right like so the code right like that's a

24:42.960 --> 24:47.200
different story right like we this is in the system tree right like this is developed like

24:47.200 --> 24:51.520
unix was developed I guess you have like this get repository and you have all these components on this

24:52.080 --> 24:55.680
the fact that it's in there doesn't mean you have to use them you can mix and match them like is

24:55.680 --> 25:00.320
mentioned like different distribution pick different things up like opens us it at sd boot first and

25:00.320 --> 25:06.320
not sd stop and then sd the right hand was confidential computing take sd stop but it is

25:06.320 --> 25:10.960
not interested in sd boot because they didn't want a boot load at all so yeah this is how it should

25:10.960 --> 25:15.200
be right yeah we'll give you the buffet pick what you want don't pick what you don't want I don't care

25:15.840 --> 25:20.880
but yeah this is ultimately it's very Linux focused various ufi focused very systemally focused but

25:21.520 --> 25:25.840
I think look at the specs maybe you can reuse something but yeah

25:39.280 --> 25:45.840
yeah I think even the uk i stuff like because we don't like you know how the firmware jumps into

25:45.840 --> 25:50.800
your uk i that is not defined by us that is simply an artifact of the fact that's a pe file right

25:50.800 --> 25:57.120
like so you can jump like any find any other way to jump into it you can even look for the Linux

25:57.120 --> 26:03.120
kernel in it right like that's what grub does right so it looks for the linux pe section in it ignores

26:03.120 --> 26:08.880
all the other stuff and if it wants to and then does the classic boot protocol that does not

26:08.880 --> 26:20.640
do anything like this okay but anyway yeah thank you

26:20.800 --> 26:21.700
you

