WEBVTT

00:00.000 --> 00:11.640
I'm working for the 3APA development team and I'm also the maintainer for Kebras, for

00:11.640 --> 00:14.160
Fedora, CentOS and REL.

00:14.160 --> 00:22.160
And today I'll be talking about, well, Kebras, 3APA and the Bronzebead vulnerability.

00:22.160 --> 00:24.880
So a few general words about Kebras.

00:24.880 --> 00:32.320
So it's authentication protocol relying on cryptographic, symmetry cryptography.

00:32.320 --> 00:36.720
And it's like 36 years old now.

00:36.720 --> 00:45.760
It can be described, I guess, as a very early implementation of a single sign-on principle.

00:45.760 --> 00:54.760
If I can run a quick poll, as who has been maintaining a service using Kebras for authentication,

00:54.760 --> 00:55.760
here.

00:55.760 --> 01:00.400
Okay, so a few words.

01:00.400 --> 01:05.600
And have you heard about the Bronzebead exploit for Kebras?

01:05.600 --> 01:06.600
No, okay.

01:06.600 --> 01:11.480
That's actually normal because it's something from the AD world, actually.

01:11.480 --> 01:19.480
So something that is often gets in the way of understanding things about Kebras is the

01:19.480 --> 01:28.360
terminology, like this old vocabulary like, so, a ticket, key tab, KDC, authentication,

01:28.360 --> 01:31.000
S-Rack, things like that.

01:31.000 --> 01:38.520
So I made my best in this presentation to try to use as generic terms as possible so

01:38.520 --> 01:42.480
you can really get the main idea.

01:42.480 --> 01:46.520
So basically the three terms I'm going to use in this presentation that are specifically

01:46.520 --> 01:53.440
to Kebras is things like ticket, key distribution center, and ticket granting ticket.

01:53.440 --> 01:59.080
To just give you a gross idea of how Kebras works, you run authentication once against

01:59.080 --> 02:03.200
the KDC, this is the Kebras server, basically.

02:03.200 --> 02:10.720
It responds with a ticket, especially in this case a ticket granting ticket, so a TGT.

02:10.720 --> 02:15.120
And then it uses this TGT to request tickets to other services, basically.

02:15.120 --> 02:21.280
So you can authenticate in all the services in the organization.

02:21.280 --> 02:27.080
So that's like the usual use case for Kebras, but in this talk I'll be mainly speaking about

02:27.080 --> 02:33.680
an extension to this core part of the protocol, which is the MSS4U extension.

02:33.680 --> 02:42.040
So it responds to a common use case that you are facing.

02:42.040 --> 02:47.280
Let's imagine you have a web application and this application has to access some backend

02:47.280 --> 02:52.280
services like an SQL database or a distributed storage system.

02:52.280 --> 02:58.520
And very often you have access control happening on this backend service, so you cannot access

02:58.520 --> 03:05.320
the user-related data that you cannot access using just the identity of the front-end service.

03:05.320 --> 03:10.920
So you need access permission specifically to the user.

03:10.920 --> 03:18.000
So what you want to do in practice is impersonate this user to actually access the resources

03:18.000 --> 03:19.560
they have access to.

03:19.560 --> 03:27.520
So the historical way we are dealing with that is that problem is by doing TGT forwarding,

03:27.520 --> 03:34.280
which is basically just you take this TGT, so this initial ticket, you send it to the

03:34.280 --> 03:39.240
front-end service and then this front-end service can just reuse it to request other

03:39.240 --> 03:40.240
tickets in your name.

03:40.240 --> 03:46.720
But the issue here is there's basically no granularity in the permission you are granting

03:46.720 --> 03:52.120
actually granting to the front-end service because it can just request ticket to any

03:52.120 --> 03:53.120
other service.

03:53.120 --> 03:58.360
So it's definitely something that had to be improved.

03:58.360 --> 04:03.720
So Microsoft actually designed this extension, so S4U.

04:03.720 --> 04:09.200
It adds two new mechanisms to the protocol.

04:09.200 --> 04:15.840
The first one is constraint delegation, also called S4U to proxy.

04:15.840 --> 04:22.400
What it does basically is so you have the user, this front-end service, I'll be calling

04:22.400 --> 04:29.160
it the proxy service and the target service like the backend, SQL database, distributed

04:30.160 --> 04:33.400
network volumes, something like that.

04:33.400 --> 04:41.480
And so in IPA we provide a tool to configure some delegation rules saying okay this web

04:41.480 --> 04:47.640
application has the permission to impersonate user for this backend service.

04:47.640 --> 04:51.080
You need specific permission to do that of course.

04:51.080 --> 04:54.600
And so I'll be explaining that with the diagram.

04:54.600 --> 04:56.360
So here you have three agents.

04:56.360 --> 05:02.280
You have the user, the proxy service, so the front-end service, the target service,

05:02.280 --> 05:05.480
and the free IPA KDC.

05:05.480 --> 05:12.240
So and you have each of them as a key except the KDC that has the key of everyone.

05:12.240 --> 05:17.960
So what we'll be doing when we're doing constraint delegation is first the user is going to use

05:18.920 --> 05:25.600
the TGT to run a request against the proxy service.

05:25.600 --> 05:30.800
Now the proxy service to process this request it has to access the target service as the

05:30.800 --> 05:40.600
user so what it will do is run an S4U to proxy request providing both its own TGT and what's

05:40.600 --> 05:42.280
called the evidence ticket.

05:42.280 --> 05:47.600
So the ticket the user provided to this proxy service.

05:48.240 --> 05:54.240
So free IPA will process the request so there is a condition for this request to succeed.

05:54.240 --> 06:01.720
You see in a moment why we have this condition is to have one of the flag in the ticket,

06:01.720 --> 06:05.960
the forwardable flag set to 1.

06:05.960 --> 06:11.520
And if that's the case it's going to accept the request so send back to the proxy service

06:11.520 --> 06:16.280
the ticket for the user to the target service and then the proxy service can reuse this

06:16.280 --> 06:23.640
ticket to run a request as the user against this service and the request.

06:23.640 --> 06:25.160
So it was constraint delegation.

06:25.160 --> 06:32.760
Now the other mechanism in this extension is called the proxy transition or S4U to self.

06:32.760 --> 06:40.720
It's meant to solve a different problem basically.

06:41.160 --> 06:46.720
The way it's described by Microsoft is when you have a case where you have a service which

06:46.720 --> 06:55.800
is not using K-Bros as the authentication method in front of a face by the user to authenticate.

06:55.800 --> 07:05.240
You can use that to obtain a ticket for this user to the Flotent service.

07:05.240 --> 07:09.720
So you can still integrate with some local services that are requiring a K-Bros ticket

07:09.720 --> 07:11.040
to work and something like that.

07:11.040 --> 07:17.720
And it's also a way to obtain some group membership information that are contained in the ticket.

07:17.720 --> 07:20.560
I'll come back to that in a moment.

07:20.560 --> 07:23.040
So how it works basically.

07:23.040 --> 07:25.720
So it's called proxy service.

07:25.720 --> 07:32.440
I wrote that for the courier and 3D of the diagrams but it's not necessarily proxy services

07:32.440 --> 07:35.320
can be any service actually.

07:35.320 --> 07:46.240
So it runs an S4U to self request for user U using its own TGT.

07:46.240 --> 07:52.840
And then so we come back to this forwardable flag thingy.

07:52.840 --> 08:00.640
So at this point there is an attribute of the proxy service in the 3API database and

08:00.640 --> 08:06.760
according to the value of this attribute the forwardable flag will be set or it won't

08:06.760 --> 08:07.760
be.

08:07.760 --> 08:10.800
So if it's false you don't get the flag.

08:10.800 --> 08:20.200
If it's true you get the flag sector 1 and then you send this ticket back to the service.

08:20.200 --> 08:25.600
So that's where the Bronze bit buildability gets in.

08:25.600 --> 08:35.040
So something you might anticipate while looking at that is if you have a service that has

08:35.040 --> 08:42.560
the permission to request this forwardable evidence ticket and this service also has

08:42.560 --> 08:47.160
a delegation rule with another service.

08:47.160 --> 08:52.640
It means the service is basically able to request an evidence ticket for any user and

08:52.640 --> 08:58.720
use it against the target service.

08:58.720 --> 09:05.160
So that's something that is not recommended to apply usually but if you paid attention

09:05.160 --> 09:13.240
in my previous, so I'm going to show you that.

09:13.240 --> 09:19.000
So we have a compromised proxy service here.

09:19.000 --> 09:22.360
It has a delegation rule to the target service.

09:22.360 --> 09:26.040
So first it does an S42 self request.

09:26.040 --> 09:31.920
The proxy service does not have this rule that allows it to get a forwardable evidence

09:31.920 --> 09:34.480
ticket.

09:34.480 --> 09:38.760
So that's what you get, a non-forwardable evidence ticket.

09:38.760 --> 09:45.080
The issue is here you have this part in the ticket that is encrypted using the key of the

09:45.080 --> 09:46.080
proxy service.

09:46.080 --> 09:51.320
So actually once it's received the attacker could just decrypt this part, flip the forwardable

09:51.320 --> 10:00.440
flag and then re-encrypt it and send it to the KDC again as a S42 proxy with this modify

10:00.440 --> 10:06.320
evidence ticket and then the KDC will check the forwardable flag, it sets so then it's

10:06.320 --> 10:12.720
allowed and then the attacker gets a ticket to the target service as a user.

10:12.720 --> 10:19.000
As you can see the user it doesn't do anything in this whole process so it can do so with

10:19.000 --> 10:24.280
just any user including a user that has administration privileges on this target service.

10:24.280 --> 10:25.280
Yes?

10:25.280 --> 10:34.280
I understand that the reason why the proxy service is able to change the forwardable flag

10:34.280 --> 10:40.480
is because it's encrypted using the key of the proxy service.

10:40.480 --> 10:45.760
But is that also the same reason why it's able to impersonate any user?

10:45.760 --> 10:51.480
It's able to impersonate any user because there's a delegation rule between the proxy

10:51.480 --> 10:54.720
service and the target service.

10:54.720 --> 11:00.480
But it does not have this specific property that allows it to request a forwardable evidence

11:00.480 --> 11:03.240
ticket.

11:03.240 --> 11:04.840
So this should not happen normally.

11:04.840 --> 11:06.880
If a forwardable flag was properly...

11:06.880 --> 11:15.280
The main important thing here is for you to sell this flag.

11:15.280 --> 11:18.400
I want the ticket to be held user to myself.

11:18.400 --> 11:26.720
It was deemed to be innocent because it's for yourself not for anyone else.

11:26.720 --> 11:31.080
And it's not forwardable so you cannot use it as evidence for anyone else.

11:31.080 --> 11:38.080
The problem is that not only it can decrease that area and change anything, the area is

11:38.080 --> 11:41.080
specifically not checked soon.

11:41.080 --> 11:44.080
So you cannot verify that they...

11:44.080 --> 11:48.200
Yeah, the whole problem is this area is not protected.

11:48.200 --> 11:49.200
It's protected by the key...

11:49.200 --> 11:53.360
I mean, it's encrypted using the key of the proxy service but that's all.

11:53.360 --> 11:54.360
The proxy service cannot...

11:54.360 --> 12:00.640
What I don't understand is how the proxy server in this case is able to change that

12:00.640 --> 12:05.200
plan but you also said it's able to impersonate any user.

12:05.200 --> 12:09.200
Because the S42 self works for any user.

12:09.200 --> 12:10.200
It's not supposed to...

12:10.200 --> 12:14.800
You're not supposed to get a forwardable evidence ticket for any user if you don't have this

12:14.800 --> 12:17.800
specific permission.

12:17.800 --> 12:18.800
So...

12:18.800 --> 12:19.920
Time flies.

12:19.920 --> 12:24.920
So the issue we had in the APS case, if there was just...

12:24.920 --> 12:30.440
There are a lot of reproducers for this issue on AD but there is actually none for IPA for

12:30.440 --> 12:33.440
multiple reasons mainly because there are...

12:33.440 --> 12:36.040
It was mainly an issue of encryption types.

12:36.040 --> 12:39.680
There are multiple encryption types for Keablos.

12:39.680 --> 12:45.840
And our default encryption type basically on IPA is...

12:45.840 --> 12:51.400
HMACSHA2 encryption types and they are not implemented by AD right now.

12:51.400 --> 12:53.280
So that's why it was...

12:53.280 --> 12:56.280
We had to implement a reproducer ourselves.

12:56.280 --> 13:02.280
Actually, there's a full request here if you want to have a look.

13:02.280 --> 13:08.000
So the solution that was designed for that by Microsoft is something called the ticket

13:08.000 --> 13:09.000
signature.

13:09.000 --> 13:13.040
I'll skip some details.

13:13.120 --> 13:20.560
Basically, there are a lot of things in the Keablos tickets and there is also another extension

13:20.560 --> 13:21.560
designed by Microsoft.

13:21.560 --> 13:23.280
It's called MSPAC.

13:23.280 --> 13:28.040
It stands for Privilege Attribute Certificate.

13:28.040 --> 13:29.040
So it's another...

13:29.040 --> 13:35.480
Basically a piece of metadata in the ticket that contains various kind of information

13:35.480 --> 13:41.640
and it's signed by multiple keys as it's a certificate.

13:41.640 --> 13:42.640
And what is...

13:42.640 --> 13:45.800
For this signature, it's basically...

13:45.800 --> 13:49.600
While it protects the encrypted part including the forwardable flag.

13:49.600 --> 13:56.600
So that's the response to this attack because here if the attacker tries to flip the forwardable,

13:56.600 --> 14:02.240
the flag is still possible because it's only encrypted with proxy service key.

14:02.240 --> 14:10.360
So the flag is flipped, re-encrypted, send as an SOU to proxy request.

14:10.560 --> 14:17.480
But here before actually checking the delegation rules, it will recompute the signature compared

14:17.480 --> 14:19.480
with the one saved in the pack.

14:19.480 --> 14:24.880
If it's not matching, it will just reject the request right away.

14:24.880 --> 14:35.840
But we had an issue for CentOS and REL8 because there we are using a MATKWAS version 1.18

14:35.840 --> 14:41.800
and this version handles generation of the pack in a completely different way.

14:41.800 --> 14:52.160
There was a major rework in MATKWAS 1.20 and because we have some ABA compatibility rules,

14:52.160 --> 14:59.760
we cannot just backport this full fix on the CentOS and REL8 version.

15:00.680 --> 15:06.320
This is basically all we had in the API for KDB plugins.

15:06.320 --> 15:08.320
So there's nothing...

15:08.320 --> 15:13.120
We have no access to the encrypted part basically so that's why we could not implement this fix.

15:13.120 --> 15:18.120
But the approach we took was different so if we cannot protect this flag,

15:18.120 --> 15:22.120
maybe we can implement something to actually detect this attack when it happens.

15:22.480 --> 15:32.480
So there are a lot of information in the pack actually including a list of security identifiers.

15:32.480 --> 15:38.480
So it's something that is specific to the AD world but we have some support for it in IPA.

15:38.480 --> 15:42.480
And there are especially two SIDs that are interesting in this case.

15:42.480 --> 15:50.480
This two SID basically the first one indicates a user was pre-authenticated to use the KABLOS term

15:50.840 --> 15:58.840
in the normal way or there's another one indicating that the evidence ticket was obtained using SOU2.

15:58.840 --> 16:03.840
So that's actually something we can use in this case to...

16:03.840 --> 16:07.840
So we start the same way.

16:07.840 --> 16:11.840
So the attacker sets the forwardable flag to 1.

16:11.840 --> 16:16.840
Then it sends the SOU2 proxy request with the modify evidence ticket.

16:16.840 --> 16:21.840
And then what we do is...

16:21.840 --> 16:35.840
So we do the same, we check the forwardable flag and we check the SOU2 self rule allowing to set the forwardable flag also.

16:35.840 --> 16:42.840
And we check what's the SID indicating the way the evidence ticket was obtained.

16:43.840 --> 16:50.840
And if we see that the SID is not matching the value of the forwardable flag then we can just say

16:50.840 --> 16:58.840
this is actually a bronze bit attack happening so we can reject the attack the issue is...

16:58.840 --> 17:05.840
I said the pack was like a certificate so it's supposed to be protected but it's actually not for K.

17:05.840 --> 17:08.840
It was also compromised basically at some point.

17:08.840 --> 17:14.840
So there was a way for an attacker to actually modify the content of the pack including the SID.

17:14.840 --> 17:19.840
This is this CV, it's basically a pack spoofing attack.

17:19.840 --> 17:32.840
It was based on basically how the content was signed because to give some details the initial signature is done by the proxy service key

17:32.840 --> 17:38.840
and then this signature is signed by the KDC but the problem is since it's just signing a very small part of the pack

17:38.840 --> 17:44.840
you can do some spoofing etc. to eventually modify the actual content of the pack.

17:44.840 --> 17:50.840
This was fixed by Microsoft also by adding a new signature in the pack.

17:50.840 --> 18:00.840
So this time it's called the extended KDC signature and this time the KDC uses its key to sign the full content of the pack

18:00.840 --> 18:03.840
so it removes this vulnerability.

18:03.840 --> 18:10.840
So now it's basically the same approach except when we reach that point we check the extended signature before

18:10.840 --> 18:15.840
and then we do this check I mentioned earlier.

18:15.840 --> 18:19.840
So, conclusion already.

18:19.840 --> 18:25.840
So yeah, I thought this is an interesting, like typical example of the kind of tribulation you're facing

18:25.840 --> 18:33.840
where you're doing long term support especially for security rated protocols

18:33.840 --> 18:38.840
and it's also an occasion to talk about this as for your extension

18:38.840 --> 18:46.840
because that's something that it's a good example of a gradual shift.

18:46.840 --> 18:54.840
So, the next cabros is currently doing from the authentication only protocol to some protocol

18:54.840 --> 18:57.840
also now providing some authorization information.

18:57.840 --> 19:04.840
I already described that with this list of seeds but there are actually a lot of stuff

19:04.840 --> 19:11.840
and there are plans to start using that in the future in the IPA and open source projects.

19:11.840 --> 19:15.840
So yeah, that's all.

19:15.840 --> 19:19.840
Okay, so I was quick about that thought.

19:19.840 --> 19:25.840
So there are some reference interesting articles, pointers to multiple pull requests,

19:25.840 --> 19:29.840
backpots to centers, things like that if you're interested.

19:29.840 --> 19:38.840
Now if you have questions.

19:38.840 --> 19:42.840
How long does it take?

19:42.840 --> 19:47.840
Well, the patch actually it's relatively simple.

19:47.840 --> 19:56.840
There has been some hiccups in its deployment but the main thing is that you have all this kind of dependency

19:56.840 --> 20:03.840
like we have information we want in the pack but the issue is since this in 2022

20:03.840 --> 20:10.840
the pack did not be considered trustworthy anymore because you can actually spoof its contents.

20:10.840 --> 20:15.840
So first you have to backport the support for this extended caddysys in nature

20:15.840 --> 20:26.840
to be able to actually trust the content of the pack and then you implement this actual detection method.

20:26.840 --> 20:33.840
It took roughly a half a year to actually design the scheme on detecting traces.

20:33.840 --> 20:42.840
It's literally detecting some evidence that is left by a hacker which is not supposed to be there

20:42.840 --> 20:51.840
but finding what you can trust from evidence took like a half a year in overall drawing board design.

20:51.840 --> 21:00.840
So it's not really written in code and then backport in this extended checksum took another problem

21:00.840 --> 21:11.840
because now NIA IPA running on Kerperos 120 becomes suddenly incompatible with 118

21:11.840 --> 21:20.840
because of the re-factors that was like checksum missing and then another authorization data is missing

21:20.840 --> 21:23.840
and then all the walls and the wall reverberation doesn't understand.

21:23.840 --> 21:31.840
So there's a lot of work not technical but more investigative.

21:31.840 --> 21:35.840
You can definitely make a movie about this.

21:35.840 --> 21:37.840
And some politics against.

21:37.840 --> 21:46.840
And also politics of course, yeah, because we have to think also even for all the versions.

21:46.840 --> 21:48.840
Okay, so time's up.

21:48.840 --> 21:50.840
Thank you.

