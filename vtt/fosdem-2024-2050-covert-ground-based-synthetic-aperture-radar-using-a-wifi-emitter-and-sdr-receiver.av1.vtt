WEBVTT

00:00.000 --> 00:10.240
I'd like to show you a little bit how I'm using software

00:10.240 --> 00:13.080
refund radio, of course, running radio,

00:13.080 --> 00:16.120
for developing a covered ground-based synthetic

00:16.120 --> 00:20.000
aperture radar using Wi-Fi as a radio frequency source.

00:20.000 --> 00:23.680
So just to see what it looks like by the end of a presentation,

00:23.680 --> 00:28.560
this was done with some funding, or leftover project

00:28.560 --> 00:30.640
funding, so I put the affiliation of the lab.

00:30.640 --> 00:32.680
Actually, it's a hobby project, but I

00:32.680 --> 00:35.760
had some leftover contract money to develop this thing

00:35.760 --> 00:38.320
that I wanted to show with you.

00:38.320 --> 00:43.280
So what is ground-based synthetic aperture radar?

00:43.280 --> 00:46.680
So let's start with what is the objective of what

00:46.680 --> 00:47.440
we want to look at.

00:47.440 --> 00:49.360
When you're looking at a radar, you

00:49.360 --> 00:51.680
have a remote sensing measurement technique

00:51.680 --> 00:54.840
where you want to do some radio frequency detection

00:54.840 --> 00:55.560
and ranging.

00:55.560 --> 00:59.040
So you would like to see targets.

00:59.040 --> 01:01.680
And in the case of GBSAR, it's mostly

01:01.680 --> 01:06.120
used for small, minute variation of distances.

01:06.120 --> 01:09.920
So in this example here, which I was lucky enough

01:09.920 --> 01:12.560
to visit Professor Sato's laboratory in Sendai,

01:12.560 --> 01:15.600
and that's one of his setup where he's looking at lens slides.

01:15.600 --> 01:17.720
And when you're looking at lens sighting,

01:17.720 --> 01:19.600
ground-based synthetic aperture radar,

01:19.600 --> 01:21.680
you're using the range information

01:21.680 --> 01:24.880
to detect the distance from the SAR measurements

01:24.880 --> 01:26.960
and the lateral resolution is given

01:26.960 --> 01:30.160
by the spatial diversity of moving your antennas.

01:30.160 --> 01:33.200
So as opposed to it's an active measurement technique.

01:33.200 --> 01:35.320
So as opposed to passive remote sensing

01:35.320 --> 01:39.960
like optical measurements, photogrammetry, optical satellite

01:39.960 --> 01:42.520
imagery, you're not sensitive to lighting conditions

01:42.520 --> 01:45.360
or day, night, or cloud cover.

01:45.360 --> 01:48.080
And it's an active measurement technique.

01:48.080 --> 01:51.080
So you will generate the signal that is returned.

01:51.080 --> 01:55.480
But unlike laser detection and ranging,

01:55.480 --> 01:57.200
you're not sensitive to weather conditions.

01:57.200 --> 01:59.040
So radar is all weather conditions.

01:59.040 --> 02:00.760
So that's beauty.

02:00.760 --> 02:03.320
Now you've got some commercial systems.

02:03.320 --> 02:04.960
I just took some of the European ones

02:04.960 --> 02:09.560
I'm familiar with, Italian IDF, Dutch Metasensing.

02:09.560 --> 02:12.160
I don't claim to be competing with these guys.

02:12.160 --> 02:14.760
These guys have 100K units.

02:14.760 --> 02:17.560
I'm not going to show you a 5K device that's compete.

02:17.560 --> 02:20.280
I see this as an educational project

02:20.280 --> 02:22.400
to try to get familiar with the concept of SAR

02:22.400 --> 02:24.200
and trying to do this.

02:24.200 --> 02:26.360
Well, I wouldn't say legally, but at least not get caught

02:26.360 --> 02:28.880
by using Wi-Fi signals.

02:28.880 --> 02:31.280
So what are the requirements for radar?

02:31.280 --> 02:33.960
Radar, on the one hand, you want to detect a distance.

02:33.960 --> 02:36.640
So distance is inverse of bandwidth.

02:36.640 --> 02:38.600
So you need a large bandwidth.

02:38.600 --> 02:42.000
So you need some wide bandwidth signal,

02:42.000 --> 02:43.960
and Wi-Fi is very good for this.

02:43.960 --> 02:47.000
Now there is no reason why you would get more bandwidth

02:47.000 --> 02:47.880
with higher frequency.

02:47.880 --> 02:49.360
But it's a fact that technologically

02:49.360 --> 02:50.960
it's easier to get more bandwidth

02:50.960 --> 02:53.280
with the higher frequency.

02:53.280 --> 02:56.080
And so I moved to 5.8GHz Wi-Fi because you've

02:56.080 --> 02:57.960
got 200MHz bandwidth.

02:57.960 --> 03:01.320
So that's kind of nice because your range resolution C

03:01.320 --> 03:04.000
over 2B is going to be something like submeter.

03:04.000 --> 03:06.960
So you can separate by range, two pixels

03:06.960 --> 03:08.800
separated by less than a meter.

03:08.800 --> 03:11.720
And then also because I want a mechanical setup,

03:11.720 --> 03:14.400
I showed you in the introduction we want spatial diversity.

03:14.400 --> 03:16.360
So we're going to have some moving stuff.

03:16.360 --> 03:18.360
And the higher frequency, the smaller the wavelength,

03:18.360 --> 03:20.080
the smaller the wavelength, the smaller the antenna.

03:20.080 --> 03:22.040
So it's going to be easier mechanically

03:22.040 --> 03:24.280
to move some smaller antenna, hence the increase

03:24.280 --> 03:25.840
in higher frequency.

03:25.840 --> 03:28.520
And also the rail, along which you're

03:28.520 --> 03:31.240
moving to have the spatial diversity,

03:31.240 --> 03:34.600
the azimuth resolution is given by the wavelength

03:34.600 --> 03:35.360
over length.

03:35.360 --> 03:37.880
So if you're higher in higher frequency,

03:37.880 --> 03:40.720
your range distance will be smaller,

03:40.720 --> 03:42.120
and the rail will be a bit cheaper.

03:42.120 --> 03:46.400
So these are reasons for moving to higher frequency.

03:46.400 --> 03:51.000
So the SAR measurement tells you

03:51.000 --> 03:52.960
that you're doing spatial domain,

03:52.960 --> 03:53.960
which is doing time domain.

03:53.960 --> 03:56.800
So you're moving the steps, you're moving the antenna.

03:56.800 --> 03:58.680
And I'll show you in the next slide

03:58.680 --> 04:01.360
that actually azimuth compression isn't for a transform.

04:01.360 --> 04:04.320
So it's really your adding phase each time you're

04:04.320 --> 04:05.240
moving the antennas.

04:05.240 --> 04:08.360
And if you want to match Shannon's sampling theorem,

04:08.360 --> 04:14.080
you show that you must have half distance, half wavelength,

04:14.080 --> 04:16.280
is the same as half the sampling frequency.

04:16.280 --> 04:19.560
And when the transmitter and the receiver are collocated,

04:19.560 --> 04:20.960
actually because they're both moving,

04:20.960 --> 04:22.560
it's not lambda over 2, but lambda over 4,

04:22.560 --> 04:24.760
because you're moving both the transmitter and receiver.

04:24.760 --> 04:28.000
So you need a system that allows you to move your setup

04:28.000 --> 04:30.400
by quarter-weaving steps.

04:30.400 --> 04:34.680
And because I want to have as little sliding contact,

04:34.680 --> 04:36.440
all these electrical stuff that's moving,

04:36.440 --> 04:37.520
they have poor contact.

04:37.520 --> 04:39.720
So I wanted to put everything on the moving part.

04:39.720 --> 04:43.120
So everything that is moving is the Wi-Fi dongle

04:43.120 --> 04:46.560
as a transmitter, a B210SDR as receiver.

04:46.560 --> 04:48.960
But an important story here is you

04:48.960 --> 04:51.280
need a dual channel coherent receiver,

04:51.280 --> 04:53.840
because you don't know what the Wi-Fi is streaming.

04:53.840 --> 04:55.320
It's streaming a broadband signal,

04:55.320 --> 04:56.640
but you don't know what it is.

04:56.640 --> 04:57.960
For me, it's noise.

04:57.960 --> 05:03.120
And so if I'm sending noise, I need to record the reference

05:03.120 --> 05:03.840
signal.

05:03.840 --> 05:05.720
And on the receiving antenna, I will

05:05.720 --> 05:09.720
look at time-delayed copies of this transmitted signal.

05:09.720 --> 05:13.160
So that's your basic passive radar measurement.

05:13.160 --> 05:15.360
And this is all running on the Raspberry Pi.

05:15.360 --> 05:18.520
So the Raspberry Pi at the moment is Raspberry Pi 4.

05:18.520 --> 05:21.200
It's running build routes, running new radio,

05:21.200 --> 05:24.520
and I'm streaming 0MQ to the processing PC.

05:24.520 --> 05:27.120
That's what we showed a few years ago.

05:27.120 --> 05:31.200
So actually, this is the final setup.

05:31.200 --> 05:33.480
So I took some commercial antennas here.

05:33.480 --> 05:34.880
You want it to be a bit directional

05:34.880 --> 05:37.760
so that you can have some bigger range.

05:37.760 --> 05:39.480
And this is why I'm saying it's not completely legal,

05:39.520 --> 05:43.840
because I'm sending the 10 dBm of a Wi-Fi transmitter.

05:43.840 --> 05:46.640
But of course, it's an isotropic radiated pattern.

05:46.640 --> 05:50.360
And here, I'm focusing on the 20 dBi gain antenna.

05:50.360 --> 05:51.240
Let's forget about this.

05:51.240 --> 05:52.400
No one's going to notice.

05:52.400 --> 05:53.760
And we do the same on the receiving.

05:53.760 --> 05:55.760
So you see here, you have the rail, everything

05:55.760 --> 05:59.160
that's moving and transmitting and receiving antenna.

05:59.160 --> 06:00.320
Raspberry Pi is over here.

06:00.320 --> 06:01.400
The B210 is over here.

06:01.400 --> 06:04.080
So everything that's moving heads the cables.

06:04.080 --> 06:06.360
And then I'm transmitting.

06:06.360 --> 06:07.680
Here, I'm transmitting over internet,

06:07.680 --> 06:09.240
but it could be over the Wi-Fi communication.

06:09.240 --> 06:12.000
The 2.4 GHz, the stream.

06:12.000 --> 06:14.440
Now, doing Wi-Fi measurements, actually yesterday,

06:14.440 --> 06:16.680
if you walk in the garden just outside here,

06:16.680 --> 06:17.760
you're going to see this poster.

06:17.760 --> 06:19.840
And actually, I was reading the poster.

06:19.840 --> 06:21.440
For those of you reading French, actually,

06:21.440 --> 06:26.960
there's a PhD from Brussels using Wi-Fi for what they call it,

06:26.960 --> 06:28.040
crowd safety.

06:28.040 --> 06:30.200
I call it crowd control, but he's PhD.

06:30.200 --> 06:32.880
So he's still optimistic.

06:32.880 --> 06:37.320
And of course, using Wi-Fi is MIT is very good at advertising

06:37.320 --> 06:37.880
what they're doing.

06:37.880 --> 06:40.320
So MIT has been doing full-the-wall Wi-Fi

06:40.320 --> 06:41.760
measurement for a long time.

06:41.760 --> 06:43.240
So Wi-Fi is not new, but I'm just

06:43.240 --> 06:46.920
trying to show you here how to make an educational system.

06:46.920 --> 06:49.640
So the principle is we continuously broadcast Wi-Fi.

06:49.640 --> 06:52.320
So actually, you could be streaming a very big movie,

06:52.320 --> 06:54.600
or you can take Bach's Packet Spammer.

06:54.600 --> 06:55.520
This is what I'm doing.

06:55.520 --> 06:58.880
So Packet Spammer will just keep on sending packets

06:58.880 --> 06:59.800
over time.

06:59.800 --> 07:03.680
And you have this non-cooperative source sending signal.

07:03.680 --> 07:06.000
And because it's non-cooperative, it

07:06.000 --> 07:08.640
might be that sometimes you will look at Packet Spammer.

07:08.640 --> 07:11.960
And because you cannot squeeze too many packets in a second,

07:11.960 --> 07:13.080
you'll have some gaps.

07:13.080 --> 07:14.880
So you just have to detect the gaps,

07:14.880 --> 07:17.640
throw these parts away, and collect enough data

07:17.640 --> 07:19.800
that you don't have noise.

07:19.800 --> 07:24.800
Now, we've just seen the presentation by Sylvain about GPUs.

07:24.800 --> 07:30.440
And just going to this, the correlation,

07:30.440 --> 07:31.800
when you're doing correlation memory,

07:31.800 --> 07:34.480
you're looking at the time-delayed copy of your signal.

07:34.480 --> 07:37.360
And you might think he's talking about correlation.

07:37.360 --> 07:38.680
Sylvain was talking about convolution.

07:38.680 --> 07:40.240
It was a relationship.

07:40.240 --> 07:42.120
The relationship between convolution and correlation

07:42.120 --> 07:44.360
is just you flip the time in the argument.

07:44.360 --> 07:46.360
Convolution is tau minus t.

07:46.360 --> 07:48.160
Correlation is t plus tau.

07:48.160 --> 07:50.520
And when you flip the time, you take the complex conjugate.

07:50.520 --> 07:52.960
So you see that exactly what Sylvain said.

07:52.960 --> 07:55.880
You take IFFT of Fourier Transformers Surveillance

07:55.880 --> 07:58.920
times the complex conjugate of Fourier Transformers

07:58.920 --> 08:00.400
of the reference signal.

08:00.400 --> 08:02.680
And the complex conjugate is to go from correlation

08:02.680 --> 08:03.960
to convolution.

08:03.960 --> 08:06.520
And the problem with this is that if your filter has

08:06.520 --> 08:08.880
some ripples on your reference measurement

08:08.880 --> 08:10.240
or on the surveillance measurement,

08:10.240 --> 08:11.560
if you have some ripples, then you

08:11.560 --> 08:13.280
will multiply the ripples because you're

08:13.280 --> 08:14.560
multiplying the amplitude.

08:14.560 --> 08:16.560
And what's really important in correlating

08:16.560 --> 08:18.840
is that you want the phases to subtract

08:18.840 --> 08:20.640
because the signal will be square-irons.

08:20.640 --> 08:22.240
And if they are coming from the same side,

08:22.240 --> 08:24.000
you have zero phase, or even same direction,

08:24.000 --> 08:24.880
they have the same phase.

08:24.880 --> 08:26.520
So you want to subtract the phase.

08:26.520 --> 08:29.640
And actually, instead of doing the analytical formula

08:29.640 --> 08:31.640
of multiplying the Fourier Transforms,

08:31.680 --> 08:34.320
you can actually take the ratio of Fourier Transform, which

08:34.320 --> 08:38.200
is the same by taking the inverse to take the negative phase,

08:38.200 --> 08:40.600
but you cancel the amplitude fluctuations.

08:40.600 --> 08:42.560
So that's actually what I do at the end of the day.

08:42.560 --> 08:44.520
I take the inverse Fourier Transform of a ratio

08:44.520 --> 08:47.400
of Fourier Transforms.

08:47.400 --> 08:53.520
Now, each Wi-Fi bandwidth is 20 megahertz.

08:53.520 --> 08:55.680
And 20 megahertz is on the one hand more

08:55.680 --> 09:00.880
that I can stream from my B210 to the Raspberry Pi 4.

09:00.880 --> 09:04.000
And secondly, I told you there's 200 megahertz

09:04.000 --> 09:05.000
available in Wi-Fi.

09:05.000 --> 09:08.400
And we don't want just to be using the 20 megahertz of one

09:08.400 --> 09:09.240
channel.

09:09.240 --> 09:10.920
And so what we're doing here, if you look

09:10.920 --> 09:12.200
at the allocation of frequencies,

09:12.200 --> 09:13.680
Wi-Fi is very broad.

09:13.680 --> 09:15.480
It starts at 5.4 gigahertz.

09:15.480 --> 09:17.840
Actually, you should avoid the 5.4 gigahertz,

09:17.840 --> 09:20.400
that's the C-band radar band.

09:20.400 --> 09:21.840
It was also called military G-band.

09:21.840 --> 09:24.000
So you would like to avoid this kind of frequency.

09:24.000 --> 09:25.560
And C-band is also Sentinel-1.

09:25.560 --> 09:27.760
We don't want to be jamming Sentinel-1.

09:28.200 --> 09:31.200
So we start working above the C-band radar.

09:31.200 --> 09:33.080
So we have all these channels here.

09:33.080 --> 09:35.040
And what you do is actually you do

09:35.040 --> 09:37.080
what is called frequency stacking.

09:37.080 --> 09:39.600
So actually, you reprogram your Wi-Fi dongle

09:39.600 --> 09:41.080
to jump from one channel to the other.

09:41.080 --> 09:42.400
And then you just keep on sweeping.

09:42.400 --> 09:44.080
So this was done of Spectralizer.

09:44.080 --> 09:47.560
You see here how you're broadcasting

09:47.560 --> 09:48.440
each one of these channels.

09:48.440 --> 09:50.440
And I can check that indeed this is working.

09:50.440 --> 09:54.840
And so for each channel, I reprogram the dongle.

09:54.840 --> 09:57.160
I stream the data for 0MQ.

09:57.160 --> 10:00.360
I record the data when I know I reprogram the new channel.

10:00.360 --> 10:02.880
And after I collected the number of samples I wanted,

10:02.880 --> 10:03.880
I reprogram the new.

10:03.880 --> 10:06.440
And I keep on looking like this.

10:06.440 --> 10:10.240
At the moment, everything, all the FFTs are done offline.

10:10.240 --> 10:13.160
Actually, everything I'm showing here is post-processing.

10:13.160 --> 10:16.240
I showed you a very fast movie because a full measurement

10:16.240 --> 10:17.240
is taking 15 minutes.

10:17.240 --> 10:19.360
And as I've had run the movie in real time,

10:19.360 --> 10:21.080
my time would be exhausted by the time

10:21.080 --> 10:23.560
I finish the introduction slide.

10:23.560 --> 10:26.160
So actually, a full measurement is taking 15 minutes

10:26.160 --> 10:28.280
and processing the full data is about an hour

10:28.280 --> 10:29.480
because I'm not using GPU.

10:29.480 --> 10:31.760
Here, this is all CPU post-processing.

10:31.760 --> 10:35.000
But one thing that I would love to see

10:35.000 --> 10:37.800
we've seen very fancy GPUs here.

10:37.800 --> 10:40.080
I just got two Raspberry Pi 5.

10:40.080 --> 10:43.960
And I'm told that we would be documented

10:43.960 --> 10:46.120
how to use a GPU of Raspberry Pi 5

10:46.120 --> 10:47.920
to do some sort of processing.

10:47.920 --> 10:50.360
So that would be really beautiful to do at the moment.

10:50.360 --> 10:51.680
It's beyond what I can do.

10:51.680 --> 10:52.920
So this is actually experimental.

10:52.920 --> 10:54.040
This is what I do.

10:54.040 --> 10:55.720
Each one of the color was a spectrum

10:55.720 --> 10:57.440
collected by the B210.

10:57.440 --> 11:00.200
And so you see my frequency stacking

11:00.200 --> 11:03.800
so that allows me to spend the 200 megahertz of Wi-Fi.

11:03.800 --> 11:06.000
Be careful that there are some gaps.

11:06.000 --> 11:07.320
I think it's these guys here.

11:07.320 --> 11:08.520
So there are some gaps.

11:08.520 --> 11:10.360
So when you do the ratio, just make sure

11:10.360 --> 11:13.240
that you not a number of the values

11:13.240 --> 11:15.560
that you don't divide by 0.

11:15.560 --> 11:19.160
It's going to be unhappy about the calculation.

11:19.160 --> 11:20.440
Just a little side note.

11:20.440 --> 11:22.960
When I bought this rail, usually I

11:22.960 --> 11:26.640
tried to do some hack where I tried to find what's in the lab

11:26.640 --> 11:27.560
and I tried to assemble.

11:27.560 --> 11:29.320
And for this time, I had a bit of money left.

11:29.320 --> 11:30.720
So I bought a real rail.

11:30.720 --> 11:33.920
And I learned, I discovered, that all these industrial controls

11:33.920 --> 11:37.800
so that programmable logic controller

11:37.800 --> 11:39.040
are running on 24 volts.

11:39.040 --> 11:40.720
That is very standard.

11:40.720 --> 11:44.240
And your Raspberry Pi, of course, is a 3.3 volt GPIO.

11:44.240 --> 11:46.880
So you will need to have some voltage converter.

11:46.880 --> 11:51.600
That's your legacy, ULN2803, open collector

11:51.600 --> 11:56.320
dialectan transistor that will convert the input 3.3 volt

11:56.320 --> 11:57.640
into 24 volts.

11:57.640 --> 11:59.400
And the other thing that's kind of funny for us

11:59.400 --> 12:01.040
is in industrial control, they don't

12:01.040 --> 12:03.200
want you to do anything you want with the rail.

12:03.200 --> 12:06.400
Because if you misbehave, then your rail might go off.

12:06.400 --> 12:08.280
So actually, you're not allowed to program the position.

12:08.280 --> 12:11.040
You have to pre-program a set of values

12:11.040 --> 12:12.240
where your rail can go.

12:12.240 --> 12:14.840
And then you say, I want you to go to position 1, 2, 3, 4,

12:14.840 --> 12:16.600
and so on.

12:16.600 --> 12:18.280
This, of course, is proprietary software

12:18.280 --> 12:19.320
from the rail manufacturer.

12:19.320 --> 12:20.400
But it does run on wine.

12:20.400 --> 12:23.720
So it's not open source, but you can do it.

12:23.720 --> 12:25.840
So this is what it looks like on the moving part.

12:25.840 --> 12:29.880
You've got the Raspberry Pi with 24 volt controller over here.

12:29.880 --> 12:31.640
OK, having said that, what you collect,

12:31.640 --> 12:33.680
you collect for each antenna position

12:33.680 --> 12:36.560
all the spectra in the frequency domain.

12:36.560 --> 12:39.600
Once you've got on the reference channel

12:39.600 --> 12:42.600
and on the surveillance channel all these antenna positions

12:42.600 --> 12:45.880
and for each frequency, so that's a 2D matrix,

12:45.880 --> 12:47.480
you cross correlate each one of these.

12:47.480 --> 12:49.480
So you end up having one 2D matrix

12:49.520 --> 12:51.720
because you've correlated these two guys.

12:51.720 --> 12:54.240
You've got the antenna position on the x-axis.

12:54.240 --> 12:56.840
You've got the time domain because you inverse

12:56.840 --> 12:58.640
for transforming the y-axis.

12:58.640 --> 13:00.840
So this is before azimuth compression.

13:00.840 --> 13:04.000
Then you do your azimuth compression by doing the FFT.

13:04.000 --> 13:05.840
So this is FFT in this direction.

13:05.840 --> 13:07.280
Then you take the FFT in this direction

13:07.280 --> 13:08.840
to do azimuth compression.

13:08.840 --> 13:12.560
And then the part that I'm not completely used to here,

13:12.560 --> 13:13.720
you get sine of theta.

13:13.720 --> 13:16.200
You want to have range theta position.

13:16.200 --> 13:17.880
And my colleague, Weike Feng,

13:18.880 --> 13:20.800
Air Force Engineering University in Shanghai,

13:20.800 --> 13:25.640
gave me the algorithm for reprojecting the sine theta range

13:25.640 --> 13:30.640
to the range azimuth position.

13:32.720 --> 13:34.640
And once you get these maps,

13:34.640 --> 13:36.280
well the really beautiful thing is

13:36.280 --> 13:37.640
there is no degree of freedom.

13:37.640 --> 13:40.640
If you know how you move the antenna

13:40.640 --> 13:43.480
and you know the frequency step you use,

13:43.480 --> 13:45.960
you cannot cheat with the results.

13:45.960 --> 13:47.840
You've got an x and y position

13:47.840 --> 13:51.240
that is fully determined by your data acquisition condition.

13:51.240 --> 13:53.680
So here is one example from our lab.

13:53.680 --> 13:55.600
So this is the rail, this is the antenna.

13:55.600 --> 13:59.680
You've got here this round circular building

13:59.680 --> 14:00.640
which is over here.

14:00.640 --> 14:03.400
You've got the portal which is over here.

14:03.400 --> 14:05.960
And you've got the university housing which is over here.

14:05.960 --> 14:08.000
So there is no degree of freedom

14:08.000 --> 14:10.680
other than positioning the radar at the focal point.

14:10.680 --> 14:13.280
And this you know, I know where I'm located.

14:13.280 --> 14:16.120
And you have only degree of freedom is azimuth.

14:16.120 --> 14:18.720
You can tune the picture so that it fits.

14:20.360 --> 14:22.040
In this case, I threshold the pack scatter

14:22.040 --> 14:26.080
to make transparent where there's no output.

14:26.080 --> 14:27.800
So this is on the other side.

14:27.800 --> 14:30.800
So this were closed range, this is further away.

14:30.800 --> 14:32.720
So we're looking at the opposite side.

14:32.720 --> 14:34.960
You've got this building that is over here.

14:34.960 --> 14:38.360
You've got this container which is over here at near range.

14:38.360 --> 14:40.280
Again, no degree of freedom.

14:40.280 --> 14:42.040
And there is this reflection.

14:42.040 --> 14:45.000
And you should tell me, how can you get a reflection

14:45.000 --> 14:46.320
when it's a field over here?

14:46.320 --> 14:47.760
Well actually that was taken this summer

14:47.760 --> 14:51.040
when Google Maps had not yet updated their Google image

14:51.040 --> 14:54.480
because this building was indeed built since then.

14:54.480 --> 14:58.840
So this is one example where we actually get reflections

14:58.840 --> 15:00.520
up to 500 meters.

15:00.520 --> 15:02.400
This building here is giving us something.

15:02.400 --> 15:04.280
This range here is 500 meters.

15:04.280 --> 15:07.000
So it's working, all right, let's say well,

15:07.000 --> 15:09.400
at least you can see things with it.

15:09.400 --> 15:11.600
Then you might ask, is this reproducible?

15:11.600 --> 15:15.240
So last weekend I said, OK, like open source project,

15:15.240 --> 15:18.080
you put the GitHub, you say, trust me, it's working.

15:18.080 --> 15:20.000
And six months afterwards it's all gonna be crushed

15:20.000 --> 15:22.240
because all the libraries change and nothing's working anymore.

15:22.240 --> 15:24.240
So last weekend I said, let's take everything out

15:24.240 --> 15:25.480
and let's check if it's working.

15:25.480 --> 15:26.640
So it is working again.

15:26.640 --> 15:31.240
So here you've got the XY map which I project

15:31.240 --> 15:32.520
over Google Maps.

15:32.520 --> 15:35.760
And the nice thing is Google Maps updated their database.

15:35.760 --> 15:37.360
So now the hotel is over here.

15:37.360 --> 15:40.920
And here you've got the reflection far away.

15:40.920 --> 15:42.080
And you've got something here.

15:42.080 --> 15:44.960
So you might say, wow, I get even something even further

15:44.960 --> 15:47.240
than 500 meters.

15:47.240 --> 15:48.400
And it's reproducible.

15:48.400 --> 15:51.320
I took a second image over here and you get twice

15:51.320 --> 15:52.680
the same image.

15:52.680 --> 15:53.560
Don't be fooled.

15:53.560 --> 15:58.520
This here is not if you change the big orientation of the radar

15:58.520 --> 16:00.640
and you look a bit to the right, you think the reflection

16:00.640 --> 16:01.640
is still over here.

16:01.640 --> 16:04.840
This is your ambiguity function.

16:04.840 --> 16:07.480
The ambiguity function is you take the auto correlation.

16:07.480 --> 16:09.840
So you check, is there some self-similarity?

16:09.840 --> 16:14.080
And obviously, OFDM Wi-Fi does have some self-similarity.

16:14.080 --> 16:17.480
And this is a repeated pattern every 1.5 microseconds

16:17.480 --> 16:18.320
or something like this.

16:18.320 --> 16:19.160
I don't have the details.

16:19.160 --> 16:21.040
And so be very careful when you're

16:21.040 --> 16:24.760
using non-dedicated radar signal to check the ambiguity

16:24.760 --> 16:28.120
function because they might create their own repetition,

16:28.120 --> 16:30.840
which are not targets, but just because the signal does have

16:30.840 --> 16:31.920
some structure Wi-Fi.

16:31.920 --> 16:35.560
Looks like noise except when they repeat the OFDM error

16:35.560 --> 16:36.680
or something like this.

16:36.680 --> 16:39.720
But still you see that even if I try to go back,

16:39.720 --> 16:43.560
you see that this guy, for example, is a real target.

16:43.560 --> 16:45.160
Because if I move a radar azimuth,

16:45.160 --> 16:47.760
you do see the radar, the target at the same location.

16:47.760 --> 16:51.440
So I'm not completely lying here.

16:51.440 --> 16:53.840
And so finally, I was thinking, why

16:53.840 --> 16:56.800
is this reflection so powerful?

16:56.800 --> 16:59.160
How come there is one building at 500 meters

16:59.160 --> 17:01.480
that is sending this echo?

17:01.480 --> 17:02.160
So I went to see.

17:02.160 --> 17:03.960
I walked around and I took this picture.

17:03.960 --> 17:06.200
And actually what you see here, they've got the windows.

17:06.200 --> 17:08.600
But as a shade, as a sun shade, they

17:08.600 --> 17:10.760
put something that looks very much like a corner reflector.

17:10.760 --> 17:12.560
If you remember what a corner reflector is,

17:12.560 --> 17:14.760
it's a free right angled part.

17:14.760 --> 17:16.640
And actually, modern buildings, architects

17:16.640 --> 17:18.280
seem to love corner reflector.

17:18.280 --> 17:20.680
You look at modern architecture,

17:20.680 --> 17:23.840
you've got free right angled corners everywhere.

17:23.840 --> 17:25.960
So that's very good for radars.

17:25.960 --> 17:28.080
So this is actually why this building in particular

17:28.080 --> 17:32.120
is returning such a good signal.

17:32.120 --> 17:36.000
Finally, I told you that the range resolution is only

17:36.520 --> 17:40.240
a half meter, 75 centimeter here with 200 megahertz bandwidth.

17:40.240 --> 17:41.840
And we want to detect length slides

17:41.840 --> 17:44.640
with sub-centimeter displacement.

17:44.640 --> 17:46.800
So the classical method is you do

17:46.800 --> 17:48.760
interferometric measurement in SAR.

17:48.760 --> 17:51.000
So in INSAR, you don't only look at the magnitude

17:51.000 --> 17:53.680
of a return signal, but only also the phase.

17:53.680 --> 17:56.240
And the phase is uncertain because you've

17:56.240 --> 17:57.480
got two pi phase rotations.

17:57.480 --> 17:59.040
So you don't know how far the length slide is,

17:59.040 --> 18:00.360
but this you don't care because you got it

18:00.360 --> 18:01.800
from the range resolution.

18:01.800 --> 18:04.320
And by looking at the phase, you can actually

18:04.320 --> 18:08.240
get your distance variation, which

18:08.240 --> 18:11.400
is half the wavelength times the phase rotation over two pi.

18:11.400 --> 18:13.920
So the only challenge is because it's a radar,

18:13.920 --> 18:17.400
it's half wavelength because you've got a two-way trip.

18:17.400 --> 18:21.000
And so basically, I'm claiming here, so what I did

18:21.000 --> 18:23.760
is I took all the strong reflections.

18:23.760 --> 18:25.720
The ping here is misleading.

18:25.720 --> 18:26.360
This is not one.

18:26.360 --> 18:27.560
This is not a number.

18:27.560 --> 18:31.080
And I took the average and the standard deviation

18:31.080 --> 18:32.240
of all these guys.

18:32.240 --> 18:36.360
And you see that the mean value is in 1 millimeter.

18:36.360 --> 18:40.120
So you do get a millimeter on the mean value

18:40.120 --> 18:42.000
with 1.5 millimeter standard deviation.

18:42.000 --> 18:47.160
So I claim this to be 0 plus or minus 1.5 millimeter, which

18:47.160 --> 18:48.920
is probably not state-of-the-art,

18:48.920 --> 18:50.440
but that's just educational.

18:50.440 --> 18:52.560
So I'm still almost pleased that it works.

18:52.560 --> 18:56.400
And if you had seen some of my previous presentation,

18:56.400 --> 18:58.760
if you take a corner reflector, I try to do it.

18:58.760 --> 18:59.800
And it fails here.

18:59.800 --> 19:02.040
If you move a corner reflector by step of 5 millimeter,

19:02.040 --> 19:03.000
you do see it.

19:03.000 --> 19:06.160
So the phase analysis is working as well.

19:06.160 --> 19:08.360
So to conclude this presentation,

19:08.360 --> 19:12.440
I wanted to share with you how you can use, I think,

19:12.440 --> 19:18.440
affordable hardware for running a synthetic ground-based

19:18.440 --> 19:20.520
synthetic aperture radar, especially

19:20.520 --> 19:26.080
as an educational tool using commercial off-the-shelf Wi-Fi

19:26.080 --> 19:28.640
emitter, in this case, as a cooperative target

19:28.640 --> 19:31.240
because I'm broadcasting the signal.

19:31.240 --> 19:32.960
And I think it's a great opportunity

19:32.960 --> 19:36.920
to try to get started with this digital signal processing.

19:36.920 --> 19:38.680
Now, just to give you an idea of the budget,

19:38.680 --> 19:41.200
because I told you I had some leftover budget

19:41.200 --> 19:42.840
from a former contract that I had

19:42.840 --> 19:44.760
to spend by the end of the year.

19:44.760 --> 19:46.360
So I bought all this hardware.

19:46.360 --> 19:51.320
So the antennas are 1,000 euro transmitter receiver.

19:51.320 --> 19:53.320
You've got, actually, no, not two times.

19:53.320 --> 19:54.960
So stupid me.

19:54.960 --> 19:58.160
It's a 1 transmitter, 1 receiver, of course.

19:58.160 --> 20:00.120
No, no, no, sorry.

20:00.160 --> 20:05.680
A pair of transmitter receiver and the accessories

20:05.680 --> 20:07.880
for handling the antennas.

20:07.880 --> 20:10.800
You've got the rail, which is by far the most expensive part.

20:10.800 --> 20:13.800
But you do need the accuracy of the rail,

20:13.800 --> 20:15.840
the repetibility of the rail will give you

20:15.840 --> 20:17.640
your ability to do INSAR.

20:17.640 --> 20:20.000
If you've got a shitty setup where

20:20.000 --> 20:22.760
you've got an uncertainty of 5 millimeter on the position,

20:22.760 --> 20:26.560
well, 5 millimeter with respect to a half wavelength of 2.4

20:26.560 --> 20:29.680
centimeter is significant, and this will blur your image.

20:29.680 --> 20:31.960
So that's where I wanted to spend a bit of money

20:31.960 --> 20:33.640
to have a good quality.

20:33.640 --> 20:36.160
These guys claim to have 100 micron

20:36.160 --> 20:40.000
reproducibility, so the sub 10s of millimeter, which

20:40.000 --> 20:40.760
I think is really good.

20:40.760 --> 20:44.960
And it's kind of easy to use.

20:44.960 --> 20:45.840
You've got your Wi-Fi.

20:45.840 --> 20:47.520
You've got the passive RF.

20:47.520 --> 20:48.880
And you've got the Raspberry Pi.

20:48.880 --> 20:52.080
These are all easy to find.

20:52.080 --> 20:54.920
And the B210, actually, I had leftovers.

20:54.920 --> 20:56.880
I think I have a dozen B210 in the lab.

20:56.880 --> 20:59.720
So I just took one of the leftover B210.

20:59.720 --> 21:02.440
And as I was doing this talk, I wanted to share with you

21:02.440 --> 21:04.080
the fact that everyone could do it.

21:04.080 --> 21:07.120
And at the end, we have a 7,000 euro project.

21:07.120 --> 21:10.840
And I'm not sure everyone wants a whole B210 7,000 euro.

21:10.840 --> 21:14.000
And you do see that the most expensive part here is the B210.

21:14.000 --> 21:16.720
So I checked, and I do have quotations

21:16.720 --> 21:20.560
from the beginning of last year, last, last year, that

21:20.560 --> 21:24.080
says that the B210 was 1,400 euros.

21:24.080 --> 21:27.360
In January 2024, it's now 2,100 euros.

21:27.360 --> 21:29.600
So I'm sorry for an eye, but I'm not going to advertise the

21:29.600 --> 21:32.760
B210 because this is really too much of a price hike.

21:32.760 --> 21:37.560
You do have a Pluto Plus with a tool channel, which I can

21:37.560 --> 21:39.680
get on AliExpress for 300 euros.

21:39.680 --> 21:42.240
And it's the same 80, 90, 360 something.

21:42.240 --> 21:43.520
It's an internet output.

21:43.520 --> 21:45.600
And when you've got all these moving parts, if you ever did

21:45.600 --> 21:48.680
some USB on moving parts, USB is the worst connector you

21:48.680 --> 21:50.000
want on the moving part.

21:50.000 --> 21:53.280
Internet, at least, you plug it in, and it stays there.

21:53.280 --> 21:56.760
So yeah, unfortunately, I wanted to demonstrate this for

21:56.760 --> 21:59.360
this presentation, and my Pluto Plus is still in the mail.

21:59.360 --> 22:02.360
So I cannot demonstrate that the noise level is the same,

22:02.360 --> 22:04.200
that the communication capability is the same, that

22:04.200 --> 22:07.080
it runs flawlessly on the Raspberry Pi.

22:07.080 --> 22:08.960
This may be for the next time.

22:08.960 --> 22:13.440
But yeah, you will save 800 euros on this budget, and it's

22:13.440 --> 22:16.840
a 5,000 euro project that I'm showing you here.

22:16.840 --> 22:21.560
So you can find all the repository processing on the

22:21.560 --> 22:22.560
GitHub.

22:22.560 --> 22:24.120
Hopefully, I documented everything.

22:24.120 --> 22:27.840
If you wish to reproduce and you miss information, feel

22:27.840 --> 22:28.720
free to reach me.

22:28.720 --> 22:32.320
I'll be happy to complement any misinformation.

22:32.320 --> 22:37.600
Be aware that if you want to use different hardware, the

22:37.600 --> 22:41.240
running bastion's packet spammer does require what is

22:41.240 --> 22:43.360
called promiscuous mode, and not all chipsets

22:43.360 --> 22:45.000
support promiscuous mode.

22:45.000 --> 22:48.360
Furthermore, be aware that the chipset of this particular

22:48.360 --> 22:51.880
board is not in mainline Linux kernel, so you will need to

22:51.880 --> 22:53.200
recompile the kernel.

22:53.200 --> 22:55.240
And if you're doing cross compilation for big rules,

22:55.240 --> 22:59.760
you need to know how to cross compile your kernel module.

22:59.760 --> 23:03.360
And finally, this was all done with your taxpayers' money,

23:03.360 --> 23:05.960
so public money, public code.

23:05.960 --> 23:08.960
Thank you for supporting our research and my colleagues

23:08.960 --> 23:11.040
from the Mechanical Workshop who did a very good job in

23:11.040 --> 23:12.640
assembling these antennas.

23:12.640 --> 23:14.840
And with this, I thank you for your attention.

23:14.840 --> 23:27.840
And I even have one and a half minutes for questions.

23:27.840 --> 23:33.840
I guess if you have to tune the gargantuan call to the

23:33.840 --> 23:36.840
Wi-Fi's packet spammer, then the gargantuan call is to

23:36.840 --> 23:39.840
Wi-Fi's container and to see more radio silence after the

23:39.840 --> 23:40.840
packet.

23:41.840 --> 23:45.400
The question is, how do I tune the silence in packet

23:45.400 --> 23:46.120
spammer?

23:46.120 --> 23:47.680
And actually, I did the exact opposite.

23:47.680 --> 23:50.240
I wanted to have the packets as close to each other as

23:50.240 --> 23:52.920
possible, so I have as little gap as possible.

23:52.920 --> 23:56.680
And as I was putting too small a value, if you ask packet

23:56.680 --> 23:59.280
spammer to send a new packet as the previous one is still

23:59.280 --> 24:03.240
being broadcast, then it will send back an error message.

24:03.240 --> 24:06.800
And the Wi-Fi don't really become very unhappy.

24:06.800 --> 24:11.400
So I was conservative and I did put excess delay, not that

24:11.400 --> 24:15.120
I wanted genuine Wi-Fi user to still have their connection.

24:15.120 --> 24:17.000
This I didn't really care about, but I didn't want my

24:17.000 --> 24:18.600
Wi-Fi don't go to crash.

24:18.600 --> 24:22.240
And so I put some additional time delay, not too much, so by

24:22.240 --> 24:23.560
time I'm not wasting too much time.

24:23.560 --> 24:25.640
The reason why this measurement is taking 15

24:25.640 --> 24:27.440
minutes is really to collect.

24:27.440 --> 24:31.360
I'm taking something like 100,000 samples per position,

24:31.360 --> 24:32.640
per spectrum.

24:32.680 --> 24:37.360
And really the collection of the data and getting rid of

24:37.360 --> 24:40.280
the silence is the reason why it takes so much time.

24:40.280 --> 24:45.640
Just if you look at commercial GBSAR, they promote one

24:45.640 --> 24:47.280
second measurement duration.

24:47.280 --> 24:50.160
And the reason also, I didn't mention power consumption,

24:50.160 --> 24:53.920
the GBSAR used to be installed in remote locations.

24:53.920 --> 24:56.920
And of course, the longer it takes, the more power you draw.

24:56.920 --> 25:00.640
So this device I make a power budget is 25 watts.

25:00.680 --> 25:04.280
So whether you have 25 watts for 15 minutes or 25 watts for

25:04.280 --> 25:07.080
one second is going to completely change the life

25:07.080 --> 25:08.440
expectancy of your battery.

25:08.440 --> 25:11.200
So if I had to work on something now, it would really

25:11.200 --> 25:14.240
make it faster so that it can run on battery or solar panel

25:14.240 --> 25:15.880
and that the energy consumption of each

25:15.880 --> 25:17.440
measurement is much lower.

25:17.440 --> 25:21.760
So the initial question of putting gaps in packet

25:21.760 --> 25:27.120
spammer is just not to crash the Wi-Fi dongle.

25:27.560 --> 25:30.200
Have you considered using rails from 3D printers because

25:30.200 --> 25:33.640
they usually are cheaper and have still very nice decisions?

25:33.640 --> 25:35.280
If I can assemble which part in?

25:35.280 --> 25:38.400
From 3D printers like the procedure like rails too, which

25:38.400 --> 25:42.480
can look like very precise movements and space speed.

25:42.480 --> 25:47.440
So the question is what part can be made out of 3D printers?

25:47.440 --> 25:51.920
The problem here, I did not put the weight estimate, but I

25:51.920 --> 25:55.440
think the two antennas plus the hardware setup weight

25:55.440 --> 25:58.720
something like 1.2, 1.5 kilos.

25:58.720 --> 26:03.400
And that's really the challenge in having a nice

26:03.400 --> 26:06.280
mechanical setup.

26:06.280 --> 26:08.520
You do see that there is a bit of hardware there.

26:08.520 --> 26:13.600
And so when you want to move these stable and reproducibly,

26:13.600 --> 26:15.800
I went for a fancy.

26:15.800 --> 26:19.560
Also, I wanted to do it fast because my previous setup was

26:19.560 --> 26:21.720
a screw driven rail.

26:21.720 --> 26:25.640
And it would take like 10, 15 seconds to go from one

26:25.640 --> 26:26.440
position to another.

26:26.440 --> 26:30.240
So just the time to move would be added up at something like

26:30.240 --> 26:31.920
five, six minutes in the measurement.

26:31.920 --> 26:34.720
So this guy can just move in a fraction of a second from

26:34.720 --> 26:35.800
one position to another.

26:35.800 --> 26:38.160
So there's many solutions that you could go for.

26:38.160 --> 26:39.960
There's also these photographers.

26:39.960 --> 26:43.600
They want to do time lapses where they move a camera.

26:43.600 --> 26:45.120
Yeah, I didn't trust them.

26:45.120 --> 26:46.960
So I went for the more expensive.

26:46.960 --> 26:50.400
But yes, there's many solutions that you could go for to

26:50.400 --> 26:53.200
get a better solution.

26:53.200 --> 26:55.160
So thank you, so much.

