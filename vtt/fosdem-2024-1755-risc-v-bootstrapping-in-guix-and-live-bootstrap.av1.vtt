WEBVTT

00:00.000 --> 00:05.000
or say geeks integration or something like that.

00:08.880 --> 00:13.720
But in general, those APIs won't be used

00:13.720 --> 00:17.000
by Goblin's programs for the most part.

00:17.000 --> 00:19.440
But we will provide the compatibility.

00:19.440 --> 00:21.000
Because we already started the next door.

00:21.000 --> 00:22.080
All right, very good.

00:23.280 --> 00:24.360
Thank you very much.

00:24.360 --> 00:26.960
That's the, that thing.

00:26.960 --> 00:28.400
Hi, can you hear me?

00:28.400 --> 00:29.280
Yeah, right?

00:29.280 --> 00:30.760
Okay.

00:30.760 --> 00:32.920
How many people here is aware of the problem

00:32.920 --> 00:34.800
of the bootstrapping?

00:34.800 --> 00:35.640
Place hands.

00:35.640 --> 00:36.600
Okay, that's good.

00:36.600 --> 00:38.880
That's better than I expected.

00:38.880 --> 00:39.760
That's fine.

00:39.760 --> 00:42.360
So, first of all, this is a disclaimer.

00:42.360 --> 00:45.240
I wrote everything I'm going to talk about in my blog.

00:45.240 --> 00:47.120
And also I give a talk the last year.

00:47.120 --> 00:50.880
So if you really want nitty gritty details

00:50.880 --> 00:52.680
about the bootstrapping process, go there.

00:52.680 --> 00:55.560
This is not going to be a very technical talk.

00:55.560 --> 00:56.400
Okay?

00:56.400 --> 00:58.360
It's going to be just an explanation of what we did

00:58.360 --> 01:00.680
in the RISC-5 world in the bootstrapping process

01:00.680 --> 01:03.360
on gigs and live bootstrap.

01:03.360 --> 01:05.080
So, this is me, right?

01:05.080 --> 01:07.240
I'm a telecommunication engineer,

01:07.240 --> 01:10.200
and a freelance programmer, and I work a lot in gigs.

01:10.200 --> 01:12.160
So maybe you remember me from the last year.

01:12.160 --> 01:13.400
I gave this talk.

01:13.400 --> 01:15.560
There we explain the bootstrapping problem

01:15.560 --> 01:17.480
is you have more interest on that.

01:17.480 --> 01:20.160
There's more slides on that and a,

01:20.160 --> 01:23.800
quite a long explanation of what we are doing and why.

01:23.800 --> 01:25.240
So this is the context.

01:26.760 --> 01:28.040
I work with NLNet.

01:28.040 --> 01:31.920
The last year, so they paid me literally to make some work

01:31.920 --> 01:33.000
in the bootstrapping process.

01:33.000 --> 01:36.880
I back ported some support for RISC-5 to another GCC

01:36.880 --> 01:39.080
to the 4.6.

01:39.080 --> 01:43.400
And also I back ported support for tiny GCC boot,

01:43.400 --> 01:45.760
which is a fork we are maintaining

01:45.760 --> 01:48.360
in order to be able to bootstrap the compilers.

01:48.360 --> 01:52.000
So I'm going to talk a little bit more about this later.

01:52.000 --> 01:55.840
So this was explained in the last year, so that's nice.

01:55.840 --> 02:00.080
So this year, I decided to continue with this project,

02:00.080 --> 02:04.120
but it was completely burnt out, and I needed help

02:04.120 --> 02:05.800
because people always helps, right?

02:05.800 --> 02:08.520
So I added more people to the project.

02:08.520 --> 02:13.520
These two are most, the ones that took more work in this port,

02:14.160 --> 02:18.680
and they literally gave me the energy to continue, right?

02:18.680 --> 02:21.800
So Andrews is very interested in the project

02:21.800 --> 02:24.720
because he works in Live Bootstrap and Stage Zero,

02:24.720 --> 02:26.920
which are projects that are very related with this.

02:26.920 --> 02:28.240
We are going to see them later.

02:28.240 --> 02:30.920
And Janneke is the author of MES

02:30.920 --> 02:32.920
and also the maintainer of tiny GCC boot.

02:32.920 --> 02:35.240
We are going to talk about that just now.

02:35.240 --> 02:38.440
So let's see in pictures, right?

02:38.440 --> 02:39.840
There are some colors, but I'm going to point.

02:39.840 --> 02:42.360
So if anyone has problems with the colors,

02:42.360 --> 02:43.640
it's no worries.

02:43.640 --> 02:47.600
So this is what we had before my project, right?

02:47.600 --> 02:50.880
We have Stage Zero POSIX, which is source code, right?

02:50.880 --> 02:54.080
Then we built with that, we use that to build MES,

02:54.080 --> 02:57.440
and with MES, we try to build a bootstrapable tiny GCC,

02:57.440 --> 03:00.720
which is a fork of tiny GCC, but that is easier, right?

03:00.720 --> 03:04.280
The C code it uses is simpler to be able to build.

03:04.280 --> 03:07.040
Then we try to build tiny GCC,

03:07.040 --> 03:11.480
then we go for a very, very old GCC from the 90s, right?

03:11.480 --> 03:14.320
And then we go for a modern GCC,

03:14.320 --> 03:17.560
maybe with many steps in the middle in all of the parts,

03:17.560 --> 03:19.640
and then we try to compile the world with GCC.

03:19.640 --> 03:20.800
So now the colors.

03:21.680 --> 03:24.720
All this is the current bootstrapping process

03:24.720 --> 03:26.240
that is in live bootstrap.

03:26.240 --> 03:27.720
We have it in Geeks too.

03:27.720 --> 03:31.880
So this just works, but only in X86.

03:31.880 --> 03:35.400
So I'm working in the RISC-V port of all this.

03:35.400 --> 03:38.560
So RISC-V, the status of the RISC-V part

03:38.560 --> 03:41.720
was these two parts of the top,

03:41.720 --> 03:44.680
they were already having some RISC-V support.

03:44.680 --> 03:47.160
It was working pretty fine, okay?

03:47.840 --> 03:50.880
The bootstrap of all tiny GCC had zero RISC-V support.

03:50.880 --> 03:53.920
Tiny GCC, it was supposed to have some RISC-V support,

03:53.920 --> 03:56.840
but it was worse than we thought.

03:56.840 --> 04:01.160
GCC didn't have it because these are very old GCCs.

04:01.160 --> 04:04.840
They were written before RISC-V was invented,

04:04.840 --> 04:06.280
so no support there.

04:06.280 --> 04:07.960
And the modern GCC that supports RISC-V

04:07.960 --> 04:09.920
is the 7.5 version.

04:09.920 --> 04:12.200
Then the world, some things support RISC-V,

04:12.200 --> 04:15.200
some others don't, but that's not my problem.

04:15.200 --> 04:18.960
I'm only working from here to the top, so don't worry about that.

04:21.960 --> 04:25.160
So after my effort, my previous effort,

04:25.160 --> 04:27.320
I took the support from this GCC,

04:27.320 --> 04:31.240
which is kind of a modern GCC, 7.5 is not at all,

04:31.240 --> 04:35.200
took that to GCC-4, this is a note here,

04:35.200 --> 04:37.520
this is written in C, this is written in C++,

04:37.520 --> 04:39.160
ha ha, I had a lot of fun there.

04:40.680 --> 04:43.600
And also, I took the support from here

04:43.600 --> 04:46.200
and I moved it to this one, right?

04:46.200 --> 04:50.880
So this was also, I think it's like a 10-year difference

04:50.880 --> 04:54.280
between these two, so the APIs, the internal APIs changed,

04:54.280 --> 04:55.560
many things are very difficult.

04:55.560 --> 04:58.080
GCC is horrible to read.

04:58.080 --> 05:00.440
Maybe here there is the maintainer, I'm sorry,

05:00.440 --> 05:02.640
but it's really hard to read this project, I'm sorry.

05:02.640 --> 05:07.640
So at the time, we didn't know that this was orange,

05:08.240 --> 05:10.680
this is not fully supported in RISC-V,

05:10.680 --> 05:12.960
we thought it was completely green, fantastic,

05:12.960 --> 05:15.680
no, it's not, so problems there.

05:15.680 --> 05:17.960
And this one, I finished this backboard

05:17.960 --> 05:21.160
and I thought I was going to have issues with this,

05:21.160 --> 05:23.280
but it happened to be pretty much okay,

05:23.280 --> 05:26.920
so nowadays this is way greener than we thought

05:26.920 --> 05:30.720
at the beginning, so this is before what we did this year,

05:30.720 --> 05:31.560
right?

05:31.560 --> 05:33.920
Starting in June, we started working on this

05:33.920 --> 05:36.080
with the people I already mentioned,

05:36.080 --> 05:38.200
and now we settled to this point

05:38.200 --> 05:40.360
and this is already in LiveWoodstrap

05:40.360 --> 05:43.560
and we have it in Geeks, in Core Updates branch,

05:43.560 --> 05:45.680
this is already upstream to Geeks.

05:45.680 --> 05:49.680
So until here, everything works, so thank you very much.

05:49.680 --> 05:54.680
Good, so this part we already tested in Adobe Machine,

05:57.920 --> 06:00.720
this part we tested in Adobe Machine in real hardware,

06:00.720 --> 06:04.880
in RISC-V board we have, and this also works,

06:04.880 --> 06:08.960
this GCC 4.6 compiling stuff for RISC-V.

06:09.000 --> 06:12.440
So a compiler that was written before this architecture

06:12.440 --> 06:13.920
was invented is compiling to that,

06:13.920 --> 06:16.800
so that's also very nice, we have it, yeah?

06:17.800 --> 06:19.760
So this is more or less what we did.

06:20.880 --> 06:25.880
So there are problems though, the arrows here

06:25.880 --> 06:30.040
are still red, I don't like that.

06:30.040 --> 06:33.120
So why are they, they are still red, why?

06:33.120 --> 06:38.120
So TinyCC request some changes in the C library

06:38.200 --> 06:41.720
where we have here, so we need to change those

06:41.720 --> 06:43.320
to make them work, right?

06:44.480 --> 06:48.760
Also, the old GCC requires make,

06:48.760 --> 06:51.120
which I managed to compile the other day.

06:51.120 --> 06:56.080
And it requires some other stuff, right?

06:56.080 --> 06:59.040
It requires patch, we also need G-SIP,

06:59.040 --> 07:01.160
which I didn't have the time to compile,

07:01.160 --> 07:02.280
and some other things.

07:02.280 --> 07:05.400
So also this jump is going to be kind of complex

07:05.400 --> 07:09.880
because GCC really has a very complex build system,

07:09.880 --> 07:13.720
maybe you tried, it's a really complicated thing, right?

07:13.720 --> 07:18.720
So it should just work, but it probably won't.

07:21.840 --> 07:25.680
So, questions now, and I have some extra slides for later,

07:25.680 --> 07:27.920
but anyone has any question?

07:27.920 --> 07:29.280
No?

07:29.280 --> 07:31.300
No, okay, extra slides.

07:32.160 --> 07:34.880
So we had some limitations in the backboard we did,

07:34.880 --> 07:37.640
and this is what we have been playing with

07:37.640 --> 07:38.720
since June this year.

07:38.720 --> 07:40.560
So when I made the backboards,

07:40.560 --> 07:43.560
I was working only using a cross compiler.

07:43.560 --> 07:46.200
So if you're working on a cross compiler setup

07:46.200 --> 07:49.280
from x86 compiling stuff for RISC-5,

07:49.280 --> 07:51.800
you are going to have a lot of problems, why?

07:51.800 --> 07:54.920
Well, first of all, you have the bootstrapping problem

07:54.920 --> 07:57.120
we're going to show in the next slide.

07:57.120 --> 08:00.160
And also, I was using G-Lipsy,

08:00.160 --> 08:02.200
which is a very powerful Lipsy,

08:02.200 --> 08:04.280
and we don't have that in the bootstrapping process.

08:04.320 --> 08:07.200
There's no Lipsy, so we need to play around

08:07.200 --> 08:09.680
with all the stuff we have, like Meslipsy,

08:09.680 --> 08:12.960
which is written by us, so it's probably not going to be great.

08:15.520 --> 08:17.160
We're not that good after all.

08:17.160 --> 08:20.800
So also, there's the RISC-5 assembly issue.

08:20.800 --> 08:23.520
In TinyCC, the RISC-5 assembly they have,

08:23.520 --> 08:26.360
it doesn't use the same syntax as gas does.

08:26.360 --> 08:29.920
So our library was expecting a gas syntax,

08:29.920 --> 08:31.800
and this doesn't provide that.

08:31.840 --> 08:34.640
And also, it doesn't support the extended assembler.

08:34.640 --> 08:39.120
So we can't really mix very well C code with assembly code,

08:39.120 --> 08:41.320
and we need to play around with all the variables,

08:41.320 --> 08:44.120
protect them, and make all those things

08:44.120 --> 08:47.600
we have to do by hand, and that's a problem.

08:47.600 --> 08:49.960
So this is how TCC is built.

08:49.960 --> 08:53.560
The graph I showed you before is just a lie,

08:53.560 --> 08:54.680
but it's a good lie.

08:54.680 --> 08:57.200
So this is how it works.

08:57.200 --> 08:59.360
We first build Meslipsy,

08:59.360 --> 09:03.160
we take some part of the code of the TinyCC boot,

09:03.160 --> 09:05.440
and with that we build this one,

09:05.440 --> 09:07.480
and with that we build this one,

09:07.480 --> 09:09.760
and we change the flags of the code

09:09.760 --> 09:11.320
so we add more features.

09:11.320 --> 09:13.080
With that one, we build another one.

09:13.080 --> 09:15.400
We take the code again, we build another one.

09:15.400 --> 09:18.200
We do these six times, and then,

09:19.200 --> 09:21.400
of course, all these steps will need to work.

09:21.400 --> 09:25.040
There is a lot of bash, bash glue code in the middle

09:25.040 --> 09:28.120
to make all this happen, and you have to fix that too.

09:28.120 --> 09:31.560
And fixing very old bash code we did for this kind of thing

09:31.560 --> 09:34.760
is even harder than reading the compiler, but anyway.

09:34.760 --> 09:39.000
So then we check that this one and this one are the same.

09:40.320 --> 09:43.240
In the binary level, they have to be exactly the same.

09:43.240 --> 09:46.920
That means the compiler is not adding new stuff,

09:46.920 --> 09:48.520
so we have settled.

09:48.520 --> 09:50.680
So we can just continue with those.

09:51.640 --> 09:54.760
My colleague, Andrews, already tested

09:54.760 --> 09:57.720
that we are already settling the fourth iteration,

09:57.720 --> 10:00.280
but we do six because we did six

10:00.280 --> 10:02.160
and we don't want to change.

10:02.160 --> 10:03.000
They did.

10:03.840 --> 10:07.560
In live bootstrap, they only do four, right?

10:07.560 --> 10:09.760
So problems with GCC.

10:09.760 --> 10:12.320
I only tested, again, as a cross compiler the last year

10:12.320 --> 10:16.520
because I only wanted to see that it was able

10:16.520 --> 10:18.480
to compile things for RISC-5.

10:19.520 --> 10:23.920
And again, I wasn't doing the bootstrapping process of GCC.

10:23.920 --> 10:26.520
GCC does internally, when you build GCC by hand,

10:26.520 --> 10:28.760
they do a similar thing.

10:28.760 --> 10:31.400
They take all the code base of GCC,

10:31.400 --> 10:35.080
they create a previous GCC, then they take the code,

10:35.080 --> 10:37.400
they compile it again with the GCC they created,

10:37.400 --> 10:39.400
and then again, and then they compare.

10:39.400 --> 10:41.000
So I wasn't able to do that.

10:42.240 --> 10:44.520
And I didn't work in the C++ support either.

10:45.520 --> 10:49.320
So the work we did, we started with tiny CC boot,

10:49.320 --> 10:51.320
and we started working on top of it.

10:51.320 --> 10:54.920
We had to read, we spent many times, many nights,

10:54.920 --> 10:57.200
debugging crazy things, and also because

10:57.200 --> 10:59.640
Andrew has a real job, not like me.

10:59.640 --> 11:03.160
So we need to coordinate to do these kind of things.

11:03.160 --> 11:04.920
It was really hard.

11:04.920 --> 11:07.560
So also we don't have debug symbols

11:07.560 --> 11:09.600
because our compiler is very simple,

11:09.600 --> 11:11.400
and implementing that takes a lot of time,

11:11.400 --> 11:12.760
and it's difficult.

11:12.760 --> 11:16.080
So we do all of this like one hand here.

11:16.080 --> 11:19.040
It's very hard to do with one hand and also blindfolded.

11:19.040 --> 11:21.640
So, but we managed to do that.

11:21.640 --> 11:23.440
I wouldn't have the energy to do this without Andrew,

11:23.440 --> 11:24.520
so thank you, Andrews.

11:25.520 --> 11:27.760
Also, well, these are some errors,

11:27.760 --> 11:29.640
I explained them in my blog,

11:29.640 --> 11:33.000
then or later you can come and ask me about them.

11:33.000 --> 11:35.640
This is a lot of fun because the body was never executed

11:35.640 --> 11:39.200
for any X, it didn't matter.

11:39.200 --> 11:42.920
This happens a lot in RISC-5, sorry, in TCC,

11:42.920 --> 11:46.480
and in our backend, it exploded.

11:46.480 --> 11:47.840
Why?

11:47.840 --> 11:49.840
Because this is undefined behavior,

11:49.840 --> 11:52.680
and all the compiler was based on this.

11:52.680 --> 11:54.840
So they used these to clear bits,

11:54.840 --> 11:58.040
and we needed to check all the appearances of this

11:58.040 --> 11:59.280
and fix them all.

11:59.280 --> 12:01.560
So, funny stuff.

12:01.560 --> 12:03.520
Yeah, and many other things we found a lot.

12:03.520 --> 12:05.240
So you can read about them there.

12:05.240 --> 12:08.560
There's a very long explanation about all of that.

12:08.560 --> 12:11.480
Yeah, so we finally managed to build it, we have it,

12:11.480 --> 12:13.800
we have a recipe in Laboodstrap and in Geeks.

12:15.120 --> 12:15.960
Yeah.

12:15.960 --> 12:19.160
So, about mess.

12:19.160 --> 12:21.360
We had all the stuff in mess because it was affected

12:21.360 --> 12:23.520
by our work in TCC boot,

12:23.520 --> 12:25.400
so we started fixing stuff.

12:25.400 --> 12:26.720
Why there were errors in mess?

12:26.720 --> 12:28.840
Obviously because we were not perfect.

12:28.840 --> 12:31.840
Yannick almost is, but still.

12:31.840 --> 12:34.080
We had some issues because the bootstrapping process

12:34.080 --> 12:38.200
of I386 didn't use all the C constructs

12:38.200 --> 12:41.240
that appeared in RISC-5, so it started fixing many things,

12:41.240 --> 12:43.200
like the switch cases, they were wrong.

12:44.080 --> 12:46.360
The initialization of the structures

12:46.360 --> 12:48.960
were initialized to 22, I don't know why.

12:48.960 --> 12:50.360
So, these kind of things.

12:50.360 --> 12:52.880
And I am almost there.

12:52.880 --> 12:54.280
Well, TCC is the same.

12:54.280 --> 12:56.560
We finally managed to compile it in a different machine,

12:56.560 --> 12:58.280
with C++ support, all of that.

12:58.280 --> 12:59.280
Okay, fantastic.

12:59.280 --> 13:01.040
So, last words.

13:01.040 --> 13:03.280
So, people is important.

13:03.280 --> 13:05.640
If you're alone, you don't work well.

13:05.640 --> 13:10.360
I had issues, I was like completely depressed, burnout.

13:10.360 --> 13:12.240
So, bringing people, giving me energy,

13:12.240 --> 13:15.720
the knowledge I lack, and emotional support, good stuff.

13:16.640 --> 13:18.200
Also, money is important.

13:19.880 --> 13:22.720
You all know this, but if you're getting paid,

13:22.720 --> 13:25.360
you work better, you don't feel stressed,

13:25.360 --> 13:28.720
you are not just trying to eat the next day,

13:28.720 --> 13:31.960
to just get paid, do your work, that's fine, that's good.

13:31.960 --> 13:32.860
You can focus.

13:34.080 --> 13:38.120
So, thank you to Andrews, to Janneke,

13:38.120 --> 13:39.720
also on the net for the money.

13:41.720 --> 13:43.240
And you for listening.

13:43.240 --> 13:44.080
Thank you.

13:44.080 --> 13:45.360
And it's our question.

13:45.360 --> 13:47.360
I don't know if we are in time.

13:47.360 --> 13:48.960
We have time for questions.

13:48.960 --> 13:49.800
Okay.

13:49.800 --> 13:51.040
We'll set off to the data.

13:51.040 --> 13:51.880
Questions?

13:53.880 --> 13:56.120
Regarding both the people and the money,

13:56.120 --> 13:58.320
will you be continuing your work?

13:58.320 --> 14:00.680
Yeah, so regarding money, the people and all that,

14:00.680 --> 14:02.520
will I continue with the project?

14:02.520 --> 14:03.360
I'm not sure.

14:03.360 --> 14:04.200
I'm not sure.

14:04.200 --> 14:05.520
I don't think I'll be doing it.

14:05.520 --> 14:06.360
I don't think so.

14:06.360 --> 14:07.200
I don't think so.

14:07.200 --> 14:08.040
I don't think so.

14:08.040 --> 14:08.880
I don't think so.

14:08.880 --> 14:09.720
I don't think so.

14:09.720 --> 14:10.560
I don't think so.

14:10.560 --> 14:11.400
I don't think so.

14:12.040 --> 14:14.160
Will I continue with the project?

14:14.160 --> 14:17.520
We have funding and stuff to do still,

14:17.520 --> 14:20.040
until I think the project finishes in one year.

14:20.040 --> 14:21.400
So we're starting in June.

14:21.400 --> 14:23.360
So until June, we're going to continue.

14:23.360 --> 14:24.240
I'm still working on it.

14:24.240 --> 14:26.880
I have, most of the budget is not spent

14:26.880 --> 14:29.680
because we need to finally combine until GCC.

14:29.680 --> 14:33.240
So the project is to...

14:41.400 --> 14:46.560
June, we're going to go.

14:46.560 --> 14:48.240
Yeah.

14:48.240 --> 14:50.720
More?

14:50.720 --> 14:51.120
No?

14:51.120 --> 14:52.920
Yeah?

14:52.920 --> 14:55.440
I was listening to a ZIP project.

14:55.440 --> 14:57.520
It's used an interesting approach to this,

14:57.520 --> 14:59.840
where they use WebAssembly.

14:59.840 --> 15:00.600
So how is it working?

15:00.600 --> 15:03.840
Your project was you use the latest GCC

15:03.840 --> 15:05.960
to compile GCC to WebAssembly.

15:05.960 --> 15:07.840
And then your problem on risk five,

15:07.840 --> 15:10.080
is you just need to bootstrap a WebAssembly runtime,

15:10.080 --> 15:13.000
which is very small, to run GCC on risk five.

15:13.000 --> 15:14.920
Do you think this kind of approach might work

15:14.920 --> 15:16.320
in your environment, or is that just

15:16.320 --> 15:18.080
very specific to SIG's problem?

15:18.080 --> 15:21.320
So the question is around how the people at SIG

15:21.320 --> 15:23.240
resolved their issue with the bootstrapping.

15:23.240 --> 15:26.880
And they are yet using a WebAssembly environment stuff.

15:26.880 --> 15:32.360
And if we can do the same, or if that makes sense in this.

15:32.360 --> 15:35.840
So our idea of this is that we want to build everything

15:35.840 --> 15:38.520
from source in your machine.

15:38.520 --> 15:39.080
Why?

15:39.080 --> 15:40.920
Because if you get a Linux distribution,

15:40.920 --> 15:43.320
you download a Vivian or whatever from the internet,

15:43.320 --> 15:45.400
you are getting a lot of binary blobs.

15:45.400 --> 15:47.960
So the idea is just to get the source.

15:47.960 --> 15:51.760
So that's not very compatible with the approach

15:51.760 --> 15:54.840
you are proposing, because you won't get sources.

15:54.840 --> 15:58.080
You will get some kind of a wasn't thinking.

15:58.080 --> 15:59.880
And that's not easy to inspect.

15:59.880 --> 16:02.880
So what we have here is that you can inspect everything,

16:02.880 --> 16:06.320
starting from a very small binary that

16:06.320 --> 16:08.600
is written with comments, so you can read the comments

16:08.600 --> 16:10.400
on the binary that the bootstraps everything.

16:10.400 --> 16:13.080
So the idea is philosophically different.

16:13.080 --> 16:16.320
And I'm a little bit upset with the problem with SIG,

16:16.320 --> 16:18.840
because I really like the language.

16:18.840 --> 16:22.480
And now adding this wasn't thinking in the middle

16:22.480 --> 16:26.200
is making us very difficult to add SIG to Giggs,

16:26.200 --> 16:31.040
because we will have this kind of binary in there.

16:31.040 --> 16:33.320
And we don't really like that, because we want everything

16:33.320 --> 16:34.360
to be sourced.

16:34.360 --> 16:36.360
But yeah, the idea is good.

16:36.360 --> 16:40.920
But philosophically, it doesn't match with what we are doing.

16:40.920 --> 16:43.320
Any other time for another one?

16:43.320 --> 16:43.960
Piot?

16:43.960 --> 16:44.460
Yeah.

16:48.280 --> 16:48.760
No more?

16:48.760 --> 16:49.240
OK.

16:49.240 --> 16:50.040
Right?

16:50.040 --> 16:50.720
Thank you.

16:50.720 --> 16:51.240
Thank you, guys.

16:55.240 --> 16:57.000
You have one, Piot.

16:57.000 --> 16:58.160
OK, you have one.

16:58.160 --> 16:58.800
Sorry.

16:58.800 --> 17:00.600
What about the arm board?

17:00.600 --> 17:01.320
The arm.

17:01.320 --> 17:01.920
I don't know.

17:01.920 --> 17:02.800
I'm not sure.

17:02.800 --> 17:06.200
Maybe you should ask another people here, like Danny.

17:06.200 --> 17:11.480
But everything we are doing, the RISC-5 board we are doing

17:11.480 --> 17:12.840
is 64-bit.

17:12.840 --> 17:15.800
It's going to affect all the other 64-bit architecture.

17:15.800 --> 17:20.600
So we are doing advances in X, 66, 64, and ARM,

17:20.600 --> 17:21.400
and all things.

17:21.400 --> 17:23.680
So yeah.

17:23.680 --> 17:24.760
Yeah, shoot.

17:24.760 --> 17:25.760
Shoot.

17:25.760 --> 17:26.640
All yours.

17:26.640 --> 17:27.400
Yeah.

17:27.400 --> 17:30.680
So for the arm board, we got as far as compiling tiny CCC,

17:30.680 --> 17:33.400
and that one compiles an old GCC.

17:33.400 --> 17:35.840
And that old GCC has a lot of problems

17:35.840 --> 17:36.680
that are well known.

17:36.680 --> 17:40.080
Nokia had a lot of fun back then with these bugs.

17:40.080 --> 17:44.200
And so we are waiting for you to update GCC,

17:44.200 --> 17:46.680
and hopefully that fixes everything.

17:46.680 --> 17:47.680
So.

17:47.680 --> 17:48.680
Yeah.

17:48.680 --> 17:49.680
Yeah.

17:49.680 --> 17:50.680
Yeah.

17:50.680 --> 17:51.680
Yeah.

17:51.680 --> 17:52.680
Yeah.

17:52.680 --> 17:53.680
Yeah.

