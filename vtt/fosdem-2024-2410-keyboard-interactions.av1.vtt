WEBVTT

00:00.000 --> 00:14.840
So, hello everyone. My name is Patricia. I'm very excited and happy to be here. Just quick

00:14.840 --> 00:24.780
disclaimer about me. I am Chromium contributor and today I'm going to present about keyboard

00:24.780 --> 00:32.100
interactions and how I tried to improve them. So quickly about myself, I am from Vilnius,

00:32.100 --> 00:39.420
Lithuania. I moved to the Netherlands to study computer science and during my studies I really

00:39.420 --> 00:47.540
got into open source, specifically through the Google Summer Code program. In 2022 I

00:47.540 --> 00:54.100
worked on the definition of the INP metric and I continue my work diving deeper into

00:54.100 --> 00:59.900
metrics, interactions and specifically into keyboard interactions that I will explain

00:59.900 --> 01:11.620
you today. So about 2022 I worked on the Perfetto tool which is a wonderful tool for developers

01:11.620 --> 01:17.460
but I won't get into details here because Alexander in few moments will explain everything

01:17.460 --> 01:25.700
you need to know. But how I use it to this day, I trace websites with DevTools Timeline

01:25.700 --> 01:33.900
check mark and it gives me all necessary information about interactions and specifically event timings.

01:33.900 --> 01:44.780
And we know when we have event timings we can get anything about INP metric. So what

01:44.780 --> 01:56.340
is INP metric that was already mentioned? It is a very I think popular metric today but

01:56.340 --> 02:02.780
it's simply an interaction to next pain metric that assesses responsiveness by measuring key

02:02.780 --> 02:09.620
press, tap and click interactions. So for example when you press a key on a virtual or

02:09.620 --> 02:18.180
physical keyboard or tap on a touch screen or click a mouse to open any menu on a website

02:18.180 --> 02:29.060
everything is measured for developers to see how fast their website responds to users input.

02:29.060 --> 02:42.380
And this definition is actually I think wonderful, very innovative and Google since Google announced

02:42.380 --> 02:48.940
it very recently that it's going to replace first input delay this March 12th which is

02:48.940 --> 02:57.500
very exciting for that performance group. However after looking better into the metric

02:57.700 --> 03:06.300
we found out that it's not entirely perfect although it's very wonderful metric but specifically

03:06.300 --> 03:15.260
key press interactions aren't working as we would like them to work. So my goal today

03:15.260 --> 03:22.260
is to explain how we improve key press interactions, what is firstly a key press interaction and

03:22.340 --> 03:27.540
how we measure them and then we will dive deeper into a bit more complex concepts of

03:27.540 --> 03:39.620
non-standard interactions such as emojis and how we measure them for the INP. So I guess

03:39.620 --> 03:46.980
this lines brings you to kindergarten especially considering the FOSDEM context of very heavy

03:46.980 --> 03:54.860
tech topics but to understand what is a key press interaction we really need to look into

03:54.860 --> 04:03.700
a simple button because key is just a button but in a more complex context. So when you

04:03.700 --> 04:11.220
press any button in this world button goes down and when you release it buttons button

04:11.260 --> 04:22.260
goes up. It's just that simple. So within the key press we have very similar behavior that

04:22.260 --> 04:30.740
contains the two fundamental events key down and key up. In this example we have one interaction

04:30.740 --> 04:41.180
as in the input we see character A and the entire interaction starts with the first event

04:41.220 --> 04:46.900
called key down meaning that user press down a key. We immediately generate interaction

04:46.900 --> 04:55.900
ID for that saying okay we start the interaction. After key down there is key press event which

04:55.900 --> 05:02.580
is dispatched if and only if there is a character value and we see that in this case we do have

05:02.580 --> 05:10.220
character value and it means that key value was mapped to a specific key. So for example

05:10.260 --> 05:17.580
if you would press anything that wouldn't produce a character value you wouldn't see a key press.

05:17.580 --> 05:25.940
Then we have some events about DOM so before input which means that the DOM is about to be

05:25.940 --> 05:34.180
updated input which is the immediately dispatched when DOM is updated and lastly we finish the

05:34.220 --> 05:42.460
interaction with the key up to which we assign the very same interaction ID as it was generated

05:42.460 --> 05:51.020
on the key down. And although this definitely makes sense and most importantly key down

05:51.020 --> 05:57.580
and key up are the most significant events in the interaction that you perhaps have already

05:57.620 --> 06:09.540
seen. So this sequence gives us the entire definition of keyboard interaction within the INP. So it

06:09.540 --> 06:18.660
contains of three time spans as in the click and click and tap interactions but in this case we

06:18.660 --> 06:26.900
have input delay, processing time and presentation delay. So input delay is the time when is the

06:26.900 --> 06:35.060
duration when user presses down a key and event handlers are executed. Processing time is the

06:35.060 --> 06:42.980
time it takes for the code to be executed in the key down and key up event handlers and finally we

06:42.980 --> 06:50.060
have presentation delay which is the entire duration when the event handlers are stopped

06:50.260 --> 06:57.140
being executed and we finally see something on our frame. And this definition definitely does make

06:57.140 --> 07:07.020
sense. However it had some problems. After better investigation we found out that it can be a bit

07:07.020 --> 07:16.700
more than confusing. Firstly having key press events interaction ID equals zero makes developers

07:16.740 --> 07:27.220
wonder if key press is related to keyboard interaction at all. And to make things worse it turned out

07:27.220 --> 07:35.100
that key press can be as large as key up and key down together. Just a second.

07:35.100 --> 07:52.860
So with this problem we updated keyboard interaction, the definition of the keyboard interaction and we

07:52.860 --> 08:01.500
have that the new update is very similar. It all contains those three time spans of input delay,

08:01.740 --> 08:08.740
processing time and presentation delay. However for the processing time we included key press such

08:08.740 --> 08:19.140
that it would be between those three candidates of key down, key press and key up at the end. And we

08:19.140 --> 08:29.820
really hope that this will remove some confusion for developers as we assign interaction ID to the

08:29.820 --> 08:38.620
key press event. And finally we do believe that including key press is a step towards polished,

08:38.620 --> 08:48.580
improved and more accurate IMP metric especially within the keyboard interactions. Well with the

08:48.580 --> 08:56.220
simple key press is everything is quite well defined. We know where the start is and we know

08:56.340 --> 09:03.180
where we finish the interactions. However more interesting things happen with non-standard keyboard

09:03.180 --> 09:09.460
interactions because we cannot be sure that our users will always use just standard keyboard

09:09.460 --> 09:17.540
interactions. I even came across this post from Instagram on Google's Instagram that has everything

09:17.540 --> 09:24.540
to express one idea from emojis to just basic symbols. And to understand how fast the website

09:24.580 --> 09:32.140
responds to such input we really need to dive deeper into input method editors. So what is,

09:32.140 --> 09:42.620
does anyone know what is input method editor? That's great. So actually I think most of you

09:42.620 --> 09:51.100
might have used in some sort of way. It's a software component that enables users to input

09:51.340 --> 09:59.180
text that cannot be easily represented on a standard keyboard. So it typically happens due to the

09:59.180 --> 10:07.820
very large number of characters in users' written language. And it's very common in East Asia

10:07.820 --> 10:15.620
regions for example Korean language, Chinese language and Japanese language. Although I would love

10:15.660 --> 10:21.500
to speak Korean, Japanese and Chinese unfortunately I cannot. So today we will look into a bit more

10:21.500 --> 10:30.380
standardized example of simple emoji which has very similar structure. So we already can see

10:30.380 --> 10:37.260
that we need to process way more events for one emoji than for simple key press. And however

10:37.340 --> 10:47.340
everything actually depends how many interactions were made while producing that emoji. In this case

10:47.340 --> 10:57.220
we see that users started by typing in H and then selected the emoji as you can see on your left

10:57.860 --> 11:06.820
screen example. Since the complexity is way higher of such interactions IDs we only assign

11:06.820 --> 11:18.260
interaction ID to input events. But thinking in general the differences between pressing down a

11:18.340 --> 11:27.780
key within emoji context and non-emoji context we find out that we still have those very important

11:27.780 --> 11:38.380
two fundamental events key down and key up. So with our updates we assigned interaction ID

11:38.380 --> 11:47.100
on key down and key up. We still start our interactions with the key down. We generate new

11:47.140 --> 11:54.940
interaction ID on key down then assign the same interaction ID to input event and we finish that

11:54.940 --> 12:03.540
key press interaction in the emoji context with the key up event. When users just select the emoji

12:03.540 --> 12:14.220
without typing we just simply assign interaction ID to the input event. And that gives us better

12:14.460 --> 12:26.820
understanding of how non-standard interactions behave. However the algorithm really requires some

12:26.820 --> 12:35.980
creativity and some better understanding. But coming up with the solution for something that

12:35.980 --> 12:41.940
does not behave in the same way was quite a challenge and the solution might not be most

12:41.980 --> 12:51.100
perfect because it heavily relies on the order of events dispatched. And for example we see here

12:51.100 --> 12:58.980
that when we hold three keys at the very same time and release them at the very same time we have

12:58.980 --> 13:07.460
three key ups at the very end with the exact same interaction IDs. And this shouldn't happen in

13:07.620 --> 13:16.220
general. They should have different interaction IDs. But although it might not be the perfect

13:16.220 --> 13:26.700
solution but looking into input method editors is a very important way to address web responsiveness

13:26.700 --> 13:34.420
within East Asia regions where people actually do use a lot of graphemes in Chinese, Korean and

13:34.460 --> 13:42.260
Japanese languages. And who knows maybe just all our emojis are just introduction to a bit more

13:42.260 --> 13:52.460
complex interactions. Maybe one day we will see 3D interactions and emojis will be just simple

13:52.460 --> 14:03.940
ones. So for this project I'm really grateful for my mentors and I call them heroes. They really

14:03.980 --> 14:11.780
helped me through the entire process of understanding interactions, defining INP and

14:11.780 --> 14:22.020
understanding how to improve web responsiveness for developers. And thank you a lot for listening.

14:22.020 --> 14:29.540
If you have any questions let me know and if you're interested you can read the blog or just ask me

14:30.140 --> 14:32.020
anything you want. Thank you.

14:40.020 --> 14:44.980
And do you have? Yeah.

14:44.980 --> 15:06.740
Yeah basically, so do the interactions go from top to bottom? So it's actually it really depends

15:07.500 --> 15:18.700
on the way we see on the websites. And there's like websites that shows all the events dispatched

15:18.700 --> 15:24.500
and it starts from top to bottom and maybe it's not the most intuitive way for you to read from

15:24.500 --> 15:34.260
top, I mean from bottom to top, right? But is the usual order that what you would get when you

15:34.300 --> 15:42.980
try to look into the events dispatched during keyboard interactions? So yeah, I mean yeah,

15:42.980 --> 15:50.220
this was from bottom to top, absolutely. Okay, thank you.

