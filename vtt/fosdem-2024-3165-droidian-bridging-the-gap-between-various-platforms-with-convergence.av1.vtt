WEBVTT

00:00.000 --> 00:22.580
On ways.

00:22.580 --> 00:25.580
So.

00:25.580 --> 00:33.220
So thank you all for coming.

00:33.220 --> 00:36.380
The next talk is about Droidian from Bardia.

00:36.380 --> 00:47.580
Please give a big round of applause.

00:47.580 --> 00:50.100
Good afternoon, everyone.

00:50.100 --> 00:52.100
And welcome.

00:52.100 --> 00:55.380
My name is Bardia, as you've heard.

00:55.380 --> 00:59.900
And if you've been following our project,

00:59.900 --> 01:03.740
know me as Fake Shell in the community.

01:03.740 --> 01:10.180
And I'm one of the core devs of the Droidian project.

01:10.180 --> 01:15.260
And if you have any interest in embedded systems, mobile

01:15.260 --> 01:20.020
devices, that's why we're here, obviously.

01:20.020 --> 01:23.700
You might be particularly interested.

01:23.700 --> 01:28.660
So today, our topic of discussion

01:28.660 --> 01:34.940
is going to be Droidian and what we're doing,

01:34.940 --> 01:38.340
how everything works, and how everything goes together,

01:38.340 --> 01:40.460
and why the whole project even works.

01:46.740 --> 01:49.100
No, I'm sure.

01:49.100 --> 01:51.700
Like I said, I'm prepared for that.

01:51.700 --> 01:53.300
OK.

01:53.300 --> 01:56.740
So who are we?

01:56.740 --> 02:02.300
Well, we're a number of fos and privacy enthusiasts

02:02.300 --> 02:04.580
committed in building a free and open source

02:04.580 --> 02:11.300
project and operating system that is user friendly and open

02:11.300 --> 02:13.820
that can be utilized in different environments,

02:13.820 --> 02:18.140
such as phones, maybe even single board computers, et cetera.

02:18.140 --> 02:21.860
Tablets, different things.

02:21.860 --> 02:29.980
So Droidian is, as the name states, based on Debian.

02:29.980 --> 02:34.940
We take the core of Debian and add our own repository

02:34.940 --> 02:38.660
on top of it and add our own so-called finishing touches.

02:41.340 --> 02:45.980
So Droidian utilizes a number of different projects.

02:48.140 --> 02:50.780
Should I go down like this?

02:50.780 --> 02:52.260
OK.

02:52.260 --> 02:52.980
That's too far.

02:57.260 --> 02:59.900
OK, I messed it up.

02:59.900 --> 03:04.060
So Droidian utilizes a number of different projects.

03:04.060 --> 03:09.500
Some of the more well-known projects are Hallyum.

03:09.500 --> 03:14.060
We use lip hybris and Gbinder from Joly.

03:14.100 --> 03:21.140
We use the stack from GNOME, as you guys may know, Fosh.

03:21.140 --> 03:28.220
And we currently have a selection of devices

03:28.220 --> 03:36.860
supported in our official CI or build system.

03:36.860 --> 03:39.540
And I think it should be over 20.

03:39.540 --> 03:40.980
We haven't updated that device page,

03:40.980 --> 03:42.260
so it's not exactly up to date.

03:42.260 --> 03:46.060
It should be 25 or 26.

03:46.060 --> 03:52.660
So devices vary pretty largely from different manufacturers.

03:52.660 --> 03:55.340
Different release states.

03:55.340 --> 03:57.860
We have the OnePlus 3 from 2016.

03:57.860 --> 04:04.940
We have the Pixel 3a, the FX-Stack phones, the Galaxy S9,

04:04.940 --> 04:06.540
Lenovo Think phone.

04:06.540 --> 04:08.340
Like, the list goes on and on.

04:08.340 --> 04:14.300
So the barrier of entry for getting into Droidian and

04:14.300 --> 04:17.020
development and porting is fairly low, because there's

04:17.020 --> 04:20.700
already a number of devices that do exist.

04:20.700 --> 04:25.660
And they mostly cover most of the possible cases in the

04:25.660 --> 04:28.380
Android space.

04:28.380 --> 04:34.820
So for Droidian, one of the main things that people who just

04:34.820 --> 04:38.500
get to the project need to know about is our porting guide.

04:38.500 --> 04:41.900
So the porting guide is mostly split into three sections.

04:41.900 --> 04:43.380
It's the kernel compilation guide.

04:43.380 --> 04:46.180
It's the Routefest debugging and Routefest creation.

04:46.180 --> 04:50.540
Kernel compilation is going to be the initial testing and

04:50.540 --> 04:53.340
compiling, changing a few parameters in the kernel, and

04:53.340 --> 04:57.380
packaging it to get a Debian output, because we need Debian

04:57.380 --> 05:02.140
packages to do over-the-air app kernel updates.

05:02.140 --> 05:06.700
We have Routefest debugging, which occurs after the phone

05:06.700 --> 05:10.340
actually boots into the Droidian root file system.

05:10.340 --> 05:13.900
And last but not least is Routefest creation, because we

05:13.900 --> 05:18.740
obviously need to somehow get built for each device.

05:22.300 --> 05:29.900
So how do we actually get from Android to Linux, or so what

05:29.900 --> 05:32.100
we call Linux?

05:32.180 --> 05:39.620
So on Android, there's usually the bootloader, LK,

05:39.620 --> 05:42.820
loading the kernel, kernel loading the RAM disk.

05:42.820 --> 05:47.780
And the RAM disk does everything to start up the

05:47.780 --> 05:51.420
inner process of the system partition to actually start

05:51.420 --> 05:52.820
the system.

05:52.820 --> 05:55.660
And then system mounts a bunch of stuff, mounts product

05:55.660 --> 05:58.700
now to vendor, and a bunch of other garbage.

05:58.740 --> 06:03.100
So on Droidian, we take the same kernel that there was on

06:03.100 --> 06:09.540
Android, and we change the RAM disk.

06:09.540 --> 06:15.900
We have a modified fork of the Hallym RAM disk, which the

06:15.900 --> 06:18.700
Hallym project and UBPORs used to maintain.

06:18.700 --> 06:23.740
Now, in our fork, we have some support for a bunch of stuff

06:23.740 --> 06:28.660
that we use that is not in the upstream Hallym RAM disk.

06:28.700 --> 06:33.780
The Hallym RAM disk mounts the user data partition, which is

06:33.780 --> 06:36.380
where Droidian actually resides.

06:36.380 --> 06:40.580
We don't use system, which is kind of a basis base, but it

06:40.580 --> 06:43.380
is what it is.

06:43.380 --> 06:45.020
It mounts user data.

06:45.020 --> 06:47.580
It does a bunch of Android bootloader stuff to get

06:47.580 --> 06:49.020
everything up and running.

06:49.020 --> 06:55.140
And it starts in it, which is system D, obviously.

06:55.140 --> 07:03.860
So now system D starts, and system D starts up all the

07:03.860 --> 07:04.660
usual services.

07:04.660 --> 07:08.100
We have system D time sink, the system D resolve, and all the

07:08.100 --> 07:09.620
other stuff.

07:09.620 --> 07:14.540
But then we have our own services from system D. We have

07:14.540 --> 07:20.660
a service that starts a very small container that runs

07:20.660 --> 07:21.980
Android.

07:21.980 --> 07:28.780
And that Android starts and mounts a bunch of partitions,

07:28.780 --> 07:32.140
Android partitions, modem, and everything that the

07:32.140 --> 07:34.500
firmware and the drivers need.

07:34.500 --> 07:39.580
And the vendor script starts, the system GSI script starts,

07:39.580 --> 07:42.620
and we get all the drivers loaded, all the firmware

07:42.620 --> 07:46.780
loaded, and a bunch of interfaces start from Android.

07:46.780 --> 07:55.060
Now, then we have the usual file system of Debian.

07:55.060 --> 07:56.340
There's the user interface.

07:56.340 --> 08:00.540
There's like, file feedback, the end-to-rest.

08:00.540 --> 08:05.340
So from the Android services, we have hardware composer,

08:05.340 --> 08:09.700
which we use for compositing to the screen.

08:09.700 --> 08:11.500
We have audio flinger.

08:11.500 --> 08:12.580
Well, not exactly audio flinger.

08:12.580 --> 08:15.300
It's Droid media, but ignore that.

08:15.300 --> 08:18.060
We have Droid media for audio and camera.

08:18.060 --> 08:23.580
We have the radio interface layer for us name states radio.

08:23.580 --> 08:26.420
And a bunch of other services, lip, perf, manager for power,

08:26.420 --> 08:29.380
NXP, NFC, et cetera.

08:29.380 --> 08:32.220
So all the communication that we do from the Linux side of

08:32.220 --> 08:35.380
things to the Android side of things is done through

08:35.380 --> 08:39.380
Google's binder pipeline, or the binder IPC.

08:39.380 --> 08:42.580
And we'll explain how we actually use the binder IPC, how

08:42.620 --> 08:47.740
we actually communicate with it directly to the interfaces.

08:51.220 --> 08:55.380
So from the Linux services, everything looks familiar kind

08:55.380 --> 08:56.260
of.

08:56.260 --> 08:59.100
There's Fosh, obviously.

08:59.100 --> 09:01.180
There's feedback for feedback.

09:01.180 --> 09:04.740
There's Ophono, kind of ancient.

09:04.740 --> 09:10.140
And because nothing in the modern Linux stack can actually

09:10.140 --> 09:12.460
talk to Ophono, we have Ophono 2MM,

09:12.460 --> 09:15.220
which kind of exposes modern manager interfaces as a drop

09:15.220 --> 09:17.100
in replacement through Ophono.

09:17.100 --> 09:21.380
It's kind of a hack, but we don't talk about that.

09:21.380 --> 09:23.180
Yeah.

09:23.180 --> 09:26.180
So we have Joid.DNFPD.

09:26.180 --> 09:30.180
It's a fork of Sailfish community FPD, which is used

09:30.180 --> 09:31.820
for fingerprints.

09:31.820 --> 09:35.860
We have Call Audio.D as usual for Call Audio.

09:35.860 --> 09:40.140
Again, we have custom backends because Android.

09:40.140 --> 09:44.420
And Pulse Audio, again, ancient, but Android.

09:44.420 --> 09:45.700
And a bunch of other services.

09:45.700 --> 09:48.540
NFC and GeoClue, again, needs its own backend.

09:48.540 --> 09:50.620
But we're going to talk about these later.

09:52.540 --> 10:01.540
So most of the components that we have are not directly used

10:01.540 --> 10:02.180
by the user.

10:02.180 --> 10:06.100
So for camera, which is for Joid media, it's abstracted.

10:06.100 --> 10:08.940
And users just see the Joid.DNFPD camera app.

10:08.940 --> 10:12.300
For modem via Ophono, but users just

10:12.300 --> 10:14.500
see kind of a modem manager sort of imposter.

10:18.180 --> 10:21.860
For fingerprints, this part is completely customized

10:21.860 --> 10:22.780
for Joid.DNFPD.

10:22.780 --> 10:25.220
We just forked the settings.

10:25.220 --> 10:27.540
I haven't had it, everything.

10:27.540 --> 10:33.140
For battery management, Batman, very funny name.

10:33.140 --> 10:35.300
That does the work for battery management.

10:35.300 --> 10:37.580
I started that project as a shell script.

10:37.580 --> 10:38.300
It was a mistake.

10:41.980 --> 10:46.900
So Batman does a bunch of funny stuff, turns off CPU cores,

10:46.900 --> 10:50.580
sets governors, sets power save, whatever.

10:50.580 --> 10:52.100
It doesn't watch nonsense.

10:56.660 --> 10:58.940
And then we have Fosh, which is the user interface.

10:58.940 --> 11:01.460
Again, we maintain our own forcofosh

11:01.460 --> 11:05.900
because sometimes stuff happens, stuff breaks.

11:05.900 --> 11:07.740
We kind of have to maintain our own.

11:07.740 --> 11:09.380
We have bad experiences.

11:09.380 --> 11:10.940
We don't talk about those ones either.

11:10.940 --> 11:12.780
We don't say that in public.

11:12.780 --> 11:15.420
Joid.DNFPD needs to have a good image.

11:15.420 --> 11:17.940
Then we have the encryption service.

11:17.940 --> 11:24.500
Again, a custom tab and settings which uses Lux and LVM2.

11:24.500 --> 11:27.260
And the unlocker, which was, I think, initially developed

11:27.260 --> 11:29.020
for post market OS.

11:29.020 --> 11:31.420
We added a mini UI back end through LVGL.

11:31.420 --> 11:33.460
Again, custom back ends Android.

11:33.460 --> 11:36.540
I mean, it's the usual.

11:36.540 --> 11:41.740
So now how does everything actually go together?

11:41.740 --> 11:45.780
So as we mentioned, we have a bunch of custom back ends.

11:45.780 --> 11:48.380
We have a bunch of custom plugins.

11:48.380 --> 11:53.380
We have the Qt5 camera plugin from the days of, I think,

11:53.380 --> 11:56.100
Canonical, which developed it.

11:56.100 --> 11:58.020
There's the Ofona Binder plugin, which

11:58.020 --> 12:01.020
was developed by Joela, nice of them.

12:01.020 --> 12:03.540
There's a bunch of Pulse Audio modules

12:03.540 --> 12:07.180
that allow us to talk to the audio hell, like Droid Media

12:07.180 --> 12:08.540
itself, not exactly audio.

12:08.540 --> 12:12.540
And get audio through the hardware working, microphone,

12:12.540 --> 12:15.420
speakers, everything.

12:15.420 --> 12:16.980
We have GSTDroid.

12:16.980 --> 12:24.020
Again, talks to Droid Media to give us a nice and shiny Gstreamer

12:24.020 --> 12:25.700
pipeline that we can use for camera.

12:25.940 --> 12:34.180
And well, that's pretty much it.

12:34.180 --> 12:38.460
For back ends, because not for everything,

12:38.460 --> 12:41.900
we can add plugins, not all different pieces of software

12:41.900 --> 12:43.620
accept plugins.

12:43.620 --> 12:48.060
So we kind of had to hard fork a bunch of stuff.

12:48.060 --> 12:50.140
Some of them are not that frequently updated.

12:50.140 --> 12:52.660
So that was good luck for us.

12:52.660 --> 12:54.140
But GeoClue is barely updated.

12:54.140 --> 12:56.540
So we just added the Hypers back end, slap it in,

12:56.540 --> 12:58.100
which just works.

12:58.100 --> 13:00.260
We have the W-Root's Harvest Composer back end.

13:00.260 --> 13:01.780
I don't even know who started that.

13:01.780 --> 13:06.220
I know a bunch of people are involved in that.

13:06.220 --> 13:08.220
It's a mess.

13:08.220 --> 13:13.460
We have the Color-UD back end, which routes a bunch of stuff

13:13.460 --> 13:15.420
through hard-coded values.

13:15.420 --> 13:17.540
What if it works?

13:17.540 --> 13:21.100
And the Feedback-T back end, which

13:21.100 --> 13:27.140
talks to the Android vibrator how through IDEL and HIDL

13:27.140 --> 13:29.340
and gets the job done.

13:29.340 --> 13:32.260
It's not beautiful, but it works.

13:32.260 --> 13:35.460
And for MinUI, as we mentioned for Unlocker,

13:35.460 --> 13:39.980
we added a MinUI back end to LVGL itself,

13:39.980 --> 13:44.060
so it can draw to the screen without GPU acceleration,

13:44.060 --> 13:44.460
of course.

13:44.460 --> 13:46.780
Who needs GPU acceleration in the RAM disk?

13:46.780 --> 13:48.700
Anyways.

13:48.700 --> 13:53.820
So for Woot Animation, I think all this was used by Muff.

13:53.820 --> 13:56.140
We also have a MinUI back end for PlayMuff.

13:56.140 --> 14:00.380
I think it started life as the MoUI back end from JoLa.

14:00.380 --> 14:02.740
I don't remember.

14:02.740 --> 14:07.340
So to actually talk to the Android services,

14:07.340 --> 14:12.460
there's two main pieces that are doing the job for us.

14:12.460 --> 14:15.220
One's Lepipus and one's Gbinder.

14:15.220 --> 14:16.900
They allow us to craft.

14:16.900 --> 14:19.820
I mean, the Pibus has a bunch of compatibility layers

14:19.820 --> 14:23.340
and Gbinder that gives us a way to craft transactions

14:23.340 --> 14:25.420
and send it to the Android interfaces.

14:28.140 --> 14:33.420
And the whole system, how the whole thing works,

14:33.420 --> 14:36.220
pretty much ends there.

14:36.220 --> 14:41.220
Stuff's maybe hacky at times, I'm going to admit.

14:41.220 --> 14:45.940
But it works because we use pre-built vendor services

14:45.940 --> 14:49.380
and a bunch of stuff that was provided by the vendor itself.

14:49.380 --> 14:54.060
Stuff works for now.

14:54.060 --> 14:54.900
Maybe futures too.

14:57.660 --> 14:58.180
I'm joking.

14:58.180 --> 15:00.460
Like, stuff actually does work.

15:00.460 --> 15:04.700
So what is next for JoDian?

15:04.700 --> 15:10.700
Because the services work and the system itself

15:10.700 --> 15:14.740
starts up, everything works for the most part.

15:14.740 --> 15:24.740
But in reality, one of the main issues of the whole Linux

15:24.740 --> 15:30.220
ecosystem is app support.

15:30.220 --> 15:32.820
You don't have apps, must be honest.

15:32.820 --> 15:34.700
And no one wants to develop any either.

15:34.700 --> 15:36.660
No other big companies do.

15:36.660 --> 15:41.540
So I guess start integrating Beidjoy

15:41.540 --> 15:42.460
better into the system.

15:44.780 --> 15:47.740
Getting like zero startup time on Beidjoy,

15:47.740 --> 15:51.340
maybe developing something that replaces Beidjoy,

15:51.340 --> 15:53.820
again a drop in replacement.

15:53.820 --> 15:58.180
And clean up all the garbage that we added.

15:58.180 --> 15:59.980
We have a lot of garbage.

15:59.980 --> 16:03.140
So it's not pretty.

16:03.140 --> 16:06.220
We definitely have to go through everything.

16:06.220 --> 16:08.820
At least I do.

16:08.820 --> 16:11.220
I'm not a good programmer.

16:11.220 --> 16:14.100
We have to go refactor a lot of code, clean up a lot of code,

16:14.100 --> 16:15.820
see what we have to do.

16:15.820 --> 16:24.380
And possibly actually add some new features.

16:24.380 --> 16:29.340
So some of the actual features that I had in mind

16:29.340 --> 16:33.980
that I have been working on was wireless displays,

16:33.980 --> 16:37.780
which has to go through a pipe wire of using

16:37.780 --> 16:39.580
old version of pulse audio.

16:39.580 --> 16:42.580
So it's kind of tough.

16:42.580 --> 16:47.020
So I don't want to do a drop in the basement of pipe wire.

16:47.020 --> 16:48.780
I'm kind of tired of hacks.

16:48.780 --> 16:51.380
So we kind of have to fix up pulse audio to actually get

16:51.380 --> 16:52.300
pipe wire working.

16:52.300 --> 16:54.100
Then we can get pulse audio working because there's

16:54.100 --> 16:57.180
like an XTG portal for it.

16:57.180 --> 17:01.700
So that's one of the stuff in my to-do list

17:01.700 --> 17:05.980
that I actually have some work put in.

17:05.980 --> 17:08.740
Face unlock was something that I've

17:08.740 --> 17:12.300
been working on for the past two months.

17:12.340 --> 17:17.260
We can get face detection working through G-streamer.

17:17.260 --> 17:21.140
And G-streamer will actually move as you move your face along.

17:21.140 --> 17:23.340
I'm going to admit it's like 3 FPS.

17:23.340 --> 17:25.660
But it does detect.

17:25.660 --> 17:29.300
And the rest of the work can be done with OpenCV

17:29.300 --> 17:32.180
because not all Android devices do have the sensor

17:32.180 --> 17:34.820
to do it in hardware.

17:34.820 --> 17:37.380
So that has been in my to-do list.

17:37.380 --> 17:38.820
I've been working on it.

17:38.820 --> 17:41.460
Maybe we can help out other open source projects

17:41.500 --> 17:44.740
if they like face unlock, maybe.

17:44.740 --> 17:48.140
And two other very annoying features

17:48.140 --> 17:52.220
that are kind of deal breakers for others is once MMS.

17:52.220 --> 17:54.780
MMS, we don't have MMS.

17:54.780 --> 17:55.780
I tried many times.

17:55.780 --> 17:57.780
I couldn't get it working.

17:57.780 --> 18:00.420
MMS is very important.

18:00.420 --> 18:01.580
RCA is more important.

18:01.580 --> 18:06.940
But MMS also, at least in Canada and the US where I live,

18:06.940 --> 18:10.980
Android users are always using MMS to talk to the iOS guys.

18:11.020 --> 18:13.180
So MMS is very important.

18:13.180 --> 18:16.820
Dual SIM is very important as a deal breaker for many.

18:16.820 --> 18:18.580
And we have to work on dual SIM.

18:18.580 --> 18:24.620
That is a very big priority for me also.

18:24.620 --> 18:27.420
We've seen many users who actually looked at Android

18:27.420 --> 18:29.020
and they were like, oh, yeah, this is great.

18:29.020 --> 18:31.700
But you guys don't have dual SIM.

18:31.700 --> 18:33.740
So I'm out of here.

18:33.740 --> 18:37.140
That's not exactly the nicest.

18:37.140 --> 18:40.900
And besides all that, we still do

18:40.900 --> 18:46.660
have to work on app support for Linux and the ecosystem.

18:46.660 --> 18:50.860
With LibitVita and GTK4 becoming very mature

18:50.860 --> 18:55.340
and things working out, I have been at the very least

18:55.340 --> 19:01.340
working on porting all the old GTK3 applications

19:01.340 --> 19:05.500
that I've been using to GTK4 and LibitVita.

19:05.500 --> 19:10.420
Not exactly joy-dien specific, but it will benefit everyone.

19:10.420 --> 19:12.540
So that's something.

19:15.460 --> 19:17.740
A lot of applications are very slow.

19:17.740 --> 19:21.660
Settings app, as we all know, is very slow for the GNOME

19:21.660 --> 19:23.180
settings app.

19:23.180 --> 19:25.220
Much of the stuff is not threaded.

19:25.220 --> 19:26.700
Everything is running in a single thread.

19:26.700 --> 19:29.340
It's just horrible.

19:29.340 --> 19:33.980
A lot of code we have, I mean, well, I do have,

19:33.980 --> 19:37.620
that will soon possibly become a PR for many different projects,

19:37.620 --> 19:39.740
making many things threaded.

19:39.740 --> 19:43.620
We at joy-dien have a big PR to optimize GTK4.

19:47.100 --> 19:51.100
Speeding everything up, we've had a user who

19:51.100 --> 19:56.060
was working on a Blackberry, and he was seeing 70%, 80%

19:56.060 --> 19:59.980
performance improvement on his on GTK4.

19:59.980 --> 20:02.260
Because apparently there's a lot of issues in GTK4.

20:02.300 --> 20:04.420
Who could have thought?

20:04.420 --> 20:14.140
And the very last issue is that we don't, as the joy-dien people,

20:14.140 --> 20:18.460
we don't allow community devices in our build system.

20:18.460 --> 20:24.540
So if one of us, Core Devs, has a device,

20:24.540 --> 20:26.500
it can be made an official device.

20:26.500 --> 20:28.900
So like, be added to the build system, get stable builds

20:28.900 --> 20:30.540
and nightly builds.

20:30.540 --> 20:38.020
But we kind of don't have that for other people putting devices.

20:38.020 --> 20:43.700
So you should probably look into having a way to allow community

20:43.700 --> 20:48.780
people to port their phones and have them in our build system.

20:48.780 --> 20:51.980
I know many community porters have worked on devices,

20:51.980 --> 20:53.620
and they saw that, oh, they couldn't add it.

20:53.620 --> 20:56.020
So they just gave up.

20:56.020 --> 20:59.980
And the most important thing, documentation.

20:59.980 --> 21:01.820
And that's something I have to do,

21:01.820 --> 21:04.420
because none of the code I wrote has documentation.

21:07.420 --> 21:10.220
We have to do a lot of documentation.

21:10.220 --> 21:13.260
We don't like, at least the stuff that I worked on basically

21:13.260 --> 21:14.100
has nothing.

21:14.100 --> 21:14.900
I just worked on it.

21:14.900 --> 21:15.700
I slapped it on.

21:15.700 --> 21:18.180
I was like, yeah, it works, whatever.

21:18.180 --> 21:21.020
That one has to be worked on a lot.

21:21.020 --> 21:28.700
And that is at least my to-do list for now.

21:28.700 --> 21:29.500
No.

21:29.500 --> 21:30.100
Don't go down.

21:30.100 --> 21:30.580
Don't go down.

21:30.580 --> 21:31.580
Don't go down.

21:31.580 --> 21:32.580
Don't go down.

21:32.580 --> 21:34.060
OK.

21:34.060 --> 21:36.060
OK.

21:36.060 --> 21:37.540
OK.

21:37.540 --> 21:41.060
So if you want to contribute to Joyden via our device page,

21:41.060 --> 21:42.740
via our website, via our telegram channel,

21:42.740 --> 21:46.580
which also sync to our matrix, I think you can also find

21:46.580 --> 21:49.460
the matrix group for Joyden project.

21:49.460 --> 21:50.740
I don't use matrix much.

21:50.740 --> 21:52.300
But apparently, if you have a group that

21:52.300 --> 21:54.540
has a bunch of channels in it, I don't know.

21:54.540 --> 21:57.540
So you can find us there as well.

21:57.540 --> 22:06.140
And one kind of announcement that I have is we

22:06.140 --> 22:10.820
have been working towards getting phones with Joyden

22:10.820 --> 22:16.940
as the first pre-installed on phones.

22:16.940 --> 22:18.500
What a weird sentence.

22:18.500 --> 22:25.180
We have been working with an ODM to get Joyden phones,

22:25.180 --> 22:27.820
or so-called phones, with a Joyden-based system

22:27.820 --> 22:29.940
installed on them.

22:29.940 --> 22:35.980
And have that be sold to have kind of as a way that 0.64

22:35.980 --> 22:36.420
does it.

22:36.420 --> 22:39.740
But it's like, yeah, we as Joyden developers are doing it.

22:39.740 --> 22:42.660
So we understand the system and we understand the hardware.

22:42.660 --> 22:46.300
So it's going to be much easier to develop on,

22:46.300 --> 22:49.780
because we also understand the system itself.

22:49.780 --> 22:53.540
So you might want to look out for that.

22:53.540 --> 22:56.100
Few relapses, not very labs.

22:56.100 --> 22:57.540
Few relapses, please.

23:00.300 --> 23:06.740
And possibly the bigger news of this sort of project

23:06.740 --> 23:10.540
of getting Joyden-based phones will be coming out in a few

23:10.540 --> 23:12.140
months.

23:12.140 --> 23:16.020
But you can be on the lookout for it.

23:16.020 --> 23:22.060
We have a website at the moment, kind of not exactly the best.

23:22.060 --> 23:23.140
Still being worked on.

23:23.140 --> 23:28.060
We have a survey asking users, if they

23:28.060 --> 23:31.740
wanted to have a phone with a Joyden-based system,

23:31.740 --> 23:33.340
what would they want?

23:33.340 --> 23:34.420
What specs would they want?

23:34.420 --> 23:38.820
What would they want the devs to be focusing on, et cetera?

23:38.820 --> 23:44.740
So you can expect a Linux-based phone sold on the market

23:44.740 --> 23:47.580
in a few months.

23:47.580 --> 23:48.580
Thank you.

23:49.020 --> 23:56.660
Thank you very much for the great talk.

23:56.660 --> 23:58.620
I know we have a lot of questions in the matrix,

23:58.620 --> 24:01.580
so I'm going to pass it on.

24:01.580 --> 24:03.180
So the highest upvoted question right now

24:03.180 --> 24:06.340
is, do you have any plans to switching to motor manager

24:06.340 --> 24:07.020
from Ophono?

24:10.540 --> 24:11.260
OK.

24:11.260 --> 24:14.580
So I have looked into this.

24:14.580 --> 24:15.980
I'm going to be 100% honest with you.

24:15.980 --> 24:18.540
I have looked into this.

24:18.540 --> 24:21.780
I am by no means a professional.

24:21.780 --> 24:29.060
And when I tried getting this working,

24:29.060 --> 24:33.740
I could never get a motor manager kind of back end

24:33.740 --> 24:42.860
to register a command over the binder IPC, the G-binder.

24:42.860 --> 24:45.980
Again, I am by no means a professional.

24:45.980 --> 24:49.460
And this is probably doable.

24:49.460 --> 24:52.020
And it will be a huge step forward,

24:52.020 --> 24:54.860
which will make the whole modem stack a lot better.

24:54.860 --> 24:57.100
It doesn't have to go through this, this, and this,

24:57.100 --> 24:58.740
and this, and this, a thousand things, then

24:58.740 --> 25:02.220
user sees some and gets it working.

25:02.220 --> 25:05.100
So yes, it will be great.

25:05.100 --> 25:05.900
I spent some time.

25:05.900 --> 25:06.980
I couldn't get it working.

25:06.980 --> 25:07.940
But it is in my to-do.

25:16.620 --> 25:20.620
One question.

25:20.620 --> 25:22.940
You mentioned that you implemented a WL roots back end

25:22.940 --> 25:25.900
for, I guess, to get fresh running.

25:25.900 --> 25:26.740
Is there any plans?

25:26.740 --> 25:29.140
For example, I currently use postmarker S on my phones.

25:29.140 --> 25:30.780
This is actually running in mainline kernel.

25:30.780 --> 25:32.740
So I guess it's a little bit of a different situation.

25:32.740 --> 25:35.940
But for example, different other Linux mobile UIs,

25:35.940 --> 25:39.220
like Nome Shell, just the Nome Shell branch for mobile,

25:39.220 --> 25:42.740
stuff like Plasma Mobile, SXMO.

25:42.780 --> 25:46.820
Is there a project to get those running on Droidian as well?

25:46.820 --> 25:49.820
Or is the only focus at this point?

25:49.820 --> 25:52.220
So at the moment, I actually understand the question.

25:52.220 --> 25:53.860
And we have a lot of questions like this,

25:53.860 --> 25:55.900
like getting different UIs running.

25:55.900 --> 26:01.900
So each UI that uses an underlying graphics library

26:01.900 --> 26:03.660
needs its own back end, obviously,

26:03.660 --> 26:05.700
because we have to use Harper Composer.

26:05.700 --> 26:10.340
And I know that there's like VeyFire that uses W roots.

26:10.340 --> 26:11.660
So that one works fine.

26:11.700 --> 26:14.100
There's a bunch of other W roots that works fine.

26:14.100 --> 26:16.900
But as an example, Plasma uses Kavein.

26:16.900 --> 26:20.260
There was what they used to be a Kavein back end

26:20.260 --> 26:22.260
for Harper Composer.

26:22.260 --> 26:26.500
And it's pretty old, or it's really old.

26:26.500 --> 26:29.940
And someone has to revive that to get it running.

26:29.940 --> 26:31.220
I currently don't have the time.

26:31.220 --> 26:33.100
I have a full-time job, and I'm a student.

26:33.100 --> 26:35.940
I'm kind of already under a lot of pressure.

26:35.940 --> 26:42.020
So for GNOME, which uses mutter, well,

26:42.020 --> 26:44.420
that's a beast by itself.

26:44.420 --> 26:50.860
Because Kavein and W roots are modular, somewhat.

26:50.860 --> 26:54.580
But mutter is the opposite.

26:54.580 --> 26:59.020
So the code for the RM back end, or frame by frame,

26:59.020 --> 27:04.980
or whatever, everything is baked in so hard that it's

27:05.020 --> 27:08.100
a very tough task actually adding a new back end.

27:08.100 --> 27:10.820
And let alone maintaining it.

27:10.820 --> 27:13.060
Because no one's going to accept any of our back ends

27:13.060 --> 27:13.660
upstream.

27:13.660 --> 27:16.220
Because no one can test it other than us.

27:16.220 --> 27:23.340
So if someone spends a time sure, but for GNOME shell

27:23.340 --> 27:25.700
with mutter, I really doubt it.

27:25.700 --> 27:28.380
Because it mutter itself.

27:28.380 --> 27:30.140
I might piss a lot of GNOME people off.

27:30.140 --> 27:31.700
I use GNOME myself.

27:31.740 --> 27:36.980
Mutter is a mess, at least when I looked at it six months ago.

27:36.980 --> 27:37.460
Thank you.

27:41.300 --> 27:45.300
How does Droidian support standard Debian, like Bookwam,

27:45.300 --> 27:50.140
Bozi, Deb files for RM64 targets?

27:50.140 --> 27:51.140
Well, yeah.

27:51.140 --> 27:53.180
You can run the packages.

27:53.180 --> 27:56.740
Right now, Droidian is based on Debian Trixie, the testing

27:56.740 --> 27:57.260
branch.

27:57.260 --> 28:01.180
We also have a branch for stable.

28:01.180 --> 28:03.380
Well, we have a snapshot for stable that you can use.

28:03.380 --> 28:05.380
It doesn't have many of the new features,

28:05.380 --> 28:07.220
that is based on the Bookwam.

28:07.220 --> 28:10.300
But any repository you add, any dead repository you add,

28:10.300 --> 28:13.700
if the packages are built for RM64 or the architecture is

28:13.700 --> 28:16.380
marked as all, like Python packages and stuff,

28:16.380 --> 28:17.380
everything will work.

28:17.380 --> 28:19.380
Flatpacks work, Snap packages work.

28:19.380 --> 28:22.180
If app images built for RM64, app images work,

28:22.180 --> 28:24.100
it's just like a computer.

28:24.100 --> 28:25.100
Thank you.

28:25.380 --> 28:28.860
Thanks.

28:28.860 --> 28:30.860
Maybe another?

28:30.860 --> 28:31.360
Yeah.

28:31.360 --> 28:31.860
OK, you.

28:31.860 --> 28:33.100
And then another question from Matrix.

28:35.820 --> 28:36.500
Thanks.

28:36.500 --> 28:38.740
Just a quick question about the strategy,

28:38.740 --> 28:42.700
because you mentioned that all these hacks you've built around

28:42.700 --> 28:43.580
to get it working.

28:43.580 --> 28:48.100
So my initial understanding was that you built Droidian

28:48.100 --> 28:53.020
to foster the development of these apps for Fosh, for instance.

28:53.020 --> 29:00.060
But now you're trying to also have a phone delivered with it.

29:00.060 --> 29:06.460
So does this really make sense to have a device running these,

29:06.460 --> 29:10.020
let's say, many hacks from the start?

29:12.140 --> 29:15.060
Well, yeah, that's a very good question.

29:15.060 --> 29:17.620
Well, we're trying to eliminate every single thing

29:17.620 --> 29:21.420
that we think is like a big hack.

29:21.420 --> 29:25.380
But it really depends on what you consider as a hack.

29:25.380 --> 29:27.220
Is libhybers a hack to you?

29:27.220 --> 29:31.420
Then the whole system is built on nothing.

29:31.420 --> 29:34.700
But to my eyes, I kind of have a different look to it.

29:34.700 --> 29:40.140
And in my opinion, we can slowly get rid of most of the hacks.

29:40.140 --> 29:41.620
Again, we have custom backends?

29:41.620 --> 29:42.500
Fair enough.

29:42.500 --> 29:44.900
But I don't see there as a hack.

29:44.900 --> 29:47.860
But in my opinion, a lot of those can be cleaned

29:47.860 --> 29:56.300
and can be made ready to be shipped on a phone sold to customers.

29:56.300 --> 30:02.100
So it's not that far gone that I would consider a waste of time.

30:02.100 --> 30:04.020
I would consider working on it a waste of time.

30:04.020 --> 30:07.980
I still think that it is very doable getting it done.

30:07.980 --> 30:10.460
Give a big round of applause again.

30:10.460 --> 30:12.420
Please, thank you.

