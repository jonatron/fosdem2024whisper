WEBVTT

00:00.000 --> 00:14.720
Okay, welcome to my talk. We already heard a lot about the fascinating domain of immobility

00:14.720 --> 00:22.840
from the guys from Everest. While Everest is on the charging station side, this project

00:22.840 --> 00:31.680
is more what happens behind a single charging station. So all this back-end stuff up to the

00:31.680 --> 00:39.960
energy providers, distribution network operators and so on. And why is this important? Because in

00:39.960 --> 00:45.960
the energy domain we have a lot of safety and security regulations coming from the government.

00:46.600 --> 00:53.080
We have somehow to comply with it because in immobility it's not only important that you have

00:53.080 --> 01:00.280
IT security, you also need to provide energy safety because everything is connected via the

01:00.280 --> 01:10.280
grid. And so when too many people behave badly, we will have the next blackout. So nothing changed

01:10.280 --> 01:18.680
since last year, so I skip this because I only have 50 minutes. In the past, the immobility was

01:18.680 --> 01:23.560
quite simple. We had charging stations on one side and a back-end on the other side. And they

01:23.560 --> 01:30.680
more or less had been communicating. In the last couple of years we are HTTP web socket

01:30.680 --> 01:39.360
communication. So this is the client, this is the server, everything is fine. But now, the situation

01:39.400 --> 01:43.320
changed a little bit. We have no longer a single charging station somewhere at the street. We have

01:43.320 --> 01:49.240
normally multiple charging stations at one location. So it's quite useful to have some

01:49.240 --> 01:56.600
middle box which combines the communication. So that you save money when you want to communicate

01:56.600 --> 02:05.520
with the back-end. This is nothing new. There's a lot of vendors implementing it. There are even

02:05.560 --> 02:13.880
specialized vendors for this. It's already in the OCPP standard, but it's not really in greater

02:13.880 --> 02:25.000
detail. It's just mentioned that you could do it. We want to dig deeper into this problem and see

02:25.000 --> 02:32.520
what we need to realize in this. Next thing, when you have this middle box, it's very natural that

02:32.640 --> 02:39.240
you add additional stuff to this. So you not only want to combine the communication channel, you

02:39.240 --> 02:45.520
also have specialized energy meters which are now located at the grid connection point. So

02:45.520 --> 02:51.920
monitoring the grid connection point, the idea behind this is that you can do a local load

02:51.920 --> 02:58.080
management because you have only a limited capacity on your grid connection but want to share it

02:58.160 --> 03:06.120
between the charging stations and somebody must be in charge of how to share this energy. There are

03:06.120 --> 03:14.840
other projects who do the calculation for this, but this is the communication part. And here,

03:14.840 --> 03:23.600
for the first time, if you're a German, people, you know, this fascinating world of smart meter

03:23.680 --> 03:34.240
gateways, which is more or less specialized hardware from the federal industry for security in

03:34.240 --> 03:41.920
Germany, which regulate this area because energy, as I mentioned, is a safety critical infrastructure.

03:42.560 --> 03:49.840
So they try somehow to improve the situation that most vendors don't care that much about security

03:49.840 --> 04:03.520
and safety. The first problem would have, because I said we come from a very simplified view on

04:03.520 --> 04:08.640
this problem, where the connection from the charging station to a back end. So because of

04:08.640 --> 04:15.960
limitations of the OCPP protocol, we at the moment duplicate every connection between this charging

04:16.200 --> 04:24.800
or communication aggregation box and the back end. This is not only perhaps a design flaw,

04:24.800 --> 04:29.600
which nobody cares about, it's also starting to become more and more a security problem,

04:29.600 --> 04:38.280
because the only security we have is HTTPS, so transport layer security and transport

04:38.760 --> 04:45.720
layer security and in this box, here you have another transport layer security, so you have a

04:45.720 --> 04:52.920
split communication channel. So your IT security is no longer given, because this could be a man

04:52.920 --> 05:01.960
in the middle. It's getting even worse, because now we have specialized companies who sit in the

05:01.960 --> 05:08.760
middle between your charging stations or your aggregation box and your back ends or even multiple

05:08.760 --> 05:15.800
back ends and want to do analytics for you, because normally the charging station management

05:16.360 --> 05:22.760
operators or vendors just manage charging stations. They are not that much into analytics.

05:23.640 --> 05:30.120
So very often they even those sit in the middle and then you realize, okay, now the problem is

05:30.120 --> 05:37.160
getting more and more complicated, because people who only are interested in Excel sheets sit in the

05:37.160 --> 05:45.400
middle of your critical infrastructure and maybe they not only analyze what you're sending, possibly

05:46.120 --> 05:54.200
here could be sitting Mr. Putin and send commands back, because you have no chance to stop him.

05:55.160 --> 06:03.480
So the first thing what we want to have and this is also nothing really new, we want to

06:03.480 --> 06:10.600
share this web socket connections. For this we need to adapt a little bit the OCPP protocol.

06:10.600 --> 06:18.200
There's already an internal draft how you could do this, but when you look closer at this

06:19.160 --> 06:25.720
draft, so internal means internal in the open charging alliance, which is the organization

06:25.720 --> 06:33.880
managing the OCPP protocol. You see there perhaps a couple of drawbacks. The first thing what we

06:34.920 --> 06:40.200
obviously need, we need to add some additional looting information, so that we know we are

06:40.200 --> 06:49.640
sending from this box to that box and my idea is or my proposal is we can do a lot of interesting

06:49.640 --> 07:01.480
things if we copy this good old concept of the record route taken, which is also an IP version 4

07:02.200 --> 07:15.960
optional option and so we can implement this much more user friendly. Next thing is in the OCPP

07:16.520 --> 07:25.320
internal draft we have more or less source routing, so the sender includes the path through the

07:25.320 --> 07:34.120
network into the request. This is well known, it's a valid way to do it, but it has also a lot of

07:34.120 --> 07:40.760
limitations because when network is changing very often you have a scalability problems. So it's

07:40.760 --> 07:47.960
much more logical to use a normal routing table in every box. You can use this typically outdoor

07:47.960 --> 07:54.760
learning what you know from other net switches, which also on learn which communication partners

07:54.760 --> 08:08.840
on which port and implement it more easily. Now, but it's getting more and more worse because we are

08:08.840 --> 08:15.880
in a modern world. A charging and stage management system today is no longer a monolithic thing on

08:15.880 --> 08:22.360
a notebook somewhere in the Netherlands. It's a highly complex system of microservices and these

08:22.360 --> 08:30.280
microservices are even from different operators. So we have very very often complex systems where

08:30.280 --> 08:37.080
the asset management, so which charging station is located where and coming from which vendor

08:37.080 --> 08:44.520
is within an SAP database, then you have another database for all this real time energy measurements

08:44.520 --> 08:51.720
and so on and so on and so on. So you realize okay now we have a bit of a problem because we

08:51.720 --> 08:58.920
have a critical infrastructure, but in the back end we have a multitude of loosely coupled systems

08:59.560 --> 09:07.640
without much of security. So the traditional also PP security model is also no longer sufficient here.

09:09.080 --> 09:17.800
For this very simple, it would be nice to have digital signatures. Again, there's an internal

09:17.800 --> 09:25.560
traffic and the open charging alliance, but this had signatures on the transport part of also PP.

09:26.200 --> 09:31.800
So it's limited to also PP, but it would be much more interesting to have it on the other PP

09:31.800 --> 09:38.920
messages itself, because then we can send end to end messages and end to end means in this case,

09:39.480 --> 09:48.120
from the EV to the energy distribution grid operator or to the EMP or to the smartphone

09:48.120 --> 09:54.360
of the driver and so on and so on. We will later see a lot of use cases how to make use of it.

09:58.360 --> 10:03.800
What do you, when you want to have signatures, the next problem is you read. As usual, you

10:03.800 --> 10:09.960
reduce the complex problems onto a key management problem. So you need something like signature

10:09.960 --> 10:16.120
policies to define who, which signature is valid, which signature should I use, which

10:16.120 --> 10:26.120
signature should I verify. When you have this signature is implemented, you can extend it

10:26.120 --> 10:31.480
to user roles because at the moment everything in also PP is more or less one user. You have no

10:31.560 --> 10:38.680
differentiation of this communication partner is only allowed to set energy commands. The other

10:38.680 --> 10:45.400
one can also change communication parameters or whatever. This can be implemented using the

10:45.400 --> 10:54.280
signatures. And last but not least, at the moment, also PP is only using the text frames of

10:54.360 --> 11:02.200
HTTP web sockets. But there are a lot of useful use cases for binary streams, especially when

11:02.200 --> 11:07.480
you look at firmware updates or look for downloads because this is at the moment external HTTP requests.

11:08.120 --> 11:13.480
And this makes your network security more complicated. So when you would integrate it into the

11:13.480 --> 11:19.400
also PP protocol, you could close down your network and only allow also PP communication

11:20.200 --> 11:30.120
and improve the security. So nice, all this little details, but what are the real use cases for this?

11:30.760 --> 11:37.640
So in Germany, we have since the first January of this year, there's a nice new law that your

11:37.640 --> 11:45.960
energy provider can send you messages. We are a highly regulated infrastructure to reduce the

11:45.960 --> 11:52.360
amount of energy you're using because we want to renew a bit of energy and so on and so on and so on.

11:53.240 --> 12:00.200
But it's external additional hardware. Why not use the existing infrastructure for this?

12:01.000 --> 12:08.360
The reason? Because it's not secure and safe enough at the moment. Would it be secure and safe enough

12:08.360 --> 12:14.680
if we could perhaps talk to these guys and say, okay, look, we have now improved our infrastructure

12:15.560 --> 12:18.360
why don't we remove this additional hardware?

12:21.080 --> 12:28.760
The same is in the same law, we have a possibility that an energy provider can get your measurements.

12:30.120 --> 12:40.920
This is again a regulated use case. We would do this with our normal also PP infrastructure

12:41.560 --> 12:47.320
with charging tariffs, charging tariffs coming from immobility providers or someone else.

12:47.320 --> 12:54.360
They should also be assigned secure data which is immutable and then used in OCPP.

12:55.400 --> 13:01.800
Good part is that in the upcoming or in the next version of OCPP, there will be some support for

13:01.880 --> 13:07.720
tariffs, not yet end-to-end signed tariffs, but at least half the way.

13:10.600 --> 13:19.000
There is this interesting use case where you want to pay for your charging but in an anonymous way,

13:19.000 --> 13:25.800
so you don't have an account somewhere, but you pay with your smartphone. In the regulation,

13:25.800 --> 13:31.480
they are talking about QR codes. Wouldn't it be interesting that you use this QR code to get

13:31.560 --> 13:37.800
something like a direct communication channel to this charging station over all this complicated

13:37.800 --> 13:44.280
infrastructure, but it's secure so that you have something like a remote control because nobody

13:44.280 --> 13:50.600
stands even not even for 20 minutes in front of the charging station just to look for tapening.

13:50.600 --> 13:54.520
They want to have it on their phones, but for this you need a secure channel.

13:54.600 --> 14:04.920
The same idea, but for another user group, is the charging station operators on the energy people

14:04.920 --> 14:09.160
also often don't know what's really going on on this charging station because it's very limited

14:09.160 --> 14:20.600
for the consent over the wire at the moment. They use a lot of AI to invent what might be happening

14:20.600 --> 14:26.920
on the charging station, but in reality it would be much nicer if we would have something like

14:26.920 --> 14:37.000
this digital twin idea just send everything what is important somewhere where it can be analyzed,

14:37.000 --> 14:43.000
but again we have no secure infrastructure in the middle because every shitty marketing company

14:43.000 --> 14:50.040
could manipulate our data. Better German calibration law, that is my favorite topic, but we had this

14:50.040 --> 14:54.920
already last year. We have national contact points who want to collect all this data and

14:54.920 --> 14:59.720
statistics about your charging station infrastructure, how good or not good it is.

15:00.840 --> 15:05.000
No security, no privacy at the moment. The same problem as usual.

15:06.440 --> 15:15.960
The really biggest problem is this is on the street. Yes, more or less last slide. This is on

15:15.960 --> 15:22.440
the street. There's also on the street, so no physical access security here. So even when we

15:22.440 --> 15:29.800
have encryption signatures, we cannot be sure if not somebody sending us a lot of crap. Okay,

15:29.800 --> 15:35.480
it's a bit harder to manipulate a lot of charging stations on the street, but if you're put in,

15:36.200 --> 15:44.840
probably you would try it anyway. So how or what can we do to analyze it here if this is

15:45.480 --> 15:54.920
a valid request or a valid information or not? And I try to my best to get it into the OPP standard,

15:55.640 --> 16:01.560
but also at the Open Charging Alliance, we have a normal problem. There are many leaching companies

16:02.520 --> 16:08.920
and not so much real contributing companies. So if you find this use case is interesting,

16:08.920 --> 16:16.360
if you think this is interesting for you, for your company, for whatever, feel free to contribute

16:16.360 --> 16:22.440
to this project, feel free to become a member of the Open Charging Alliance and help us to get it

16:23.080 --> 16:26.360
out on the street.

16:38.920 --> 16:43.240
Thank you so much for your presentation.

