WEBVTT

00:00.000 --> 00:08.880
Good morning everybody. So my name is Florence Bria. I'm a UI

00:08.880 --> 00:15.600
principal engineer in Amadeus. It's a big company doing software for the travel industry.

00:15.600 --> 00:25.400
And I'm here to present Tansu, which is a framework library, a reactive library, Agnostik,

00:25.400 --> 00:35.000
that we are using in our new widget library. So a bit of context. My team is doing a lot

00:35.000 --> 00:41.120
of widget libraries since many years, like more than 15 years. And we are of open source,

00:41.120 --> 00:46.840
a lot of them. The last one, which is very popular, is MGBoostrap. We've up to 2 million

00:46.840 --> 00:56.080
downloads per month. And so we are kind of developing a new one, Agnosti, which is using

00:56.080 --> 01:03.040
Tansu. And I'm going to explain what Tansu is. So first a bit of Tansu, then the features.

01:03.040 --> 01:12.040
Then we will see Agnosti in a few slides. And then we will finish by why Tansu is helping

01:12.040 --> 01:20.120
us a lot by developing this Agnosti library. So Tansu is a senior library. So it's a

01:20.120 --> 01:29.120
library to do a state management in a reactive way. And there's a lot now of frameworks that

01:29.120 --> 01:34.160
are implementing such a library. Okay, so we have Soligys, which has also a senior library,

01:34.160 --> 01:39.960
Angular. Now since last year, as a senior library, Quick from the start, Svelte Store,

01:40.280 --> 01:47.880
is also some kind of solid library. Vue is having a reactive system also. React has

01:47.880 --> 01:54.440
a preact signal, which is also from Agnosti, by the way. And we have developed ourselves

01:54.440 --> 02:01.600
on open source Tansu. Tansu is basically based almost on the Svelte Store, but is independent

02:01.600 --> 02:11.600
from Svelte. So let's dig into Tansu. So Tansu is providing a few state management

02:11.600 --> 02:17.400
such as Primitive, so for best store. The most important one is the writeable. So you

02:17.400 --> 02:23.240
can create a store by using the writeable and give it an initial value. And then on this

02:23.240 --> 02:27.480
store, the idea is that anyone can subscribe on the store to get the actual value of the

02:27.480 --> 02:32.320
store. And on the store, there's a set method and an update method to change the value of

02:32.320 --> 02:37.240
the store. So the set method, you provide the value directly. The update method, you provide

02:37.240 --> 02:42.600
an update function where you get the current value of the store, and then you need to return

02:42.600 --> 02:51.840
the new value of the store. So this is the primitive for our library. Then we have a way

02:51.920 --> 02:59.920
to extend our base primitive, like the writeable. The writeable is taking any store-like object

02:59.920 --> 03:06.920
and is transforming it into a writeable. So it is adding basically a set function if you are not

03:06.920 --> 03:11.840
providing it, but you can provide your own custom function like we are doing here for the base store.

03:11.840 --> 03:17.680
We are providing a set function that is basically setting the double of the value put in the set.

03:18.640 --> 03:23.640
And you provide also, you can increase the store by providing some API, like the increment function

03:23.640 --> 03:30.160
that we have here that is incrementing the value of the store. Like any other store, the

03:30.160 --> 03:35.160
writeable, you can subscribe to it and you can use all the API, including the set and the increment.

03:35.160 --> 03:42.160
Then we have a writeable. A writeable basically is a writeable, but we found a set and update method.

03:43.120 --> 03:50.120
It is just for us to provide a way for people to subscribe to the value, but not interact with the value.

03:50.120 --> 03:55.120
Same as for writeable, we have as readable utilities to transform a store and add some API to interact

04:02.120 --> 04:08.120
with the store and return a readable. So for example, here we have a writeable as a private store

04:09.080 --> 04:14.080
and we return a readable store where we have an API to interact with the current store.

04:17.080 --> 04:22.080
Then we have some computed store. So the computed store, they are a dependency on other store

04:22.080 --> 04:27.080
and they are going to return new value depending on those primitive value.

04:27.080 --> 04:33.080
So the derived store is taking, you need to provide when you are creating a derived store,

04:33.080 --> 04:39.080
you need to provide a list of dependencies. And then you have a function where you are going to return

04:39.080 --> 04:46.080
the actual value of the store. So for example, here we have x dollar and y dollar which are the dependencies.

04:46.080 --> 04:53.080
And we have the function that is going to take the value of the store, the two stores, x and y here,

04:53.080 --> 04:58.080
and we need to return the new value. So here we are summing the two values.

04:59.080 --> 05:04.080
The return of the derived is already readable, so you can subscribe.

05:04.080 --> 05:13.080
And as soon as there is a change in a value of one of the dependencies, the derived function is computed again.

05:13.080 --> 05:20.080
And it is computed synchronously. So this is important for us because we want to be able to plug in any framework,

05:20.080 --> 05:27.080
our library, so the best way is to be synchronized so that it has no side effects when we are plugging into any framework.

05:28.080 --> 05:33.080
And it reacts but on the other hand.

05:33.080 --> 05:40.080
There is another API to be able to handle a source and conus event with the derived.

05:40.080 --> 05:46.080
So we have the way to provide on top of the dependency a set function.

05:46.080 --> 05:53.080
And then it is up to us instead of returning the value for the derived, it is up to us to use the set function

05:53.080 --> 05:57.080
so when we want, change internally the value of the store.

05:57.080 --> 06:06.080
In this case, we can also provide an initial value because we don't know if the set is going to be a code synchronously from the start.

06:06.080 --> 06:13.080
Then of course the derived is also readable, anyone can subscribe to get the actual value.

06:13.080 --> 06:20.080
And if there is a dependency that is changing a value, the derived is run automatically.

06:21.080 --> 06:26.080
Then we have another so computed the store which is computed.

06:26.080 --> 06:31.080
This one is automatically computing the list of dependency.

06:31.080 --> 06:40.080
So if you are using any other store inside your function that is computing the value of the computed store,

06:40.080 --> 06:48.080
in fact, the dependency will be kind of known by the library.

06:48.080 --> 06:53.080
And if any dependency is changing its value, the computed is going to be executed.

06:53.080 --> 06:57.080
What I didn't tell you also is that the writable or the readable,

06:57.080 --> 07:00.080
they are also function that you can call to actually get the value.

07:00.080 --> 07:09.080
So here when we are doing like XC$ and parenthesis, so we are calling the basically writable and we get the actual value.

07:09.080 --> 07:16.080
So the computed here, if you are using any store inside the computed function,

07:16.080 --> 07:21.080
we will know if one of the store is changing its value and we can react to this.

07:46.080 --> 07:48.080
Thank you.

08:16.080 --> 08:18.080
Thank you.

08:46.080 --> 08:47.080
Thank you.

09:03.080 --> 09:08.080
In a change on first name and last name, the derived function will be executed.

09:08.080 --> 09:14.080
But I don't want to have intermediate change if the data will not be constant.

09:14.080 --> 09:20.080
So here if I am changing first name and then last name, if there was no batch,

09:20.080 --> 09:26.080
like we would have computed within the derived, shall occupy in our case.

09:26.080 --> 09:31.080
And with the batch, we are able to kind of stop the reactivity system.

09:31.080 --> 09:37.080
And until the end of the batch, nothing is basically happening, nothing is computed,

09:37.080 --> 09:40.080
and shall come, this is only send at the end of the batch.

09:40.080 --> 09:42.080
So the data stay consistent.

09:42.080 --> 09:51.080
And it's pretty important for our library to handle, because you don't want to send data to the UI that are not consistent.

09:55.080 --> 09:57.080
So what are the time-sensitive features?

09:57.080 --> 10:00.080
It's from what I've just did, so it's critton and type script.

10:00.080 --> 10:03.080
We have no dependency whatsoever.

10:04.080 --> 10:12.080
It's synchronous, like I said, all the derived functions, all the computations are called synchronously.

10:12.080 --> 10:15.080
So if you subscribe to a store, you are called also synchronously.

10:17.080 --> 10:18.080
It's lazy.

10:18.080 --> 10:26.080
Lazy means that basically if the store is not subscribed, if there's no subscriber to any store, the computation is not going to happen.

10:26.080 --> 10:35.080
So we are not doing any computation that doesn't have any meaning, because there's no subscriber, basically.

10:35.080 --> 10:39.080
So we are only computing if there's at least one subscriber on the store.

10:40.080 --> 10:43.080
And there's a feature that I didn't talk about, which is the unused.

10:43.080 --> 10:48.080
It's pretty interesting for our use case, which is doing widget libraries.

10:48.080 --> 10:54.080
The unused is a possibility, so on every basic store, you have the possibility to provide an unused function.

10:54.080 --> 11:00.080
This unused function is basically executing the first, when the number of subscribers goes to 0 to 1.

11:00.080 --> 11:06.080
So we are able to initialize things only when the store is used.

11:06.080 --> 11:14.080
And this unused function is returning a function that is executing when there's no more subscribers, so when the number goes to 1 to 0.

11:15.080 --> 11:29.080
So this is pretty interesting to put your application in a state, like put some event listener, only when actually the application and the store is used in your application.

11:29.080 --> 11:32.080
It's live in the page.

11:32.080 --> 11:42.080
Something that I also didn't talk about is that when you are subscribing to any store, of course at some point you need to clean up and you need to avoid memos.

11:42.080 --> 11:45.080
You need to unsubscribe also to the store.

11:45.080 --> 11:49.080
So every subscription is returning a function to unsubscribe.

11:49.080 --> 11:52.080
So here is the example.

11:54.080 --> 11:59.080
So what about Agnes UI and what's the context of where we are using Tansu?

11:59.080 --> 12:03.080
Agnes UI is a widget library.

12:03.080 --> 12:05.080
Actually, it's more than one widget library.

12:05.080 --> 12:10.080
Agnes UI is actually kind of seven libraries.

12:10.080 --> 12:14.080
There's one library that is the core that is framework agnostic.

12:14.080 --> 12:16.080
That is only written in Tanscript.

12:16.080 --> 12:23.080
It's basically a bunch of builders of factory, let's say, component factory and utils factory.

12:23.080 --> 12:33.080
So it's function that takes some props, some inputs, and what are returning, they are returning the older state of the widget and all the action possible that the widget can trigger.

12:33.080 --> 12:46.080
So if you have a pagination, if you click on the next button for the pagination, it will trigger a change in the internal state management returning by those builders.

12:46.080 --> 12:52.080
And basically, a new data will be computed for you so that you can show it on the screen.

12:52.080 --> 12:57.080
So Agnes UI does this core that is framework agnostic.

12:57.080 --> 13:06.080
And then we have, let's say, put some wrappers, some utils to be able to use it in multiple frameworks.

13:06.080 --> 13:09.080
So we have the possibility to use it as headless.

13:09.080 --> 13:17.080
So without any CSS, we basically do CSS of your choice, in React, in Svelte, and in Angular.

13:17.080 --> 13:20.080
But basically, you can use it in any other framework.

13:20.080 --> 13:25.080
It's just that we have only the time for those three and only the user of those three.

13:26.080 --> 13:32.080
We also are providing because, well, we are maintaining ngboostrap.

13:32.080 --> 13:40.080
And so a lot of our customers, even internally in my company, are using Angular, so ngboostrap.

13:40.080 --> 13:43.080
We are providing also the bootstrap wrapper.

13:43.080 --> 13:48.080
So this is the look of basically the bootstrap component here.

13:48.080 --> 13:52.080
So in some of Agnes UI, it's framework agnostic also.

13:52.080 --> 13:54.080
So there's a core framework agnostic.

13:54.080 --> 13:57.080
It's reactive because we are using Tonsu, we will see how.

13:57.080 --> 13:59.080
There's some wrapper bootstrap.

13:59.080 --> 14:00.080
You can have a less component.

14:00.080 --> 14:02.080
You can use Telwin to customize it.

14:02.080 --> 14:08.080
We are going to show them in the website using Telwin on some kind of CSS of our choice.

14:08.080 --> 14:11.080
It's highly customizable, highly configurable.

14:11.080 --> 14:16.080
So you can basically, the activity is also put in place for the customization and the configuration.

14:16.080 --> 14:21.080
So you have some kind of configuration mechanism that is injected inside our core.

14:21.080 --> 14:25.080
And that you can use specifically.

14:25.080 --> 14:32.080
And it's API-copied, meaning that all our components in every framework, they have the same API.

14:32.080 --> 14:36.080
Okay, same props, same output, same behavior.

14:36.080 --> 14:39.080
So for our company, for us, like where we are using multiple framework,

14:39.080 --> 14:42.080
and maybe we want to have consistency inside our product,

14:42.080 --> 14:48.080
it's quite useful to have the same look and feel for every application that we are developing.

14:51.080 --> 14:54.080
So what's the usage of Tonsu and NSU?

14:54.080 --> 14:57.080
And how it is helping us developing those libraries?

14:57.080 --> 15:00.080
So it's helping us for many things.

15:00.080 --> 15:06.080
And we will see that we need, in fact, all the features that we have seen before.

15:06.080 --> 15:09.080
So for example, we have a create and accession details.

15:09.080 --> 15:16.080
Okay, and the idea is to be able to know, we are giving like a list of elements,

15:16.080 --> 15:22.080
and we want to know if those elements are visible inside,

15:22.080 --> 15:25.080
are entering inside the screen.

15:25.080 --> 15:28.080
Okay, and we are using the intersection observer.

15:28.080 --> 15:35.080
So the intersection observer is a synchronous JavaScript utility that you can use

15:35.080 --> 15:40.080
that is going to call us every time there's a change inside what we are observing.

15:40.080 --> 15:44.080
So here, I didn't show you, but we are then observing the different element.

15:44.080 --> 15:54.080
Okay, so every time the intersection observer basically is sending us some new entries.

15:54.080 --> 16:00.080
Okay, we are changing this map, and what we are returning basically is this map in the visible element.

16:00.080 --> 16:04.080
So we are using the fact that with the derive, we have a set function

16:04.080 --> 16:10.080
that can be called as a chronosly by us, to put the new value of the visible element.

16:10.080 --> 16:17.080
And with this, we are transforming like this intersection observer in a change of the state

16:17.080 --> 16:23.080
and the visible element, visible element, dollar state.

16:23.080 --> 16:28.080
Okay, and we are doing this in a framework or a nostic way,

16:28.080 --> 16:35.080
so we can plug these utils in any framework or for choice.

16:35.080 --> 16:40.080
One other thing that is also very interesting is that we are doing with a library

16:40.080 --> 16:44.080
and people, when we are doing widgets, there's like a props or anything.

16:44.080 --> 16:49.080
Here we have the case where in a pagination widget, okay, and we are computing the page number.

16:49.080 --> 16:53.080
So the page number that we need to display on the screen, and it depends on two things.

16:53.080 --> 16:57.080
It depends on the page size, so the number of items you want to display on the page

16:57.080 --> 17:03.080
and the complete list of items that you have in your collection.

17:03.080 --> 17:13.080
Okay, if with Tamsun, we are able basically to write that the page count is computed out of this expression.

17:13.080 --> 17:19.080
Okay, and if any of the dependency is changing, this page count is going to be automatically computed again.

17:19.080 --> 17:23.080
Okay, so we don't have to say, okay, if collection size is changing,

17:23.080 --> 17:28.080
I'm going to do this computation, this computation, this computation, and it's going to change page count.

17:28.080 --> 17:32.080
And if page size is changing, I'm going to do this computation, this computation,

17:32.080 --> 17:36.080
and page count is computed again.

17:36.080 --> 17:47.080
So you have a way to basically declare your state, your internal state of the widget in a very simple way.

17:47.080 --> 17:56.080
So the thing we are going to see about Tamsun and our usage in AgnusRide is the unused.

17:56.080 --> 18:06.080
So the unused is a pretty interesting thing that we see on Zvelstore, but not on a lot of other scenarios.

18:06.080 --> 18:11.080
I don't think there are other scenarios that we have in this feature.

18:11.080 --> 18:17.080
It's the way, like we said, to execute some code only when the store is used in your application.

18:17.080 --> 18:23.080
So for example here, we are having the red-head ball of the active element.

18:23.080 --> 18:29.080
Basically, on use means if some point in my application I'm using this store,

18:29.080 --> 18:36.080
this function is going to be executed, and I'm going to start listening to the focus in and focus event

18:36.080 --> 18:39.080
on this document or document element.

18:39.080 --> 18:47.080
So I'm going to be able to react to those events only if the store is used in my application.

18:47.080 --> 18:54.080
And then if the store is no longer used in my application, I'm going to unsubscribe directly to those events.

18:54.080 --> 19:01.080
So basically you can set up things and remove things only if they are actually used in your application.

19:01.080 --> 19:05.080
And it's quite difficult to do this if you don't have such utilities.

19:05.080 --> 19:13.080
And also it's transforming everything that we are computing here at some point as it is red-head ball in a store

19:13.080 --> 19:17.080
so that it can use in a reactive way anywhere in your application.

19:23.080 --> 19:25.080
Okay, what's next?

19:26.080 --> 19:27.080
Good.

19:27.080 --> 19:33.080
So what we want to do with Agnes-Wide, but basically we want to extend the component list,

19:33.080 --> 19:38.080
we want to extend the utilities, add more documentation for user, contributor.

19:38.080 --> 19:46.080
We hope the people from MNGBusap will migrate and we hope people also will start using it in many other framework community

19:46.080 --> 19:54.080
because now we are not only on Agnes-Wide but we are targeting React, ZVED, or any other possible framework.

19:54.080 --> 19:58.080
So we are starting to advertise it and we will help people contribute to it.

20:00.080 --> 20:04.080
So have a look at the two websites, of course, they are open source,

20:04.080 --> 20:11.080
they are mighty lessons, you can use them for your design system or for whatever project on your own.

20:11.080 --> 20:13.080
So thank you.

20:13.080 --> 20:14.080
If you have questions.

20:21.080 --> 20:27.080
We have a bit of time for questions, so if anyone has a question raise your hand.

20:31.080 --> 20:32.080
Perfect.

20:34.080 --> 20:41.080
I think you have a suggestion, you said you decided to build your own signal library when there are already existing ones.

20:41.080 --> 20:43.080
Is there a specific reason?

20:43.080 --> 20:47.080
Are there some needs that weren't publicizing the library?

20:47.080 --> 20:52.080
So the question is, are there some needs that are not present in other libraries?

20:52.080 --> 20:54.080
Yes, indeed.

20:54.080 --> 20:58.080
So only pre-act signals is framework diagnostic.

20:58.080 --> 20:59.080
On the whole list I showed you.

20:59.080 --> 21:05.080
All the other signal libraries are included inside the framework but are linked to the reactivity system of the framework.

21:05.080 --> 21:13.080
So we did one which was framework diagnostic to be able to code only the core in a framework diagnostic way and use it in any framework for choice.

21:13.080 --> 21:15.080
So we had not a lot of choice.

21:15.080 --> 21:18.080
We basically started before pre-act signal I think also.

21:18.080 --> 21:22.080
So we have the Tansu library since a bit more than two years.

21:23.080 --> 21:26.080
So yes, this is much it.

21:26.080 --> 21:29.080
After, why did we don't choose pre-act signal?

21:29.080 --> 21:31.080
So there's a lot of features that is not present on pre-act signal.

21:31.080 --> 21:33.080
For example, the unused is not there.

21:35.080 --> 21:36.080
They have the batch function.

21:36.080 --> 21:38.080
I don't think they are lazy.

21:38.080 --> 21:39.080
I don't know.

21:39.080 --> 21:40.080
Maybe yes they are lazy.

21:40.080 --> 21:42.080
Well, it's close to what we have.

21:42.080 --> 21:45.080
We thought a few features that were missing.

21:45.080 --> 21:51.080
But before we started before them, at least we have open source I think before them.

21:51.080 --> 21:53.080
And we need them at the time.

21:53.080 --> 21:58.080
So there was no other scenario that fits on it.

22:08.080 --> 22:10.080
Yes, so Mobex is quite interesting.

22:10.080 --> 22:12.080
So we had a look at Mobex.

22:13.080 --> 22:16.080
It's quite verbose for me.

22:17.080 --> 22:23.080
It's interesting, but I don't know if they have the core that is basically framework and the stick and they are using the yes.

22:23.080 --> 22:29.080
So we had a look at the time, but maybe it was too many years ago.

22:29.080 --> 22:34.080
And when we developed Tansu, basically it was we developed not Tansu for NSUI.

22:34.080 --> 22:35.080
We developed it before.

22:35.080 --> 22:42.080
And the idea was because we were contributing to the Angular framework at the time.

22:42.080 --> 22:45.080
Angular was missing some scenarios of library internally.

22:45.080 --> 22:50.080
So this was a project to basically implement step management in all our applications,

22:50.080 --> 22:55.080
but also try to have a similar library that could fit our Angular need.

22:55.080 --> 23:04.080
So we are not really interested in having this library where we need to use it.

23:04.080 --> 23:07.080
We use a different framework and the different flavor.

23:07.080 --> 23:11.080
I think in Mobex, there's not a core that you can use for not having a stick one.

23:11.080 --> 23:15.080
So maybe we'll use this one.

23:15.080 --> 23:16.080
But I was not so...

23:16.080 --> 23:20.080
We played with it and we were not convinced at the time.

23:22.080 --> 23:24.080
Any other question?

23:24.080 --> 23:28.080
Just a second.

23:28.080 --> 23:33.080
If the next speaker, Diklan, can come and start sitting up.

23:33.080 --> 23:35.080
Sorry.

23:36.080 --> 23:38.080
So thanks, the talk.

23:38.080 --> 23:43.080
And the question is, do you, in any kind of...

23:43.080 --> 23:47.080
...like performance testing compared to other solutions in the market?

23:47.080 --> 23:50.080
benchmarking, whatever?

23:50.080 --> 23:54.080
Well, performance testing is always quite complex.

23:56.080 --> 23:58.080
Nope.

23:58.080 --> 24:07.080
In a sense that it's quite difficult because you have always a framework that operates in the other framework.

24:07.080 --> 24:10.080
So what should we focus on?

24:10.080 --> 24:12.080
Which performances?

24:12.080 --> 24:15.080
What we try is to be as lazy as possible.

24:15.080 --> 24:16.080
We are lazy basically.

24:16.080 --> 24:20.080
So in terms of computation, we should compute only what we need.

24:20.080 --> 24:27.080
We have also this on use setup that allows you to only compute things only when there's a subscriber on the store.

24:27.080 --> 24:34.080
So we think we are pretty efficient, but we have not done kind of...

24:34.080 --> 24:36.080
...complete performance testing.

24:36.080 --> 24:39.080
We are synchronous, so we are pretty fast.

24:39.080 --> 24:50.080
Also, in terms of when there's a change on the store, it computes every logic to compute all the derives and it's sending directly the data to the subscribers.

24:50.080 --> 24:54.080
It's a pretty small laboratory that insures itself.

24:58.080 --> 25:05.080
Yeah, we have time for last question if there is one.

25:05.080 --> 25:12.080
Just a reminder, try to always go to the middle so that others can also sit.

25:12.080 --> 25:16.080
And we can't be standing on the sides.

25:16.080 --> 25:18.080
That's a rule from the firefighters.

25:18.080 --> 25:22.080
So we really can't have anyone standing on the sides.

25:22.080 --> 25:27.080
There's a lot of last question.

25:27.080 --> 25:30.080
Yes, you can ask a question.

25:52.080 --> 26:00.080
Yeah, so we are thinking about providing a side effect function that is basically just subscribing to have the side effect run.

26:00.080 --> 26:02.080
Yes, indeed.

26:02.080 --> 26:09.080
Currently, we didn't have the use in our Orang Nostra laboratory, so we didn't implement it, but we were always talking about this like one month ago.

26:09.080 --> 26:13.080
So this is something we will have maybe in the future.

26:13.080 --> 26:17.080
Otherwise, yes, you need to subscribe to it to get its side effect.

26:22.080 --> 26:26.080
Thank you.

