WEBVTT

00:00.000 --> 00:10.000
I'll try my best.

00:10.000 --> 00:11.720
So I'm Nicolas Dufresne.

00:11.720 --> 00:13.560
I work for Collabora.

00:13.560 --> 00:18.920
I've been hacking on G-Streamer for over 10 years now.

00:18.920 --> 00:21.240
I also hack a bit on Lib Camera.

00:21.240 --> 00:25.120
I've earned a T-shirt this week.

00:25.800 --> 00:31.080
I'm going to give you an update of what is happening in G-Streamer

00:31.080 --> 00:34.240
since last Fosdame, basically.

00:34.240 --> 00:42.040
So in numbers, at last Fosdame, we were releasing 1.22.0

00:42.040 --> 00:44.880
of G-Streamer framework.

00:44.880 --> 00:50.480
And since then, we did nine bugfix releases.

00:50.480 --> 00:54.040
So the Rust component, oh, that's off.

00:54.040 --> 00:56.600
So the Rust component, I know why.

00:56.600 --> 00:57.600
Let me fix that quickly.

00:57.600 --> 00:58.240
Sorry about that.

01:10.360 --> 01:12.120
That's using time.

01:12.120 --> 01:12.840
Sorry about that.

01:21.560 --> 01:22.720
There we go.

01:22.720 --> 01:26.240
And just a different version of the tool.

01:26.240 --> 01:31.000
So as we mentioned last year, the Rust bindings and Rust

01:31.000 --> 01:34.120
plugins actually lives in separate repository

01:34.120 --> 01:35.640
with their own release cycle.

01:35.640 --> 01:39.240
So there was 13 releases of the Rust bindings,

01:39.240 --> 01:43.360
18 releases of the Rust plugins.

01:43.360 --> 01:47.800
There has been 13 security fixes that are basically

01:47.800 --> 01:51.960
security issue reported by researchers all in C code

01:51.960 --> 01:55.640
and over 600 backports on the C side

01:55.640 --> 01:59.920
and 600 backports on the Rust side.

01:59.920 --> 02:05.960
As for the development, we haven't released 1.24 yet,

02:05.960 --> 02:07.600
even though Tim actually mentioned that it

02:07.600 --> 02:09.080
might have been released.

02:09.080 --> 02:10.360
It should have been released.

02:10.360 --> 02:11.120
We'll work on it.

02:11.120 --> 02:12.680
I think we're super close.

02:12.680 --> 02:19.800
But understand that we had 1,400 merge requests on the C side,

02:19.800 --> 02:24.240
about 5,000 commits, plus 750 commits.

02:24.240 --> 02:26.120
That has been quite a lot of work.

02:26.120 --> 02:30.120
And it also introduced a bit of instability in the development

02:30.120 --> 02:32.840
tree that we need to take care of.

02:32.840 --> 02:36.840
On the community side, one of the big changes that we're slowly,

02:36.840 --> 02:40.440
so we didn't kill it, we're slowly moving from IRC to Matrix.

02:40.440 --> 02:44.840
So you can join us to the Matrix community, which brings

02:44.840 --> 02:48.200
basically a different topic challenge.

02:48.240 --> 02:52.120
Different topic channels, so you can actually have a channel

02:52.120 --> 02:57.360
dedicated to a topic which makes the channels a bit less noisy.

02:57.360 --> 03:01.160
We also introduced this year for support, a discourse,

03:01.160 --> 03:02.040
which is a forum.

03:02.040 --> 03:05.160
It's something that has been requested for a long time.

03:05.160 --> 03:08.520
People always wanted to use our issue tracker as a forum,

03:08.520 --> 03:09.880
and we didn't want to.

03:09.880 --> 03:13.560
Now we give the users a forum to do that.

03:13.560 --> 03:17.640
And it actually killed the mailing list, literally.

03:17.880 --> 03:21.520
I don't really get anything there anymore.

03:21.520 --> 03:23.600
Now the rest is going to be quite fast.

03:23.600 --> 03:26.880
Might skip some of your contribution if you're a G-shrimmer

03:26.880 --> 03:28.800
contributor because there's too much.

03:28.800 --> 03:31.240
But I'm going to give you another view of what change this is,

03:31.240 --> 03:32.760
things that didn't fit.

03:32.760 --> 03:35.600
So at the very core in the GST meta,

03:35.600 --> 03:39.360
we've introduced the ability to serialize and deserialize

03:39.360 --> 03:42.440
the meta for IPC purposes.

03:42.440 --> 03:45.520
We introduced the GST analytics relationship

03:45.520 --> 03:48.000
relation method, which is an attempt

03:48.000 --> 03:52.120
to standardize the analytics data exchanges

03:52.120 --> 03:56.840
between different ML systems, AI systems,

03:56.840 --> 04:01.240
or standard open CV kind of analysis.

04:01.240 --> 04:04.800
Small but there, and sort bin is now in your registry.

04:04.800 --> 04:06.840
So it's an element that you can discover

04:06.840 --> 04:10.560
and that you can start learning about four years later.

04:10.560 --> 04:13.840
ONNX have gained inference elements, zero copies

04:13.840 --> 04:15.480
have been refactored.

04:15.480 --> 04:19.720
This is the most active machine learning set of element

04:19.720 --> 04:20.800
in G-shrimmer.

04:20.800 --> 04:24.120
Orc has gained AVX to support, which

04:24.120 --> 04:28.080
increases a lot the software processing on recent laptop.

04:28.080 --> 04:29.960
You don't need to muck within code bin,

04:29.960 --> 04:32.360
which makes encode bin a lot more useful

04:32.360 --> 04:34.480
in a lot more situation.

04:34.480 --> 04:39.360
WebArt with WP source has been updated to the latest API.

04:39.360 --> 04:42.200
And finally, I think this feature is kind of cool

04:42.200 --> 04:43.240
and it didn't fit anywhere.

04:43.240 --> 04:45.640
QML6 has a mixer.

04:45.640 --> 04:49.720
So it's a mixer to display, which is a lot more efficient

04:49.720 --> 04:53.760
than doing tons of render paths to get a single buffer

04:53.760 --> 04:56.200
to then render it.

04:56.200 --> 05:00.520
On the codec and parser side, we've

05:00.520 --> 05:04.360
did quite an important change to the H264 parser

05:04.360 --> 05:09.240
to make our frame splitting actually spec compliant.

05:09.240 --> 05:10.720
It's not yet fully stable.

05:10.760 --> 05:13.360
We still have some regression to look around.

05:13.360 --> 05:17.280
But at least it means that you can do fun stuff

05:17.280 --> 05:18.280
with your bitstream now.

05:18.280 --> 05:22.840
And G-shrimmer won't think it's multiple frames.

05:22.840 --> 05:26.840
Small addition codec to JSON is just a set of plugins

05:26.840 --> 05:30.400
that takes your bitstreams, dumps the headers, stream

05:30.400 --> 05:32.920
headers, and slice headers, and frame headers,

05:32.920 --> 05:35.640
and makes a JSON out of it so you can actually read it.

05:35.640 --> 05:40.360
It's very useful if you develop an encoder.

05:40.560 --> 05:44.200
There was no GPEG parser in G-shrimmer officially.

05:44.200 --> 05:45.000
Now there is one.

05:45.000 --> 05:46.880
You no longer have to implement a parser

05:46.880 --> 05:49.160
in every single GPEG decoder.

05:49.160 --> 05:55.040
MPEG123 became our primary MP3 decoder, replacing MAD.

05:55.040 --> 05:59.600
Vulkan video, actually, we were early adopter of the Vulkan

05:59.600 --> 06:00.800
video standard.

06:00.800 --> 06:04.600
And we now have an H264 decoder that has been merged.

06:04.600 --> 06:06.080
And there's more work coming.

06:07.080 --> 06:09.160
There's a.

06:09.160 --> 06:13.160
Then we added a couple of codecs, LC3, audio codecs

06:13.160 --> 06:16.560
from Google's, PHQ, which I'm less familiar with.

06:16.560 --> 06:22.800
We've enabled support for the SVT AV1 software encoder.

06:22.800 --> 06:27.920
And on NVIDIA codec side, HDR, stream sharing,

06:27.920 --> 06:35.240
on AMD property codec side, we got HDR, HEVC, and AV1.

06:35.280 --> 06:36.320
Streaming side.

06:36.320 --> 06:39.600
So I put a little ROS logo next to what is actually

06:39.600 --> 06:41.720
being written in ROS.

06:41.720 --> 06:44.360
And I'll explain a bit further why later.

06:44.360 --> 06:47.800
So you can see that the WebRTC sync now

06:47.800 --> 06:51.440
can input pre-encoded stream support.

06:51.440 --> 06:55.000
It has the 3D11 and QSV encoder support.

06:55.000 --> 06:58.840
There's a base, I think it's a base class, a base class

06:58.840 --> 07:00.960
for the WebRTC syncs.

07:00.960 --> 07:04.680
And out of that, there's Genus VR WebRTC sync,

07:04.680 --> 07:07.880
VR for video room not for virtual reality.

07:07.880 --> 07:12.120
And AWS sync also, that makes your life easier.

07:12.120 --> 07:15.480
It basically handles the signaling for you.

07:15.480 --> 07:17.800
And it also handles the encoding for you.

07:17.800 --> 07:20.640
It handles the bitrate adaptation for you.

07:20.640 --> 07:26.320
So it's much easier than going straight to WebRTC bin.

07:26.320 --> 07:29.360
We also have some enhancement on the WebRTC source,

07:29.360 --> 07:31.120
including turn support.

07:31.120 --> 07:35.200
We now have a web server source to go with the web client

07:35.200 --> 07:37.040
source.

07:37.040 --> 07:38.920
We have an HTML API.

07:38.920 --> 07:42.720
I must admit, I didn't go through deep on what that thing do.

07:42.720 --> 07:45.800
But it's on top of it, and it offers an HTML.

07:45.800 --> 07:48.880
It's a kind of separate project inside the project.

07:48.880 --> 07:54.240
And another mentioned, there's basically

07:54.240 --> 07:56.600
a new feature you can do, synchronized playback

07:56.600 --> 08:00.080
in JitterBuffer using your system clock

08:00.120 --> 08:02.480
if your system clock is synchronized with your media

08:02.480 --> 08:04.280
clock.

08:04.280 --> 08:05.880
That's more of an embedded use case.

08:05.880 --> 08:07.880
But yeah.

08:07.880 --> 08:09.320
More about streaming.

08:09.320 --> 08:12.800
NDI sources gain zero copy.

08:12.800 --> 08:18.960
There's a new element called AWS put object, which

08:18.960 --> 08:20.840
not very good for throughput, but it's

08:20.840 --> 08:23.560
a much lower latency for a small chunk of data

08:23.560 --> 08:26.120
that you want to upload to AWS Cloud.

08:26.120 --> 08:31.240
HLS CMaf sync finally, so you can serve CMaf,

08:31.240 --> 08:35.800
which is the common fragmented storage for all

08:35.800 --> 08:38.720
the fragmented implementation, whether it's dash or HLS.

08:38.720 --> 08:45.280
You can now serve HLS using CMaf in Gstreamer.

08:45.280 --> 08:50.040
The fragmented Moxer has gained VP8 and MV1 support.

08:50.040 --> 08:53.040
And another one, which is a bit niche,

08:53.040 --> 08:59.000
we now expose a W3C media source extension API that

08:59.000 --> 09:03.760
mimics the web API that you can bind into whatever you want.

09:03.760 --> 09:06.520
The intention with that is basically

09:06.520 --> 09:11.320
to be able to share your JavaScript between something

09:11.320 --> 09:14.480
that runs in your browser and something that runs in kind

09:14.480 --> 09:15.640
of standalone player.

09:19.200 --> 09:22.200
Specifically on the binding itself,

09:22.200 --> 09:26.240
I probably missed a couple of things there, but there's GES,

09:26.240 --> 09:28.320
so Gstreamer editing services bindings.

09:28.320 --> 09:32.680
There's bindings for the VBI parser and encoder.

09:32.680 --> 09:36.840
The handling, I mean, there's accessors for the pad probe,

09:36.840 --> 09:41.640
which makes using pad probe a lot less verbose.

09:41.640 --> 09:44.120
And there's bindings for some metadata,

09:44.120 --> 09:48.440
like the video SE user data on register, the RTP source

09:48.440 --> 09:51.320
meta, and yeah, a lot more.

09:51.320 --> 09:56.520
This binding is extremely active and maintained.

09:56.520 --> 09:59.120
An interesting one, it's a bit uncommon

09:59.120 --> 10:03.080
to have such an amount of activity on video formats,

10:03.080 --> 10:05.000
especially pixel formats.

10:05.000 --> 10:09.080
And yeah, we've seen 20 new pixel format on the software

10:09.080 --> 10:14.680
transformation side, 27 new pixel format in GL25 and D3D11.

10:14.680 --> 10:17.920
And I'm actually skipping D3D12 and CUDA here,

10:17.920 --> 10:21.000
which probably have the same numbers.

10:21.040 --> 10:23.760
We introduce quite something.

10:23.760 --> 10:29.280
It's basically the ability to pass through Linux DRM pixel

10:29.280 --> 10:33.280
format and their modifier that enables GPU compression

10:33.280 --> 10:35.240
on Linux mostly.

10:35.240 --> 10:38.720
And that should make your video playback on your laptops

10:38.720 --> 10:41.960
a lot faster.

10:41.960 --> 10:45.080
It comes with helpers to do CAPS negotiation

10:45.080 --> 10:48.720
and all the design for the negotiation also

10:48.760 --> 10:52.280
is published on the website.

10:52.280 --> 10:54.680
It's implemented in VA, MSDK, Wayland,

10:54.680 --> 10:57.800
and there's more support coming.

10:57.800 --> 11:01.920
Small, but because it came from a new contributor,

11:01.920 --> 11:06.160
someone added 10-bit support to the WebMalpha support.

11:06.160 --> 11:11.800
We also introduced 10, 12, 14, 16-bit software debiring,

11:11.800 --> 11:15.760
which I mean, I think nobody had touched the debiure

11:15.760 --> 11:16.760
for 10 years.

11:16.800 --> 11:19.080
So it was a bit of a surprise, but then we're

11:19.080 --> 11:21.360
back to the modern days.

11:21.360 --> 11:23.080
I think it's mostly because of lib camera.

11:25.360 --> 11:29.560
And yeah, but a lot of activity this year

11:29.560 --> 11:35.000
has been on the Windows side, mostly done by a single person.

11:35.000 --> 11:37.480
So let's get the Windows updates.

11:37.480 --> 11:42.280
So on D3D11 support, there's an IPC sort of sync

11:42.280 --> 11:43.240
that has been created.

11:43.240 --> 11:46.720
So you can share basically D3D textures

11:46.720 --> 11:49.360
around across processes.

11:49.360 --> 11:50.920
You now have another lay element,

11:50.920 --> 11:52.600
a bit like the Cairo element.

11:52.600 --> 11:54.360
You get a draw callback, and you get

11:54.360 --> 11:58.000
to use the system context to draw.

11:58.000 --> 12:00.440
That's about it.

12:00.440 --> 12:03.320
That was a question from last year Fosdame.

12:03.320 --> 12:09.040
We now have D3D11 support for QT6.

12:09.040 --> 12:11.320
Lots of improvement and pattern and stuff

12:11.320 --> 12:13.640
in the D3D11 test.

12:13.640 --> 12:17.440
You can now pre-compile your HLSL shaders

12:17.440 --> 12:20.120
and cache it on disk.

12:20.120 --> 12:23.160
There's basically the NVIDIA decoder

12:23.160 --> 12:25.960
can now output to D3D textures.

12:25.960 --> 12:28.960
And you have the right support to optimize the rendering

12:28.960 --> 12:33.560
of overlay, which is basically a companion to D3D11.

12:36.720 --> 12:40.000
On D3D12, that's a much newer subsystem,

12:40.280 --> 12:42.080
but it's equivalent, and it's getting

12:42.080 --> 12:45.440
almost all the same features now as the D3D11.

12:45.440 --> 12:50.440
So added MPEG-2, H264, HEVC, VP9 decoder.

12:51.160 --> 12:53.080
I'm actually surprised not to have AV1 there.

12:53.080 --> 12:56.000
It's probably there, or probably just missed it.

12:56.000 --> 12:59.240
And H264 and HEVC stateless encoders,

12:59.240 --> 13:01.400
so they're a much harder encoder to implement

13:01.400 --> 13:03.920
because you have to do more work.

13:05.000 --> 13:09.440
And compositor overlay, screen capture,

13:09.440 --> 13:13.600
color space converter, same pre-compilation support

13:13.600 --> 13:15.520
and shader support.

13:15.520 --> 13:17.960
It didn't do zero copy until this year,

13:17.960 --> 13:21.800
so zero copy, threaded decoders to improve that throughput,

13:21.800 --> 13:26.800
and it's interoperable with the D3D11 framework.

13:28.080 --> 13:30.760
So that's most of the Windows update.

13:31.880 --> 13:35.040
On open GL side, well, most of the work

13:35.040 --> 13:38.920
has been to be able to negotiate the DRM modifier

13:38.920 --> 13:42.760
so we can get compressed video frame into GL,

13:42.760 --> 13:44.800
zero copy into GL and render it.

13:46.200 --> 13:48.640
Just recently, we also added the ability

13:48.640 --> 13:53.640
to pass through the DMO formats

13:54.200 --> 13:56.600
so that we can upload to GTK4,

13:56.600 --> 13:58.840
the rendering to your compositor.

13:58.840 --> 14:00.360
So that's coming.

14:00.360 --> 14:03.640
You'll be able to basically skip your GPU completely

14:03.640 --> 14:06.000
so it can shut down while you watch your video.

14:07.000 --> 14:10.320
We added surface display support

14:10.320 --> 14:15.320
and GTK4 paintable sync in Rust now has GL window support.

14:19.360 --> 14:23.040
More specifically to UNIX-like systems,

14:24.240 --> 14:26.880
VA, Wailin, and MSDK, I mentioned that already,

14:26.880 --> 14:28.880
have the DRM modifier support.

14:28.880 --> 14:33.240
We have a VA and V1 encoder now implementation

14:34.240 --> 14:39.240
for the newest brand of Intel laptop mostly.

14:42.480 --> 14:45.640
The Android media codec now has been ported

14:45.640 --> 14:49.440
from being fully C calling into Java

14:49.440 --> 14:51.600
to be implemented using the NDK,

14:51.600 --> 14:53.400
so it's implemented in C,

14:53.400 --> 14:55.040
except for I think one callback,

14:55.040 --> 14:59.360
it's reduced a lot the overhead for codecs on Android

14:59.360 --> 15:01.200
and we added AV1 support.

15:02.200 --> 15:05.120
There's a new set of elements for UNIX,

15:05.120 --> 15:08.280
which is the UNIX FD source and FD sync.

15:08.280 --> 15:12.240
It kind of replaces SHIM source and SHIM sync.

15:12.240 --> 15:14.640
The main difference is that what goes,

15:14.640 --> 15:18.240
it actually passes through the caps

15:18.240 --> 15:22.160
and it serialized the G streamer method to the other side

15:22.160 --> 15:25.760
and it also passes MMFD or DM above

15:25.760 --> 15:29.920
or any file descriptor that you would be streaming.

15:29.960 --> 15:33.600
So zero copy on like the SHIM source

15:33.600 --> 15:34.760
and SHIM sync element.

15:35.920 --> 15:38.280
OSS that's opens on a system

15:38.280 --> 15:41.120
from that is still used on a BSD these days.

15:41.120 --> 15:43.640
Now you can animate your audio device,

15:43.640 --> 15:46.840
which was quite a missing feature.

15:46.840 --> 15:49.920
The Wailin sync have gain support

15:49.920 --> 15:52.920
for DRM DOM allocator on Linux.

15:52.920 --> 15:55.880
It's not exactly automatic yet, that's coming,

15:55.880 --> 15:59.720
but what it does is that when you do software decoding,

15:59.720 --> 16:04.040
you can decode into a GPU importable buffer

16:04.040 --> 16:06.640
and that means that your Wailin compositor

16:06.640 --> 16:08.600
is gonna be able to use a hardware layer,

16:08.600 --> 16:11.440
which remove some copies

16:11.440 --> 16:13.160
and you're already software decoding,

16:13.160 --> 16:15.640
so whatever gain you get, that's a gain

16:15.640 --> 16:19.740
and that makes software decoding better.

16:21.760 --> 16:26.760
Now embedded Linux, we added V4L2,

16:27.280 --> 16:29.480
everyone's stateless decoder.

16:29.480 --> 16:31.600
For me, it's two years of work

16:31.600 --> 16:33.960
because we also did the kernel side of it.

16:35.040 --> 16:39.320
People from Pengatronics added the UVC sync element,

16:39.320 --> 16:43.600
which is a companion to the Linux UVC gadget framework

16:43.600 --> 16:46.240
which basically lets you use Gstreamer

16:46.240 --> 16:49.900
to create a webcam out of your little chip

16:49.900 --> 16:53.260
that supports the appropriate USB protocols.

16:54.260 --> 16:59.260
In V4L2, stateless codecs are now CI tested

17:01.460 --> 17:04.780
using QMU and a virtual driver called Vizzle,

17:04.780 --> 17:06.260
so it does not really decode,

17:06.260 --> 17:08.700
but it produce image that is modified

17:08.700 --> 17:10.460
based on the parameter,

17:10.460 --> 17:14.600
so it's basically good for catching changes,

17:14.600 --> 17:18.500
which are usually just a regression and it actually works,

17:18.500 --> 17:21.540
so we're pretty happy, it run in 10 seconds.

17:21.740 --> 17:23.540
Our fastest decoder out there.

17:24.460 --> 17:26.700
V4L2 source now cares about frame rates,

17:26.700 --> 17:28.780
so when you use V4L2 source,

17:28.780 --> 17:31.620
you may get something better than two to five frames

17:31.620 --> 17:34.340
per second by default, it's pretty nice.

17:35.380 --> 17:39.340
The GC allocator gain at DME buff, DRM DOM allocator,

17:39.340 --> 17:42.060
hopefully we'll gonna get a GBM also allocators

17:42.060 --> 17:46.260
in the future and we also have buyer support

17:46.260 --> 17:51.060
integrated into V4L2 source and yeah,

17:51.900 --> 17:52.980
we've improved the, oh yeah,

17:52.980 --> 17:56.380
we've improved a bit the V4L2 state for decoders

17:56.380 --> 17:59.940
in order to try and get the Raspberry Pi 3

17:59.940 --> 18:01.940
and 4 experience a bit better,

18:01.940 --> 18:06.940
so and that included the new dynamic resolution change method

18:07.220 --> 18:09.620
in the specification and HDR10.

18:12.100 --> 18:14.340
There was quite a lot of work on close captioning,

18:14.340 --> 18:15.740
I kept just few line,

18:15.740 --> 18:20.740
but basically there's a boxer for C8608,

18:20.860 --> 18:23.220
the CC combiner has been greatly improved,

18:23.220 --> 18:26.820
there's a C8608 renderer overlay

18:26.820 --> 18:29.540
and it looks like the development of that

18:29.540 --> 18:32.980
is moving toward Rust now and there's a converter now

18:32.980 --> 18:37.220
for the older close captions to the newer

18:37.220 --> 18:41.940
close caption standard in the Rust plugin, Revisdery.

18:43.900 --> 18:47.660
We've retired some stuff actually this year,

18:47.660 --> 18:52.580
so the GSTOMX is now gone,

18:52.580 --> 18:55.060
it was completely unused by Raspberry Pi,

18:55.980 --> 18:58.580
we never implemented any Android support

18:58.580 --> 19:01.740
because it was not exactly a real OMX

19:01.740 --> 19:04.980
and basically there's been no contribution for years,

19:04.980 --> 19:06.500
so we decided to remove it.

19:07.700 --> 19:10.660
Kate, which is based on LibTiger,

19:10.660 --> 19:13.540
there's basically, it's becoming difficult

19:13.540 --> 19:15.180
to get LibTiger, so we were like,

19:15.180 --> 19:17.260
yeah, let's stop supporting that

19:17.260 --> 19:20.300
and finally we removed the use of G-Slice

19:20.300 --> 19:22.780
all over the code base,

19:22.780 --> 19:26.500
simply because G-Slice has been outperformed

19:26.500 --> 19:28.340
by the system heaps now,

19:28.340 --> 19:30.580
so we'll use the fastest one,

19:30.580 --> 19:32.820
which is the simplest one also,

19:32.820 --> 19:35.180
so Malachy is faster than G-Slice.

19:36.900 --> 19:38.980
We have future plans,

19:38.980 --> 19:41.380
I have no intention to actually spoil anything,

19:41.380 --> 19:45.260
but I'd like to underline that lately

19:45.260 --> 19:47.100
there's an effort that I've started

19:47.100 --> 19:52.100
to actually rewrite the RTP stack of G-Strema,

19:52.460 --> 19:55.180
mostly for security reason,

19:55.180 --> 19:58.540
because it deals with a lot of network input,

19:58.540 --> 20:01.900
but it's an opportunity also to fix some

20:01.900 --> 20:04.060
of the intrinsic performance issue

20:04.060 --> 20:05.700
of the current implementation,

20:05.700 --> 20:10.260
so we really hope that that's gonna be better.

20:10.260 --> 20:13.900
It's definitely a multi-year work ahead of us

20:13.900 --> 20:17.300
before that replaces the existing stack.

20:17.300 --> 20:21.260
I also personally strongly consider

20:21.260 --> 20:25.180
contributing a replacement for our parsers.

20:25.180 --> 20:28.140
Our bitstream parsers has been responsible

20:28.140 --> 20:31.060
for 50% of the security issue this year,

20:32.340 --> 20:34.900
so that's definitely just the AV1 parser,

20:34.900 --> 20:36.620
I think it's the fourth in a row,

20:36.620 --> 20:38.500
so we have four bug fix releases

20:38.500 --> 20:42.820
that are made quickly because of the AV1 parser,

20:42.940 --> 20:44.820
and the first one actually came

20:44.820 --> 20:48.500
with a nice code execution example from the researcher,

20:48.500 --> 20:50.700
so it's very concerning.

20:52.460 --> 20:54.220
If you want to learn more about these things,

20:54.220 --> 20:55.940
I've been really on the surface,

20:55.940 --> 21:00.220
but all our G-Strema conference across all the years

21:00.220 --> 21:03.700
are recorded by UBTV, UBcast,

21:03.700 --> 21:06.460
and you can go watch them and you get more detail.

21:06.460 --> 21:09.020
We had one in October, which all fresh

21:09.020 --> 21:11.060
and covers a lot of this,

21:11.060 --> 21:16.060
and please if you want to get more in touch,

21:16.260 --> 21:17.460
there's gonna be a G-Strema conference

21:17.460 --> 21:19.340
against this year in October,

21:19.340 --> 21:22.940
and it's most likely going to be in Montreal,

21:22.940 --> 21:26.140
actually, first time out of Europe.

21:27.340 --> 21:31.500
Thank you, and we have three minutes for questions, I think.

21:33.180 --> 21:34.500
Five, oh, okay.

21:34.500 --> 21:35.340
Thank you.

21:35.340 --> 21:36.180
Thank you.

21:36.180 --> 21:37.020
Thank you.

21:37.020 --> 21:37.860
Thank you.

21:37.860 --> 21:38.700
Thank you.

21:38.700 --> 21:39.540
Thank you.

21:39.540 --> 21:40.380
Thank you.

21:40.380 --> 21:41.220
Thank you.

21:41.220 --> 21:42.060
Thank you.

21:44.700 --> 21:45.540
Sure.

21:45.540 --> 21:49.140
Can you say a bit more about the W3C media source extension,

21:49.140 --> 21:50.900
why you chose that and if you're seeing

21:50.900 --> 21:52.980
any active media extension?

21:52.980 --> 21:54.460
So the question is,

21:55.580 --> 22:00.580
can I give more context around the W3C media extension?

22:00.740 --> 22:04.620
So our use case was, basically my team did that,

22:04.620 --> 22:08.180
so our use case was that we had some people

22:08.180 --> 22:10.060
that wanted to use Shaka Player,

22:10.060 --> 22:12.300
which is a JavaScript player,

22:12.300 --> 22:14.860
but without the browser because their device

22:14.860 --> 22:18.060
is not strong enough to host a browser.

22:18.060 --> 22:20.060
So basically there's not enough RAM,

22:20.060 --> 22:21.900
there's not enough CPU,

22:21.900 --> 22:25.020
but they really wanted to share the same player,

22:25.020 --> 22:28.540
and the idea is that the first step was to make,

22:28.540 --> 22:31.940
basically an API that is like MSC inside of it.

22:31.940 --> 22:35.940
We didn't create it, we ported it from WebKit,

22:35.940 --> 22:38.380
and that is really easy with the object

22:38.380 --> 22:41.860
to expose then a JavaScript API

22:41.860 --> 22:44.220
that you can use a node or something like that.

22:45.660 --> 22:46.780
Yes.

22:46.780 --> 22:50.660
How hard is it for someone who knows the C API quite well

22:50.660 --> 22:53.460
to get started with writing Rust plugins?

22:55.340 --> 22:56.580
Yeah, so the question is,

22:56.620 --> 22:59.300
how hard is it for someone that knows well

22:59.300 --> 23:02.340
the GStreamer C API to write it in Rust?

23:04.060 --> 23:05.620
Do you have a better answer than me on that?

23:05.620 --> 23:06.460
I don't know.

23:06.460 --> 23:11.460
I've personally been for last year in kernel development,

23:12.900 --> 23:15.980
so I haven't really been into the Rust thing,

23:15.980 --> 23:19.460
but from my experience, my tutorial trials,

23:19.460 --> 23:21.340
if you really know GStreamer,

23:21.340 --> 23:23.580
because we have such great bindings,

23:24.580 --> 23:26.540
and you have so many examples now,

23:27.700 --> 23:29.140
it's not that hard.

23:29.140 --> 23:31.460
The hard part is basically the discussion

23:31.460 --> 23:33.660
that you have with the compiler

23:33.660 --> 23:37.060
that is telling you that you don't really understand

23:37.060 --> 23:38.500
what you're doing initially,

23:38.500 --> 23:40.860
that you don't really understand what's ownership,

23:40.860 --> 23:45.860
and it's part of Rust.

23:45.900 --> 23:48.260
You really get intimate with the compiler.

23:48.260 --> 23:51.380
But could you say if you want to develop a new plugin

23:51.500 --> 23:53.100
and you should go to Rust,

23:53.100 --> 23:55.740
or should you still seek with C for time being?

23:56.820 --> 23:58.460
I think it's the best recommendation to give.

23:58.460 --> 24:01.260
So if you were to develop a new plugin,

24:01.260 --> 24:02.300
should you go to Rust?

24:02.300 --> 24:03.620
I think my answer is yes.

24:07.220 --> 24:10.100
Yes, it's great to have a new plugin for Rust.

24:10.100 --> 24:12.780
Are there any plans for the new and what kind of work

24:12.780 --> 24:14.540
in writing Rust?

24:14.540 --> 24:16.900
You'll have to repeat the question for myself.

24:16.900 --> 24:19.260
Is there any plans for writing some of the core

24:19.260 --> 24:20.740
GStreamer Rust?

24:20.740 --> 24:22.540
So the question is if there's any plans

24:22.540 --> 24:25.180
to rewrite some of the core in Rust.

24:26.780 --> 24:27.740
For now, no.

24:28.780 --> 24:32.120
I mean, you don't consider the RTP stack as a core

24:32.120 --> 24:34.740
because it's actually a plugin.

24:34.740 --> 24:36.900
So yeah, there's no current,

24:36.900 --> 24:39.660
nobody actually shout out that they were doing that.

24:39.660 --> 24:43.420
There's few things that could actually be in Rust.

24:43.420 --> 24:47.980
Like someone, Sebastian actually made the PTP helpers

24:47.980 --> 24:51.340
in Rust that was kind of autonomous and independent

24:51.340 --> 24:54.220
that fits, but yeah, in the short term, no.

25:03.800 --> 25:05.520
I think we're good.

25:05.520 --> 25:06.820
Well, thank you very much.

25:06.820 --> 25:07.660
Thank you.

25:07.660 --> 25:08.500
Thank you.

