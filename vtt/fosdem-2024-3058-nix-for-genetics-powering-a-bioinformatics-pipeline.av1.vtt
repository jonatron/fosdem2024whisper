WEBVTT

00:00.000 --> 00:14.960
We have now up next Alexi talking about NICS for bioinformatics pipelines.

00:14.960 --> 00:17.480
So thank you everyone for coming.

00:17.480 --> 00:24.000
For five minutes I will try to make a kind of different presentation and try to say how

00:24.000 --> 00:26.520
NICS can help safe patients.

00:26.520 --> 00:28.800
It's not a clickbait title I promise.

00:28.800 --> 00:35.800
So I have a doctor in training but I also have a background in computer science so it's

00:35.800 --> 00:42.600
a kind of a mixed presentation and I'm working in France in Besanson Hospital.

00:42.600 --> 00:47.080
So when we are dealing with patients we want basically three things.

00:47.080 --> 00:55.400
First we want to give accurate results because for these patients diagnosis can be life changing.

00:55.400 --> 01:02.160
Second we need to be reproducible because all the doctors trust us with giving accurate

01:02.160 --> 01:04.400
results every time.

01:04.400 --> 01:12.320
Finally we want to be as fast as possible because there is a high demand for results.

01:12.320 --> 01:18.560
I'm working in a rare disease setup where obviously things are rare so it's hard to find

01:18.560 --> 01:20.800
and how do we do it?

01:20.800 --> 01:25.320
Well it's a mix of computer science.

01:25.320 --> 01:29.080
And expertise and state of the art technology.

01:29.080 --> 01:34.440
So here is a very worth scheme of how everything works.

01:34.440 --> 01:41.000
We start from a blood sample of a patient and we try to extract the DNA and sequence

01:41.000 --> 01:44.680
it on this machine thing.

01:44.680 --> 01:52.760
Unfortunately the machine doesn't do everything and we need some bioinformatics in there.

01:52.760 --> 01:56.480
And also the bioinformatics doesn't do everything either.

01:56.480 --> 02:02.840
We need a human at the end of a pipeline which is why there is a CSV file that a human has

02:02.840 --> 02:04.720
to read.

02:04.720 --> 02:12.360
And basically what the bioinformatics setup does is that it figures out a list of candidates

02:12.360 --> 02:17.120
for diagnosis and try to filter down the results.

02:17.120 --> 02:22.440
For example it can go from one million candidates to a thousand.

02:22.440 --> 02:26.120
If it filters too much we can miss the diagnosis.

02:26.120 --> 02:32.520
If it doesn't filter enough, well the human will have a really hard time trying to pass

02:32.520 --> 02:35.320
the CSV.

02:35.320 --> 02:39.520
When you say pipeline it's a really fancy word for just a set of common line utility

02:39.520 --> 02:48.560
tools but we also have databases in there that are in our setup just text files compressed.

02:48.560 --> 02:54.120
And when I say pipeline we just feed data from one CLE tool to another.

02:54.120 --> 02:58.600
And now how does Nix can help it with this?

02:58.600 --> 03:02.680
Well as a medical lab we have to be reproducible.

03:02.680 --> 03:04.280
It's like in the law.

03:04.280 --> 03:09.360
So Nix is a perfect fit because we can fix the software dependency and the dependency

03:09.360 --> 03:14.720
either like byte by byte dependency.

03:14.720 --> 03:17.120
So that's done.

03:17.120 --> 03:21.960
So it would be great if you could run on the high performance computing cluster.

03:21.960 --> 03:28.200
And in our region the folks in our cluster agreed to install Nix.

03:28.200 --> 03:33.000
And now we can run our current production with Nix there.

03:33.000 --> 03:36.840
Two things we didn't do with Nix was to manage the whole workflow.

03:36.840 --> 03:42.840
There is actually a tool for that Nix but it's more like a niche thing so we prefer

03:42.840 --> 03:46.040
to use a more common tool.

03:46.040 --> 03:51.480
And the final things what we could do in Nix but we didn't is to manage this large

03:51.480 --> 03:57.600
database because in our setup it's a different folder for Nix so we cannot install it.

03:57.600 --> 04:01.360
But it's there in Nix.

04:01.360 --> 04:03.160
Last last thing.

04:03.160 --> 04:05.640
I really enjoyed the community.

04:05.640 --> 04:08.040
It was a really nice interaction.

04:08.040 --> 04:10.720
I'm sure everyone knows.

04:10.720 --> 04:15.200
But it's also kind of a slow process because I tried to package something myself which

04:15.200 --> 04:17.640
is not easy at the beginning.

04:17.640 --> 04:23.960
And as you know there is like 5,000 pull requests on GitHub so feedback can be sometimes a bit

04:23.960 --> 04:30.600
slow and also I'm working on my spate arm either so it can also take some time sometimes.

04:30.600 --> 04:38.480
But for example the support for large databases has been added after a few conversations on

04:38.480 --> 04:42.200
Matrix.

04:42.200 --> 04:43.760
It was really fast.

04:43.760 --> 04:48.440
I hope you take some key points there but if you want to know more you can send me an

04:48.440 --> 04:51.520
email and I'll be glad to answer.

04:51.520 --> 04:52.520
Thank you.

04:52.520 --> 04:53.520
Thank you.

04:53.520 --> 04:54.520
Thank you.

04:54.520 --> 04:55.520
Thank you.

04:55.520 --> 04:56.020
Thank you.

