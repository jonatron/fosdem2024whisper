WEBVTT

00:00.000 --> 00:09.440
Thank you all and thank you all for attending this talk.

00:09.440 --> 00:17.800
So yeah, I'll be talking about how we can improve our future as mobile Linux users,

00:17.800 --> 00:22.400
especially with Mobian, but this all applies to other similar projects such as Postmarka

00:22.400 --> 00:24.680
2S and so on.

00:24.680 --> 00:29.040
So first question you might have is, who is this guy?

00:29.040 --> 00:33.560
So basically I'm working as Senior Software Engineer at Colabora.

00:33.560 --> 00:39.920
I'm dealing mostly with building and maintaining custom distributions for embedded systems,

00:39.920 --> 00:43.320
so kind of related to what I do with Mobian.

00:43.320 --> 00:52.480
I've been a long time Floss Introduce and I've been a DBN developer for a few years.

00:52.480 --> 01:00.560
And back in 2020, so just the last first damn before the pandemic, basically, I got

01:00.560 --> 01:06.720
my hands on a pine phone and this prompted me to work on that, work on mobile Linux in

01:06.720 --> 01:12.120
general and start and still continue working on the Mobian project.

01:12.120 --> 01:20.240
So what's actually Mobian?

01:20.240 --> 01:26.760
It's a DBN derivative or in the DBN jargon we call that a blend, which targets mobile

01:26.760 --> 01:30.800
devices such as smartphones and tablets.

01:30.800 --> 01:37.080
It has a separate package repository and provides ready to use disk images you can flash on

01:37.080 --> 01:39.640
a few devices.

01:39.640 --> 01:46.600
It's actually a very small overlay on top of the DBN and we only provide currently 25

01:46.800 --> 01:55.120
source packages in our repository compared to the vastly greater number which is in the

01:55.120 --> 02:04.120
DBN, which means that technically of all the packages you have access from a Mobian device,

02:04.120 --> 02:09.720
actually more than 99.9% of that is pure DBN.

02:09.720 --> 02:17.280
And so we have a few packages with downstream patches which can't be upstream at the present

02:17.280 --> 02:18.280
time.

02:18.280 --> 02:24.560
Half of those are kernels, a few others are user space applications, which we're working

02:24.560 --> 02:30.520
on dropping those patches and trying to find upstream friendly solutions.

02:30.520 --> 02:36.720
We have also a few packages which are basically workarounds because the feature does not exist

02:36.720 --> 02:42.920
in the upstream world, not yet at least one of those being for example, Millipixels, which

02:42.920 --> 02:46.960
is the camera application for the Libram 5.

02:46.960 --> 02:54.480
Once the Libram 5 gets supported by either or both megapixels and Lib Camera, we can basically

02:54.480 --> 02:59.320
just drop this package and rely on upstream applications.

02:59.320 --> 03:06.320
And finally we have six Mobian specific packages which are to be rewrote to be included in

03:06.320 --> 03:13.720
the DBN itself so we can lower the impact of Mobian and the footprint of Mobian.

03:13.720 --> 03:22.440
So we hope that we can get below 10 packages by the end of next year.

03:22.440 --> 03:27.680
We'll see if we make it, but that's our end goal for now.

03:27.680 --> 03:31.440
So latest developments, what happened the past year?

03:31.440 --> 03:34.240
We had the first table release.

03:34.240 --> 03:37.680
We just did the whole quotes around stable.

03:37.680 --> 03:43.800
It's basically that we released Mobian Bookworm at the same time as the DBN Bookworm was released.

03:43.800 --> 03:45.960
So that's our stable release.

03:45.960 --> 03:48.320
It doesn't mean it's bug free.

03:48.320 --> 03:55.240
It just means that we don't do huge upgrades and only targeted fixes.

03:55.240 --> 04:01.280
So the system stays stable and keeps working as it works currently even after software

04:01.280 --> 04:02.280
updates.

04:02.640 --> 04:07.520
So it was released in June last year.

04:07.520 --> 04:13.240
We have a few supported devices out of the box which are several Linux first devices,

04:13.240 --> 04:17.800
the PinePhone, the PinePhone Pro, the Librem 5 also.

04:17.800 --> 04:23.520
We support a few Android-based devices thanks to the work of the community, especially on

04:23.520 --> 04:27.720
the SDM845 kernel support.

04:27.720 --> 04:32.840
So we support the OnePlus 660 and the Pocophone F1.

04:32.840 --> 04:40.560
And we also provide X86 images for desktop PCs or X86 tablets such as the Microsoft

04:40.560 --> 04:44.080
Surface Pro and Go.

04:44.080 --> 04:50.560
We provide a single desktop environment in this release which is Posh.

04:50.560 --> 04:54.320
And we provide also up to today's 6.1 kernels.

04:54.320 --> 05:04.200
So the 6.1 kernel is not the latest but the former one LTS branch, meaning it's supported

05:04.200 --> 05:08.280
up until 2026 if my memory is good.

05:08.280 --> 05:16.160
And we have a script in CI which is run daily and automatically rebases all the kernel packages

05:16.160 --> 05:19.880
we have on 6.1 on the latest point release.

05:19.880 --> 05:27.040
So basically when there's a security update, usually the day after or the same day, the

05:27.040 --> 05:33.320
kernel is up to date in the Bookworm Update's repo which is basically our staging repo for

05:33.320 --> 05:35.320
the stable release.

05:35.320 --> 05:42.200
There are however a few things we wanted to include in this release that couldn't make

05:42.200 --> 05:43.700
it.

05:43.700 --> 05:45.640
First one is universal images.

05:45.640 --> 05:52.200
The plan here would be to have a single kernel package for all supported devices.

05:52.200 --> 05:59.360
It's working quite well for SDM 845 devices because they share already a single kernel

05:59.360 --> 06:06.720
and the people working on those devices all put their patches into the same repository.

06:06.720 --> 06:14.360
But for pine 64 devices for example which is based on all winner A64, rack chip, different

06:14.360 --> 06:17.040
chips also.

06:17.040 --> 06:22.560
It turns out that making a single kernel package out of those proved to be trickier than we

06:22.560 --> 06:32.400
anticipated and so we basically dropped this effort at some point and focused on having

06:32.400 --> 06:39.520
just per device kernels, at least for this release.

06:39.520 --> 06:43.960
So we couldn't make universal images obviously.

06:43.960 --> 06:50.040
We didn't find the time also to improve the hardware support of upstream.

06:50.040 --> 06:56.640
We still carry lots of patches across for all the devices I mentioned.

06:56.640 --> 07:04.800
It must be a total of 800 to 1000 downstream patches in the kernels only.

07:04.800 --> 07:06.880
So that's quite a significant amount.

07:06.880 --> 07:15.240
We'd like to get them upstream but we all had dead jobs and for now every day is still

07:15.240 --> 07:16.840
24 hours only.

07:16.840 --> 07:20.200
So we have to make choice.

07:20.200 --> 07:29.600
Also we wanted to switch to the latest LTS kernel which is now 6.6 and finally realized

07:29.600 --> 07:36.520
that we couldn't because we didn't have any time, any resources to spend on that.

07:36.520 --> 07:43.920
So that means that Bookworm is stuck forever on 6.1 which is not too bad because the life

07:43.920 --> 07:51.520
cycle of Bookworm will end in about a year and a half and until then this kernel will

07:51.520 --> 07:55.440
still receive security updates and bug fixes.

07:55.440 --> 08:02.280
So as long as Bookworm lives, the kernel lives along with it and we can get up to date and

08:02.280 --> 08:06.120
avoid security holes anyway.

08:06.120 --> 08:14.920
However, the next release which I'm about to talk is Trixie and is already on 6.6.

08:14.920 --> 08:18.760
So what about the recent developments?

08:18.760 --> 08:25.160
We try still to unify our disk images slowly.

08:25.160 --> 08:34.160
Instead of aiming for a single image for all devices, we're taking a step along this path

08:34.160 --> 08:40.200
and try to just ship one image per kernel.

08:40.200 --> 08:44.520
Until now we have one image for the PinePhone, one image for the PineTab, another one for

08:44.520 --> 08:51.760
the PinePhone Pro and the PineTab 2 and so on because some of those devices require hardly

08:51.760 --> 09:05.520
specific tweaks to be included with configuration strips, Udev rules and so on.

09:05.520 --> 09:12.320
And so we came to a point where actually most of these tweaks weren't needed anymore because

09:12.320 --> 09:18.400
upstream had picked up and had the necessary features for those devices.

09:18.400 --> 09:25.160
So we could envision having instead of having one image per device, having one image per

09:25.160 --> 09:26.160
kernel.

09:26.160 --> 09:32.160
And so we have our kernels per architecture basically, per sub architecture really.

09:32.160 --> 09:35.720
We have one for the old winner, A64 devices.

09:35.720 --> 09:40.080
We have one for the Rockchip-based devices which are the PinePhone Pro and the PineTab

09:40.080 --> 09:41.080
2.

09:41.080 --> 09:47.680
Two different socks from Rockchip but still we can use the same tree and so on.

09:47.680 --> 09:57.400
It was already working well on the SDM845 devices but we took this step a few weeks ago

09:57.400 --> 10:03.960
and so it quite reduced the number of images we were doing.

10:03.960 --> 10:12.240
Regarding Qualcomm-based images we had until now one image for the SDM845 devices and another

10:12.240 --> 10:19.680
one for the SMS225 which is basically the PhanPhone 4 because we used to maintain different

10:19.680 --> 10:22.420
kernels for all of those.

10:22.420 --> 10:31.080
This is going to change and actually already changed recently because we pretty much imported

10:31.080 --> 10:36.080
all the patches we needed into a single kernel for all Qualcomm devices we support.

10:36.080 --> 10:42.880
There are not many of those which is why we are managing to do that but for now we have

10:42.880 --> 10:49.800
a single kernel which handles all the SDM845 devices, 1 plus 6 and so on, the PhanPhone

10:49.800 --> 10:57.560
4 which has a different chip and also the PhanPhone 5 which has another different chip.

10:57.560 --> 11:03.600
And so we have a single image for all Qualcomm devices and we just use a simple config file

11:03.600 --> 11:09.920
at build time to generate the boot image for the device because although the root file

11:09.920 --> 11:17.400
system are identical the boot images are really device specific because they need to have

11:17.400 --> 11:24.960
the device tree appended and the specific RAM disk and so on.

11:24.960 --> 11:32.880
But other than this boot image generation everything is handled at runtime using JoyJuicer

11:32.880 --> 11:42.040
which fetches the binary firmware from the Android vendor partition because those devices

11:42.040 --> 11:47.800
ship with Android first and so the firmware are already present on the device.

11:47.800 --> 11:53.280
This makes things a bit easier for us because we don't have to care about the firmware license,

11:53.280 --> 12:00.080
we don't distribute it, it's at runtime fetched from data which is already available on the

12:00.080 --> 12:01.720
device.

12:01.720 --> 12:07.080
And there's also a small package with QCOM 4 new tools which basically just includes

12:07.080 --> 12:14.920
a few scripts and configuration for which are basically the same on all Qualcomm based

12:14.920 --> 12:19.200
devices we support.

12:19.200 --> 12:25.760
We're also adding in the process a simpler way to add new device support at least if

12:25.760 --> 12:28.280
it's Qualcomm based.

12:28.280 --> 12:35.440
The thing is until now we needed to have a kernel package in the Mobian repo and a few

12:35.440 --> 12:41.520
specific tricks in the image build process.

12:41.520 --> 12:50.120
We created a new target for these build scripts and build recipes basically which is QCOM

12:50.120 --> 12:58.920
4WIP, it's kind of a dummy device but the thing is you can separately build or rather

12:58.920 --> 13:05.640
cross compile your downstream kernel using the bin depth package make target which is

13:05.640 --> 13:12.160
supported by the upstream Linux so you don't have anything specific to do there.

13:12.160 --> 13:21.920
It generates a Debian package which you can drop into the Mobian recipes folder, edit some

13:21.920 --> 13:27.680
config file, run the build script and it will provide you with a root FS image and a boot

13:27.680 --> 13:31.600
image tailored for your device.

13:31.600 --> 13:38.200
Then you can flash it using fastboot and hopefully celebrate that your device can run Mobian.

13:38.200 --> 13:48.120
This is almost never that easy but the thing is we're moving the complexity from knowing

13:48.120 --> 13:55.040
the internals of the build system to just debugging the kernel booting on your device.

13:55.040 --> 14:03.480
So there's nothing Mobian specific in that, it's just general debugging and we basically

14:03.480 --> 14:09.920
made it sure it was as simple as it could be from the Mobian side.

14:09.920 --> 14:17.600
And we also have a small first-dem-present in the sense that Mobian now provides, it's

14:17.600 --> 14:24.440
been a week since the first images were published but we now provide plasma mobile images.

14:24.440 --> 14:31.280
It actually started over a year ago and the goal was to from the start have everything

14:31.280 --> 14:37.360
in Debian itself rather than carry downstream packages in Mobian.

14:37.360 --> 14:44.600
And so Marco, one of the Mobian developers, worked on that for more than a year and he

14:44.600 --> 14:50.480
managed to get all the needed packages in Debian itself including the MetaplasmaMobile

14:50.480 --> 14:57.560
Meta package which you just have to install, apt install PlasmaMobileFool for example and

14:57.560 --> 15:05.760
it will put in all the packages you need and from there we could build our Mobian image.

15:05.760 --> 15:09.840
So that's basically what happened over the last year.

15:09.840 --> 15:14.320
Now what's next?

15:14.320 --> 15:20.800
We're taking, trying to take a step further towards universal image.

15:20.800 --> 15:27.400
So I've talked about the kernel issue, unifying all patches into a single kernel but actually

15:27.960 --> 15:33.600
there's all this little device specific tweaks I mentioned earlier which have to be handled

15:33.600 --> 15:40.200
and until now we have per device packages so that means one new package to have in the

15:40.200 --> 15:44.320
repo for each new device we want to support.

15:44.320 --> 15:48.120
This is an approach that doesn't scale at all.

15:48.120 --> 15:52.240
I mean it works fine if you manage 10 devices.

15:52.240 --> 16:00.440
If you aim for tens or maybe let's hope for hundreds of devices it's just too much work

16:00.440 --> 16:02.040
for a small team.

16:02.040 --> 16:08.160
So the idea here is to have a runtime service which will identify the device it runs on

16:08.160 --> 16:16.880
using the device tree compatible property for example or the ACPI, DMI, vendor, manufacturer

16:16.960 --> 16:22.440
and so on strings on x86.

16:22.440 --> 16:29.320
Select or generate the needed config files, put them into a runtime generated Debian package

16:29.320 --> 16:36.000
and install it on the device with the ability to place triggers on that so that when one

16:36.000 --> 16:43.520
specific config file is modified by another package this tweaks package is regenerated,

16:43.520 --> 16:47.440
rebuilt and updated as well.

16:47.440 --> 16:54.440
So that's something we hope to achieve this year as well as getting closer to Pure Blend.

16:54.440 --> 17:02.120
This is a specific class of Debian derivatives and it involves having all the packages into

17:02.120 --> 17:05.040
the Debian repository.

17:05.040 --> 17:12.560
So this is our next step once we have a working runtime tweaks management but basically this

17:12.600 --> 17:20.240
would mean having all our meta packages, tweaks packages and so on into Debian itself so we

17:20.240 --> 17:28.320
can just install everything Mobian from the Debian repository.

17:28.320 --> 17:34.840
Not all hardware features will work unless you use the Mobian provided kernels of course

17:34.840 --> 17:42.280
so Mobian will stay relevant for some time at least and we'll also be still able to

17:42.320 --> 17:47.200
generate ready to use images which will make things easier for users rather than having

17:47.200 --> 17:52.640
to build themselves from the Debian packages.

17:52.640 --> 17:57.960
Another big topic is also the call audio management.

17:57.960 --> 18:07.880
A few years back we created call audio which is a demon monitoring the phone call status

18:07.880 --> 18:14.680
and switching audio profiles and routing on the go depending on the situation.

18:14.680 --> 18:20.800
This was in a post-sodial world and back then post-sodial didn't really bother with such

18:20.800 --> 18:26.480
things the only automatic switching it did was when you plug the headphones and so on

18:26.480 --> 18:32.520
and we made sure that call audio did disable that on the post-sodial side.

18:32.560 --> 18:38.320
But now we are living in a pipe wire world and with pipe wire comes a session manager

18:38.320 --> 18:45.680
which by default is wire plumber and the session manager is meant to do just that switch audio

18:45.680 --> 18:52.240
profiles switch the routing to match the current situation.

18:52.240 --> 18:59.000
And so call audio raises with wire plumber most of the time it often loses so this means

18:59.040 --> 19:06.960
that you're having a phone call and actually you don't hear anything in the phone earpiece

19:06.960 --> 19:13.160
because wire plumber did the switching right after call audio instructed pipe wire to do

19:13.160 --> 19:14.320
so.

19:14.320 --> 19:19.720
So there's clearly a conflict there and the goal here is to make call audio basically a

19:19.720 --> 19:22.360
part of wire plumber itself.

19:22.360 --> 19:29.080
This needs some work in pipe wire to make it aware of the modem and to monitor the phone

19:29.080 --> 19:38.080
call stages but we hope to submit an initial RFC implementation at some point this year.

19:38.080 --> 19:41.680
No problem obviously.

19:41.680 --> 19:49.120
And finally we plan for a few other minor improvements.

19:49.120 --> 19:57.080
I mean most of the project development process and infrastructure is under documented as

19:57.080 --> 20:01.600
it is most often the case.

20:01.600 --> 20:09.360
So we have very user centric documentation written by users but we are very few developers

20:09.360 --> 20:11.760
and we didn't take the time to do so.

20:11.760 --> 20:16.800
So we'd like to improve that because basically a significant portion of the project has a

20:16.800 --> 20:20.680
best factor of one which is me basically.

20:20.680 --> 20:29.920
So I try to change that and make sure we have backup solutions and we get more welcoming

20:29.920 --> 20:32.200
to other contributors.

20:32.200 --> 20:39.920
And finally we'd like also to keep working on upstream device improvements.

20:39.920 --> 20:42.720
The Pinefone Pro has a few low hanging fruits.

20:42.720 --> 20:46.160
We can upstream probably easily.

20:46.160 --> 20:51.160
The support for the Pinefone 2 is being merged upstream as we speak.

20:51.160 --> 20:53.400
It now has a working Wi-Fi device.

20:53.400 --> 20:57.480
We'll have to look if it can be upstream as well.

20:57.480 --> 21:03.840
We hope to support also the Pinefone V or Pad 9.5 depending on how you see it which would

21:03.840 --> 21:10.280
be the first week 5 device supported in Mobian.

21:10.280 --> 21:17.120
And we also welcome obviously contributions to support more devices to help us with documentation

21:17.120 --> 21:28.240
and to basically help us make the mobile future brighter for all of us Linux mobile users.

21:28.240 --> 21:29.240
So here are a few links.

21:29.240 --> 21:37.520
I put the slides.

21:37.520 --> 21:38.520
Thank you very much.

21:38.960 --> 21:39.960
Questions?

21:39.960 --> 21:40.960
Hi.

21:40.960 --> 21:54.680
So I was profoundly disappointed to read your blog post in October about the Travals

21:54.680 --> 22:00.800
with the Pinefone kernel and the fact that essentially all of the work that had gone

22:00.800 --> 22:07.480
into the Pinefone kernel in Meggy's kernel tree was not being upstream.

22:07.480 --> 22:13.240
Which I presumed was the case really since the Pinefone had come along.

22:13.240 --> 22:17.200
So I was just kind of wondering what had happened if anything had changed on that front if

22:17.200 --> 22:22.600
Meggy was upstreaming patches now or anyone else and kind of what the situation was with

22:22.600 --> 22:24.240
that.

22:24.240 --> 22:30.600
For the original Pinefone the current situation is that someone in Mobian stepped up to maintain

22:30.600 --> 22:32.600
and update this kernel.

22:32.600 --> 22:37.760
He also started upstreaming a few patches and is monitoring the kernel mailing list

22:37.760 --> 22:41.560
and working with upstream to improve the situation over time.

22:41.560 --> 22:46.440
So there's lots of work to be done.

22:46.440 --> 22:53.160
I know there's also another person which has started working on the driver for the Wi-Fi

22:53.160 --> 23:01.200
chip which for now it was downstream real tech full of crap basically and nothing close

23:01.280 --> 23:03.880
to being upstream able.

23:03.880 --> 23:09.760
The new driver will be hopefully upstreamed and so that's already one big pain in the

23:09.760 --> 23:11.880
ass which will be removed.

23:11.880 --> 23:21.120
So now there's a bit more hope for the original Pinefone and if things continue that way then

23:21.120 --> 23:28.240
it will probably be great.

23:28.280 --> 23:31.080
So a question from the matrix.

23:31.080 --> 23:35.880
Is there any plan to port the EG25 manager to LibGP-IoD 2.0?

23:35.880 --> 23:43.800
Right, yeah EG24 manager is a very specific piece of software for the modem found in the

23:43.800 --> 23:46.160
Pinefone and Pinefone Pro.

23:46.160 --> 23:54.320
It's using GPIOs through LibGP-IoD and there's a new release which changed the API completely.

23:54.320 --> 24:00.800
The thing is for now LibGP-IoD isn't packaged in Debian at least the version 2.

24:00.800 --> 24:07.600
Version 1 is in Debian so yeah for now I don't have any definite plan.

24:07.600 --> 24:16.040
The plan being once version 2 is in Debian then we go with it but before I'm not sure

24:16.040 --> 24:19.320
I have the time to deal with all of this.

24:19.320 --> 24:22.400
But much requests are welcome as always.

24:23.280 --> 24:26.960
Yeah so a question regarding your tweaks approach.

24:26.960 --> 24:30.120
So why do you want to build if I understood this correctly?

24:30.120 --> 24:35.160
The tweaks on the device package them there and then install this package instead of having

24:35.160 --> 24:39.000
just one package that carries all the tweaks.

24:39.000 --> 24:44.520
The thing is we will have one package carrying all the tweaks but those tweaks can conflict

24:44.520 --> 24:46.040
with each other.

24:46.040 --> 24:50.840
You can have conflicting configurations for OGO for example and depending on the device

24:50.840 --> 24:53.080
you have to select the right one.

24:53.080 --> 24:58.440
You have also devices which can't suspend because otherwise they don't resume and other

24:58.440 --> 25:01.480
devices which can do that.

25:01.480 --> 25:08.160
So you have to select the appropriate tweaks and the idea of creating a Debian package

25:08.160 --> 25:12.840
is that the packaging system is aware of those files.

25:12.840 --> 25:19.040
If you have some files and the user shares something then it won't overwrite them with

25:19.080 --> 25:21.680
a file from another package.

25:21.680 --> 25:28.920
If we don't do a package on the device and install it then if we just move files around

25:28.920 --> 25:35.520
the packaging system will not be aware of those and if at some point one Debian package

25:35.520 --> 25:42.160
ships a file with the exact same name then it will break.

25:42.160 --> 25:43.480
So that's the idea.

25:43.480 --> 25:46.520
Alright please give another background of applause for Anu.

25:46.520 --> 25:47.520
Thank you.

25:47.520 --> 25:48.520
Thank you.

25:48.520 --> 25:49.520
Thank you.

25:49.520 --> 25:50.520
Thank you.

25:50.520 --> 25:51.520
Thank you.

25:51.520 --> 25:52.520
Thank you.

25:52.520 --> 25:53.520
Thank you.

25:53.520 --> 25:54.520
Thank you.

25:54.520 --> 25:55.520
Thank you.

25:55.520 --> 25:56.520
Thank you.

25:56.520 --> 25:57.520
Thank you.

25:57.520 --> 25:58.520
Thank you.

25:58.520 --> 25:59.520
Thank you.

25:59.520 --> 26:00.520
Thank you.

26:00.520 --> 26:01.520
Thank you.

26:01.520 --> 26:02.520
Thank you.

26:02.520 --> 26:03.520
Thank you.

26:03.520 --> 26:04.520
Thank you.

26:04.520 --> 26:05.520
Thank you.

26:05.520 --> 26:06.520
Thank you.

26:06.520 --> 26:07.520
Thank you.

26:07.520 --> 26:08.520
Thank you.

26:08.520 --> 26:09.520
Thank you.

26:09.520 --> 26:10.520
Thank you.

26:10.520 --> 26:11.520
Thank you.

26:11.520 --> 26:12.520
Thank you.

26:12.520 --> 26:13.520
Thank you.

26:13.520 --> 26:14.520
Thank you.

26:14.520 --> 26:15.520
Thank you.

26:15.520 --> 26:16.520
Thank you.

