WEBVTT

00:00.000 --> 00:05.000
Okay.

00:05.000 --> 00:08.000
So, hello everyone.

00:08.000 --> 00:11.000
So, I'm Jean-Vatiste and Geoffroy is here.

00:11.000 --> 00:16.000
So, we are at the software development department from RT.

00:16.000 --> 00:18.000
And RT, was it RT?

00:18.000 --> 00:21.000
So, we will give some elements of context.

00:21.000 --> 00:25.000
So, RT is the French TSO, so transmission system operator.

00:25.000 --> 00:31.000
We handle from 20 kV to 400 kV, so it's the high voltage.

00:31.000 --> 00:37.000
And we must provide electricity 24-7 for all the costumers

00:37.000 --> 00:40.000
and all the inhabitants in France and of course in Europe

00:40.000 --> 00:42.000
because we have to cooperate.

00:42.000 --> 00:47.000
And the particularity is that we are asset owner of the grid,

00:47.000 --> 00:51.000
which means that we are responsible to invest and make sure

00:51.000 --> 00:57.000
that the equipment will be okay to work to complete our mission as a TSO.

00:57.000 --> 01:01.000
And we are also responsible to adapt the structure

01:01.000 --> 01:05.000
to make sure that we will ease the transition energy.

01:05.000 --> 01:12.000
So, we need some interconnections and we also try to adapt the grid

01:12.000 --> 01:17.000
to connect for example offshore wind generators.

01:17.000 --> 01:21.000
So, we have many, many challenges in the fast changing world.

01:21.000 --> 01:33.000
So, we have of course new energy mix with big goal around neutral carbon neutrality.

01:33.000 --> 01:36.000
Sorry, for 2050.

01:36.000 --> 01:38.000
So, it's a big challenge.

01:38.000 --> 01:44.000
And we have also some codes, some regulation that make drastic change

01:44.000 --> 01:46.000
and we must adapt to that.

01:46.000 --> 01:52.000
So, it's a more package where we have a lot of work to do in Europe.

01:52.000 --> 01:56.000
And for that, I will read the sentence because it's very important.

01:56.000 --> 01:58.000
Today...

01:58.000 --> 02:00.000
Okay, so...

02:00.000 --> 02:02.000
Today...

02:05.000 --> 02:07.000
So...

02:08.000 --> 02:10.000
Oh, it's okay.

02:10.000 --> 02:15.000
So, today's need is what is very important to understand is that today's need

02:15.000 --> 02:18.000
is not to build a tool that answers present needs,

02:18.000 --> 02:25.000
but to build a tool that is capable to integrate quickly and efficiently tomorrow's needs.

02:25.000 --> 02:31.000
And if you have the idea of the tender to create...

02:31.000 --> 02:37.000
the way to create new tools, sometimes you make specification,

02:37.000 --> 02:41.000
then you made a tender process, then you ask a vendor to develop,

02:41.000 --> 02:44.000
and this cycle is maybe like four years.

02:44.000 --> 02:48.000
The problem is that we don't know what we will ask to do in five years

02:48.000 --> 02:50.000
because everything is changing very fast.

02:50.000 --> 02:57.000
So, what is the strategy for it to answer those issue is to use open source.

02:57.000 --> 03:02.000
Andrew Froy will present you two tools that are based on open source.

03:02.000 --> 03:06.000
So, Possible, which is one of the first projects that was started,

03:06.000 --> 03:09.000
the Linux Foundation Energy Initiative,

03:09.000 --> 03:14.000
and then what we can do, what we can build on top of Possible.

03:14.000 --> 03:18.000
So, I'll let the floor to Joffre to present in detail the tools.

03:20.000 --> 03:22.000
So, hello everyone.

03:27.000 --> 03:30.000
So, the first project, Possible.

03:31.000 --> 03:34.000
So, Possible, it means Power System Blocks.

03:34.000 --> 03:43.000
Blocks, so this is a software component that we have as a foundation of many other applications,

03:43.000 --> 03:50.000
especially at RT, so we have something like 15 projects that are based on,

03:50.000 --> 03:56.000
as a list, a few components that has been developed in Possible.

03:56.000 --> 03:59.000
So, what is the content of Possible? What is it?

03:59.000 --> 04:05.000
So, this is many things, but it's the first way to model the Power Grid.

04:05.000 --> 04:14.000
So, we have a data model that allows us to build, to have a green model

04:14.000 --> 04:19.000
and to use it to make, for example, some evolution, some change for this grid model

04:19.000 --> 04:22.000
and to study what will be the impact.

04:22.000 --> 04:26.000
We also have some components for visualization of the grid

04:26.000 --> 04:30.000
that will be integrated in some higher level application.

04:30.000 --> 04:35.000
Also, what is very important is to be able to feed this data model with some data.

04:35.000 --> 04:42.000
So, for that, we have some converter coming and to standard data format.

04:42.000 --> 04:49.000
So, the most used one and the most famous one is the SIM, the SIM data model.

04:49.000 --> 04:56.000
So, we have premium support for SIM converter, SIM data model support.

04:56.000 --> 05:02.000
And also, what is very important is to have some interoperability with commercial tools.

05:02.000 --> 05:09.000
For example, the one, there's two very widely used commercial tools

05:09.000 --> 05:12.000
which has a PCC from Siemens and also PowerFactory.

05:12.000 --> 05:16.000
So, we are able to import some data into our data model from these tools.

05:16.000 --> 05:21.000
And also, we also have some converter from academic data format, for example,

05:21.000 --> 05:27.000
MATPOWER, which is widely used for research and science.

05:27.000 --> 05:34.000
And with this data model, we are able to run some analysis functions,

05:34.000 --> 05:37.000
for example, powerful calculations, security analysis.

05:37.000 --> 05:43.000
So, security analysis, for example, is a nice function that allows to test

05:43.000 --> 05:47.000
what will be the impact of some contingency.

05:47.000 --> 05:53.000
For example, we have a line loss, an outage on the grid,

05:53.000 --> 05:59.000
and we want to see what is really the impact of this outage on the flow,

05:59.000 --> 06:02.000
on the voltage to see if we have some trouble.

06:02.000 --> 06:06.000
We also have some scientific analysis, short-circuit calculation,

06:06.000 --> 06:10.000
which is also very important, and also dynamic simulation.

06:10.000 --> 06:12.000
So, time domain simulation.

06:12.000 --> 06:16.000
This is why we are integrated with another project of the Linux Foundation Energy,

06:16.000 --> 06:19.000
which is Dainaw.

06:19.000 --> 06:24.000
So, this is mostly written in Java.

06:24.000 --> 06:29.000
And this has been designed to be as light as possible.

06:29.000 --> 06:36.000
There is no dependency with complex framework or anything that takes decision

06:36.000 --> 06:42.000
to how you are going to use it in a higher level application.

06:42.000 --> 06:44.000
So, GridShoot.

06:44.000 --> 06:51.000
GridShoot is an example of a tool that is built on top of the component of possible,

06:51.000 --> 06:56.000
and that allows people to make some grid study.

06:56.000 --> 06:58.000
And very different studies.

06:58.000 --> 07:03.000
It starts from a real-time study, for example, security analysis,

07:03.000 --> 07:07.000
to a long-term development study.

07:07.000 --> 07:14.000
For example, we can with this tool, study what will be the impact of a connection

07:14.000 --> 07:19.000
of a new renewable generation power plant on the grid,

07:19.000 --> 07:27.000
and to assess that everything is fine if we connect this generation in a specific place on the grid.

07:28.000 --> 07:34.000
So, this is a tool that has been moving to production very recently.

07:34.000 --> 07:40.000
So, at the end of last year, since a few weeks,

07:40.000 --> 07:43.000
and we still have some very early users.

07:43.000 --> 07:49.000
And what we plan to have is 400 users in the coming two years.

07:49.000 --> 07:52.000
And so, this tool will replace an existing tool,

07:53.000 --> 07:58.000
which is at 30, since 15 years.

07:58.000 --> 08:04.000
So, we have a team of more than 20 developers, and it is a growing team.

08:04.000 --> 08:14.000
From the technical part, the technical stack that we are using is for sure 100% open source.

08:14.000 --> 08:19.000
So, this is a micro-service-based application, very scalable application,

08:19.000 --> 08:22.000
based on Java, Spring Boot.

08:22.000 --> 08:29.000
We have everything based on REST API and also asynchronous messaging with RabbitMQ.

08:29.000 --> 08:39.000
On the storage part, most of the micro-services are based on a PostgreSQL and Elasticsearch.

08:39.000 --> 08:48.000
As it's quite difficult to manage such a distributed application with a lot of micro-services,

08:48.000 --> 08:55.000
we have everything is deployed using Kubernetes cluster.

08:55.000 --> 09:02.000
And on the front-end part, so this is the web application using our RAC.js.

09:02.000 --> 09:09.000
And also, we use a little bit of WebGL for high-performance representation of the grid.

09:09.000 --> 09:16.000
So, an important issue that we had with this is that

09:16.000 --> 09:22.000
we have some Java component, which is very convenient to integrate it into,

09:22.000 --> 09:34.000
I would say, a classical enterprise application where often the backend is based on the Java ecosystem

09:34.000 --> 09:38.000
with Spring, Quarkus, or some kind of framework.

09:38.000 --> 09:44.000
So, this is fine, but what we had is also needed to use these components

09:44.000 --> 09:49.000
for high-performance also for research and data science community.

09:49.000 --> 09:55.000
And most of the people from the data science communities are on the Python ecosystem.

09:55.000 --> 10:03.000
So, the question was for us how to use the same piece of code in these two ecosystems

10:03.000 --> 10:08.000
and how to share the code in Python and Java.

10:08.000 --> 10:15.000
So, what we have done is to use another fantastic open source tool, which is the Gural VM.

10:15.000 --> 10:20.000
And Gural VM, this is done by Oracle.

10:20.000 --> 10:28.000
And this is several things, but we are using a component with native image that allows

10:28.000 --> 10:33.000
to compile Java code into native code.

10:33.000 --> 10:40.000
And thanks to this, we are able to build a C library for everything that we have impossible.

10:40.000 --> 10:55.000
And with this library, we can build a classical Python extension module based on the C library.

10:55.000 --> 10:58.000
So, some useful links.

10:58.000 --> 11:04.000
So, for sure, there is a GitHub repository for both project possible and Gridshoot.

11:04.000 --> 11:09.000
Maybe I can focus on the Slack channel, the two Slack channels.

11:09.000 --> 11:18.000
So, see where is the place where we answer questions and we discuss with the community.

11:18.000 --> 11:23.000
And also, there is an online demo of the application Gridshoot.

11:23.000 --> 11:26.000
So, if you want to test it, you can do it.

11:26.000 --> 11:29.000
So, we have an instance of Gridshoot that is deployed in the cloud.

11:29.000 --> 11:36.000
And you can connect to this one just using, for example, your GitHub account.

11:36.000 --> 11:41.000
Also, there is a YouTube video if you want to show a live demo.

11:41.000 --> 11:47.000
So, this is a screen of the application.

11:47.000 --> 11:50.000
What you can see here, just to explain what is it.

11:50.000 --> 11:54.000
So, on the left side, we have the data manager.

11:54.000 --> 12:03.000
So, starting from a case, from an initial, a green model, we have a way to create some tree of variant, of modification

12:03.000 --> 12:07.000
that allows us to test different changes in the network.

12:07.000 --> 12:12.000
And for all these variants, we can run some calculations and analysis

12:12.000 --> 12:18.000
and then compare what is the best and what is the best one for us.

12:18.000 --> 12:26.000
Then you can see on the right side that we have some way to represent, to display the grid.

12:26.000 --> 12:31.000
So, this is a full representation of the French high voltage grid.

12:31.000 --> 12:35.000
We have some substation diagram like here.

12:35.000 --> 12:46.000
We have some what you call the network diagram, which is part of the grid that is shown in the bus, in the nodal view.

12:46.000 --> 12:48.000
And then we can run some calculations.

12:48.000 --> 12:51.000
We also have some table to see the data in a tabular form.

12:51.000 --> 12:57.000
We have some specific user interface to show the results, etc.

12:57.000 --> 13:02.000
So, this is one for the presentation if you have any questions.

13:02.000 --> 13:06.000
Or if you want a demo of this tool, we can do it after the presentation.

13:06.000 --> 13:12.000
If you are interested to have a more detailed view of this tool.

13:12.000 --> 13:24.000
I was just wondering what format your network data is in.

13:24.000 --> 13:29.000
And whether you could, for example, take in the open-street map network data and try analysis on it.

13:29.000 --> 13:32.000
It's not complete, but can we do that?

13:32.000 --> 13:39.000
So, this is not OpenStreetMap, this is MapBox.

13:39.000 --> 13:43.000
But we can change the type provider to use whatever you want.

13:43.000 --> 13:53.000
So, here we have used a very light type representation of the grid just to have a better view of the grid.

13:53.000 --> 14:02.000
But we can use the OpenStreetMap.

14:02.000 --> 14:11.000
How do you make the link between the grid and the end-consumption items or human on the grid?

14:11.000 --> 14:19.000
Do you go to the machine-to-machine communication system so that the people stop consuming?

14:19.000 --> 14:28.000
Or do you make advanced polls in order to know the consumptions within one hour, within one month?

14:28.000 --> 14:32.000
So, this tool is a bit of a snapshot of the grid.

14:32.000 --> 14:38.000
So, this is done by some other tool which are before this one.

14:38.000 --> 14:43.000
So, we have the SkyDal, for example, which are doing the acquisition of the measurement.

14:43.000 --> 14:46.000
And that has a database of the grid model.

14:46.000 --> 14:52.000
And from this, we have some snapshots and then it can go into this tool.

14:52.000 --> 14:55.000
Okay? I don't know if I answered the question.

14:55.000 --> 15:01.000
How do you handle the stress when, for example, the grid is about to fold?

15:01.000 --> 15:06.000
Do you cover any cases with humans at the end of the grid?

15:06.000 --> 15:08.000
I don't know. Anyway.

15:08.000 --> 15:11.000
Okay. So, we will answer the question later.

15:11.000 --> 15:12.000
Thank you.

