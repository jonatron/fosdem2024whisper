WEBVTT

00:00.000 --> 00:12.780
This will be a really short talk, just in minutes to take your attention, not much.

00:12.780 --> 00:18.840
And it's going to be an easy thing that probably some people already do, but I'm not like a

00:18.840 --> 00:23.560
container, I'm not the man when talking about containers.

00:23.560 --> 00:29.120
So what I think that this is kind of an interesting thing for all the people that like me, try

00:29.120 --> 00:32.680
to play with containers with home setup mostly.

00:32.680 --> 00:39.320
So the motivation for this talk is basically that I have like a server and I am experimenting

00:39.320 --> 00:42.000
with rootless containers at home.

00:42.000 --> 00:49.840
So I am trying with automating with Ansible, which is not an overkill, I even copy my .files

00:49.840 --> 00:53.000
with Ansible just because, you know.

00:53.000 --> 00:55.680
And then I like to learn by breaking stuff.

00:55.680 --> 00:57.600
So why don't you break stuff at home?

00:57.600 --> 01:02.400
So this talk is about, again, my personal setup.

01:02.400 --> 01:08.600
I will share all the code later on, but just to meet my home server, it's called Morla.

01:08.600 --> 01:10.280
Does anybody know who Morla is?

01:10.280 --> 01:14.640
321 Morla is this, beautiful creatures.

01:14.640 --> 01:15.640
And it really resembles my...

01:15.640 --> 01:17.640
There's a problem with your slides.

01:17.640 --> 01:18.640
Oh my God.

01:18.640 --> 01:22.160
Maybe you can just reconnect it.

01:22.160 --> 01:23.160
Let's go.

01:23.160 --> 01:25.480
It's not that I only have Morla.

01:25.480 --> 01:26.480
Yeah.

01:26.480 --> 01:27.480
It's so...

01:27.480 --> 01:29.920
And it's...

01:29.920 --> 01:30.920
It remembers everything.

01:30.920 --> 01:31.920
It's like a NAS.

01:31.920 --> 01:32.920
I store all the things there.

01:32.920 --> 01:36.760
It's heavy and dusty like my home and it's a turtle like my home server, which is not

01:36.760 --> 01:38.360
a turtle, but whatever.

01:38.360 --> 01:41.680
So first setup, I used Portainer and Docker Compose.

01:41.680 --> 01:46.000
It's really convenient, but it had some issues that I'm discussing right now.

01:46.000 --> 01:49.520
If you use Portainer, Docker Compose, you're my friend, but I just don't use it anymore.

01:49.520 --> 01:50.520
And why is that?

01:50.520 --> 01:55.200
Well, it's easy to install on some machines like on OpenMediaVault, which I was running

01:55.200 --> 01:56.200
before.

01:56.200 --> 01:57.200
It's rootless.

01:57.200 --> 02:00.480
Well, I don't know if it's rootless right now, but it wasn't at the time.

02:00.480 --> 02:05.600
It only supported Docker and I didn't like to give all the root privileges around and

02:05.600 --> 02:07.320
it's heavily dependent on GUI.

02:07.320 --> 02:12.920
So these are the three things that I will try to resolve with just using Podman and Ansible.

02:12.920 --> 02:15.240
And so this is Portainer, if you don't know.

02:15.240 --> 02:19.680
Again, very convenient, but also I don't need this GUI.

02:19.680 --> 02:25.160
And Linux server images, if you're familiar with them, they're really simple and they

02:25.160 --> 02:31.400
all have this kind of workaround for running some services that you're not supposed to

02:31.400 --> 02:37.200
run as root inside the container because, I mean, you're not really sure that things

02:37.200 --> 02:39.000
can get out of the container.

02:39.000 --> 02:45.560
So just to work around this, they implement this feature that you just specify your UAD

02:45.560 --> 02:49.360
and your GAD inside the container and that when you run it as root, you're good to go

02:49.360 --> 02:51.320
because outside you will have that user.

02:51.320 --> 02:54.160
But that's not the case with Podman, right?

02:54.160 --> 02:57.640
So yeah, this is what happens with Podman.

02:57.640 --> 03:03.080
Basically if you run that configuration, this is for Pwigo, it's for sharing pictures.

03:03.080 --> 03:10.960
I want to be able to mount my volumes in the container using the same users, like outside.

03:10.960 --> 03:17.000
I don't want to have some weird mapping of namespacing because then it will be inconvenient

03:17.000 --> 03:19.560
if I just drop stuff in and out.

03:19.560 --> 03:28.160
So again, this would be really easy to solve if you just run inside stuff with root, but

03:28.160 --> 03:32.480
again, it's not, again, the case for all the images.

03:32.480 --> 03:37.640
So what you could do is, of course, to just run, like if you want to touch a file in some

03:37.640 --> 03:41.300
volume that you configured, it will give you permission tonight.

03:41.300 --> 03:45.440
So you just do Podman and share, you do what you have to do and then you have your file

03:45.440 --> 03:46.440
there.

03:46.440 --> 03:50.320
For me, again, it's inconvenient because I store their media files and I just want to

03:50.320 --> 03:56.960
drag them in and out quickly and I don't want to just do unshare all the time.

03:56.960 --> 04:00.600
So again, this is what we are facing.

04:00.600 --> 04:03.620
Basically the red part is what we care.

04:03.620 --> 04:08.520
So when we have a non-privileged user outside and a non-privileged user inside, to make

04:08.520 --> 04:14.120
it clear when you run any command, the un-privileged user inside will be remapped.

04:14.120 --> 04:18.960
I'm not sure that, like, I am not that familiar to talk about it.

04:18.960 --> 04:22.040
So this was just to explain myself how things work.

04:22.040 --> 04:27.640
So to make it even more clear, user inside and user outside not privileged, when you

04:27.640 --> 04:32.560
see the process of the user, you will see that outside you will have somebody.

04:32.560 --> 04:34.440
It's like 1-0-0-9-8.

04:34.440 --> 04:36.320
I don't know who you are.

04:36.320 --> 04:40.760
It's, well, if you don't have to manage stuff, it works, but if you want to take stuff in

04:40.760 --> 04:43.720
and out, then you have to deal with that.

04:43.720 --> 04:46.360
So what do you do?

04:46.360 --> 04:47.360
This is what you do.

04:47.360 --> 04:49.920
And this is why I call it, like, juggling.

04:49.920 --> 04:58.440
Because basically the way Podman works in root and non-root management, it allows you to

04:58.440 --> 05:02.560
remap the user IDs and the GIDs.

05:02.560 --> 05:07.040
So both works for groups and users inside and outside the container.

05:07.040 --> 05:10.280
And it's kind of complicated-ish syntax.

05:10.280 --> 05:14.800
But what basically happens is that you want to take the UID that you are running in the

05:14.800 --> 05:15.800
container.

05:15.800 --> 05:20.680
It could be, like, whatever UID, like a fake UID, they even call it, and you basically

05:20.680 --> 05:22.280
remap it on the host.

05:22.280 --> 05:25.960
So now comes the reason why I did this presentation, which is juggling.

05:25.960 --> 05:28.640
And as you see, you have to run this command three times, because you're dealing with a

05:28.640 --> 05:33.240
user ID inside the container with a fake user ID and a user ID outside the container that

05:33.240 --> 05:36.400
you really want to map to one another the correct way.

05:36.400 --> 05:37.960
So there we go.

05:37.960 --> 05:39.240
Let's run the first command.

05:39.240 --> 05:40.240
OK.

05:40.240 --> 05:41.240
You don't get lost.

05:41.240 --> 05:45.760
This is faster than the I. You can bet now on where's the UID now.

05:45.760 --> 05:46.760
You couldn't have guessed.

05:46.760 --> 05:47.760
OK.

05:47.760 --> 05:51.920
But anyway, back to serious stuff.

05:51.920 --> 05:53.760
The real example is this one.

05:53.760 --> 06:00.600
I am running all my Linux server images with a fake user ID, which is 911, because help

06:00.600 --> 06:02.120
me in case of...

06:02.120 --> 06:08.200
911 is the fake user ID that goes inside and actually want to fake it, like if root

06:08.200 --> 06:10.000
is running inside.

06:10.000 --> 06:11.960
It's the same result that I want to obtain.

06:11.960 --> 06:17.360
So that outside I actually have my normal user ID.

06:17.360 --> 06:23.000
If you actually check into the container in the UID map, which is where actually the UIDs

06:23.000 --> 06:28.800
are defined, how they are mapped inside and outside, you will see that it's taking my

06:28.800 --> 06:32.160
ranges, as I'm specifying.

06:32.160 --> 06:33.960
Please don't ask me much details about it.

06:33.960 --> 06:36.480
We don't have time, but we'll talk about it later.

06:36.480 --> 06:42.720
And then the result is that when you mount stuff, you have it configured for your user.

06:42.720 --> 06:46.160
And there's another convenient option, but I don't have it on my server.

06:46.160 --> 06:51.000
If you just do one command, it's easier, but I don't use it in my server, so you can either

06:51.000 --> 06:54.960
shuffle or just use this one liner, and it will do just fine.

06:54.960 --> 06:55.960
OK.

06:55.960 --> 06:58.120
And then about Ansible.

06:58.120 --> 07:03.840
So running this command all the time is quite inconvenient if you have many, many containers,

07:04.320 --> 07:06.480
it's hard to maintain or it's a lot of scripting.

07:06.480 --> 07:10.800
And plus, I think that Ansible goes really well with Podman containers because first,

07:10.800 --> 07:12.000
the model is great.

07:12.000 --> 07:19.760
And second, it really enables you to have much more control on, for example, config files,

07:19.760 --> 07:23.760
templates that you need to put in the container when you boot it, and whatsoever.

07:23.760 --> 07:28.040
And what I do with Ansible, and I advise you to take a look if you've ever tried, but

07:28.040 --> 07:29.040
it's kind of cool.

07:29.040 --> 07:33.600
You can have your configuration and just store everything in what's in the main configuration

07:33.600 --> 07:41.840
file that will store all the necessary variables, like parts to expose, volumes to mount, all

07:41.840 --> 07:46.400
the users that you want to shuffle with, whatever.

07:46.400 --> 07:52.880
And then you can basically copy paste what's a generic container configuration or setup

07:52.880 --> 07:54.440
if you do things right.

07:54.440 --> 07:57.680
Let's take a look, for example, this is, again, the same configuration.

07:57.680 --> 08:02.960
OK, I just kind of find what's the main name of the container, what I want to be the display

08:02.960 --> 08:10.520
name, where to pull the image from, parts, a database, for example, because I'm running

08:10.520 --> 08:11.520
pods with that.

08:11.520 --> 08:17.420
And it's basically all just copy paste as you were doing with Docker Compose images,

08:17.420 --> 08:20.840
but this way you're actually controlling much more what's happening because you can

08:20.840 --> 08:26.400
also control configuration files, setup, mounting stuff here and there and whatsoever, you name

08:26.400 --> 08:27.400
it.

08:27.400 --> 08:31.680
And of course, well, this I was highlighting random stuff in case you're interested.

08:31.680 --> 08:33.200
Yeah, this is the volume configuration.

08:33.200 --> 08:40.040
Don't forget to put the capital Z if you are in an IC Linux environment, of course.

08:40.040 --> 08:42.160
And let's go to the setup now.

08:42.160 --> 08:46.120
So this is my control panel, by the way, it's really convenient.

08:46.120 --> 08:47.120
It's like container.

08:47.120 --> 08:51.360
You can just specify variables to say, run this, this, this and that container, and it's

08:51.360 --> 08:54.040
all finally replaced the name, and it will just work.

08:54.040 --> 08:57.720
So it's just simpler, in my opinion.

08:57.720 --> 09:02.640
And then I think if I lost, oh, yeah, I wanted to show you the setup as well.

09:02.640 --> 09:04.400
So no more scripting, right?

09:04.400 --> 09:08.280
If I need to create a config directory, I can just create it with Ansible, right?

09:08.280 --> 09:12.560
And it's really nice that also the container creation, this is the same shuffling that

09:12.560 --> 09:13.940
we did before.

09:13.940 --> 09:20.440
So the fake ID shuffles with IDs 0 and range 1 and et cetera, et cetera.

09:21.440 --> 09:29.120
And this is all predefined in all the setup files that Ansible can provide you.

09:29.120 --> 09:32.440
So I'll just finish up because I have a few minutes.

09:32.440 --> 09:34.880
Oh, this is also very convenient for containers.

09:34.880 --> 09:37.760
If you're booting many, many containers with Ansible, never did that.

09:37.760 --> 09:40.200
It's good because it will just say, OK, things are good.

09:40.200 --> 09:42.680
This thing, I don't need to check it because it's already there.

09:42.680 --> 09:44.680
Again, it was a big thing for me.

09:44.680 --> 09:46.760
You may be familiar with that, but if you're not, try it out.

09:46.760 --> 09:48.320
And in the end, no mistakes.

09:48.320 --> 09:51.680
Of course, I'm also not doing a demo because it would break.

09:51.680 --> 09:55.840
And very quickly, tags are also great to manage containers.

09:55.840 --> 09:57.080
I think they really go very well.

09:57.080 --> 10:00.360
You can just say, set up this, this, and that and tag all the files that you need.

10:00.360 --> 10:03.920
And then we just go up.

10:03.920 --> 10:08.720
Takeaways, go rootless, automate the stuff, and try to overcomplicate things at all times

10:08.720 --> 10:10.120
to oversimplify things.

10:10.120 --> 10:10.680
Thank you.

10:10.680 --> 10:12.720
That is my presentation.

10:12.720 --> 10:13.320
If you want to.

