WEBVTT

00:00.000 --> 00:11.720
Great. So good afternoon everyone. Next we will have Donnie Burkaltz introducing platform

00:11.720 --> 00:25.000
engineering for dummies. Thank you. Super excited to be here today. It's been a number

00:25.000 --> 00:29.980
of years for many of us since being at a Fosdham in person, so welcome back. I was very happy

00:29.980 --> 00:34.060
to be here. I got myself a very nice Belgian beer as soon as I arrived, so I'm feeling great

00:34.060 --> 00:39.780
right now, all ready for my talk. Only one now, just one. The rest will be later. And

00:39.780 --> 00:44.860
I hope I'm assuming none of you are actually dummies, so thank you for coming to this talk.

00:44.860 --> 00:48.200
This is just for people who have heard the term platform engineering. It's starting to

00:48.200 --> 00:52.220
get increasingly popular. It's the only thing people talk about besides AI these days. We're

00:52.220 --> 00:57.540
going to mostly skip that one. And we're going to talk about what it is, how vendors are

00:57.540 --> 01:01.940
completely destroying the term, just like they do with everything. And then how to get

01:01.940 --> 01:06.220
started with it yourself. How you really make it as easy as possible. You don't have to

01:06.220 --> 01:10.060
buy vendor solutions. You can use open source off the shelf software. It doesn't even have

01:10.060 --> 01:16.120
to be custom and brand new. So by the end of this talk, you'll have a really good sense

01:16.120 --> 01:19.820
of platform engineering, at least as good and as deep as you can get over the course

01:19.820 --> 01:24.660
of the next 12 or 13 minutes. You'll have a lot of good resources. I've got links in

01:24.660 --> 01:27.580
here and a couple of the slides as well. So you can go check those links out afterwards

01:27.580 --> 01:31.500
because it's not just about technology. It's also about the people. It's also about the

01:31.500 --> 01:35.380
process. There's a lot of different pieces you have to do to get this right. In fact,

01:35.380 --> 01:45.620
the technology in many cases is the easy part. But first, a very short story. A few years

01:45.620 --> 01:50.940
ago I worked as a technology leader leading a DevOps transformation at the time. That's

01:51.020 --> 01:55.260
what we called it. We now probably call it platform engineering at this travel tech company

01:55.260 --> 01:59.740
called Carlson Vaganley Travel, CWT. It was actually an office here in Brussels. I visited

01:59.740 --> 02:05.660
there a few years back. Great place. Lots of interesting development happening there.

02:05.660 --> 02:11.100
Since then, I actually have led products, management, and products at Docker and at

02:11.100 --> 02:16.260
Precona around open source containers and databases. I've spent a long time in the platform space.

02:17.220 --> 02:21.140
Long story short, I know what I'm talking about. I've been doing platforms for like 20 plus years

02:21.140 --> 02:26.340
at this point, as have many of you. I'm just sharing my own story and my own perspective here.

02:26.340 --> 02:31.620
I'm sure many of you have your own. When we think about platform engineering, or at least the way

02:31.620 --> 02:42.260
I look at it, there's really three key pillars to it. There's platform operations, platform as

02:42.340 --> 02:49.860
product, and self-service for developers. We're going to jump into each one of those pillars

02:49.860 --> 02:53.620
and talk a little bit more about what that means. If you want to check this out afterwards,

02:54.180 --> 02:57.620
I have my own independent analyst from my little blog post about it. Feel free to check that out

02:57.620 --> 03:05.540
at your leisure. What does platform operations mean? There's a lot of companies today. In fact,

03:05.540 --> 03:12.180
how many of you come from a large enterprise? Do you have something called a platform team?

03:14.500 --> 03:19.780
Does it maintain maybe Linux OS, maybe some other OSes that we won't talk about,

03:20.660 --> 03:24.420
some things like that? It just got called the platform team at some point. It might have been

03:24.420 --> 03:28.260
the OS team. Before that, maybe they merged it in with the network team or something else like

03:28.260 --> 03:35.220
that. When we talk about platform operations, we really mean operating it as a holistic platform

03:35.300 --> 03:39.220
regardless of how many servers, how many VMs, how many containers might be underneath it.

03:40.260 --> 03:45.140
The same thing we talked about 10 years ago with Cloud, the same thing we talked about five years

03:45.140 --> 03:51.620
ago with DevOps, moving away from that Pets mindset into the Cattle mindset, moving away from that

03:51.620 --> 03:57.380
single server, single container, naming things after our favorite characters or our favorite TV

03:57.380 --> 04:04.660
shows into that mindset of these things are fungible, they're disposable, we operate them as

04:05.140 --> 04:09.940
applications and fleets of things and they're automatically created and deleted on demand.

04:10.580 --> 04:18.500
We're in this world of SRE now, we're moving more and more into things like SLOs of how do you

04:18.500 --> 04:23.860
monitor the user impact of the applications you're serving. In this case, we're talking about

04:23.860 --> 04:28.340
platform engineering, meaning building for developers, but even if you're serving internal

04:28.340 --> 04:34.500
developers, a platform, you still have to care about the quality of service that you're giving them.

04:34.500 --> 04:37.940
You still have to care about your latency, you still have to care about your error rate,

04:38.580 --> 04:43.060
you still have to care about how much of your capacity you're using in any given moment.

04:43.060 --> 04:47.140
You have to treat those internal applications just as importantly as you treat the ones that

04:47.140 --> 04:52.420
you're serving to your external customers and users. A lot of companies don't do that, they'll

04:52.420 --> 04:58.260
have things like their tier one applications, those are business facing, they get major incidents,

04:58.260 --> 05:03.140
spinning up war rooms and all that kind of thing when there's an outage, but if their CI pipeline

05:03.140 --> 05:08.100
goes down they say, oh well, it'll be back eventually, it'll be fine, we can just have our

05:08.100 --> 05:13.380
developers kind of doing nothing for most of a day, no big deal. A lot of companies are still like

05:13.380 --> 05:17.940
that, but we have to apply this platform operations concept not just to our external customer facing

05:17.940 --> 05:23.620
applications, but treat our developer productivity as something business critical in its own right,

05:23.620 --> 05:28.260
because developers are expensive. Sitting there for a day, not being able to ship software is expensive.

05:29.220 --> 05:35.060
And so we went through exactly this journey at CWT. One good example of this was we started by

05:35.060 --> 05:40.500
monitoring tens of thousands of different infrastructure metrics, right, classic old school

05:40.500 --> 05:45.220
world of monitoring, and we shifted that into just a handful of user facing impact metrics,

05:45.220 --> 05:51.060
but along the way we actually had to educate our developers and our operations teams on how to

05:51.060 --> 05:55.620
debug things in a much more complicated way than they were used to, because with the infrastructure

05:56.100 --> 06:01.460
metric you could have a simple runbook. You see this thing, you push this button, done, whereas if

06:01.460 --> 06:05.620
you have a metric saying my application is slow, there's a lot more potential causes, a lot more

06:05.620 --> 06:09.620
you have to learn to jump into it, and so at the same time we made this transition with technology,

06:09.620 --> 06:15.940
we also had to upskill a lot of our level two operations teams and had them become an SREs

06:15.940 --> 06:19.220
in their own right learning how to automate things, learning how to debug things much more deeply.

06:20.580 --> 06:24.420
Now the second piece is platform as product, and when I say this what I mean is

06:24.420 --> 06:28.740
for things like your internal CI pipelines, for things like your container services,

06:29.460 --> 06:34.180
whatever other internal developer tools and services you might have, you have to apply

06:34.980 --> 06:41.140
the methods of product management to them. You don't have to have a full-time product manager,

06:41.140 --> 06:45.700
that's fine, if you do fantastic and you're lucky and fortunate and congratulations on that,

06:45.700 --> 06:49.300
but if you don't, there's a lot of different people who can pick up some of that load,

06:49.300 --> 06:54.180
learn how to do modern digital product management, right, you might have people even

06:54.180 --> 06:59.540
depending on how traditional your company is called service managers, right, they might use a

06:59.540 --> 07:06.500
framework called ITIL to talk about things, and those people still have the potential to modernize

07:06.500 --> 07:10.500
and move forward and get with the times and apply modern product management approaches, meaning

07:10.500 --> 07:15.220
talk to your internal stakeholders, understand the problems they're trying to solve, right,

07:15.220 --> 07:19.620
in many cases they might be providing a service like source code management is a service you

07:19.620 --> 07:23.140
provide to your developers, there's probably a team running it inside your company if you're at a

07:23.140 --> 07:28.100
big company, do those people talk to their own developers about what problems they're trying

07:28.100 --> 07:33.940
to solve and what their workflows look like, Jets are probably not, they just shove stuff at them

07:33.940 --> 07:37.860
and say good luck, right, and we're fortunate we now have better tools than we used to,

07:37.860 --> 07:42.500
but there's a lot of opportunity for people in those positions of being these central platform

07:42.500 --> 07:48.660
teams or central developer productivity teams to go talk to their own developers about the

07:48.660 --> 07:52.340
problems they're trying to solve their day, understanding their pain points, and bringing

07:52.340 --> 07:58.980
that back in. At the bottom I've shared a handful of links in varying levels of depth that are super

07:58.980 --> 08:03.700
good resources if you're wanting to learn this or if you wanted to share these with other teams,

08:03.700 --> 08:07.780
there's an entire specialization on Coursera that'll probably take somebody six months to go through

08:08.660 --> 08:14.740
maybe an hour or a few hours a week, there's a great book by the same person who put together that

08:14.740 --> 08:18.900
course or the series of courses and then there's a website you can just go read for free to start

08:18.900 --> 08:23.540
checking it out right now. In every one of those cases they aren't written for Platform as Product

08:23.540 --> 08:27.620
People, they aren't written only for internal product management, they're written for anybody

08:27.620 --> 08:32.020
doing modern product management of how do you get that up to speed and so you have to do a little

08:32.020 --> 08:37.380
bit of extra work to think what does this mean for me specifically, but all of you are smart people

08:37.380 --> 08:42.420
you can figure that out. Applying this Platform as Product approach is absolutely critical to doing

08:42.420 --> 08:48.100
Platform Engineering right and nothing about this requires a specific piece of technology,

08:48.100 --> 08:53.060
nothing about this says proprietary versus open source, this is the people and the process side

08:53.060 --> 08:58.180
of it, but you have to get this to get Platform Engineering right because if all you do is say

08:58.180 --> 09:03.620
oh hey we gave you a platform now we've got Platform Engineering, you're wrong. What probably

09:03.620 --> 09:07.620
happened especially if you're at a big enterprise is you still have a ticketing system somewhere

09:08.420 --> 09:12.980
and you're still requiring developers to go file a ticket every time they want access to some new

09:12.980 --> 09:17.780
resource whereas if you're getting Platform Engineering right you're moving away from

09:17.780 --> 09:22.260
that because you talk to your developers, you've understood their needs and you've probably moved

09:22.260 --> 09:27.460
into something much more policy driven where there might be an initial ticket but the only thing

09:27.460 --> 09:31.780
that happens is to assign the developer a role as I'm working as a developer or I'm working as a

09:31.780 --> 09:36.500
developer in a certain application area then they're granted that policy driven access and they're

09:36.580 --> 09:40.020
able to move on and get on with their lives instead of every single time they need access to a new

09:40.020 --> 09:45.140
server every time they need a VM created every time they need additional memory provision to the VM

09:45.140 --> 09:51.540
right all these things are crazy and in many cloud environments they have been partially solved

09:51.540 --> 09:56.740
but a lot of us are still working on premises we're still working with servers in data centers

09:56.740 --> 10:01.540
or in colos or working in clouds that feel like we're that in every one of those cases this is

10:01.540 --> 10:06.020
an opportunity to make dramatic improvements in our own productivity as developers

10:07.300 --> 10:14.020
um one example of this from my own experience at CWT was we applied this approach to a really

10:14.020 --> 10:18.980
novel area which is um one of the teams that reported me to me was the major incident commanding

10:18.980 --> 10:24.580
team right so every time stuff got really really bad it was like the fire department you'd call

10:24.580 --> 10:30.180
them in they'd run the the issue and run it through to conclusion now that team had to send out a

10:30.180 --> 10:33.540
lot of different communications to a lot of different audiences they had to send things out to

10:33.620 --> 10:37.860
our internal executives had to send things out to all their employees who were being affected by

10:37.860 --> 10:44.020
it we had to send some things out to our customers as well um all those communications were things

10:44.020 --> 10:48.580
that hadn't really changed for a long time we had to get a lot better at them there were all

10:48.580 --> 10:52.660
kinds of complaints that would come in from these different audiences because it wasn't a one-size

10:52.660 --> 10:57.380
fits all approach it was something where but we were sending communications out that way and then

10:57.380 --> 11:02.100
things had gradually evolved very organically there wasn't a clear way to understand who should get

11:02.100 --> 11:08.980
what i mean so we applied these these platform as product style approaches to the communications

11:08.980 --> 11:14.660
going out from the incident commander team and made dramatic improvements by just doing things as

11:14.660 --> 11:20.100
simple as going out and regularly talking to the people who need to consume this stuff to understand

11:20.100 --> 11:24.260
when do they need it what do they need what do they need to understand so they can turn around

11:24.260 --> 11:28.660
and make the right decisions or do their jobs more effectively or tell their own customers

11:28.900 --> 11:33.620
the people who actually pay us as a company what we need to do and what they need to do

11:33.620 --> 11:37.060
and how long they might need to wait and when to try back and what their alternatives might be

11:38.340 --> 11:42.660
what was interesting too is we did this in a very lightweight prototype sort of fashion right so

11:42.660 --> 11:47.060
of course we had a technology solution for sending all this stuff out but instead of using that and

11:47.060 --> 11:51.780
using our developer time to sit there and iterate and work their way through their backlogs we

11:51.780 --> 11:57.860
literally just wrote a heavily formatted email by hand and started sending this out and used that

11:57.860 --> 12:02.500
as a tool to iterate on what the product should look like and so we just put together this email

12:02.500 --> 12:06.020
and we'd send it to somebody and say hey like what is this what do you think of this like walk me

12:06.020 --> 12:10.340
through how you're interpreting this what you're doing and by applying that really lightweight

12:10.340 --> 12:15.380
technique of just doing things by hand doing things the rough way before we had to put in the

12:15.380 --> 12:20.260
effort on software development it dramatically speeded up our ability to figure out the right thing

12:20.260 --> 12:24.900
and then spend our development effort building the right thing instead of getting getting it wrong

12:24.900 --> 12:32.020
very slowly multiple times on the way and third self-service for developers this one is pretty

12:32.020 --> 12:37.540
self-explanatory so I'm not going to spend a lot of time on it but really this is the continuation

12:37.540 --> 12:42.420
of that consumerization of it trend right the expectations for user experience in the enterprise

12:42.420 --> 12:47.620
side are very different now than they were five ten years ago and the same history for developers

12:47.620 --> 12:54.260
right developers should not have to put up with really clunky terrible interfaces on their internal

12:54.260 --> 13:00.340
tools anymore right it's been bad for a long long long time but things are finally starting to get

13:00.340 --> 13:08.020
better right things have gone through very ticked-dirgin approaches my own experience at CWT was

13:08.020 --> 13:13.700
you know we came in and we did something called value stream mapping which is a great technique

13:13.700 --> 13:17.860
for anybody who's interested in solving a lot of problems like this where we worked through

13:17.860 --> 13:23.220
a very specific workflow and the one we picked was deploying a new application for the first time

13:23.460 --> 13:28.820
um worked through every single team a request went to every single team that had to touch it and

13:28.820 --> 13:35.540
end up being something like 15 different teams were involved in this because there was a single

13:35.540 --> 13:39.940
silo team for everything you could imagine right there was like a network team and a security team

13:39.940 --> 13:45.140
and a firewall team that wasn't the same as the security team uh and you know the list just goes

13:45.140 --> 13:49.620
on and on and on in large companies like this and every single one of them required a ticket in

13:49.620 --> 13:53.060
some case it was the ticket you had to file in some case there was a ticket that a team filed to

13:53.060 --> 13:56.580
another team and that team filed to a third team and then somebody else would audit it and somebody

13:56.580 --> 14:02.500
else would review it and finally it would work its way through right but imagine getting all those

14:02.500 --> 14:08.980
to a place where you can clearly define the policy once get agreement on that from all these teams

14:08.980 --> 14:14.020
and then work on that policy and use that policy to automate all of your governance going forward

14:14.020 --> 14:21.220
all right that's what we're talking about um we took out of a 45 day timeline to deploy new

14:21.220 --> 14:27.860
app we took 30 days out on the way there um by making some simple process improvements and applying

14:27.860 --> 14:38.660
some automation now let's look at some solutions over the course of the next minute what do you

14:38.660 --> 14:43.700
need from a solution you need a job runner pretty simple because you got to do stuff you need a web

14:44.020 --> 14:48.740
GUI so you can click some buttons you might want to click on it have an API or CLI but those aren't

14:48.740 --> 14:53.220
necessities you need to access controls so that only the right developers can do the stuff you

14:53.220 --> 14:59.140
want to do and of course you need to be floss now there's a few different classes of these job

14:59.140 --> 15:04.900
runners you might look at internal development platforms you might look at CI servers you might

15:04.900 --> 15:11.140
look at workflow and data orchestration tools or you might work on look at task schedules there are

15:11.140 --> 15:17.060
all good options when you're thinking about how do I do this platform engineering and really the

15:17.060 --> 15:24.100
answer here is use whatever you've got don't make this huge start where you are you can use GitOps

15:24.820 --> 15:32.020
you can use backstage you can use even Jenkins you can use workflow and data orchestration tools or

15:32.020 --> 15:37.300
task schedules so hopefully that's given you a sense and I'd encourage you to refer back to the

15:37.300 --> 15:41.780
slides later to see that list because I went through it pretty quick of what platform engineering is

15:41.780 --> 15:47.140
all about what are some of the different solutions and that you should start exactly where you are

15:47.140 --> 15:59.700
today using the tools you have don't make this over complicated thank you

