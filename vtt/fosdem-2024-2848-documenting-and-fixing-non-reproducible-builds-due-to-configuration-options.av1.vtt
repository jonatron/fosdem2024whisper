WEBVTT

00:00.000 --> 00:12.860
Good afternoon, everyone.

00:12.860 --> 00:17.820
So next we have Aaron, speaking about documenting and fixing non reproducible builds due to

00:17.820 --> 00:19.820
configuration options.

00:19.820 --> 00:21.420
Thanks.

00:21.420 --> 00:25.340
So hello, everybody.

00:25.340 --> 00:26.340
My name is Aaron.

00:26.340 --> 00:31.580
I'm a PhD student at the University of Rennes.

00:31.580 --> 00:38.300
Doing research in the software engineering research team diverse of Inaria, Eriza, Ray

00:38.300 --> 00:39.580
in France.

00:39.580 --> 00:46.220
And today I'm going to talk about reproducible builds and software configurations.

00:46.220 --> 00:48.300
So what is reproducible builds?

00:48.300 --> 00:54.060
I took this definition from the paper, reproducible builds, increasing the integrity of software

00:54.060 --> 00:55.460
supply chains.

00:55.460 --> 01:00.780
So it says that the build process of a software product is reproducible when given a specific

01:00.780 --> 01:08.300
version of the source code and all its dependencies, every build produces bit by bit identical artifacts

01:08.300 --> 01:10.780
and plus no matter the environment.

01:10.780 --> 01:13.580
And I think it's a really important point.

01:13.580 --> 01:20.940
So to achieve reproducible builds, there are a set of guidelines in the website of reproducible

01:20.940 --> 01:29.700
builds such as how to have deterministic build systems, what not to ship in the binary

01:29.700 --> 01:35.740
or even how to distribute an environment, set some environment variable and so on.

01:35.740 --> 01:37.620
So let's take an example.

01:37.620 --> 01:40.220
So for the Linux, I can go to the source tree.

01:40.220 --> 01:45.740
So I've downloaded and I just generate the configuration of the kernel.

01:45.740 --> 01:51.420
So here in this case, I generated a tiny configuration, then I just build it.

01:51.420 --> 01:56.620
And once the build is done, I have a binary called the VM Linux that I just keep on the

01:56.620 --> 02:03.340
put in the TMP and then I clean everything up and I just reproduce the process.

02:03.340 --> 02:08.260
So tiny config run called twice just produce the same configuration.

02:08.260 --> 02:13.380
And now if I want to compare the product of these two builds running Difascope, which

02:13.380 --> 02:16.980
is a tool provided by the Producible Build Initiative tool.

02:16.980 --> 02:18.740
So what's happened?

02:18.740 --> 02:24.220
Just because I've built the two binaries few seconds apart, I have two binaries that are

02:24.220 --> 02:27.940
different, not bit by bit identical.

02:27.940 --> 02:29.540
So I'm following the guidelines.

02:29.540 --> 02:35.420
I can set some value to environment variables of the build system.

02:35.420 --> 02:37.180
So here in this case, K build.

02:37.180 --> 02:42.900
So I can give a fixed date, for instance, here the 1st of January of this year.

02:42.900 --> 02:47.460
And now I can have a bit by bit identical binary.

02:47.460 --> 02:53.940
The question is in Linux, for instance, we have all different set of configurations.

02:53.940 --> 03:00.380
We have the default configurations per architecture, all these config, all mode config and so on.

03:00.380 --> 03:06.660
And especially round config that will set some configuration options randomly.

03:06.660 --> 03:14.500
So do I need to just fix all of the predictability issues for Linux just with this trick?

03:14.500 --> 03:17.700
So we can look in the documentation.

03:17.700 --> 03:22.380
So the K build trick is obviously written in the documentation.

03:22.380 --> 03:29.020
But there's the documentation emphasize on the configuration options.

03:29.020 --> 03:31.100
So here we have six of them.

03:31.100 --> 03:38.460
So just as a reminder in the kernel, you can set some values to some options, either yes,

03:38.460 --> 03:41.140
no or module to ship them or not.

03:41.140 --> 03:44.460
And so here we have a list of six configuration options.

03:44.460 --> 03:47.100
But is that all?

03:47.100 --> 03:54.780
So as the latest version of the kernel, I think there are more than 19,000 configuration

03:54.780 --> 03:55.780
options.

03:55.780 --> 04:00.900
So there are six configuration options that have an impact on the predictability of the

04:00.900 --> 04:03.980
kernel among all these configuration options.

04:03.980 --> 04:08.500
So to answer this question, we have basically have a kind of a brutal approach.

04:08.500 --> 04:12.820
So we just generate the set of random configurations.

04:12.820 --> 04:17.900
So as you can see here on the left, then we build them in the same environment.

04:17.900 --> 04:20.460
So we have a fixed Docker file.

04:20.460 --> 04:26.340
And for each build, we just build them in a newly built container.

04:26.340 --> 04:27.540
Then we compare the binary.

04:27.540 --> 04:30.860
So we don't compare all of the intermediate file of the build.

04:30.860 --> 04:33.340
Just compare the final binary.

04:33.340 --> 04:38.180
Then you simply do a diff on the binary and get all the results, as you can see here.

04:38.180 --> 04:43.380
So there's a way to encode the configurations in a tabular representation.

04:43.380 --> 04:46.900
So we just have a row with all the configuration options.

04:46.900 --> 04:47.900
And zero means no.

04:47.900 --> 04:49.180
One means yes.

04:49.180 --> 04:50.180
Enabled.

04:50.180 --> 04:53.140
That means module if it exists.

04:53.140 --> 04:58.020
Then we get all the data and put it in a classification algorithm.

04:58.020 --> 05:04.980
And we just get the outlier options that are responsible of the non reproducibility.

05:04.980 --> 05:08.460
Then from the list, we have a phase that is an exploration phase that I will explain a

05:08.460 --> 05:16.820
little bit later, where we enrich the list we've got from the classification algorithm.

05:16.820 --> 05:19.380
Then we just have a fixed phase.

05:19.380 --> 05:26.220
And the idea is to add, if the options are indeed responsible of the non-reposibility

05:26.220 --> 05:30.260
to add them to the documentation.

05:30.260 --> 05:34.180
So the setup is, so this is the setup.

05:34.180 --> 05:38.020
So we have 2000 configuration for each system we study.

05:38.020 --> 05:40.940
So the Linux kernel, but also busybox and toybox.

05:40.940 --> 05:43.860
So we generate random configurations.

05:43.860 --> 05:48.820
We have a preset for x8664 for the kernel.

05:48.820 --> 05:53.980
And then for the environment, we just derive the tuxmake image.

05:53.980 --> 06:01.540
And then we set all of the environment variable so they don't vary during the build, like

06:01.540 --> 06:06.940
the timestamp and so on.

06:06.940 --> 06:17.340
So here's one of our first results is for Linux 47% of the builds were non reproducible.

06:17.340 --> 06:20.020
And for busybox, we have two cases here.

06:20.020 --> 06:25.340
We have the first case where we didn't vary the environment, so the build path.

06:25.340 --> 06:27.940
And there's a case where we just vary the build path.

06:27.940 --> 06:33.300
So we wanted to show case that there is an interaction between two layers, so the configuration

06:33.300 --> 06:34.620
and the build path.

06:34.620 --> 06:41.580
And to solve it, you just choose either to change the build path, to fix the build path,

06:41.580 --> 06:45.060
or to disable the debug configuration option.

06:45.060 --> 06:46.460
So it's up to you.

06:46.460 --> 06:52.660
But if we enable the debug configuration option and we just vary the build path between two

06:52.660 --> 06:57.020
builds, we have 49% of non reproducible builds.

06:57.020 --> 07:02.620
And for toybox, it's 100% reproducible in our study.

07:02.620 --> 07:04.980
And so now who is to blame?

07:04.980 --> 07:06.740
So no for the Linux case.

07:06.740 --> 07:12.620
So here we have an example of the decision tree we got from the process.

07:12.620 --> 07:16.300
And we have five configuration options here.

07:16.300 --> 07:24.980
So what we do is we don't consider destructor like if I disable module six, one.

07:24.980 --> 07:30.940
So here the structure is that if I disable six, one, the next responsible is Jacob profile

07:30.940 --> 07:32.500
of trace and so on.

07:32.500 --> 07:37.220
So here we just flatten everything and we consider each configuration as independent.

07:37.220 --> 07:40.980
Each configuration option as independent, sorry.

07:40.980 --> 07:47.380
And so we have this list of five configuration options that, so module six is a similar configuration

07:47.380 --> 07:51.860
option is in the documentation for both, but for the rest of them, we don't have them

07:51.860 --> 07:54.740
in the documentation of Linux.

07:54.740 --> 08:01.660
And now we have an exploration phase where the main idea is that we want to identify

08:01.660 --> 08:05.740
all the options of the same kind.

08:05.740 --> 08:11.860
So in the documentation, we saw that we had some configuration options on the module,

08:11.860 --> 08:18.140
CIG, all module CIG module and config CIG module CIG and so on.

08:18.140 --> 08:23.260
And so here the idea is just to identify the siblings of the options.

08:23.260 --> 08:28.380
Like if I disable one option, I have another alternative of the same kind and we just explore

08:28.380 --> 08:30.020
all the alternatives.

08:30.020 --> 08:33.900
And a great example here is module six, one.

08:33.900 --> 08:40.700
If I disable it, I have to enable two, 24 or 256 and so on.

08:40.700 --> 08:46.660
And so once we have, we've got all of the siblings, we just use the name and conversion

08:46.660 --> 08:49.700
in K config to just get the parent.

08:49.700 --> 08:55.980
So we know that if I want to disable this specific option, I have to disable this parent.

08:55.980 --> 09:02.100
And now, place to the fix of the each configuration options.

09:02.100 --> 09:10.420
So the idea is to remove all of the detected configuration options from the initial configuration.

09:10.420 --> 09:19.540
And it's a kind of hard task sometimes in the Linux kernel because we have to get all

09:19.540 --> 09:23.220
of the dependencies of the configuration options.

09:23.220 --> 09:32.420
So to solve each, I mean to detect the dependency of each of the configuration options you want

09:32.420 --> 09:40.380
to modify or to change, we use a tool called config fix that is a set based solver that

09:40.380 --> 09:44.820
is presented in detail in this paper here.

09:44.820 --> 09:52.700
And it just gives a list of options to a list of conditions to satisfy.

09:52.700 --> 09:58.100
And it could be in the configuration option and the value in order to apply a change.

09:58.100 --> 10:02.420
And then once the change is applied, or once the change is applied and the change being

10:02.420 --> 10:08.540
just set in the configuration to no, we just build again and check for a predictability.

10:08.540 --> 10:19.180
And from the list we've got, we were able to make 90% of the non reproducible build

10:19.180 --> 10:21.460
reproducible.

10:21.460 --> 10:30.580
We had 31 configurations, so 3.5% that is still not reproducible due to some dependency we

10:30.580 --> 10:32.380
couldn't identify.

10:32.380 --> 10:35.140
So that's one of the limits of the approach.

10:35.140 --> 10:42.340
And less than 0.5% because the tool we used couldn't find the diagnoses.

10:42.340 --> 10:49.820
But compared to the first result I showed, we went from 47% of non reproducibility to

10:49.820 --> 10:53.700
1%.

10:53.700 --> 10:55.540
So now the summary.

10:55.540 --> 10:59.780
So I think one of the takeaways that options matter.

10:59.780 --> 11:10.340
So we should explore more the impact of configuration options in the reproducibility of each build.

11:10.340 --> 11:15.300
The second takeaway is that there could be interactions across variability layers, such

11:15.300 --> 11:18.140
as I showed for our busy box.

11:18.140 --> 11:26.900
So we also need to detect them and to pinpoint and describe precisely in documentation.

11:26.900 --> 11:32.540
And we have identified more configuration options that could be added to the documentation,

11:32.540 --> 11:34.980
so we'll send the patch soon.

11:34.980 --> 11:38.060
And now we could remove some of them.

11:38.060 --> 11:44.420
So 96% of non reproducible builds made reproducible.

11:44.420 --> 11:52.300
So if you want more detail on the whole approach and the rest, this will be presented at the

11:52.300 --> 11:55.900
mining software repository conference.

11:55.900 --> 12:01.020
It's an academic conference that will happen in Portugal in April.

12:01.020 --> 12:04.220
And thank you for your attention.

