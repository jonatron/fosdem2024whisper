WEBVTT

00:00.000 --> 00:08.640
So, let's start the next talk.

00:08.640 --> 00:16.480
Introduction to the Open API, podcast API with Kuhn Glotsman and Karen Einzwort.

00:16.480 --> 00:18.080
Sorry for the pronunciation.

00:18.080 --> 00:19.840
So the stage is yours.

00:19.840 --> 00:20.840
Thank you.

00:20.840 --> 00:21.840
All right.

00:21.840 --> 00:22.840
Thank you.

00:22.840 --> 00:23.840
Thank you, everyone.

00:23.840 --> 00:24.920
So, yeah.

00:24.920 --> 00:28.240
We are here to present the...

00:28.240 --> 00:29.240
Thank you.

00:29.240 --> 00:30.240
Thank you.

00:30.240 --> 00:36.160
We're here to present the Open Podcast API, which is a new specification that allows

00:36.160 --> 00:43.240
users to actually synchronize their podcast listening data, like your subscriptions episodes

00:43.240 --> 00:47.080
where you started, where you want to continue, et cetera, et cetera.

00:47.080 --> 00:51.800
So why are we actually doing this new API?

00:51.800 --> 00:54.880
It's because we have a problem.

00:55.560 --> 01:01.440
The problem is that there is actually a defecto standard for synchronizing podcasting data

01:01.440 --> 01:10.320
between devices, but it has a couple of challenges, let's say.

01:10.320 --> 01:13.640
One of them being that it's no longer actively maintained for the moment.

01:13.640 --> 01:19.800
There is a draft for a new version of the API, which is good, but has been still for

01:19.800 --> 01:20.800
a while.

01:20.800 --> 01:23.840
So that's one issue.

01:23.840 --> 01:29.360
But maybe a bigger problem is that there are some technical issues fundamentally in the

01:29.360 --> 01:34.760
API and the way it's designed.

01:34.760 --> 01:41.160
One of them is about the episode identification, which is basically based on the media URL,

01:41.160 --> 01:43.840
which is in the RSS feed.

01:43.840 --> 01:47.640
And that thing is not always unique.

01:47.640 --> 01:52.240
RSS is a standard, but it's a Wild West at the same time.

01:52.240 --> 01:55.280
So we can't really rely too much on that.

01:55.280 --> 01:57.040
So that's a problem.

01:57.040 --> 02:06.000
And also, the software behind this standard has some issues with feed duplication, which

02:06.000 --> 02:15.720
occurs if a podcast changes the RSS feed, they change their URL, then you get the same podcast

02:15.720 --> 02:19.720
twice in your subscriptions list.

02:20.400 --> 02:27.240
So I said, well, we didn't say that yet, but I'm with Antenna Pot and Kiran is with Funqvill.

02:27.240 --> 02:35.160
And in Antenna Pot, what we see is that that service, that software behind the API de facto

02:35.160 --> 02:38.520
standard is actually used as a centralized service.

02:38.520 --> 02:46.880
So there's a lot of users, which is great, but it's also a restrain on the servers.

02:46.880 --> 02:52.760
And so that overload is actually causing end users in Antenna Pot to see errors, and then

02:52.760 --> 02:57.520
they come and complain to us and we're like, well, yeah, we don't have too much influence

02:57.520 --> 02:58.960
over that.

02:58.960 --> 03:08.680
So the solution there to this, these set of problems, is to build that new API standard,

03:08.680 --> 03:15.680
which is actually building on the existing standard, but being more extensible, more

03:15.680 --> 03:22.200
standards compliant, easier to implement across different projects so that we avoid the centralization

03:22.200 --> 03:23.200
aspect.

03:23.200 --> 03:29.960
So for users, that means that they can synchronize their subscriptions, listening progress, favorites,

03:29.960 --> 03:32.920
cues, etc., etc.

03:32.920 --> 03:36.640
That the idea is that they can connect all their different devices.

03:36.640 --> 03:41.640
So whether you're on your desktop or mobile, or if you have a work mobile and a private

03:41.640 --> 03:47.600
mobile, that all your listening progress, etc., moves from one to the other.

03:47.600 --> 03:54.320
And also, this integration with the different apps would allow you as a user to actually

03:54.320 --> 04:01.320
switch from Antenna Pot to Cast if you don't like Antenna Pot for some weird reason.

04:01.320 --> 04:06.920
And so, that's on the end user side, but we need developers to implement that API, of

04:06.920 --> 04:07.920
course.

04:08.280 --> 04:14.160
To make that as easy as possible, we want to have clear and comprehensive documentation

04:14.160 --> 04:16.320
about the features, but also about the behavior.

04:16.320 --> 04:22.440
So if I send this API call, then what is expected to happen?

04:22.440 --> 04:27.880
We want to have the specs being reliable and easy to implement.

04:27.880 --> 04:34.560
And also, we want them to be feature complete, because different podcasting apps and servers

04:34.560 --> 04:37.200
and services all have different features.

04:37.200 --> 04:40.320
Some might have multiple queues that you can create.

04:40.320 --> 04:44.520
Some like Antenna Pot, we only have one queue that you can create.

04:44.520 --> 04:49.440
So we need to make sure that the API covers all these different use cases.

04:49.440 --> 04:55.480
So the approach there is to build a new API spec based on the existing standard, which

04:55.480 --> 05:02.480
I assume many of you might have guessed, is gpotter.net.

05:02.480 --> 05:08.160
Notice that it's a great thing to start from.

05:08.160 --> 05:12.040
And there are some issues that we are trying to solve.

05:12.040 --> 05:15.600
So we're building on it in a way.

05:15.600 --> 05:16.600
We're not building on it.

05:16.600 --> 05:19.880
We're taking inspiration from it, I should say.

05:19.880 --> 05:26.800
But actually, compatibility with it is not our main focus.

05:26.800 --> 05:34.400
We also try to follow the OpenAPI standard specification, because that allows for easier

05:34.400 --> 05:38.080
integration into software.

05:38.080 --> 05:43.320
With by respecting this standard, we can have CI create libraries, which are always up to

05:43.320 --> 05:47.160
date with the latest specifications.

05:47.160 --> 05:52.720
And that's our plan also to do that for different languages.

05:52.720 --> 05:59.680
And an important aspect there is also that RSS is our single source of truth, meaning

05:59.680 --> 06:06.120
that we don't want to synchronize, for example, episode titles, because that's already in

06:06.120 --> 06:07.120
the RSS feed.

06:07.120 --> 06:11.240
So why would we synchronize data that's already in the RSS feed?

06:11.240 --> 06:15.960
But at the same time, we also have already the GUIT of an episode, the unique identifier

06:15.960 --> 06:18.200
of an episode in the RSS feed.

06:18.200 --> 06:22.720
That's unique, but not really, because of RSS Wild West.

06:22.720 --> 06:33.720
So we do actually expect to create and synchronize a true unique identifier for episodes.

06:33.720 --> 06:38.440
And then we're also trying to be podcasting to the already, which refers specifically

06:38.440 --> 06:41.960
to the GUIT at the podcast level.

06:41.960 --> 06:44.600
And there are some technical challenges.

06:44.600 --> 06:47.320
One is about the episode identification.

06:47.320 --> 06:54.280
Like I said, there's a GUIT in the feed to identify an episode, but that's not always

06:54.280 --> 06:56.960
globally unique.

06:56.960 --> 07:00.000
So why is it called a GUIT anyway?

07:00.000 --> 07:03.400
You have links and you have enclosure URLs.

07:03.400 --> 07:08.040
And we thought, okay, to identify an episode in order to sync data between devices, we

07:08.040 --> 07:12.760
could do a hash of these three, but they're all changing.

07:12.760 --> 07:14.640
They're all optional in the RSS standard.

07:14.640 --> 07:19.360
So you might have none of these and then end up with no hash, I guess.

07:19.360 --> 07:21.840
So that doesn't really work.

07:21.840 --> 07:27.680
So yeah, we are having the solution that the first discover of an episode, whether that's

07:27.680 --> 07:35.920
a server, if it pulls RSS feed, the RSS feed, or if it's a client, it creates the GUIT.

07:35.920 --> 07:38.560
And then yeah, there's some things that we need to consider.

07:38.560 --> 07:44.320
Like first pull the new information from the server and then send it back to avoid race

07:44.320 --> 07:46.720
condition, et cetera.

07:46.720 --> 07:50.960
And also we expect the client to do the application of episodes.

07:50.960 --> 07:56.120
But if you're interested in more technical aspects, there's a link to the notes.

07:56.120 --> 07:59.280
Okay, thank you.

07:59.280 --> 08:03.360
So building on that sort of quite specific example, there's the more general question

08:03.360 --> 08:05.680
of feature compatibility.

08:05.680 --> 08:10.880
So clients and servers need to agree in a way on what is compatible.

08:10.880 --> 08:13.360
We need to have a way of communicating that.

08:13.360 --> 08:18.080
So we can't expect all apps and services to support every single endpoint, every single

08:18.080 --> 08:22.520
call because different apps implement different things in different ways.

08:22.520 --> 08:26.800
So to sort of get around this, what we've decided is that we should have essentially

08:26.800 --> 08:32.640
a core feature set where we say that specific endpoints are considered core and you must

08:32.640 --> 08:40.920
support them as a client or as a server in order to be considered open podcast compatible.

08:40.920 --> 08:46.800
There is of course then scope to optionally sort of extend this and to add additional

08:46.800 --> 08:53.920
endpoints which give us more functionality but are not considered core.

08:53.920 --> 08:59.280
So you can then negotiate that between your API, your server and your client.

08:59.280 --> 09:04.240
These would be then documented in the specification, what is necessary for compliance, what is

09:04.240 --> 09:10.880
an optional extension and then we can sort of work with clients and servers to map that

09:10.880 --> 09:15.680
and say what is this, what works for you and what do you need to implement.

09:15.680 --> 09:18.720
So what sort of endpoints are we looking to add?

09:18.720 --> 09:21.000
Well, we've got a few that we've already been working on.

09:21.000 --> 09:24.320
So as Kun has already mentioned, subscriptions is a big one.

09:24.320 --> 09:30.240
It's fetching and storing and syncing all of your feeds, all of your subscriptions between

09:30.240 --> 09:36.760
devices with the option to update them, change their URL or change their position or whatever

09:36.760 --> 09:42.040
it may be and delete them and to manage them across all devices.

09:42.040 --> 09:43.680
Versioning this is an important one.

09:43.680 --> 09:49.880
If the specification changes and we decide to deprecate something, change an endpoint,

09:49.880 --> 09:55.920
we need to express what major versions are supported so that clients are aware of what

09:55.920 --> 09:59.320
they are able to get from the server.

09:59.320 --> 10:03.200
We are currently discussing episodes but as Kun has already alluded to, this is a very

10:03.200 --> 10:05.320
complicated thing.

10:05.320 --> 10:11.640
So we already have a pad full of information about how we will synchronize this but the

10:11.640 --> 10:19.080
goal is to have that sort of implemented to synchronize status and playback position,

10:19.080 --> 10:26.800
how long you've played it, that kind of thing for all episodes across all different feeds.

10:26.800 --> 10:30.960
In future, we would also like to be able to synchronize settings or give an optional

10:30.960 --> 10:39.320
endpoint for synchronizing settings, search endpoint, discovery for discovering similar

10:39.320 --> 10:44.560
podcasts and features and also ratings and reviews which are becoming a big part of a

10:44.560 --> 10:50.200
lot of podcast stores.

10:50.200 --> 10:51.200
Who's involved?

10:51.200 --> 10:53.760
Currently, you've got myself and Kun.

10:53.760 --> 10:56.960
We're from Antenapod and Funqwell respectively.

10:56.960 --> 11:03.000
We've also been in conversations with casts, pod friend, Gpod Async for NextCloud and Musicpod.

11:03.000 --> 11:08.360
The idea is to get as many projects on board as possible from both the client side and

11:08.360 --> 11:09.360
the server side.

11:09.360 --> 11:14.520
Funqwell acts as both but we're more steering for server side at the moment.

11:15.280 --> 11:20.000
If you are involved in a podcast adjacent project, we would love to hear from you and

11:20.000 --> 11:25.640
get your buy-in and your advice and feedback.

11:25.640 --> 11:29.520
Just to mention on that last point, those are all open source but the idea is that closed

11:29.520 --> 11:35.080
source projects could also use this if they wanted to.

11:35.080 --> 11:36.720
What are our next steps?

11:36.720 --> 11:39.640
As mentioned, we're still discussing episodes.

11:39.640 --> 11:40.640
It's a big thing.

11:40.760 --> 11:46.840
Something we need to get right and something that we need to finalize before we can consider

11:46.840 --> 11:50.840
ourselves at a point where we have a core endpoint.

11:50.840 --> 11:52.600
We also need to discuss authentication.

11:52.600 --> 11:54.320
This is super important.

11:54.320 --> 12:00.040
You should not be able to query somebody else's status and you should not be able to get a

12:00.040 --> 12:01.280
hold of anyone else's data.

12:01.280 --> 12:02.280
It must be locked down.

12:02.280 --> 12:04.240
We need to discuss how we want to do that.

12:04.240 --> 12:08.160
It will probably be just a case of OAuth.

12:08.200 --> 12:12.600
That is for someone who knows more about OAuth than me to decide.

12:12.600 --> 12:15.080
We're currently building a new website.

12:15.080 --> 12:19.520
Currently we have a website which is built using Sphinx but we found some limitations

12:19.520 --> 12:25.560
with Sphinx in terms of having dynamic content.

12:25.560 --> 12:28.880
We're going to be rebuilding that using Astro and Starlight.

12:28.880 --> 12:31.800
It's currently just in a pull request somewhere.

12:31.800 --> 12:37.040
We're just waiting for that to get deployed somewhere.

12:37.120 --> 12:41.760
We're mapping features across apps so we need to get a greater understanding of what different

12:41.760 --> 12:46.360
features are available in different applications, how they present that information, and therefore

12:46.360 --> 12:51.240
how we can present that in our API specifications.

12:51.240 --> 12:56.560
We want to get a beta implementation in a few applications.

12:56.560 --> 12:59.000
Client applications specifically.

12:59.000 --> 13:06.480
We would like to have at least two maybe more supporting some of those core API endpoints

13:06.520 --> 13:09.320
so that we can show that it works.

13:09.320 --> 13:13.760
Which of course means we also want to have a reference server implementation which the

13:13.760 --> 13:18.520
FunQuel team will be working on just so that people have something to test against, something

13:18.520 --> 13:23.040
that they can deploy themselves if they want to.

13:23.040 --> 13:27.800
We can check that our client implementations also work as expected and according to the

13:27.800 --> 13:30.120
specification.

13:30.120 --> 13:33.040
If you want to get in contact with us, contact details are up here.

13:33.080 --> 13:37.840
There's a QR code you can scan but basically search for Open Podcast API.

13:37.840 --> 13:38.840
It's where we are.

13:38.840 --> 13:39.840
We're on Matrix.

13:39.840 --> 13:43.080
We have the website which I mentioned we'll be replacing soon.

13:43.080 --> 13:46.600
Obviously we have a GitHub organization which is where all of the conversations are currently

13:46.600 --> 13:49.440
happening.

13:49.440 --> 13:53.000
Get in touch especially if you are interested in podcasting or are currently involved in

13:53.000 --> 13:57.080
podcasting we'd really like to hear from you.

13:57.080 --> 14:03.000
If you have questions we will be outside I guess and we would love to hear from you.

14:03.960 --> 14:07.080
We're very friendly I promise.

14:07.080 --> 14:08.280
Thank you very much for listening.

14:08.280 --> 14:12.280
I'll just put the contact details up again so that you can all take your time, scan the

14:12.280 --> 14:13.280
code.

14:13.280 --> 14:15.280
Thank you very much.

14:15.280 --> 14:16.360
It was lovely.

