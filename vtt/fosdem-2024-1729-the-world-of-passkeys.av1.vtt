WEBVTT

00:00.000 --> 00:02.060
you

00:30.000 --> 00:32.060
you

01:00.500 --> 01:12.000
has anybody use your past keys as your 2FA method on GitLab? Oh cool, oh awesome, awesome.

01:12.000 --> 01:23.000
I should talk after the talk. Anyway, so here's more of the talks. I talk about past keys in the RubyConf

01:23.000 --> 01:29.000
Thailand, RubyConf Taiwan, and today I'm going to try to talk, there's going to be a mix of what I've talked

01:29.000 --> 01:34.000
before, but the things that I spent more time talking in the other conferences, I'm going to talk less here, and

01:34.000 --> 01:41.000
I'm going to talk about some more stuff that I have not talked in the other talks. So what is past keys?

01:41.000 --> 01:48.000
Past keys are replacement for passwords. It's part of a wide authentication standard. It was designed to

01:48.000 --> 01:55.000
replace or to reduce the over reliance of passwords. Internally, it's a public and private key pair used for

01:55.000 --> 02:02.000
challenge-based authentication. It uses public key cryptographic, which has been around since the 70s. Sometimes it's

02:02.000 --> 02:09.000
protected by your device biometrics, sometimes it's discoverable, and sometimes it's bound to your device. That's an

02:09.000 --> 02:16.000
interesting scenario, it's an interesting use case, but I'm not going to talk about that today here. These are

02:16.000 --> 02:21.000
centers that I kept in all my slides and all the presentations, and the reason why I kept these centers when I was

02:21.000 --> 02:28.000
learning about what past keys is about a year ago, these centers helped me wrap my head around what past keys were. When I

02:28.000 --> 02:34.000
read these, I was like, oh yeah, these make sense. And it says, a password is something that can be remembered and typed, and

02:34.000 --> 02:42.000
a past key is a secret stored in one's device in a locked biometrics. That sentence comes from the website, the source is

02:42.000 --> 02:48.000
there, past keys are there, there's a lot of interesting stuff in there. These centers have some caveats, not exactly I

02:48.000 --> 02:59.000
can remember all my passwords, but it's a good definition. This is one that I like. Past keys is a public and private key pair

02:59.000 --> 03:08.000
protected by a device biometrics and used for a challenge-based authentication. So let's break that down into sentences. Public and

03:08.000 --> 03:16.000
private key pair, like I said, is used public key cryptographic, and the idea that you have a public and a private key, and if you

03:16.000 --> 03:23.000
keep your private key private, and keep your public key public, you give to the world, and if you need it to encrypt some data and send

03:23.000 --> 03:30.000
some data over the world, over the web, you encrypt and use your private key, and then whoever wants to read that can decrypt

03:30.000 --> 03:37.000
that data with your public key. So that's kind of what this is about. And it's protected by a device biometrics. According to

03:37.000 --> 03:49.000
the standards, according to the standards, to use your past keys, you need to first do your biometrics verification. I don't think that's

03:49.000 --> 03:58.000
going to be the case all the time, but it's one of the important aspects of past keys. And used for a challenge-based authentication.

03:58.000 --> 04:05.000
Again, this goes back to the public and private key encryption. When you go to a website and you're going to sign in for a website, you just

04:05.000 --> 04:11.000
don't present your credentials. You do a private and public key encryption. The website is going to send you some data, like, hey,

04:11.000 --> 04:18.000
HILU, oh, you're HILU. So in order for you to prove that you're HILU, I want you to encrypt these data with HILU's private key. And then,

04:18.000 --> 04:24.000
okay, all right, I'm going to get my private key. I'm going to encrypt these data. I'm going to send it back to you. And then the site is your

04:24.000 --> 04:33.000
application. When you're signing in, it's going to look at that encrypted data, that digital signature. Oh, there is this gentleman here pretending to be

04:33.000 --> 04:41.000
HILU, and he gave me a digital signature supposedly encrypted with HILU's private key. And then I'm going to use HILU's public key to the

04:41.000 --> 04:51.000
crypt. And if I get my data back, then voila, it's your HILU or someone who owns, who have access to HILU's private key. And that's what a

04:51.000 --> 04:59.000
challenge-based authentication looks like. So like I said, this is a past key, this is part of a web authentication standard.

04:59.000 --> 05:07.000
There's a W2C standard. This is a screenshot for the first public working draft that was created in 2016 by folks from Knock Knock Labs,

05:07.000 --> 05:17.000
Microsoft, PayPal, and Google. Basically, several years ago, all the big tech companies, they got together in trying to create a standard for a better,

05:17.000 --> 05:31.000
more secure web authentication. And from that, they created an alliance called FIDU Alliance, which is just a group of companies with a goal of

05:31.000 --> 05:43.000
promoting a more secure web authentication. And this also is like that I like, that I have in all my presentations. This talk here today is that small little thing there.

05:43.000 --> 05:53.000
And just to give you guys a little bit of a perspective that when you're using your web developer hat and you're adopting your

05:53.000 --> 06:04.000
support to past key to web application, you're all the way at the top of the iceberg. But there's a lot of things that it goes behind the scenes that

06:05.000 --> 06:14.000
for past keys to be a reality and be a more secure, more intuitive replacements for passwords. And anyway, there's a lot of stuff in there.

06:14.000 --> 06:27.000
I'm going to talk just a little bit. 2FA or not 2FA? This is one question that has been kind of banging my head for the past couple of months.

06:27.000 --> 06:37.000
So this is a screenshot from the FIDU Alliance website from the FAQ section. And they have a question there. Are past keys considered multi-fact authentication?

06:37.000 --> 06:48.000
So let me read that for you guys and we'll talk a little bit more about it. So past keys are kept on users device, someone the user has.

06:48.000 --> 07:05.000
And if the relying party requests user verification, RP is relying party, is your web application, can only be exercised by the user with a biometric or pinning something the user is or something the user knows.

07:05.000 --> 07:16.000
Thus, authentication with past keys embodies the core principle of multi-factor security. That's kind of the beginning of the answer.

07:16.000 --> 07:31.000
There's a middle here that I'm going to skip that and then let's go to the end. At the end it says this, note that some regulatory regiments still have to evolve to recognize past keys as one of the officially listed forms of multi-factor.

07:31.000 --> 07:44.000
This is an area of active engagement for FIDU Alliance. Just for your information, I've been learning and studying what past keys is for about one year and this note, it's since last year, exactly like that.

07:44.000 --> 07:55.000
So I don't know exactly what active engagement means for FIDU, not what regulatory regiments they are talking about, but for the past year that sentence is still there.

07:55.000 --> 08:05.000
So these are reminding for me, these are reminding for me, just to remember what two FAM means, right? Something the user has, something the user knows and something the user is.

08:05.000 --> 08:11.000
If you have two of those, then you have two facts authentication, if you have more, you have multiple facts authentication.

08:11.000 --> 08:24.000
So past keys, past keys is kept on your user device, on your phone, on your USB stick. Sometimes, maybe most of the time, it's going to be replicated to your cloud account, right?

08:24.000 --> 08:36.000
It goes to Apple, Google, Microsoft account. This is something that I have, the user has. And past keys can only be used after biomedical pain verification, something the user is.

08:36.000 --> 08:56.000
Again, there are some cases where I think you're going to be using your past keys without those things. And that's where one thing that I was going to mention in the previous slide is that when I talk about these FAQ, I tend to say the FIDU Alliance make a soft claim that past keys are two FA.

08:56.000 --> 09:16.000
Because these words, me here, that was not, it was probably written for a lawyer, I'm sure it wasn't an engineer. So, but anyway, so that's what I mentioned that sometimes in a couple of forums, in a couple of discussions, I mentioned that FIDU makes a soft claim that past keys is two FA.

09:17.000 --> 09:36.000
But we're seeing here that in some situations, some scenarios is going to be two FA. And I think there are some situations that is not going to be two FA. I was going to remember the sentence, right? Some regulatory regimens still have to evolve. And this is an area of active engagement.

09:37.000 --> 09:53.000
But if you are using past keys, you have your phone, a USB stick, and you need to use those to authenticate with past keys. And I am my face, my finger, and I need to use those things if you're doing the biomedical verification.

09:53.000 --> 10:12.000
And I know my USB stick pin, if you're using a hardware key, and I know that I think now some USB sticks, they now validate your fingerprint. So there are a couple good, strong arguments that you're using at least two of those three things, right?

10:13.000 --> 10:19.000
But they still, some regulatory regimens has to evolve somehow.

10:22.000 --> 10:23.000
Password managers.

10:26.000 --> 10:34.000
So just for information, the demo that I want to show at the end of the presentation, I hope I have time and I need to kind of speed up a little bit, maybe.

10:35.000 --> 10:43.000
The demo that I want to show was created before all the password managers had support to past keys. This is a new technology.

10:44.000 --> 10:58.000
And way before password managers were able to do past keys, to support past keys, you had to have native support on your Macs, Windows laptops, iPhones, androids, the three browsers, major browsers, right?

10:59.000 --> 11:04.000
Safari, Chrome, and Edge. Firefox took forever to work finally on the Mac.

11:05.000 --> 11:13.000
Finally, last week or two weeks ago, they finally released a version, I think it was 122, that now works on Mac.

11:14.000 --> 11:17.000
Firefox worked on my iPhone before it worked on my Mac.

11:18.000 --> 11:23.000
So maybe there's some regulatory regimens that explain some role somewhere.

11:24.000 --> 11:27.000
But password managers. Should they become past keys managers?

11:29.000 --> 11:38.000
Can password managers have access to our device biometrics? Your cell phone, Touch ID, Face ID, your laptop, Touch ID.

11:39.000 --> 11:41.000
Should they have access?

11:42.000 --> 11:46.000
Password managers necessary in these world of past keys.

11:47.000 --> 11:55.000
By the way, these demo that I want to show you, a couple weeks ago, I was trying on doing some, updating some dependencies.

11:56.000 --> 12:00.000
And I was doing some tests and doing some manual tests before deployment.

12:01.000 --> 12:06.000
And it stopped working on Safari when I was logged in on my vault, on my password manager vault.

12:07.000 --> 12:13.000
So I had to log out from my password manager to be able to use the native support that Safari and Mac has for past keys.

12:14.000 --> 12:22.000
But yesterday when I was rehearsing this talk, it was working again, and then it was broken, it was a little bit buggy, but it looks good.

12:23.000 --> 12:31.000
It's nice when I do have the option to be logged in on my password manager on Safari.

12:32.000 --> 12:37.000
And I can decide whether I use my password manager or use my native support on Safari and Mac.

12:38.000 --> 12:43.000
When I can't do that reliably and not buggy, that's going to look good.

12:44.000 --> 12:51.000
But I think I brought about this conversation on password managers because this is one thing that I've been wanting to dig a little further,

12:52.000 --> 12:55.000
because I think this plays back to the 2FA not 2FA.

12:56.000 --> 13:03.000
Because when you create your password, your past keys to your password manager, you're not doing your biometric.

13:03.000 --> 13:09.000
But this is an area also that I still need to study and learn a little bit more.

13:10.000 --> 13:21.000
Maybe some past keys, some password managers, they are worth sniffing their way out of not using your biometrics, but it's still 2FA.

13:22.000 --> 13:27.000
But anyway, this is still something that is still a little bit in the gray area that I don't know how this is going to play out.

13:27.000 --> 13:38.000
Alright, now let's get down to some more how it works and under the hood.

13:39.000 --> 13:44.000
So this is the area of the talk that I talk in more extensive details in the other talks.

13:45.000 --> 13:47.000
So I'm going to go a little faster here today.

13:48.000 --> 13:52.000
There is something here that you feel like you want to listen to me talking more about it.

13:52.000 --> 13:57.000
You'll find some the recordings of the other talks online.

13:58.000 --> 14:01.000
So okay, I'm going to talk about registration authentication.

14:02.000 --> 14:03.000
Remember, this is replacing passwords.

14:04.000 --> 14:06.000
So these are about sign up, signing in and re-authentication.

14:07.000 --> 14:10.000
Re-authentication is just authenticating you one more time.

14:11.000 --> 14:12.000
So just going to the signing in again.

14:13.000 --> 14:14.000
I'm not going to talk too much about it here today.

14:15.000 --> 14:16.000
Alright, so registration.

14:17.000 --> 14:21.000
So you're a user, you're a new browser, you go to a website and you want to sign up, right?

14:22.000 --> 14:26.000
So RP is a relying party, it's your web application, Ruby, Radio's app or whatever stack.

14:27.000 --> 14:28.000
And then the site is going to ask you a public key.

14:29.000 --> 14:30.000
Now I need your public key.

14:31.000 --> 14:33.000
So the user is going to defer to your device.

14:34.000 --> 14:43.000
This can be your cell phone, this can be your laptop, this can be your USB stick where you're going to create that pass keys.

14:44.000 --> 14:46.000
I'm using the phone for simplicity.

14:47.000 --> 14:50.000
And it's going to do your face ID, create your pass keys.

14:50.000 --> 14:53.000
It's going to sync your private key to your cloud account.

14:54.000 --> 14:56.000
And it's going to send back your public key.

14:57.000 --> 15:02.000
And then the relying party is going to do some verification, create your account, alright, you're signed up, right?

15:03.000 --> 15:05.000
So now let's take a look inside.

15:06.000 --> 15:11.000
So in order to look one level down from that diagram, I'm going to use this application.

15:12.000 --> 15:15.000
This is a web of Rails demo app created by those folks from set-up code.

15:15.000 --> 15:20.000
And I'll talk about the initiation phase, what happens in the browser and verification phase.

15:21.000 --> 15:24.000
So remember, these days like that we saw in the last one.

15:25.000 --> 15:26.000
So that's the registration, all the steps.

15:27.000 --> 15:31.000
So this is the initiation phase, this is what happens in the browser, and this is the verification phase.

15:32.000 --> 15:37.000
So now let's look down one level down on these blocks and see how they look like.

15:38.000 --> 15:44.000
So for this particular application, when you're trying to sign up, that's the JSON that goes back to the server.

15:45.000 --> 15:48.000
And then here the server, the server is going to do four things.

15:49.000 --> 15:50.000
I'm going to generate a web offer and user ID.

15:51.000 --> 15:53.000
I'm going to load the web offer and settings.

15:54.000 --> 15:57.000
It's going to create a challenge and then it's going to return a JSON back to the server.

15:58.000 --> 16:00.000
So, and here's what the JSON looks like.

16:01.000 --> 16:03.000
I'm not going to talk, get into much details.

16:04.000 --> 16:06.000
I'm talking more details about these things in the other talks.

16:07.000 --> 16:09.000
So today I'm going to go a little faster here.

16:09.000 --> 16:10.000
So this is the JSON.

16:11.000 --> 16:15.000
The bar there shows that at the top is just static data application settings.

16:16.000 --> 16:22.000
And at the bottom it's based on user session.

16:23.000 --> 16:34.000
Whatever username you want to create and the ID that was created in random and the challenge that was created in random for your sign up, for your registration process, for that particular user registration process.

16:34.000 --> 16:39.000
So here is a documentation straight out of the gem, web offer and Ruby gem.

16:40.000 --> 16:42.000
And this is a configuration that you need to do in your application.

16:43.000 --> 16:47.000
Basically here you put your origin, your name, and then there's a bunch of other fields here.

16:48.000 --> 16:55.000
Just to keep a little bit of what's happening in the world, let's look at GitLab, right?

16:56.000 --> 16:58.000
So GitLab is so good, GitLab is open source, right?

16:58.000 --> 17:05.000
So just go look at this source code and study and read and see how they're doing and maybe help a little bit.

17:06.000 --> 17:14.000
So they basically use the exact same basic version from the gem, but they do change one default.

17:15.000 --> 17:19.000
So the encoding, the default value is base 64 and they use base 64.

17:20.000 --> 17:22.000
The base 64 you are when they use base 64.

17:22.000 --> 17:26.000
This is as of my last conference talk, last December.

17:27.000 --> 17:32.000
I'm not sure if we change it, but that's the URL you can guys go to and see if we change it since last December.

17:33.000 --> 17:35.000
Anyway, here is just one little detail.

17:36.000 --> 17:38.000
So the user ID is one of the things that gets created for your session.

17:39.000 --> 17:40.000
And then look at that.

17:41.000 --> 17:46.000
It's just a user ID, web offer and user ID that got created is just a key random bytes.

17:47.000 --> 17:49.000
The same thing happens with the challenge.

17:49.000 --> 17:54.000
So these are two things that got created by the server in the beginning of the registration phase.

17:55.000 --> 17:56.000
It's also another secure random.

17:57.000 --> 18:01.000
So both your web offering user ID and the challenge just random bytes.

18:02.000 --> 18:05.000
So, okay, then we saw that block.

18:06.000 --> 18:08.000
So now let's look into what happened in the browser.

18:09.000 --> 18:15.000
So when the JSON happens and comes back to the browser, your code in the application is going to call the browser API.

18:15.000 --> 18:20.000
And then when you call that your browser and your OS is going to default to your device.

18:21.000 --> 18:23.000
And then your device is going to create your pass keys.

18:24.000 --> 18:30.000
Remember, it's going to sync a private key to the cloud to keep your device and then sends back your public key.

18:31.000 --> 18:32.000
Oops, sorry, wrong arrow.

18:33.000 --> 18:36.000
And then here's your credential and then here's your public key.

18:37.000 --> 18:39.000
Okay, so that's everything that's going to happen in the browser.

18:40.000 --> 18:41.000
And this is a JSON.

18:42.000 --> 18:44.000
That's a JSON that gets back to your server.

18:45.000 --> 18:47.000
There is some duplication there, I'm sure of it.

18:48.000 --> 18:49.000
I'm not sure if it's a bug or a feature.

18:51.000 --> 18:56.000
And this whole block here is duplicated here.

18:57.000 --> 18:58.000
I didn't have a time to kind of look into what that is.

18:59.000 --> 19:02.000
But anyway, that's what's coming for this particular application.

19:03.000 --> 19:05.000
But I think this is generated by the browser API.

19:06.000 --> 19:09.000
I don't know where that comes from, but anyway, one day I'll try to figure out.

19:10.000 --> 19:12.000
So anyway, that's kind of what happened here in the browser.

19:12.000 --> 19:15.000
So now let's look at what happened at the verification phase.

19:16.000 --> 19:21.000
So now that that whole JSON that we saw is going to be sent to the server, and the server is going to do these four things.

19:22.000 --> 19:24.000
And remember, here, note one thing here.

19:25.000 --> 19:30.000
These are two separate HTTP requests, completely independent for each other, with a shared context.

19:31.000 --> 19:38.000
You need to run one HTTP request to get user ID and challenge, and a second one that you do a bunch of stuff and then you send back the result.

19:38.000 --> 19:44.000
So the first step that is going to do here is a series of verifications.

19:45.000 --> 19:54.000
And then if your pass key, if your data is verified, then you're going to get your pass keys created.

19:55.000 --> 20:01.000
You use it to get created and you get a JSON back, a simple response back to the browser.

20:01.000 --> 20:08.000
So I'm running a little bit out of time, but you can just check one of my talks online.

20:09.000 --> 20:14.000
I talk in more details about these things, but here we're looking at the gem, what the gem actually does, what your application.

20:15.000 --> 20:18.000
This is your first step in your application to create your user and your pass keys.

20:19.000 --> 20:23.000
And then these are all the stock trades that happen inside the gem to verify your data.

20:24.000 --> 20:25.000
There's a bunch of stuff here.

20:25.000 --> 20:28.000
This is the one that does the most, a bunch of verifiers.

20:29.000 --> 20:32.000
And here's the one that verifies your challenge based on the expected challenge.

20:33.000 --> 20:38.000
These two here, two interesting features of your pass keys, user presence and user verification.

20:39.000 --> 20:43.000
And these are the one interesting thing that I put in here.

20:44.000 --> 20:52.000
The valid challenge is just an open SSL secure compare based on what came to the server in the second request and unexpected challenge.

20:52.000 --> 21:05.000
I didn't look into details what actually these expected challenges, but part of these verifications is a bunch of secure compare on open SSL to make sure that the data is, everything's good.

21:06.000 --> 21:11.000
There's no many in the middle, nothing is getting the middle of those two HTTP requests.

21:13.000 --> 21:14.000
And then this is another one.

21:15.000 --> 21:19.000
And then if your data is verified, your pass keys is valid, then you're going to create your record.

21:19.000 --> 21:22.000
This is what the, then it's going to get back to your application.

21:23.000 --> 21:25.000
And now you finalize the user creation and create the credential.

21:26.000 --> 21:30.000
When you use this application, that's what your pass keys in your database looks like.

21:31.000 --> 21:32.000
And then we're done.

21:33.000 --> 21:40.000
Right. So we finish the whole process here and look into all these JSONs, HTTP requests in response to what happens during the registration.

21:41.000 --> 21:42.000
So authentication.

21:43.000 --> 21:44.000
Now we have an account.

21:45.000 --> 21:46.000
I'm going to sign in, right?

21:46.000 --> 21:48.000
This is the challenge based on indication, right?

21:49.000 --> 21:54.000
So the application is answering, hey, here's some dummy data, signed the data with your private key.

21:55.000 --> 21:57.000
I'm going to defer to my device.

21:58.000 --> 21:59.000
I'm going to do my first ID.

22:00.000 --> 22:03.000
I'm going to access my private key and creep that data and send the data back to the server.

22:04.000 --> 22:06.000
And the server is going to do a verification.

22:07.000 --> 22:08.000
The creep using my public key.

22:09.000 --> 22:12.000
And if the creeps are good, voila, this is Hilo, your Hilo authenticated.

22:13.000 --> 22:14.000
Right.

22:14.000 --> 22:15.000
So authentication works.

22:16.000 --> 22:17.000
Shall we look inside?

22:18.000 --> 22:19.000
We shall not.

22:20.000 --> 22:28.000
We're not going to have time here, but you should need in the other conference that the goal of the talk was pop into pass keys only looking under the hood.

22:29.000 --> 22:30.000
I didn't have time to do this.

22:31.000 --> 22:32.000
I stick only to the registration.

22:33.000 --> 22:36.000
But anyway, that's an application on GitHub and you can go check it out.

22:37.000 --> 22:39.000
And pop the hood on the pass keys.

22:40.000 --> 22:41.000
All right. Live demo.

22:42.000 --> 22:43.000
We are running out of time.

22:43.000 --> 22:48.000
You guys want to see a live demo localhost 3000 or the actual product name.

22:49.000 --> 22:51.000
I'm going to do localhost.

22:52.000 --> 22:57.000
I'm not going to risk the Wi-Fi here.

22:58.000 --> 22:59.000
Anyway, so this is an application that I created.

23:00.000 --> 23:02.000
It's a Rails app that I created for hackathon.

23:03.000 --> 23:05.000
And just basically what I want to show here is pass keys.

23:06.000 --> 23:09.000
What I just showed you guys sign up, sign up, sign in and reauthentication.

23:09.000 --> 23:12.000
So this is, you see it's running on my localhost.

23:13.000 --> 23:14.000
The logs are here.

23:15.000 --> 23:16.000
It is running.

23:17.000 --> 23:18.000
This is how I was rehearsing my talk.

23:19.000 --> 23:20.000
So I create a Ruby dev for him.

23:21.000 --> 23:22.000
So I'm going to log out here.

23:23.000 --> 23:24.000
I'm going to log in again.

23:25.000 --> 23:26.000
And so unfortunately I'm going to do, I'm going to create an account, right?

23:27.000 --> 23:33.000
So Ruby dev room at 4th then 2024.

23:34.000 --> 23:35.000
And this is a pass keys label.

23:36.000 --> 23:37.000
This is an application that I created for hackathon.

23:37.000 --> 23:38.000
So there's nothing here.

23:39.000 --> 23:41.000
I'm just going to show pass keys, sign up, sign in and reauthentication.

23:42.000 --> 23:46.000
And I only collect an email for sign up.

23:47.000 --> 23:48.000
And don't even use password.

23:49.000 --> 23:50.000
There's no password in this application.

23:51.000 --> 23:52.000
Only pass keys.

23:53.000 --> 23:54.000
I'm going to put here Safari, which I'm creating.

23:55.000 --> 23:56.000
And then if I do that, it's going to be presented by your,

23:57.000 --> 23:58.000
you can do your biometrics.

23:59.000 --> 24:00.000
These are the options.

24:01.000 --> 24:02.000
I'm interested in one.

24:03.000 --> 24:04.000
I'm not going to have time to show today,

24:05.000 --> 24:06.000
but if I put the right finger here, you get authenticated.

24:07.000 --> 24:09.000
And they are always unique for website.

24:10.000 --> 24:11.000
They're always strong.

24:12.000 --> 24:13.000
They're efficient resistant and rich in resistance.

24:14.000 --> 24:15.000
There's a lot of marketing things that goes down behind the scenes

24:16.000 --> 24:18.000
that makes pass keys a lot more secure than passwords.

24:19.000 --> 24:20.000
So this there will be authentication, right?

24:21.000 --> 24:25.000
I already, I'm already authenticated.

24:26.000 --> 24:28.000
And I'm going to make some sensitive transaction with authenticating again.

24:29.000 --> 24:30.000
And basically what he does is the same thing.

24:31.000 --> 24:33.000
If I put the wrong finger, it doesn't authenticate.

24:33.000 --> 24:38.000
If I put the right finger that I have configured on my laptop, boom,

24:39.000 --> 24:40.000
I'm there authenticated.

24:41.000 --> 24:42.000
So now if I sign out, I'm going to sign in again.

24:43.000 --> 24:45.000
This is kind of the auto discoverable on pass keys,

24:46.000 --> 24:49.000
where when the browser detects a device that supports pass keys,

24:50.000 --> 24:51.000
it shows you, oh, I have five minutes.

24:52.000 --> 24:53.000
I'm not going to talk too much.

24:54.000 --> 24:55.000
Anyway, so let's move on.

24:56.000 --> 24:57.000
That last one.

24:58.000 --> 24:59.000
So that's the one that I create today.

25:00.000 --> 25:01.000
All the other ones are attached account that I have and rehearsing the talk.

25:01.000 --> 25:05.000
And then if I put here, then you're authenticated.

25:06.000 --> 25:10.000
Everything that you show here is, is this app that I created for this hackathon.

25:11.000 --> 25:12.000
Summer last year.

25:13.000 --> 25:14.000
All right.

25:15.000 --> 25:16.000
Hello Ruby.

25:17.000 --> 25:18.000
Pass keys in the Ruby community.

25:19.000 --> 25:20.000
I want to give a shout out to the trailblazers in the past,

25:21.000 --> 25:23.000
the past keys trailblazers in the Ruby community.

25:24.000 --> 25:27.000
Gonzalo Braulio from CELACode, Pete Lavica, Thomas Cannon.

25:28.000 --> 25:30.000
CELACode is a web agency in Uruguay.

25:31.000 --> 25:33.000
And they're the creators of the web offering Ruby Jam.

25:34.000 --> 25:38.000
According to the Jam spec, the authors are Gonzalo Rodriguez and Braulio Martinez.

25:39.000 --> 25:42.000
If you're doing pass keys on a Ruby, on a Rails Ruby app,

25:43.000 --> 25:45.000
this jam is going to be on your Jam file or Jam file lock.

25:47.000 --> 25:49.000
And the first version was created in 2018.

25:50.000 --> 25:52.000
The last one is in December last month, two months ago.

25:53.000 --> 25:54.000
Peter Lavica.

25:55.000 --> 25:57.000
Peter Lavica, I'm sorry for the pronunciation.

25:58.000 --> 25:59.000
He's a Ruby on Rails developer.

25:59.000 --> 26:01.000
And in 2021, he wrote this article,

26:02.000 --> 26:04.000
multi-factual authentication with Rails and Web Off-In and Device.

26:05.000 --> 26:07.000
It was originally published at Honey Badger blog.

26:08.000 --> 26:10.000
And he also wrote Rails app that goes along with his blog.

26:11.000 --> 26:12.000
This article is really nice.

26:13.000 --> 26:14.000
I really enjoyed reading it.

26:15.000 --> 26:16.000
I strongly suggest you do so.

26:17.000 --> 26:19.000
And at last but not least, Thomas Cannon.

26:20.000 --> 26:22.000
He's the creator of Ruby, pass keys GitHub organization.

26:23.000 --> 26:26.000
He also created the warden, Web Off-In, Ruby and Device pass keys Jam.

26:26.000 --> 26:29.000
And he also have a Rails template app,

26:30.000 --> 26:31.000
Device pass keys template.

26:32.000 --> 26:33.000
You can run it on your laptop if you want to.

26:34.000 --> 26:36.000
Thomas is the one person that makes a huge difference for me

26:37.000 --> 26:39.000
because I was reading about pass keys.

26:40.000 --> 26:41.000
All the pass keys were popping up here and there.

26:42.000 --> 26:43.000
And then I was like, okay, I need to read what pass keys are.

26:44.000 --> 26:45.000
I don't know what it is.

26:46.000 --> 26:47.000
And then I went out with my life and I'm busy.

26:48.000 --> 26:50.000
And then one day, Thomas sent a message,

26:51.000 --> 26:52.000
posted a message on his social media saying,

26:53.000 --> 26:55.000
hey, I just released this Jam, Device pass keys.

26:56.000 --> 27:01.000
Hey, it's a public, first public better version of one art or something like that.

27:02.000 --> 27:03.000
Go check it out, send some feedback.

27:04.000 --> 27:06.000
And I'm like, okay, I've been here about these pass keys.

27:07.000 --> 27:09.000
No, that is a Jam that I can put in my Rails app.

27:10.000 --> 27:11.000
And is it Device pass keys?

27:12.000 --> 27:14.000
I'm like, okay, all right, damn, that was all the motivation

27:15.000 --> 27:16.000
that I needed to learn about these.

27:17.000 --> 27:18.000
And this was literally about a year ago,

27:19.000 --> 27:20.000
like January, February last year.

27:21.000 --> 27:22.000
And so anyway, so that's Thomas.

27:22.000 --> 27:27.000
If you weren't for him, for his message, or if I was,

27:28.000 --> 27:30.000
I don't know if I would be here today.

27:31.000 --> 27:36.000
Anyway, just one single message on his social media.

27:37.000 --> 27:38.000
That's it for today.

27:39.000 --> 27:40.000
And I have two slides about questions.

27:41.000 --> 27:42.000
These are folks, if I have any question.

27:43.000 --> 27:49.000
If you only have pass keys on your site for your application,

27:49.000 --> 27:53.000
how do you now log into the application from the device?

27:54.000 --> 27:57.000
So the question is, if you only have pass keys in your application,

27:58.000 --> 27:59.000
how do you log in your application from our device?

28:00.000 --> 28:01.000
That's that other device options.

28:02.000 --> 28:04.000
So you can log in from an external device.

28:05.000 --> 28:07.000
I can actually show that real quick here.

28:08.000 --> 28:11.000
So if I am signing up here, there is this other option.

28:12.000 --> 28:15.000
And so when you pick that other option, you can,

28:16.000 --> 28:17.000
there is an option here, you can use your iPhone.

28:17.000 --> 28:19.000
Because I created this account on my Apple,

28:20.000 --> 28:24.000
and my pass keys got replicated to my Apple account,

28:25.000 --> 28:26.000
I can actually do this from my phone.

28:27.000 --> 28:29.000
So when you do that from our device, that's what happens.

28:30.000 --> 28:31.000
So let me see if I can do this here.

28:32.000 --> 28:34.000
So in your browser, I'm going to show this,

28:35.000 --> 28:36.000
and then I'm going to do the pass keys validation,

28:37.000 --> 28:38.000
the first idea on my phone now, instead of doing the touch ID.

28:39.000 --> 28:45.000
So if I do that, so, okay, I need to turn on Bluetooth.

28:45.000 --> 28:52.000
Bluetooth, okay, let me see now, the camera.

28:53.000 --> 28:57.000
So, not photo, pass keys, come on.

28:58.000 --> 29:03.000
All right, the operation could not proceed, please try again.

29:04.000 --> 29:09.000
No, no, it's not local host.

29:10.000 --> 29:12.000
I think it's the camera, and the Bluetooth,

29:12.000 --> 29:14.000
sometimes the Bluetooth gets messed up.

29:15.000 --> 29:21.000
But you can do that, I tested these, and oh my gosh, it should work.

29:22.000 --> 29:23.000
It works.

29:25.000 --> 29:29.000
Oh, why, anyways, maybe it's more Bluetooth here.

29:30.000 --> 29:31.000
Why do you use Bluetooth?

29:32.000 --> 29:39.000
Maybe I need, yeah, so it's not going to work here,

29:40.000 --> 29:41.000
but you can do that.

29:42.000 --> 29:44.000
With that QR code, you can scan your QR code here,

29:45.000 --> 29:48.000
and then your device is going to communicate with Bluetooth

29:49.000 --> 29:51.000
with the laptop, and then it does the face ID here,

29:52.000 --> 29:55.000
and then you finish your flow on the authentication.

29:56.000 --> 30:00.000
I would like to ask if you can use this kind of pass keys

30:01.000 --> 30:06.000
on all sort of proteins such as maybe SSH connection.

30:07.000 --> 30:10.000
So the question is if you can use pass keys in an SSH connection.

30:11.000 --> 30:15.000
In an SSH, you already use authentication with PEM files

30:16.000 --> 30:17.000
and certificates that's strong.

30:18.000 --> 30:20.000
This was created for web authentication.

30:21.000 --> 30:25.000
You can store your pass keys in your hardware device,

30:26.000 --> 30:29.000
but I don't think you're going to be using pass keys in CLI,

30:30.000 --> 30:31.000
in any command line, or SSH or anything.

30:32.000 --> 30:34.000
There's already strong mechanisms for authentication

30:35.000 --> 30:36.000
that are authenticating in that, I think.

30:37.000 --> 30:42.000
Let's consider this computer, not biometric way.

30:43.000 --> 30:50.000
Can I add a USB dongle because it can have fingerprint sensor?

30:51.000 --> 30:54.000
Can I consider it as a way to connect with a pass key?

30:55.000 --> 30:58.000
Yeah, so the question is if in his laptop that doesn't have biometrics,

30:59.000 --> 31:01.000
if he can put some USB dongle to do the biometrics.

31:01.000 --> 31:07.000
I do, I remember I read some information, some news show up in my radar

31:08.000 --> 31:12.000
saying that I think Google or maybe UB key, I don't know,

31:13.000 --> 31:15.000
they're creating some hardware keys now that validates your fingerprint.

31:16.000 --> 31:18.000
So it's like a typical UB key, but instead of using PEM,

31:19.000 --> 31:21.000
which is the traditional use of UB keys,

31:22.000 --> 31:23.000
you actually validate your fingerprint.

31:24.000 --> 31:30.000
But those things cost 30 dollars a piece and I lose them all the time.

31:31.000 --> 31:35.000
I think I can add on this fingerprinting biometrics if you don't mind.

31:36.000 --> 31:41.000
So there is a parameter in the user verification from RelayBuddy,

31:42.000 --> 31:46.000
which could be required, I think preferred and discouraged.

31:47.000 --> 31:51.000
So potentially the verification biometric is not needed at all,

31:52.000 --> 31:54.000
depending on the relay party, this first.

31:55.000 --> 31:59.000
And second is up to password manager or the system to verify the user.

31:59.000 --> 32:04.000
It could be a password, pin code, it could be Windows Hello, it could be whatever.

32:05.000 --> 32:08.000
And there are devices you can plug in and use Windows Hello for example.

32:09.000 --> 32:15.000
Windows Hello is the Microsoft solution that's equivalent to the Apple keychain,

32:16.000 --> 32:19.000
where that's where your application is going to be stored, your pass is going to be stored.

32:20.000 --> 32:23.000
In the user verification, yeah, you have these three options.

32:24.000 --> 32:29.000
But I think that's one thing that I wanted to try to do for this conference and talk to you today,

32:30.000 --> 32:32.000
is about the password manager in these two FA.

32:33.000 --> 32:37.000
I'm trying to kind of get to the bottom of this and understand and see how this is going to play out.

32:38.000 --> 32:45.000
Because when you require the user verification, you're going to create your pass keys

32:46.000 --> 32:48.000
and your password manager has to do something.

32:48.000 --> 32:53.000
In the test that I did with password manager in this demo application, it doesn't ask anything.

32:54.000 --> 32:58.000
I'm already logged in on my vault, but I'm logged in on my vault on my laptop,

32:59.000 --> 33:03.000
but there isn't a second layer and then that's all the words, words, myth there.

33:04.000 --> 33:07.000
But anyway, there's some words, mything around 2FA and not 2FA.

33:08.000 --> 33:10.000
I'm not concerned about words, mything.

33:11.000 --> 33:17.000
I was just curious to see which factors are going to be used when you are doing password managers.

33:18.000 --> 33:28.000
And if there is some relation to that soft claim from Fido Alliance about 2FA, regulatory regimens and whatnot.

33:29.000 --> 33:35.000
But I don't think that, and I saw people complaining that they don't want to use biometrics in pass keys.

33:36.000 --> 33:39.000
In one of the other talks, I mentioned that maybe six months from now,

33:40.000 --> 33:44.000
we're going to have to differentiate what pass keys are from biometric pass keys.

33:44.000 --> 33:48.000
Because biometric pass keys, I have a strong feeling that that's a 2FA.

33:49.000 --> 33:50.000
It does use two factors.

33:51.000 --> 33:56.000
But if you don't use the biometrics, you only use the pass keys, public-private key encryption,

33:57.000 --> 33:59.000
then maybe you're not using two factors.

34:00.000 --> 34:04.000
But anyway, that's kind of something that I still need you to say a little bit more.

34:05.000 --> 34:06.000
Sorry, we don't have more time.

34:07.000 --> 34:09.000
We can, okay, if we're going to have questions later on.

34:10.000 --> 34:11.000
Thank you.

34:14.000 --> 34:15.000
Thank you.

