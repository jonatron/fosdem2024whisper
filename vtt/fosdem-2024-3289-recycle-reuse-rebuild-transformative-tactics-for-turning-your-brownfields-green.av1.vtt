WEBVTT

00:00.000 --> 00:08.600
Our next speaker is Adam Uren.

00:08.600 --> 00:13.720
He's a developer with over 25 years of experience in IT.

00:13.720 --> 00:17.600
So big round of applause for Adam.

00:17.600 --> 00:24.160
Hi and welcome.

00:24.160 --> 00:26.960
Welcome to Recycle Reused Rebuild.

00:26.960 --> 00:31.360
And I'm here with you today to talk about some of the

00:31.360 --> 00:35.160
tactics for turning your brownfields green.

00:35.160 --> 00:38.320
So quick intro.

00:38.320 --> 00:40.320
My name is Adam Juran.

00:40.320 --> 00:43.320
I have my own company, Juranosaurus Tex.

00:43.320 --> 00:46.360
It's because, like you said, I've been doing this for 25

00:46.360 --> 00:47.360
years.

00:47.360 --> 00:50.520
It makes me a bit of a dinosaur.

00:50.520 --> 00:54.320
And I functionally am a fractional CTO at this

00:54.320 --> 00:58.040
US startup called OK Capsule, which we'll figure later in

00:58.040 --> 00:59.120
today's talk.

00:59.120 --> 01:02.780
And before we jump in, you all know what brownfields and

01:02.780 --> 01:05.420
greenfields mean?

01:05.420 --> 01:05.980
No.

01:05.980 --> 01:07.320
Great.

01:07.320 --> 01:09.720
So a brownfield is like a legacy project.

01:09.720 --> 01:12.680
It's maybe brown because you feel like it's a piece of

01:12.680 --> 01:14.280
beep.

01:14.280 --> 01:20.320
And but that's almost what all of us work on professionally.

01:20.320 --> 01:23.080
And it's the greenfield projects, the ones with all

01:23.080 --> 01:26.180
the latest libraries and the latest version of Tan Stack

01:26.180 --> 01:30.040
Query or React Router or whatever your favorite

01:30.040 --> 01:32.940
X state, I don't know, whatever it is, the ones we get

01:32.940 --> 01:36.380
really excited about are weekend, our side projects.

01:36.380 --> 01:42.280
And this talk is about some of the ways we can help make

01:42.280 --> 01:44.540
our brownfields a little greener.

01:47.480 --> 01:51.180
So here's a quick overview.

01:51.240 --> 01:54.640
We're going to talk about the challenge of legacy systems,

01:54.640 --> 01:59.100
how to unlock transformation, navigating the JavaScript or

01:59.100 --> 02:03.340
solution evolution, how to empower development and

02:03.340 --> 02:05.100
developers.

02:05.100 --> 02:07.700
And then we're going to look at a quick case study, which I

02:07.700 --> 02:09.340
think highlights a lot of these points.

02:09.340 --> 02:12.980
And then a quick Q&A.

02:12.980 --> 02:15.700
And I have to resume my timer.

02:15.700 --> 02:16.420
There we go.

02:16.420 --> 02:16.980
All right.

02:16.980 --> 02:20.860
So this is what OK Capsule sells.

02:20.860 --> 02:24.300
We sell these dispenser boxes rolled up of pouches of

02:24.300 --> 02:28.620
vitamins, of supplements, so that we can reduce plastic.

02:28.620 --> 02:30.060
And you don't have to.

02:30.060 --> 02:32.060
If you're taking a lot of vitamins, you all look very

02:32.060 --> 02:34.780
young, but for anyone who takes supplements on a

02:34.780 --> 02:37.820
regular basis, it's kind of a nuisance to open up like three

02:37.820 --> 02:40.020
different bottles or four different bottles.

02:40.020 --> 02:44.100
And there's a lot of plastic that goes into that as well.

02:44.100 --> 02:46.980
What's really interesting about working for OK Capsule, this

02:46.980 --> 02:50.620
is the first time I have ever worked with a company that

02:50.620 --> 02:55.460
produces a physical product and not just code.

02:55.460 --> 02:58.700
Does anyone else work where the end product is anything

02:58.700 --> 03:00.980
manufactured?

03:00.980 --> 03:01.620
Cool.

03:01.620 --> 03:04.340
Cool.

03:04.340 --> 03:07.460
It's a US company, and it's supplements, so it falls

03:07.460 --> 03:10.100
under the jurisdiction of the Food and Drug Administration.

03:10.100 --> 03:14.220
By the way, as a Native American, not a Native American, but

03:14.220 --> 03:18.060
an American Native speaker, I sometimes speak really, really

03:18.060 --> 03:18.660
fast.

03:18.660 --> 03:21.540
If I'm going too fast or I'm not speaking clearly enough, just

03:21.540 --> 03:22.100
shout at me.

03:22.100 --> 03:23.620
It's a slow, no, no, no.

03:27.020 --> 03:30.460
The startup was started about four years ago, and just

03:30.460 --> 03:35.100
because that's what the CTO knew, it became Salesforce

03:35.100 --> 03:36.220
everything.

03:36.220 --> 03:39.740
Now, Salesforce is a great tool for certain things, but as

03:39.740 --> 03:46.100
a development platform, it's frustrating.

03:46.140 --> 03:50.580
Especially for all the things we look for, for scalability,

03:50.580 --> 03:53.660
for efficiency, et cetera.

03:53.660 --> 03:56.180
But it had everything, not just the CRM, the client

03:56.180 --> 03:58.900
relationship management, which is typically what it was

03:58.900 --> 04:02.340
invented for, or ERP.

04:02.340 --> 04:03.420
Oh gosh.

04:03.420 --> 04:07.540
Enterprise, resource, planning, thank you.

04:07.540 --> 04:11.700
Too many acronyms this early in the day, which is really

04:11.700 --> 04:14.260
because we have inventory and we have lots, and we need a way

04:14.260 --> 04:14.820
to manage that.

04:14.820 --> 04:17.740
And Salesforce is a reasonable way to handle that.

04:17.740 --> 04:23.060
But the API was written as into JavaScript using Apex, which

04:23.060 --> 04:24.380
is Java, cool.

04:24.380 --> 04:29.260
But there were other problems in that architecture, which I

04:29.260 --> 04:30.020
won't get into now.

04:30.020 --> 04:32.740
And various integrations, everything was Salesforce.

04:32.740 --> 04:36.900
And they just started to move some things out to AWS, but

04:36.900 --> 04:39.820
it was very, very, very early.

04:39.820 --> 04:42.540
There's a Shopify app to make it easy for some clients,

04:42.540 --> 04:44.220
because this is a white-labeled product.

04:44.220 --> 04:45.860
You can have your brand.

04:45.860 --> 04:48.020
It can be anything.

04:48.020 --> 04:49.980
And there was just a lot of tech debt, even within the

04:49.980 --> 04:53.260
Salesforce, MVPs, POCs, Band-Aids on top of that.

04:53.260 --> 04:59.460
It was kind of a mind-blowingly broad landscape of bad

04:59.460 --> 05:02.620
practices.

05:02.620 --> 05:05.260
And yet it worked.

05:05.260 --> 05:05.980
That's the thing.

05:05.980 --> 05:09.900
There's value in the fact that it was already working.

05:09.900 --> 05:11.900
Think about all the banking software in the world.

05:11.900 --> 05:17.220
It's all COBOL, in from where you're going to go and blend

05:17.220 --> 05:21.620
the reliability of what exists with the agility of maybe

05:21.620 --> 05:23.140
some new technology.

05:23.140 --> 05:27.020
And I'm getting a stamp.

05:27.020 --> 05:28.300
I have to read.

05:28.300 --> 05:29.300
Oh, no.

05:31.660 --> 05:32.660
Does this work?

05:32.660 --> 05:33.660
Yes, this is better.

05:33.660 --> 05:34.180
I'm sorry.

05:34.180 --> 05:36.900
This is, I have speaker notes.

05:36.900 --> 05:39.060
You know how it is.

05:39.060 --> 05:42.140
So what we're looking to navigate is what I call the

05:42.140 --> 05:43.100
middle path.

05:43.100 --> 05:46.300
And it's about finding that right balance, keeping the

05:46.300 --> 05:50.140
system stable and reliable while at the same time making

05:50.140 --> 05:53.300
them more efficient and ready for the future.

05:53.300 --> 05:57.220
So we have to carefully choose which aspects to enhance and

05:57.220 --> 06:00.060
how to integrate new technologies.

06:00.060 --> 06:01.340
So we're doing more than updating.

06:01.340 --> 06:06.060
We're, in a way, future-proofing the work.

06:06.060 --> 06:11.020
Because as it is said, what got us here really can't take us

06:11.020 --> 06:12.220
to the next level.

06:14.380 --> 06:20.140
So there's this amazing temptation when you look at

06:20.140 --> 06:23.100
someone else's code and you don't have the context and

06:23.100 --> 06:25.900
you're like, oh my god, this developer was an idiot.

06:25.900 --> 06:27.580
Like, who would write something like this?

06:27.580 --> 06:30.460
And another side of it is someone's looked at our code

06:30.460 --> 06:33.820
and thought the exact same thing.

06:33.820 --> 06:37.100
So there is this temptation to throw it away and start over.

06:37.100 --> 06:44.100
But it seems like this direct roots to efficiency.

06:44.100 --> 06:47.460
But hitting the reset button comes with its own costs and

06:47.460 --> 06:48.900
challenges.

06:48.900 --> 06:51.740
Because not only you're losing what you've already built and

06:51.740 --> 06:54.060
the opportunity cost, like the time and the money that was

06:54.060 --> 06:57.220
spent developing the thing that mostly works in the first

06:57.220 --> 07:02.340
place, but then there's knowledge gaps about why

07:02.340 --> 07:03.980
decisions were made.

07:03.980 --> 07:09.140
That's keeping track of whoever came before us, why they

07:09.140 --> 07:10.420
chose what they did.

07:10.420 --> 07:14.260
There must have been some, we hope, that there was some logic

07:14.260 --> 07:17.740
in the choices that they made.

07:17.740 --> 07:21.860
And almost inevitably, there's these tentacles of tightly

07:21.860 --> 07:25.620
coupled systems that reach way deeper than we initially

07:25.620 --> 07:27.340
imagined.

07:27.340 --> 07:30.100
So we really need to consider a more thoughtful and layered

07:30.140 --> 07:34.700
approach for a meaningful transformation.

07:34.700 --> 07:38.980
So who here has burned it all down before and be like, the

07:38.980 --> 07:39.580
hell with this?

07:39.580 --> 07:42.180
I'm starting over.

07:42.180 --> 07:43.620
OK.

07:43.620 --> 07:44.860
Did it work?

07:48.860 --> 07:51.300
Oh, and we lost my slide.

07:51.300 --> 07:53.220
I'm unplugged.

07:53.220 --> 07:56.740
Please go back to full, please.

07:56.740 --> 07:57.980
I'm plugged in, I promise.

08:01.100 --> 08:02.380
Yeah.

08:02.380 --> 08:05.380
We're going to have to find it again or reset it or

08:05.380 --> 08:07.300
something, you know?

08:07.300 --> 08:08.020
This way?

08:08.020 --> 08:10.820
It should be fine, but it's not there.

08:10.820 --> 08:13.140
Yeah, hold on.

08:13.140 --> 08:16.020
Window.

08:16.020 --> 08:17.060
There we go.

08:17.060 --> 08:18.140
And is it full?

08:20.580 --> 08:21.940
It's full enough.

08:21.940 --> 08:23.140
We're going to leave it like that.

08:25.900 --> 08:27.380
I just don't want that feedback.

08:27.380 --> 08:28.700
It's been driving me nuts.

08:28.740 --> 08:29.940
Let's try putting it down again.

08:36.260 --> 08:38.260
I'm going to take it like this.

08:38.260 --> 08:39.380
OK.

08:39.380 --> 08:40.860
So moving on.

08:40.860 --> 08:44.740
So how do we find this strategic middle path?

08:44.740 --> 08:46.740
So you have to start with an evaluation of

08:46.740 --> 08:48.340
legacy systems.

08:48.340 --> 08:53.940
You have to identify, see, stand back.

08:53.940 --> 08:56.940
See what is already delivering business value?

08:56.940 --> 08:59.820
Because, do you guys hear that?

08:59.820 --> 09:00.820
Hmm?

09:00.820 --> 09:04.420
It's when you get near to the things.

09:04.420 --> 09:04.940
This thing?

09:04.940 --> 09:05.420
Yeah.

09:05.420 --> 09:08.100
Try to.

09:08.100 --> 09:09.580
I'm standing over here in the corner.

09:13.100 --> 09:14.700
Anyway, OK, good.

09:14.700 --> 09:15.980
It's gone.

09:15.980 --> 09:19.260
So we have to look for the places that deliver business

09:19.260 --> 09:21.220
value.

09:21.220 --> 09:23.700
And I know that's not always our first instinct as

09:23.700 --> 09:24.580
developers.

09:24.620 --> 09:27.700
We want to do the cool thing and have a good developer

09:27.700 --> 09:28.780
experience.

09:28.780 --> 09:34.020
But sometimes our managers, they have a point.

09:34.020 --> 09:34.940
We can't.

09:34.940 --> 09:36.660
The whole point is we're a business.

09:36.660 --> 09:39.460
We're offering something of value and people give us

09:39.460 --> 09:40.540
money for that.

09:40.540 --> 09:44.900
So we have to look for what provides business value.

09:44.900 --> 09:47.620
Because sometimes the cost of rewriting or replacing

09:47.620 --> 09:51.220
doesn't justify the potential gains.

09:51.220 --> 09:54.300
Like, it's not just about us having fun.

09:54.300 --> 09:57.180
I mean, it is, but it isn't.

09:57.180 --> 09:59.940
So this assessment helps us pinpoint where enhancements

09:59.940 --> 10:03.420
can be made without disrupting the underlying value.

10:03.420 --> 10:05.820
And then we can bring in new technology to enhance these

10:05.820 --> 10:09.580
areas so that we can boost performance without starting

10:09.580 --> 10:10.700
over.

10:10.700 --> 10:14.340
So we want to mix the old's dependability, because it's

10:14.340 --> 10:14.860
already there.

10:14.860 --> 10:17.820
It's already working, mostly theoretically, hopefully,

10:17.820 --> 10:22.540
with the new's efficiency and do gradual improvements.

10:22.580 --> 10:26.100
So we're talking about evolving systems bit by bit,

10:26.100 --> 10:29.900
ensuring that they may remain stable as we

10:29.900 --> 10:32.060
integrate new features.

10:32.060 --> 10:35.220
This is also why testing is really important.

10:35.220 --> 10:38.260
Because no one sleeps well at night when you roll something

10:38.260 --> 10:40.220
else, roll something new out.

10:40.220 --> 10:42.980
And you're just like, well, I hope this works.

10:42.980 --> 10:44.180
I don't like that anymore.

10:44.180 --> 10:46.980
I did when I was young.

10:46.980 --> 10:48.980
Also, 25 years ago, no one was dead.

10:49.540 --> 10:53.380
No one was testing.

10:53.380 --> 10:54.740
At least I wasn't testing.

10:54.740 --> 10:57.220
OK, let's call it on yourself.

10:57.220 --> 11:02.780
So by choosing a middle path, we can make sure that we meet

11:02.780 --> 11:06.260
today's needs and also plan for the future.

11:06.260 --> 11:11.540
All right, so how do we navigate finding the right

11:11.540 --> 11:12.340
solutions?

11:12.340 --> 11:18.500
So JavaScript, which is the bulk of my new platform, but

11:18.540 --> 11:22.900
no to the back end and React on the front end, is a massively

11:22.900 --> 11:25.580
evolving landscape.

11:25.580 --> 11:29.180
I have trouble keeping track sometimes of all the new

11:29.180 --> 11:32.340
frameworks and new libraries or changes.

11:32.340 --> 11:38.460
And it's so easy to have FOMO, this fear of missing out on,

11:38.460 --> 11:40.180
I'm not using React server components yet.

11:40.180 --> 11:41.460
And it feels like everyone is.

11:42.300 --> 11:48.620
You have to just be aware of that context.

11:48.620 --> 11:52.660
But you do have to look at all the pieces out there.

11:52.660 --> 11:53.780
There's a lot.

11:53.780 --> 11:57.020
I mean, we think of the JavaScript ecosystem and all the

11:57.020 --> 12:01.140
packages and the vast majority of it is open source.

12:01.140 --> 12:03.380
And so you get to consider, like, do I want this library?

12:03.380 --> 12:05.180
What's the best way to handle this?

12:05.180 --> 12:07.020
Do I want state management?

12:07.020 --> 12:08.860
Do I want two stunts?

12:08.860 --> 12:11.860
Do I want recoil?

12:11.860 --> 12:12.820
Recoil is old.

12:12.820 --> 12:14.940
Redux is too big for my taste.

12:14.940 --> 12:16.580
X-State is my favorite.

12:16.580 --> 12:17.820
But there's like a million options.

12:17.820 --> 12:19.100
And how do you choose?

12:19.100 --> 12:23.980
So but even stepping back, you have to look at the whole

12:23.980 --> 12:27.180
architecture of the system and think about how you can go

12:27.180 --> 12:29.580
from tightly coupled towards loosely coupled.

12:29.580 --> 12:32.900
Legacy systems often, not always, often tends to be

12:32.900 --> 12:34.980
tightly coupled.

12:34.980 --> 12:37.780
So we want to keep our move towards loosely coupled,

12:37.820 --> 12:42.300
keeping the architecture scalable and flexible.

12:42.300 --> 12:47.420
And then there's the aspect of repair or rebuild from scratch.

12:47.420 --> 12:52.020
And it's not just about dealing with tech debt.

12:52.020 --> 12:54.700
It's about, again, weighing the ongoing value of the system

12:54.700 --> 12:55.900
as it is.

12:55.900 --> 12:58.900
Is there something of value that you can salvage before you

12:58.900 --> 13:00.860
decide to rewrite it altogether?

13:00.860 --> 13:06.100
And as I mentioned, open source versus custom solutions for

13:06.100 --> 13:10.940
OK Capsule, four years ago, Salesforce, the vendor solution

13:10.940 --> 13:12.540
seemed like the logical choice.

13:12.540 --> 13:13.900
It was known.

13:13.900 --> 13:17.060
They didn't have the director of engineering.

13:17.060 --> 13:19.100
And they just said, OK, well, let's start with this.

13:19.100 --> 13:20.540
This seems like a reasonable choice.

13:20.540 --> 13:21.460
And went.

13:21.460 --> 13:24.540
And they got themselves in pretty deep before they

13:24.540 --> 13:28.020
realized we're going to have to replace this, especially for

13:28.020 --> 13:30.900
the order infrastructure, the way that our

13:30.900 --> 13:32.860
clients can submit orders.

13:32.860 --> 13:40.180
And finding this right balance, really between open source and

13:40.180 --> 13:47.380
vendor solutions, can actually drive innovation if you plan it

13:47.380 --> 13:50.380
and navigate it well.

13:50.380 --> 13:54.020
So another poll for you all.

13:54.020 --> 13:56.060
Rebuild, repair.

13:56.060 --> 13:58.780
What do you all think?

13:58.780 --> 13:59.900
What have you done before?

13:59.900 --> 14:02.620
What do you prefer to do?

14:02.620 --> 14:03.700
It depends.

14:03.700 --> 14:04.980
Yeah, I know.

14:04.980 --> 14:06.380
Good answer.

14:06.380 --> 14:07.180
Good answer.

14:07.180 --> 14:10.300
Have you heard my talk before?

14:10.300 --> 14:16.620
So beyond the technical challenge, another aspect of

14:16.620 --> 14:20.060
transforming these legacy systems is how do we empower our

14:20.060 --> 14:20.620
teams?

14:20.620 --> 14:24.340
Because odds are there's already some underlying

14:24.340 --> 14:26.860
frustration in development teams working on legacy

14:26.860 --> 14:28.060
applications.

14:28.100 --> 14:33.100
We feel frustrated by the inability to move quickly very

14:33.100 --> 14:33.900
often.

14:33.900 --> 14:37.020
But there is sometimes this untapped potential there.

14:37.020 --> 14:41.140
And we can find the path for innovation and efficiency.

14:41.140 --> 14:47.460
So the activity is to engage with your teams and consider the

14:47.460 --> 14:48.820
mud of a brownfield.

14:48.820 --> 14:51.860
And decide whether when you're going to sow the seeds and

14:51.860 --> 14:53.780
when you're going to let this field life fallow, you're going

14:53.780 --> 14:54.860
to leave it alone.

14:54.860 --> 14:58.020
And this is the strategic transformation, applying thoughtful

14:58.060 --> 15:01.260
targeted strategies to cultivate sustainable tech

15:01.260 --> 15:02.740
landscapes.

15:02.740 --> 15:08.140
And when we all raise our hands having worked in legacy,

15:08.140 --> 15:09.300
we're not alone in this.

15:09.300 --> 15:11.700
We're all dealing with this.

15:11.700 --> 15:16.060
And there's really a lot of value in the collective wisdom

15:16.060 --> 15:22.020
whether you're reaching out through open source communities

15:22.020 --> 15:26.420
or you're asking the models of chat GBT.

15:26.860 --> 15:31.140
There's info or Stack Overflow too, back in the old days.

15:31.140 --> 15:32.540
But there's a lot of information out there.

15:32.540 --> 15:34.020
And you don't have to go this alone.

15:37.340 --> 15:40.340
So now we're moving on to the case study.

15:40.340 --> 15:41.740
And how am I doing on time?

15:41.740 --> 15:42.580
18 minutes?

15:42.580 --> 15:43.660
Yes, yes, we're in good shape.

15:43.660 --> 15:44.180
All right.

15:44.180 --> 15:47.260
So we're going to talk about the problem I faced, my team

15:47.260 --> 15:51.180
faced, the opportunity, how we divided up, recycled,

15:51.180 --> 15:56.180
rebuilt, reused, what the outcome was, and lessons learned

15:56.220 --> 15:57.300
and takeaways.

15:57.300 --> 15:59.580
So if you all remember back in the beginning,

15:59.580 --> 16:01.740
I showed you that little dispenser box,

16:01.740 --> 16:03.500
and we sell these little pouches.

16:03.500 --> 16:05.700
What we also package with that is a pamphlet.

16:05.700 --> 16:08.780
The pamphlet is a marketing material.

16:08.780 --> 16:10.540
It also has descriptions of the supplement.

16:10.540 --> 16:11.980
They show up to orders the next day.

16:11.980 --> 16:13.340
The pamphlets are already ready.

16:13.340 --> 16:16.780
They use a little scan to make sure the order matches

16:16.780 --> 16:18.140
the pamphlet.

16:18.140 --> 16:23.900
So conga, this is another product within Salesforce,

16:23.900 --> 16:25.580
decided that we weren't paying enough.

16:25.580 --> 16:27.420
We were one of the bigger clients, and they're like, hey,

16:27.420 --> 16:29.340
we're raising your rates.

16:29.340 --> 16:32.740
And it amounted to highway robbery.

16:32.740 --> 16:34.780
They were blackmail, or extortion,

16:34.780 --> 16:36.420
or one of these terrible words.

16:36.420 --> 16:40.980
And my CTO is like, we're not doing that.

16:40.980 --> 16:42.780
He's wanted to get rid of them for a long time.

16:42.780 --> 16:48.140
And so he said, like the day before Christmas,

16:48.140 --> 16:51.860
we're going to rebuild, and you have until mid-February.

16:51.860 --> 16:53.140
We're going to do that.

16:56.300 --> 17:02.140
So yeah, so vendor lock-in.

17:02.140 --> 17:04.100
Who here has suffered from vendor lock-in?

17:04.100 --> 17:06.300
And the problems?

17:06.300 --> 17:07.900
I'm not alone.

17:07.900 --> 17:12.980
So this is how we dealt with it.

17:12.980 --> 17:15.100
We chose to basically reverse engineer.

17:15.100 --> 17:17.540
We had some of the pieces in place.

17:17.540 --> 17:18.540
Too close to this box.

17:18.820 --> 17:24.020
We applied the principles of a cycle, rebuilt, reused,

17:24.020 --> 17:26.540
and we completed the development under five weeks.

17:26.540 --> 17:28.140
We're testing right now, and this will be going into

17:28.140 --> 17:29.540
production within the next two weeks.

17:29.540 --> 17:32.340
We're just basically testing the printing and alignment

17:32.340 --> 17:35.740
and making sure, because again, it's a physical product.

17:35.740 --> 17:38.060
And just because it comes out in the PDF doesn't mean it

17:38.060 --> 17:42.140
comes out of the printer exactly how you want it.

17:42.140 --> 17:45.580
And I'm really, really proud that every member of my team

17:45.580 --> 17:47.140
played a role in making this.

17:47.740 --> 17:50.900
We have a very small, like five-person team, and

17:50.900 --> 17:52.860
everyone touched this in some way.

17:52.860 --> 17:57.980
So what's really cool is here's a few of the open source

17:57.980 --> 17:59.060
libraries.

17:59.060 --> 18:04.260
And we already had this node app, which helps us produce

18:04.260 --> 18:07.220
the nutrition fact panels, and we extended it to be able to

18:07.220 --> 18:12.380
print pamphlets using pug templates, existing visual

18:12.380 --> 18:15.580
assets, and an S3 bucket, no problem.

18:15.580 --> 18:20.540
We had to manually copy the text and style data from the

18:20.540 --> 18:21.940
Microsoft Word templates.

18:21.940 --> 18:24.220
We put it into a JSON format, and we put that into a

18:24.220 --> 18:26.820
database table.

18:26.820 --> 18:29.460
What's really awesome is the new architecture allows us to

18:29.460 --> 18:34.300
have now multiple blocks of dynamic code per page, or in

18:34.300 --> 18:35.700
multiple pages of these pamphlets.

18:35.700 --> 18:37.940
We're not doing that yet, but it's just another row in the

18:37.940 --> 18:41.660
database and another cycle in the loop.

18:41.660 --> 18:44.100
We added a new endpoint with actual schema

18:44.100 --> 18:48.820
validation for Salesforce, because Salesforce has the

18:48.820 --> 18:52.420
orders information at the moment, so it's going to call

18:52.420 --> 18:58.500
out to our panel app on AWS to generate the PDF and then

18:58.500 --> 18:59.140
send it back.

18:59.140 --> 19:02.900
You'll see another diagram on the next page.

19:02.900 --> 19:07.500
And with this also having this stored this way, it lays a

19:07.500 --> 19:11.380
foundation for us to build a section in our portal to allow

19:11.380 --> 19:14.580
clients to directly interact with their pamphlet designs

19:14.580 --> 19:18.260
and handle themselves, because right now someone on my team

19:18.260 --> 19:21.580
has to collect the data and put it into the database.

19:21.580 --> 19:24.820
So ultimately, that's an efficiency that as soon as we

19:24.820 --> 19:29.460
have time, we build this UI and then just charge the client

19:29.460 --> 19:31.700
every time they want to update their pamphlet, and we stay

19:31.700 --> 19:32.820
out of the mix.

19:37.180 --> 19:41.340
So have you all ever had this innovation under pressure?

19:41.540 --> 19:43.460
Kind of a thing before?

19:46.260 --> 19:46.700
Few of us.

19:46.700 --> 19:48.940
It's it was a fun challenge.

19:48.940 --> 19:53.100
It wasn't just too much, but it was still a challenge over

19:53.100 --> 19:54.700
the holidays too.

19:54.700 --> 19:57.020
So here's the original.

19:57.020 --> 20:00.220
Here's the before, if you recall, and this is a little

20:00.220 --> 20:02.340
more complicated how this all works.

20:02.340 --> 20:07.420
So Salesforce still triggers a cron job, hits its apex class,

20:07.420 --> 20:09.780
which calls the panel app.

20:09.900 --> 20:14.660
It then takes the image assets from S3, order data from the

20:14.660 --> 20:16.780
database, and also the style data.

20:16.780 --> 20:19.620
I didn't mention that aggregates it all through a pug

20:19.620 --> 20:24.380
template, generates HTML, playwright, handily, just creates

20:24.380 --> 20:28.300
a PDF of my HTML template, sends it back, attaches it, boom,

20:28.300 --> 20:29.300
done.

20:31.340 --> 20:36.260
So this just shows the comparison.

20:36.260 --> 20:40.940
And there's a lot more independence available.

20:40.940 --> 20:43.140
We've just taken out the blocker.

20:43.140 --> 20:44.340
We don't need this anymore.

20:44.340 --> 20:46.740
I can go bye-bye.

20:46.740 --> 20:50.180
And you can also see tightly coupled where we're like, these

20:50.180 --> 20:52.340
are all individual things.

20:52.340 --> 20:53.740
So now more loosely coupled.

20:59.780 --> 21:00.500
Cool.

21:00.500 --> 21:03.020
So lessons learned.

21:07.260 --> 21:08.340
What is that?

21:08.340 --> 21:11.580
So the journey taught us several lessons.

21:11.580 --> 21:15.100
The importance of reducing dependency, Fender Lock-In,

21:15.100 --> 21:17.780
power of creative problem solving, the need for

21:17.780 --> 21:20.780
strategic flexibility in our planning.

21:20.780 --> 21:24.940
And these insights have shaped our new approaches, preparing

21:24.940 --> 21:28.580
us not to face future challenges, but to anticipate them

21:28.580 --> 21:32.300
and solve them proactively, like the UI.

21:33.300 --> 21:36.300
And that's kind of it.

21:36.300 --> 21:40.300
So I wanted to just open up a Q&A session.

21:40.300 --> 21:44.300
Please share questions, insights, or experiences related to

21:44.300 --> 21:47.300
Brownfield transformation.

21:47.300 --> 21:50.300
And yeah, questions, please.

21:59.300 --> 22:00.300
Questions?

22:00.300 --> 22:01.300
Yes, sir.

22:03.300 --> 22:05.300
It's very curious to me.

22:05.300 --> 22:07.300
I'm in a position right now about the Starr-Grindfield

22:07.300 --> 22:11.300
project with a client that it's asking between AWS and just

22:11.300 --> 22:13.300
buying everything out of Salesforce.

22:13.300 --> 22:15.300
So this is already helpful.

22:15.300 --> 22:16.300
Thanks for that.

22:16.300 --> 22:17.300
You're welcome.

22:17.300 --> 22:19.300
But if you were in this situation, again, where you're

22:19.300 --> 22:23.300
starting from scratch, what would be the set of tools

22:23.300 --> 22:24.300
you would prefer?

22:24.300 --> 22:26.300
So the question is, if I'm starting from scratch, what

22:26.300 --> 22:28.300
would be the set of tools?

22:29.300 --> 22:33.300
And to quote from someone else in the session, it depends.

22:37.300 --> 22:40.300
It really depends.

22:40.300 --> 22:45.300
I kind of like, for certain things, I like Redwood JS,

22:45.300 --> 22:50.300
because it's kind of a full stack solution out of the box.

22:50.300 --> 22:56.300
But it really depends on what you need to start with

22:56.300 --> 22:57.300
and where you're going.

22:57.300 --> 23:01.300
You really have to, because Redwood's good for a few

23:01.300 --> 23:03.300
solutions.

23:03.300 --> 23:06.300
We have a micro, our new API, which was built last year,

23:06.300 --> 23:15.300
we outsourced it, was, is microservices, about 10 of them.

23:15.300 --> 23:19.300
And so it just depends.

23:19.300 --> 23:21.300
What are you building?

23:21.300 --> 23:26.300
So I'm dealing with people who really want to keep using Excel.

23:26.300 --> 23:28.300
So they just want to make sure I don't take the weight

23:28.300 --> 23:29.300
on Excel files.

23:29.300 --> 23:32.300
So is that the actual Excel or the experience of a spreadsheet?

23:32.300 --> 23:35.300
So now they come from manufacturing, but also physical

23:35.300 --> 23:36.300
products.

23:36.300 --> 23:37.300
Uh-huh.

23:37.300 --> 23:40.300
But yeah, they're clueless.

23:40.300 --> 23:43.300
On the text, they don't have a CPO.

23:43.300 --> 23:47.300
So it's really hand-holding them into the world of choosing

23:47.300 --> 23:50.300
the best for their future when they have absolutely

23:50.300 --> 23:52.300
no knowledge of tech.

23:52.300 --> 23:53.300
Got it.

23:53.300 --> 23:56.300
So the question is, he's dealing with a new client, and

23:56.300 --> 23:58.300
they're in manufacturing, and they really like Excel

23:58.300 --> 23:59.300
spreadsheets.

23:59.300 --> 24:09.300
I, my gut would be, find a tool that emulates, like a data

24:09.300 --> 24:13.300
table that emulates that and lets them get pretty close to

24:13.300 --> 24:17.300
that so that it's not actually Excel.

24:17.300 --> 24:20.300
Unless you want to use Excel as like a back-end, and I only

24:20.300 --> 24:23.300
say that, and that sounds crazy, but you know this website,

24:23.300 --> 24:29.300
levels.fyi, which they had all the aggregated information about

24:29.300 --> 24:32.300
who got paid what and all the fang companies?

24:32.300 --> 24:37.300
Their back-end for the first three years was Excel.

24:37.300 --> 24:39.300
It was Google Sheets.

24:39.300 --> 24:41.300
Actually, it was Google Sheets.

24:41.300 --> 24:42.300
I'm sorry.

24:42.300 --> 24:44.300
So, and that was their back-end.

