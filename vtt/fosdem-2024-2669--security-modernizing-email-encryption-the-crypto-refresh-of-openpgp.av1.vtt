WEBVTT

00:00.000 --> 00:15.000
Welcome everyone. I hope you can hear me well. I am Daniel Huygens. I am the cryptography

00:15.000 --> 00:22.360
team lead at Proton and I will be talking about modernizing email encryption today,

00:22.360 --> 00:29.960
primarily about the new version of the OpenBGP standard, but also about the OpenBGP standard

00:30.840 --> 00:40.400
more generally and sorry, the OpenBGP ecosystem more generally and how it has evolved in recent

00:40.400 --> 00:51.160
times. And I will in fact start with the latter because OpenBGP has a rather bad reputation

00:51.160 --> 00:59.600
at least as far as it comes to the user experience. And you might remember having to generate a

00:59.600 --> 01:07.480
key manually using KnoopaG in the comment line and that used to be basically the only way to use

01:07.480 --> 01:18.560
PGP. But it's no longer the case. So my employer would like to tell you that obviously Proton

01:18.560 --> 01:23.960
made everything better and you know it's so much easier now, but it's not only Proton also

01:23.960 --> 01:31.280
Thunderbird has OpenBGP support built in now. You still have to click a few buttons, but it's

01:31.280 --> 01:40.400
much easier than before. And also other applications like FlowCrypt make it much easier to use

01:40.400 --> 01:47.080
encrypted email. And for a technical audience like this one, you might think well it's not a big

01:47.080 --> 01:52.440
deal, I can use the comment line or I even prefer it and that's perfectly reasonable and fine. But

01:52.680 --> 02:02.280
for a wider audience, this is really important. And also for us it's important because you want to

02:02.280 --> 02:08.920
write encrypted emails not only to yourself, but also to your friends. So the more people that use

02:08.920 --> 02:17.640
encrypted email, the more reason there is in fact to use it. And so the user experience is also very

02:17.880 --> 02:28.840
important and it has improved over the past decade or so. Then regarding the libraries, there used to

02:28.840 --> 02:37.920
be basically only one open source, open PGP implementation which is GNUMPG. And of course

02:37.960 --> 02:43.960
GNUMPG is still around, but there are many more implementations nowadays. So for example,

02:44.040 --> 02:52.200
OpenBGP and OpenBGP.js are two implementations that Proton maintains and uses. And then there's

02:52.200 --> 02:59.320
PGP English which is specifically designed to be easy to use and it's a Java implementation,

02:59.960 --> 03:07.880
a wrapper on Balty Castle. Then there's PGPI, a Python implementation, RMP, a C++ implementation

03:07.880 --> 03:15.480
that's used in Thunderbird. And there is Zekoya which is a new implementation in Rust which Neil

03:15.480 --> 03:23.960
presented on in the main track earlier today. If you happen to have come across that, it aims to

03:24.760 --> 03:33.240
provide a modern implementation of OpenBGP also for the comment line, basically providing a drop

03:33.320 --> 03:44.600
in replacement for GNUMPG. And then key distribution. You might remember that back in the day,

03:44.600 --> 03:51.880
you might have to export your key manually and then attach it to your emails or upload it to a

03:51.880 --> 03:59.480
key server manually. All of that is also not really necessary anymore today. So there is the

04:00.440 --> 04:07.560
key server protocol. Well, it has been around for a while but it's more widely used now and can be

04:07.560 --> 04:14.920
used by applications to automatically upload keys and also automatically fetch public keys

04:14.920 --> 04:21.960
of your friends. If you want to send an encrypted email to someone, your email application can

04:21.960 --> 04:31.880
automatically fetch keys to do so. And WebKey directory can do something similar but instead

04:31.880 --> 04:39.880
of fetching from a key server, you can fetch the public key from the domain of the email address

04:39.880 --> 04:45.000
that you're sending to. So if your provider supports that or if you're self-hosting your email,

04:45.000 --> 04:51.400
it can serve your public keys that way. And then finally, there's AutoCrypt which is a way to send

04:52.120 --> 04:59.560
public keys in email headers so that also again, the user doesn't have to worry about it and

05:00.360 --> 05:09.000
everything should work automatically hence the name. So slightly diving into HP key server,

05:09.000 --> 05:15.720
I won't dive into it very much because the presentation is not primarily about that. But

05:15.720 --> 05:23.160
so as you can see, you can simply make an HP request to fetch a public key for a given email

05:23.160 --> 05:30.120
address and you get an open HP key back if there is one and then you can use that. And WKD is very

05:30.120 --> 05:36.680
similar except instead of making a request to a key server, you make a request to the domain of the

05:36.680 --> 05:44.840
email address as I said before. All right, then talking a bit about key verification, you might

05:44.840 --> 05:54.040
remember that FOSSTEM used to host very cool key signing parties. And as you can see, these people

05:54.040 --> 06:00.840
are having a lot of fun and although the party hats have been photoshopped on, but nevertheless,

06:02.040 --> 06:10.440
it can be fun but admittedly, most people don't want to spend their time doing this in 2024.

06:10.440 --> 06:17.640
At least the average user probably doesn't. So there is an alternative to that as well,

06:18.840 --> 06:26.120
which is called key transparency. And I've presented about it at a previous FOSSTEM but just

06:27.080 --> 06:33.960
summarizing briefly, the idea behind key transparency is that we publish all the public

06:33.960 --> 06:43.160
keys of our users or of the provider's users or the key servers, public keys or whatever

06:44.600 --> 06:53.400
to an append-only transparency log somewhat similar to a certificate transparency. For example,

06:54.440 --> 07:00.840
if you heard of it, it's a concept where TLS certificates are published to a central

07:01.800 --> 07:09.960
transparency log that's an append-only log and everyone can verify that the TLS certificates

07:09.960 --> 07:18.920
that you are getting are in that log and therefore are probably not malicious. And the basic idea

07:18.920 --> 07:26.440
here is the same. We publish the openBGP certificates to a transparency log and then in this case,

07:27.400 --> 07:34.360
all the owners of the public keys need to check their own keys because they're the ones that

07:34.360 --> 07:39.400
then generated them and know whether it's the correct public key or not. So they go and check

07:39.400 --> 07:46.120
in the key transparency log whether the public key for their email address is correct. And then

07:46.120 --> 07:53.080
everybody else who fetches the public key can be certain that it's the correct public key

07:54.040 --> 08:02.440
given that everyone sees the same keys. So it's roughly similar to a blockchain in a way. I know

08:02.440 --> 08:11.000
it's a dirty word, but the concept is vaguely similar. Everyone has the same view over the data

08:11.000 --> 08:17.800
and if everyone checks the keys, everyone can be sure that all the keys are correct. And we have

08:18.280 --> 08:27.400
shipped this at Proton. There is also a working group at the ITF to standardize key transparency,

08:28.200 --> 08:35.720
not specifically for OpenBGP, but the general concept. And we would also like to standardize

08:36.440 --> 08:46.280
the use of key transparency for OpenBGP so that not only Proton users can benefit from this, but

08:47.000 --> 08:53.400
all OpenBGP email can be protected in this way because the advantage of this again is that all

08:53.400 --> 09:00.040
of that is fully automatic. So the OpenBGP implementation or the email client, let's say,

09:00.040 --> 09:07.240
can verify the keys without the user having to do anything. So it makes the use of

09:07.960 --> 09:15.960
end-to-end encrypted email much simpler. All right, so then getting to the actual OpenBGP standard.

09:16.920 --> 09:25.480
First, a short history. The current OpenBGP standard stems from 2007, believe it or not,

09:25.480 --> 09:31.640
so it's new for an update. Although it's not the case that nothing has happened since then,

09:31.640 --> 09:39.160
so there was an RFC for adding the Chamelea Cipher and also for adding Elliptic Curve

09:39.160 --> 09:48.040
cryptography using the NIST curves in 2009 and 2012, respectively. But that's the last RFC

09:48.840 --> 09:53.720
related to OpenBGP that was published. After that, there have been a number of drafts,

09:54.520 --> 10:03.800
one for adding EDDSA that has been widely implemented and also adding Curve25519 has

10:03.800 --> 10:11.320
been fairly widely implemented, but nevertheless has never been standardized. And there are a

10:11.320 --> 10:25.240
number of other things that were kind of overdue. So the RFC 480 BIS draft was in fact intended to be

10:25.880 --> 10:35.640
become an RFC as well, but that never happened. And then the CryptoRefresh is the most recent draft

10:35.640 --> 10:41.000
and that will become an RFC very soon. It's currently in the editor's queue,

10:41.880 --> 10:49.720
so it should become an RFC in the coming weeks, hopefully. So what is actually in the CryptoRefresh?

10:49.720 --> 10:54.920
Well, a lot of things, since it's been so long since we had an update, there were a lot of things

10:54.920 --> 11:01.080
that needed to be updated or that we wanted to update. So first of all, it merges the previous

11:01.160 --> 11:11.880
RFCs for Camelia and ECC. Then it standardizes finally Curve25519 as well as Curve4Fraight and

11:11.880 --> 11:19.240
the Brain Pool Curves, which are commonly used by the German government and they like them.

11:21.560 --> 11:28.040
But they are not mandatory to implement. Curve25519 is mandatory to implement Curve4Fraight,

11:28.840 --> 11:36.200
recommended to be implemented. Brain Pool is fully optional, so they can use it. Everybody

11:36.200 --> 11:44.680
else doesn't have to. Then it also adds modern AAD encryption, authenticated encryption,

11:45.960 --> 11:56.440
which was also fairly overdue, so it adds the use of OCB, EX, and GCM. GCM was slightly

11:56.440 --> 12:05.320
controversial, so I'll dive slightly into that. So first, OCB is the mandatory to implement

12:06.600 --> 12:14.600
algorithm. EX and GCM are fully optional. The reason that they're there is because even though

12:14.600 --> 12:24.600
OCB, in theory, should be fastest. In practice, in our testing, particularly GCM is usually

12:24.600 --> 12:32.920
fastest because it often has assembly implementations, for example. That's part of the reason why

12:32.920 --> 12:40.360
it's there. Another reason is because GCM is standardized by NIST, and so it's FIPS-approved.

12:40.360 --> 12:47.400
So for the people that care about that, they can use that. But again, it's fully optional. So

12:47.400 --> 12:53.400
for those that want to use the theoretically fastest, or once it becomes actually fastest,

12:54.440 --> 13:02.680
everyone can use OCB. Then also a memory hard password hashing function was added,

13:02.680 --> 13:11.080
Argon2. The previous password hashing function in OpenBGP was very weak, so this was also very,

13:11.080 --> 13:15.400
very necessary. This means that if you, for example, encrypt your keys with a password,

13:16.280 --> 13:22.840
they're protected much more strongly. Of course, it's still important to choose a strong password,

13:22.840 --> 13:28.920
but it has become much more expensive to do brute force attack on that password.

13:29.640 --> 13:38.680
Then it deprecates a number of legacy algorithms, such as RSA with weak keys, DSA,

13:38.680 --> 13:44.280
Algomal, and so on. All of those things that we really shouldn't be using in 2024 have been

13:44.280 --> 13:53.800
deprecated. Then it prevents a number of key overriding attacks that we discovered in collaboration

13:53.800 --> 14:02.520
with ETH Turic a few years ago, that we worked around in our implementations, but the workaround

14:02.520 --> 14:10.600
was fairly expensive. So now they've been fixed in the spec, which is a much cheaper way to do it.

14:10.840 --> 14:18.760
So for the implementations that worked around those issues, they should provide essentially

14:19.400 --> 14:27.800
a free performance improvement. And by the way, the AAD algorithms also essentially improve the

14:27.800 --> 14:33.800
performance as well. So it's not just, the main focus was about improving the security,

14:33.880 --> 14:38.040
but improving the performance is basically an added benefit.

14:39.720 --> 14:46.920
Then finally, it's not quite finally, it also protects against future vulnerabilities in

14:48.520 --> 15:00.600
hash algorithms by sorting signatures such that if for example, SHA2 ever becomes broken in a way

15:00.600 --> 15:09.400
that SHA1 was, even though we don't expect that today, but it provides some protection against

15:09.400 --> 15:17.800
that. And then finally, it adds a padding packet, which means that if you want to hide the size of

15:17.800 --> 15:23.400
your files or the size of your message when you're sending an email or of your attachments,

15:23.960 --> 15:31.640
you can do that by adding a padding packet to hide the size of the unencrypted data.

15:33.320 --> 15:43.080
All right, then for what's next, you might think, well, what about this? So the obvious one is

15:43.080 --> 15:48.760
post quantum cryptography, which we have also been working on, but is not yet in the crypto refresh

15:48.840 --> 15:56.200
yet. But there is a separate draft for the use of post quantum cryptography in OpenPGP,

15:56.200 --> 16:04.920
so that will come relatively soon as well. And then finally, we are, again, quite finally,

16:04.920 --> 16:12.760
we also would like to start working on forward secrecy. That's not quite as far along yet,

16:13.720 --> 16:20.280
but perfect forward secrecy is obviously something that Signal, for example, has been

16:20.280 --> 16:27.960
championing and is a good security property to have in an encryption standard, although it's

16:27.960 --> 16:34.680
slightly more difficult to achieve in an email context since you're storing emails basically

16:34.680 --> 16:39.720
forever usually, but still there are some improvements that we can and would like to make.

16:40.680 --> 16:47.720
And then, as I mentioned before, we would also like to standardize key transparency for OpenPGP.

16:48.680 --> 16:56.440
So then as to the implementation status, here you can see a graph. Some of the implementations

16:56.440 --> 17:05.960
are already very far along. Some of them not quite yet. Also, notably for its absence is

17:06.120 --> 17:15.480
Gnupig. Unfortunately, it seems like Gnupig does not want to implement the crypto refresh and

17:15.480 --> 17:25.560
rather would like to stick with the previous drafts, RFC 480B, which they have rebranded Libra

17:25.560 --> 17:32.920
PGP, which is a rather shrewd marketing move, I would say, since Libra Office is better than Open

17:32.920 --> 17:38.600
Office, so clearly Libra PGP should be better than OpenPGP, right? But actually it's not the case,

17:38.600 --> 17:47.320
it's more or less a rebranded version of the old standard. And there is a lot of controversy

17:48.200 --> 17:55.320
about it at the moment, so I felt like I couldn't really get around that. So I've here included

17:56.840 --> 18:01.880
a short comparison. In the interest of time, I won't go through all of the points, but

18:03.080 --> 18:09.480
I would say the technical differences are very minor and in my personal opinion,

18:10.040 --> 18:17.960
should not have led to such a big schism in the community. And in fact, I still am somewhat

18:17.960 --> 18:27.000
hopeful that we can find some sort of resolution, particularly if you consider that RFC 480B

18:27.000 --> 18:35.720
originally was intended to become an RFC. If it had become an RFC and people had implemented that,

18:36.360 --> 18:44.120
then the crypto refresh would have been an update to that and we would have basically

18:45.080 --> 18:57.800
had to implement both anyway. And my proposed resolution is essentially that, I would argue that

18:58.760 --> 19:06.840
everyone should implement both. If you're going to implement the crypto refresh, implementing Libra

19:06.840 --> 19:13.480
PGP as well as not that much added effort, the other way around, there is a bit more effort. I

19:13.560 --> 19:20.360
haven't heard any objections from any of the other implementations to implementing crypto refresh,

19:20.360 --> 19:27.880
so I still hope that GNU-BG eventually will do so as well, although it seems unlikely at the moment.

19:27.880 --> 19:36.840
But let's see. So in conclusion, we're trying to drag OpenBGP into the 21st century. Hopefully,

19:36.840 --> 19:47.560
we've succeeded. Thank you. And my other point that I would like you to take away is it's becoming

19:47.560 --> 19:56.040
more and more possible to build modern email encryption applications using OpenBGP. It doesn't

19:56.040 --> 20:02.760
have to have the UX of 10, 20 years ago. And finally, I hope that everyone will implement

20:02.760 --> 20:06.200
and use the crypto refresh. Thanks a lot. Thank you very much.

20:11.240 --> 20:15.880
I see one straight hand immediately, so this needs to be rewarded instantly.

20:19.240 --> 20:27.720
Hi. First question that comes to my mind, especially when you compared GNU-BG to other

20:27.800 --> 20:37.400
implementations, is what about hardware support? Because in my mind, and this is why I haven't used

20:39.320 --> 20:48.120
either of these implementations, especially those JavaScript based, is that I'd like to keep

20:49.080 --> 20:58.600
these keys in my hand on a device. So what about it? Yes. So there is an open pull request for

20:58.600 --> 21:05.880
OpenBGP.js to add support for hardware based keys, although in full disclosure, it has been a bit

21:05.880 --> 21:15.560
idle in the last while. But I still hope that someone will do the work to support it also in

21:15.560 --> 21:23.720
other implementations. I'm not fully up to date on what's the status for the support in all the

21:23.720 --> 21:29.320
libraries, but certainly it would be good to add support elsewhere as well. Yes.

21:34.680 --> 21:42.440
Another question, actually. I wanted to congratulate you hard to felt for not having the

21:42.440 --> 21:49.080
suckful user interfaces that PGP used to have. This sounds hopeful. Thanks. Thank you.

21:55.320 --> 22:01.640
I'm very excited about your approach to key transparency, well, or protons, not yours personally.

22:01.640 --> 22:07.480
I think it's very good. Do you have any thoughts on the relocation transparency to make that more?

22:08.200 --> 22:17.320
Yes. So in our implementation of key transparency, we do include, for example, when the user marks a

22:17.320 --> 22:26.920
key as compromised or obsolete, it is included in key transparency. So this means that once that's

22:26.920 --> 22:33.640
included, other people shouldn't use the key anymore, right? And I would imagine that in the

22:33.640 --> 22:44.200
standardized version, you would similarly include revocations in key transparency such that

22:45.480 --> 22:49.080
when you revoke a key, you can be sure that others won't use it anymore.

22:53.000 --> 22:58.120
The way I don't, you just get a new record for the mapping, which is not the relocation.

22:59.080 --> 23:09.960
Yes. So we always support updates to the key. So the key transparency always provides a snapshot

23:09.960 --> 23:19.560
in time. So we repeatedly publish all the keys, conceptually speaking. And also when you generate

23:19.560 --> 23:27.000
a new key, the keys are updated, but also when you revoke a key. So essentially it will be the same

23:27.000 --> 23:36.440
thing. When you were going through your list of new changes in OpenGBT, you were talking a lot

23:36.440 --> 23:43.240
about these optional features. But does it make sense to have optional features when both ends

23:43.240 --> 23:49.080
kind of need to implement them in order to be able to communicate with the... Sorry, I didn't

23:49.080 --> 23:54.040
fully hear what kind of features were you saying? The optional features like the... Optional features,

23:54.040 --> 24:00.680
I see. So there is a lot of new mandatory features as well. Curve 25519 is mandatory to

24:00.680 --> 24:07.720
implement. OSEB is mandatory to implement. But to be perfectly honest, a standard doesn't have that

24:07.720 --> 24:15.240
much power over implementations just by existing. Every implementation in the end can choose what

24:15.240 --> 24:20.040
they implement, even if we write that it's mandatory in the spec. We hope that everyone will

24:20.040 --> 24:25.400
implement the mandatory parts and the optional parts as well, usually. But we can't force anyone,

24:25.400 --> 24:31.800
right? All right. Thank you again, Daniel, for that interesting talk.

