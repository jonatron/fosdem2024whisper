WEBVTT

00:00.000 --> 00:20.520
So, we're going to start.

00:20.520 --> 00:22.720
So Martin here is going to tell us some stuff about Apple.

00:22.720 --> 00:27.680
And I have to confess, I'm very anti-Apple, so I wanted to actually refuse this talk,

00:27.680 --> 00:31.760
so that everybody will, again, refuse this talk.

00:31.760 --> 00:33.320
So, Martin, take it.

00:33.320 --> 00:34.520
Thank you very much.

00:34.520 --> 00:36.320
So good morning, everyone.

00:36.320 --> 00:40.520
Thank you.

00:40.520 --> 00:41.520
So good morning, everyone.

00:41.520 --> 00:45.160
Thank you for providing me with the opportunity to speak here.

00:45.160 --> 00:49.720
My name is Martin DeVos, and today I will present to you my hobby project, which involves

00:49.720 --> 00:53.320
an open-source emulator of legacy Apple devices.

00:53.320 --> 00:57.680
And in this talk, I will explain how I managed to emulate these kinds of devices, what it

00:57.680 --> 01:02.240
takes, what the challenges are, and what the next steps are.

01:02.240 --> 01:04.160
So let me first briefly introduce myself.

01:04.160 --> 01:08.800
So I'm a postdoctoral researcher at EPFL in Switzerland.

01:08.800 --> 01:12.880
And my main research topic is not actually on emulation or reverse engineering, but it's

01:12.880 --> 01:16.840
on distributed machine learning systems, like many people are working on nowadays, like

01:16.840 --> 01:18.440
LLMs and stuff.

01:18.440 --> 01:22.560
But I'm also a very big enthusiast of reverse engineering.

01:22.560 --> 01:25.760
And I actually started doing this during my master thesis already.

01:25.760 --> 01:31.640
And during my PhD, I worked on reverse engineering some mobile applications of banking apps

01:31.640 --> 01:36.000
in the Netherlands and other countries as well.

01:36.000 --> 01:40.960
And that has resulted in, well, my first paper of my PhD.

01:40.960 --> 01:46.160
And, yeah, and two years ago, I decided to pick up this project.

01:46.160 --> 01:56.600
I was inspired by reading a blog post of someone that managed to emulate an iPhone in software.

01:56.600 --> 02:01.080
And that's how I was motivated to work on this project.

02:01.080 --> 02:02.880
And this was actually Jonathan Effek.

02:02.880 --> 02:08.800
And I think he was one of the first that managed to boot iOS, the operating system of iPhones

02:08.800 --> 02:15.160
and other Apple devices, with QMU, which is a very popular open-source emulator.

02:15.160 --> 02:18.000
And he managed to boot it to an interactive Bash shell.

02:18.000 --> 02:22.560
So he managed to boot this emulator to user land, which is quite an achievement.

02:22.560 --> 02:25.680
And I thought, well, I want to learn how that works.

02:25.680 --> 02:28.320
It involves some reverse engineering, which is a thing I really like.

02:28.320 --> 02:35.080
I like seeing how software works, trying to decipher some of the secrets in the software.

02:35.080 --> 02:40.800
And it would also contribute eventually to long-term hardware preservation, because

02:40.800 --> 02:43.360
when people would run it, it has some feeling of nostalgia.

02:43.360 --> 02:51.960
And, well, I mean, I had my first Apple device, was an Apple Touch, and I decided to, well, work on that.

02:51.960 --> 02:54.080
So after reading the blog post, I was a bit puzzled.

02:54.080 --> 02:56.040
And I was like, OK, where do I start?

02:56.040 --> 03:00.800
How can I set up my own project to work on this kind of stuff?

03:00.800 --> 03:04.720
And, you know, Apple has released many different devices over time.

03:04.720 --> 03:10.720
And the first question I had to answer is, which device am I going to emulate?

03:10.720 --> 03:16.120
And if you think about contemporary devices, they are incredibly hard to emulate,

03:16.120 --> 03:22.160
at least emulating all the aspects of these devices is a very, very challenging and difficult task.

03:22.160 --> 03:23.560
They contain neural engines.

03:23.560 --> 03:29.320
They have phase ID touch IDs, which also has interactions with secure enclaves,

03:29.320 --> 03:33.680
but also software-based security measures like trust caches,

03:33.680 --> 03:43.840
which is a mechanism that's by Apple that only allows particular applications to have privileges.

03:43.840 --> 03:50.480
So I was thinking, if I go back in time and I take one of the first devices by Apple,

03:50.480 --> 03:57.920
at least in the Apple Touch family, that should be somewhat, well, easy to emulate.

03:57.920 --> 04:02.640
It is a device that was released in 2007, and it doesn't contain, well,

04:02.640 --> 04:06.880
the complicated hardware peripherals that I just mentioned.

04:06.880 --> 04:09.920
And, yeah, hopefully that will be simple enough to emulate,

04:09.920 --> 04:14.920
well, which were some famous last words, because even these devices are very, very complicated,

04:14.920 --> 04:19.760
as I will outline a bit later in this talk as well.

04:19.760 --> 04:23.760
So I'm definitely not the first one to work on this kind of emulation.

04:23.760 --> 04:25.640
So there are some related projects.

04:25.680 --> 04:35.240
One of the, I think the earliest attempt actually on emulating the SOC of an iPhone was by a CMW.me,

04:35.240 --> 04:42.560
who actually is the founder of Corellium, which you might know as a company that provides

04:42.560 --> 04:47.920
virtualization services, both of iPhone and Android applications.

04:47.920 --> 04:54.480
Yeah, we had the blog post that I just mentioned, which enforced the emulation of an iPhone 6S Plus.

04:54.480 --> 05:01.560
And that work was picked up by someone else and eventually involved in an iPhone 11 emulator.

05:01.560 --> 05:07.600
And there's also OpenEyeBoots, which is an open source bootloader for early generation Apple devices.

05:07.600 --> 05:14.080
And all of these projects have been extremely helpful in understanding and connecting all the different pieces together,

05:14.080 --> 05:19.800
because without them I wouldn't have been able to get this far.

05:19.800 --> 05:22.360
So then I had to pick a framework for emulation.

05:22.360 --> 05:28.120
And QMU is one of the most popular open source frameworks for this kind of emulation.

05:28.120 --> 05:32.080
It provides support for hardware emulation.

05:32.080 --> 05:34.800
You can define your peripherals, your hardware components.

05:34.800 --> 05:37.920
You can implement their expected behavior.

05:37.920 --> 05:42.400
And it already comes pre-shipped with support for many different protocols,

05:42.400 --> 05:49.160
like the USB protocol, network interfaces, SPI, SQC, SDAO, etc.

05:49.200 --> 05:55.080
So that was all very nice, but unfortunately it has a very, very steep learning curve.

05:55.080 --> 06:00.520
So it's quite difficult to wrap your head around particular parts of the project.

06:00.520 --> 06:11.720
So most of the time I had to rely on existing emulations provided by QMU to see how that works.

06:11.720 --> 06:17.280
And when doing emulation, you also need a way, or you would like to have a way of debugging your software,

06:17.280 --> 06:23.720
because you want to see which code path execution is being followed,

06:23.720 --> 06:28.160
what the register values are, and what's generally happening in the system.

06:28.160 --> 06:33.240
So the nice thing about QMU is that it automatically provides a GDB stop, a GDB server,

06:33.240 --> 06:38.680
that I can directly connect to, and then I can step through the code,

06:38.680 --> 06:43.880
I can jump to functions, and I can inspect all the register values.

06:43.880 --> 06:48.640
And for the reverse engineering part, I've been using Gidra, if I pronounce that correctly.

06:48.640 --> 06:54.840
It is a very popular open source tool for reverse engineering and decomposition,

06:54.840 --> 07:02.200
and this assembly of binaries, and this has been also tremendously helpful.

07:02.200 --> 07:11.000
So here on the right you can see, for example, some code related to the start procedure of the SPI controller,

07:11.000 --> 07:14.360
which controls the SPI interface.

07:14.360 --> 07:17.640
And if you look at it, it's actually pretty readable.

07:17.640 --> 07:24.840
You can do a lot with this stuff, but also the way Apple has engineered our software is very predictable.

07:24.840 --> 07:29.640
So they're using the IOCAD framework, which is very similar in structure.

07:29.640 --> 07:31.520
I mean, most of the peripherals look like this.

07:31.520 --> 07:38.920
You initialize some memory, you set some variables, and that's mostly it.

07:38.960 --> 07:42.920
So now let's talk a bit more about the emulation itself.

07:42.920 --> 07:48.600
So my philosophy when it comes to emulation is that I wanted to stay very close to the actual hardware,

07:48.600 --> 07:53.600
to what's actually happening on the hardware, no matter how difficult that might be.

07:53.600 --> 07:59.280
What I noticed is that many existing emulators, they cut corners, which is not unsurprising, right?

07:59.280 --> 08:03.800
Because for example, if you run into some kind of signature check,

08:03.800 --> 08:11.280
it might take a lot of time to get everything working and to get the right functionality

08:11.280 --> 08:13.080
and to make sure that pass steps.

08:13.080 --> 08:19.440
So one way is, for example, to just patch out that particular procedure or function call.

08:19.440 --> 08:21.520
Why do I want to do this?

08:21.520 --> 08:26.800
Because I had a feeling that any hack, any workaround I would do in the very early stages

08:26.800 --> 08:30.560
of working on this emulator would bite me back later.

08:30.560 --> 08:34.240
So I'd rather do it right very early in the bootpress process,

08:34.240 --> 08:41.360
where things might not be as involved as when dealing with a more high level of a user land or application.

08:41.360 --> 08:46.240
So I tried to, well, get it right the first try.

08:46.240 --> 08:51.200
Well, but as expected, it still ended up with a bunch of hacks, patches, works around,

08:51.200 --> 08:58.240
and patched out binaries, because for some things I really, really couldn't wrap my head around,

08:58.240 --> 09:02.960
at least not within a reasonable amount of time.

09:02.960 --> 09:07.320
So another philosophy that I had, I started with following the bootshank.

09:07.320 --> 09:12.360
So I started with the lowest level components in here, which is the Securon Bootrom.

09:12.360 --> 09:16.360
This is the very first piece of code that runs on an Apple device.

09:16.360 --> 09:21.960
It is actually fused into the chip of any device.

09:21.960 --> 09:26.760
If you find vulnerability in there, it's very nice, because you cannot patch that out.

09:26.800 --> 09:31.480
That's actually something that happened a few years ago.

09:31.480 --> 09:36.840
The Securon loots another called low level bootloader, LLB.

09:36.840 --> 09:40.040
That in turn loads the main bootloader, iBoot.

09:40.040 --> 09:45.360
Then that's iBoot, the component loads the X and U kernel.

09:45.360 --> 09:48.680
When the kernel has launched, it will start the launch D process,

09:48.680 --> 09:52.360
which is the very first process that runs on the system.

09:52.440 --> 09:59.000
That's launched Springboard, which is responsible for drawing the iconic user interface

09:59.000 --> 10:01.240
with the app icons and the hope screen.

10:01.240 --> 10:04.840
Springboard in turn starts all the different apps,

10:04.840 --> 10:10.760
like the Alarms, Safari, and other applications that you are familiar with.

10:10.760 --> 10:13.320
So I started working on the Bootrom first.

10:13.320 --> 10:20.720
As a very first step, I had to get the Bootrom, which is fortunately provided online.

10:20.720 --> 10:22.040
So that's very nice.

10:22.120 --> 10:23.320
It was dumped.

10:23.320 --> 10:28.280
The main responsibility of the Bootloader is not only to load the other bootloader,

10:28.280 --> 10:31.400
the low level bootloader, but also to initialize some key peripherals,

10:31.400 --> 10:34.400
like a clock, the timer, and the USB stack.

10:34.400 --> 10:37.840
Because even if everything else on the device fails,

10:37.840 --> 10:45.240
the Bootrom allows you to restore the device using some USB protocol.

10:45.240 --> 10:49.920
So if something goes wrong, you can use DFU, DFU mode to restore,

10:49.920 --> 10:52.840
to refresh your device.

10:54.080 --> 10:56.240
Now, I had some instructions running there,

10:56.240 --> 11:02.080
but I very quickly found out that when emulating this binary, this Bootrom,

11:02.080 --> 11:04.760
that it jumps to some unknown memory locations.

11:04.760 --> 11:10.440
And that was a bit problematic, because I didn't really know where it jumped to.

11:10.440 --> 11:13.880
And I looked a bit on the internet and I asked around.

11:13.880 --> 11:18.720
And it looks like this first generation iPhone

11:18.720 --> 11:21.280
is using some proprietary logic by Samsung.

11:21.280 --> 11:29.680
So very early generations of Apple devices were made in collaboration with Samsung.

11:29.680 --> 11:33.080
So the Bootrom was also made by Samsung.

11:33.080 --> 11:36.040
And I didn't really have any idea of what happens,

11:36.040 --> 11:38.880
because the Bootrom is very obfuscated and very small,

11:38.880 --> 11:42.800
and there are almost no strings and no contacts to work with.

11:42.800 --> 11:46.920
And I also didn't have any physical iPhone,

11:47.040 --> 11:48.640
Apple Touch device at that time.

11:48.640 --> 11:54.680
So I couldn't really figure out or dump that part of memory.

11:54.680 --> 11:57.640
And the same actually goes for the low-level Bootloader.

11:57.640 --> 11:59.920
I was running into the same problem there.

11:59.920 --> 12:02.200
It jumped to some unknown memory locations,

12:02.200 --> 12:08.880
so I decided to skip these two parts and go straight to iBoot.

12:10.760 --> 12:14.880
Yes, and this is how I load iBoot in code.

12:14.920 --> 12:17.080
So iBoot is the main Bootloader.

12:17.080 --> 12:21.560
It is responsible for loading the kernel from basically the hard disk.

12:21.560 --> 12:26.520
I was very fortunate that the source code of iBoot got leaked in 2018.

12:26.520 --> 12:29.840
So that actually was a newer version of iBoot,

12:29.840 --> 12:34.000
but at least it gave me some idea of how this all works.

12:34.000 --> 12:37.680
So I really tried hard to map all different components

12:37.680 --> 12:43.280
in the leaked source code with what I see in Gidra in the binaries.

12:43.280 --> 12:48.680
And I managed to boot iBoot and get all the peripherals up and running

12:48.680 --> 12:50.280
that iBoot expects.

12:51.600 --> 12:55.600
One thing about that is that there is this device tree,

12:55.600 --> 12:58.320
which you might also be familiar with if you work with Linux,

12:58.320 --> 12:59.440
some low-level Linux.

12:59.440 --> 13:04.120
It is basically a big dictionary of all the peripherals and their properties.

13:04.120 --> 13:07.040
It is included in the IPSW file,

13:07.040 --> 13:09.720
which is like the firmware file that you can download from Apple,

13:09.720 --> 13:12.520
and that is being installed.

13:12.520 --> 13:13.920
It is populated by iBoot.

13:13.920 --> 13:18.480
So iBoot, for example, gets the MAC address of the Wi-Fi driver

13:18.480 --> 13:22.720
and then it injects this number in the device tree.

13:22.720 --> 13:26.400
So here on the right, you can see a part of the device tree

13:26.400 --> 13:31.480
containing some information about the crypto AES engine.

13:31.480 --> 13:35.880
So it contains some identifiers and some other things.

13:35.880 --> 13:36.880
That was also dumped.

13:36.880 --> 13:40.800
So I also used that as reference to get an idea

13:40.800 --> 13:45.800
about which peripherals there are to emulate.

13:45.800 --> 13:48.680
And I can tell you that these devices are extremely complicated.

13:48.680 --> 13:52.640
So this is a diagram that I made of all the components

13:52.640 --> 13:54.720
that I managed to get up and running.

13:54.720 --> 13:56.240
Not all of them are fully functional,

13:56.240 --> 14:00.840
but most of them at least have some functionality.

14:00.840 --> 14:02.680
And this is for the Apple Touch 2G,

14:02.680 --> 14:04.200
which is slightly more complicated

14:04.200 --> 14:09.400
than the first-generation Apple Touch.

14:09.400 --> 14:11.520
So these peripherals, most of the peripherals,

14:11.520 --> 14:15.440
you can talk to them through something called memory map I.O.

14:15.440 --> 14:18.120
So in the memory map, there is a small part

14:18.120 --> 14:21.920
that is allocated to a particular peripheral.

14:21.920 --> 14:24.480
So here on the right, you can see the addresses

14:24.480 --> 14:27.200
of all these peripherals,

14:27.200 --> 14:30.000
which I also mostly got from the device tree.

14:30.000 --> 14:32.880
And you can write to these memory locations

14:32.880 --> 14:36.200
to talk to your hardware devices.

14:36.200 --> 14:38.000
And then the main challenge becomes, of course,

14:38.000 --> 14:41.200
like to talk with these hardware devices.

14:41.200 --> 14:43.200
And you have to do that in such a way

14:43.200 --> 14:45.080
that you get the expected responses

14:45.080 --> 14:49.880
and that the kernel and the other parts of the boot stage

14:49.880 --> 14:53.480
are happy with what these peripherals are saying.

14:53.480 --> 14:58.320
So this is an example how you can initialize

14:58.320 --> 15:00.440
the hardware components in QMU.

15:00.440 --> 15:05.440
You define some methods, some initialization methods,

15:06.720 --> 15:10.520
and then you include them in some main file.

15:10.520 --> 15:12.560
I won't spend too much time on this now.

15:13.800 --> 15:17.160
This is how you implement the functionality

15:17.160 --> 15:18.720
of each hardware component.

15:18.720 --> 15:21.960
You create a read method and a write method.

15:21.960 --> 15:24.680
The read method is called when something,

15:24.680 --> 15:29.280
a hardware address associated with the peripheral is read

15:29.280 --> 15:31.240
and the write function is called

15:31.240 --> 15:33.200
when you write to a register.

15:33.200 --> 15:36.000
And you can see, for example, in the read method

15:36.000 --> 15:37.480
that you have a switch,

15:37.480 --> 15:41.080
so you look at which address am I reading something from

15:41.080 --> 15:43.920
and then you return the write response.

15:43.920 --> 15:46.440
And sometimes that can be very arbitrary.

15:46.440 --> 15:49.120
I mean, I haven't deciphered all the meanings

15:49.120 --> 15:52.400
of all registers and what they expect,

15:52.400 --> 15:55.200
but you can at least do a best effort attempt

15:55.200 --> 15:57.960
in returning the values that makes the kernel happy.

15:59.160 --> 16:01.360
And this can become complicated very quickly.

16:01.360 --> 16:03.800
So here you can see a part of the SPI controller,

16:03.800 --> 16:06.360
which was a particularly difficult component

16:06.360 --> 16:11.360
because Apple has some, well, weird things sometimes.

16:12.040 --> 16:14.600
They make some modifications to their hardware,

16:14.600 --> 16:17.600
which not always follow well-established

16:18.720 --> 16:20.440
hardware protocols to say.

16:21.440 --> 16:24.120
And finally, you attach the peripheral

16:24.120 --> 16:26.280
to the overall machine in QMU.

16:26.280 --> 16:29.560
And you, so, and you optionally, you can connect the IRQ

16:29.560 --> 16:31.160
like the interrupt request.

16:31.160 --> 16:33.640
So interrupts are also functional there.

16:33.640 --> 16:36.120
Again, I won't spend too much time on this now.

16:37.160 --> 16:40.120
So after iBoot was running, I had to load the kernel

16:40.120 --> 16:43.520
and the kernel uses iOkit

16:43.520 --> 16:46.960
and it starts all the device,

16:46.960 --> 16:49.720
all the device drivers that are declared in the device tree.

16:50.080 --> 16:53.080
So whereas the low-level bootloader in iBoot

16:53.080 --> 16:56.560
would only load the most important peripherals,

16:56.560 --> 16:58.360
this would start all the peripherals.

16:58.360 --> 17:01.960
And here on the right, you can see some of the peripherals

17:01.960 --> 17:04.680
that I reverse engineered with the Ghidra.

17:04.680 --> 17:07.840
You can see LCD display, the power management unit,

17:08.680 --> 17:11.160
some other functionality that I didn't even know

17:11.160 --> 17:14.720
that were part of the Apple Touch itself.

17:16.520 --> 17:19.160
And this mostly follows a very similar protocol.

17:19.160 --> 17:21.600
When you start a peripheral, you usually execute

17:21.600 --> 17:23.720
some reset procedure or you do like an inter,

17:23.720 --> 17:25.680
you wait for interrupt or something

17:25.680 --> 17:27.960
to indicate that the device is ready.

17:27.960 --> 17:29.840
And after all these devices are loaded,

17:29.840 --> 17:31.720
then you start launch D.

17:33.120 --> 17:35.120
And this is the part where I spend most time on

17:35.120 --> 17:37.680
because I had to like get past all these peripherals.

17:37.680 --> 17:39.280
I had to understand how they work.

17:39.280 --> 17:41.560
And the further you get into the bootchain,

17:41.560 --> 17:42.960
the more complicated things become

17:42.960 --> 17:45.040
because then you are really building on,

17:46.120 --> 17:48.640
on the correct functionality of say the clock

17:48.640 --> 17:51.680
and the timer and interrupt requests, et cetera.

17:51.680 --> 17:54.200
So roughly 20 peripherals later,

17:54.200 --> 17:55.800
I got most of the things functional,

17:55.800 --> 17:58.040
like the clock, timer, the interrupt controllers,

17:58.040 --> 17:59.640
they're all fully functional.

17:59.640 --> 18:02.200
I'm pretty sure there are a few bugs left,

18:02.200 --> 18:04.360
but nothing too major.

18:04.360 --> 18:06.640
And only partial support for some of the more

18:06.640 --> 18:09.520
involved peripherals, just enough to make it

18:09.520 --> 18:10.720
past initialization.

18:10.720 --> 18:13.520
And then we're talking about peripherals like TV out,

18:13.520 --> 18:16.040
which happens that if you connect your Apple Touch

18:16.040 --> 18:19.720
to a TV, the GPU, also the accelerometer,

18:19.720 --> 18:22.000
the light sensors, they're not really important

18:22.000 --> 18:22.920
at this point.

18:24.160 --> 18:27.400
I was very fortunate that I could avoid GPU rendering,

18:27.400 --> 18:29.440
hardware GPU rendering with a flag.

18:29.440 --> 18:31.480
So the GPU rendering in this emulator

18:31.480 --> 18:34.080
happens fully in software, which is slower,

18:34.080 --> 18:38.320
but still it's reasonable enough to use the

18:38.320 --> 18:39.520
Apple Touch itself.

18:40.440 --> 18:41.560
So there's a lot of work to do,

18:41.560 --> 18:44.920
but at least at this point I managed to boot to userlens.

18:46.800 --> 18:51.800
To give you one more interesting challenge,

18:53.400 --> 18:54.840
was the persistence layer.

18:54.840 --> 18:58.240
So the Apple Touch contains two types of memory,

18:58.240 --> 19:01.080
some more memory that contains small binaries.

19:01.080 --> 19:03.120
I think it's at most a few megabytes.

19:03.120 --> 19:04.760
And you also have the NAND memory, which is like

19:04.760 --> 19:07.760
eight gigabytes, and you can store all your applications

19:07.760 --> 19:10.400
and the operating system in there.

19:11.320 --> 19:13.400
There are some key difference between the layout

19:13.400 --> 19:15.400
of these, of NAND and NAND.

19:15.400 --> 19:19.360
So I had to spend a lot of time on when I emulated

19:19.360 --> 19:22.760
the Apple Touch 2G to make sure that also works.

19:24.000 --> 19:29.000
The main problem here is that once the kernel

19:30.560 --> 19:34.200
gets some kind of block, let's say block five,

19:34.200 --> 19:36.680
it uses logical block addressing.

19:36.680 --> 19:41.600
And that doesn't match with what's how the NAND layout

19:41.600 --> 19:42.440
underneath works.

19:42.440 --> 19:44.960
So I had to really figure out

19:44.960 --> 19:49.400
how something is mapped from a logical block level

19:49.400 --> 19:50.840
to the physical block level.

19:52.040 --> 19:54.560
And that took a lot of time.

19:54.560 --> 19:57.840
I ended up with some scripts in a separate repository

19:57.840 --> 20:00.840
that takes a dmg file and that converts it

20:00.840 --> 20:03.880
to like a raw file system, a file system as it is

20:03.880 --> 20:05.700
like really in the hardware.

20:07.000 --> 20:10.040
This is the diagram for that to give you some more context.

20:10.040 --> 20:11.200
This is for the NAND.

20:11.200 --> 20:14.600
So we have the file system which is implemented in the kernel

20:14.600 --> 20:17.200
and that's if it wants to get something

20:17.200 --> 20:20.960
from the operating system, it uses a logical block address

20:20.960 --> 20:23.240
that goes through two different layers,

20:23.240 --> 20:26.440
the flash translation layer and the virtual flash layer,

20:26.440 --> 20:29.320
again with their own numbering and addressing and mappings.

20:29.320 --> 20:33.120
And that results eventually in some physical page number

20:33.120 --> 20:37.160
and a CE which is basically like a bank,

20:37.160 --> 20:39.080
a number between one and eight.

20:40.080 --> 20:44.840
I think in the interest of time I'm going to skip this

20:44.840 --> 20:47.120
but I just want to say that multi-touch,

20:47.120 --> 20:49.680
even though it looks very simple,

20:49.680 --> 20:51.880
how hard can it be to convert a touch on a screen

20:51.880 --> 20:55.560
from to an X and Y coordinate was very, very complicated

20:55.560 --> 20:59.520
to get right and for this I actually,

21:01.520 --> 21:03.240
for this I actually needed a real device.

21:03.240 --> 21:06.020
So most of the things I could do without having

21:06.020 --> 21:09.000
an actual device but for this I needed a real device

21:09.000 --> 21:11.720
because I had to play with touches

21:11.720 --> 21:16.720
and see how the encoding of the touch works.

21:17.360 --> 21:19.880
So here on the right you can see,

21:19.880 --> 21:22.120
well me playing around so you do press a button

21:22.120 --> 21:26.000
and then I recorded what the multi-touch driver

21:26.000 --> 21:27.640
gives back to me.

21:29.240 --> 21:31.720
So all in all I managed, when doing all of this,

21:31.720 --> 21:34.960
I managed to boot to the, I will touch one G

21:34.960 --> 21:36.760
to the home screen.

21:36.760 --> 21:38.880
Well you can see it's a pretty basic home screen,

21:38.880 --> 21:40.280
not many applications.

21:40.280 --> 21:44.120
I think I got this running about one and a half year ago

21:44.120 --> 21:47.120
and a few months ago I managed to get the Apple Touch 2G

21:47.120 --> 21:50.920
working as well running iOS 2.1.1

21:50.920 --> 21:54.880
and the Apple Touch 1G is running iPhone OS 1.0.

21:56.360 --> 21:58.200
And that mostly concludes my presentation.

21:58.200 --> 21:59.560
I open sourced all the code,

21:59.560 --> 22:02.240
I created this GitHub project out of it

22:02.240 --> 22:04.880
which is a fork of the QEMU project.

22:04.880 --> 22:06.720
I'm not sure if I want to upstream it

22:06.720 --> 22:08.800
because it has a lot of ugly code

22:08.800 --> 22:12.640
and a lot of well, work arounds.

22:12.640 --> 22:14.240
But contributions are very welcome.

22:14.240 --> 22:17.520
It currently has support for the Apple Touch 1G and 2G

22:18.680 --> 22:20.240
and I'm currently focusing on getting

22:20.240 --> 22:23.120
the Apple Touch 2G stable so I can get an app store

22:23.120 --> 22:26.680
and third party applications up and running.

22:26.680 --> 22:28.040
So that's all, thank you.

22:28.040 --> 22:30.360
And if you want to know more, I have some blog posts

22:30.360 --> 22:33.240
with more technical details on my personal website.

22:34.120 --> 22:37.360
APPLAUSE

22:41.480 --> 22:43.000
Right, hello.

22:43.000 --> 22:45.480
Yeah, so we have some sign for questions.

22:45.480 --> 22:47.520
I hope the people ask questions are here in the front

22:47.520 --> 22:49.160
because I don't want to run to the back.

22:49.160 --> 22:50.360
But I'm going to start with a question

22:50.360 --> 22:52.520
because you mentioned Corellium, which is awesome by the way,

22:52.520 --> 22:54.520
they are very expensive but they are awesome,

22:54.520 --> 22:57.800
but Apple suites them into oblivion and they are lost,

22:57.800 --> 22:59.520
which I'm very proud of.

22:59.520 --> 23:01.680
It has nothing to do with it.

23:01.680 --> 23:06.480
But so the question is, has Apple made any friendly inquiries?

23:06.480 --> 23:07.240
No, no, no.

23:07.240 --> 23:09.800
I think this project is still too insignificant for Apple

23:09.800 --> 23:10.880
to care about.

23:10.880 --> 23:13.200
I also know about the Rockbox, for example, which

23:13.200 --> 23:16.240
does Ipod generation emulation.

23:16.240 --> 23:16.640
I'm not sure.

23:16.640 --> 23:17.720
I don't think they've been sued.

23:17.720 --> 23:20.400
But I'm not that worried about it right now.

23:20.400 --> 23:22.760
OK, excellent.

23:22.760 --> 23:23.240
Questions?

23:27.240 --> 23:30.760
Sorry, come to the side.

23:30.800 --> 23:35.360
Hi, thank you very much for your speaking.

23:35.360 --> 23:36.880
Only one simple question.

23:36.880 --> 23:42.840
Because why you choose the iPod Touch and the iPhone

23:42.840 --> 23:47.200
platform, it's only a simpler problem,

23:47.200 --> 23:51.680
or because there are patents or other problems in that way.

23:51.680 --> 23:52.680
Thank you very much.

23:52.680 --> 23:53.320
Yes, thank you.

23:53.320 --> 23:55.240
So the question is, why did I choose for the iPhone

23:55.240 --> 23:58.040
and not for the iPod Touch and not for the iPhone?

23:58.040 --> 24:00.360
Well, I mean, when I started this project,

24:00.360 --> 24:02.400
I was not familiar with the architecture of both.

24:02.400 --> 24:05.160
But I was thinking, well, the iPod Touch contains at least

24:05.160 --> 24:09.080
one less peripheral, namely the baseband, the modem baseband.

24:09.080 --> 24:10.560
And I was not sure how critical that

24:10.560 --> 24:12.960
would be for the entire booting procedure.

24:12.960 --> 24:15.600
So that was, I think, my main motivation.

24:15.600 --> 24:18.360
But most of this stuff can also be applied to the iPhone.

24:18.360 --> 24:24.000
I think with some changes, you can get the iPhone 2G working.

24:24.000 --> 24:27.760
Because the iPhone 2G is architecturally similar

24:27.760 --> 24:29.120
to the iPod Touch 1G.

24:30.360 --> 24:30.860
Yeah.

24:36.560 --> 24:37.640
Hi, great talk.

24:37.640 --> 24:39.720
What are your future plans for this project?

24:39.720 --> 24:42.880
Do you want to support newer devices

24:42.880 --> 24:48.200
or expand like the computer in a more modern iOS version?

24:48.200 --> 24:49.520
Yeah, thank you for your question.

24:49.520 --> 24:51.160
So what are my future plans?

24:51.160 --> 24:54.000
I am currently working on getting the USB up and running.

24:54.000 --> 24:55.800
There is an independent researcher

24:55.800 --> 24:58.760
that also managed to get a syscalls between the guest

24:58.760 --> 24:59.560
and the host running.

24:59.560 --> 25:00.840
So that's pretty cool.

25:00.840 --> 25:02.760
So we can do some syscalls.

25:02.760 --> 25:04.880
So I'm currently working on USB.

25:04.880 --> 25:07.440
Whether I want to work on newer generations,

25:07.440 --> 25:08.480
I'm not so sure.

25:08.480 --> 25:10.600
I think it will be possible to emulate them.

25:10.600 --> 25:15.280
But I think having one stable and, well,

25:15.280 --> 25:18.240
actively used emulator is better than having

25:18.240 --> 25:22.640
10 fragmented, half supported emulators.

25:22.640 --> 25:24.560
Because there are like many Apple devices out there.

25:24.560 --> 25:26.120
So yeah.

25:26.120 --> 25:26.620
OK.

25:29.560 --> 25:30.060
OK.

25:40.080 --> 25:42.000
Hi, thank you for this great talk.

25:42.000 --> 25:43.440
I was wondering, you were talking

25:43.440 --> 25:48.200
about getting the app store up and running.

25:48.200 --> 25:51.320
Have you considered getting in touch with Jay Freeman,

25:51.320 --> 25:52.720
the author of Cydia?

25:52.720 --> 25:55.880
Cydia, no, I haven't considered getting in touch with him.

25:55.880 --> 25:57.840
I know some people are asking me about,

25:57.840 --> 26:00.440
can we jailbreak and then install Cydia?

26:00.440 --> 26:01.720
I think we probably can.

26:01.720 --> 26:04.720
But there's almost no tooling around this emulator

26:04.720 --> 26:05.360
at the moment.

26:05.360 --> 26:08.120
So getting these jailbreaks up and running

26:08.120 --> 26:11.320
is kind of difficult right now.

26:11.320 --> 26:13.160
But I think it's a good suggestion.

26:13.160 --> 26:14.600
I think at one point I should.

26:14.600 --> 26:15.600
Yes.

26:15.600 --> 26:17.600
Thank you.

26:17.600 --> 26:19.600
Yes.

26:19.600 --> 26:20.760
Anybody at the front, hopefully?

26:28.240 --> 26:29.240
Thank you.

26:29.240 --> 26:30.240
Hi.

26:30.240 --> 26:32.600
And thank you for your talk.

26:32.600 --> 26:38.680
I don't remember in 2007 with this type of device,

26:38.680 --> 26:43.720
required activation behind us or not?

26:43.720 --> 26:46.040
I think they indeed require activation.

26:46.040 --> 26:47.440
Oh, actually, that's a good point.

26:47.440 --> 26:51.040
I used activation tokens from an actual device.

26:51.040 --> 26:53.720
Because I also had to match the serial number, et cetera.

26:53.720 --> 26:55.720
So I matched the serial number.

26:56.600 --> 27:00.600
I used activation tokens from an actual device.

27:00.600 --> 27:02.000
And then it worked.

27:02.000 --> 27:07.000
But I could have well patched out all the look down the demon.

27:07.000 --> 27:10.680
It's the look down the is a demon responsible for this checking

27:10.680 --> 27:12.600
if everything is activated, et cetera.

27:12.600 --> 27:14.000
I could have well patched that out.

27:14.000 --> 27:14.360
OK.

27:14.360 --> 27:15.360
Thank you.

27:23.400 --> 27:25.000
Great talk.

27:25.080 --> 27:28.520
Have you got the opportunity to play with JTAG debugging

27:28.520 --> 27:31.640
to cross check if your emulator works well,

27:31.640 --> 27:35.320
like a real device?

27:35.320 --> 27:36.400
What are you referring to?

27:36.400 --> 27:39.160
Like how can you do this check?

27:39.160 --> 27:43.880
I would say you try to execute some peripheral access,

27:43.880 --> 27:46.600
both on the real device and in your emulator.

27:46.600 --> 27:49.520
And you cross check the read results.

27:49.520 --> 27:50.920
The spell is a good point.

27:50.920 --> 27:53.400
I think you could do it with open iBooks.

27:53.400 --> 27:56.800
So I managed to install open iBooks on the actual device.

27:56.800 --> 27:58.520
There you can play around with the peripherals.

27:58.520 --> 28:01.560
So I think you can have some kind of trace where you just

28:01.560 --> 28:03.720
fire requests to the hardware.

28:03.720 --> 28:05.400
And you get some responses.

28:05.400 --> 28:08.800
And you can cross check that indeed with what I get.

28:08.800 --> 28:10.440
No, I haven't done that yet.

28:10.440 --> 28:12.000
But I think that's an excellent idea

28:12.000 --> 28:15.360
to make sure that your emulator is mostly

28:15.360 --> 28:21.080
compatible or the same as your real device.

28:21.080 --> 28:22.280
So I had a small question, actually,

28:22.320 --> 28:25.160
because at the beginning you mentioned you're a postdoc.

28:25.160 --> 28:31.920
So how much time do you spend on this?

28:31.920 --> 28:33.400
It's very difficult to say.

28:33.400 --> 28:37.000
Because sometimes I have a week and I spend every evening on it.

28:37.000 --> 28:39.680
Sometimes I don't spend any time on it for three weeks.

28:39.680 --> 28:44.360
I mean, it also depends on my main schedule for my work.

28:44.360 --> 28:49.040
I mean, depends on paper deadlines as postdocs, obviously.

28:49.080 --> 28:51.920
Yeah, I think when you get closer to getting something up

28:51.920 --> 28:53.880
and running, you tend to be more motivated.

28:53.880 --> 28:56.960
And then I spend more time on it than when you're completely

28:56.960 --> 28:57.440
stuck.

28:57.440 --> 29:00.280
And yeah.

29:00.280 --> 29:03.160
OK, does anybody have a question?

29:03.160 --> 29:04.800
I can keep going on.

29:04.800 --> 29:08.000
So another small question is, because one of the previous

29:08.000 --> 29:10.760
talks, they mentioned motivation.

29:10.760 --> 29:13.040
How do you get motivation to start something like this?

29:13.040 --> 29:14.400
And where do you start?

29:14.400 --> 29:16.560
So can you tell us something about that?

29:16.560 --> 29:18.760
Yeah, I think for this, well, you mean,

29:18.800 --> 29:20.640
first of all, you need some curiosity.

29:20.640 --> 29:22.440
You want to know how things work.

29:22.440 --> 29:23.840
And you really want to, yeah, you

29:23.840 --> 29:27.080
have to be able to dig deep into some components.

29:27.080 --> 29:28.960
And you know, there are many components.

29:28.960 --> 29:31.040
So you will inevitably run into something

29:31.040 --> 29:32.760
that you don't know anything about.

29:32.760 --> 29:35.400
So I learned a lot about all the different components

29:35.400 --> 29:36.440
that are in there.

29:36.440 --> 29:40.000
But another very important thing, I think, is persistence.

29:40.000 --> 29:42.000
Because at many times, for example,

29:42.000 --> 29:45.320
when working on the multi-tarch or the nonce,

29:45.320 --> 29:48.200
I was like, yeah, I really don't know how this works.

29:48.200 --> 29:50.080
And then you solve a small part.

29:50.080 --> 29:52.480
And then it turns out there's yet another layer

29:52.480 --> 29:54.720
of indirection going on.

29:54.720 --> 29:56.480
And you have to figure that out again.

29:56.480 --> 29:58.960
And then it turns out that something you did earlier

29:58.960 --> 30:00.600
was you made the wrong assumption,

30:00.600 --> 30:04.760
which breaks all other components further in the pipeline.

