WEBVTT

00:00.000 --> 00:09.520
So now we are really getting a little bit after we dove a little bit in the old specs

00:09.520 --> 00:14.400
and standards and you know like details of IMAP, we are now going to hear a lot about

00:14.400 --> 00:18.240
Jmap, sorry, yeah, sorry.

00:18.240 --> 00:23.840
We'll be talking about Jmap which is a new set of standards that has been engineered in

00:23.840 --> 00:28.280
the last couple of years by some very engaged people that also in parallel have been contributing

00:28.280 --> 00:34.200
a lot to IMAP and still do and we are very happy that we have one of these persons here

00:34.200 --> 00:42.040
or representative from Fastmail which has been a company very instrumental and putting

00:42.040 --> 00:46.880
a lot of effort in this new set of standards and yeah Rick your stage is yours, we have

00:46.880 --> 00:48.600
learned about Jmap.

00:48.600 --> 00:56.560
All right, applaud fast because I got a lot of slides and I got a little bit of time.

00:56.560 --> 01:00.680
So we are going to talk about Jmap, funny story, I was pitched this talk where I was

01:00.680 --> 01:04.600
going to talk about Jmap and I'm like what is it, how does it work, why is it so great,

01:04.600 --> 01:08.640
how can you use it, how does Fastmail use it, all this stuff I covered everything, it was

01:08.640 --> 01:13.920
a really good talk, it was like an hour long and I looked at my email that I was coming

01:13.920 --> 01:17.200
here and it said you get 15 minutes.

01:17.200 --> 01:24.560
So and it had to be in PDF so this is just like the absolute minimum dot PDF of my slides

01:24.800 --> 01:29.400
and if you want to hear the whole thing and see all the builds and all the animations

01:29.400 --> 01:35.280
and everything about IMAP and Jmap that can be arranged very easily, talk to me later.

01:35.280 --> 01:37.880
That's me, I work at Fastmail, I'm not going to talk about myself, we don't have a lot

01:37.880 --> 01:38.880
of time.

01:38.880 --> 01:41.040
Let's talk about IMAP, sorry.

01:41.040 --> 01:47.400
Who is here for the IMAP, what I wanted to know before I wrote IMAP library earlier.

01:47.400 --> 01:51.880
You, okay well you missed a lot of horror stories but I'm going to give you some now,

01:51.920 --> 01:55.920
this is IMAP and I'm going to be real brief about it.

01:55.920 --> 02:00.400
What you're seeing here is the server in white, the client in yellow, we log in, we

02:00.400 --> 02:04.120
says yeah you logged in and now we select an inbox, okay this is the IMAP protocol,

02:04.120 --> 02:09.080
very basic but here's all the like beginning of the parts of the grammar you need to parse

02:09.080 --> 02:13.760
and it's a bunch and if you were here earlier you're going to see lots and lots and lots

02:13.760 --> 02:18.720
of more stuff, weird literals, like weird ways the interaction with the server changes

02:18.760 --> 02:24.480
how you parse the response, synchronizing and non-synchronizing literals, it's a complicated

02:24.480 --> 02:29.080
protocol and it's not like other protocols that you're using and there's a really simple

02:29.080 --> 02:34.800
reason for that which I'll get to, oh yeah, right this is the protocol to do stuff and

02:34.800 --> 02:39.560
then this is the payload of the message is MIME which is like another thing nobody wants

02:39.560 --> 02:45.880
to deal with, it works great and it pays my salary but I mean, oh, see what you want about

02:46.000 --> 02:49.760
HTTP and JSON but at least it's not this stuff, right?

02:49.760 --> 02:54.920
Like you probably all know how to use HTTP even if you don't know how it works under

02:54.920 --> 02:59.680
the hood and you probably know how it works because it's really nice and simple.

02:59.680 --> 03:03.480
So I had lots and lots and lots of slides talking about how weird IMAP is and I would

03:03.480 --> 03:06.840
love to tell you about it but I'm just going to tell you about this one thing and this

03:06.840 --> 03:12.560
was touched on earlier, blah blah blah blah, server and client are talking and eventually

03:12.600 --> 03:17.480
the client says I want to mark message 12 deleted, store the flag deleted onto that

03:17.480 --> 03:22.600
message and the server says great, you have fetched this information and this is where

03:22.600 --> 03:26.040
people get really confused and it comes down to something I didn't said earlier, the only

03:26.040 --> 03:31.680
way to understand IMAP is that IMAP is a cache invalidation protocol, it's a protocol that

03:31.680 --> 03:37.200
tells you what to do with your cache. So you've got a server and you've got a client

03:37.200 --> 03:42.240
and the client can send basically the commands you expect like I want to fetch or update

03:42.280 --> 03:47.280
or create or delete messages and the server's response is in response to that here is how

03:47.280 --> 03:51.120
you should update your cache and if you don't think about IMAP that way you're going to

03:51.120 --> 03:56.880
have a bad time. Everything, yeah everything works this way. If the client says I want

03:56.880 --> 04:02.600
to work with the inbox it says select inbox and the server says there are 172 emails and

04:02.600 --> 04:07.120
these flags exist which is a way of saying here's how to initialize your cache. When

04:07.120 --> 04:11.040
you say I want to look at my new mail the client says fetch these things and the server says

04:11.080 --> 04:15.560
you fetched these things which means put these in your cache. When you say I want to mark

04:15.560 --> 04:20.600
this mail red you say store this flag and the client says put this in your cache. That's

04:20.600 --> 04:24.800
how it all works and you have to start by understanding that even to understand IMAP.

04:24.800 --> 04:30.280
You want to talk much more about IMAP. Okay there is one more thing though. This is another

04:30.280 --> 04:34.720
fairly basic IMAP conversation where we're saying we want to come up to date and come

04:34.720 --> 04:38.920
up to date is really important. See at the beginning we say queue resync that means we

04:38.960 --> 04:45.560
want to quickly resynchronize our IMAP storage offline. So we say queue resync and that our

04:45.560 --> 04:51.400
client state is 123. Just tells what the state was the last time we synced. And we get told

04:51.400 --> 04:55.360
great your next sync is going to be 130. Here's all the changes to apply and when you're

04:55.360 --> 05:01.240
done you'll be at state 130. Without this IMAP kind of sucks. I mean it's better than

05:01.240 --> 05:06.240
pop but one of the great things about it is you can synchronize, go offline, come back

05:06.320 --> 05:12.320
later and quickly get up to date no matter what else has been going on. Okay now you

05:12.320 --> 05:19.320
understand IMAP. Good job everybody. Yep. Who wants to go implement it? Yeah these four

05:20.040 --> 05:26.880
freaks. Okay the good stuff is good but the bad stuff sucks and there's so much bad stuff.

05:26.880 --> 05:31.320
So like good stuff. You can resynchronize from previous session. Great. You've got a

05:31.320 --> 05:35.960
domain specific model IMAP is built around email. Really nice. How about the bad stuff?

05:36.000 --> 05:43.000
Okay the data format sucks, the transport layer sucks. The code that's out there is not great

05:43.000 --> 05:48.280
mostly. The key features of IMAP aren't in the core protocol sometimes so you need to

05:48.280 --> 05:51.760
make sure you've got the right extensions loaded, the right capabilities available or you're

05:51.760 --> 05:57.520
implementing to the worst common denominator and there's way, way too many parentheses.

05:57.520 --> 06:02.560
Okay so this is why we built JMAP. JMAP is the JSON Meta Access Protocol. It's just

06:02.600 --> 06:08.400
JMAP, it's IMAP plus a thousand right. This is what it looks like. So already I hope people

06:08.400 --> 06:13.720
are feeling better, you know what this stuff is right. We're posting a request, we're

06:13.720 --> 06:18.680
posting a request to the JMAP endpoint and we say I want to get these emails. Great right

06:18.680 --> 06:23.760
so just like everything else it's a restful protocol kind of. Here's what you get back

06:23.760 --> 06:27.880
in response. You said you wanted to get emails one two three four, here's one of the ones

06:27.880 --> 06:32.400
you might get. You did an email get, you're getting a list of messages, this one has

06:32.440 --> 06:36.440
ID one and there's its subject and there's more stuff. But it looks like this, you can

06:36.440 --> 06:41.880
parse this. Anybody knows what this means. Here's a bigger context of it so you can see

06:41.880 --> 06:45.560
like there's an ID and there's parts of the body and the subject but the thing I want

06:45.560 --> 06:52.400
to call your special attention to is it's got one simple date format. Yeah I mean you

06:52.400 --> 06:57.000
can stop there and it'd be a pretty good improvement on IMAP and IM. But we're going

06:57.040 --> 07:02.720
to keep going. Here's another thing, you can say I want to get, when the server responds

07:02.720 --> 07:06.920
to you, it can say yeah you did just get these messages and by the way your email collection

07:06.920 --> 07:12.560
is at state 616. It's just like that Q-resync thing. It's going to let you say later I've

07:12.560 --> 07:18.320
got mail and it's got it all up to state 616. Hey server tell me what changed since then.

07:18.320 --> 07:24.120
And the server replies and what it says is here are the changes. You were at 616, you

07:24.360 --> 07:29.320
will be at 717. These two IDs were created and this one has changed in some way. And

07:29.320 --> 07:33.920
then you can decide to do what? Update your cache. What do you do? Maybe you refatch those

07:33.920 --> 07:38.040
messages. Maybe you just invalidate the local storage but you know how to change your cache.

07:38.040 --> 07:43.880
It's just like IMAP. JMAP is a cache management protocol. It's just easier to use. Here's

07:43.880 --> 07:48.520
another example. Email query is basically what we call search when you search your email

07:48.520 --> 07:53.120
on IMAP. So we're going to search for mail that's been flagged and that's from me. Really

07:53.160 --> 07:58.360
simple. And the response to that will look like this. You did an email query. Here are

07:58.360 --> 08:05.240
the IDs that result from that. And the reason that it gives back IDs, it's about managing

08:05.240 --> 08:09.840
your cache. You should have messages cached. If you don't have these, well now you can

08:09.840 --> 08:13.720
fetch them. But if you did have them, why send you the messages back? You should have

08:13.720 --> 08:18.040
a cache with these messages. If you didn't, you would go ahead and say great, email get

08:18.040 --> 08:22.800
these messages. I didn't have them but I want them so you get them now. And it works great.

08:22.840 --> 08:28.240
It makes sense. You can think about this really easily. But we should talk about IMAP again.

08:28.240 --> 08:32.440
So in IMAP it works the same way. You say I'm going to search flagged messages and it

08:32.440 --> 08:36.760
says here they are and then you say I'm going to fetch those. Right? Makes sense. Same thing.

08:36.760 --> 08:41.160
IMAP and JMAP look the same in a lot of ways. This is what you don't always see in these

08:41.160 --> 08:46.560
diagrams. Where the round trips come in. Right? First we search, goes to the server.

08:46.560 --> 08:50.600
Server computes the answer, sends it back. They only say I need those messages. We say

08:50.640 --> 08:54.640
give me those messages. Send it to the server. Server finds the answer. Server sends it back.

08:54.640 --> 09:00.520
You're waiting for the speed of light back and forth twice. That's what happens here

09:00.520 --> 09:04.640
too. Right? You say I want to do a query. I get the answer. I look for those messages.

09:04.640 --> 09:10.400
It goes to the server again and it comes back. So the same waits sit here. But you don't

09:10.400 --> 09:14.960
have to let them sit here with JMAP. Because when you write your query you can write this.

09:14.960 --> 09:19.640
I want to do a query and a get. And what is the get going to fetch? I don't know the answer

09:19.680 --> 09:25.240
yet. That's okay. You tell the server which IDs do you get? They came from another thing

09:25.240 --> 09:32.240
I asked you to do. So get the IDs by looking at A. It should be an email query. Get the

09:32.800 --> 09:37.880
IDs out of the response that you compute before you send anything back to me and do the method

09:37.880 --> 09:43.160
call with those. It's called a back reference. And you can have a whole bunch of method calls

09:43.160 --> 09:46.840
that back reference to one another to let the server do all the work and only do a round

09:46.880 --> 09:53.880
trip back to you once. So you get one wait state. Really good. Okay. Couple more things.

09:53.880 --> 09:57.560
This is a larger section of a JMAP query. I've put in some more things. I've been skipping

09:57.560 --> 10:02.040
on these slides. Mostly you've been seeing this stuff, actual method calls. But what

10:02.040 --> 10:07.960
up here is good too. This is called the using block. It tells you what capabilities you

10:07.960 --> 10:12.880
want to use. This one's really simple. If you squint you can see we're using core which

10:12.920 --> 10:18.440
is like, yeah, I'm speaking JMAP. And mail, again, I'm looking at mail. But you didn't

10:18.440 --> 10:22.960
have to squint apparently. I had to build. But you can have lots of other capabilities.

10:22.960 --> 10:28.360
At fast mail we have contacts and calendars over JMAP. And those are going through the

10:28.360 --> 10:34.520
ITF now. They'll be RFCs and we have lots of other stuff too. What that means is if your

10:34.520 --> 10:40.760
server supports mail and contacts and calendars and other stuff, when you come back from offline,

10:40.800 --> 10:46.760
you can synchronize everything with the same request. Not just the same protocol, but hello,

10:46.760 --> 10:52.800
I'm back online. Please get all the changes since my offline state and fetch the updates

10:52.800 --> 10:58.320
to me all at once. You can also write your own custom data types for whatever appeals

10:58.320 --> 11:02.200
to you, whatever your business needs to use, add it to your implementation. Because even

11:02.200 --> 11:10.560
though the data types in JMAP are domain specific, we let you build your own. Anybody can build

11:11.360 --> 11:14.160
their own just by describing how those methods will work. I'll talk about it just a little

11:14.160 --> 11:18.880
bit. Fast mail uses for mail filters, your preferences, your credentials, your DNS, your

11:18.880 --> 11:25.280
files and billing, all kinds of stuff. We just do over JMAP because it's great. Okay.

11:25.280 --> 11:32.280
Getting close to the last things. We also give you event source. Event source is a long-running

11:32.280 --> 11:35.880
connection. I'm old enough that I still call it combat, right? Like you connect to the web

11:35.880 --> 11:40.320
server and you say, tell me when things change and you stay connected. And every once in

11:40.320 --> 11:43.640
a while, the server sends you a little blob like this saying, oh, there's an update to

11:43.640 --> 11:47.840
your email state. Oh, email and contacts have changed. And when that happens, what does

11:47.840 --> 11:52.080
your client do sitting there connected? It invalidates the cache. It can refresh things.

11:52.080 --> 11:57.440
It can update the screen immediately. So I'm at Paz this with something called idle, but

11:57.440 --> 12:03.520
CalDav doesn't, CardDav doesn't. And when you do this on your mobile phone, idle is

12:03.520 --> 12:07.280
not going to help you much because Apple sure as hell is not letting your phone sit there

12:07.320 --> 12:12.320
with a connected TCP stream live to your IMAP server all the time. So people build these

12:12.320 --> 12:17.320
interstitial servers instead of getting a web push which would just directly send your

12:17.320 --> 12:22.920
phone a message. And JMAP supports web push. So you could just get real-time updates from

12:22.920 --> 12:30.280
all these protocols. So this is our IMAP. We get rid of all the bad stuff just about

12:30.280 --> 12:36.120
and add all this good stuff. JMAP and HTTP, anybody can use. Avoiding around chips by

12:36.160 --> 12:40.480
combining these requests. Putting lots of data types in one place and real-time synchronization

12:40.480 --> 12:46.040
and the cost is that not everybody's using JMAP yet. It's growing, but it's still pretty

12:46.040 --> 12:50.480
early and there's way too many squiggly braces and double quotes. But like that's the price

12:50.480 --> 12:55.760
I'll pay. Okay. So what now? You want to know how this works? The first thing you should

12:55.760 --> 13:00.320
do is go look at this repository, fastmail slash JMAP samples. It's code that just does

13:00.320 --> 13:03.680
some real basic stuff with JMAP and you won't understand it yet, but it's going to give

13:03.720 --> 13:11.720
you an idea of what JMAP use looks like. Simplest form. Then it's time to read RFCs. Yes. Don't

13:12.240 --> 13:16.640
worry. They're actually pretty good RFCs. You should look at these if you want to play

13:16.640 --> 13:21.280
with JMAP. The first one is 8620, which is going to tell you what the basic methods are.

13:21.280 --> 13:26.280
And then 8621, which tells you the data types. So 20 is going to tell you things like how

13:26.280 --> 13:30.600
do you get, how do you set, how do you do changes, just what those are that work on

13:30.640 --> 13:36.280
any data type. 8621 is going to tell you the specific data types that we use like mailbox,

13:36.280 --> 13:41.960
thread, email and so on. Everything else, you just learn more data types in more, in

13:41.960 --> 13:46.040
calendars and contacts, basically how the protocol works. You learn the data types on top of

13:46.040 --> 13:51.480
the core methods. Some highlights from RFCs. Yeah, okay, I got it. A minute and 18 before

13:51.480 --> 13:58.480
questions. Email is the most complicated data type in JMAP for obvious reasons. Emails are

13:58.840 --> 14:04.480
big and weird and complicated. JMAP does a great job of making them easy to deal with.

14:04.480 --> 14:09.000
Here's an email get. When you do a get, you can also say which parts of the thing do I

14:09.000 --> 14:13.240
want to get. Don't get every property, just get pieces. So I might say I want the from,

14:13.240 --> 14:18.720
to, subject, preview, like a little snippet you see in your mail client, and it's mailbox

14:18.720 --> 14:25.280
IDs. So what do you get back? This. You have a build. Great. The to and from come back as

14:25.360 --> 14:30.400
structured objects that have parsed the email headers for you. Nice. The subject comes back

14:30.400 --> 14:34.360
decoded. That's ASCII, so that was a poor choice of string, right? But it comes back

14:34.360 --> 14:40.600
decoded. The preview is decoded and mailbox ID is this weird set thing. Why is it an object

14:40.600 --> 14:45.400
instead of just the one mailbox ID? Because it can be in multiple mailboxes ID. And if

14:45.400 --> 14:49.200
you hit me up later, I can tell you about labels mode, which is what we use this for.

14:49.200 --> 14:54.960
It's really nice. So the headers, you could fetch the subject, but you could also fetch

14:55.000 --> 15:00.120
the header called subject. And when that happens, you get back the quoted printable, the literal

15:00.120 --> 15:05.720
thing. But if you want instead, you could say, give me the subject, the literal bytes,

15:05.720 --> 15:10.600
or give me all the headers, because maybe there's multiple subjects, or all the headers, but

15:10.600 --> 15:14.960
decode the text. You can get anything like that. You've got no time left. I'll show you

15:14.960 --> 15:18.920
this. When you fetch the body, you can get the blob ID. Don't do that. That's how you

15:18.920 --> 15:23.940
have to mine parse it. Instead, you say you want to fetch the text bodies and all their

15:23.960 --> 15:29.620
values, and you get something like this. Here's all the bodies you need to display the full

15:29.620 --> 15:33.900
text of the message. Like there's no mind parsing, there's no remembering. What do you

15:33.900 --> 15:39.260
do with, you have multi-part alternative and multi-part related? How does that, no. Just,

15:39.260 --> 15:44.580
just do that. Okay. Yep. Time for Q and A. The first thing I will say is you can ask

15:44.580 --> 15:49.060
me for more later, use fast mail, blah, blah, blah. How about questions?

15:49.500 --> 15:50.700
All right. Same here.

15:57.580 --> 16:06.580
Hi. Thank you very much. So one quick question about adoption. Did you reach out to, because

16:06.580 --> 16:12.740
when looking at this protocol, and I've been playing around with it for some time now,

16:12.740 --> 16:18.300
it looks fairly similar to whatever Google and Microsoft do.

16:18.500 --> 16:19.580
I'm not familiar with those companies.

16:19.580 --> 16:28.420
Yeah, yeah. Yeah. So is there any chance that these guys would be interested in adopting this?

16:28.420 --> 16:35.260
Yeah. Yes. I mean, I think I can just say that. It's, you can imagine like Microsoft, Apple

16:35.260 --> 16:39.740
and Google are all standing around a well in like a spaghetti Western with their guns at

16:39.740 --> 16:41.500
each other, like who's going to change first?

16:41.500 --> 16:41.820
Right.

16:42.420 --> 16:48.140
Apple's client is by far the most popular mail client in use. Google's servers are the most

16:48.180 --> 16:54.100
popular servers. If either one breaks, we're in. And I've spoken with people, these companies,

16:54.100 --> 16:57.860
and they're interested, but of course, it's a huge amount of work on something that even

16:57.860 --> 17:02.860
though it's clearly technically superior and a big win is a gamble. It hasn't won yet.

17:02.860 --> 17:07.140
I'm pretty optimistic that we're going to see things happen, but I don't have any secret

17:07.140 --> 17:07.700
knowledge.

17:07.700 --> 17:08.700
Yeah. Thanks.

17:09.620 --> 17:21.020
Hi, thanks for the talk. What's about JMTP?

17:21.900 --> 17:33.620
Yes, JMTP. Yeah. So replacing, replacing server to server communication is a much more fraught

17:33.620 --> 17:36.380
problem than replacing what your client does.

17:36.700 --> 17:37.180
I would.

17:41.500 --> 17:43.540
Yeah, yeah. So submission. Are you asking about submission?

17:45.260 --> 17:52.060
Okay. So mail, MTA to MTA, right? Full exchange of mail between different, the Fediverse of

17:52.060 --> 17:58.220
email, if you will. That's going to be SMTP as far as I know forever. I'd love to see

17:58.220 --> 18:02.940
JMTP replace it, whatever the hell that is. But submission where your mail client says

18:02.980 --> 18:07.700
I want to give this message to be sent, JMAP supports that and it's really, really good.

18:08.260 --> 18:11.980
It has lots of really nice features. It has the ability to tell you, oh, by the way, that

18:11.980 --> 18:16.300
mail you sent bounced. It has the ability to tell you how many people has it been sent to.

18:16.300 --> 18:20.980
And the way that you create messages as a client author is much, much, much simpler. You don't

18:20.980 --> 18:25.140
have to think about constructing mind bodies yourself. You can just say, here's some attachments.

18:25.140 --> 18:28.900
Here's the text in the HTML and the server can do everything for you. So it does replace

18:28.940 --> 18:33.980
that. It also, because it's one protocol, you're never like, I can fetch mail, but I can't send

18:33.980 --> 18:36.700
mail because one server's up and one server's down. It just always works.

18:40.180 --> 18:42.540
What do you do about encrypted messages?

18:43.060 --> 18:48.260
So you're like open PGP or SMIME sort of things? Yeah. So what do we do about encrypted

18:48.260 --> 18:55.540
messages? Punt. Well, so there are some RFCs about SMIME and handling SMIME messages, I

18:55.580 --> 19:02.860
think all by Alexi, if not mostly by Alexi, that I would say are optimized for the server

19:02.860 --> 19:08.180
having access to your key material, right? Is that a fair way to describe it? Yes. Yeah. And

19:08.180 --> 19:13.100
there have been discussions about how we would deal with encrypted messages when the server

19:13.100 --> 19:17.980
doesn't have your key material and only the client does. We've talked about it's complicated

19:17.980 --> 19:22.660
and I think there's interesting things we can do. But generally, Jmap is built around

19:22.700 --> 19:28.220
the idea that whatever the server can see, you can see. And encryption, as usual, makes

19:28.220 --> 19:32.620
things less convenient. All right. Thank you again very much, Rick. I think it will be around.

