WEBVTT

00:00.000 --> 00:12.400
Well, we're sitting here waiting, and I got up here thanks to the previous speaker giving

00:12.400 --> 00:14.680
a generous amount of time to set up.

00:14.680 --> 00:17.520
I'm going to show off a little bit more of this wonderful thing that we have here called

00:17.520 --> 00:27.500
Strigiform, a pun on the Latin name for owls, which is a space shooter written in scheme

00:27.500 --> 00:29.780
compiled with Guile Hoot.

00:29.780 --> 00:34.060
And you can play it in your web browser, sure enough.

00:34.060 --> 00:42.360
And it's got, this was done by David Thompson for the last Lisp game jam, who did all the

00:42.360 --> 00:44.100
code, and I did all the music.

00:44.100 --> 00:47.820
And this is a real scheme application you're about to see in your browser, so let's start

00:47.820 --> 00:48.820
it.

00:48.820 --> 00:49.820
Oh, yeah.

00:49.820 --> 00:50.820
Let's do this.

00:50.820 --> 00:58.980
Ooh, we've got an alternate firing mode.

00:58.980 --> 01:00.340
Make your ship move slower.

01:00.340 --> 01:01.900
Oh, yeah, we got that.

01:01.900 --> 01:02.900
All right.

01:02.900 --> 01:03.900
Look, there's particle effects.

01:03.900 --> 01:05.100
Particle effects in the browser.

01:05.100 --> 01:06.100
Is this scheme?

01:06.100 --> 01:07.100
It's scheme.

01:07.100 --> 01:09.100
Parallax scrolling of stars.

01:09.100 --> 01:11.660
Can't freaking believe it.

01:11.660 --> 01:18.820
People said that we couldn't bring the scheme to the browser and we're doing it.

01:18.820 --> 01:29.020
So look how good I am.

01:29.020 --> 01:33.860
Now actually a fun fact about David Thompson, who we all adore at the Spritely Institute

01:33.860 --> 01:38.500
and are incredibly grateful every day to be able to work with, is that Dave loves space

01:38.500 --> 01:44.620
shooters as much as I do, and in fact makes, has made several space shooters for the Lisp

01:44.620 --> 01:51.140
game jam in Gile, including one who ever heard, who here has ever heard of the game, Ekagura?

01:51.140 --> 01:52.140
Raise your hand.

01:52.140 --> 01:54.540
Oh, like, okay, like three people.

01:54.540 --> 01:55.540
Okay.

01:55.540 --> 02:01.900
Well, Dave built a version called Lispagura, and you know, it's pretty good.

02:01.900 --> 02:04.740
But anyway, you can play this game yourself.

02:04.740 --> 02:07.580
You can witness the power of scheme directly in the browser.

02:07.580 --> 02:09.300
Oh, there we go.

02:09.300 --> 02:12.260
It's bound to happen.

02:12.260 --> 02:14.940
But you know, it's going pretty well.

02:14.940 --> 02:16.660
You know, oh god, there we go.

02:16.660 --> 02:20.940
The moment I start, it's getting harder.

02:20.940 --> 02:21.940
Where are we at on time?

02:21.940 --> 02:22.940
I'm full screen.

02:22.940 --> 02:23.940
I can't see.

02:23.940 --> 02:24.940
Do I still have a couple minutes?

02:24.940 --> 02:25.940
Are we there?

02:25.940 --> 02:26.940
Is it time to stop?

02:26.940 --> 02:27.940
Time to stop?

02:27.940 --> 02:28.940
Okay.

02:28.940 --> 02:29.940
All right, okay.

02:29.940 --> 02:34.940
Yeah, there we're right on the hour.

02:34.940 --> 02:36.260
Here's the real thing about this game.

02:36.260 --> 02:42.980
It also has a badass boss in it with like pulsing blood veins, like moving across like

02:42.980 --> 02:44.780
its forehead and everything like that.

02:44.780 --> 02:45.780
It looks awesome.

02:45.780 --> 02:46.780
And I did the graphics.

02:46.780 --> 02:47.780
Thank you very much for them.

02:47.780 --> 02:48.780
And you look awesome.

02:48.780 --> 02:55.780
But Dave made it work, so you know.

02:55.780 --> 02:59.100
That's more important.

02:59.100 --> 03:02.340
Anyway, hello.

03:02.340 --> 03:03.980
My name is Christine Leverweber.

03:04.020 --> 03:06.860
I am the CTO of the Spritely Institute.

03:06.860 --> 03:11.660
I've recognized quite a few faces here, so maybe some of you have seen me before.

03:11.660 --> 03:18.300
This talk is about Spritely, Gile and Geeks, a unified vision for user security.

03:18.300 --> 03:20.980
And what is the Spritely Network Communities Institute?

03:20.980 --> 03:24.060
Well, we are a research institution.

03:24.060 --> 03:29.100
We are building the future of decentralized networks from a protocol perspective, from

03:29.100 --> 03:35.740
a software perspective, from a strong consideration of how human beings interact.

03:35.740 --> 03:39.980
And everything we do is free and open source software, and it's all in the public interest.

03:39.980 --> 03:43.060
And we are a 501c3 nonprofit in the U.S.

03:43.060 --> 03:44.060
And research means collaboration.

03:44.060 --> 03:49.220
If you're excited by this, you happen to be working with some sort of organization that

03:49.220 --> 03:50.980
you want to collaborate with us, that would be great.

03:50.980 --> 03:56.780
If you're an individual and you want to collaborate with us, also great.

03:56.780 --> 04:00.820
I'm going to talk for just a moment about network communities at a general level, because

04:00.820 --> 04:03.700
we're the Spritely Network Communities Institute.

04:03.700 --> 04:06.860
And some of you may know me for my previous work on Activity Pub.

04:06.860 --> 04:10.220
In fact, Jessica Tallin, right there, raise your hand.

04:10.220 --> 04:12.100
She won't want to, but there she is.

04:12.100 --> 04:14.820
She's a co-author with me on this back.

04:14.820 --> 04:18.060
We're not the only people who worked on it, but of Activity Pub, which if you're familiar

04:18.060 --> 04:23.140
with Mastodon, etc., is what connects all those things together.

04:23.140 --> 04:24.660
And so we have some background in social things.

04:24.660 --> 04:27.300
And in fact, our background goes back even way further.

04:27.300 --> 04:33.460
Here is Lucasfilm's habitat, first ever massively multiplayer virtual world, ran on the Commodore

04:33.460 --> 04:35.660
freaking 64 with thousands of users.

04:35.660 --> 04:39.060
That should not have been possible with the graphical virtual world at the time, and yet

04:39.060 --> 04:40.780
they did it.

04:40.780 --> 04:42.580
And we are building towards more social systems.

04:42.580 --> 04:45.820
So here you see a mock-up of kind of what we're doing.

04:45.820 --> 04:49.020
We have a series of these mock-ups, but this is not the right talk for that, even though

04:49.020 --> 04:52.340
there's some interesting ideas that are kind of hidden in here of decentralized naming

04:52.340 --> 04:53.340
ideas.

04:53.820 --> 04:57.260
But because we are going to be talking about some more low-level details.

04:57.260 --> 05:02.020
And so this time I'm really talking with this audience, so we should figure out what we want

05:02.020 --> 05:03.020
to do, right?

05:03.020 --> 05:04.900
So we want to bring user freedom to everyone.

05:04.900 --> 05:06.340
We're at FOSDOM, makes sense.

05:06.340 --> 05:08.540
We want to make computers safe for everybody.

05:08.540 --> 05:12.260
We want to introduce network programming like you never seen before, and we're going to

05:12.260 --> 05:17.340
take over the web and with a power of combining our powers together, we're going to take

05:17.340 --> 05:20.620
over operating systems, and we'll hear about how.

05:20.620 --> 05:25.700
So from a perspective of, we chose to use Gile Scheme, right?

05:25.700 --> 05:30.140
Which is a Scheme, which is a Scheme, which is a list, which is a family of languages,

05:30.140 --> 05:32.140
like not that many people use.

05:32.140 --> 05:33.140
And why do we do this?

05:33.140 --> 05:36.340
It's because we love it, but it's also because it's really powerful.

05:36.340 --> 05:39.940
And actually if you go to the Gile website, you go to the documentation page, we're very

05:39.940 --> 05:44.420
proud that the first link that you see on there is actually our tutorial, Scheme Primer,

05:44.420 --> 05:48.180
which introduces somebody who's never used Scheme before, how to be able to, it's like

05:48.220 --> 05:52.740
a compressed version of structure interpretation in computer programs in like 30 pages.

05:52.740 --> 05:55.860
You go from knowing nothing to writing your own Scheme interpreter inside a Scheme at

05:55.860 --> 05:56.940
the end.

05:56.940 --> 05:59.940
And this has been pretty popular.

05:59.940 --> 06:03.780
But the reason we're using this stuff is not to just show off all these parentheses and

06:03.780 --> 06:06.900
how cool it is and everything, but it's because Lisp is clay.

06:06.900 --> 06:12.220
We want a language foundation which allows us to be able to build and express ideas very

06:12.220 --> 06:15.620
easily and very powerfully, and Lisp allows us to do that.

06:15.660 --> 06:19.580
Lisp is a power of composable domain-specific languages, and that means the types of things

06:19.580 --> 06:23.820
that we are building, of decentralized networks and et cetera, can also be composed with the

06:23.820 --> 06:27.380
types of things that, for example, the Geeks community is doing, even though they seem

06:27.380 --> 06:31.220
to be attacking something very different, because you can combine these together very

06:31.220 --> 06:33.500
easily.

06:33.500 --> 06:36.380
And so I'm going to talk about Spritely Goblins.

06:36.380 --> 06:41.140
It's our distributed, cooperative, transactional programming environment.

06:41.140 --> 06:44.220
We have versions for both Gile and for Racket.

06:44.220 --> 06:48.180
Gile is the main version these days.

06:48.180 --> 06:54.300
And it's based off of this family of computer science research called object capability

06:54.300 --> 06:58.660
security, which sounds really intimidating, but it's actually the least intimidating thing

06:58.660 --> 07:01.420
possible because it's distributed security you can understand.

07:01.420 --> 07:03.780
If you don't have it, you can't use it.

07:03.780 --> 07:07.380
It's just ordinary argument passing the way that developers do every day.

07:07.380 --> 07:10.900
If you have a reference to something, then you're able to do it, and the references to

07:10.900 --> 07:13.380
objects turn out to have very composable patterns.

07:13.500 --> 07:17.340
And if you want to understand more about those patterns, and you are a schemer, this is a

07:17.340 --> 07:18.340
wonderful paper.

07:18.340 --> 07:20.100
It really helped me understand everything.

07:20.100 --> 07:22.180
It's a security kernel bias done along the calculus.

07:22.180 --> 07:26.820
It's by Jonathan Reese of R5RS Scheme and many other things.

07:26.820 --> 07:33.300
And it explains how if you take a simple lexically-scoped language like Scheme and you treat it very

07:33.300 --> 07:37.540
seriously as that thing, that's your security model.

07:37.540 --> 07:38.740
LAMDA is your security model.

07:38.740 --> 07:42.820
And it saves you from a lot of dangerous things like confused deputies and ambient authority

07:42.820 --> 07:46.620
problems and heron and things like the access control list model, which most of us are familiar

07:46.620 --> 07:49.700
with from Unix and et cetera.

07:49.700 --> 07:53.260
Now when I say this rightly, Goblin's is really powerful and easy to do things in.

07:53.260 --> 07:56.980
Here is something that our engineer, same one who did that Strigiform thing I was showing

07:56.980 --> 08:00.620
off earlier, David Thompson did in his first week on the job.

08:00.620 --> 08:04.260
He had never used Goblin's before.

08:04.260 --> 08:05.740
He had read a little bit about it.

08:05.740 --> 08:09.340
But you know, day three, I'm like, okay, you've had your deep dive into Goblin's.

08:09.340 --> 08:10.340
All right.

08:10.340 --> 08:12.660
Now I want you to build me a distributed game.

08:12.660 --> 08:15.900
And since he's David Thompson, he can do the game part.

08:15.900 --> 08:22.580
And so he programmed this collaborative, lovely little garden demo in one day.

08:22.580 --> 08:26.340
And then wrote a blog post about it in day two because he's incredible in David Thompson.

08:26.340 --> 08:29.860
But even though he's David Thompson, it's really amazing that you could do this in one

08:29.860 --> 08:30.860
day.

08:30.860 --> 08:35.180
And what's really interesting is that this was all written in one process on one computer.

08:35.180 --> 08:38.340
And then when you hook it up, Goblin's has this thing called O-Cappen.

08:38.340 --> 08:43.060
And it's very specifically integrated so that you do this ordinary programming that automatically

08:43.060 --> 08:44.620
works over the network.

08:44.620 --> 08:49.340
These are based off of ideas that have existed for decades, but have been forgotten.

08:49.340 --> 08:53.060
And we've been pulling them off the shelf and trying to bring them back to life and

08:53.060 --> 08:55.900
bringing them to the world of scheme.

08:55.900 --> 09:00.740
And in fact, here it doesn't just work in one, across one language, runtime environment.

09:00.740 --> 09:02.220
Here are two different runtime environments.

09:02.220 --> 09:07.380
You can see two implementations of the guile version of this minimalist chatroom thing

09:07.380 --> 09:10.620
we created called Goblin Chat.

09:10.620 --> 09:14.780
Our distributed network thing can run over multiple networking substrates, including

09:14.780 --> 09:19.220
Torrnian services, which is slow as molasses, which is why you'll notice a lot of lag, but

09:19.220 --> 09:21.500
it can run over faster things too.

09:21.500 --> 09:24.500
But what's interesting here is that this is end to end encrypted.

09:24.500 --> 09:28.420
We can verify that the messages come from the user that they claim they did.

09:28.420 --> 09:35.620
And the code for the user and for the chatroom is 150 lines of code, of understandable scheme

09:35.620 --> 09:36.620
code.

09:36.940 --> 09:42.660
And what's also really interesting is that this whole program was also written entirely

09:42.660 --> 09:47.100
on one process, entirely on one computer, and then when we hooked it up to the network,

09:47.100 --> 09:48.380
it just worked.

09:48.380 --> 09:52.380
The distributed, the communication between the things just worked.

09:52.380 --> 09:54.900
And that's the kind of power that Goblins gives you.

09:54.900 --> 09:59.020
But that's not all the kind of power Goblins gives you, because we also are a transactional

09:59.020 --> 10:00.020
programming environment.

10:00.020 --> 10:03.580
Here is, in a very small amount of code that I won't get into, because it's very dense,

10:03.620 --> 10:08.500
a implementation of a bank, actually, a very minimalist fiat bank.

10:08.500 --> 10:14.900
And this is, you know, what's also interesting about this is that if something goes bad in

10:14.900 --> 10:19.500
the middle of this, if somehow, somehow, one piece of state was being updated and then

10:19.500 --> 10:23.020
it crashed before it updated the next piece of state that it needed to do both, that would

10:23.020 --> 10:24.580
just roll back.

10:24.580 --> 10:29.860
Because Goblins is automatically transactional, which is a really interesting and useful feature,

10:29.900 --> 10:33.820
because building distributed programs that don't have their state corrupted is actually

10:33.820 --> 10:36.060
really difficult.

10:36.060 --> 10:40.060
And here's one of the first things that I did when I was testing out the design of Goblins.

10:40.060 --> 10:45.340
This is an ASCII art space shooter running in a terminal, right?

10:45.340 --> 10:48.260
And you'd think that's the coolest part, but what's really the coolest part is that, what

10:48.260 --> 10:49.620
just happened there?

10:49.620 --> 10:51.300
Moving backwards and forwards in time.

10:51.300 --> 10:54.020
Because what is unlimited transactionality?

10:54.020 --> 10:55.700
It's time travel, right?

10:55.700 --> 11:00.100
This entire game, I programmed this entire game without even thinking about that I should

11:00.100 --> 11:04.420
add, that we already had the time travel feature effectively, and then I just exposed it in

11:04.420 --> 11:07.220
about an hour or two, just the gooey for it.

11:07.220 --> 11:12.380
I didn't have to change a single line of code of the gameplay to be able to make this happen.

11:12.380 --> 11:16.620
Because Goblins already comes with the fundamental abstractions for this.

11:16.620 --> 11:20.540
And in fact, we use this to be able to make your life easier.

11:20.540 --> 11:25.180
Debugging is one of the most important things you can do, especially in distributed systems,

11:25.180 --> 11:27.180
which are notoriously difficult to understand.

11:27.180 --> 11:32.140
So Goblins comes with a time traveling distributed debugger.

11:32.140 --> 11:34.900
And you don't even have to leave your REPL for it.

11:34.900 --> 11:37.940
You are able to use the tools directly within your REPL.

11:37.940 --> 11:43.180
You are able to move back and forth in time to find out what's going on, what's wrong,

11:43.180 --> 11:47.900
and actually debug objects at the time that the errors were occurring.

11:47.900 --> 11:52.460
And not only that, but it can visualize what happened to you.

11:52.460 --> 11:55.000
And this prints out right in the REPL.

11:55.000 --> 11:57.600
You don't even have to leave your tool.

11:57.600 --> 12:03.120
So this allows for a strong amount of developer productivity.

12:03.120 --> 12:07.040
And now, maybe you're not a guile person, right?

12:07.040 --> 12:10.040
Maybe you're like, well, this all sounds really cool, but I want this in Haskell or something

12:10.040 --> 12:11.440
else like that, right?

12:11.440 --> 12:18.560
Well, good news, because we are taking the designs that have been extrapolated from basically

12:18.560 --> 12:20.160
the work of Goblins.

12:20.160 --> 12:24.160
And actually, Jessica Tallin has done the hard work over this last year to write these

12:24.200 --> 12:30.280
up, thank you in Elnette for funding Jessica, to take all of the core inner mechanics of

12:30.280 --> 12:35.280
how the network protocol works and write them as specifications.

12:35.280 --> 12:40.600
The same way that Activity Pub is a specification that many different implementations are able

12:40.600 --> 12:45.360
to be members of the Fediverse, we would like to have many different implementations be

12:45.360 --> 12:47.560
members of the distributed world.

12:47.560 --> 12:52.760
But in order to be able to build this, in order to be able to understand this, the Lisp

12:52.760 --> 12:56.920
is clay aspect allowed us to be able to get here and understand things and move very efficiently.

12:56.920 --> 12:59.320
And also, it's just a delight to program it, right?

12:59.320 --> 13:01.400
So you don't have to worry about these types of things.

13:01.400 --> 13:05.000
These are details that we've solved for you so that the programmer can just focus on the

13:05.000 --> 13:09.000
code, but also, you know, cool graphic, right?

13:09.000 --> 13:12.960
So now that all sounds cool and well, but you know, you might say, Christian, and then

13:12.960 --> 13:19.960
I take a sip of water, very dramatically, and you say, Christian, but how are users

13:20.120 --> 13:20.800
going to use this?

13:20.800 --> 13:22.600
Do they all have to run geeks?

13:22.640 --> 13:25.040
Do they, you know, how do we get it to them, right?

13:25.040 --> 13:27.960
You know, maybe we have geeks packed, maybe we can get things to them a little bit that

13:27.960 --> 13:32.200
way, but you know, the GTK really work right on these other platforms, you know, what do

13:32.200 --> 13:33.320
we do, right?

13:33.320 --> 13:36.240
And what everybody has today is a browser, right?

13:36.240 --> 13:37.400
Everyone has a browser, right?

13:37.400 --> 13:39.680
So we want to be in the browser, right?

13:39.680 --> 13:44.920
And that is why we launched the Hoot project, right?

13:44.920 --> 13:51.200
And generously funded by the folks at Consensus and Mediasque who also like OCAP security.

13:51.200 --> 13:55.400
This is an example, if you're here for Robin's talk, you've already seen this bit, but this

13:55.400 --> 14:02.400
is a snippet of scheme code for a cellular automata called Wireworld, and it's a real

14:02.400 --> 14:03.520
scheme code.

14:03.520 --> 14:09.000
And what you see here is it actually executing and running in the browser, and it looks cool

14:09.000 --> 14:10.280
as heck, right?

14:10.280 --> 14:17.280
You know, but the other interesting thing is that, you know, you can do more than this.

14:17.800 --> 14:21.600
We are increasingly working on things like a foreign function interface to be able to

14:21.600 --> 14:26.440
make it so that you can integrate all sorts of things in the browser and be able to do,

14:26.440 --> 14:29.720
interact with, you know, the Canvas, interact with HTML.

14:29.720 --> 14:33.960
Dave wrote an example of a functional reactive programming app using nothing but scheme kind

14:33.960 --> 14:38.000
of React like, and there's an example of that on our blog, and that's the type of stuff

14:38.000 --> 14:39.840
that we're doing.

14:39.840 --> 14:43.460
But let's talk about the SecureOS vision because we are here and there are many scheme people

14:43.460 --> 14:47.780
in the audience, and surely you're dying to know what we are saying about combining

14:47.780 --> 14:49.980
goblins and geeks.

14:49.980 --> 14:53.180
Well, what happens if we combine goblins and geeks?

14:53.180 --> 14:57.180
Well, we have many computers, many of us are running computers using geeks, and many of

14:57.180 --> 15:01.140
us are running many computers using geeks, and since goblins is a distributed programming

15:01.140 --> 15:05.380
environment, what if we had distributed fabric across our different geeks instances where

15:05.380 --> 15:09.340
we can securely cooperate across multiple geeks instances?

15:09.340 --> 15:14.660
Now this is something that's not only free software nerds doing something, you know,

15:14.660 --> 15:17.620
and trying to catch up to everyone else, but this would be something really new that no

15:17.620 --> 15:19.660
one else is doing right now, right?

15:19.660 --> 15:22.100
This is, would be exciting territory.

15:22.100 --> 15:26.780
And so for example, imagine if we switch the geeks build daemon over to using goblins.

15:26.780 --> 15:30.260
You know, one machine could say, hey, I have a recipe for something I'd like to build,

15:30.260 --> 15:32.500
and then I want to have it deployed on this other machine.

15:32.500 --> 15:35.140
They can send it over to this other machine which builds it, and then it sends it over

15:35.140 --> 15:36.780
to the next one which deploys it.

15:37.140 --> 15:40.100
That's the type of thing we could do if we moved over to goblins' tech.

15:40.100 --> 15:41.100
And it's very natural.

15:41.100 --> 15:46.700
And in fact, geeks actually already is kind of moving down the Ocap-ish direction in slight,

15:46.700 --> 15:49.860
slight ways, this lovely Least Authority wrapper, right?

15:49.860 --> 15:55.300
You know, Least Authority and Ocap, you know, have a lot of shared history type stuff, maybe

15:55.300 --> 16:03.700
even, you know, some amount of overlapping volt and diagram stuff, but also, right?

17:03.700 --> 17:33.380
So, this is the right time to say, you know, if all this excited to you, the most important

17:34.060 --> 17:35.420
thing you can do is make something cool.

17:35.420 --> 17:39.540
We have these cool tools, and they've been just now, like, it's taken a while.

17:39.540 --> 17:41.540
Like, people are like, oh, should I pick up and run with these things?

17:41.540 --> 17:43.900
We've been kind of like, yeah, like, mostly.

17:43.900 --> 17:48.660
But like, within the last couple releases, and especially the next two upcoming releases,

17:48.660 --> 17:54.660
I think we'll really be reaching the point where this stuff is of both goblins and hood,

17:54.660 --> 17:57.500
where we can feel much more comfortable saying, actually, you should be picking this up and

17:57.500 --> 17:59.460
running with this.

17:59.540 --> 18:04.540
And so, we are planning on doing some hackathons and things like that, and maybe even jointly

18:04.540 --> 18:05.540
with the Geeks community.

18:05.540 --> 18:10.100
We've had some vague conversations about that, maybe a Spritely and Geeks joint hackathon,

18:10.100 --> 18:14.100
and we'd love to see whatever you're interested in making.

18:14.100 --> 18:17.860
And you know, maybe if you're especially excited about the Geeks plus Goblins dream, maybe

18:17.860 --> 18:20.500
you could participate in that.

18:20.500 --> 18:25.460
So we are a, I said that we are a 501c3 non-profit.

18:25.460 --> 18:27.300
We are a research institution.

18:27.300 --> 18:31.900
We are working with these different organizations, but also, maybe we should be working with

18:31.900 --> 18:34.100
you, right?

18:34.100 --> 18:36.100
Maybe we should be working with your organization.

18:36.100 --> 18:37.900
Maybe you'd love to give us money.

18:37.900 --> 18:39.060
Hey, we don't mind that.

18:39.060 --> 18:40.660
Maybe you'd like to be a technical partner.

18:40.660 --> 18:43.500
Maybe you'd like to jointly apply for funding with us.

18:43.500 --> 18:46.660
These are real opportunities that we can have, and so we should talk about them.

18:46.660 --> 18:48.700
Also, you can donate.

18:48.700 --> 18:50.300
We're a 501c3 non-profit.

18:50.300 --> 18:54.420
Now, most of the people here seem to be from Europe, so maybe this doesn't excite you quite

18:54.420 --> 18:55.420
as much.

18:55.420 --> 18:59.420
If you're in the US, it's tax-exempt, you know, tax-exempt donations, but even if you're

18:59.420 --> 19:03.300
not in the US, you're also donating to an organization with a mission that surely aligns

19:03.300 --> 19:07.500
with you at this very moment, hearing this ridiculous woman up on stage waving her arms

19:07.500 --> 19:11.540
around madly, and you must be thinking, gosh, I have to give them all the money, right?

19:11.540 --> 19:14.620
So, but here's another thing you can do.

19:14.620 --> 19:18.820
You can come up, if you are excited, come up and say hello and get some stickers.

19:18.820 --> 19:20.940
We have the most amazing stickers you've ever seen.

19:20.940 --> 19:25.060
It has our non-binary goblin mascot and a bunch of clothes you can dress them up in.

19:25.060 --> 19:29.220
And it also has the owl, and you can also dress up the owl in some stuff, not quite

19:29.220 --> 19:31.820
as many, but you can also dress up the owl.

19:31.820 --> 19:34.860
And please, Spritely representatives, please raise your hands.

19:34.860 --> 19:41.580
Jessica, Juliana, Robin, and myself, of course, we all have stickers come up, say hello, say

19:41.580 --> 19:46.220
I would like some of these stickers, and if you don't mind, tell us what are you excited

19:46.220 --> 19:47.740
about, right?

19:47.740 --> 19:51.300
Maybe how you would like to work together.

19:51.300 --> 19:55.500
And so, finally, I'm going to say let's build it all together.

19:55.500 --> 19:59.780
We are the Spritely Network Communities Institute.

19:59.780 --> 20:01.140
Communities are about collaboration.

20:01.140 --> 20:03.860
They are about the building of trust.

20:03.860 --> 20:06.180
Trust cannot be forced.

20:06.180 --> 20:11.420
Trust is a consensually collaborative process between multiple parties.

20:11.420 --> 20:15.980
That is the very foundation of the kind of route that we are looking at in our technology,

20:15.980 --> 20:21.940
but also, we would like to build with you, if you are excited about this stuff, let's

20:21.940 --> 20:22.940
build it together.

20:22.940 --> 20:25.540
Let's make it happen in whatever way, shape, or form.

20:25.540 --> 20:26.540
And that's it.

20:26.540 --> 20:29.540
Questions or excitement about stickers?

20:29.540 --> 20:41.900
By the way, take a look at this.

20:41.900 --> 20:44.260
It's keeping the browser.

20:44.260 --> 20:46.260
So who's got the first question?

20:46.260 --> 20:51.980
Does it work when it's not plugged in?

20:51.980 --> 20:54.140
Does what work when it's not plugged in?

20:54.140 --> 20:56.820
No, I like that.

20:56.820 --> 21:02.100
And the calculator presentation, like that, you put some numbers at the calculator.

21:02.100 --> 21:03.100
Oh, you unplug it.

21:03.100 --> 21:07.140
Well, okay, so actually, maybe are you asking if you're not hooked up to the network or

21:07.140 --> 21:08.140
is this just a joke?

21:08.140 --> 21:10.100
It's a joke, okay.

21:10.100 --> 21:13.980
You know, actually, disconnect handling is one of the next major features in the next

21:13.980 --> 21:17.340
version of, you heard me say that especially in the next version, one of the biggest things

21:17.340 --> 21:19.820
that we need to work on actually is disconnect handling.

21:19.820 --> 21:22.340
So this is, your joke has an appropriate thing.

21:22.340 --> 21:25.500
When two different instances are talking to each other and something goes wrong, you

21:25.500 --> 21:28.860
need to propagate the information and actually register a call back to what's happening,

21:28.860 --> 21:32.060
we have part of it, we need to finish it, what's happening in the next release.

21:32.060 --> 21:34.420
So your joke is actually pretty relevant.

21:34.420 --> 21:35.420
Next question.

21:35.420 --> 21:40.420
So I'm a bit afraid of the browser.

21:40.420 --> 21:41.420
Okay.

21:41.420 --> 21:42.420
Not very minimal.

21:43.100 --> 21:48.620
Do you have any recommendations there?

21:48.620 --> 21:51.460
So if you're afraid of the browser, it's not very minimal.

21:51.460 --> 21:53.140
There's multiple things we can say about that.

21:53.140 --> 21:56.860
Number one, WebAssembly is actually a very minimal virtual machine itself and it's increasingly

21:56.860 --> 21:59.740
being used by things that are not just browsers, right?

21:59.740 --> 22:06.860
So people are starting to use it as, so actually we did two versions hilariously of the wire

22:06.860 --> 22:08.500
world thing because we're ridiculous.

22:08.500 --> 22:12.620
This first version, it's actually kind of interesting, actually runs on top of something

22:12.620 --> 22:13.620
called Wazm 4.

22:13.620 --> 22:19.940
I don't know if you've ever heard of it, but it's a virtual machine, it's a fantasy console

22:19.940 --> 22:21.300
like an old Game Boy.

22:21.300 --> 22:25.020
That's very small, very tiny, but it runs on top of WebAssembly.

22:25.020 --> 22:28.220
So this first version, one of the interesting things about Hoot is it actually includes

22:28.220 --> 22:34.460
a full, doesn't use M script in, doesn't use LLVM, doesn't use any of that BS, comes with

22:34.460 --> 22:38.220
its own assembler, its own disassembler, it comes with its own virtual machine seeking

22:38.220 --> 22:42.460
to run the things, but for developer purposes it's not fast.

22:42.460 --> 22:46.500
And you, and this is all included actually with Hoot, it's a full toolkit.

22:46.500 --> 22:50.260
So for the first version of wire world, before we had proper scheme working, this was actually

22:50.260 --> 22:54.500
written in handwritten WebAssembly, mostly by Robin, a very small amount by me, but right

22:54.500 --> 22:57.140
at the end, but mostly by Robin.

22:57.140 --> 23:03.260
And of course you can play this, you probably saw Robin do a little bit before, and it works,

23:03.260 --> 23:04.260
right?

23:04.260 --> 23:06.940
So, and you know, there you go.

23:07.940 --> 23:14.180
But the other thing is that we have, we did a second one, which was the version that we

23:14.180 --> 23:16.620
did in scheme, one scheme became available actually.

23:16.620 --> 23:21.900
So, and this one, just to give you an idea, this one, here's a size of wire world here

23:21.900 --> 23:24.740
as a scheme program, and it looks like scheme, right?

23:24.740 --> 23:26.940
And that's it, right?

23:26.940 --> 23:30.500
You know, and that powers that version of wire world, right?

23:30.500 --> 23:35.860
So the reality is, WebAssembly is useful in contexts that are not just that, but also

23:35.900 --> 23:38.780
goblins is not specific to the browser, right?

23:38.780 --> 23:44.180
The browser is the way that we are planning on reaching people, but it does not necessarily,

23:44.180 --> 23:48.300
if you're excited about goblins, but you're, the browser will not be required to be able

23:48.300 --> 23:50.740
to get geeks to use goblins, for example.

23:50.740 --> 23:53.900
We're not, we're not saying, okay, geeks has to be an electron app now, right?

23:53.900 --> 23:56.060
You know, that's not an expectation, right?

23:56.060 --> 23:59.460
So, yeah, other questions?

24:00.460 --> 24:04.460
The thing is that aren't necessarily in the scheme yet.

24:04.460 --> 24:09.460
Is there going to be interoperability with other language one time, or other ways of

24:09.460 --> 24:13.460
reaching out to existing node bases, or other, just, if when you're building, just use it

24:13.460 --> 24:14.460
as.

24:14.460 --> 24:19.460
Yeah, yeah, so right now you can actually already, I have no idea what just happened, I think

24:19.460 --> 24:25.460
this is development console, you can actually already speak with JavaScript stuff inside

24:26.460 --> 24:31.460
of, inside of, sorry, I got distracted, I'll do that.

24:31.460 --> 24:37.460
You can speak with other JavaScript applications when you're using Hoot, like the, there's

24:37.460 --> 24:43.460
a full, like, bridge between those two worlds, and also, so that's from the Hoot perspective.

24:43.460 --> 24:48.460
From the goblins perspective, there are multiple implementations being done of O'Cappen, none

24:48.460 --> 24:52.460
of them, sorry, I'm going to be early to smug here, none of them are as cool as goblins

24:52.460 --> 24:56.460
because they don't have time-transl and transactionality and all the cool crap we have.

24:56.460 --> 25:01.460
But there's like somebody doing a Haskell implementation and somebody was kind of starting on a Rust

25:01.460 --> 25:05.460
implementation and stuff like that, we would love to see more implementations of these things.

25:05.460 --> 25:10.460
And it's, there's, we have a test suite that Jessica wrote that you can actually test against.

25:10.460 --> 25:14.460
So if you would like to bring some of the ideas, we are a research institution, you know, kind

25:14.460 --> 25:19.460
of the same way that the, when Jessica and I started on doing our work on Activity Pub,

25:19.460 --> 25:24.460
it was for the purpose of something that we were working on called Media Goblin and Activity

25:24.460 --> 25:28.460
Pub, which we were working on for Media Goblin, ended up being a bigger thing than Media Goblin.

25:28.460 --> 25:32.460
In some ways we're kind of running with that, we're actually saying, well, we really want you to use our

25:32.460 --> 25:38.460
software, but also more importantly, we want to change how computing works for everyone.

25:38.460 --> 25:45.460
Any other questions? Is that it? One more there. One more? Wait, who was it? Okay, over there, go up.

25:45.460 --> 25:48.460
Yeah.

25:48.460 --> 26:17.460
So, so, so it actually does have a small talk link in that,

26:18.460 --> 26:24.460
Goblins is heavily based on, it's basically like the e-programming language, but for Scheme.

26:24.460 --> 26:31.460
And the e-programming language was heavily inspired by Smalltalk. Mark Miller and Dean Tribble and the folks who worked on that,

26:31.460 --> 26:39.460
a bunch of them came from Xanadu, actually, and they worked on, and that group actually really loved Smalltalk

26:39.460 --> 26:46.460
and they used a whole bunch of that stuff. And so, so yeah, Smalltalk has an influence on some of this stuff.

26:46.460 --> 26:53.460
Through the family lineage, basically. And now I'm going to hand this over to my lovely friend, Hisham here.

26:53.460 --> 27:04.460
Thank you.

