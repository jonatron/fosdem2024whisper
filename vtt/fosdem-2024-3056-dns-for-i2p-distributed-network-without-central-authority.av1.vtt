WEBVTT

00:00.000 --> 00:14.200
Okay, let's do it like this. Thank you very much Peter for all the efforts for the I2P

00:14.200 --> 00:20.800
deff room and by the way, do you hear me back there? Yes, lovely. Okay, right. I hope that

00:20.800 --> 00:25.640
the sound check is good now and we're not muted anymore. I'm the I2P guy. I'm one of

00:26.400 --> 00:31.400
the I2P guys and I'm talking about fully distributed networks with their specific

00:31.400 --> 00:36.560
problems. Fully distributed means truly fully distributed. So today we're also talking about

00:36.560 --> 00:48.680
systems without any trust involved, at least in theory. All right, hands up please. Who's

00:48.680 --> 00:57.360
familiar and is using I2P or who's familiar with I2P? Yes. Oh, I love you guys. That's

00:57.360 --> 01:03.000
really awesome. We have one third which is familiar with I2P so I'm really rushing through

01:03.000 --> 01:09.960
the I2P part. But then I'd like to talk about my depressive, my depressing last 12 months,

01:09.960 --> 01:17.960
which gave me really a hard time with implementing a persistent storage layer based on I2P and I

01:17.960 --> 01:23.000
will tell you why and I will tell you about all my failures and problems and yeah, I will

01:23.000 --> 01:28.840
complain a lot. No, we're talking about bit about Byzantine fault tolerance and the good

01:28.840 --> 01:39.840
and the bad of the past year. Right. Diva, I'm working for Diva Exchange but it's only

01:39.840 --> 01:44.560
an association based in Switzerland. I'm sometimes a lecturer at the University, at

01:44.600 --> 01:48.520
the Lucerne University of Applied Science, and there I'm talking about microservices

01:48.520 --> 01:53.800
and fully distributed trustless systems and stuff like that. But I'm singing nobody's song

01:53.800 --> 01:59.560
so I'm really totally completely independent and so is Diva Exchange. So we're not some

01:59.560 --> 02:06.200
coin guys or token guys, which doesn't mean that this is bad, we're just not like that.

02:06.200 --> 02:17.320
So hello I2P network. I2P is well known as a dark net because the media talks about it

02:17.320 --> 02:22.680
as a dark net, which means and we'll talk about it later that it has something to do

02:22.680 --> 02:29.200
with confidentiality and anonymity. But at the end it's an overlay network. So we have

02:29.280 --> 02:37.960
the existing internet and on top of that we place software routers to pack the traffic

02:37.960 --> 02:45.240
into packages, repackaging them, encrypting them and sending them over several hops and

02:45.240 --> 02:54.080
routers through the network. And like this we receive a confidential and anonymous message

02:54.080 --> 03:01.880
transport. I2P is no storage layer. Whatever you hear about the dark net that there is

03:01.880 --> 03:08.760
content stored etc. That's not true. I2P is not able to store content by itself. There

03:08.760 --> 03:16.680
are storage mechanisms like the interplanetary file system which is linked to file coin and

03:16.680 --> 03:24.400
these are storage layers. But these storage layers do not necessarily feature confidential

03:24.400 --> 03:36.400
and anonymous transport. Often they even fail on implementing such a layer. Six, seven months

03:36.400 --> 03:41.800
ago we made a study at the Devalor exchange and we were interested obviously in how big

03:41.800 --> 03:54.800
is the latency of UDP package transport on the I2P network. And as you can see it's slow,

03:54.800 --> 04:04.800
really slow. And that's the price for privacy. Anonymity, confidentiality is not for free.

04:04.800 --> 04:13.440
There is a price attached and this price tag within the I2P network is time. It's slow.

04:13.440 --> 04:19.000
Maybe but that's a theory and we need to look at the university into it. Maybe with a strongly

04:19.000 --> 04:26.280
increased number of routers maybe we can increase the bandwidth. But that's just maybe. I don't

04:26.280 --> 04:34.360
know. We have to do scientific research on that. But this is the current state. Now a

04:34.440 --> 04:45.840
dark net, an overlay network as I2P has cryptographic addresses. They are public keys and often it's

04:45.840 --> 04:54.320
a hash of a public key. And these B32 addresses so long cryptographic strings like up here

04:54.320 --> 05:00.600
are not human friendly. I will not talk about so-called triangle at 6.30 this evening in

05:00.600 --> 05:05.560
this room. You will have a presentation about this topic which is for sure also highly

05:05.560 --> 05:10.520
interesting. But we have these hashes and we need to map them to human friendly names.

05:10.520 --> 05:18.480
That's our job which we have to do in such a network. And that's why that's the motivation

05:18.480 --> 05:27.040
we need at DNS. But the only thing which I2P really has is a local address book. So each

05:27.080 --> 05:34.800
router, each note, there is nothing like a central authority. Each private note has its

05:34.800 --> 05:41.760
own look up key value store. It's called address book. So there you have a friendly name like

05:41.760 --> 05:52.680
diva.i2p linked to a hash or to a B32 address to simplify things. And if I'm loading somebody

05:52.720 --> 06:00.840
else's address book, this is a choke because that's a trusted operation. And within I2P

06:00.840 --> 06:06.360
we usually say we don't trust no one, it's trustless. So obviously we cannot just load

06:06.360 --> 06:16.080
address books from somewhere. Additionally within the I2P network if you're looking at

06:16.080 --> 06:21.360
the specifications and if you're looking at how the network is working today, we do have

06:21.400 --> 06:28.480
jump services, we do have kind of like registries, but all these services are again a delegation

06:28.480 --> 06:33.800
of trust, nothing which we really want. And as you can see ladies and gentlemen, I'm really

06:33.800 --> 06:39.760
critical towards the I2P network. I see the central components which we have within this

06:39.760 --> 06:45.120
network and I'm criticizing them. But not criticizing in a negative manner, I'm rather

06:45.120 --> 06:51.160
trying to make me as a developer and also the other developers to be aware of these

06:51.200 --> 07:02.200
central components. Right. Now Goethe, German, des Pudelskerren, the core of it all. Why

07:02.200 --> 07:09.560
are we doing this at diva? Why am I doing this? I want to have a service, a storage

07:09.640 --> 07:20.920
service and hence a DNS service which is A, fully anonymous, B, immutable, C, really

07:20.920 --> 07:27.680
barrier free. And barrier free is an interesting concept if you start to think about it. A coin,

07:27.680 --> 07:36.400
whatever it is, Filecoin, Namecoin, Monero, Bitcoin, Ethereum, I don't care, is not by

07:36.400 --> 07:45.360
its definition barrier free because, well, you have to acquire it somehow. So there is

07:45.360 --> 07:53.160
a barrier and barrier free in the meaning of device change means you have a very low hardware

07:53.160 --> 08:01.160
requirement to enter the network just to drop a name, a raspberry or any other low power

08:01.160 --> 08:09.120
device and ta-da, your member of the network and you can store stuff. And if the barrier

08:09.120 --> 08:19.000
is that low, by definition, the spam will be high. So we have to think about a cost function

08:19.000 --> 08:22.680
but the question is how is this cost function going to look like? We're going to discuss

08:22.680 --> 08:29.200
this in a minute and trustless. Again, I2P is built, architected, engineered in the last

08:29.240 --> 08:36.320
20 years as a trustless system. Trustless means I really need to only look at my own

08:36.320 --> 08:42.680
node and either my node is right or it's wrong. I don't need to care to whom I'm connecting

08:42.680 --> 08:51.240
to because every data which is incoming, I have to verify myself. If I'm not doing the

08:51.240 --> 09:02.720
local math, I'm trusting somebody else and that's a bad idea in the context of I2P. Trust.

09:02.720 --> 09:10.960
I can tell you trust me the earth is flat. Now we all know that the concept of trust means

09:10.960 --> 09:20.280
I'm believing in a wrong set of root data or made upset. It's just invented and as if

09:20.320 --> 09:30.120
I'm starting to invent root data, I can prove anything because the root data is fake. I

09:30.120 --> 09:38.480
don't like that word. The root data is made up. Now if you're building your system of

09:38.480 --> 09:48.400
trust, your system will grow and we know in IT, but actually at least the view I have

09:48.520 --> 09:54.480
from my specific scientific point of view that the larger systems are growing, the more

09:54.480 --> 10:00.680
problems we do have in these systems because we need to introduce regulation that the trust

10:00.680 --> 10:06.520
is not abused. More regulation means later even more regulation and so it gets more and

10:06.520 --> 10:13.920
more complicated over time. One of the typical solutions, at least what I'm lecturing about

10:13.960 --> 10:21.120
is keep your system small. So base your decisions on math, base your system on math, keep them lean

10:22.240 --> 10:32.640
and at the end add a cost function to prevent spam or abuse to be a bit more generic. I2P

10:34.160 --> 10:43.280
is at least from my point of view, a network which enables

10:44.000 --> 10:58.600
small and lean systems. Right, where am I? 1540. In history, building a DNS on a fully

10:58.600 --> 11:07.160
distributed network, the approach isn't new. One of the older approaches is our systems

11:07.240 --> 11:16.240
which are based on the hash cash function which was properly described in 1990s and then

11:16.240 --> 11:24.280
leads to proof of work systems and these proof of work systems, they created currencies,

11:25.480 --> 11:32.840
like we all know Bitcoin. Maincoin then came in and other things which are proof of work. What

11:32.840 --> 11:42.280
I can guarantee you is proof of work is working. Proof of work as a cost function is mathematically,

11:42.280 --> 11:49.520
at least what we know today, perfectly working but it's extremely inefficient because it's a race.

11:49.520 --> 11:55.560
It's a race for the fastest solution. This is a bit trivial but at the end of the day it's a race

11:55.720 --> 12:03.880
and this race is inefficient. Now, I always resisted to implement yet another proof of

12:03.880 --> 12:10.200
work function, not because it's not working, just I didn't want it. What I also not wanted

12:10.200 --> 12:18.600
was the Filecoin interplanetary file system solution which is a validator approach because

12:18.600 --> 12:25.040
validator approach means nothing else and Filecoin did its moit. They used DRAN to select

12:25.080 --> 12:32.280
validators but they're just shifting the problem from their own system to another system and

12:32.280 --> 12:38.760
then they say we're solved but that's not true. At the end you just move the attack vector

12:38.760 --> 12:46.760
away from your own system just to open up another attack vector and for me, just for me,

12:46.760 --> 12:55.000
currency based, proof of work based or validator based is not really an approach and as I

12:55.000 --> 13:01.680
am an economist which I studied, I feel very uneasy, very, very uneasy about non-fungible

13:01.680 --> 13:11.880
currencies. There aren't many. A few are. Make your own research and you will find out which

13:11.880 --> 13:18.880
are really fungible. The others are difficult. Let me put it like this. Then there are Naive

13:18.880 --> 13:25.880
concepts which are very nice, highly performing but at the end you need in the area of DNS

13:25.880 --> 13:34.160
and in the area of DBA what we're talking about, immutability and integrity. Right, I want to

13:34.160 --> 13:46.960
lose a few words about the CAP theorem because consistency, availability and partition tolerance

13:47.040 --> 13:53.280
are a triangle within this CAP theorem and it's said that you have to choose two out

13:53.280 --> 14:02.780
of these three. Now some blockchain guys said hey we solved it, now we have all three. At

14:02.780 --> 14:11.640
least with Butante's fault tolerance I have my doubts and honestly I do not see any concept

14:11.640 --> 14:18.440
out in the wild which really solves that problem except proof of work and we don't want that.

14:18.440 --> 14:25.360
So this year and that was part of my biggest struggle. We had to leave and that was the

14:25.360 --> 14:32.640
talk I had in 2023 exactly here at this place about democratic Butante's fault tolerance

14:32.640 --> 14:39.040
which is developed by the University in Lausanne in Switzerland and also in Sydney, Australia

14:39.040 --> 14:47.160
and sorry guys with I2P this concept is not working because and we're talking about fallacies

14:47.160 --> 14:54.280
right afterwards about the problems with such networks, democratic Butante's fault tolerance

14:54.280 --> 15:03.360
was a fail. So we went as Diva chain into eventual consistency because the big problems

15:03.360 --> 15:13.560
in distributed computing known since the 90s are things like we have zero network latency

15:13.560 --> 15:22.560
wrong, we have unlimited bandwidth wrong, we have a secure network wrong and we all know

15:22.560 --> 15:31.560
that as Diva Loppers but sometimes in the lab we go into a perfect world, dream of something,

15:31.560 --> 15:37.280
create something and then in the real world it's not working and that's why my biggest

15:37.280 --> 15:46.040
tip for every blockchain developer in the universe tested on I2P. If it's still working

15:46.040 --> 15:55.000
you probably done a good job and that's exactly one of the core messages. I2P has that many

15:55.000 --> 16:02.840
network transport problems which are the price for privacy and which we want that it's

16:02.840 --> 16:10.000
a very good test case, a very good transport layer for all the blockchain developers out

16:10.000 --> 16:20.240
there including myself. So what we did in the last 12 months with Diva chain and obviously

16:20.240 --> 16:31.080
you'll find it on GitHub, we created a transaction based system which is barrier free, immutable,

16:31.080 --> 16:36.480
trustless and based on I2P, so fully anonymous. It's working now, it's working since about

16:36.480 --> 16:43.920
three weeks. The students, the last three weeks at the University of Applied Science in Lucerne

16:43.920 --> 16:50.440
wrote a little prototype with I2P but they had a lot of API troubles and struggles because

16:50.440 --> 16:56.880
I made mistakes so it was my mistake and at the end I couldn't present here the final

16:56.880 --> 17:02.600
prototype but because of me not because of the students, they did a good job. And what

17:02.600 --> 17:14.760
we're thinking today is how to implement the cost function because at the end a barrier

17:14.760 --> 17:22.720
free system I already said that will attract a lot of spam, a lot of DNS spam, a lot of

17:22.720 --> 17:31.880
content spam, a lot of whatever we can use this system for spam and that's not me as

17:31.880 --> 17:39.840
one of the developers that's not my intention. So probably it will be a function of availability

17:39.840 --> 17:45.400
and a function of cooperation and when you read this now and when you think this is new,

17:45.400 --> 17:54.680
no it's not. Filecoin already implemented this since 2014. The only problem they had

17:54.680 --> 18:01.240
was their validator selection so they made the mistake of using a validator function

18:01.240 --> 18:07.360
to implement their consensus but this they call this proof of storage, the function of

18:07.360 --> 18:13.400
availability and the other one they call it proof of window consistency or something

18:13.400 --> 18:17.880
like that but you have to prove two things. First you have to prove in the network, prove

18:17.880 --> 18:24.280
means mathematical proof that your content is stored and B that your content is continuously

18:24.280 --> 18:31.400
stored. So these concepts here are not new, I would just like think about it a bit more

18:31.400 --> 18:38.200
and then implement it. I already talked about my core failures or our core failures in our

18:38.200 --> 18:45.560
very little team. Democratic Britsantin false tolerance, a very nice concept, a very nice

18:45.560 --> 18:53.440
book, I learned a lot, it didn't work. The eventual consistency approach is working since

18:53.480 --> 19:00.760
a few weeks, API is highly unstable, I have a lot of coding work ahead of me, in front

19:00.760 --> 19:09.560
of me and I'm looking very much for feedback so if anybody is interested in hacking in,

19:09.560 --> 19:18.320
I'm always happy if somebody wants to contribute and the academia feedback was also very positive

19:18.360 --> 19:26.720
so I could show a few interesting things in the past months. Please in the last two minutes

19:26.720 --> 19:37.160
take out, in the last minute take out this take out, we believe that the eventual consistent

19:38.160 --> 19:49.080
DNS or blockchain like system used for this DNS challenge is a reasonable approach, eventual

19:49.080 --> 19:58.160
consistent so we drop blockchain consensus and replace it by eventual consistency transaction

19:58.160 --> 20:06.040
based. The core challenges as know today, we need to implement the cost function which

20:06.040 --> 20:14.680
is reasonable, decisions, decisions in our wording or nothing else, there is a global

20:14.680 --> 20:25.120
state where all peers and I2P network agree on a specific state of data and the participation

20:25.120 --> 20:31.240
is very welcome. In the presentation on the web which you'll find in this deaf room on

20:31.240 --> 20:39.760
the fourth step page you find all the sources and some more stuff so if you have questions

20:39.760 --> 20:51.080
please shoot. Yes please. Could you explain what you meant by immutability? His question

20:51.080 --> 20:57.640
was could you please explain what you mean by immutability? The answer is once written

20:57.640 --> 21:02.520
never change again. Yes please.

21:02.520 --> 21:24.760
Right he's asking in our system we're going to have a lot of traffic, we're going to

21:24.760 --> 21:29.280
have a lot of records stored right did I did I summarize that correctly and that's a problem

21:29.280 --> 21:38.520
right or that's your question in terms of storage right first compared to other approaches

21:38.520 --> 21:46.120
Diva chain because DNS is a side project we never like handshake or other projects we

21:46.120 --> 21:55.120
never intended to replace the current domain name systems therefore the clear net we always

21:55.120 --> 22:03.440
wanted to match I2P names like Diva.I2P because nobody is going to give us a domain to be

22:03.440 --> 22:10.200
32 addresses so no we don't have much traffic there and so the storage problem is nothing

22:10.200 --> 22:15.840
I'm currently thinking about but yes there will be sooner or later scalability questions

22:15.840 --> 22:41.200
you're absolutely right but in this baby state I don't really care. Yes please.

22:41.200 --> 22:48.040
This question was if it's immutable how can I change things? In the blockchain world you

22:48.040 --> 22:53.840
never change a record you just let it live in a block or let's call it inner transaction

22:53.840 --> 22:58.920
and then you just create a new transaction on top and this new transaction is the new

22:58.920 --> 23:04.920
state because in a blockchain you always look from the top and the last state is the thing

23:04.920 --> 23:13.840
you believe in because it's properly proved using math. Is your answer given? Okay. Maybe

23:13.840 --> 23:33.200
a question from the phone? No other questions? Thank you.

