WEBVTT

00:00.000 --> 00:08.560
All right, so this is the talk on SpiceDB.

00:08.560 --> 00:10.040
Thanks everyone for showing up.

00:10.040 --> 00:13.200
So early in the morning, I'm starting to lose my voice

00:13.200 --> 00:14.920
because there's a long day yesterday of talking

00:14.920 --> 00:15.880
and meeting awesome people.

00:15.880 --> 00:18.360
This is my first FOSDOM.

00:18.360 --> 00:19.760
So who am I?

00:19.760 --> 00:20.880
My name is Jimmy Zalinski.

00:20.880 --> 00:22.440
I'm the co-founder of a company called

00:22.440 --> 00:26.200
OthZed, an OthZed-billed SpiceDB.

00:26.200 --> 00:28.560
Previously, I worked at Red Hat and CoralS.

00:28.560 --> 00:31.400
So I've been around in the container and Kubernetes

00:31.400 --> 00:34.400
ecosystem for a pretty long time, basically

00:34.400 --> 00:36.000
since the beginning.

00:36.000 --> 00:38.480
There, I'm actually a maintainer of OCI,

00:38.480 --> 00:42.720
which is the standard specification for Linux containers.

00:42.720 --> 00:45.160
And I've also started a bunch of projects in that space,

00:45.160 --> 00:49.680
notably Kubernetes operator framework and some others.

00:49.680 --> 00:52.200
This talk is entitled SpiceDB.

00:52.200 --> 00:56.400
But since FOSDOM is more of a developer community conference,

00:56.400 --> 00:59.840
I really wanted to focus less on this talk being a vendor

00:59.840 --> 01:03.440
pitch for SpiceDB, but actually more of a level

01:03.440 --> 01:06.880
set about the problems in the authorization space

01:06.880 --> 01:09.960
and the history and status quo of that.

01:09.960 --> 01:15.840
So that everyone understands what might be the best tool

01:15.840 --> 01:17.000
to solve their problems.

01:17.000 --> 01:19.960
I'm not going to try to sell you SpiceDB for all problems,

01:19.960 --> 01:21.320
because the more informed you are,

01:21.320 --> 01:23.400
the better you can pick the product that's actually

01:23.400 --> 01:25.040
going to complement your software stack

01:25.040 --> 01:26.680
and what you need.

01:26.680 --> 01:29.120
And that means there's going to be way more qualified people

01:29.120 --> 01:31.360
using SpiceDB and way more qualified people using other

01:31.360 --> 01:33.400
authorization tooling.

01:33.400 --> 01:35.320
Obviously, I'm the most jazzed about SpiceDB

01:35.320 --> 01:38.320
because I created it.

01:38.320 --> 01:39.600
So why are we all here?

01:39.600 --> 01:46.120
We're all here because there is a not-for-profit organization

01:46.120 --> 01:49.000
called OWASP, which is the Open Worldwide Application

01:49.000 --> 01:50.320
Security Project.

01:50.320 --> 01:53.160
And they kind of got started in the early 2000s.

01:53.160 --> 01:56.200
And they're famous for having this list called the Top 10.

01:56.200 --> 01:59.560
And the Top 10 is basically an enumeration

01:59.560 --> 02:05.080
of the highest risk, the highest threats for web security.

02:05.080 --> 02:09.880
And as of 2017, broken access control was number five.

02:09.880 --> 02:13.960
As of 2021, broken access control is number one.

02:13.960 --> 02:18.160
That means this is the biggest threat to the web

02:18.160 --> 02:20.960
and to all the applications running internet

02:20.960 --> 02:23.080
facing to the web.

02:23.080 --> 02:24.960
But really, the question is, how do we actually

02:24.960 --> 02:25.840
get to this point?

02:25.840 --> 02:27.200
Like, how did this happen?

02:27.200 --> 02:30.400
And how did it happen so quickly?

02:30.400 --> 02:31.800
I'm not going to point any fingers,

02:31.800 --> 02:32.880
but what I'm actually going to do

02:32.880 --> 02:35.560
is kind of dive into two different groups of stakeholders

02:35.560 --> 02:38.120
in kind of the history of authorization.

02:38.120 --> 02:41.040
There is kind of the academia and people

02:41.040 --> 02:43.800
publishing papers in this space, kind of defining concepts.

02:43.800 --> 02:45.480
And then there's the industry practitioners

02:45.480 --> 02:47.320
that are actually building the software

02:47.320 --> 02:50.080
and realizing these systems as they're actually

02:50.080 --> 02:51.920
connected to the web.

02:52.280 --> 02:54.520
I'm going to start with academia first.

02:54.520 --> 02:56.400
So on the right-hand side, you're

02:56.400 --> 02:57.320
going to see a timeline.

02:57.320 --> 02:58.440
And then on the left-hand side, there's

02:58.440 --> 02:59.240
going to be some notes.

02:59.240 --> 03:00.880
And then not for this slide, but you'll

03:00.880 --> 03:03.800
see QR codes in this corner as well.

03:03.800 --> 03:07.240
Those QR codes are going to link to the specific novel paper.

03:07.240 --> 03:09.680
So if you're interested in any of these particular concepts,

03:09.680 --> 03:12.840
you can feel free to scan the QR codes.

03:12.840 --> 03:15.640
But our history kind of of authorization

03:15.640 --> 03:17.760
is going to actually start in the 80s.

03:17.760 --> 03:20.680
And it kind of gets really kicked off

03:20.680 --> 03:24.320
with this publication of the Trusted Computer System

03:24.320 --> 03:28.840
Evaluation Criteria, which is a security practices book

03:28.840 --> 03:31.920
published by the US Department of Defense.

03:31.920 --> 03:34.480
And in it, it's outlining a lot of different security

03:34.480 --> 03:38.680
practices that are effectively a part of the military,

03:38.680 --> 03:39.960
the United States military.

03:39.960 --> 03:43.000
And in it, they kind of describe these two different access

03:43.000 --> 03:46.240
control systems, discretionary and mandatory.

03:46.240 --> 03:50.080
Now, discretionary is effectively just

03:50.080 --> 03:54.240
if you created the idea or the information, you can share it.

03:54.240 --> 03:58.240
And if you're then given access to that, you can share that.

03:58.240 --> 04:00.520
It's at your discretion.

04:00.520 --> 04:02.160
I kind of use file systems.

04:02.160 --> 04:04.240
And Google Docs is an example here.

04:04.240 --> 04:05.680
It's not a perfect one-to-one match.

04:05.680 --> 04:09.800
But if someone shares a file with you on a UNIX file system,

04:09.800 --> 04:12.640
you can copy that file if you have read access.

04:12.640 --> 04:15.680
And then you can change whatever permissions on that

04:15.680 --> 04:18.920
and share that, similarly with Google Docs.

04:18.920 --> 04:20.960
So it's at your discretion how you're

04:20.960 --> 04:24.560
going to share that information once you're given read access.

04:24.560 --> 04:26.040
Then there's mandatory access control,

04:26.040 --> 04:30.280
which is effectively a long list, an exhaustive list,

04:30.280 --> 04:33.640
of all the access for a particular thing.

04:33.640 --> 04:36.240
Most notably, people are kind of most familiar with SE Linux

04:36.240 --> 04:37.440
as the example of this.

04:37.440 --> 04:39.000
If you're unfamiliar with SE Linux,

04:39.000 --> 04:42.040
it's a way of locking down the Linux kernel.

04:42.040 --> 04:44.960
Honestly, it kind of comes with a negative connotation

04:44.960 --> 04:47.960
because mandatory access control is very verbose

04:47.960 --> 04:49.560
and very difficult to get right because you have

04:49.560 --> 04:52.560
to enumerate absolutely everything.

04:52.560 --> 04:55.000
Some people say that the three-letter agency

04:55.000 --> 04:56.320
at the US government that created this

04:56.320 --> 04:57.720
are the only people who actually know how

04:57.720 --> 05:00.120
to configure this correctly.

05:00.120 --> 05:02.680
I don't know if that's actually true or how many people use it.

05:02.680 --> 05:05.800
I know Red Hat is one of the folks that actually

05:05.800 --> 05:07.440
does promote SE Linux.

05:07.440 --> 05:09.200
But the one thing about this slide I really

05:09.200 --> 05:11.960
wanted to kind of drive home is these ideas,

05:11.960 --> 05:14.440
they're as old as the military and war itself.

05:14.480 --> 05:17.400
There's nothing novel about the 80s where these ideas got

05:17.400 --> 05:18.280
invented.

05:18.280 --> 05:21.120
But what actually happened was someone only actually ever

05:21.120 --> 05:23.160
thought to write this down in the 80s.

05:23.160 --> 05:28.240
So it took that long after using these ideas for many, many,

05:28.240 --> 05:30.720
many years.

05:30.720 --> 05:35.520
So we jump roughly 10 years, 9 years to 1992,

05:35.520 --> 05:38.920
which happens to also be the year I was born.

05:38.920 --> 05:41.880
That makes me feel relatively old.

05:41.920 --> 05:47.160
But in 1992, we get this paper published on role-based access

05:47.160 --> 05:47.840
control.

05:47.840 --> 05:50.200
And role-based access control, often called

05:50.200 --> 05:53.120
RBAC, is kind of where actually most people

05:53.120 --> 05:57.000
believe the state of the art for authorization systems is.

05:57.000 --> 06:01.360
The core idea is basically there is a group that

06:01.360 --> 06:03.360
is assigned access to a particular thing.

06:03.360 --> 06:05.360
And those groups are called roles.

06:05.360 --> 06:08.560
And then you map users into these roles.

06:08.560 --> 06:11.400
And by means of being in this role,

06:11.400 --> 06:15.320
you get access delegated to you.

06:15.320 --> 06:18.120
The kind of number one problem with RBAC

06:18.120 --> 06:22.480
is that everyone kind of defines it differently.

06:22.480 --> 06:24.040
If you build any enterprise software,

06:24.040 --> 06:25.360
you're going to talk to clients and they're

06:25.360 --> 06:28.280
going to ask you for RBAC.

06:28.280 --> 06:31.360
But the difference is if I look at two different enterprise

06:31.360 --> 06:34.080
applications, how they implement RBAC entirely differently.

06:34.080 --> 06:38.040
The only commonality is this mapping of users

06:38.040 --> 06:41.440
into groups that then have access.

06:41.440 --> 06:44.360
This is kind of going to be a recurring theme

06:44.360 --> 06:46.440
across all of these papers published in academia,

06:46.440 --> 06:52.560
anything with Starback, because they're documenting concepts,

06:52.560 --> 06:55.240
but not actually specifications that would give you

06:55.240 --> 07:01.120
an ultimately cohesive and designed and secure system.

07:01.120 --> 07:05.160
So kind of most famously, the biggest issue kind of with RBAC

07:05.160 --> 07:07.000
is that there really is no scope.

07:07.000 --> 07:10.080
If you say someone is an admin, does

07:10.080 --> 07:12.120
that mean they're an admin of the entire web app?

07:12.120 --> 07:14.600
Does that mean they're an admin of a particular resource

07:14.600 --> 07:15.920
in the app?

07:15.920 --> 07:20.320
You just don't know until you actually build it yourself.

07:20.320 --> 07:22.040
So there's not really an easy way

07:22.040 --> 07:25.720
to reason about these systems until you actually touch them.

07:25.720 --> 07:29.800
So we jump actually well into the future now into 2015.

07:29.800 --> 07:33.760
And now is when the paper on ABAC, which is attribute based

07:33.760 --> 07:35.320
access control, is written.

07:35.320 --> 07:37.280
Effectively, the idea behind ABAC is

07:37.280 --> 07:40.120
to kind of generalize on RBAC and say,

07:40.120 --> 07:44.800
the role that you're assigned, that is just one attribute

07:44.800 --> 07:46.480
that your user can have.

07:46.480 --> 07:48.920
And other attributes might be that you logged in

07:48.920 --> 07:51.080
with this IP address.

07:51.080 --> 07:55.000
Many other dynamic attributes can be assigned to you.

07:55.000 --> 07:57.320
The kind of really important thing about ABAC

07:57.320 --> 07:59.560
is it's providing this real time context.

07:59.560 --> 08:00.960
So now you can kind of write rules,

08:00.960 --> 08:03.960
like are they connecting from this country, this subnet,

08:04.000 --> 08:05.200
this time.

08:05.200 --> 08:08.120
You can delegate access at particular windows of time

08:08.120 --> 08:12.520
and kind of perform more logic on these attributes

08:12.520 --> 08:15.200
that folks have.

08:15.200 --> 08:20.920
And now we're going to take a huge digression back to 1965.

08:20.920 --> 08:24.480
So if you're unfamiliar, Multix is actually

08:24.480 --> 08:27.560
this operating system that was developed between MIT, GE,

08:27.560 --> 08:29.400
and Bell Labs.

08:29.400 --> 08:31.440
You might not remember it, but it actually inspired

08:31.440 --> 08:33.840
an operating system you're probably familiar with.

08:33.880 --> 08:34.720
Unix.

08:34.720 --> 08:37.760
So Unix is actually an attempt at making

08:37.760 --> 08:41.960
Multix concepts ported to less expensive hardware.

08:41.960 --> 08:46.480
Multix is often credited as the operating system,

08:46.480 --> 08:48.480
like the first operating system that has access control

08:48.480 --> 08:49.680
for the file system.

08:49.680 --> 08:51.160
I actually don't know if that's true,

08:51.160 --> 08:53.840
but it's often credited as that.

08:53.840 --> 08:57.160
So in Multix, you have a file system tree,

08:57.160 --> 08:59.600
so you get hierarchical structure.

08:59.600 --> 09:02.800
And then at every branch, which would be a file or a directory,

09:02.840 --> 09:07.040
you can have five different attributes assigned to that file.

09:07.040 --> 09:08.960
You get read, write, exact append.

09:08.960 --> 09:10.280
These are all kind of file operations

09:10.280 --> 09:12.560
that you'd be familiar with.

09:12.560 --> 09:15.680
But there's this fifth one that's super interesting called

09:15.680 --> 09:17.560
Trap, and that actually gives you the ability

09:17.560 --> 09:19.760
to do callbacks and to see functions.

09:19.760 --> 09:22.000
And it was initially designed so you

09:22.000 --> 09:24.680
could do file walking in user space.

09:24.680 --> 09:29.080
But kind of like the whole thing with Multix

09:29.080 --> 09:31.680
and the reason why I bring it up is because there was

09:31.720 --> 09:33.680
inheritance, there was aback, and there

09:33.680 --> 09:36.800
was user-defined functions in an authorization system.

09:36.800 --> 09:42.280
In 1965, when in academia, the ideas behind attributes

09:42.280 --> 09:44.400
were published in 2015.

09:44.400 --> 09:48.360
So there are systems using these concepts,

09:48.360 --> 09:51.400
but they maybe haven't been formalized and written down

09:51.400 --> 09:52.920
in the concrete form.

09:52.920 --> 09:57.000
And this is kind of like a huge issue with the whole space,

09:57.000 --> 09:59.520
because people are doing things, but they're not really

09:59.520 --> 10:03.440
studying how to make these systems robust with these ideas.

10:03.440 --> 10:07.520
They're kind of more just documenting these ideas ad hoc.

10:07.520 --> 10:11.840
So getting back to the normal timeline, we hit 2019.

10:11.840 --> 10:14.840
It's actually in 2007 that the term is coined

10:14.840 --> 10:16.840
relationship-based access control.

10:16.840 --> 10:18.480
And the idea behind this is actually

10:18.480 --> 10:21.720
that by establishing a chain of relationships,

10:21.720 --> 10:26.520
like Jimmy is a speaker at FOSDOM and speakers at FOSDOM

10:26.520 --> 10:30.600
have access to the FOSDOM speaker matrix chat.

10:30.600 --> 10:33.720
If you can follow these chains of relationships,

10:33.720 --> 10:37.280
you can actually go from Jimmy has access

10:37.280 --> 10:40.240
to the FOSDOM speaker room.

10:40.240 --> 10:44.000
So this term is kind of coined around then,

10:44.000 --> 10:50.160
and it's looking forward at what tech in the Web 2.0 era

10:50.160 --> 10:51.960
will look like.

10:51.960 --> 10:55.320
It's published initially while considering

10:55.320 --> 10:58.760
how Facebook, the social graph, works internally.

10:58.760 --> 11:01.200
So when you share photos on Facebook,

11:01.200 --> 11:03.160
you say, friends of friends can view this.

11:03.160 --> 11:05.160
You're literally defining it in terms of relationship

11:05.160 --> 11:06.960
to yourself.

11:06.960 --> 11:10.160
So we hit 2019, and actually that's

11:10.160 --> 11:13.440
when Google publishes a paper called Zanzibar, which

11:13.440 --> 11:16.280
is documenting an internal system at Google powered

11:16.280 --> 11:17.600
by these concepts.

11:17.600 --> 11:21.000
And the difference and the reason why I have 2019 for you

11:21.000 --> 11:23.760
back is because Google is documenting a concrete

11:23.760 --> 11:25.720
implementation of this.

11:25.720 --> 11:28.280
Unlike a lot of these other papers talking about concepts,

11:28.280 --> 11:30.360
it's talking about an application of these concepts

11:30.360 --> 11:31.960
and really giving you a framework for how

11:31.960 --> 11:33.720
to use this effectively and in a correct way

11:33.720 --> 11:36.920
across multiple products at Google.

11:36.920 --> 11:39.640
So then in 2021, SpiceDB is open source,

11:39.640 --> 11:43.480
which is also implementing the similar concepts to Zanzibar.

11:43.480 --> 11:46.600
And obviously, I'm going to get into that later.

11:46.600 --> 11:49.160
There are other models like Starbucks,

11:49.160 --> 11:51.480
but that's kind of like the primary ones

11:51.480 --> 11:52.800
that I see mostly in industry.

11:52.800 --> 11:57.000
You can dive into Wikipedia if you're interested in other ones.

11:57.000 --> 11:59.560
But now you've got kind of the industry side of things.

11:59.560 --> 12:01.040
We're leaving academia.

12:01.040 --> 12:04.160
And industry has this problem, which

12:04.160 --> 12:05.920
they go to build in a web application.

12:05.920 --> 12:10.760
And your first job is just build the MVP, the minimum viable

12:10.760 --> 12:12.440
product of your web application.

12:12.440 --> 12:14.640
So what you're going to do is do what you do with everything

12:14.640 --> 12:17.600
in a web application, which is store data in a database,

12:17.600 --> 12:19.320
probably the relational database you're using

12:19.320 --> 12:20.320
for everything else.

12:20.360 --> 12:24.120
And you're going to try to check if a user has particular access

12:24.120 --> 12:25.880
based on some data you store in the database.

12:25.880 --> 12:29.000
It might maybe going to be a role if you're inspired by RBAC.

12:29.000 --> 12:32.600
But maybe it's just a numeration of the list of users

12:32.600 --> 12:34.000
that can do a particular thing.

12:34.000 --> 12:37.560
So you may have written code that looks like this.

12:37.560 --> 12:41.040
But the problem is this falls over at some point in time,

12:41.040 --> 12:44.120
whether fundamentally you build a system that actually

12:44.120 --> 12:46.640
is just really slow, or you have to build a new system that

12:46.640 --> 12:50.080
is way faster than you ever intended it for it to be.

12:50.080 --> 12:53.000
Or you basically get users of your software

12:53.000 --> 12:57.480
that demand new functionality that is not actually

12:57.480 --> 12:59.520
possible for you to implement until you refactor

12:59.520 --> 13:00.960
your authorization code.

13:00.960 --> 13:05.720
So a great example of that is if they want recursive teams.

13:05.720 --> 13:07.360
So if you have groups of users, what

13:07.360 --> 13:08.480
if you have groups of groups?

13:08.480 --> 13:11.160
Or groups of groups of groups, right?

13:11.160 --> 13:13.120
That is something that most people cannot build,

13:13.120 --> 13:15.200
or they don't build in their initial MVP.

13:15.200 --> 13:16.880
And when you get functionality like that,

13:16.880 --> 13:18.680
you're forced to completely rewrite your authorization

13:18.680 --> 13:20.200
system.

13:20.200 --> 13:21.360
The other thing that could happen to you

13:21.360 --> 13:23.320
is your company buys another company,

13:23.320 --> 13:25.880
and they're based in a different continent.

13:25.880 --> 13:28.840
And that means all the requests for checking permissions

13:28.840 --> 13:32.760
now have to travel across an ocean if they want to be correct.

13:32.760 --> 13:34.480
That's a huge problem.

13:34.480 --> 13:38.040
And making sure that the performance is actually

13:38.040 --> 13:40.080
going to be viable, and the answers you're

13:40.080 --> 13:42.520
going to get for authorization questions are correct

13:42.520 --> 13:45.920
is a difficult problem.

13:45.960 --> 13:48.560
So you hit one of these kind of big issues,

13:48.560 --> 13:53.080
and then you kind of are forced to enter the cycle

13:53.080 --> 13:54.120
that I'm going to get into.

13:54.120 --> 13:56.680
But these numbers are kind of fudged.

13:56.680 --> 13:58.320
But the whole point is that if you

13:58.320 --> 14:02.200
take an engineer, probably with expertise in that web app,

14:02.200 --> 14:05.200
has worked on this authorization system,

14:05.200 --> 14:07.480
it's going to take them a while to implement this.

14:07.480 --> 14:09.240
It's going to be super sensitive because someone else is

14:09.240 --> 14:10.840
going to have to review it.

14:10.840 --> 14:13.600
That person is going to also have to be deeply embedded

14:13.600 --> 14:15.080
in that code base.

14:15.080 --> 14:17.960
They're going to be extraordinarily careful

14:17.960 --> 14:21.240
because any mistake that happens in this code base

14:21.240 --> 14:22.960
is going to be a CVE.

14:22.960 --> 14:25.000
It's giving access to people that shouldn't

14:25.000 --> 14:26.400
otherwise have access.

14:26.400 --> 14:28.360
So that's going to take a long time.

14:28.360 --> 14:30.720
Then you're going to do QA. You might actually

14:30.720 --> 14:32.680
have to perform a security audit before you can deploy

14:32.680 --> 14:34.680
this software because you're deploying

14:34.680 --> 14:36.160
to enterprise environments.

14:36.160 --> 14:37.720
And then you're also probably going

14:37.720 --> 14:39.680
to want to take extra time rolling out these changes

14:39.680 --> 14:40.440
into production.

14:40.440 --> 14:42.800
You probably don't want to deploy it to everyone all at once.

14:42.800 --> 14:45.040
You probably want to deploy to a minor subset

14:45.040 --> 14:47.600
just in case you find something wrong with the code.

14:47.600 --> 14:49.640
And all of this just takes time.

14:49.640 --> 14:52.880
And the problem is it's actually putting security

14:52.880 --> 14:58.120
of your software at odds with development velocity.

14:58.120 --> 15:00.680
Fundamentally, it's going to take you too long

15:00.680 --> 15:02.360
to add this functionality.

15:02.360 --> 15:03.960
And you're going to want to take shortcuts.

15:03.960 --> 15:08.160
But shortcuts are security flaws in your software.

15:08.160 --> 15:10.800
So then as rinse and repeat, you basically

15:10.800 --> 15:13.720
don't know how long until the pain is going to build up

15:13.720 --> 15:16.520
where you're forced to rewrite these authorization systems.

15:16.520 --> 15:20.280
And that is the mystery box entirely.

15:20.280 --> 15:22.720
You could finish or not even be finished rewriting

15:22.720 --> 15:24.440
your authorization system.

15:24.440 --> 15:26.340
And then all of a sudden, a new user

15:26.340 --> 15:27.880
sets some requirement for you.

15:27.880 --> 15:28.680
And you're doomed.

15:28.680 --> 15:30.880
You have to completely rewrite the thing you just thought

15:30.880 --> 15:34.720
you re-architected to be future proof.

15:34.720 --> 15:37.520
So how do we fix this?

15:37.520 --> 15:38.920
There's never ending cycle.

15:38.920 --> 15:42.400
And OAS themselves actually have recommendations for this.

15:42.400 --> 15:46.560
They say you should no longer adopt RBAC,

15:46.560 --> 15:52.200
but take concepts from A-BAC and RE-BAC.

15:52.200 --> 15:53.640
Obviously, I'm biased towards RE-BAC

15:53.640 --> 15:56.560
because I think it's a more modern approach to this.

15:56.560 --> 16:00.440
But the OAS folks also give you some high level benefits

16:00.440 --> 16:02.120
to why you would do something, like why

16:02.120 --> 16:07.000
you would adopt these new ones over RBAC.

16:07.000 --> 16:10.360
I'm going to just take this from the RE-BAC perspective.

16:10.360 --> 16:12.840
When you're doing a graph-like thing,

16:12.840 --> 16:17.400
a relationship-based system, you're forced to basically talk

16:17.400 --> 16:18.440
about individual entities.

16:18.440 --> 16:22.280
So this user, Jimmy, has access to this particular document.

16:22.280 --> 16:25.320
Because you're doing that, it has this kind of buzzword,

16:25.320 --> 16:26.200
fine-grained.

16:26.200 --> 16:29.440
You're not resolving Jimmy to a role or a group.

16:29.440 --> 16:32.200
You're actually following Jimmy directly to the document.

16:32.200 --> 16:34.720
So you're talking about individual entities in the system.

16:34.720 --> 16:38.800
So as a result, you get actually more fine-grained access.

16:38.800 --> 16:41.160
I'm not trying to generalize about any users

16:41.160 --> 16:42.520
or paint over anything.

16:42.520 --> 16:46.160
I'm actually talking about the exact objects I care about.

16:46.160 --> 16:48.120
And that means you can actually develop systems

16:48.120 --> 16:51.160
where you delegate access to a particular row in a database

16:51.160 --> 16:54.400
or a cell in a spreadsheet.

16:54.400 --> 16:56.800
And all of these systems are designed for speed

16:56.800 --> 16:58.280
because they understand they're going

16:58.280 --> 17:02.720
to have to store a lot of data to be this fine-grained.

17:02.720 --> 17:04.760
And then because your applications

17:04.760 --> 17:08.760
are only talking about the direct objects that they care about,

17:08.760 --> 17:11.920
any of the relationships in the in-between

17:11.920 --> 17:13.480
don't get written in your code.

17:13.480 --> 17:16.280
So you just ask the question, can this user

17:16.280 --> 17:18.520
perform this action on this thing?

17:18.520 --> 17:20.320
How they got access to that?

17:20.320 --> 17:22.640
And if you ever refactor or change

17:22.640 --> 17:24.360
how they get access to that, that

17:24.360 --> 17:26.400
does not live in your code base anymore.

17:26.400 --> 17:28.800
That means you can make changes to your permission system

17:28.800 --> 17:31.040
and not change a single line of code

17:31.040 --> 17:32.960
in any of your web applications.

17:32.960 --> 17:35.320
And believe me, when you do that for the first time,

17:35.320 --> 17:37.320
it is a magical feeling because you

17:37.320 --> 17:40.480
don't have to touch any code.

17:40.480 --> 17:43.240
So then there's also multi-tenancy and management

17:43.240 --> 17:43.740
ease.

17:43.740 --> 17:46.440
And this is just simplicity around modeling.

17:46.440 --> 17:49.800
And then with ABAC and REBAC systems,

17:49.800 --> 17:51.560
you're paying it forward.

17:51.560 --> 17:53.920
So our back might be really easy conceptually for you

17:53.920 --> 17:55.320
to implement at the beginning.

17:55.320 --> 17:58.880
But these systems, the ABAC and REBAC ones,

17:58.880 --> 18:02.280
they're more focused on forward thinking.

18:02.280 --> 18:04.280
If you need to make changes, like I just described,

18:04.280 --> 18:07.600
you can change REBAC designs without changing code.

18:07.600 --> 18:09.160
It may be a little bit more effort

18:09.160 --> 18:11.640
for you to get started in building and integrating

18:11.640 --> 18:12.640
with one of these systems.

18:12.640 --> 18:16.240
But by day two, if you ever need to make a change,

18:16.240 --> 18:19.320
it's going to pay dividends.

18:19.320 --> 18:23.240
So I wanted to get deeper into this Zanzibar paper

18:23.240 --> 18:27.440
I talked about earlier, which kicked off the interest in REBAC

18:27.440 --> 18:29.480
that you see today.

18:29.480 --> 18:33.520
Basically, Zanzibar is a purpose-built graph database

18:33.520 --> 18:36.600
that is very specifically optimized for one thing, which

18:36.600 --> 18:40.080
is finding a path in a graph.

18:40.080 --> 18:42.080
And by virtue of finding that path,

18:42.080 --> 18:43.720
that means that the user has access

18:43.720 --> 18:45.760
to that particular thing.

18:45.760 --> 18:47.480
It's actually one of the few good things

18:47.480 --> 18:48.920
that came out of Google+.

18:48.920 --> 18:51.320
So there's only two things that came out of Google+.

18:51.320 --> 18:55.640
There is Zanzibar internally at Google and then Google Photos.

18:55.640 --> 18:57.680
The novelty of this paper is actually

18:57.680 --> 19:00.300
that it is solving an authorization problem

19:00.300 --> 19:02.560
with a focus on distributed systems.

19:02.600 --> 19:04.400
So if you'll notice, the title of the paper

19:04.400 --> 19:08.480
is called Zanzibar Google's Consistent Global Authorization

19:08.480 --> 19:10.520
System.

19:10.520 --> 19:14.920
So it is fundamentally trying to tackle authorization

19:14.920 --> 19:17.880
as a distributed systems problem, which is not really

19:17.880 --> 19:20.480
something else has done in the past,

19:20.480 --> 19:22.920
because they kind of acknowledge that if they're

19:22.920 --> 19:25.080
going to deploy one system at Google,

19:25.080 --> 19:27.320
it needs to work across all geos in the world.

19:27.320 --> 19:29.920
And it has to be extremely, extremely reliable,

19:29.920 --> 19:32.160
and it can never be wrong.

19:32.160 --> 19:34.880
These are really difficult requirements.

19:34.880 --> 19:38.000
But the anecdote I like to use is when you're

19:38.000 --> 19:41.200
on a cloud provider like Amazon and you go to provision

19:41.200 --> 19:43.480
something like, say, an S3 bucket,

19:43.480 --> 19:45.280
you're always choosing what region.

19:45.280 --> 19:47.960
But actually, if you go to set IAM rules in a cloud provider

19:47.960 --> 19:50.640
like Amazon, you don't pick the region.

19:50.640 --> 19:53.040
That is because these systems fundamentally

19:53.040 --> 19:53.920
have to be global.

19:53.920 --> 19:57.760
And when you're designing them yourself at a particular scale,

19:57.760 --> 19:59.000
you need to think about how you're

19:59.000 --> 20:01.560
going to make your system global.

20:01.560 --> 20:03.680
And so this paper actually inspired two companies,

20:03.680 --> 20:06.160
Carta and Airbnb, to go forward and implement

20:06.160 --> 20:09.280
their own internal systems based on the ideas in this paper.

20:09.280 --> 20:14.320
None of them are truly 100%, I would say,

20:14.320 --> 20:16.960
authentic to the original paper, but rather the paper

20:16.960 --> 20:21.760
refused with the requirements of their business at the time.

20:21.760 --> 20:24.520
So I think the real superpower to Zanzibar, though,

20:24.520 --> 20:30.640
is this, which is if you go to send someone a Google Doc in Gmail

20:30.640 --> 20:33.440
and they don't have access, Gmail will pop up a box

20:33.440 --> 20:36.680
and tell you, hey, you didn't give access to this person.

20:36.680 --> 20:38.880
That fundamentally means that Gmail actually

20:38.880 --> 20:42.040
has a way to ask questions and check permissions that

20:42.040 --> 20:44.240
are built into Google Drive.

20:44.240 --> 20:46.800
So that means you could have one central source of truth

20:46.800 --> 20:49.440
for authorization data that your whole application suite can

20:49.440 --> 20:53.080
share, microservices can share.

20:53.080 --> 20:55.200
And this is incredibly powerful because not only does it

20:55.200 --> 20:57.400
allow integrations like this, but it also

20:57.400 --> 20:59.440
lets you have that central source of truth

20:59.440 --> 21:01.280
where if you need to audit something,

21:01.280 --> 21:03.160
you can just ask that one service.

21:03.160 --> 21:04.800
It's the only service you have to trust.

21:04.800 --> 21:06.760
It's the only service that you have to query

21:06.760 --> 21:09.640
if you're trying to really dig into any of this data.

21:09.640 --> 21:12.880
So you have a problem like an outage or something, an incident,

21:12.880 --> 21:16.840
and you need to understand what the access control looked like.

21:16.840 --> 21:21.120
So you might be wondering, how do I Zanzibar?

21:21.120 --> 21:24.040
So this is exactly what we set out to do.

21:24.040 --> 21:26.600
Basically, the year after the paper was published,

21:26.600 --> 21:28.720
my co-founders and I left Red Hat to found

21:29.400 --> 21:32.400
and basically build SpiceDB in the open source.

21:32.400 --> 21:34.720
There were some folks experimenting with the ideas

21:34.720 --> 21:36.280
around Reback at the time.

21:36.280 --> 21:38.440
But no one was really moving the needle towards making this

21:38.440 --> 21:40.160
a production thing that you could use

21:40.160 --> 21:43.960
in a real enterprise environment or at a real tech company.

21:43.960 --> 21:46.520
We originally prototyped the thing in Python.

21:46.520 --> 21:51.520
It was type annotated, lazily evaluated, functional Python.

21:51.520 --> 21:54.200
So it was way faster than you'd ever think Python should be,

21:54.200 --> 21:56.560
but it was not fast enough, so we ended up rewriting it

21:56.560 --> 21:58.880
and go and open sourcing that.

21:58.880 --> 22:00.760
The name is actually inspired by Dune

22:00.760 --> 22:03.320
because internally at Google, the project

22:03.320 --> 22:07.360
was actually called Project Spice because the ACLs must flow.

22:07.360 --> 22:09.200
So the timing for that has actually

22:09.200 --> 22:11.920
been really good with all the Dune resurgence in the movies,

22:11.920 --> 22:14.880
but internally at OZ, all of our software

22:14.880 --> 22:19.240
is named Dune References as homage.

22:19.240 --> 22:21.760
But if we fast forward to today, the SpiceDB community

22:21.760 --> 22:23.160
has actually gotten contributions

22:23.160 --> 22:26.160
from a lot of companies, big names like Netflix, GitHub,

22:26.200 --> 22:28.560
Google, Red Hat, and Plaid.

22:28.560 --> 22:31.960
And there are production users in small companies, startups,

22:31.960 --> 22:34.240
where it's just the co-founders, all the way up to Fortune 50

22:34.240 --> 22:34.740
companies.

22:37.400 --> 22:40.240
But I still haven't actually told you what SpiceDB is.

22:40.240 --> 22:43.920
So SpiceDB is, as I described with Zanzibar earlier,

22:43.920 --> 22:46.760
this extremely parallel graph database.

22:46.760 --> 22:49.360
So developers basically apply a schema,

22:49.360 --> 22:51.760
just like you would for a relational database.

22:51.760 --> 22:54.400
And I've given an example schema here,

22:54.400 --> 22:55.840
kind of modeling a Google doc.

22:55.840 --> 22:58.760
And then what they do is they store data inside that database

22:58.760 --> 23:02.040
and query that data according to that schema.

23:02.040 --> 23:05.680
And it's really magic where you can actually make schema changes

23:05.680 --> 23:08.480
and not in a forward compatible way that

23:08.480 --> 23:10.480
lets you actually modify your permission systems

23:10.480 --> 23:12.560
without changing any code.

23:12.560 --> 23:15.120
So we don't actually have a SQL API,

23:15.120 --> 23:16.400
despite being a database.

23:16.400 --> 23:19.960
We give you GRPC and HTTP APIs.

23:19.960 --> 23:23.200
And effectively, like the primary interface

23:23.200 --> 23:26.400
we recommend as GRPC for latency reasons.

23:26.400 --> 23:29.200
Because authorization is in the critical path of everything,

23:29.200 --> 23:30.720
your web applications are going to do,

23:30.720 --> 23:33.040
and possibly everything at your business,

23:33.040 --> 23:34.840
you really have to make sure the stuff is fast.

23:34.840 --> 23:36.800
Thus, everything needs to be kept in memory.

23:36.800 --> 23:39.960
Everything needs to be returned in single digit

23:39.960 --> 23:41.280
milliseconds.

23:41.280 --> 23:44.440
So GRPC is actually pretty critical for that.

23:44.440 --> 23:46.480
And then in addition to the actual main server,

23:46.480 --> 23:49.080
we also expose servers for power and dev tools.

23:49.080 --> 23:51.800
So you can get auto-complete and things in your editor.

23:51.800 --> 23:56.280
But then also integration testing services.

23:56.280 --> 23:58.000
So it's Kubernetes native.

23:58.000 --> 23:59.680
Designed from the beginning, our background

23:59.680 --> 24:01.240
is all in Kubernetes.

24:01.240 --> 24:03.160
So actually, SpiceDB is self-cluster.

24:03.160 --> 24:07.800
So if you deploy just SpiceDB directly onto Kubernetes,

24:07.800 --> 24:09.640
it will discover other nodes and actually

24:09.640 --> 24:13.320
start to divide and shard up the in-memory graph

24:13.320 --> 24:16.000
that it's using to actually serve this data across them

24:16.000 --> 24:18.040
automatically.

24:18.040 --> 24:21.160
We also offer a SpiceDB operator in the open source,

24:21.200 --> 24:24.720
which will then do automated updates for SpiceDB.

24:24.720 --> 24:27.880
Notoriously, having zero downtime updates for a database

24:27.880 --> 24:28.720
is very tricky.

24:28.720 --> 24:31.600
So we just took that problem off the table for most people

24:31.600 --> 24:34.200
and just implemented it automatic for anyone

24:34.200 --> 24:37.000
using Kubernetes.

24:37.000 --> 24:40.880
So we remain true to Zanzibar's goals of consistency

24:40.880 --> 24:41.880
at scale.

24:41.880 --> 24:44.320
So we actually have pluggable data storage systems.

24:44.320 --> 24:47.320
And basically, depending on what your requirements are,

24:47.320 --> 24:49.320
say you need to deploy everywhere in the globe,

24:49.320 --> 24:52.800
you can actually store all of your raw relationship data

24:52.800 --> 24:55.360
in something like Spanner or a Cockroach DB.

24:55.360 --> 24:58.320
And then you can deploy regional deployments of SpiceDB

24:58.320 --> 25:01.680
that will exist as independent caches for those geos.

25:01.680 --> 25:04.040
But fundamentally, they're sharing all the same core data

25:04.040 --> 25:07.640
and they're consistent across those environments.

25:07.640 --> 25:09.760
If that sounds too complicated for you

25:09.760 --> 25:12.720
or you don't really need that, you're just single region shop,

25:12.720 --> 25:13.240
that's fine.

25:13.240 --> 25:16.360
We also have deep integrations of Postgres or MySQL

25:16.360 --> 25:18.760
if you just want to use something like Aurora or Amazon

25:18.760 --> 25:20.080
or ES.

25:20.080 --> 25:23.320
Obviously, then there's also memory for testing.

25:23.320 --> 25:25.080
We also have a tool called Zed.

25:25.080 --> 25:26.760
Zed is the CranLine tool.

25:26.760 --> 25:30.120
It basically manages cluster credentials as backups.

25:30.120 --> 25:33.320
It gives you a command for every single SpiceDB API.

25:33.320 --> 25:34.920
And I just kind of give an example

25:34.920 --> 25:38.920
of running kind of with debug flags permissions check.

25:38.920 --> 25:41.360
You can actually see it gives you a whole graph traversal.

25:41.360 --> 25:43.520
It shows you a tree of how you actually

25:43.520 --> 25:45.720
computed whether or not someone has access

25:45.760 --> 25:48.040
with timing data associated with all that.

25:48.040 --> 25:51.600
So you can see where things slow down.

25:51.600 --> 25:53.040
We have a web IDE.

25:53.040 --> 25:56.440
So actually, the two things you just saw, SpiceDB and Zed,

25:56.440 --> 25:59.240
we compile to WebAssembly and then run that in the browser.

25:59.240 --> 26:02.880
And then we basically build that all on top of Monaco,

26:02.880 --> 26:05.920
the engine that powers VS code.

26:05.920 --> 26:08.440
And give you a full IDE where you

26:08.440 --> 26:10.360
don't have to install any of the software I just showed you.

26:10.360 --> 26:12.160
You can just go to play.offz.com

26:12.160 --> 26:13.560
and start playing with this stuff.

26:13.600 --> 26:15.880
Run Zed against live data.

26:15.880 --> 26:17.360
You can load in test data.

26:17.360 --> 26:20.320
And what we actually do is we can generate exhaustively

26:20.320 --> 26:23.560
all of the paths available in the graph for you.

26:23.560 --> 26:26.680
So there's somewhat of a model checking happening here.

26:26.680 --> 26:29.640
So you can actually prove exhaustively

26:29.640 --> 26:33.200
that all of the ways you can traverse the graph

26:33.200 --> 26:34.960
are the ways you think they are.

26:34.960 --> 26:38.000
And that basically lets you prove that a system is correct

26:38.000 --> 26:39.640
without you deploying it into production

26:39.640 --> 26:42.840
or having someone do a extremely long security

26:43.040 --> 26:44.080
on it on your process.

26:44.080 --> 26:46.440
And then you can check this stuff into CICD.

26:46.440 --> 26:48.280
So if you make a change to the schema,

26:48.280 --> 26:51.160
you can actually guarantee that certain assertions always

26:51.160 --> 26:55.400
pass and that everything is exhaustively checked.

26:55.400 --> 26:58.000
So Zanzibar is not a silver bullet.

26:58.000 --> 27:00.560
We actually have had to extend Zanzibar

27:00.560 --> 27:01.600
in a bunch of different ways.

27:01.600 --> 27:04.120
So SpiceDB remains true to all of the core concepts

27:04.120 --> 27:05.960
that you'll find in Zanzibar.

27:05.960 --> 27:08.160
But not everyone is Google.

27:08.160 --> 27:12.640
So effectively, not everyone relies on users

27:12.680 --> 27:13.880
being represented the same way.

27:13.880 --> 27:15.640
So we are kind of more flexible

27:15.640 --> 27:18.320
with how people can model their own users.

27:18.320 --> 27:21.120
And then we kind of add on developer experience

27:21.120 --> 27:22.400
because at Google they can say,

27:22.400 --> 27:24.520
you're forced to use the software.

27:24.520 --> 27:25.720
When you're building open source software,

27:25.720 --> 27:27.600
you can't force people to use your software.

27:27.600 --> 27:29.280
You have to compel them to use your software

27:29.280 --> 27:30.440
by having a better experience

27:30.440 --> 27:32.040
than what they're currently doing.

27:34.160 --> 27:36.800
We've also added kind of contextual relationships

27:36.800 --> 27:38.240
with ABAC.

27:38.240 --> 27:41.280
So that means relationships can actually exist

27:41.320 --> 27:43.160
basically dynamically based on context

27:43.160 --> 27:45.200
that you provide at runtime.

27:45.200 --> 27:47.200
That was a joint project with Netflix.

27:48.320 --> 27:50.760
So if you're wondering how you SpiceDB,

27:50.760 --> 27:52.800
you can go to our Discord,

27:52.800 --> 27:56.440
discord.gg slash SpiceDB or check out GitHub,

27:56.440 --> 27:57.520
basically anywhere on the internet

27:57.520 --> 27:59.320
where you expect to find open source projects.

27:59.320 --> 28:01.120
SpiceDB is there.

28:01.120 --> 28:02.520
So thanks everyone.

28:03.120 --> 28:04.440
Thank you.

28:04.440 --> 28:05.280
Thank you.

