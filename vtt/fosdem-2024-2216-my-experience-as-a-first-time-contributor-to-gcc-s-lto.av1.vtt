WEBVTT

00:00.000 --> 00:19.480
So, it's my pleasure to introduce Rishi Rai.

00:19.480 --> 00:27.000
He's one of the GSOC students from last year and worked on GCC LTO.

00:27.000 --> 00:36.000
Welcome here. He actually came here and got some travel funding from the new toolchain fund.

00:36.000 --> 00:41.000
So, that's also a thing the community can offer to students.

00:41.000 --> 00:45.000
Not all times and so on, there's conditions but it worked in this time.

00:45.000 --> 01:07.000
Okay.

01:07.000 --> 01:20.000
Hello everyone. I am Rishi Raj and today I'll be presenting my GSOC work on GCC's LTO and along with I will share my experience with first time contribution to GCC.

01:20.000 --> 01:33.000
So, basically this is little about me. I am under garaged to end from India and I love terminal.

01:33.000 --> 01:38.000
Because I am lazy and it helps me to automate a lot of tasks.

01:38.000 --> 01:49.000
And also I keep changing my distro about each two, three months and this I think this is very problematic because a lot I spent a lot of time in that.

01:49.000 --> 01:55.000
Apart from that in my free time I love to read fiction, travel and I play badminton a lot.

01:55.000 --> 02:02.000
So, moving on. So, before discussing my project, let's discuss some of the things related to my project.

02:02.000 --> 02:05.000
So, first let's discuss about the LTO.

02:05.000 --> 02:16.000
So, traditionally what compiler used to do is like to for optimization it is done at the compile time.

02:16.000 --> 02:23.000
So, each of the compile compilation unit is optimized independent of other compilation unit.

02:23.000 --> 02:34.000
But when we think about a real world project we are missing a lot of context because in real world project there are several of there are several compilation unit which are related to each other.

02:34.000 --> 02:45.000
And if we can like and if we can find some context between these compilation unit then we can optimize more.

02:45.000 --> 02:53.000
So, in LTO what we do is instead of optimizing along with optimizing at compile time we also compile at linking time.

02:53.000 --> 02:59.000
So, linker is aware of all the translation unit so there is obviously more optimization.

02:59.000 --> 03:04.000
Only downside being a longer compile time and more usage of memory during compilation.

03:04.000 --> 03:11.000
In GCC to enable LTO you can either use minus FLTO flag or minus FAT LTO objects flag.

03:11.000 --> 03:22.000
So, basically the second flag is to save GIMPAL bytecode along with LTO IL in the LTO object file.

03:22.000 --> 03:27.000
Now, let's discuss the basic structure of a ELF file.

03:27.000 --> 03:33.000
ELF file is basically used for storing binary libraries and executables on Linux and Unix based system.

03:33.000 --> 03:37.000
So, here you can see that there is a ELF header.

03:37.000 --> 03:44.000
ELF header basically contains the metadata about the ELF file to identify the ELF file on which system it was produced etc.

03:44.000 --> 03:53.000
Apart from this there is a program header table which is not relevant to my talk because it's used for executable and I am going to talk about the object files.

03:53.000 --> 03:59.000
So, our main interest is section header table.

03:59.000 --> 04:05.000
Basically it contains the different information about different section along with their names.

04:05.000 --> 04:11.000
So, in LTO this is the typical structure of ELF files.

04:11.000 --> 04:18.000
So, you can see these sections prefixed with .gnu.ltu prefix.

04:18.000 --> 04:26.000
So, these sections are produced by LTO streamer.

04:26.000 --> 04:32.000
So, now let's discuss the role of an assembler in producing LTO object file.

04:32.000 --> 04:42.000
So, right now we discussed that these all section with .gnu.ltu prefix are produced by LTO streamer.

04:42.000 --> 04:46.000
And these all are already in the binary format.

04:46.000 --> 04:52.000
So, assembler doesn't touch this like basically the assembler take this as an input and output it the object file.

04:52.000 --> 05:01.000
The only thing which assembler does is it produces .sim tab which contains the symbols .strtab which contains the string representation of section names

05:01.000 --> 05:08.000
and .strtab which contains the symbol name in the string representation.

05:08.000 --> 05:16.000
Apart from that if you are compiling with debugging flag then it also produce various debug symbols along with their relocations.

05:16.000 --> 05:20.000
So, assembler basically performs two functions.

05:20.000 --> 05:32.000
First is to generate this three section .sim tab .strtab .strtab and if debugging option is enabled then it produces these debug sections.

05:33.000 --> 05:36.000
So, now my project was to bypass assembler.

05:36.000 --> 05:40.000
So, first let's discuss why we wanted to bypass assembler.

05:40.000 --> 05:48.000
So, we already talked about like what was the function of a assembler in producing LTO object file.

05:48.000 --> 05:56.000
It was basically two things and those two things were not very complicated it can be actually done by compiler.

05:56.000 --> 06:00.000
So, what benefit we will get if we produce that from compiler.

06:00.000 --> 06:09.000
So, like we already noted the fact that a lot of sections with the GNU LTO prefix were produced by the LTO streamer.

06:09.000 --> 06:18.000
And compiler just have to scramble through that take that input and produce as output in the object file.

06:18.000 --> 06:20.000
So, there was a lot of I over it.

06:20.000 --> 06:23.000
So, here you can see the result.

06:23.000 --> 06:33.000
So, with bypass we are taking like 14 seconds to compile a single compilation unit file and with default part it was taking 21 seconds.

06:33.000 --> 06:38.000
So, only for a single compilation unit there was a difference of 7 seconds.

06:38.000 --> 06:46.000
So, if we like we are currently testing it on the real world project like Firefox and all and we will publish the result.

06:46.000 --> 06:50.000
And we hope to see a drastic improvements.

06:51.000 --> 06:57.000
So, to implement the project we along with my mentor divided into two parts.

06:57.000 --> 07:01.000
The first part was to extend the libivirty.

07:01.000 --> 07:09.000
Basically libivirty is a helper module which have various function to write and read from an object file.

07:09.000 --> 07:14.000
So, we extended the libivirty to output symbol table and a string table.

07:14.000 --> 07:19.000
So, the first task which a similar was performing was done by this.

07:19.000 --> 07:26.000
The second task was to output various debug sections and symbols along with their relocation directly.

07:26.000 --> 07:30.000
So, this was little bit complicated for me.

07:30.000 --> 07:42.000
The first thing was that GCC there was not sufficient documentation of GCC LTO debug architecture on the GCC website.

07:42.000 --> 07:52.000
So, I got in contact with Richard who is the who have implemented the GCC debug architecture and he helped me through it.

07:52.000 --> 07:59.000
And also the documentation of Dwarf debugging format was a little bit intimidating as a beginner,

07:59.000 --> 08:05.000
but as we proceeded further with help of my mentor I was successfully able to navigate that.

08:05.000 --> 08:18.000
And as of now we have like I have successfully implemented the support for ELF file format and it can be found in the devil by bypass ASM branch of the GCC repository.

08:18.000 --> 08:24.000
So, you can go there and see that and if you have some comments you can reach back to me.

08:25.000 --> 08:37.000
For now we are only supporting x86 target for relocations and we are generally we are eventually planning to roll out to other architectures too.

08:37.000 --> 08:43.000
And we will also provide support for other object files other than ELF too.

08:43.000 --> 08:51.000
So, now let's talk a little bit about how I got this opportunity to work in open source with GCC.

08:51.000 --> 09:02.000
So, basically I tried getting into open source before a few times but it was a bit intimidating for me because due to the large code base and all those things.

09:02.000 --> 09:19.000
So, when I like one of my friend recommended me to try for G-SOC and when I was going through various projects then this project interested me and thanks to DOH his newbies guide was very helpful me to introducing to GCC.

09:19.000 --> 09:23.000
And then I applied and eventually got selected.

09:23.000 --> 09:33.000
So, basically G-SOC is an opportunity for first new contributors to get started with open source and applications for this year is opening on 18 March.

09:33.000 --> 09:38.000
If any if anyone of you are interested then you can sure apply.

09:39.000 --> 09:50.000
I sought out the people who made it possible for my contribution first Google for organizing G-SOC which provided me a good platform to launch me to the open source world.

09:50.000 --> 09:55.000
My mentors Jan and Martin for helping and guiding throughout the summers to complete the project.

09:55.000 --> 10:01.000
Thomas and Dev for securing the sponsorship and also for my visa process.

10:01.000 --> 10:02.000
Thanks a lot.

10:02.000 --> 10:09.000
Or also to the GNU tool transfer which sponsored these attendance.

10:09.000 --> 10:13.000
Thanks for your attention.

10:13.000 --> 10:14.000
These are my socials.

10:14.000 --> 10:17.000
If you want you can connect me here.

10:32.000 --> 10:38.000
Any plans for the non-LTO case?

10:38.000 --> 10:43.000
So, you put in a regular assembly like machine called.

10:43.000 --> 10:48.000
But it will be repetition of a similar only right in non-LTO case.

10:48.000 --> 10:56.000
So, the question is repeat the question that we have on the video.

10:57.000 --> 11:04.000
So, he is asking if we have any plans to extend it for non-LTO case.

11:04.000 --> 11:10.000
So, in non-LTO case one need to be simply repetition like we will be building another assembler right.

11:10.000 --> 11:15.000
We will have to anyways like assemble all of those stuff.

11:23.000 --> 11:24.000
Can you please repeat?

11:26.000 --> 11:28.000
It is actually not done.

11:28.000 --> 11:34.000
So, we should be extend as we need it for the forward.

11:41.000 --> 11:43.000
Any more questions?

11:43.000 --> 11:50.000
Yeah, you said that you need more relocation right for the fire business.

11:50.000 --> 11:55.000
Is it just like relocation for the port?

11:55.000 --> 11:59.000
Or do you really need all kinds of relocation?

11:59.000 --> 12:06.000
So, he is asking that we like I was telling that we need more relocation.

12:06.000 --> 12:13.000
So, is it like relocation for pointers or relocation we need more relocation.

12:13.000 --> 12:19.000
So, basically for every architecture the relocation structure is different right.

12:19.000 --> 12:34.000
So, for each debug section we need to output a corresponding relocation so that during the late debug phase the linker could identify that debug section and link it.

12:34.000 --> 12:40.000
So, for each architecture we need to change that structure and output corresponding relocation.

12:40.000 --> 12:45.000
Basically the address and the add-in will be different in the different format.

12:50.000 --> 12:52.000
Thank you.

12:53.000 --> 13:03.000
How about this work in case other debugging formats get sad that they need to be in LTO.

13:03.000 --> 13:06.000
Because I see that you did some of the stuff in talk to us right.

13:06.000 --> 13:07.000
Yeah.

13:07.000 --> 13:10.000
Can you please repeat like I was?

13:10.000 --> 13:24.000
Well, I think that the LTO streamer part of the stuff that it dumps, UY pass, right, directly is basically how I mean how attached you work to the door for.

13:24.000 --> 13:26.000
Oh, okay.

