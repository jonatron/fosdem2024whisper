WEBVTT

00:00.000 --> 00:16.480
I'm sorry. Wasn't it about, I thought it was about an operator?

00:16.480 --> 00:35.480
Okay, so welcome. This is Edith and she will give an introduction to Kubernetes operators.

00:36.480 --> 00:51.480
Yeah, going in. Okay. Is this working? Is this working? Is this working? Could you hear me, Hie? Yeah? Okay, that's nice.

00:51.480 --> 01:02.480
Okay, good morning everyone. I'm really happy to be here again. The last year I was here shaking of nervous because it was my first talk in English.

01:02.480 --> 01:11.480
I improved now. It's going to be better, I hope. And thank you so much for this opportunity and all you for also make this happy.

01:11.480 --> 01:24.480
So I'm so happy for that. Thank you. Okay, in this talk I will talk about Kubernetes operators. Did you hear about Kubernetes operators before?

01:24.480 --> 01:39.480
Could you be? Okay, we will do a little introduction for containers, little, then Kubernetes. We will see how we deploy an application in Kubernetes and then we will do an intro into Kubernetes operators.

01:40.480 --> 01:48.480
To start, this is me. You can call me Joseri. I am Tecnology Evangelis at Percona. I also got the UK Global Talent Visa.

01:48.480 --> 01:57.480
For that reason I moved to UK the last year. I am a Cloud Native Computing Foundation Ambassador, organizing events in my city in Lima in Peru.

01:57.480 --> 02:05.480
I'm Docker captain, also organizing meetups about Docker. And open source contributor who contribute to Apache Airflow in the past.

02:05.480 --> 02:18.480
And now just translating the documentation in the Kubernetes website from English to Spanish to make it more for people who speak your Spanish.

02:18.480 --> 02:25.480
So if you want to talk about this topic, you can find me there or in the building case. So I'm happy to share with you about this.

02:26.480 --> 02:35.480
Okay, I already say the agenda. So today we will talk about Kubernetes operators. But first we will start by containers.

02:35.480 --> 02:46.480
Before to talk about Kubernetes operators or Kubernetes, the fundamentals is containers. We all know that a container is a process that is running on top of our system operator.

02:47.480 --> 03:00.480
So we need a containerized technology that is on top of our host operating system. And on top of that our application is running as an isolated process.

03:00.480 --> 03:09.480
And all the libraries and dependencies that we need for our application is there too.

03:09.480 --> 03:17.480
So, you already know what's container, right? Yeah, yeah, this is a container in the room. So that's good.

03:17.480 --> 03:25.480
Okay. But with containers, you will see if you are using it, you may be cool experiments on challenge.

03:25.480 --> 03:33.480
For example, orchestration, you are not running two or three containers. Now you are running thousands. If you have a big application, right?

03:33.480 --> 03:42.480
You are running those applications and you need to orchestrate them. And this is challenge just using containers.

03:42.480 --> 03:53.480
Then we have also to secure containers images, managing these vulnerabilities, or we have to handle network securities, access, authentication.

03:53.480 --> 03:58.480
No use for one container, but for thousands, thousands of them.

03:58.480 --> 04:04.480
With many containers running, also we need to see what is happening in real time.

04:04.480 --> 04:17.480
We need to know what container is failing, what we need to restart, and we have this metrics, this data, and we need this kind of tools to help us to visualize these errors and diagnostic, diagnostic, diagnostic,

04:18.480 --> 04:23.480
diagnose these problems and improve the performance.

04:23.480 --> 04:36.480
Also, we saw that there is a problem with scalability. So we didn't have that kind of tool that helps us to scale faster from thousands to ten, maybe to ten containers,

04:36.480 --> 04:41.480
dependent of the demand of our application.

04:42.480 --> 04:51.480
And finally, managing a data storage also in a container makes this thing a little bit more complex.

04:51.480 --> 04:56.480
What are the advantages of Kubernetes?

04:56.480 --> 05:02.480
With Kubernetes, we automate all this process that we talk and we reduce this manual intervention.

05:02.480 --> 05:06.480
We don't do this for just one container, but we do it. We see Kubernetes in the world.

05:06.480 --> 05:14.480
You see the web page, there is a lot of concepts that we need to learn, a lot of terminology that it looks like we never end to learn Kubernetes.

05:14.480 --> 05:23.480
But for this presentation, we are going to focus in three main components, which is the pods, the deployment, and the services.

05:23.480 --> 05:28.480
In the case of pods, the pod is a unique basis of Kubernetes.

05:28.480 --> 05:43.480
Inside a pod, we have a container and the container is a container that is related with other pods with that shared red and storage.

05:43.480 --> 05:47.480
And we have deployments also to deploy our application.

05:47.480 --> 05:55.480
It's where we set the desired state and we also set the replicas that is going to have our application.

05:55.480 --> 06:04.480
And we have services to access to each pod and to make it available between other pods.

06:04.480 --> 06:10.480
For this example, we are going to see visual how we deploy a cluster in Kubernetes.

06:10.480 --> 06:13.480
And we are going to see this example of voting app.

06:13.480 --> 06:23.480
We have a voting app, which you have a web application on the right where you can just vote between cats and dogs.

06:23.480 --> 06:24.480
It's a web application.

06:24.480 --> 06:30.480
In the other side, we are going to show you the result of that voting that we have.

06:30.480 --> 06:33.480
We have two web applications here.

06:33.480 --> 06:39.480
But behind this, we have many things to run in a cluster, no use to applications.

06:39.480 --> 06:40.480
We have this.

06:40.480 --> 06:51.480
If we have to containerize our applications, we don't just have the front end or the part that is visible to the user, which is voting app, a RESTful app.

06:51.480 --> 07:01.480
We have behind also the REST application, for example, to get the data that we put in the web application in temporal memory.

07:01.480 --> 07:04.480
And we have the back end that is made in .NET.

07:04.480 --> 07:05.480
This is just an example.

07:05.480 --> 07:10.480
And we have the database in Postgres, which is also in a container.

07:10.480 --> 07:20.480
And the RESTful app, the application which is made in Node, is going to get the data from the database and is going to expose our result of what we want.

07:21.480 --> 07:23.480
In the voting application.

07:26.480 --> 07:32.480
Here, if you want to create a cluster in Kubernetes, we need to identify which the connection ports.

07:32.480 --> 07:41.480
For example, if you want to access to the voting application where we are going to vote between cats and dogs, we need to identify how we are going to access to that application.

07:41.480 --> 07:44.480
So the port 8 should be open.

07:44.480 --> 07:48.480
The same for the other, could be other port, but this is just an example.

07:48.480 --> 08:00.480
But in the other application, RESTful app, also we can open a port so the user can access to that application to get the data.

08:00.480 --> 08:08.480
But inside this stack, also we have to identify which application access to what application.

08:08.480 --> 08:15.480
In that case, in the case of RADIS, for example, the voting application is going to save the data in RADIS.

08:15.480 --> 08:20.480
And the backing application is going to accept the RADIS to get the data and process it.

08:20.480 --> 08:27.480
After that, bring it to the database, but the database have to have a port open.

08:27.480 --> 08:29.480
The same with RADIS.

08:29.480 --> 08:34.480
Have to open a port to make it accessible for other applications.

08:35.480 --> 08:38.480
Now we talk about services.

08:38.480 --> 08:44.480
So after you identify the port where the application is going to listen, we have to identify services.

08:44.480 --> 08:53.480
And the good thing before to do this is ask you, okay, who application is going to access to me, RADIS, for example, okay.

08:53.480 --> 08:56.480
I'm going to be useful for another application.

08:56.480 --> 08:59.480
Yes, so I need to create a service there.

08:59.480 --> 09:04.480
The same with the application of the database with Postgres.

09:04.480 --> 09:05.480
I need to create a service.

09:05.480 --> 09:14.480
And the same with other ports in the top, we need to create a service for that to be accessed for the user.

09:14.480 --> 09:19.480
Now we talk about deployments.

09:19.480 --> 09:28.480
After knowing what ports we are going to open, what are our containers, our EMAJs, we need to deploy our application.

09:28.480 --> 09:37.480
For our application, for to deploy our application, we just need to have to deploy our application the one we want.

09:37.480 --> 09:39.480
How many we want, the replicas we want.

09:39.480 --> 09:47.480
If it's one, in this case, I have the voting app and the Resulapp application deployed with replica street, if you can see.

09:47.480 --> 09:53.480
And I decide the part which is the control plane, which is the brain of the cluster.

09:53.480 --> 09:59.480
And we can access to the control plane through the user interface and also with Qubesetel.

09:59.480 --> 10:01.480
Type in comments, we can access to that.

10:01.480 --> 10:10.480
And we have the API server, which is the front end for Kubernetes for the control plane.

10:10.480 --> 10:22.480
And it recites a lot of, it recites responses and will process them and will save these interactions into the database of Kubernetes, which is ETCD.

10:23.480 --> 10:25.480
We have also the schedule.

10:25.480 --> 10:37.480
The schedule is going to assign the ports in the cluster nodes, but it's going to try to find what node is right for the port that I have.

10:37.480 --> 10:39.480
We have also control manager.

10:39.480 --> 10:49.480
The control manager is going to have several containers for the objects that we have in Kubernetes to monitor all the health of the cluster.

10:49.480 --> 10:54.480
And it's going to keep informing about the healthy of the cluster.

10:54.480 --> 10:58.480
And we have the ETCD, which is the database of Kubernetes.

10:58.480 --> 11:01.480
In the other side, in the worker side, we have three components.

11:01.480 --> 11:07.480
Qubelet, we have the container runtime, and we have Qubet proxy.

11:07.480 --> 11:15.480
For Qubelet, it will take control of the instructions and will start, stop, monitor the containers.

11:16.480 --> 11:25.480
We have the container runtime that could be Docker or could be another container runtime to create and to make possible the containers.

11:25.480 --> 11:34.480
And we have Qubet proxy, which is going to facilitate the need working communication between the ports that we have in the worker node.

11:39.480 --> 11:42.480
Okay, let's go for Kubernetes operators now.

11:42.480 --> 11:44.480
Okay, we saw the Jamel.

11:44.480 --> 11:49.480
We saw where we identified replicas, one we can scale.

11:49.480 --> 11:56.480
RAN or scaling applications, stateless applications, is easy.

11:56.480 --> 12:07.480
We saw that because we can just write this command and make Qubeset L scale, deploy to four, scale or level up this one.

12:07.480 --> 12:17.480
So it's easy to scale these kind of applications because Kubernetes was made for stateless applications, so it's easy to make.

12:17.480 --> 12:23.480
But how about applications that store data?

12:23.480 --> 12:29.480
Do you think it's easy to add it into a scale?

12:30.480 --> 12:45.480
Yeah, it's easy because we also saw that we have Postgres in a container and in a port, and we can define Jamel file and we can scale it also.

12:45.480 --> 12:54.480
That is good, it's easy too, but where is the problem where we want to run a stateful applications, for example, in Kubernetes?

12:54.480 --> 12:57.480
This is the real problem.

12:57.480 --> 13:04.480
When we want to run a database over the time, because we can deploy a database in Kubernetes, we can make it.

13:04.480 --> 13:11.480
Is there running? I did it, many of you did it, but what happened with a long time?

13:11.480 --> 13:23.480
To all the life cycle of a database, this is where the real problem came up because we have to handle backups, upgrades, recovery, replications,

13:23.480 --> 13:29.480
and many other things that is for the database itself.

13:29.480 --> 13:48.480
Kubernetes at the beginning was built for a stateless application, but when we talk about databases or applications that need to save the user data, we need to do another thing.

13:48.480 --> 13:57.480
When we talk about running a database in a long period of time, we are talking about the day two of the Kubernetes application life cycle.

13:57.480 --> 14:05.480
If we talk about day zero and day one, we are talking about planning and development, operations, and now.

14:05.480 --> 14:16.480
This is an example of a custom resource definition where we are going to set up a new kind of our object in Kubernetes.

14:16.480 --> 14:26.480
We saw objects in Kubernetes, we saw the default objects, we have deployments, we have ports, we have services, these are the default objects that Kubernetes have.

14:26.480 --> 14:34.480
But if we want to integrate a new one, my old one, for example, called Krontap, I have to define it in these custom resource definitions.

14:34.480 --> 14:44.480
And I have to also define the behavior of this new kind. What is going to do? What is going to be the main target of this new new kind?

14:44.480 --> 14:59.480
So if we see, we define it in that part in this custom resource definition, custom because I am customizing this file to add a new kind and integrate it into Kubernetes cluster.

14:59.480 --> 15:05.480
And this is the custom resource definition behavior. For example, this is a very simple one where I am defining the kind.

15:05.480 --> 15:21.480
The main target of this new object is going to use that image in five minutes. It's going to do something in each five minutes.

15:21.480 --> 15:34.480
This is the object that I want my new type of Kubernetes I wanted to make. But you can have bigger things, right? Make a deploy, make a backup, make a replication.

15:34.480 --> 15:41.480
So it's going to be huge, not just as simple as this.

15:41.480 --> 15:52.480
And after you apply this new custom resource definition, you are able to do kubectl get Krontap, like a normal object that we have in Kubernetes.

15:52.480 --> 16:02.480
And we will see the results. When this is made, you are able to use this new type of Kubernetes in all your Kubernetes cluster.

16:02.480 --> 16:07.480
Okay, we talk about the custom resource definition. Now we will talk about the custom controller.

16:07.480 --> 16:13.480
So the custom controller that Kubernetes has by default is easy as a concept.

16:13.480 --> 16:24.480
So this controller is going to try to find the difference between the desired state and the current state of our cluster and is going to try to match the difference.

16:24.480 --> 16:35.480
And the custom controller that we create for the Kubernetes operators is kind similar.

16:35.480 --> 16:41.480
Summarizing, how does it work with Kubernetes with all operators?

16:41.480 --> 16:50.480
So we have a user which is going to write a jammel from an object that we already know that is deployment.

16:50.480 --> 17:01.480
And the deployment after applying the deployment, the object, okay, after applying the deployment, the deployment is going to create the deploy that we want and the post that we want.

17:02.480 --> 17:15.480
In all this process, we have the custom control or custom control loop that is going to try to find the difference between my cluster, this is my cluster, and the desired state, and it's going to try to match.

17:15.480 --> 17:24.480
Okay, you are telling me that I have two, three ports, but I have just two ports, so it's going to take action to make this automatically.

17:25.480 --> 17:30.480
How is Kubernetes with operators?

17:30.480 --> 17:38.480
To run Kubernetes with operators, we need to install in our cluster two things.

17:38.480 --> 17:48.480
The operator lifecycle manager, which is going to handle and see all the lifecycle of our Kubernetes operators, which is very important.

17:48.480 --> 18:03.480
And the custom resource definition that we created at the beginning as a template and the controller that is going to do that matching between the desired state and the final state, but for our custom resource definition.

18:03.480 --> 18:09.480
In this case, the user writes a custom resource, but with a new type.

18:09.480 --> 18:13.480
It's not a type that we know, it's a type that we created.

18:13.480 --> 18:21.480
My app, for example, is a type that we created as a custom resource definition and we are applying it into the cluster.

18:21.480 --> 18:38.480
Inside the cluster, we also have the normal object that Kubernetes has, the control loop, to make this, to make, to keep looking, observing, looking for difference and act to try to match this into my cluster.

18:38.480 --> 18:44.480
And if you are looking how to create a Kubernetes operator by yourself, you can do it.

18:44.480 --> 18:57.480
There is a very nice guide in which is the operator framework where it's going to give you an SDK to start to create Kubernetes operators and all the steps to make it possible.

18:57.480 --> 19:14.480
And you also, if you're wondering where I can find all these Kubernetes operators, if this is your first time listening about this, we have, there is also a Kubernetes operators, which is called operator hub, similar to Docker hub, where we have all the images there, right, to access.

19:14.480 --> 19:20.480
So we have operator hub where you can find all the operators that we want.

19:20.480 --> 19:29.480
So you can use these operators to integrate in things that maybe your application in a Kubernetes cluster is not doing right now.

19:29.480 --> 19:35.480
Maybe something missing, maybe there is something that you are still doing something manual in your Kubernetes cluster.

19:35.480 --> 19:38.480
If you are doing something manual, maybe it's easy to automate.

19:38.480 --> 19:48.480
You can also find this kind of tools here to automate and make it even more efficient your cluster, your application running in Kubernetes.

19:48.480 --> 19:53.480
And as any application, it also have maturity, capability models.

19:53.480 --> 19:57.480
The Kubernetes operators has five maturity levels.

19:57.480 --> 20:07.480
The level one, which is, which is has, I cannot see, which is, is going to see just the installation and the level two, the actualization and convenience.

20:07.480 --> 20:15.480
The level three is going to see the complete life cycle of the application of our operator.

20:15.480 --> 20:22.480
The level four is going to be more deeper and the last level is going to be completely automatic.

20:22.480 --> 20:26.480
Our operator is going to be doing a lot of things.

20:26.480 --> 20:34.480
So the application that we run in Kubernetes operators have to be in this order, passing this capability, capability models.

20:34.480 --> 20:41.480
There is many Kubernetes operators that are already in the level four and some maybe arriving to the level five.

20:41.480 --> 20:51.480
But you, if you go to that, if you go and see, for example, this is a Kubernetes operator for MySQL based on PerconyStraVic cluster.

20:51.480 --> 20:58.480
You will see in all this kind of operators the capability levels they are like, they, they are, they have.

20:58.480 --> 21:11.480
So it, it means that they have a certain maturity building and you can, you, you can see that you can use it also.

21:11.480 --> 21:19.480
Okay. If you are wondering how you can work with Kubernetes operators in Percony, we have Kubernetes operators, which is completely open source.

21:19.480 --> 21:25.480
We have Percony Kubernetes operator for databases, MySQL, MongoDB and Postgres.

21:25.480 --> 21:30.480
Feel free to use, use it also collaborate because it's open source.

21:30.480 --> 21:40.480
So if you are also, if you see that this is very complex to use it, you don't want to handle a lot of jammels, scripts and many things.

21:40.480 --> 21:47.480
We have also Everest, Percony Everest, which you can use it with a graphical interface.

21:47.480 --> 21:59.480
And you can start to create your Kubernetes, your Kubernetes, you can create your database Kubernetes in, in clusters of, of Kubernetes.

21:59.480 --> 22:05.480
Yeah. And if you have questions, you can reach us there also in our community forum.

22:05.480 --> 22:14.480
And we are having a Rafa in building K after here or maybe in the day or tomorrow.

22:14.480 --> 22:23.480
The raffle is going to be tomorrow at 2pm. We are raffling this Lego. So feel free to go, scan the code. Good luck.

22:23.480 --> 22:25.480
So that's, that's all. Thank you so much.

22:25.480 --> 22:27.480
Yeah.

22:27.480 --> 22:29.480
Yeah.

22:29.480 --> 22:31.480
If you.

22:31.480 --> 22:33.480
If you.

22:33.480 --> 22:35.480
If you.

22:35.480 --> 22:42.480
If you.

22:42.480 --> 22:44.480
Hello.

22:44.480 --> 22:47.480
I'll just try and speak over the noise.

22:47.480 --> 22:49.480
And.

22:49.480 --> 22:51.480
Good presentation.

22:51.480 --> 22:54.480
Oh, yeah.

22:54.480 --> 22:57.480
Could you hear me?

22:57.480 --> 23:01.480
Yeah. Could you hear me?

23:01.480 --> 23:04.480
Could you hear me?

23:04.480 --> 23:06.480
Hello.

23:06.480 --> 23:07.480
Yeah.

23:07.480 --> 23:09.480
Could you hear me?

23:09.480 --> 23:11.480
No, it's not.

23:11.480 --> 23:18.480
Yeah, yeah, yeah. I want to talk, but this is not working. I think. Yeah. Hello, hello.

23:18.480 --> 23:24.480
Hi, hi, hi.

23:24.480 --> 23:28.480
Could you bring me the mic? I will answer the question.

23:28.480 --> 23:30.480
I think you'll get just kind of you.

23:30.480 --> 23:32.480
Yeah, yeah, yeah. Thank you. Thank you. So we finished, right?

23:32.480 --> 23:34.480
I mean, there is.

23:34.480 --> 23:39.480
Yeah, sorry.

23:39.480 --> 23:41.480
Who made the question? Sorry.

23:41.480 --> 23:43.480
Yeah.

23:43.480 --> 23:45.480
Yes.

23:45.480 --> 23:48.480
Sorry. Yeah, sorry. The mic is not working.

23:48.480 --> 23:50.480
Who made the question? Right? Yeah.

23:50.480 --> 23:52.480
Yeah.

23:52.480 --> 23:54.480
I use, I use Kamba.

23:54.480 --> 23:56.480
But for the, yeah.

23:56.480 --> 23:58.480
I use Kamba.

23:58.480 --> 24:00.480
Is that like CMB?

24:00.480 --> 24:02.480
C-A-N-B-A.

24:02.480 --> 24:04.480
Yeah, I'll try that.

24:04.480 --> 24:08.480
And then for that arrow, I use a photo shoot.

24:08.480 --> 24:10.480
Oh, photo shoot?

24:10.480 --> 24:12.480
To make your, to make it moving.

24:12.480 --> 24:14.480
Oh, okay, okay.

24:14.480 --> 24:17.480
And then I import it into Kamba and I do that.

24:17.480 --> 24:19.480
We need the mic.

24:19.480 --> 24:24.480
Thank you.

24:24.480 --> 24:29.480
Oh, it's complicated.

24:29.480 --> 24:32.480
Thank you.

24:49.480 --> 24:51.480
Sorry.

24:51.480 --> 24:53.480
Alex.

24:53.480 --> 24:55.480
This is for you.

24:55.480 --> 24:57.480
All right.

24:57.480 --> 24:59.480
Okay.

24:59.480 --> 25:01.480
Okay.

25:01.480 --> 25:03.480
Okay.

25:03.480 --> 25:05.480
Okay.

25:05.480 --> 25:07.480
Okay.

25:07.480 --> 25:09.480
Okay.

25:09.480 --> 25:11.480
Okay.

25:11.480 --> 25:13.480
Okay.

25:13.480 --> 25:15.480
Okay.

25:15.480 --> 25:17.480
Okay.

25:17.480 --> 25:19.480
Okay.

25:36.480 --> 25:38.480
Sorry.

25:38.480 --> 25:40.480
Thanks.

