WEBVTT

00:00.000 --> 00:07.000
Yeah, then hello everyone, so we would like to start.

00:15.000 --> 00:20.000
Okay, yeah, so today's topic is testing IP tables firewall rules with Skeppy,

00:20.000 --> 00:26.000
comply with the cybersecurity requirements from the UNECR 155.

00:31.000 --> 00:36.000
Okay, turning the on button helps.

00:36.000 --> 00:40.000
So yeah, first of all our agenda, so first of all we want to introduce ourselves

00:40.000 --> 00:44.000
and also our employee shortly.

00:44.000 --> 00:49.000
Then we want to ask the question, why test your firewall rules?

00:49.000 --> 00:57.000
Afterwards we want to talk a bit about the basics of the net filter subsystem

00:57.000 --> 01:00.000
and IP tables.

01:00.000 --> 01:10.000
Then we will show you why we choose Skeppy as a tool to test the firewall rules

01:10.000 --> 01:16.000
and we'll also show shortly the tool landscape that is out there.

01:16.000 --> 01:19.000
After that we will now for over 10 years.

01:19.000 --> 01:25.000
ElectroBit offers the EB Corpus Linux distribution based on the Yachto project,

01:25.000 --> 01:30.000
but nowadays we have now also version based on Ubuntu

01:30.000 --> 01:35.000
and we are cybersecurity management system compliant.

01:36.000 --> 01:40.000
So now coming to the question, why should we test our firewall rules?

01:40.000 --> 01:45.000
Well, the answer is basically in our case, well, we had cybersecurity requirements

01:45.000 --> 01:51.000
for our embedded Linux distributions and for the automotive industry.

01:51.000 --> 02:00.000
This means complying to an Air 155 which is demanding that you basically take care

02:00.000 --> 02:03.000
about the cybersecurity for the software that goes into your car

02:03.000 --> 02:08.000
and starting in just some few months all new vehicle registrations,

02:08.000 --> 02:12.000
so vehicles that are new in the market will need to comply with that

02:12.000 --> 02:17.000
and as we are working for building distributions for such cars,

02:17.000 --> 02:24.000
well, we basically also needed to certify and test our firewall rules to sum it up.

02:25.000 --> 02:30.000
So what is the overall situation?

02:30.000 --> 02:35.000
Okay, we have a packet filter and this inspects our traffic in the networking stack.

02:35.000 --> 02:41.000
Of course we have different use cases for using this packet filter

02:41.000 --> 02:44.000
like the firewall, traffic statistics are locking

02:44.000 --> 02:49.000
and in our case we have a net filter in the corner space

02:49.000 --> 02:54.000
and for user space because the project was already going on for several years.

02:54.000 --> 02:59.000
We actually have IP tables still and not NF tables, so that's our overall setup.

02:59.000 --> 03:04.000
And just that much about that.

03:04.000 --> 03:11.000
Okay, I think it's forward.

03:11.000 --> 03:16.000
Output and post routing and then the egress

03:16.000 --> 03:23.000
and yeah, that's just to give you an overview how the net filter looks in general.

03:23.000 --> 03:29.000
So and IP6 tables, then a user space program,

03:29.000 --> 03:31.000
I think you all know it but just to repeat it

03:31.000 --> 03:35.000
and so that we are on the same page and to interact with the net filter.

03:35.000 --> 03:39.000
It is organized in tables like the filter nut and mangle table you see here.

03:39.000 --> 03:46.000
A table then consists of a change which basically again consisting of a list of rules

03:46.000 --> 03:51.000
which can match a set of packets and a rule that specifies

03:51.000 --> 03:53.000
okay, what to do with a packet that matches.

03:53.000 --> 03:57.000
You can say for example, I'll drop it, I return to somewhere else,

03:57.000 --> 04:01.000
I accept the packet or some user defined action

04:01.000 --> 04:07.000
and if the packet doesn't match then the next rule in the chain will get executed.

04:07.000 --> 04:19.000
So as I've already said, that is going to anywhere that is not sent itself

04:19.000 --> 04:22.000
is then sent to the Docker isolation stage two

04:22.000 --> 04:29.000
and otherwise we are returning and in the Docker isolation stage two

04:29.000 --> 04:34.000
we are dropping every traffic that is going to the Docker zero interface

04:34.000 --> 04:46.000
and also returning and therefore we are back at the original state there and yeah.

04:46.000 --> 04:50.000
Yeah, so now I want to give a short overview over the tool landscape

04:50.000 --> 04:56.000
but I will only highlight why we choose GAPI because we only got 25 minutes.

04:56.000 --> 05:00.000
So yeah, I think here you can see the most common tools

05:00.000 --> 05:06.000
that are able to create custom network packets

05:06.000 --> 05:11.000
so CUT, Nemesis, NetCut and GAPI and I think there are many more out there.

05:11.000 --> 05:21.000
They all have their pros and cons but I want to go now a bit into detail

05:21.000 --> 05:26.000
why we choose GAPI.

05:26.000 --> 05:28.000
Yeah, so why GAPI?

05:28.000 --> 05:33.000
So it's a Python based interactive packet manipulating library

05:33.000 --> 05:37.000
so Python is very common, I think everyone knows this

05:37.000 --> 05:41.000
and it has a very low barrier to get into.

05:41.000 --> 05:48.000
Yeah, with GAPI you can define send, receive, complete, custom packets

05:48.000 --> 05:52.000
and you can manipulate across different layers very easily

05:52.000 --> 05:58.000
so on the slide you can see link, network and transport layer

05:58.000 --> 06:03.000
so it's very easy to create their custom packets

06:03.000 --> 06:09.000
because the barrier is very low and you have a very easy entry

06:09.000 --> 06:13.000
to create your first custom packets with it and send them and receive them

06:13.000 --> 06:15.000
and have some highlights.

06:15.000 --> 06:19.000
Yeah, and what was also a reason that we choose it,

06:19.000 --> 06:24.000
we have already in the integration department running Intest framework

06:24.000 --> 06:27.000
that is completely Python based.

06:27.000 --> 06:36.000
So we needed to look that we choose some Python based solution.

06:36.000 --> 06:41.000
So how do we test the system?

06:41.000 --> 06:48.000
So we have the ingressing path and send then a packet to the application layer

06:48.000 --> 06:53.000
as you can see there and then we have also the egressing path

06:53.000 --> 06:58.000
where we send packets from the application layer then to the egressing path

06:58.000 --> 07:03.000
so in our demo version we will provide a show later.

07:03.000 --> 07:09.000
We use KEMU and send packets from the host to KEMU and from KEMU back

07:09.000 --> 07:16.000
and one additional thing, so GAPI has its own network stack

07:16.000 --> 07:21.000
so that runs beside for example the net filter

07:21.000 --> 07:27.000
so you have to also keep in mind.

07:27.000 --> 07:32.000
So we have here some basic examples to show you how easy it is

07:32.000 --> 07:37.000
to craft your first custom network packet.

07:37.000 --> 07:44.000
You see here the first example is just a TCP packet with destination port 80

07:44.000 --> 07:48.000
and the flag as is set and as you can see this one liner,

07:48.000 --> 07:53.000
when you copy this into your GAPI console is your first packet

07:53.000 --> 08:00.000
and then you just have to send it to a specific interface or address whatever.

08:00.000 --> 08:03.000
So this is as easy as it is.

08:03.000 --> 08:06.000
So the second example is a bit more advanced.

08:06.000 --> 08:15.000
There you can see that you can also use random IPs with various other options

08:15.000 --> 08:22.000
here for the UDP protocol and it's very easy to understand what is happening

08:22.000 --> 08:28.000
I think or from my point of view so it's good.

08:28.000 --> 08:33.000
The other example we have is an ICMP package.

08:33.000 --> 08:37.000
So we just have here on destination IP that also works

08:37.000 --> 08:44.000
and then the ICMP protocol with type 3 and code 0.

08:44.000 --> 08:51.000
SCAPI also provides ready solutions so that for example

08:51.000 --> 08:54.000
for the NAVA discovery with IPVs.

08:54.000 --> 08:59.000
Rule here TCP, okay that we got covered then we have a certain port

08:59.000 --> 09:04.000
that we can also easily specify and then we have time to live of 8 here

09:04.000 --> 09:08.000
though that's also just setting the parameter here for the IP packet

09:08.000 --> 09:13.000
and finally we also are interested in certain flags.

09:13.000 --> 09:18.000
So here we are using for example SYNFLAG here once

09:18.000 --> 09:23.000
and then we have already our fitting packet and we can just send it.

09:23.000 --> 09:27.000
Here we are sending it just easily out with SCAPI.

09:27.000 --> 09:33.000
We can then on the other side SNF for it for example we take a look

09:33.000 --> 09:40.000
okay what is arriving at PC at p port 1 2 3 4 and then we can just take okay

09:40.000 --> 09:45.000
well those packet and the flags did match so it should be accepted

09:45.000 --> 09:49.000
by the firewall and otherwise okay well the flags didn't match

09:49.000 --> 09:51.000
and so it should be rejected.

09:51.000 --> 09:57.000
Or to have a different example here we see a firewall rule

09:57.000 --> 10:04.000
for the source that should match in the input chain on the source IP

10:04.000 --> 10:09.000
so okay again just put it into the packet then we have

10:09.000 --> 10:13.000
a certain destination port again with TCP so we are just crafting

10:13.000 --> 10:19.000
our packet again in SCAPI as planned and then we are just again sending it

10:19.000 --> 10:26.000
we can again just SNF on the other side with SCAPI and check okay

10:26.000 --> 10:33.000
whatever is arriving on ETH0 now we can also have a filter in our

10:33.000 --> 10:38.000
SNF function specified so we check okay is it TCP is the source

10:38.000 --> 10:46.000
as expected and then we are waiting okay we are waiting for one packet here

10:46.000 --> 10:51.000
and if this packet is there we are executing the packet to check function

10:51.000 --> 10:54.000
and okay we are checking here for the port if the port is correct

10:54.000 --> 10:59.000
and already SNF on the correct interface and check the IP address

10:59.000 --> 11:05.000
and if we are on if we are received a TCP packet on the filter already

11:05.000 --> 11:10.000
so it would match then the firewall rule and we can say okay it should be accepted

11:10.000 --> 11:15.000
or if the port is not matching I don't know it would be 23 then it should be rejected

11:21.000 --> 11:28.000
and here one last example it's basically again the same situation

11:28.000 --> 11:38.000
we are crafting a ficking packet with TCP and port 100 here and then we are

11:38.000 --> 11:49.000
again considering the interface here and also of course our IP address

11:49.000 --> 11:54.000
I think you can see it very well from the arrows and then you can just send it out here

11:54.000 --> 11:59.000
and again the other sub basically looks as known we are sniffing on the end

11:59.000 --> 12:05.000
in the TAP0 interface this is well motivated by our QIMO setup

12:05.000 --> 12:11.000
then checking the filter again some sanities executing a function again

12:11.000 --> 12:17.000
still checking the port and if this matches then already it should be all accepted by the firewall

12:17.000 --> 12:25.000
and otherwise it should be rechecked and I think we now have time for a demo

12:25.000 --> 12:28.000
yes so please

12:33.000 --> 12:39.000
yeah so as you can see now on the screen hopefully it's visible for everyone good I don't know

12:39.000 --> 12:42.000
yeah

12:42.000 --> 12:52.000
yeah so yeah you can see on the on the right window you can see the QIMO that is running

12:52.000 --> 13:03.000
we already loaded the firewall rules we want to test and now I would start the sniffing

13:03.000 --> 13:09.000
so that we can do the ingrass thing test and

13:09.000 --> 13:12.000
yeah

13:12.000 --> 13:34.000
in the in the IP table

13:35.000 --> 13:43.000
fields are have gone up so everything worked fine on the on the ingrass path so now we can also

13:43.000 --> 13:47.000
show the other way around

14:04.000 --> 14:14.000
yeah

14:21.000 --> 14:28.000
yeah I think so we can stop the demo I have I think I have some some mistake in one of the rules

14:28.000 --> 14:35.000
so now I'm not allowed to send a packet this is the output packet we showed before that gets redirected

14:35.000 --> 14:46.000
yeah sorry for that but if you go to the slide deck you can see you have can see here the demo

14:46.000 --> 14:52.000
so it's a link to the GitHub repo where we have also stored everything with a read me

14:52.000 --> 15:00.000
then you can see can test it on your own and if you want to extend something or yeah

15:00.000 --> 15:09.000
so yeah then we are already at the end of our talk so as a summary so you now know why you should test your

15:09.000 --> 15:20.000
firewall rules so it's yeah not only regarding to the UN our UN EC are 155 yeah you get some

15:20.000 --> 15:28.000
overview over the net filter IP tables we showed you bit the lens very short overview of the landscape

15:28.000 --> 15:38.000
and why our solution was skeppy yeah you hopefully get some basic insights how you can use skeppy for your

15:38.000 --> 15:46.000
test cases hopefully and yeah also you saw that you can test IP tables with firewall rules if the if

15:46.000 --> 15:56.000
everything is set up right so yeah with that we want to thank you for your attention and if you have any further

15:56.000 --> 16:05.000
questions then please feel free to ask now or you can also see our contact informations on the slide yeah

16:05.000 --> 16:12.000
thanks also from my side sorry about the screwed up demo I promise on give that it's fixed if not we are fixing it

16:12.000 --> 16:32.000
today still so questions hi great presentation thank you so I searched occasionally over the last several years

16:32.000 --> 16:40.000
for something that can simulate IP tables rules without needing a full network stack since for example the IP

16:40.000 --> 16:47.000
tables save utility can dump entire IP tables configurations and the syntax seems simple enough is there something

16:47.000 --> 16:54.000
non-obvious that prevents us from simulating rules entirely in memory without the need for a full network stack

16:54.000 --> 17:09.000
sockets ton tap devices or virtualization I think I cannot fully answer your questions so I would say from

17:09.000 --> 17:19.000
the perspective we have why we test the firewall rules so we our test case what was that we wanted to test our

17:19.000 --> 17:29.000
the firewall rules we have in our system so the showcase we had here in the in our company we are running the

17:29.000 --> 17:39.000
in tests directly on our target on the hardware because we want to know how the behavior is directly on the system with

17:39.000 --> 17:47.000
the complete firewall config loaded so that we can ensure everything we have in our case we have requirements and we need to

17:47.000 --> 17:57.000
test if the requirements are fulfilled in the in the firewall we have in the system and so

17:57.000 --> 18:09.000
yeah that's true and yes kept the supports fast testing and we are aware of it and yeah so the basic answer is yes and how

18:09.000 --> 18:16.000
you of course say okay I want to have a focus on passing there or there I mean it's not to be generalized because it of

18:16.000 --> 18:23.000
course depends on the concrete firewall the concrete user cases you want to cover but yes kept the supports it so that's

18:23.000 --> 18:35.000
also a great part of it I would say and I was that I think we can thank you and we are now directly on time so sorry but please

18:35.000 --> 18:38.000
have a nice day have a great post

