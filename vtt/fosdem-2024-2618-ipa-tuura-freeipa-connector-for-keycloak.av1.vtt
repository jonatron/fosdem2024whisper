WEBVTT

00:00.000 --> 00:05.000
Hi guys.

00:05.000 --> 00:15.000
So now we have Francisco Tivino who will speak about the Ipatura project, which is a FIJK

00:15.000 --> 00:17.000
connector for people.

00:17.000 --> 00:22.000
That is awesome.

00:22.000 --> 00:23.000
Yes, thank you Ikea.

00:23.000 --> 00:24.000
Thank you.

00:24.000 --> 00:25.000
Thank you very much.

00:25.000 --> 00:28.000
Yes, my name is Francisco Tivino.

00:28.000 --> 00:32.000
I'm a principal software engineer at Red Hat, specializing in identity management systems.

00:32.000 --> 00:35.000
And I'm part of the Free API team.

00:35.000 --> 00:43.000
And I'm very excited to introduce you to Ipatura, a collaboration between Free API team and SSSD teams.

00:43.000 --> 00:50.000
And basically what you are allowed to see is a redesign of the system integration between identity

00:50.000 --> 00:53.000
management between key clock and Free API.

00:53.000 --> 00:59.000
And then the Alexander talk, the one before this one, it was perfect because he was explaining

00:59.000 --> 01:05.000
all the concepts, all the, he was giving a very good overview of key clock, what are all the

01:05.000 --> 01:10.000
features that are supported and specifically how to integrate key clock with other identity

01:10.000 --> 01:14.000
management systems through the user federation and identity federation and all the brokering

01:14.000 --> 01:16.000
and stuff like that.

01:16.000 --> 01:19.000
And he was missing one integration, actually.

01:19.000 --> 01:24.000
That's nice because he didn't spoil my presentation.

01:24.000 --> 01:32.000
He was missing the integration with Free API, all right, through the user federation.

01:32.000 --> 01:38.000
So, yeah, this is all about, yeah, well, this is very basic stuff that I would like to scope

01:38.000 --> 01:40.000
well the project, right?

01:40.000 --> 01:45.000
I just want to spend a few minutes talking about some of the background and some of the key

01:45.000 --> 01:50.000
aspects of this project that we have been keeping in mind as we have been undergoing this work.

01:50.000 --> 01:54.000
So as far as the background, IAM is an umbrella term.

01:54.000 --> 02:01.000
It defines processes to assess the right assets at the right time for the right reasons, right?

02:01.000 --> 02:05.000
Well, keeping an author right access and the control.

02:05.000 --> 02:10.000
So some of the common products are Microsoft Active Directory.

02:10.000 --> 02:14.000
This is for environments where Windows is dominating.

02:14.000 --> 02:19.000
So we have also identity management, which is Free API.

02:19.000 --> 02:28.000
So if you are familiar with it, it could be, yes, you can understand Free API like the open source version

02:28.000 --> 02:31.000
of Active Directory, but for post-example environment.

02:31.000 --> 02:33.000
This is Linux, right?

02:33.000 --> 02:40.000
And, yeah, because basically it relies on the same building blocks like Microsoft Active Directory,

02:40.000 --> 02:47.000
like LDAP, Kerberos, PKI, CA, DNS, right?

02:47.000 --> 02:50.000
And, yeah, another one is Key Clock, okay?

02:50.000 --> 02:52.000
It doesn't need an introduction.

02:52.000 --> 02:59.000
It's a more scope for modern applications and services to the users in general, right?

02:59.000 --> 03:08.000
And there are more of the solutions such as Octa and TrID where they are more oriented to cloud-based environments, right?

03:08.000 --> 03:17.000
So when comparing these solutions, we soon discovered that one of the main differences is like number of assumptions

03:17.000 --> 03:21.000
regarding how users and groups are controlled, okay?

03:21.000 --> 03:25.000
So, for instance, Free API is tied to user and groups like this.

03:25.000 --> 03:30.000
They are necessary for the applications running in a post-example environment, right?

03:30.000 --> 03:35.000
On the other hand, Key Clock offers authentication services to modern applications

03:35.000 --> 03:40.000
where these applications are deployed usually in the cloud environment and the identities,

03:40.000 --> 03:44.000
they completely differ from the system level ones.

03:44.000 --> 03:53.000
Meanwhile, AD, for instance, Active Directory relies on other identifiers like security identifiers or organizational units.

03:53.000 --> 04:01.000
I'm not going to talk about post-example environments because the very last talk of today is all about that.

04:02.000 --> 04:05.000
So I recommend you to watch that one.

04:05.000 --> 04:13.000
And, yeah, the key point is that sometimes you are happy with a standalone solution with all your conflicts in place,

04:13.000 --> 04:15.000
or that is not a useful case.

04:15.000 --> 04:21.000
I mean, many times you will need to integrate multiple identity management solutions

04:21.000 --> 04:31.000
so that the same user can access different operating systems as well as different cloud applications with the same set of credentials, right?

04:31.000 --> 04:41.000
So, luckily, IIM, this umbrella term I was talking about in the first slide, defines some processes like single sign-on

04:41.000 --> 04:48.000
and also identity and user federation where a user basically will be authenticated directly once, okay?

04:48.000 --> 04:56.000
And then the fact of authentication is consumed by other services for a certain amount of time,

04:56.000 --> 05:00.000
regardless how and where the application are operating, right?

05:00.000 --> 05:02.000
So that's basically it.

05:02.000 --> 05:10.000
And then when talking about this, this one, and this one, federation that Alessandro was talking about that,

05:10.000 --> 05:14.000
Yaki Clock is very well known for providing these functionalities, okay?

05:14.000 --> 05:20.000
So, yeah, the way it works is like when a user logs in,

05:20.000 --> 05:24.000
Key Clock will look into its own internal database, right?

05:24.000 --> 05:34.000
And if the user is not there, it will fetch or iterate over every user storage provider that is connected until it finds a match, okay?

05:34.000 --> 05:37.000
This is basically how it works, right?

05:37.000 --> 05:38.000
And guess what?

05:38.000 --> 05:43.000
Key Clock already supports the integration with API, yeah?

05:43.000 --> 05:49.000
As a backend to look up for authenticated identities and so on, right?

05:49.000 --> 05:52.000
This is already supported. You can do that.

05:52.000 --> 05:59.000
So, yeah, by default, well, I'm not going to spend a lot of time here because this was explained by Alessandro.

05:59.000 --> 06:05.000
So the one on the left, the one on the left, it was the one from the previous presentation.

06:05.000 --> 06:12.000
Yeah, includes LDAP and AD provider so you can federate with multiple LDAP servers in one Key Clock.

06:12.000 --> 06:18.000
And, yeah, at the same time, and the one on the right is the one that I'm going to focus on,

06:18.000 --> 06:23.000
is that Key Clock also includes SSSD plugin, right?

06:23.000 --> 06:29.000
And it provides access to multiple identities and authentication providers from free API, right?

06:29.000 --> 06:34.000
And also very nice features like failover and offline support as well.

06:34.000 --> 06:36.000
So then what is the problem then?

06:36.000 --> 06:40.000
If we support everything and we can integrate with anything?

06:40.000 --> 06:43.000
All right, let's have a look.

06:43.000 --> 06:48.000
So what are the problems that we are trying to solve?

06:48.000 --> 06:56.000
So one of the main issues is, and the most important is that we are missing feature parity between those integrations.

06:56.000 --> 06:58.000
I mean, they are really different ones.

06:58.000 --> 07:04.000
I mean, you can integrate from a Key Clock to the user federation with LDAP,

07:04.000 --> 07:11.000
with Rehabilitation Server with AD in a different manner because we support a lot of features there.

07:11.000 --> 07:19.000
And at the same time, you can integrate with ADM with free API, but there is a huge limitation there.

07:19.000 --> 07:22.000
It's that it's only a read-only interface.

07:22.000 --> 07:26.000
So Key Clock, yes, can fetch information from SSSD, that's all.

07:26.000 --> 07:28.000
It can write there.

07:28.000 --> 07:33.000
So that means that if you do changes in your user database in Key Clock,

07:33.000 --> 07:38.000
you will need to drop by the free API and do the changes as well.

07:38.000 --> 07:45.000
So this is kind of a very limiting factor, right?

07:45.000 --> 07:51.000
So yeah, another one is that if you want to integrate with SSSD,

07:51.000 --> 07:58.000
you need to deploy SSSD in the same host or container where you are running Key Clock.

07:58.000 --> 08:03.000
This is also a limiting factor, especially when talking about cloud environments and open sieve,

08:03.000 --> 08:10.000
where you usually deploy the bots in different hosts and different machines, right?

08:10.000 --> 08:12.000
So that's another limiting factor.

08:12.000 --> 08:17.000
So then, yeah, we are thinking about already designed then.

08:17.000 --> 08:20.000
We need already designed to already design this, okay?

08:20.000 --> 08:27.000
And then in this slide I have, yeah, well, this is where the IPaTura service comes into play, okay?

08:27.000 --> 08:32.000
And then these are kind of a list of requirements when redesigning something, yeah.

08:32.000 --> 08:36.000
We are thinking about to support all these things at the same time.

08:36.000 --> 08:40.000
So we need a common API for managing identities.

08:40.000 --> 08:43.000
So the requirements are to be able to read and write.

08:43.000 --> 08:48.000
This is the most important one also to authenticate users from any integration domain.

08:48.000 --> 08:55.000
At the same time, now that we are redesigning everything, we are going to try to simplify the integration.

08:55.000 --> 09:01.000
And one idea is to replace all the existing plugins by just one plugin for all of them.

09:01.000 --> 09:05.000
So you can easily configure and then you can connect with anything.

09:05.000 --> 09:09.000
Another one is the cloud-friendly, maintainable solution.

09:09.000 --> 09:13.000
Yeah, we need to get rid of this limitation about deployment.

09:13.000 --> 09:17.000
We need to get a key clock and this is in the same container.

09:17.000 --> 09:21.000
This is kind of difficult without performance impact.

09:21.000 --> 09:24.000
That's always there.

09:24.000 --> 09:27.000
And ideally we shouldn't reinvent the wheel.

09:27.000 --> 09:32.000
So we need to ideally rely on existing open source projects, okay?

09:32.000 --> 09:36.000
So then, now this is a question for you.

09:36.000 --> 09:39.000
How many of you know about the scheme?

09:39.000 --> 09:41.000
You can raise your hand.

09:41.000 --> 09:44.000
That's that kind of the whole part of the room.

09:44.000 --> 09:45.000
That's nice.

09:45.000 --> 09:50.000
So it stands for system for cross-domain identity management.

09:50.000 --> 09:52.000
Okay, this is a protocol.

09:52.000 --> 10:00.000
This protocol finds or helps with this chain of user identity data between different identity management systems.

10:00.000 --> 10:06.000
It simplifies the provisioning, the updating of attributes,

10:06.000 --> 10:13.000
also the provisioning of users, of accounts, and it helps with interoperability.

10:13.000 --> 10:19.000
Okay, so it sounds like this is what we need, right?

10:19.000 --> 10:27.000
Yeah, so the idea there is to implement a scheme server for free PA as a backend

10:27.000 --> 10:31.000
to process all the requests coming from key clock, right?

10:31.000 --> 10:37.000
So, yeah, the idea is to don't start something from scratch.

10:37.000 --> 10:47.000
So based on this protocol, I think there are kind of 10 or 10 to 15 projects already implementing this protocol.

10:47.000 --> 10:53.000
And we were paying attention to one in particular, which is Django scheme 2.

10:53.000 --> 10:55.000
And this is why it's written in Python.

10:56.000 --> 11:02.000
And the reason is because free PA is also using Python, especially the API.

11:02.000 --> 11:04.000
So it's very similar.

11:04.000 --> 11:11.000
I mean, the interconnection between this, the scheme server and free PA will be some sort of straightforward.

11:11.000 --> 11:15.000
So, okay, let's start building it.

11:15.000 --> 11:17.000
Let's start building a new service.

11:17.000 --> 11:21.000
Okay, we mentioned that it must be a cloud-finally solution.

11:21.000 --> 11:22.000
So we are targeting a container.

11:22.000 --> 11:24.000
This is a container.

11:24.000 --> 11:26.000
Okay, on the left we have key clock.

11:26.000 --> 11:27.000
On the right we have free PA.

11:27.000 --> 11:37.000
So the first thing to do to add into the container is the Django framework because there is where we have the implementation of the scheme based on an open source project.

11:37.000 --> 11:48.000
Okay, this project in the container is already exposing some sort of endpoints.

11:48.000 --> 11:50.000
Okay.

11:50.000 --> 11:52.000
What is the next requirement?

11:52.000 --> 12:02.000
It must be secure enough, you know, the Django framework implements an HTTP server, but this server is kind of for developers.

12:02.000 --> 12:04.000
It's not, I mean, it's not protected at all.

12:04.000 --> 12:07.000
So, okay, so we can include Apache.

12:07.000 --> 12:09.000
It's a well-known server.

12:09.000 --> 12:15.000
And we can enable HTTPS for production-driving environments.

12:15.000 --> 12:17.000
So, all right, we add Apache.

12:17.000 --> 12:23.000
We connect Apache through the WBSGI connector to Python, and this is from Django.

12:23.000 --> 12:28.000
Okay, now we have a secure API.

12:28.000 --> 12:31.000
Okay, what is the next thing?

12:31.000 --> 12:33.000
Yeah, it must provide a generic API.

12:33.000 --> 12:46.000
So, let's rely, yeah, the breach can, at the same time, I mean, the idea is to, this is a breach, right?

12:46.000 --> 12:54.000
And then we have connected to Key Clock already, so through the user federation storage and other identity providers, brokers,

12:54.000 --> 12:57.000
we can connect to the container.

12:57.000 --> 13:06.000
This scheme protocol will help us to translate, and so we can make another call to free API through the API.

13:06.000 --> 13:09.000
And this is how, basically, how we connect everything.

13:09.000 --> 13:12.000
And it's generic because it's based on the scheme.

13:12.000 --> 13:13.000
All right.

13:13.000 --> 13:18.000
And then, yeah, we need, I was mentioning that, we need to read and write.

13:18.000 --> 13:23.000
Okay, so we implement two interfaces to connect to free API.

13:23.000 --> 13:31.000
And then, about the performance, well, deploying a container with a start service,

13:31.000 --> 13:35.000
talking to free API, making API calls is kind of expensive.

13:35.000 --> 13:41.000
Okay, but no problem because we can rely on SSSD because SSSD is implementing a catch.

13:41.000 --> 13:42.000
Okay.

13:42.000 --> 13:45.000
And then, okay, let's include SSSD in the container, right?

13:45.000 --> 13:49.000
Let's connect through the Django, through the divorce info pipe.

13:49.000 --> 13:55.000
And this is how we can access to the user materials, identity materials, right?

13:55.000 --> 13:57.000
All right.

13:57.000 --> 14:03.000
So, looks like we are almost done, but we mentioned that it must be generic enough.

14:04.000 --> 14:11.000
So, these interfaces, the right and the right one, we can easily configure them to talk,

14:11.000 --> 14:19.000
not only to free API, but also to any Active Directory, and through LDAP and also any

14:19.000 --> 14:23.000
RojHDS Directory server, right?

14:23.000 --> 14:27.000
Okay, so this is basically the idea to unify.

14:27.000 --> 14:28.000
Okay.

14:28.000 --> 14:31.000
And what about key clock?

14:31.000 --> 14:37.000
Yes, that is support the scheme calls because, well, we have implemented a scheme server.

14:37.000 --> 14:47.000
It's pushing a generic API, but key clock, well, doesn't support the scheme calls as a client, right?

14:47.000 --> 14:55.000
So, okay, as Alessandro mentioned, there is another, well, I mentioned that there are two ways

14:55.000 --> 15:00.000
to integrate user federation with an identity management system.

15:00.000 --> 15:03.000
Elavanidian, the other one is SSD, but there is a third one.

15:03.000 --> 15:11.000
The third one is that you can implement your own user data connector key clock.

15:11.000 --> 15:13.000
So, then this is what we did, basically.

15:13.000 --> 15:22.000
We implemented, and this is another project you have in GitHub, and it's basically a custom user federation

15:22.000 --> 15:27.000
that is capable of acting as a scheme client, all right?

15:27.000 --> 15:30.000
And this is what we need in key clock to connect with the server.

15:30.000 --> 15:32.000
All right, and this is how it looks like.

15:32.000 --> 15:35.000
You go to key clock, and then you will see all these options.

15:35.000 --> 15:38.000
You will see parameters for connecting to the bridge.

15:38.000 --> 15:42.000
It's basically the server URL and the username and password,

15:42.000 --> 15:46.000
but, well, we have other authentication mechanisms, probably, but this is basically,

15:46.000 --> 15:50.000
you specify the details about the integration domain.

15:50.000 --> 16:00.000
You can choose between the type IPA, is free IPA, you can choose AD, but also a lab.

16:00.000 --> 16:07.000
So, this is just for summing up, and then if we combine both projects, then we have it.

16:07.000 --> 16:14.000
And let's say that this one, which is the server running in a container,

16:14.000 --> 16:17.000
is basically supposing a lot of endpoints.

16:17.000 --> 16:23.000
For instance, there is one, which is called domains, is kind of an administrative endpoint.

16:23.000 --> 16:29.000
It's basically when key clock tries to enroll with a scheme, is sending some details,

16:29.000 --> 16:33.000
and then a scheme is implemented on the automation to make an enrollment

16:33.000 --> 16:36.000
with any other identity mind-saving system, right?

16:36.000 --> 16:43.000
And then once this is done, key clock plug-in can simply make user calls

16:43.000 --> 16:49.000
to the user federation storage to fetch for users or write and read whatever.

16:49.000 --> 16:53.000
So, yeah, it's important to note that key clock plug-in now,

16:53.000 --> 16:59.000
it doesn't communicate directly with the databases or with the other identity management,

16:59.000 --> 17:05.000
it's kind of only talking to the scheme, which is a container.

17:05.000 --> 17:08.000
So, let's go for a quick demo.

17:08.000 --> 17:12.000
Yeah, this is, in the demo, this is what is going to happen.

17:12.000 --> 17:16.000
Okay, basically, you will see key clock, you will see free APA,

17:16.000 --> 17:19.000
and a container running in another host,

17:19.000 --> 17:24.000
and we will make an HTTP post-request to the domain's application in the bridge,

17:24.000 --> 17:28.000
and the bridge will be capable of doing all this automation,

17:28.000 --> 17:32.000
because those are steps that they were done by the administrator in the past.

17:32.000 --> 17:38.000
I mean, if an administrator today wants to enroll user federation to free APA,

17:38.000 --> 17:42.000
it's going to do a lot of automation, a lot of steps there,

17:42.000 --> 17:47.000
like file a service, the proper role with the proper privileges,

17:47.000 --> 17:50.000
and generate key tabs, and blah, blah, blah, right?

17:50.000 --> 17:52.000
So, this is fully automated now.

17:52.000 --> 17:58.000
And once the other process is done, now key clock every time is looking for a user or something,

17:58.000 --> 18:02.000
it will make a generic call to a scheme server.

18:02.000 --> 18:08.000
So, what this whole looks like is a post to the scheme server,

18:08.000 --> 18:11.000
which is in JSON format through the recipe,

18:11.000 --> 18:16.000
and this service will translate that into an APA API call,

18:16.000 --> 18:19.000
and it will make it to the domain.

18:19.000 --> 18:24.000
Okay, so, yeah, I love the live demos,

18:24.000 --> 18:28.000
but I have to admit that today a little bit cold,

18:28.000 --> 18:33.000
I have a recording, and yes, I think I want to do the real demo

18:33.000 --> 18:36.000
because I have all the infrastructure deployed in Red Hat,

18:36.000 --> 18:38.000
and then this is everything recorded,

18:38.000 --> 18:41.000
and I don't want to expose DNS names or internal IP addresses,

18:41.000 --> 18:43.000
so I have a video anyway.

18:43.000 --> 18:47.000
And so, yeah, if this works...

18:47.000 --> 18:56.000
So, no.

18:56.000 --> 18:59.000
Okay, let me see what is going on here.

19:08.000 --> 19:11.000
So, very quickly, I have a quick one,

19:11.000 --> 19:13.000
so how many minutes do we have?

19:13.000 --> 19:16.000
Okay, then I have a three-minute video.

19:16.000 --> 19:31.000
So, yeah, there we go.

19:31.000 --> 19:34.000
So, yeah, the three consoles you see on the bottom,

19:34.000 --> 19:36.000
the one on the left is key clock,

19:36.000 --> 19:37.000
the one on the middle is the bridge,

19:37.000 --> 19:39.000
and this one is free API.

19:39.000 --> 19:43.000
So, this screen is key clock, we are authenticating there,

19:44.000 --> 19:48.000
and the same in free API, all right?

19:48.000 --> 19:50.000
Then we go to the user federation

19:50.000 --> 19:55.000
so that now we see it was quick, that was super quick.

19:55.000 --> 19:58.000
It's quicker than the speed of the light.

19:58.000 --> 20:00.000
So, yeah, I wanted to show you

20:00.000 --> 20:03.000
that there is a new user federation storage there.

20:03.000 --> 20:04.000
Yeah, you see?

20:04.000 --> 20:06.000
Wait.

20:06.000 --> 20:09.000
Let's see if I can...

20:09.000 --> 20:11.000
Yeah.

20:12.000 --> 20:14.000
So, these are the ones that Alexander was talking about

20:14.000 --> 20:17.000
in the previous presentation, and this is the new one, okay?

20:17.000 --> 20:20.000
So, you will see that.

20:20.000 --> 20:23.000
All right, let's continue.

20:23.000 --> 20:27.000
So, yeah, key clock, free API.

20:27.000 --> 20:29.000
So, these are the services,

20:29.000 --> 20:33.000
because you know that the machine will configure things here automatically, okay?

20:36.000 --> 20:39.000
So, now I'm going to show you where the container is running.

20:39.000 --> 20:41.000
This is a different host, by the way.

20:41.000 --> 20:43.000
It's not tight to key clock anymore.

20:46.000 --> 20:47.000
So, that's the...

20:47.000 --> 20:49.000
If you do podman.ps, this is the container, right?

20:49.000 --> 20:50.000
For the demo.

20:50.000 --> 20:55.000
It does the proper lead network mapping.

20:55.000 --> 20:57.000
You see, it's not running HTTP.

20:57.000 --> 20:59.000
Apache is not running the host,

20:59.000 --> 21:00.000
so if you log into a container,

21:00.000 --> 21:03.000
Apache is running inside the container.

21:03.000 --> 21:05.000
There we go.

21:06.000 --> 21:10.000
Yes, I'm piping the error log just to see that there is movement here,

21:10.000 --> 21:11.000
but I'm not cutting the content,

21:11.000 --> 21:15.000
because otherwise we will see a lot of IP addresses and internal stuff.

21:15.000 --> 21:16.000
So, I'm too lazy.

21:16.000 --> 21:20.000
I don't want to go to the key clock and type all the parameters,

21:20.000 --> 21:22.000
so that I do a cool call, okay?

21:22.000 --> 21:25.000
Or, well, this is with the KAdmin.

21:25.000 --> 21:28.000
You can see all the parameters that we are configuring

21:28.000 --> 21:30.000
for integrating with free API.

21:30.000 --> 21:33.000
And once we execute that command,

21:33.000 --> 21:37.000
the container is capable, you see the activity.

21:37.000 --> 21:41.000
And now we have the user federation enrolled, okay?

21:44.000 --> 21:46.000
And you will see a new service here,

21:46.000 --> 21:48.000
which is this one, the bridge, okay?

21:48.000 --> 21:49.000
It was done automatically,

21:49.000 --> 21:52.000
so you don't need to worry about that anymore.

21:52.000 --> 21:55.000
So, now everything is set up,

21:55.000 --> 21:56.000
everything is configured,

21:56.000 --> 21:58.000
so now you can manipulate users.

21:58.000 --> 22:00.000
When we create one user, for instance,

22:01.000 --> 22:05.000
I'm trying to file a user in key clock,

22:05.000 --> 22:09.000
so right away after we click on create,

22:09.000 --> 22:13.000
the user is added to the key clock database,

22:13.000 --> 22:15.000
but it's making a call to the scheme service,

22:15.000 --> 22:18.000
and the scheme service is redirecting the user to,

22:18.000 --> 22:20.000
directing the user in the IP as well.

22:20.000 --> 22:23.000
So, it appears here, okay?

22:23.000 --> 22:24.000
Yeah, that's the user,

22:24.000 --> 22:28.000
and yeah, you know, we can do all the administrative stuff,

22:29.000 --> 22:31.000
like changing for instance the email,

22:31.000 --> 22:33.000
everything is fully replicated to the free API

22:37.000 --> 22:38.000
and the Dimachment system,

22:39.000 --> 22:42.000
based on all these cool calls that are happening to the bridge,

22:42.000 --> 22:44.000
so the user is there,

22:44.000 --> 22:46.000
you can see it from the click command as well.

22:51.000 --> 22:55.000
Yeah, the modification was currently provided.

22:56.000 --> 22:59.000
So, I guess I'm trying to delete the user now,

22:59.000 --> 23:03.000
and yeah, basically, it does a group of operations,

23:03.000 --> 23:07.000
I mean create, modify, list, and delete,

23:07.000 --> 23:10.000
yeah, the user is not there anymore,

23:10.000 --> 23:14.000
and also when you delete the scheme federation,

23:14.000 --> 23:17.000
it is unenrolling, okay?

23:17.000 --> 23:20.000
So, it goes to free API and then remove the service

23:20.000 --> 23:22.000
because it's no longer needed, okay?

23:22.000 --> 23:25.000
So, this is also fully automated.

23:27.000 --> 23:32.000
Okay, so, what you just saw here in this video,

23:32.000 --> 23:35.000
is the user provisioning, okay?

23:35.000 --> 23:37.000
We are not done yet.

23:38.000 --> 23:41.000
Let me see, because I have a bonus.

23:43.000 --> 23:45.000
If I can close the video now.

23:46.000 --> 23:48.000
So, the bonus is...

23:52.000 --> 23:54.000
Oh, now it's working.

23:55.000 --> 23:58.000
Now it's working, okay, when I don't need it.

23:59.000 --> 24:01.000
Okay, now, okay, this is a bonus.

24:01.000 --> 24:03.000
This is a working progress, all right?

24:03.000 --> 24:06.000
This is the other piece, the identity federation.

24:06.000 --> 24:08.000
You just saw in the video, the user federation,

24:08.000 --> 24:10.000
but this is the identity federation,

24:10.000 --> 24:14.000
and it is all about to expose another endpoint in the bridge,

24:14.000 --> 24:19.000
so that key clock can also make calls to the bridge,

24:19.000 --> 24:22.000
but now, not for user provisioning,

24:22.000 --> 24:25.000
or modifications, it's for authenticating,

24:25.000 --> 24:27.000
and this one is for Kerberos, okay?

24:27.000 --> 24:30.000
So, this is kind of controlling Kerberos,

24:30.000 --> 24:34.000
and then the scheme, I mean the bridge, Ipantura,

24:34.000 --> 24:38.000
is capable of translating that into an operation

24:38.000 --> 24:42.000
that we've modelled, yes, this API, using a proper kit up,

24:42.000 --> 24:45.000
and then free API will answer with the session cookie,

24:45.000 --> 24:47.000
or it will fetch from the SSD,

24:47.000 --> 24:49.000
or well, from the cache, and then it will respond back

24:49.000 --> 24:52.000
the session cookie, so that the cloud application

24:52.000 --> 24:56.000
that is running here, trying to log in into key clock,

24:56.000 --> 25:01.000
is actually authenticating in IPA, nothing key clock, okay?

25:01.000 --> 25:07.000
So, yes, and then, yeah, this final slide is about

25:07.000 --> 25:11.000
potential usage, so this can be used for synchronization

25:11.000 --> 25:15.000
of identities across different providers, as you can see.

25:15.000 --> 25:19.000
Also, we can use it to migrate all the users,

25:19.000 --> 25:22.000
because the beauty of the scheme is that you can do

25:22.000 --> 25:25.000
mapping of the attributes, so you can translate anything

25:25.000 --> 25:27.000
you have in any cloud application into something

25:27.000 --> 25:30.000
that is more powerful, like free API,

25:30.000 --> 25:33.000
and then with UIDs and UIDs that are generated automatically,

25:33.000 --> 25:37.000
I mean, it's amazing, and the good point as well

25:37.000 --> 25:42.000
about potential usage is that key clock,

25:42.000 --> 25:47.000
if we merge this in key clock, there will be a user federation

25:47.000 --> 25:50.000
that will be capable of connecting to any scheme server,

25:50.000 --> 25:52.000
it doesn't need to be this one.

25:52.000 --> 25:56.000
So now key clock can talk to a scheme as a client, right?

25:56.000 --> 26:01.000
And this service, as a scheme server that we implemented

26:01.000 --> 26:05.000
in IPA as a container, can be also used to connect

26:05.000 --> 26:09.000
with other clients, it doesn't need to be necessarily key clock,

26:09.000 --> 26:14.000
we can connect to Azure or Azure AD or any other,

26:14.000 --> 26:19.000
for instance, I don't know, anyone that is supporting the protocol.

26:19.000 --> 26:22.000
So, yeah.

26:22.000 --> 26:24.000
So, yeah, that was it.

26:24.000 --> 26:26.000
I think we have time for questions, right?

26:26.000 --> 26:27.000
More or less?

26:27.000 --> 26:28.000
One, two minutes?

26:28.000 --> 26:29.000
Okay.

26:29.000 --> 26:31.000
Yes, please.

26:31.000 --> 26:35.000
You spoke about intervention with AD,

26:35.000 --> 26:40.000
I want some idea of the client side, you would have windbind,

26:40.000 --> 26:44.000
would you be able to replace SSD with windbind

26:44.000 --> 26:46.000
and still use this solution?

26:46.000 --> 26:50.000
So the question is if we can replace windbind...

26:50.000 --> 26:57.000
Yeah, from SSD with this solution with...

26:57.000 --> 27:04.000
So, not yet, the answer is not yet,

27:04.000 --> 27:08.000
but yeah, I think we can look into it and potentially,

27:08.000 --> 27:10.000
potentially, yeah, it could be done.

27:10.000 --> 27:14.000
If we decide to prioritize that use case over the others,

27:14.000 --> 27:16.000
why not?

27:16.000 --> 27:19.000
Yeah, but not yet.

27:19.000 --> 27:21.000
What's the not yet part of it?

27:21.000 --> 27:22.000
Say again, please.

27:22.000 --> 27:23.000
Will it happen?

27:23.000 --> 27:24.000
Will it happen?

27:24.000 --> 27:25.000
Will it happen?

27:25.000 --> 27:28.000
That's a good question because we haven't done any release.

27:28.000 --> 27:30.000
This is an upstream project.

27:30.000 --> 27:32.000
We have two upstream projects.

27:32.000 --> 27:37.000
So, yeah, our intention is to make this to happen.

27:37.000 --> 27:43.000
This will help simplify a lot the key clock user

27:43.000 --> 27:46.000
integration with identity management systems

27:46.000 --> 27:51.000
and also it's very convenient now to get a deployment

27:51.000 --> 27:53.000
independent from the host so that you can get

27:53.000 --> 27:58.000
a container, this is kind of on the towards the cloud,

27:58.000 --> 28:00.000
cloud-based applications.

28:00.000 --> 28:02.000
So, yeah.

28:02.000 --> 28:05.000
So, about our plans, our plan, I mean,

28:05.000 --> 28:08.000
the key clock plugin is more or less completed.

28:08.000 --> 28:10.000
Now we are thinking about sending to key clock

28:10.000 --> 28:12.000
so that it will be emerging upstream first

28:12.000 --> 28:15.000
and then it will appear scheme client there.

28:15.000 --> 28:19.000
And the service, as soon as we finalize the

28:19.000 --> 28:22.000
Kerberos authentication redirection,

28:22.000 --> 28:26.000
then I guess we will be in good shape to make a first release

28:26.000 --> 28:30.000
in upstream, okay, and later on,

28:30.000 --> 28:34.000
if once we prioritize a lot of aspects,

28:34.000 --> 28:38.000
then, yeah, potentially yes, it will replace or,

28:38.000 --> 28:40.000
especially will replace the SSD connector

28:40.000 --> 28:44.000
we have in key clock, that for sure, okay.

28:44.000 --> 28:45.000
Okay.

28:45.000 --> 28:47.000
Thank you.

