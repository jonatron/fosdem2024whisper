WEBVTT

00:00.000 --> 00:10.000
So let's start with the next talk.

00:10.000 --> 00:19.000
And this welcome, Thomas Werner, talking about Ansible Free APA.

00:19.000 --> 00:20.000
Hello.

00:20.000 --> 00:26.000
So, let's go in here.

00:26.000 --> 00:34.000
So, this talk will be about Ansible Free APA to use for AD integration, so Microsoft Active Directory,

00:34.000 --> 00:37.000
and also to set up external identity providers.

00:37.000 --> 00:42.000
The plan was to have an online demo here, but yeah, there have been some issues.

00:42.000 --> 00:50.000
So, there is slides and there will be online demo later on on the web page.

00:50.000 --> 01:01.000
So, for the automated Free APA deployment, I have been using the work from my colleague, Raphael,

01:01.000 --> 01:08.000
and we had to change something in the inventory to make it work, especially in my environment.

01:08.000 --> 01:16.000
So, if you want to do it on your own, it's used as a base for the whole presentation.

01:16.000 --> 01:24.000
These are the steps to do, and one important thing is please fix time and time zone on all the machines,

01:24.000 --> 01:27.000
otherwise you will have fun.

01:27.000 --> 01:37.000
With covers, tickets, not valid tickets, tickets that are in the future or in the past and so on, so not fun.

01:37.000 --> 01:43.000
The first step was get your windows you want to use.

01:43.000 --> 01:48.000
There is a nice documentation on this web page from Raphael.

01:48.000 --> 01:54.000
The different steps you need to do where you can get the images and what kind of images are working and so on.

01:54.000 --> 02:02.000
The first step that we need to do from Windows AD step setup is to change the first script that we have this,

02:02.000 --> 02:11.000
Windows AD setup playbook to disable IPv6 because if we do not, we will have lots of fun with DNS later on.

02:11.000 --> 02:15.000
So, this was one of the most important things.

02:15.000 --> 02:21.000
And we're coming to the setup of the IPA server.

02:21.000 --> 02:33.000
For IPA server, as we wanted to have a replica deployment later on, it was needed also to enable DNS and auto reverse.

02:33.000 --> 02:41.000
Sadly, there is an issue with auto reverse creation later on, but it is fixed manually.

02:41.000 --> 02:48.000
And there is another issue with DNS with Windows, so you need to disable DNS stack validation.

02:48.000 --> 02:51.000
In the lab, that's a lab.

02:51.000 --> 02:54.000
Yep.

02:54.000 --> 02:59.000
You will find out if it's working for you or not.

02:59.000 --> 03:04.000
So, then you can simply do the steps that are on the web page.

03:04.000 --> 03:11.000
So, the first IPA setup, then there is a nice test to make sure that DNS is really working on both sides.

03:11.000 --> 03:13.000
This is the NSLookup test.

03:13.000 --> 03:21.000
So, it tries to find the Kerberos TXT records on Windows side and Linux side on both ends.

03:21.000 --> 03:24.000
So, it verifies that everything is working in here.

03:24.000 --> 03:27.000
And the last one is setting up the trust.

03:27.000 --> 03:33.000
I'm not adding the information in here because it's completely unchanged from the script in here.

03:33.000 --> 03:42.000
And after we've done that, we can log in with the AD administrator into our Linux server.

03:42.000 --> 03:45.000
ServerLinIPa test.

03:45.000 --> 03:52.000
You can see I can log in, I have a ticket, I can get my AD, and then I'm trying to do a change in IPA.

03:52.000 --> 03:55.000
And it says, hmm, invalid credentials.

03:55.000 --> 03:58.000
Okay, so, but we have a solution for that.

03:58.000 --> 04:02.000
Also an answer for your IPA that was added lately.

04:02.000 --> 04:13.000
So, we can add, we can grant the rights to the AD administrator to act as an IPA administrator.

04:13.000 --> 04:25.000
So, the first one is adding an ID overwrite that is needed to be able to use the AD administrator.

04:25.000 --> 04:41.000
And the second one is adding this an overwrite for this administrator to the admins group to make sure that this user is able to do something so that it has admin rights on IPA.

04:41.000 --> 04:48.000
And after we've done this, we can directly add a user, remove a user.

04:48.000 --> 04:50.000
You can do everything.

04:50.000 --> 04:54.000
So, host, users, whatever you want be.

04:54.000 --> 05:00.000
AD administrator is an IPA administrator.

05:00.000 --> 05:08.000
And the next part was, okay, let's try to do client deployment using this AD administrator.

05:08.000 --> 05:14.000
So, the inventory file needed to be a little bit changed in here.

05:14.000 --> 05:16.000
So, there's a client set up.

05:16.000 --> 05:18.000
There is also a setting.

05:18.000 --> 05:20.000
I don't know if you know about that.

05:20.000 --> 05:22.000
This is configured DNS resolver.

05:22.000 --> 05:34.000
This is a feature of the IPA client role to set up the client in a way that is that the DNS server or the DNS server you're configuring here.

05:34.000 --> 05:37.000
This is the IP address of the DNS server that was used.

05:37.000 --> 05:49.000
So, the first step of IPA client role is to set up network manager or systemdresolved or resolveconf so that you are able to use the DNS server directly.

05:49.000 --> 05:52.000
So, it's not needed to do this manually.

05:52.000 --> 05:57.000
And also, if you do an unconfigure, it will remove it again if you set the variable.

05:57.000 --> 06:00.000
So, it's doing this automatically.

06:00.000 --> 06:07.000
And the next two lines are to force it to use the administrator of AD.

06:07.000 --> 06:09.000
And there is one important thing here.

06:09.000 --> 06:12.000
You need to write it correctly.

06:12.000 --> 06:18.000
So, that means a capitalized A in administrator and also the domain capitalized.

06:18.000 --> 06:19.000
Otherwise, it will not work.

06:19.000 --> 06:23.000
If you log in, it's working without because there is a rule for that.

06:23.000 --> 06:25.000
But here, there is nothing.

06:25.000 --> 06:27.000
So, you need to write it correctly.

06:27.000 --> 06:29.000
This is the first issue.

06:29.000 --> 06:33.000
So, why isn't it able to find the AD administrator?

06:33.000 --> 06:35.000
But, okay.

06:35.000 --> 06:38.000
With this, we are able to deploy the client.

06:38.000 --> 06:41.000
And it's working afterwards.

06:41.000 --> 06:45.000
So, you see here, the next one is the playbook to deploy the client.

06:45.000 --> 06:49.000
So, it's the normal thing you see on Ansible Free APA.

06:49.000 --> 06:51.000
There is a playbook for this.

06:51.000 --> 06:54.000
So, you can simply consume it.

06:54.000 --> 06:56.000
Yeah, so, client was easy.

06:56.000 --> 06:58.000
What is next?

06:58.000 --> 07:00.000
Yeah, replica.

07:00.000 --> 07:05.000
But for replica, we ran into an issue with command line and also Ansible Free APA.

07:05.000 --> 07:10.000
So, there is currently an issue in the replica connection check.

07:10.000 --> 07:13.000
It tries to use admin.

07:13.000 --> 07:16.000
And for sure, the password is not valid.

07:16.000 --> 07:18.000
So, it fails.

07:18.000 --> 07:22.000
We will find out what exactly the issue is to solve it.

07:22.000 --> 07:24.000
It's affecting command line.

07:24.000 --> 07:28.000
So, Free APA package itself and also Ansible Free APA.

07:28.000 --> 07:32.000
So, it doesn't matter which you're using to deploy.

07:32.000 --> 07:34.000
They will both fail.

07:34.000 --> 07:37.000
But there is a temporary workaround.

07:37.000 --> 07:39.000
So, disable replica contact.

07:39.000 --> 07:42.000
But make sure that it's working.

07:42.000 --> 07:44.000
So, DNS needs to be working.

07:44.000 --> 07:48.000
And also, the reverse lookup needs to be working.

07:48.000 --> 07:51.000
Otherwise, it will fail also.

07:51.000 --> 07:55.000
And the next step is simply to deploy the replica.

07:55.000 --> 07:56.000
And then we are there.

07:56.000 --> 07:58.000
And we have a working replica.

07:58.000 --> 08:00.000
We can use it also to deploy clients.

08:00.000 --> 08:06.000
Also using administrator AD8-PI test and so on.

08:06.000 --> 08:11.000
So, we have some issues and we will work on them in the next time.

08:11.000 --> 08:16.000
But they are relatively small in my opinion.

08:16.000 --> 08:20.000
It could have been worse.

08:20.000 --> 08:25.000
And now we are coming to the second part.

08:25.000 --> 08:27.000
A colleague of mine wanted to present this here,

08:27.000 --> 08:29.000
but he was not able to come.

08:29.000 --> 08:32.000
So, the second thing that we added in Ansible Free APA

08:32.000 --> 08:38.000
was the possibility to configure and use external IDP.

08:38.000 --> 08:43.000
There will be another talk later on about external IDP.

08:43.000 --> 08:45.000
It will be true.

08:45.000 --> 08:47.000
But we will be a big deal for that.

08:47.000 --> 08:52.000
So, any open questions here might be solved by this one.

08:52.000 --> 08:59.000
So, Free IPA has the modules for external IDP.

08:59.000 --> 09:05.000
There is a new module that was added to Ansible Free APA

09:05.000 --> 09:10.000
and also the use of external IDP was added to the user and so on.

09:10.000 --> 09:16.000
So, we can configure Free IPA as an OAuth application on GitHub.

09:16.000 --> 09:19.000
This is the example that I will show here.

09:19.000 --> 09:25.000
So, let's go directly to this one.

09:25.000 --> 09:31.000
So, we are creating a GitHub OAuth application in the first step

09:31.000 --> 09:38.000
because this is needed to be able to configure external IDP with IPA.

09:38.000 --> 09:41.000
So, the steps is simply go to your GitHub,

09:41.000 --> 09:47.000
go to developer settings, OAuth apps and register a new application

09:47.000 --> 09:52.000
and read the docs.

09:52.000 --> 09:55.000
If you do so, it will ask for several things.

09:55.000 --> 09:58.000
So, it will ask for application name,

09:58.000 --> 10:03.000
the homepage URL which is also the authorization callback URL.

10:03.000 --> 10:05.000
So, you should have the same in there.

10:05.000 --> 10:08.000
This is the iperserver.com.

10:09.000 --> 10:13.000
And please also add a description to be able to find it later on.

10:13.000 --> 10:19.000
And enable device flow, this is needed for IPA to be able to handle this at all in the end.

10:19.000 --> 10:22.000
So, this is very important to enable.

10:22.000 --> 10:26.000
And then click register application.

10:26.000 --> 10:32.000
And if you have done so, you will get a client ID and also a client secret.

10:32.000 --> 10:36.000
It's very important to keep those secret.

10:36.000 --> 10:44.000
But one thing, you need both of them in the next step for the setup of external IDP.

10:44.000 --> 10:48.000
So, there is no way to get to the second one again.

10:48.000 --> 10:53.000
So, either write it down, make a screenshot, whatever, but in a safe way.

10:53.000 --> 11:00.000
And if you have those settings, you can go to Ansible Free APA.

11:00.000 --> 11:05.000
And here you see, we are using simply them in text form.

11:06.000 --> 11:11.000
But you can also use Ansible Vault for that.

11:11.000 --> 11:14.000
So, that you do not have the passwords here, but for simplicity.

11:14.000 --> 11:18.000
It's here, the same with IPA admin password.

11:18.000 --> 11:22.000
It's here simply to make it simple for us to see what's going on there.

11:22.000 --> 11:26.000
Otherwise, it will be a little bit cryptic.

11:27.000 --> 11:34.000
And so, this is simply creating, setting up the external provider.

11:34.000 --> 11:41.000
And in the next step, we need to retrieve the GitHub user ID.

11:41.000 --> 11:45.000
Oh, one thing that we should add here.

11:45.000 --> 11:49.000
So, IDP user ID is set to ID here.

11:49.000 --> 11:53.000
There is another way, but this is way better

11:53.000 --> 11:57.000
because with GitHub, it's possible to reuse names.

11:57.000 --> 12:02.000
So, it's really good to use ID here for authentication

12:02.000 --> 12:08.000
because then you will not run into this possible name clash later on.

12:08.000 --> 12:12.000
And this is common problem for many IDPs,

12:12.000 --> 12:16.000
that if you delete the user and after some time,

12:16.000 --> 12:20.000
another user registers the same user visible name,

12:20.000 --> 12:26.000
that user becomes basically squirting the previous one.

12:26.000 --> 12:34.000
And many of those providers, they run like 90 days protection of the accounts.

12:34.000 --> 12:37.000
Even if you delete accounts, you can not register one.

12:37.000 --> 12:40.000
But eventually, they expire.

12:40.000 --> 12:43.000
So, somebody can squirt your account in this way.

12:43.000 --> 12:49.000
If you've configured your systems to trust whatever was the user name in the system, good luck.

12:49.000 --> 12:54.000
You will be hacked a year later when you start doing it.

12:54.000 --> 13:00.000
So, taking these other fields into account is very important.

13:00.000 --> 13:06.000
And this is part of administrators to kind of design this thing.

13:06.000 --> 13:10.000
Unfortunately, all these fields, they are not visible in the UI.

13:10.000 --> 13:13.000
So, normal view can not see this information.

13:13.000 --> 13:15.000
So, it's admin that needs to discover.

13:15.000 --> 13:21.000
Yeah. So, use it this way.

13:21.000 --> 13:25.000
So, we're retrieving the GitHub user ID.

13:25.000 --> 13:27.000
It's stored here.

13:27.000 --> 13:36.000
And in the next step, the IDP user ID is using this retrieved user ID.

13:36.000 --> 13:47.000
The bad thing here is, sadly, IDP user ID here and IDP user ID here is not the same.

13:47.000 --> 13:55.000
One is a user ID, so a number, and the other one is really a user name.

13:55.000 --> 14:01.000
So, be careful and read correctly.

14:01.000 --> 14:09.000
So, the thing is, Ansible Free API is trying to use the names from IP itself.

14:09.000 --> 14:20.000
So, you will see the same naming issues in Ansible Free API that you see in free IP itself.

14:20.000 --> 14:26.000
And after we've done this, the user is able to authenticate.

14:26.000 --> 14:34.000
So, it needs to get the code, and with the code, it's possible to log in.

14:34.000 --> 14:38.000
And that's it.

14:38.000 --> 14:40.000
Thank you.

14:40.000 --> 14:48.000
So, we have like six minutes.

14:48.000 --> 14:51.000
Do you have questions?

14:51.000 --> 14:54.000
Yes, please.

14:54.000 --> 15:01.000
Please scroll to the beginning of your presentation where you describe the service stuff.

15:01.000 --> 15:03.000
This one?

15:03.000 --> 15:07.000
Yes.

15:07.000 --> 15:14.000
Well, I hate the NSSEC myself, but why do you disable the NSSEC presentation?

15:14.000 --> 15:23.000
If you do not disable the NSSEC right now, the IPA server gets a reply from the Windows DNS server,

15:23.000 --> 15:25.000
it's ignoring it.

15:25.000 --> 15:30.000
Maybe you should have said that this is about the lab setup.

15:30.000 --> 15:41.000
So, if you have a lab where you don't have a Windows configured DNS SSEC in the Windows DNS server setup,

15:41.000 --> 15:45.000
which is not default, they don't set up the DNS SSEC.

15:45.000 --> 15:51.000
So, your lab is basically disconnected from the Internet, and it doesn't care about DNS SSEC.

15:51.000 --> 15:57.000
So, that's your ADC DNS SSEC in that lab, or you don't.

15:57.000 --> 16:02.000
So, Thomas choose the easiest way to configure DNS SSEC in the lab.

16:02.000 --> 16:10.000
But, IPA configures DNS SSEC by default if you use the internal DNS server.

16:10.000 --> 16:17.000
That's why it's forced into disabled validation because it's enabled on IPA sign.

16:17.000 --> 16:24.000
So, either that Windows setup in the lab needs to gain DNS SSEC configuration,

16:24.000 --> 16:31.000
or both of the sites needs to drop DNS SSEC validation.

16:31.000 --> 16:37.000
Sorry, I don't get, because, well, if you implemented DNS SSEC validation,

16:37.000 --> 16:45.000
implying that the DNS records SSEC are required, it's something weird.

16:45.000 --> 16:53.000
Otherwise, you just don't get any signatures, and you have nothing to disable.

16:53.000 --> 17:02.000
Now, a buy-in server, which IPA uses as an internal server, has DNS SSEC validation enabled by default.

17:02.000 --> 17:07.000
You cannot switch it off unless you explicitly say to switch it off.

17:07.000 --> 17:12.000
Yes, but if there is no signature, it should not reach anything.

17:12.000 --> 17:17.000
It does check, and it does reject the request.

17:17.000 --> 17:20.000
It rejects on signed address.

17:20.000 --> 17:23.000
But this is just a lab story.

17:23.000 --> 17:29.000
I try you do not disable DNS SSEC validation in the wild,

17:29.000 --> 17:33.000
unless you know what you are doing and then pay consequences.

17:33.000 --> 17:35.000
Okay, thanks.

17:36.000 --> 17:43.000
Yeah, I think probably the problem, the reality is that a lot of RokyD setups don't have it enabled

17:43.000 --> 17:46.000
because nobody ever talks to them, they're blue.

17:46.000 --> 17:52.000
In many cases, people are using cloud-based DNS services,

17:52.000 --> 17:56.000
so it's not the DNS server on your infrastructure.

17:56.000 --> 18:03.000
It's some of the DNS servers provided by, I don't remember the names of those companies,

18:03.000 --> 18:13.000
and those typically do not have DNS SSEC enabled for the whole zone that the company rents out of them.

18:13.000 --> 18:15.000
Okay, yes, just a second.

18:15.000 --> 18:21.000
Okay, so there's some language. Does this experimentary work with Samba as well?

18:21.000 --> 18:29.000
Does the external ID provider work with Samba also?

18:29.000 --> 18:32.000
I think I need to answer this.

18:32.000 --> 18:34.000
Thank you.

18:34.000 --> 18:43.000
One of them is using AD user to manage IPA.

18:43.000 --> 18:50.000
This will work with Samba, because this is just a normal job between IPA and activity.

18:50.000 --> 19:01.000
The external ID provider is called IPA users, because IPA only authenticates users that are in IPA.

19:01.000 --> 19:06.000
AD users authenticated by the active territory domain controllers.

19:06.000 --> 19:14.000
Microsoft implementation of active territory does not have perverse pre-authentication method

19:14.000 --> 19:18.000
that supports anything like that at all.

19:18.000 --> 19:20.000
Completely.

19:20.000 --> 19:22.000
Same with Samba AD.

19:22.000 --> 19:26.000
Samba AD built with Heimdall has no way to handle this.

19:26.000 --> 19:32.000
Samba AD built against MIT perverse has theoretical way to handle this.

19:32.000 --> 19:41.000
It's not implemented, and it's on my and Andrea's plans to complete this work on Samba AD site.

19:41.000 --> 19:50.000
There will be more about it in the hour talk, that will be the last talk of the day.

19:50.000 --> 19:52.000
More questions?

19:52.000 --> 19:55.000
I hope it was captured by the mic.

19:55.000 --> 19:57.000
I hope.

19:57.000 --> 19:59.000
Yes?

19:59.000 --> 20:05.000
It's the difference between this kind of integration and the one you spoke about in the morning.

20:05.000 --> 20:07.000
Wow, good question.

20:07.000 --> 20:09.000
Maybe I can answer this one.

20:09.000 --> 20:13.000
This is basically Azure Freebase.

20:13.000 --> 20:19.000
It's a new Samba network that will make the point of computer development.

20:19.000 --> 20:21.000
Here we have an ID integration.

20:21.000 --> 20:29.000
This kind of Azure Freebase is simply created to establish a class with AD.

20:29.000 --> 20:36.000
The one for my presentation is basically a container service that is capable of connecting to the LDAP from AD

20:36.000 --> 20:42.000
to make a request to LDAP, Python LDAP, something like that.

20:42.000 --> 20:51.000
The one that was in the morning, the PAA theorem, in the center, the client enrolled into AD or IPA

20:51.000 --> 20:57.000
and provided services to web applications, which is key to all of this case.

20:58.000 --> 21:03.000
Any more questions?

21:03.000 --> 21:06.000
We have time.

21:13.000 --> 21:15.000
Thank you.

