WEBVTT

00:00.000 --> 00:12.080
Hello everyone, thank you for coming and thank you for all the live streamers.

00:12.080 --> 00:17.000
A little bit about me, I'm a college student living in the US and I've been doing a lot

00:17.000 --> 00:22.600
of tech tinkering on open source stuff since I was little and there's been a lot of that

00:22.600 --> 00:24.640
experimentation in my house.

00:24.640 --> 00:30.240
Ubuntu has also been a very common operating system in our house just as much as Windows

00:30.240 --> 00:35.120
or Mac OS and so I have a particular affinity to it.

00:35.120 --> 00:42.440
On top of that the ASAHI Linux project that came out in 2022 sparked up an interest in

00:42.440 --> 00:48.480
me and reminded me that what my mobile devices were capable of running on their chips and

00:48.480 --> 00:56.720
so at the beginning I was running virtual machine Ubuntu images on my iOS devices but

00:56.720 --> 01:01.360
that wasn't native, that was virtual machines so I wanted a native Linux first device that

01:01.360 --> 01:08.280
was also affordable and accessible and that is where Pine 64 particularly stands out.

01:08.280 --> 01:15.640
And another important fact is that Orin actually means Pine so I've had a particular connection

01:15.640 --> 01:23.560
to them and affinity with them and dedication to their work.

01:23.560 --> 01:28.800
And so what makes Ubuntu Touch on Pine 64 different from most devices is split in two

01:28.800 --> 01:29.800
ways.

01:29.800 --> 01:36.040
One, Pine 64's devices are not like most Ubuntu Touch devices and that is that like many of

01:36.040 --> 01:43.400
the other talks earlier today have mentioned Ubuntu Touch runs on Hallyum kernels as opposed

01:43.480 --> 01:48.800
to mainline kernels which means that there's a lot of extra components that are thrown

01:48.800 --> 01:55.040
in the middle to do some abstraction to get a lot of the sensors and modem and such working.

01:55.040 --> 02:00.040
However on Pine 64 devices we don't have to use that, we have to use instead our own

02:00.040 --> 02:06.800
middleware often and also Ubuntu Touch is different than a lot of mobile Linux distributions

02:06.800 --> 02:13.120
because almost of those distributions allow you complete control over your operating system

02:13.160 --> 02:18.880
with a read write and file system and updates as they come.

02:18.880 --> 02:26.880
Ubuntu Touch does a read only file system to provide an immutability layer as well as

02:26.880 --> 02:33.520
over the air updates so updates happen in big chunks at once rather than individual packages

02:33.520 --> 02:35.160
as they come.

02:35.160 --> 02:41.080
So these pieces in particular have made adapting Pine 64 devices for Ubuntu Touch a challenge

02:41.200 --> 02:44.120
but a welcome one.

02:44.120 --> 02:52.120
So some background starts with the original 16.04 port came at a pivotal time for both

02:53.120 --> 02:55.920
Ubiports and Pine 64.

02:55.920 --> 03:02.920
For starters there was ongoing work to move to 18.04 from 16.04 although that work was

03:02.920 --> 03:09.800
later abandoned in favor of focusing on the jump to 20.04 as the project was focusing

03:09.800 --> 03:15.520
mainly on migrating away from legacy tools like Upstart when Canonical was developing

03:15.520 --> 03:22.520
the project and towards a system D based stack which the Ubiports team has done a great

03:22.800 --> 03:25.600
job with.

03:25.600 --> 03:32.600
They also announced around this time the renaming of Unity 8 to Lumiri which is still an ongoing

03:32.720 --> 03:39.720
process and involved not just the changing of a name in one place but in every single

03:39.720 --> 03:46.720
bit of code which has provided some incompatibilities as we will find out later on.

03:48.760 --> 03:54.280
The original PinePhone Community Edition came with Ubuntu Touch as well as the original

03:54.280 --> 03:59.980
Pine tab and when both of these were developed they were done primarily by one guy Dalton

03:59.980 --> 04:06.980
Durst who did a lot of work for not only these ports but also for the entirety of the Ubiports

04:07.460 --> 04:14.460
team and so he was handling a lot of internal infrastructure which meant that when the team

04:15.660 --> 04:21.380
was working on the eventual switch to 20.04 the Pine 64 port had to be pushed aside in

04:21.380 --> 04:26.420
favor of a lot of other stuff that Dalton was working on.

04:26.420 --> 04:33.060
And then another pivotal moment came in 2022 when first Dalton had left the development

04:33.060 --> 04:38.340
team to go work on other projects which left the PinePhone port completely abandoned at

04:38.340 --> 04:45.340
that point and Pine 64 also came out with the PinePhone Pro Explorer Edition which was

04:45.700 --> 04:50.700
around the time when I started getting interested in the device but notably the device didn't

04:50.700 --> 04:55.740
have an Ubuntu Touch port which means that I had to make that.

04:55.740 --> 05:00.260
And so my process with this port originally began with looking at some of the other builder

05:00.300 --> 05:06.260
scripts that were around. Notably there's one that is linked on the wiki called the DPA

05:06.260 --> 05:13.020
image builder that taught me a lot about how the structure of the images are compiled which

05:13.020 --> 05:18.900
allowed me to create this chart here and what's important about the PinePhone Pro is that the

05:18.900 --> 05:25.420
bootloader is separated onto a separate SPI chip rather than within the images themselves

05:25.460 --> 05:31.460
which meant I didn't have to pack those anymore which is a great benefit.

05:36.460 --> 05:43.460
We can also use particularly tow boot as our bootloader which allows us to dual boot

05:44.060 --> 05:49.660
using the volume keys or even switch into mass storage mode to flash directly to the

05:49.700 --> 05:56.700
device from any other machine. But as I quickly found out most of the fun was in the kernel

05:59.900 --> 06:05.620
and it didn't work immediately when I booted it because at the time the PinePhone Pro device

06:05.620 --> 06:11.940
tree files were not in the kernel yet and so I had to pull them from downstream. Particularly

06:11.940 --> 06:18.580
a lot of my kernel work has reflected Medjy's work and it was looking at his work that helped

06:18.620 --> 06:25.620
me figure out how to get those device trees in. Once I passed that process I had a booting

06:26.340 --> 06:33.340
and boot-to-image but this was not a distributable boot-to-image it was built manually and was

06:35.220 --> 06:42.220
heavy. So I had to switch to making a port for a boot-to-touch. It uses a very similar

06:42.940 --> 06:49.640
process but slightly different rather than reboot strapping from scratch. We actually

06:49.640 --> 06:55.780
pull a CD image from Ubuntu server and then use a program called Devo's which can open

06:55.780 --> 07:02.220
a Docker or Podman container and build on top of that CD image to create our final distributable

07:02.220 --> 07:08.420
images. And last year at FOSSTEM I wasn't here but an early stage of my PinePhone Pro

07:08.420 --> 07:15.420
port was shown off at the FOSSTEM stand and this year I now have four devices, the PinePhone,

07:15.940 --> 07:20.660
the PinePhone Pro, the PineTab and the PineTab 2 all running on a much stabbler version of

07:20.660 --> 07:27.660
the port. So once I got the PinePhone Pro ported it was time to move on to the PinePhone which

07:28.540 --> 07:35.540
was still stuck behind on 1604 and I didn't have the PinePhone myself but I could do some

07:36.460 --> 07:43.460
research in the meantime and so I found out actually that there was no reason why I couldn't

07:44.300 --> 07:51.000
include both architectures for the devices inside of my kernel image which I also learned

07:51.000 --> 07:58.000
from Meji's stream and once I had a unified kernel I also found out that we could use

07:58.840 --> 08:05.840
tow boot on the PinePhone as well which once again split out that necessity of having to

08:06.240 --> 08:13.240
pack the bootloader into our images and I asked someone to try it out on their device

08:14.360 --> 08:19.160
and sure enough it worked which was wonderful which meant we had both the PinePhone and

08:19.160 --> 08:25.840
the PinePhone Pro up within just like two weeks of each other. Shortly after that the

08:25.840 --> 08:32.840
PineTab 2 pre-orders went live and at this point I was looking to make another port and

08:34.360 --> 08:37.760
the UB ports team actually reached out to me and said do you want us to send that to

08:37.760 --> 08:43.500
you so that you can make the port nice, happily obliged and they also sent me one of the original

08:43.500 --> 08:50.500
PinePhone to maintain at this time and then the PineTab 2's port was very similar to the

08:51.500 --> 08:56.500
other ones and I had most of the hang of it by this point but it was too early for a tow

08:56.500 --> 09:01.940
boot port to be out yet so we had to use the UBOOT binaries which meant I had to go back

09:01.940 --> 09:08.940
to learning how to pack that into the image properly but luckily besides the bootloader

09:10.180 --> 09:17.180
the rest of the process was essentially the same and then after we had the PineTab 2 port

09:18.180 --> 09:22.860
another community member reached out to me and said hey I see that you have these other

09:22.860 --> 09:28.060
three devices ported up and I've got an original PineTab sitting in my drawer not doing anything

09:28.060 --> 09:31.580
would you like me to send it to you so that you can create a port for that as well and

09:31.580 --> 09:38.580
once again I said of course and unfortunately tow boot doesn't work on the PineTab either

09:39.580 --> 09:46.580
because the run for how many PineTabs actually came out was quite limited so the main maintainer

09:49.020 --> 09:56.020
of tow boot never got his hands on the device to create that port so we used the PineTab

09:58.100 --> 10:05.100
2's process again and just packed the bootloader back into the images and that had two congruent

10:06.100 --> 10:10.980
sides, a PinePhone set of images without the bootloader in it and then a PineTab set of

10:10.980 --> 10:17.660
images with the bootloader in it. Notably the PineTab and PineTab 2 do use different bootloaders

10:17.660 --> 10:22.820
because they have different architectures so there are individual images for each of

10:22.820 --> 10:29.820
those devices. I was also warned about using kernel versions greater than 6.1 on the PineTab

10:30.820 --> 10:37.820
because apparently it would cause a kernel panic and an infinite reboot. I found that

10:39.980 --> 10:45.940
this was partially true but it was a very easy problem to solve all I needed to do was

10:45.940 --> 10:52.940
move a module from internal to external which allows it to run after the DRM system that

10:53.220 --> 11:00.220
it was relying on to run and then it never has that kernel panic because it never starts

11:00.220 --> 11:07.220
before it's supposed to. As I stated previously though a ported device doesn't mean all of

11:14.460 --> 11:19.060
its features are working so there were a lot of software component hurdles that I had

11:19.060 --> 11:24.140
to get over to get to the state that we were in today. Two of the biggest ones have been

11:24.140 --> 11:29.340
rotation and modem both of which were due to the niche circumstances of trying to conform

11:29.340 --> 11:36.340
to Ubuntu touches, Hallym software stack. So in particular we have the split of what

11:41.100 --> 11:48.100
most Pine64 distributions use versus what Ubuntu touch uses for starters modem manager

11:48.540 --> 11:55.540
versus ofono which has also been mentioned in a few talks earlier. Modem manager generally

11:56.220 --> 12:03.220
has a lot better stability with the EG25 modem that the PinePhone and PinePhone Pro use but

12:03.460 --> 12:10.460
with several scripts we were able to get ofono in a similarly stable state. Another of those

12:10.860 --> 12:17.860
components was the difference between IO sensor proxy and sensor FW. Sailfish OS also

12:21.780 --> 12:28.780
uses sensor FW and we also use the ofono sailfish port but the thing is with sensor

12:30.220 --> 12:37.220
FW compared to sensor proxy is that you have to write your own configuration files for

12:38.220 --> 12:45.220
your devices and it also has to use a second adapter in order to properly read from the

12:47.220 --> 12:54.220
IO buses. And so you can see here on these charts that both ofono and modem manager can

12:56.420 --> 13:03.420
use EG25 manager which handles with the powering and a lot of the sending data between the

13:04.420 --> 13:11.420
modem and that was how we were able to get a much more stable modem version on 2004

13:14.900 --> 13:21.900
than compared to 1604. And with the sensor files even after all of those patches were

13:23.100 --> 13:28.420
properly put in and all of our sensors were reading correctly rotation still wasn't working

13:28.420 --> 13:35.100
and this was maybe my biggest frustration for eight months. And then one day I decided

13:35.100 --> 13:41.180
to look in the log files and I noticed that the display was being enumerated as unknown

13:41.180 --> 13:48.180
rather than DSI which in some places it says that correctly but in other places it doesn't

13:48.900 --> 13:53.900
so sure enough once I had fixed that enumeration in all of the places where it properly had

13:53.900 --> 14:00.900
to be rotation was working. And the other big group of struggles was read only images

14:04.020 --> 14:11.020
and recovery images both of which use a special init ram FS script and so these two components

14:12.900 --> 14:19.900
help provide that those OTA images the read only images provide a level of immutability

14:20.900 --> 14:27.900
so that a user can wipe the system into a reset state and rather than having to re-flash

14:28.420 --> 14:35.420
the whole image and it also protects the system from too much destruction but there's also

14:37.660 --> 14:44.660
the recovery scripts which allow the device to switch into that updating modes that it

14:44.740 --> 14:51.740
can install those OTA updates as opposed to installing the updates for individual packages

14:52.660 --> 14:59.660
live like most Linux distributions do. So while the 20.04 pine 64 images currently release

15:06.900 --> 15:13.900
with image files most Ubuntu touch images ship their updates through tar balls which

15:14.540 --> 15:21.220
is where we are moving towards and the recovery image is what we need for that final component

15:21.220 --> 15:27.100
to get the tar balls working and recently we did succeed in getting those read only images

15:27.100 --> 15:34.100
working and now we can copy much more of the deploy style of many of the other Ubuntu touch

15:35.980 --> 15:42.980
images and then looking forward we have a lot of different types of images that we can

15:44.580 --> 15:51.580
use. We are moving towards 20.04 on the entirety of the distribution which will likely be around

15:56.020 --> 16:03.020
when these recovery and over the air images will also be available but this rebase is

16:04.860 --> 16:10.020
going to be a welcome one for us because most of the components that we back ported into

16:10.380 --> 16:17.380
20.04 for the Pinephone Pro and PineTab 2 will be already upstream in 20.04 so we don't have

16:17.380 --> 16:24.380
to carry that in our repositories anymore. Outside of Ubuntu touch we are also working closely

16:26.460 --> 16:33.460
with the Lumiere team that is working outside of regular Ubuntu as well as on Debian and

16:34.460 --> 16:41.460
so we are hoping that some of the changes like the enumeration to those displays can help fix

16:44.540 --> 16:51.540
some of those issues on Debian with rotation for example and right now our ports is the

16:53.740 --> 16:59.140
closest thing that Lumiere has to stability on mainline but we are hoping to get that

16:59.140 --> 17:06.140
expanded to a more generic set of devices in the near future and that's about it. Thank

17:07.060 --> 17:14.060
you. We have some demos of the devices available at the Foss on Mobile stand in Building AW

17:20.460 --> 17:27.460
so feel free to check those out afterwards. Great, first question. You talked about the

17:27.460 --> 17:34.460
PineTab 2 versions of that, the Dev1 and the early Adopter one, is it fixed for both? Yes.

17:34.860 --> 17:41.860
Thank you. Thank you, very interesting. Having heard some of the talks today in this Dev room

17:48.860 --> 17:53.780
makes me feel like this is the early days of ARM system boards or even worse like the

17:53.780 --> 17:59.060
those days where every game had to ship 36 audio drivers. Do you envision a future where

17:59.060 --> 18:06.060
we have a sort of standard platform like UEFI on PC and ARM? I would hope so. I think that

18:09.460 --> 18:16.460
the ASAHI Linux project is certainly a push towards that and I'm hoping that other companies

18:17.300 --> 18:24.300
can follow suit. Hello. Great talk. Is it technically possible that the, you mentioned that the PinePhone

18:29.660 --> 18:33.820
images are the same image for the two different Pine phones? Would it be possible that there

18:33.820 --> 18:37.940
be non Pine phones in the same image if they didn't require bootloader or is there a specific

18:37.940 --> 18:43.660
reason why they only work on Pine devices? The only reason right now is the kernel. Otherwise

18:43.700 --> 18:49.140
we absolutely can boot those images that don't include the bootloader on plenty of other

18:49.140 --> 18:56.140
devices. How did you find out to put the, was it from internal to external, the kernel

19:01.660 --> 19:08.660
module? Was it that? I was looking in the device tree files and I noticed a mention of the

19:09.660 --> 19:16.660
display driver in there, but it looked like there were actually a duplication of those mentions.

19:16.660 --> 19:23.660
And so when I went and ticked off one of those modules from Y to M on the displays, it worked

19:26.420 --> 19:33.420
and that's all it needed. And then in the kernel logs it also said that that display driver

19:33.420 --> 19:40.420
was trying to start before DRM was available. A question from the matrix. I've heard this

19:41.820 --> 19:47.540
question before today, but yeah, the question is, any plans on migrating to Modem Manager?

19:47.540 --> 19:54.540
I saw that question earlier and I would also hope so, but I don't think that actually is

19:54.820 --> 19:58.940
viable right now because that would mean the whole, wouldn't you touch stack would have

19:58.940 --> 20:04.500
to move to Modem Manager and so we instead have to rely on what the rest of the distribution

20:04.500 --> 20:11.500
is using, which right now is Ophano. It's another question. According to the picture,

20:13.540 --> 20:17.620
recovery was dropped in the 2004 layout. Was recovery functionality integrated into boot

20:17.620 --> 20:24.620
in the DRMFS? So it wasn't dropped, it's just not available yet. It's still a work in progress.

20:24.620 --> 20:31.620
I do not necessarily have a question, but I have a quick addition to the person that

20:33.300 --> 20:40.300
asked about the standardized boot format, about the DOS games. I think it was that guy. People

20:42.140 --> 20:47.900
are moving towards U-boot and chain loading U-boot on other devices and making repartitioning

20:47.900 --> 20:52.340
possible. So in the end it would look the same as I and also the pine phone that you

20:52.380 --> 20:57.380
developed. So that was a quick addition.

20:57.380 --> 20:59.380
Thanks.

20:59.380 --> 21:06.380
A follow up question. You meant kernel options before compiling with Y and M or okay.

21:11.100 --> 21:12.260
Say it again.

21:12.260 --> 21:16.260
Did you mean kernel options Y and M?

21:16.260 --> 21:19.260
Yes, yes, in the DevConfig.

21:19.260 --> 21:26.260
Thanks.

21:31.380 --> 21:37.740
Could you name a single thing that would make the porting to another device easier? What

21:37.740 --> 21:41.900
was the hardest thing? What would make your life easier if you would have to port to a

21:41.900 --> 21:45.180
new device?

21:45.180 --> 21:49.940
If the boot loader was figured out for me, then it would make it really easy. Because

21:49.940 --> 21:54.300
as I mentioned with the pine phone and pine phone pro images, it's really just the kernel

21:54.300 --> 21:59.540
at that point. It's not hard to figure out what kernel modules you need to get a certain

21:59.540 --> 22:01.540
device to boot.

22:01.540 --> 22:08.540
Maybe one more generic question. What's the current status regarding the full disk encryption

22:08.580 --> 22:09.540
in UB ports?

22:09.540 --> 22:10.300
Say it again.

22:10.300 --> 22:13.380
The full disk encryption status in UB ports.

22:13.380 --> 22:20.380
I actually don't know that. Does anyone, Alfred?

22:20.380 --> 22:26.380
Yeah, passing on to Alfred.

22:26.780 --> 22:33.380
Yeah, thank you. So it's probably not going to be so first of all, there is no home encryption

22:33.380 --> 22:40.140
whatsoever right now. But unless manually set up with scripts, so in which case you

22:40.180 --> 22:45.340
can do that yourselves. We shouldn't provide any default, but we want to provide a default.

22:45.340 --> 22:50.340
And that's probably not going to be lux based encryption, but rather file, directly file

22:50.340 --> 22:57.340
based with X4 and F2FS based solutions. Because the Android devices, they have Android partitioning

23:00.060 --> 23:07.060
schemes, they have various differences where it makes no sense to do full disk encryption

23:08.060 --> 23:14.060
in that way that we used to from the desktop. And with it being on the user data, we can

23:14.780 --> 23:21.780
ensure that selective things inside of the user data are encrypted, like the home directory

23:21.820 --> 23:28.820
of the main user of the device. In which case we can unlock it with the same on-screen keyboard

23:29.940 --> 23:36.440
that the Lumiri desktop uses without having to basically add the on-screen keyboard to

23:36.520 --> 23:40.720
the inner-dramf s early up in the boot so that they don't look different, that they're

23:40.720 --> 23:45.520
using it like that they look cohesive, that they work with similar technologies so that

23:45.520 --> 23:52.520
it's one completely fitting thing that does it all for you. So in this case, full disk

23:52.520 --> 23:58.160
encryption probably not, but file based encryption or file system based encryption more likely.

23:58.160 --> 24:03.160
There have been experiments with that and they were successful.

24:03.160 --> 24:10.160
How did you feel when you first successfully booted up Ubuntu Touch on the pine phone?

24:15.560 --> 24:21.760
It was an awesome feeling, but as I mentioned, I have been tech-tinkering for a long time

24:21.760 --> 24:28.760
so it was also a very familiar feeling of, oh yeah, I got it working.

24:33.160 --> 24:35.160
Thank you.

