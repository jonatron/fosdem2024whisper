WEBVTT

00:00.000 --> 00:07.200
Thank you.

00:07.200 --> 00:15.780
So yeah, so I'm Temek and I'm going to be talking to you about FTPMs and how they can

00:15.780 --> 00:18.220
be implemented.

00:18.220 --> 00:20.460
So that's me.

00:20.460 --> 00:26.940
I'm currently wrapping up my bachelors in automation and robotics and working full-time

00:26.940 --> 00:30.940
at FRIEMDepth as an embedded systems developer.

00:30.940 --> 00:36.340
Junior embedded systems developer, please keep that in mind.

00:36.340 --> 00:42.820
So if I say something, I'll do my best.

00:42.820 --> 00:45.460
And what is FRIEMDepth?

00:45.460 --> 00:53.820
We are a company based in GdaÅ„sk, Poland and our expertise is in firmware and embedded

00:53.820 --> 00:56.820
systems development.

00:56.820 --> 00:58.860
And we're kind of cool.

00:58.860 --> 01:06.820
You may know us from our main product, Dasara, which is a core boot distribution.

01:06.820 --> 01:09.220
So that's the agenda.

01:09.220 --> 01:17.780
I'm going to first give some information about TPMs, then about ARM trust zone and then about

01:17.780 --> 01:24.500
how it translates to practice and implementing it on embedded systems.

01:24.500 --> 01:32.300
So I guess most of you know what that TPM is, but I'm still going to give a brief overview.

01:32.300 --> 01:40.220
So usually it's a separate piece of hardware, a chip that runs cryptographic operations

01:40.220 --> 01:47.060
like encryption or generating random numbers.

01:47.060 --> 01:50.940
So the system becomes more secure.

01:50.940 --> 02:02.260
Not everything is visible to the user space and thus the surface of attack is lessened.

02:02.260 --> 02:05.060
So there are a few kinds of TPMs.

02:05.060 --> 02:13.780
Oh, yeah, so those are the more about what's cool about TPMs.

02:13.780 --> 02:22.580
Yeah, they can also verify the integrity of the system, of the boot process and detect

02:22.580 --> 02:26.460
any alteration to it.

02:26.460 --> 02:36.820
And yeah, the secure random number generation is also a really important part.

02:36.820 --> 02:42.980
So yeah, there's a few way you can implement TPMs into your system.

02:42.980 --> 02:51.580
So the most basic, the most known way and the one that was shown earlier is the discrete

02:51.580 --> 03:00.100
TPM and it's a separate physical chip that's completely separate from the CPU.

03:00.100 --> 03:05.820
It's on the motherboard, but it communicates with it.

03:05.820 --> 03:12.940
The difference will be more visible when I show you integrated TPM.

03:12.940 --> 03:21.380
It has the cheaper and more space saving option and that is the TPM that is integrated into

03:21.380 --> 03:23.260
another chip.

03:23.260 --> 03:32.700
The danger of that is that now it's that chip, if that chip is somehow corrupted, it's

03:32.700 --> 03:41.500
attacked, it has an connection, it has access to the integrated TPM.

03:41.500 --> 03:44.580
So it's less secure.

03:44.580 --> 03:53.820
The next one is the least secure, but it's still something that is used software TPM and

03:53.820 --> 04:03.300
it's usually an emulation just made for tests and prototyping.

04:03.300 --> 04:14.060
So the main topic of this talk is the last one, the firmware TPM and it's a software

04:14.060 --> 04:21.740
TPM that runs in a trusted execution environment and is separated from the normal S, from the

04:21.740 --> 04:26.860
user space via the trusted execution environment.

04:26.860 --> 04:33.820
The plus of it is it's cheap and it can be implemented on devices that are already provisioned.

04:33.820 --> 04:45.340
So via an update or something, but via an update.

04:45.340 --> 04:54.740
On embedded devices, the trusted execution environment is made possible via ARM trust

04:54.740 --> 05:01.260
zone and ARM trust zone creates a hardware separation.

05:01.260 --> 05:08.820
It creates two distinct words, they're called.

05:08.820 --> 05:16.980
So we have a normal word where we have the normal user space in documentation, it's called

05:16.980 --> 05:26.500
re-choice and there we run our applications like kernel and user space apps and we have

05:26.500 --> 05:37.220
a secure word that has trusted applications and those can be like stuff you don't want

05:37.220 --> 05:42.740
the user space to have access to or only have certain access to.

05:42.740 --> 05:53.420
Such I think can be an FTPM and it can run operations like encryption, decryption, creation

05:53.420 --> 06:00.940
of keys and then it's a random number generation that I'm particularly fond of because it's

06:00.940 --> 06:03.580
kind of funny.

06:03.580 --> 06:13.860
So yeah, and also secure word provides makes it so only trusted OS can access certain parts

06:13.860 --> 06:16.860
of the hardware of for example memory.

06:16.860 --> 06:24.740
So there are parts that are reserved for operations of trusted OS and there are those allowed to

06:24.740 --> 06:27.380
be accessed by which OS.

06:27.380 --> 06:33.140
And this exactly is made possible via secure monitor.

06:33.140 --> 06:44.460
So we have ARM trust zone specifies exception levels and as you can see a secure monitor

06:44.460 --> 06:51.700
allows certain like for example, it tells hypervisor when what memory addresses it can

06:51.700 --> 07:01.900
use and what are specified for secure partition manager that is part of the D.

07:01.900 --> 07:13.220
And so the threat model here is of course if we have an app that's been like a virus

07:13.220 --> 07:19.660
or something, it doesn't get to the bottom.

07:19.660 --> 07:28.100
So we can look at it this way that okay when we have our hypervisor is corrupted, the trusted

07:28.100 --> 07:31.300
applications and trusted OS is still like valid.

07:31.300 --> 07:38.220
But if the secure monitor is somehow corrupted, then we have a problem.

07:38.220 --> 07:41.220
And I'll get to that part later.

07:41.220 --> 07:48.940
Yeah, and all of that was for Cortex-I ARM series.

07:48.940 --> 07:57.300
That's important distinction because on ARM Cortex-M the trust zone works completely different.

07:57.300 --> 08:01.300
It works through interrupts.

08:01.300 --> 08:10.180
It's kind of a funny topic because you could theoretically implement some sort of I wouldn't

08:10.180 --> 08:19.020
say FTPM because Cortex-M doesn't really allow you for example for running operating systems.

08:19.020 --> 08:23.140
There were some, there are some products that do that.

08:23.140 --> 08:27.020
They're on the border of black magic and they're awesome.

08:27.020 --> 08:38.940
But yeah, so FTPM on Cortex-M is a weird concept a little.

08:38.940 --> 08:52.100
Okay, so yeah, there are some problems with FTPMs because you could as I said update a

08:52.100 --> 09:00.380
device via the internet over the air to allow it to add to it FTPMs.

09:00.380 --> 09:08.540
But as the slide says, the best protected systems have dedicated security from the beginning.

09:08.540 --> 09:18.540
And ARM trust zone and TR and like magical thing you can just throw on a device to make

09:18.540 --> 09:19.540
it more secure.

09:19.540 --> 09:27.060
It will make it more secure but not as much secure as it would be if you would think about

09:27.060 --> 09:29.540
those things from the beginning.

09:29.540 --> 09:38.420
Because ARM trust zone doesn't add in itself a lot of the important parts that make an

09:38.420 --> 09:40.540
embedded device secure.

09:40.540 --> 09:47.780
For example, there's no secure storage on like in the ARM trust zone specifically.

09:47.780 --> 09:54.020
You can use an MMC to achieve that.

09:54.020 --> 09:59.660
But if you don't have that on the device that you're updating, you have to find some work

09:59.660 --> 10:01.140
rounds.

10:01.140 --> 10:10.500
The same happens with secure counter or secure clock that can prevent rollback attacks.

10:10.500 --> 10:15.220
And if you don't have those, you're not really protected from them.

10:15.220 --> 10:22.500
The secure source of entropy is a really fun one because there's been a work around

10:22.500 --> 10:23.500
for this.

10:23.500 --> 10:31.500
Actually, there's been work around this specified by the UNICEK presentation.

10:31.500 --> 10:36.740
It's linked at the end of the slides.

10:36.740 --> 10:44.100
The secure source of entropy is a fun one because they've managed to achieve secure

10:44.100 --> 10:55.020
source of entropy via only right ones, only fuses that have some random seed on it.

10:55.020 --> 10:59.580
And they're written once when the device is manufactured.

10:59.580 --> 11:01.660
They can be written again.

11:01.660 --> 11:05.100
And they act as a seed for random number generation.

11:05.100 --> 11:07.100
So fun.

11:08.100 --> 11:09.460
Yeah.

11:09.460 --> 11:16.820
And FTPM also has its own problems because the secrets are written to the memory.

11:16.820 --> 11:23.660
It's not safe on its own, for example, from cold boot attacks.

11:23.660 --> 11:33.500
So when the device is suddenly shut down, you can see the state of the memory that was

11:33.500 --> 11:39.220
at the end of the device last runtime.

11:39.220 --> 11:42.460
The same happens with bus sniffing.

11:42.460 --> 11:53.300
So we can just physically peek at the electrons that travel on the bus.

11:53.300 --> 11:59.460
And also, yeah, you can just plug a JTEC to some processors.

11:59.460 --> 12:03.620
And also, there's a one small caveat.

12:03.620 --> 12:06.900
Normal and secure world can't run in parallel.

12:06.900 --> 12:12.540
So always one runs at once, and they take over.

12:12.540 --> 12:23.180
So if you have an embedded device that requires real-time operation, you're in trouble.

12:24.020 --> 12:28.460
There are workarounds, of course.

12:28.460 --> 12:34.340
But I would like to hear them because it's a problem.

12:34.340 --> 12:44.100
So imagine you were a junior developer and you were taught, OK, so do an FTM in practice.

12:44.100 --> 12:45.460
You're me, basically.

12:45.460 --> 12:49.220
So yeah, that's how I approach the problem.

12:49.220 --> 12:51.380
And that's how it can be approached.

12:51.380 --> 12:55.420
So let's say you have some embedded device.

12:55.420 --> 13:03.100
And yeah, we have there are a few implementations of T that you could use.

13:03.100 --> 13:05.340
Most of them are proprietary.

13:05.340 --> 13:06.300
Opti is not.

13:06.300 --> 13:07.700
Opti is open source.

13:07.700 --> 13:08.300
It's awesome.

13:08.300 --> 13:09.380
It has a documentation.

13:13.060 --> 13:21.340
So yeah, once we have that, we need to build FTPM as a trusted application for RT.

13:21.540 --> 13:23.580
In this case, for Opti.

13:23.580 --> 13:30.980
And at the last step, we add some user space support so we can actually call the TPM.

13:30.980 --> 13:36.780
So let's focus on the second part because it's fun.

13:36.780 --> 13:38.100
No, sorry.

13:38.100 --> 13:44.660
Let's focus on the last part first because I didn't arrange the slides as I thought I did.

13:44.700 --> 13:58.180
So yeah, there's a kernel module in the Linux upstream currently that supports access

13:58.180 --> 14:00.900
to him for FTPM.

14:00.900 --> 14:06.020
So it allows the system to mount FTPM as a TPM.

14:06.020 --> 14:07.460
I'm not going to show you the code.

14:07.460 --> 14:09.260
It's called.

14:09.260 --> 14:12.980
I don't understand half of it by school.

14:13.940 --> 14:15.700
But as you can see, it's made by Microsoft.

14:15.700 --> 14:25.700
And Microsoft provides a description like the paper, the white paper that was written

14:25.700 --> 14:27.180
on FTPMs.

14:27.180 --> 14:28.500
That's also cool.

14:28.500 --> 14:31.820
And they provide a reference implementation.

14:31.820 --> 14:32.300
Great.

14:32.300 --> 14:33.500
And it's for ARM.

14:33.500 --> 14:33.900
Great.

14:33.900 --> 14:38.700
So the half of the work is done, right?

14:38.700 --> 14:39.300
Oh yeah.

14:39.300 --> 14:41.580
That's as I said.

14:41.580 --> 14:43.540
I didn't arrange it as like, yeah.

14:43.540 --> 14:48.260
So that's how the kernel driver works visually.

14:48.260 --> 14:53.340
So yeah, it mounts it.

14:53.340 --> 14:58.740
So it's seen by the user space as a TPM device.

14:58.740 --> 15:02.980
OK, so that's a problem with the Microsoft implementation.

15:02.980 --> 15:05.620
Like it's not maintained at all.

15:05.620 --> 15:08.340
It's provided as it is.

15:08.340 --> 15:10.380
It's cool that it is.

15:10.380 --> 15:12.700
It could us to them.

15:12.700 --> 15:17.220
But it doesn't work currently as it is.

15:17.220 --> 15:24.300
And so that's what I've been fighting with for the last few weeks.

15:24.300 --> 15:31.260
And OK, so this requires tweaking.

15:31.260 --> 15:35.220
The amazing guys at Linaro shouted to them.

15:35.260 --> 15:41.140
We're kind enough to create a fork of OptiMunifestudes

15:41.140 --> 15:42.940
for we used for building.

15:42.940 --> 15:47.220
And it allows to build FTPM.

15:47.220 --> 15:49.220
I have a few minutes left.

15:49.220 --> 15:53.660
So I think I won't be able to show you a demo of it,

15:53.660 --> 15:57.460
because it's there on this laptop.

15:57.460 --> 15:59.900
And I also didn't have time in the last few days

15:59.900 --> 16:01.060
to create a pull request.

16:01.060 --> 16:04.900
So I hope by the time this video is up,

16:04.900 --> 16:07.340
it will already be on GitHub.

16:07.340 --> 16:10.620
And I hope also it will be merged.

16:10.620 --> 16:17.100
But yeah, if you want to build an FTPM on Camu,

16:17.100 --> 16:21.220
that's the best currently repository

16:21.220 --> 16:24.620
available to fork it.

16:27.380 --> 16:33.180
And yeah, Yocto also provides a bitmake recipe

16:33.180 --> 16:37.420
for building OptiWeef FTPM as a trusted application.

16:37.420 --> 16:39.660
But it currently works only for ARM.

16:39.660 --> 16:42.700
I mean, it only works as a test for ARM.

16:42.700 --> 16:44.820
To add support for your own board,

16:44.820 --> 16:49.380
you have to append some recipes and do some magic

16:49.380 --> 16:50.820
to make it work.

16:50.820 --> 16:55.020
I haven't tested it through Rugu.

16:55.020 --> 16:58.860
I haven't tested it as much as we would like to.

16:58.860 --> 17:02.220
So yeah.

17:02.220 --> 17:11.980
And all of this was made work on our current operating

17:11.980 --> 17:15.020
system for embedded devices.

17:15.020 --> 17:22.660
Like to focus on security and make it as adaptable as possible

17:22.660 --> 17:27.660
to solutions for your embedded device.

17:28.500 --> 17:32.940
So yeah.

17:32.940 --> 17:36.340
This is those other resources I use.

17:36.340 --> 17:38.140
So they're all awesome.

17:38.140 --> 17:40.860
I highly recommend this book.

17:40.860 --> 17:42.860
It's not as boring as it may sound.

17:42.860 --> 17:45.540
It's really well written.

17:45.540 --> 17:49.100
So yeah, that's all.

17:49.100 --> 17:52.340
And if we have time for questions, then we can do questions.

17:57.660 --> 18:02.660
Just a request.

18:02.660 --> 18:05.700
Can you go back to the very information

18:05.700 --> 18:07.700
you took page?

18:07.700 --> 18:08.740
OK, yeah, sure.

18:08.740 --> 18:11.500
I'll go back to.

18:11.500 --> 18:15.340
OK, I was shown a card to repeat the question.

18:15.340 --> 18:18.460
So yeah, I was told to go back as late.

18:18.460 --> 18:21.500
So that was a question.

18:21.500 --> 18:21.980
How many?

18:21.980 --> 18:22.740
It's also online.

18:22.740 --> 18:23.980
Make sure that they're also online.

18:23.980 --> 18:24.580
Oh, yeah.

18:24.580 --> 18:26.140
And slides are also online.

18:26.140 --> 18:33.380
So if anyone wants to do something, they're available.

18:33.380 --> 18:34.140
So yeah.

18:36.700 --> 18:38.260
If we have a few minutes.

18:38.260 --> 18:39.300
Oh, yeah, sure.

18:39.300 --> 18:40.780
Just a few years.

18:40.780 --> 18:44.260
Can you use the opti-recipes?

18:44.260 --> 18:47.260
Opti-recipes.

18:47.260 --> 18:48.260
Opti-recipes.

18:51.580 --> 18:53.900
There are the example ones.

18:53.900 --> 18:54.820
Yeah.

18:54.860 --> 19:01.500
So the question was, did I use opti-recipes to build it?

19:01.500 --> 19:06.780
I didn't see any related to FTPM in the examples.

19:06.780 --> 19:14.980
And the examples are also cool, but they're kind of complicated.

19:14.980 --> 19:18.420
So it took a lot of reading and trying

19:18.420 --> 19:21.460
to make sense of those make files.

19:21.500 --> 19:28.420
So I used only I tried, but the thing that worked

19:28.420 --> 19:34.780
was the patching of the Linaro fork, because it also has it.

19:34.780 --> 19:38.660
Like it was last updated, I think, a few years ago.

19:38.660 --> 19:41.140
So it uses a lot of outdated.

19:41.140 --> 19:44.540
Like there's Python 2 syntax in it somewhere.

19:44.540 --> 19:47.860
And so yeah, that's the one I'll be providing.

19:47.860 --> 19:51.660
Apple request, hopefully soon too.

19:51.660 --> 19:54.620
So yeah.

19:54.620 --> 19:56.140
Are there any more questions?

19:56.140 --> 19:58.420
There's also time, Tim, if you want to do a demo,

19:58.420 --> 19:59.580
I'm sure people will.

19:59.580 --> 20:01.460
OK, sure.

20:01.460 --> 20:03.420
So maybe in three minutes, and then we still have five minutes.

20:03.420 --> 20:04.500
Yeah, yeah.

20:04.500 --> 20:05.140
Awesome.

20:05.140 --> 20:15.940
So yeah, this is the Camel image made from this forked Linaro.

20:15.940 --> 20:20.060
So as you can see, we have a normal and secure word.

20:20.060 --> 20:21.420
Currently, it's not started.

20:21.420 --> 20:23.260
So I can start it.

20:23.260 --> 20:26.740
There's some outputs.

20:26.740 --> 20:28.300
Yeah, the secure word doesn't really

20:28.300 --> 20:32.300
provide any way of communicating with it.

20:32.300 --> 20:36.260
We have any sort of, like besides user space.

20:36.260 --> 20:38.460
Oh, sorry.

20:38.460 --> 20:41.180
So yeah.

20:41.180 --> 20:48.580
And this particular example there's an I'll show you,

20:48.580 --> 20:50.740
but I have only one hand for right now.

20:50.740 --> 20:53.580
So it's kind of hard.

20:53.580 --> 20:54.100
That's all.

20:58.220 --> 21:06.740
Yeah, so the Linaro guys provided some aliases to load

21:06.740 --> 21:09.820
the utilities that are on the host system.

21:09.820 --> 21:10.940
They are not built in.

21:10.940 --> 21:17.020
They default in this example, and they load up the not the

21:17.020 --> 21:21.620
exactly kernel module that's currently in the upstream.

21:21.620 --> 21:23.900
It's a slightly different one.

21:23.900 --> 21:27.820
So that's also why I didn't like want to call it a live demo,

21:27.820 --> 21:32.420
because it's more of a live Frankenstein that is currently

21:32.420 --> 21:33.500
working.

21:33.500 --> 21:37.860
Maybe at next post them, I'll have something better

21:37.860 --> 21:39.260
to show you.

21:39.260 --> 21:48.540
So yeah, and if I run this alias that uses all of those

21:48.540 --> 21:53.380
commands, we can run some tests with the IBM implementation

21:53.380 --> 21:56.260
of DPM utilities.

21:56.260 --> 22:04.780
So I think it will output some random generated code.

22:04.780 --> 22:08.540
Oh, I also have to hear a cheat sheet,

22:08.540 --> 22:16.620
because I couldn't remember the exact syntax for creating,

22:16.620 --> 22:20.380
for encryption, the encryption, because DPM tools also

22:20.380 --> 22:21.300
works.

22:21.300 --> 22:24.180
As I said, the FTPM is mounted as a TPM.

22:24.180 --> 22:31.180
So every user's space utility that can use TPM works.

22:31.180 --> 22:33.740
So yeah, I don't know.

22:33.740 --> 22:34.240
Load.

22:53.060 --> 22:56.060
So yeah, so that's the demo, I guess.

23:02.180 --> 23:06.820
So I think we're done.

23:06.820 --> 23:07.660
So thank you.

23:07.660 --> 23:09.460
It's been a pleasure.

23:09.460 --> 23:12.420
See you all somewhere.

