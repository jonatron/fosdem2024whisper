WEBVTT

00:00.000 --> 00:14.880
Welcome. Our first speaker will be Lorna Jane Mitchell. I always say Lorna Jane in one

00:14.880 --> 00:20.760
word. I think everyone knows me. Yes. But you probably already know Lorna and she's

00:20.760 --> 00:24.840
going to talk about open-source top box. Take it away. Thank you.

00:24.840 --> 00:35.080
Hi everybody. Thanks for coming. It's a busy room and you've had a busy day. I hope your

00:35.080 --> 00:42.040
brains are not too full for something more. My name is Lorna. I'm VP of developer experience

00:42.040 --> 00:48.320
at a company called Redocling. We make API tooling including documentation tooling. I've

00:48.320 --> 00:55.480
worked on docs projects in a couple of previous roles. I describe myself as an engineer with a

00:55.480 --> 01:04.520
writing problem and I'm very happy to be here with some like-minded individuals. I'm also passionate

01:04.520 --> 01:08.680
about open-source. Yeah, my background is in software development. I learned in the open-source

01:08.680 --> 01:14.480
community. I'm an open-source project maintainer, open standards contributor. And I want to bring

01:14.640 --> 01:24.000
to you today how open-source and doc ops works together. So this works better if I plug it in.

01:25.720 --> 01:32.040
There we go. This is the second talk of the day. I'm not sure I'm still got sentences. Okay. What

01:32.040 --> 01:40.040
is doc ops? It's in the talk title. You believed in it enough to be here. Documentation operations

01:40.080 --> 01:49.080
is about allowing documentation to be created, but also maintained and published collaboratively

01:49.080 --> 01:56.800
and in an efficient manner. It's really about being able to make changes and having confidence

01:56.800 --> 02:02.520
and being able to make a lot, a lot, a lot, a lot, a lot of changes with lots of contributors.

02:02.520 --> 02:10.400
And the way I think about doc ops is that it, from some of the more traditional documentation

02:10.400 --> 02:17.480
practices, doc ops is a culture shift. Some of you are enough in the software space to

02:17.480 --> 02:24.240
have seen the DevOps culture shift and we're bringing something very similar to our written

02:24.280 --> 02:31.280
word. Everything I'm going to say in this talk really builds upon the concept of docs

02:33.080 --> 02:40.080
as code. If you are not treating your docs as code, you cannot benefit from the cool

02:41.400 --> 02:48.400
tools that the coders build for themselves that we adopt into our tool chains. This especially

02:49.280 --> 02:56.280
includes source control. Git is the key to many of the workflows that I'm going to talk

02:57.280 --> 03:03.280
about today. Text based markup so that we can manage multiple change sets simultaneously

03:03.280 --> 03:10.280
and bring them together without pain. I personally enjoy rebasing, but you shouldn't have to.

03:10.920 --> 03:17.920
Bringing continuous integration and those practices and also having a good local setup.

03:20.600 --> 03:27.600
If you have to push to see if you did it right, that's not a good documentation creator

03:27.960 --> 03:34.200
experience. And having good tools all the way through the stack is what makes this a

03:34.280 --> 03:40.280
really effective workflow. It makes you very productive and lets the machines do the heavy

03:40.280 --> 03:47.280
lifting. For a long time I used to say the software developers, the coders build the

03:48.280 --> 03:54.280
tools that they want to use, but I don't think they should keep them for themselves.

03:54.280 --> 04:01.280
I think we should take them and bring them into our world of documentation. Open source,

04:02.280 --> 04:09.280
you're at Fosdame, in English I would say I am preaching already to the choir. Open

04:09.600 --> 04:16.600
source means freedom, but it also means not having to build the same tool in every team

04:18.640 --> 04:25.200
that needs to publish a docs platform or check that the links work. It means being able to

04:25.200 --> 04:32.200
run that tool wherever you want to. Tools that fit into continuous integration systems

04:32.760 --> 04:38.920
are typically open source by default. We don't expect it by licenses or sign in, we expect

04:38.920 --> 04:45.920
them just to run on our temporary compute platforms or on our local machines.

04:47.040 --> 04:52.720
Best of all, there's no vendor lock in. So we can choose this tool or that tool and because

04:52.720 --> 04:58.680
we chose that one we're not stuck with having to use another one. We're using standard formats

04:58.680 --> 05:05.680
and open source tools. Just because we didn't have to build and rebuild the tool doesn't

05:06.440 --> 05:10.320
mean we don't have to build it at all. We all need to be participants in the tools that

05:10.320 --> 05:17.320
we use, reporting bugs, fixing things, thanking our maintainers when we see them. It's all

05:17.400 --> 05:24.400
part of the story. So I'd like to share with you some of the tools that I use on my docs

05:24.760 --> 05:29.680
projects and I've tried to pick just a few categories of things that I think are vitally

05:29.680 --> 05:36.600
important. We'll start with the obvious. You need to be able to preview your docs change

05:36.600 --> 05:43.280
before you publish it. Everybody should have access to preview. Everybody who contributes

05:43.280 --> 05:48.840
to the documentation or reviews any docs should have access to a tool like this. This

05:48.840 --> 05:55.840
is a screenshot of VS Code. I'm editing an open API file on this side and this is the

05:56.080 --> 06:00.680
redockly rendering on the right hand side and I typically work like this. So I always

06:00.680 --> 06:06.680
have local tooling that updates immediately. I can see instantly, oh that didn't render

06:06.680 --> 06:12.160
like I expected. There's something wrong with this. I can clearly see that's broken.

06:12.280 --> 06:18.000
My table is missing a cell because I've got that live preview response and this is part

06:18.000 --> 06:24.440
of the story. It doesn't have to be embedded in your IDE. You can run a local server that

06:24.440 --> 06:31.440
updates or use a watch command to rebuild your static site but you should have fast preview

06:31.560 --> 06:38.560
when you are working on documentation. You also need to be able to see the build areas

06:39.440 --> 06:45.800
locally if there are any. I see too many places where that's hidden away somewhere hard. The

06:45.800 --> 06:51.280
other place you need preview is in your pull request. You open the pull request. That needs

06:51.280 --> 06:57.720
to build exactly as it's going to ship. We need to spin up a per pull request preview.

06:57.720 --> 07:02.360
Don't muddle through the branch and put it on a staging server and hope. Pull request

07:02.360 --> 07:09.360
builds for previews and that also enables the reviewers. So it gives them a nice view.

07:09.680 --> 07:13.280
I used to think that previewing docs was for people who weren't technical enough to read

07:13.280 --> 07:20.280
mark down. Now I'm a VP. It's just people who are too busy. You put the web page in front

07:20.280 --> 07:24.440
of me. I can review it. If I have to go past something in a pull request somewhere, it's

07:24.440 --> 07:31.440
a bit less likely to happen. Okay. Link checking. Who has link checking in their docs build

07:35.040 --> 07:42.040
today? Yeah. It's not very many and it's the thing that is most easily rotted in your documentation.

07:44.720 --> 07:48.920
There are two problems. One is all the links between all your own resources which are just

07:49.000 --> 07:54.480
super easy to get wrong. And the other one is other people breaking their links making

07:54.480 --> 08:01.160
you look like a fool. So I use a link checker to check both of those. It automatically does

08:01.160 --> 08:08.160
like a click on all the links. When I'm looking at it for a long time I was building the HTML

08:08.520 --> 08:14.360
and checking the links that after render, which is cool and works. Now I'm working on

08:14.360 --> 08:21.360
more of a dynamic site. I actually have a tool which checks at build time. So I'm using

08:22.360 --> 08:29.200
MLC. There are lots of others. Pick your favorite. So it can read mark down and so then it can

08:29.200 --> 08:34.760
just check. This link makes no sense. Your syntax is terrible. Please do this better.

08:34.760 --> 08:40.320
All those things. Either approach works, but I think it's very important. It's an easy

08:40.400 --> 08:47.400
thing to add. You can run that tool locally. You can run it in CI. The downside of checking

08:49.240 --> 08:55.240
all your links is really other, I mean all the problems are really other people, aren't

08:55.240 --> 09:00.840
they? All the problems are other people. Sometimes the internet goes wrong. I used to work on

09:00.840 --> 09:06.920
a documentation platform which relied on an upstream open source project. Whenever that

09:06.960 --> 09:13.960
project launched a new version, all its links were broken for 12 hours. There comes a point

09:13.960 --> 09:18.480
where you don't want to know what the explanation for that is, but it meant that all of our

09:18.480 --> 09:25.480
builds failed for 12 hours because the links were broken. No, no, their links are broken.

09:25.840 --> 09:31.240
So I have a couple of different strategies for this. One is to only check the links in

09:31.240 --> 09:37.200
the files that are changed because especially on a big documentation set, you don't want

09:37.200 --> 09:40.920
to have to deal with something that's gone wrong in a link from another section might

09:40.920 --> 09:47.920
be owned by another team. So I just do that and then I do a weekly check all the links

09:49.360 --> 09:56.200
job. If that job fails, it opens an issue. So if something's decayed, we'll catch it

09:56.200 --> 10:01.080
maybe not always faster than a customer, but fast enough. So these are some things to think

10:01.120 --> 10:08.120
about. Whether somebody else's broken link or downtime should block your build or your

10:09.120 --> 10:15.120
release because I think that's a other people's links are outside of your control and so that

10:15.240 --> 10:22.240
can be a hazard. Let's talk a bit about validation. If you're coders, you are accustomed to working

10:22.480 --> 10:29.480
with syntax checking tools. Some programming languages will error at build time before you

10:29.720 --> 10:35.720
even run them. Some of them are more interpreted so they don't go wrong until you run them.

10:35.720 --> 10:42.720
We don't historically do that with our documentation, but the tools are there, especially when you

10:42.960 --> 10:49.960
are doing docs as code. So we don't necessarily do that. We don't necessarily do that. We

10:49.960 --> 10:56.960
are doing docs as code. It's got all the advantages of working in code and it's got

10:58.200 --> 11:05.200
all the disadvantages of working in code. It cannot be obvious that something is wrong.

11:06.680 --> 11:11.080
The errors can be super subtle. You have a full stop where the comma should be or the

11:11.080 --> 11:18.080
wrong sort of bracket. This stuff is even when I work with it all the time, can be very

11:18.280 --> 11:25.280
difficult for humans. Super simple for machines. So we can build on those tools and let the

11:26.400 --> 11:33.400
machines do the work. The other thing I like about having the validation errors automated,

11:36.960 --> 11:43.960
I can run them locally. I never do. I always push it and then wonder why it's failed. The

11:44.880 --> 11:48.840
other thing that's nice about that is when you push your pull request and you are missing

11:48.840 --> 11:55.000
a comma or you have the wrong sort of bracket, perhaps this is personal to me, but it feels

11:55.000 --> 12:02.000
kinder coming from a machine than having someone else criticize my use of a bracket.

12:04.560 --> 12:10.120
So that kind of, and I don't have to wait for a person to come and review it. I immediately

12:10.200 --> 12:17.200
get that very impartial factual feedback that my bracket is in fact wrong. And I think that's

12:18.840 --> 12:25.840
what I like about using validation like this. I was going to say the bots are not judging

12:26.280 --> 12:33.280
me. What a horrible thought, are they? The validation tooling, you have a few options

12:34.280 --> 12:41.280
and it depends a bit which flavor of markup you are using. I'm working mostly with markdown

12:44.120 --> 12:51.120
these days, although let's just say it's not because it's my favorite. Let's keep the

12:51.240 --> 12:57.840
markup language war for later. I'm using markdown lint. With markdown I find it very good and

12:57.840 --> 13:04.840
very, very configurable. So like all of the linting tools and the same with open API which

13:05.280 --> 13:10.880
I work with a lot as well, probably some of you have API reference docs, the default settings

13:10.880 --> 13:17.880
for all of those linting tools, the volume is too loud, especially if you were not already

13:18.080 --> 13:25.080
using those linting tools at all. Markdown lint is really configurable and it has really

13:25.440 --> 13:32.440
excellent documentation on what all the options do. It is remarkable how few documentation

13:33.480 --> 13:39.880
tools have a genuinely good documentation. This one does. For restructured text I've

13:39.880 --> 13:45.720
mostly been using that with Sphinx and Sphinx has really great validation and I think it

13:45.720 --> 13:51.280
builds on the docu-tools so you can use that by itself. All of those also come with command

13:51.320 --> 13:58.320
line tools, IDE plugins and you can put them in your continuous integration. So github

13:58.680 --> 14:05.680
actions, Jenkins, whatever it is that you use in your setup, set that up for your pros

14:05.920 --> 14:12.920
content exactly as you do for your code. If you're using open API you should also be

14:13.080 --> 14:19.240
at least validating that. I've already given my open API talk today so I will attempt not

14:19.280 --> 14:26.280
to rant about API linting and standards but put those tools in, set your standard and

14:28.160 --> 14:34.440
make sure that you are consistently checking that. Again it goes in your tooling. Disclaimer

14:34.440 --> 14:41.280
I make, Redock Lease CLI, that's my day job. Other excellent competing open source tools

14:41.280 --> 14:46.120
also exist and I'm probably not the right person to take a recommendation from. I'm

14:46.160 --> 14:53.160
very biased. So we talked about validation, very closely related to validation is formatting.

14:57.240 --> 15:04.240
Again software development does a lot of reformatting of code and that is to give a very consistent

15:04.880 --> 15:11.120
presentation. We always use the same white space in the same way, the same indentation,

15:11.120 --> 15:17.560
the same wrapping rules. It makes it visually very consistent. So when you work with the

15:17.560 --> 15:24.560
same code base all the time it gets easier to read. We can do that for our mark, mark

15:28.120 --> 15:35.120
up, mark down, restructure text, ask, skidock, whatever. We can do that for our tools too.

15:35.720 --> 15:41.720
By allowing things to adjust our new lines, our white space, the indentation, the wrapping,

15:41.720 --> 15:47.160
things like do you need a white, do you need a blank line before your bullet list or after

15:47.160 --> 15:52.960
your heading. Lots of tools don't care when they're rendering but by getting that the

15:52.960 --> 15:59.960
same you can make it easier to read the raw text and easier to look at it and spot problems

15:59.960 --> 16:05.720
because the layout is so consistent. I've only recently started doing this. I write a

16:05.720 --> 16:11.120
lot of docs that are in the same repository as the code and we just turned on the engineers

16:11.120 --> 16:18.120
prettier tool for our mark down. It's actually really nice and I was initially, like of course

16:18.720 --> 16:23.280
you can, I don't mind. Now I'm turning it on everywhere. So yeah, I really recommend

16:23.280 --> 16:30.280
it. I also really enjoy prose linting. Now I don't see enough of this. I'm using a tool

16:33.120 --> 16:39.560
called Veil and I'll be honest, I don't know very many other tools in this space. Lots of

16:39.560 --> 16:44.360
people nodding. Good. I'm also happy to be contradicted like tweet me what I should have

16:44.360 --> 16:49.760
said. With this it comes with, you can give it a dictionary. So it's going to do all of

16:49.760 --> 16:56.080
your spell check for you. It can also do quite a lot of grammar checking. This is brilliant

16:56.080 --> 17:01.480
for me. I work with almost entirely non-native speakers. So having a little bit of help for

17:01.480 --> 17:07.240
me and them to get the words out correctly is brilliant. I am a native speaker, doesn't

17:07.240 --> 17:14.240
always help. So Veil helps me a lot. Also you might be able to tell from my accent, I'm

17:14.240 --> 17:19.680
British. My company is standardised on American English and at this point my spelling can

17:19.680 --> 17:26.680
only be described as mid-Atlantic. So having Veil just to catch those common, we have like

17:27.440 --> 17:34.440
a Britishism's rule enabled and it's because I'm here. Typing all these British spelled

17:34.600 --> 17:41.600
words into our American docs. It catches repeated words. You can teach it product names. In

17:41.960 --> 17:47.160
my previous employment I worked with a company that published a bunch of open source database

17:47.160 --> 17:52.960
products. You have to get people's trademark product names correctly. Up a case, lower

17:52.960 --> 17:58.560
case, trademark. This has to be legally, this has to be correct. So unless you want your

17:58.560 --> 18:03.480
lawyers to have to think about this a lot, you just teach it to Veil. Veil explains it

18:03.480 --> 18:10.480
back to you really regularly. The other thing we did there was we put a bunch of collars

18:11.680 --> 18:18.680
common misspellings in. So we worked on Kafka. When I set up a search for Kaka, loads of

18:19.880 --> 18:26.880
hits. We also banned the English word flick because we had a product called flink. And

18:29.240 --> 18:33.440
indeed we just don't need this word in English because it probably is a misspelled product

18:33.440 --> 18:38.200
name. So those are the sorts of things that Veil can help with. I know we have a Veil

18:38.280 --> 18:44.400
talk next. Yes? A little cheer. So I'm not going to say more about that. Veil's amazing.

18:44.400 --> 18:51.400
Stay and listen to the talk. Okay. Let's talk a little bit then about how all these amazing

18:51.880 --> 18:58.880
different tools that solve different problems and they have your back. They support you

18:59.400 --> 19:06.000
in lots of different ways. But let's talk about how they fit that life cycle, that work

19:06.040 --> 19:13.040
flow. The key is that you are using exactly the same tools with exactly the same config

19:15.200 --> 19:21.920
everywhere between your laptop and your production platform. And that's the goal. Every contributor

19:21.920 --> 19:28.920
needs access to the same tools set up the same way. The tools, if you haven't used them

19:29.840 --> 19:35.480
or you don't yet feel confident because I know lots of people who have been using Git

19:35.480 --> 19:41.480
for years and still think it might bite, which is fair. There are lots of things to learn.

19:41.480 --> 19:48.480
Source control. I'm focused on Git but I've been doing this long enough that I learned

19:48.640 --> 19:53.400
on something else and I don't doubt that there will be more transitions in our future because

19:53.400 --> 20:00.400
that's technology. I like a workflow that's called GitHub flow where you have a main branch,

20:02.360 --> 20:07.600
you make a small change, it gets reviewed, it comes back in. If you see another spelling

20:07.600 --> 20:12.020
mistake, don't put it on this branch. Put it somewhere else. And it means that you can

20:12.020 --> 20:18.360
branch off lots and lots of shoots that are waiting to be reviewed and merged. And in

20:18.360 --> 20:24.200
this way you can multiplex lots of changes and sometimes as a feature it's waiting for

20:24.200 --> 20:31.200
review. Be confident. Actively practice changing branches because it will give you the momentum

20:35.520 --> 20:40.520
to switch a branch, make an edit, push it back. If you are writers, you are probably

20:40.520 --> 20:46.080
editors and reviewers as well, these are the skills that will multiply the stuff you're

20:46.120 --> 20:53.120
already good at by helping, getting the tools to help you. I've talked a bit about the continuous

20:53.200 --> 21:00.120
integration. Always hook everything but you find useful locally, maybe you get an extra

21:00.120 --> 21:07.120
VS Code plug-in. Figure out how to put that into your continuous integration setup and

21:07.760 --> 21:14.760
apply that tool to every pull request. This way we can never forget to check the formatting

21:15.560 --> 21:20.640
or the links because it will just be there. We won't, all that one's a bit risky, I think

21:20.640 --> 21:26.480
we should deploy to staging and check it. The preview will always be there and the machines

21:26.480 --> 21:33.000
will always be on your side. It helps the reviewers to do a better job and it maintains

21:33.000 --> 21:40.000
documentation quality. One of the most important places to have exactly the same tools and

21:41.000 --> 21:48.000
exactly the same config running is on your local machine. The smaller your feedback loop,

21:49.040 --> 21:56.040
the more quickly you can adapt and correct it and move forward. So having to open a pull

21:56.040 --> 22:03.040
request to get the build to see if it's okay, that's a big feedback loop. It's not ideal.

22:03.200 --> 22:09.200
I have one project where I need to do it because we have amazing test harness setup and it's

22:09.200 --> 22:14.200
much faster to run the tests there than here. So I like open the pull request to let the

22:14.200 --> 22:18.700
build build because it's quicker to do that than to wait for it to run locally. But for

22:18.700 --> 22:25.700
most docs tooling, they should be a few seconds at most even on very large doc sites. You must

22:25.760 --> 22:32.760
have them locally. If you use an IDE or similar, you can use a local machine to run the tests

22:33.240 --> 22:39.440
and take the time to figure out how to plug in these tools to that setting. Lots and lots

22:39.440 --> 22:45.560
of them are supported in both places and you can have it in context. I use Vim. All of

22:45.560 --> 22:51.600
those tools are plugged into Vim as well. So it's not modern, hand wavy, cutting edge.

22:51.600 --> 22:58.600
This is stand practice. The other really important thing is that this is all written down. With

22:58.640 --> 23:05.640
documentation specialists, everybody, write down how to set up the tools, how things are

23:06.160 --> 23:11.800
configured, where we publish to, where the sources, how the remote sources come in, how

23:11.800 --> 23:17.480
things are set up, maybe some troubleshooting guides. Write that down. The onboarding should

23:17.480 --> 23:24.400
be easy, whether that's a new hire or you get a new laptop someday. Set yourselves up

23:24.400 --> 23:29.800
for getting it right because again, we're looking for confidence and efficiency and this

23:29.800 --> 23:36.800
sort of thing is part of the culture change. There's a saying in software about move fast

23:36.880 --> 23:43.880
and break things. Dark ops is about move fast and don't break anything. I mean maybe it

23:44.160 --> 23:49.840
doesn't matter as much in documentation because it's easier to iterate than it is in code

23:49.880 --> 23:56.880
or especially in API interfaces. But the goal here is that we have professionals who are

23:57.680 --> 24:03.240
really good at what they do, but the tools can make that faster, easier, simpler, more

24:03.240 --> 24:10.240
accurate. They can catch us on things that we might slip up on. So bring the tools but

24:11.680 --> 24:18.680
also the dark ops mindset into your projects and see where it can take you. I am pretty

24:19.240 --> 24:24.400
much out of time. Here is a list of useful resources. My slides are linked to my session

24:24.400 --> 24:29.400
and I will say thank you for your time.

24:29.400 --> 24:36.400
I think we have maybe like time for two questions.

24:40.080 --> 24:45.080
Would anyone like to ask a question? Yes.

24:45.080 --> 24:52.080
This is a really good question. Do I have tips for helping with the translation of documentation

24:59.120 --> 25:04.520
within the process? I haven't worked on a lot of projects that have this. The ones

25:04.520 --> 25:10.000
that I have, Git is the key because you know which files have changed and which things

25:10.000 --> 25:16.360
have changed. I have mostly seen where the translation is a mirror and whether it's

25:16.360 --> 25:21.280
a week or a month or however often you pay your translation people, you can snapshot

25:21.280 --> 25:26.560
the pages that have changed and get those re-translated. So I think source control helps

25:26.560 --> 25:31.560
a lot with that. One more question.

25:31.560 --> 25:36.560
Could you imagine that you have also very strong opinion regarding documentation and

25:36.680 --> 25:41.680
information or something? I would like to hear it.

25:41.680 --> 25:45.880
I will repeat the question for the stream. The question is do I have a strong opinion

25:45.880 --> 25:49.960
about having documentation in Confluence or Notion or something like that? I have two

25:49.960 --> 25:54.040
strong opinions, not too strong because we are being recorded. The other one maybe we

25:54.040 --> 26:01.040
can talk in the bar. Using a tool like that hurts collaboration because you can't all

26:02.040 --> 26:08.040
make multiple changes at once and bring them back. Like one person is editing, if you were

26:08.040 --> 26:15.040
editing, it's very tricky to do that. The other reason is the lack of standards. So on a very

26:15.480 --> 26:20.760
personal level I have some accessibility needs. If you switch your documentation platform

26:20.760 --> 26:27.600
to Confluence or Notion, I can't do my job anymore. So Doxxus Code is the way because

26:27.680 --> 26:29.200
it lets everyone choose the tools that work.

26:29.200 --> 26:30.200
Thank you.

26:30.200 --> 26:33.200
All right. Thank you very much. I think we have this.

