WEBVTT

00:00.000 --> 00:07.000
We're going to continue in more creative uses of Go.

00:11.040 --> 00:16.840
Most people use Go, microservices, Kubernetes stuff, servers, whatever, but usually not

00:16.840 --> 00:22.800
user interfaces. Every year there are a few crazy people who come to talk about some crazy

00:22.800 --> 00:29.800
new front-end thingy built in Go, and I personally always like it.

00:29.800 --> 00:35.360
So I also invited Andrew this year to talk about Logoad graphical interfaces in our

00:35.360 --> 00:38.360
favorite language Python. Go!

00:38.360 --> 00:45.360
And I'm a boss.

00:46.520 --> 00:52.880
Thank you very much, Dave Matcha. So yeah, I'm going to talk to you about Logoad graphical

00:52.880 --> 00:59.320
applications. So on two levels there's not going to be much code on screen. I think I

00:59.320 --> 01:04.360
actually have less code than John's description about how to get involved in contributing

01:04.360 --> 01:09.640
earlier. So let me see how I can do it. However, what's a pretty picture, so hopefully I can

01:09.640 --> 01:12.480
keep you engaged in that way.

01:12.480 --> 01:19.040
So yeah, hi, my name is Andrew. I am a software engineer, working various startups. I've written

01:19.040 --> 01:24.640
a couple of books, and occasionally appeared on podcasts and interviews talking about graphical

01:24.720 --> 01:30.680
app development with Go. It is exciting to be here on stage at FOSDEM. I've been coming

01:30.680 --> 01:37.680
for decades. Having been an open source contributor for years as part of the Enlightenment Project,

01:38.280 --> 01:43.000
Maven, all sorts of things that potentially predate and certainly stand outside of the

01:43.000 --> 01:44.560
Go ecosystem.

01:44.560 --> 01:50.160
More recently I started the Find Project. Perhaps a few of you might have heard about

01:50.240 --> 01:55.920
this. It's a way to build native graphical applications using Go that are going to work

01:55.920 --> 02:00.840
on any device. If you've never heard of it, I'll do a quick recap. If you have, just hold

02:00.840 --> 02:06.520
on a second and I'll move on to some new stuff. I've been a Go developer for about two weeks

02:06.520 --> 02:11.280
less than I've been working on the Find Project because we had an ambition of what we were

02:11.280 --> 02:15.960
going to do, and then we figured out what language is going to work to deliver on these

02:15.960 --> 02:22.960
ambitions. Hopefully everybody agrees, it goes just a fantastic choice. How did all of

02:23.720 --> 02:29.680
that come together, and what are we building on top of it? My day job is at Fine Labs,

02:29.680 --> 02:34.240
where we're working on products and services that help businesses get more out of the type

02:34.240 --> 02:38.680
of technology that I'm presenting today.

02:38.680 --> 02:44.960
Like I said, the Find Project started in 2018, and it over that time has aimed to be the

02:44.960 --> 02:50.800
simplest way to build native graphical applications. They should look good, they should be easy

02:50.800 --> 02:57.300
to build, and they should work absolutely everywhere. Of course, easy to build is relative. We've

02:57.300 --> 03:02.240
had great feedback from people who have never coded Go or who have never built an app before,

03:02.240 --> 03:05.520
but there's plenty of people out there who feel that that's a little bit overwhelming

03:05.520 --> 03:09.560
to learn, they don't want to be a coder, they just want to build stuff. That's why I'm

03:09.560 --> 03:14.320
talking about something a little different today, about building with absolutely no code

03:14.440 --> 03:15.320
at all.

03:15.320 --> 03:21.440
But before I do, here's the recap for anybody who's not familiar with Fine. It's been running

03:21.440 --> 03:26.720
now for six years, I can't believe it's been that long, but hey, it's come a long way.

03:26.720 --> 03:33.720
We're currently ranked around sixth of all cross-platform graphical user interface toolkits

03:34.080 --> 03:38.600
by OSS Insights. That puts us up amongst some other names that you might have heard like

03:38.600 --> 03:44.240
Flutter or React Native, and of course I should probably shout out to Wales as well. They're

03:44.280 --> 03:49.800
very popular, lots of different ways to build in modern toolkits and actually in Go. So,

03:49.800 --> 03:54.680
variety out there. Last week I was really excited to realise that we have become in

03:54.680 --> 04:01.200
the top 1000 GitHub repositories of all time, out of, I don't know, 350 million or something,

04:01.200 --> 04:05.560
long tail perhaps, but it's a little bit of a milestone, very exciting to be celebrating

04:05.560 --> 04:06.600
that.

04:06.600 --> 04:10.840
We have about eight core contributors, they come and go. This year has seen a lot of new

04:10.880 --> 04:16.960
contributors coming in and as part of the Go community, it feels like a really welcoming

04:16.960 --> 04:23.040
inclusive space and we have some channels on the Go for server, we have a Discord for

04:23.040 --> 04:27.760
people to chat and there's about 2000 people across the different platforms that we are

04:27.760 --> 04:34.520
discussing on. But that is enough about the technical side and the project, which if you're

04:34.520 --> 04:39.560
interested to hear more about, there is a talk in the graphics dev room tomorrow afternoon

04:39.640 --> 04:45.280
at a similar time. I wanted to talk today about not using code to build applications.

04:45.280 --> 04:50.680
So, I'm going to introduce you to a tool called Fission. The spelling is just as peculiar

04:50.680 --> 04:57.680
as the fine project, but why not? This basic screenshot is not going to reveal too much,

04:58.000 --> 05:02.960
I'm going to step through a little bit of what is capable of it, but more how we pulled

05:03.000 --> 05:10.000
it together and how it has really been enabled by the Go built-in functionality and what

05:10.000 --> 05:13.960
we have been able to build on top of that. This is the screen that you might be greeted

05:13.960 --> 05:18.880
with, if you do load the app for the first time, it is going to help you get started

05:18.880 --> 05:22.720
building a project.

05:22.720 --> 05:29.220
So what did this set out to achieve? There's so much that we could do and probably I should

05:29.300 --> 05:35.580
have thought twice about getting into the space, I think there's 130 to 150 no code,

05:35.580 --> 05:41.460
low code platforms out there, but if you've ever tried them, they're mostly building websites

05:41.460 --> 05:45.820
or web technologies and if they're apps, they might be bundling them up into native

05:45.820 --> 05:52.320
installs, they might be targeting specific platforms or they might be reliant on technologies

05:52.320 --> 05:59.160
that I might refer to as legacy or certainly not with the same awesome modern tooling around

05:59.240 --> 06:03.800
the Go community does. So we wanted to do something new, something that was truly building

06:03.800 --> 06:10.080
native apps, like I said before, fine applications are going to compile and run on any device

06:10.080 --> 06:14.880
with a screen, at least that's the ambition, we're about 95% of the way there. So we're

06:14.880 --> 06:21.880
wanting to build native apps, but also we want to make this really easy to get started,

06:23.760 --> 06:27.760
with easy to build stuff, so as much graphical editing as possible, as you would expect from

06:27.840 --> 06:33.480
a low code platform, we started with the UI and the theming capabilities, so although

06:33.480 --> 06:36.960
the application has got a long way to go, as you might see, there's something to get

06:36.960 --> 06:43.960
started right away, it should always be building on a real code base. So if you don't like

06:44.000 --> 06:49.440
the front end or you want to work with a team of developers just loving Go at the low level,

06:49.440 --> 06:54.840
you should be able to work with them collaboratively through the Git repository, for example. The

06:54.840 --> 07:01.240
applications should compile for all platforms, but also this should run on all platforms.

07:01.240 --> 07:05.720
We're making use of our own technology, if you want to build an app for an iPhone, but

07:05.720 --> 07:09.520
you want to do it from an Android tablet, that's cool. If you want to use Windows as

07:09.520 --> 07:14.840
your development environment, but target only mobile devices, that's just grand as well.

07:14.840 --> 07:18.120
Little tweak on the bus, because you know the boss was expecting something before you

07:18.120 --> 07:23.480
get in in the morning. Of course being at FOSDAM, everything that I'm showing you today

07:23.520 --> 07:28.400
is open source, it's going to remain open at the core, but some days companies want the

07:28.400 --> 07:34.400
business add-ons, the plug-ins, so we're going to be using this as open core, but like I

07:34.400 --> 07:39.760
said, nothing that I'm showing today is proprietary or held back. The repositories are evolving

07:39.760 --> 07:43.080
and some of them are not landed in the right place yet, but I'll point you in the right

07:43.080 --> 07:48.960
direction at the end of the talk. Like I showed you at the beginning, we're going to give

07:48.960 --> 07:53.320
a UI that allows people to get started with templates to get their application running

07:53.360 --> 07:57.880
really quickly, but also you could build an application completely from scratch if you

07:57.880 --> 08:04.200
want, with the building blocks that we've provided on top of Git repository for managing

08:04.200 --> 08:11.040
the source control. But there's so much to get started with building your first project.

08:11.040 --> 08:15.800
I kind of don't want to say that. When I started it was super easy, you opened a text file,

08:15.800 --> 08:19.520
wrote a couple of lines in there and then you just ran it. I mean it felt a little bit

08:19.560 --> 08:25.440
like a script, but really good solid code. I've opened a few issues upstream with the

08:25.440 --> 08:30.520
project team about why has modules made things difficult to get into? Workspaces are amazing,

08:30.520 --> 08:35.120
but it's more metadata. We're going to have to manage that for you, but that's exactly

08:35.120 --> 08:37.960
what's going to happen. You tell us what your application is going to be called and we'll

08:37.960 --> 08:46.960
generate all of the metadata, set up the modules all for you. The metadata about the UI, about

08:47.000 --> 08:51.120
the themes, everything you're editing is going to be stored in the source control as well.

08:51.120 --> 08:55.240
So if you decide that you want to work, like I said with somebody else who's not on top

08:55.240 --> 09:00.840
of this UI, you can pick up absolutely that code and work with it. But also we want people

09:00.840 --> 09:07.080
to be able to pick up this project having worked on the code directly for a period of

09:07.080 --> 09:12.640
time. So not like a project where you can really quickly pull together a user interface

09:12.680 --> 09:18.160
for an application and then export it. It's amazing, you've got a React Native app out

09:18.160 --> 09:23.000
the other end. Nobody can read it and if you want to start working graphically on it again,

09:23.000 --> 09:28.000
you're possibly going to be starting from scratch. I don't know. Anyway, so everything

09:28.000 --> 09:35.000
is synchronized with the source control onto the file system. So we are working on a Go

09:35.320 --> 09:42.320
project. I did promise something a little bit graphical. So here you have the first slightly

09:43.480 --> 09:50.480
better looking screenshot I think. We're going to be working just now on the theme. We have

09:50.480 --> 09:56.560
a pretty crude mock-up of a smartphone device here, a generic one. The cutout is somewhere

09:56.560 --> 10:00.680
between a magical island and a place where let's face it, cameras exist and we don't

10:00.760 --> 10:07.760
need marketing about it but it's there. The UI is going to allow you to see how these applications

10:08.760 --> 10:15.760
work on mobile device, smartphone tablet or a standard window, inset inside the application.

10:18.320 --> 10:22.120
It's going to handle the scaling, the alterations that you would expect for these different

10:22.120 --> 10:29.120
types of devices. But also we need to present in light and dark mode. So you can see a toggle

10:30.080 --> 10:37.080
at the top of the color picker on the right hand side. All of this lovely information

10:37.600 --> 10:42.640
is just saved directly to JSON. We've used the standard encoding package that Go has

10:42.640 --> 10:49.640
provided to save it to the wonderfully comprehensive file that you see illustrated on the right

10:51.000 --> 10:56.760
hand side. That wasn't easy. Go made it super easy, completely built in. But then we needed

10:56.800 --> 11:02.600
to load that data into the application that you're building. We didn't want to do any

11:02.600 --> 11:09.200
weird generation of things, stuff that could get in the way of working on code like you

11:09.200 --> 11:16.200
would in a real code base. So we just store the file there and embed it into the application

11:16.720 --> 11:21.240
using Go embed. I haven't realized how easy it was to work with this. I'm going to call

11:21.240 --> 11:26.720
it new functionality because I work a few iterations behind the cutting edge because

11:26.720 --> 11:33.720
we're trying to support as many devices as possible. To be able to stream this most effectively

11:34.120 --> 11:40.040
into your application, a fine app can have its settings set to a certain theme. You just

11:40.040 --> 11:47.040
call set theme. But it doesn't really expect a JSON file. It expects some Go code, a struct.

11:47.760 --> 11:53.920
We provided this from JSON functionality in the package scene. You can see here illustrated

11:53.920 --> 12:00.520
how we can provide both light and dark alternative colors for applications. Less so well illustrated

12:00.520 --> 12:05.260
here is that you can work with fonts, icons and the different sizes. Everything that makes

12:05.260 --> 12:12.260
an application feel the way that it does. We've got a bit of a look. You can imagine

12:12.540 --> 12:16.380
how that file might have your brand identity or something stored in it. You can port that

12:16.380 --> 12:22.420
across multiple different applications. Widget editing is the other thing that I feel is

12:22.420 --> 12:27.820
actually quite an enabler on a UI like this. If you're thinking about building out your

12:27.820 --> 12:31.860
first graphical app and you're looking at fine and you want to use Go but you're not

12:31.860 --> 12:37.100
quite sure how to get started, something like this, just this one screen could provide you

12:37.220 --> 12:42.380
with the graphical editing that helps you to understand how things are put together.

12:42.380 --> 12:48.260
The functionality in the user interface here is mapping to the APIs that are available

12:48.260 --> 12:55.260
if you're looking at this as a developer. Actually, let me just go back a little bit.

12:57.140 --> 13:01.740
I'll show you a little bit more later. You can see basically here there's a section highlighted

13:01.740 --> 13:06.780
on the user interface. We've selected that and down on the right hand side it is giving

13:06.860 --> 13:12.420
you the different areas of settings that are available plus the option to insert more things

13:12.420 --> 13:19.420
into your user interface. I feel like I've said a little bit too much about JSON already.

13:19.420 --> 13:22.940
The fact is it's really super helpful. I don't like to read it. I don't know if it's the

13:22.940 --> 13:27.780
win but I'll agree with the folk that perhaps suggested that XML was a little bit cumbersome

13:27.780 --> 13:34.780
in comparison. We use it again. Actually, it is great that Go not only supports serialized

13:37.020 --> 13:44.020
using something like a map to JSON but we can because we have a stateful widget toolkit,

13:44.020 --> 13:49.300
we're able to serialize the entire state of your application the way the widgets are positioned,

13:49.300 --> 13:55.100
the containers around them and the metadata for them streamed directly to a JSON file.

13:55.100 --> 14:02.100
Again, illustrate it over there. There is also a little blank field on line four for name.

14:03.100 --> 14:09.100
A chance to put an identifier on your widget so that you can hook it into code later because

14:09.100 --> 14:13.020
this is a low code solution. We know we haven't solved all of the problems and you might want

14:13.020 --> 14:17.780
to write a little bit of Go so you can hook into that through the name which is going

14:17.780 --> 14:23.980
to be exported as a field on the application which I can show a little bit more in detail.

14:23.980 --> 14:28.460
As part of the Find project we've created a library which did start out as a project

14:28.500 --> 14:35.500
a little bit like this but now has shifted focus to helping more applications to load

14:35.580 --> 14:41.940
and save graphical state. It will also allow you to understand which widgets are available

14:41.940 --> 14:47.700
so you can iterate through. You can, at runtime, create new instances of an object based off

14:47.700 --> 14:53.180
some textual representation or just ID of the object type that you're looking to work

14:53.180 --> 14:58.300
with which, as you can imagine, pretty helpful if you're trying to generate at runtime a

14:58.340 --> 15:04.500
user interface that's normally compiled at compile time.

15:04.500 --> 15:08.540
One thing that I find really quite surprising, in fact I don't know how many people have

15:08.540 --> 15:15.540
realized this but your objects and types in Go in memory can be written out to Go code

15:17.700 --> 15:21.740
to reconstruct them as though they were source code. That's pretty cool. It's like stringer

15:21.740 --> 15:28.740
but it's go stringer. Has anybody heard of go stringer? I'm really curious about that.

15:29.020 --> 15:34.580
Right cool. So hey that's really interesting. Anything that you have in memory pretty much

15:34.580 --> 15:39.860
can be serialized as the Go code that generates it. You may need to write a little bit of

15:39.860 --> 15:46.860
code to make that fully functional yourself but we built on top of that. That means that

15:47.860 --> 15:53.460
every time you save your user interface state it's not just saving JSON but it's spitting

15:53.460 --> 16:00.460
out the Go code that will generate the application source code so that you can be working with

16:00.460 --> 16:04.780
developers but also so you can actually compile and run it.

16:04.780 --> 16:11.780
Which moves on to compiling applications. Now it goes amazing at the cross platform

16:12.140 --> 16:18.820
compilation, portability building applications for anything but there are certain requirements

16:18.820 --> 16:25.020
when it comes to building native graphical applications. Partly they want metadata around

16:25.020 --> 16:31.260
them but partly people who own certain platforms put licensing restrictions in place and require

16:31.260 --> 16:36.660
that you run on their hardware or with certain toolkits present so there's a little complexity

16:36.660 --> 16:42.900
here. The project that I've presented and will illustrate uses local developer tools

16:42.900 --> 16:47.020
so you're never beholden to anything at all. If you've got stuff installed you can build

16:47.020 --> 16:52.740
the application that you have coded and have it run on the local system and install it

16:52.740 --> 16:59.740
into your applications directory or the start menu whatever the equivalent would be on

17:00.020 --> 17:07.020
Windows at the moment. For the local system that's really quite straightforward, the tools

17:07.060 --> 17:14.060
are there. For cross compiling we've had some really great contributions to the fine project

17:14.060 --> 17:19.980
called Fine Cross from Looker and Jacob and Cedric as well so that you can with that level

17:19.980 --> 17:25.140
of simplicity build for any platform. It pulls down images with all the developer tools installed

17:25.220 --> 17:31.420
that you would need but even then you still need to have it running on a Mac to do iOS

17:31.420 --> 17:36.500
development or on a Windows box to ship off to the store so I'm not going to say this

17:36.500 --> 17:41.620
is proprietary but if your business was interested in something that just worked in the cloud

17:41.620 --> 17:48.220
there's going to be an option here that, good timing, there's going to be an option that

17:48.220 --> 17:54.620
allows you to spin up basically a pipeline in the cloud. It sends the latest version

17:54.620 --> 17:58.980
of your code and it comes back to you with the native app bundles for store deployment

17:58.980 --> 18:05.980
or ad hoc distribution and also included in that we have support for over the air self-update

18:06.020 --> 18:12.020
of application software as well. This little diagram here is something I created a while

18:12.020 --> 18:16.500
ago to try and explain to people why platform agnostic development or building with a tool

18:16.500 --> 18:21.860
chain that works on any platform makes a really big difference. If you think this would help

18:21.900 --> 18:25.180
to convince people to use Go More in your organization there's a couple of postcards

18:25.180 --> 18:30.060
over there next to the stickers and on the other side there's a couple of really sweet

18:30.060 --> 18:37.060
doodles which just show how coding nirvana can be achieved so hard level tooling, cute

18:38.300 --> 18:45.300
fields. Lastly before I actually show it in action there's a project out there called

18:45.940 --> 18:52.940
Fishos. Again you might get the theme here with the FY starting of the name which is

18:53.580 --> 18:59.780
a Linux desktop operating system that is built from the basic graphical level all the way

18:59.780 --> 19:06.780
up entirely with fine and fine applications. We're moving to all of the applications being

19:07.900 --> 19:14.900
created or editable with vision not just with source code so that you can be very well

19:15.380 --> 19:20.020
running your desktop software and go I actually think that this could be tweaked with something

19:20.020 --> 19:25.900
wrong here I can improve on it and you could go and edit the software that you're running,

19:25.900 --> 19:31.420
load it in the UI, make some modifications and then install it right back over the top

19:31.420 --> 19:36.740
of the software that you're editing before. If that sounds really interesting well we're

19:36.740 --> 19:41.540
working in that direction you can head over to fishos.com to see where things are. There

19:41.540 --> 19:46.500
is a beta ISO, stick it in a virtual machine nothing more and some of this functionality

19:46.500 --> 19:51.100
is not in the version that's there yet but keep an eye out because this is all coming

19:51.100 --> 19:57.580
very soon to a platform near you. With that I thought I might just try and show you that

19:57.580 --> 20:04.580
this works and bring up the UI editing and application of my system here.

20:05.580 --> 20:12.580
I have the bar of icons on my installed system here. I see this calculator app. It's nothing

20:19.540 --> 20:26.020
special, it's a calculator, it's going to calculate some things. Clearly there's some

20:26.020 --> 20:32.180
things in this that could be improved for some reason I think that's true. Let's actually

20:32.260 --> 20:38.700
go ahead and look at how this is. We can edit the calculator application and it's going

20:38.700 --> 20:45.060
to load it in the editor that I showed you. I was demoing this for somebody else just

20:45.060 --> 20:50.460
immediately before so it's defaulting to smartphone apologies for that. Of course we're really

20:50.460 --> 20:56.300
working in desktop software so this is the more familiar button size, text size button

20:56.420 --> 21:03.420
size that kind of thing. This C button, it doesn't seem to be quite right, it's very

21:06.700 --> 21:13.700
vague, I feel it should be a robust red warning. It is a warning, it should be a danger button.

21:14.500 --> 21:19.100
Let's really indicate that there's a problem likely to happen if you press this. You might

21:19.100 --> 21:24.340
be one of these people that thinks that clear isn't quite substantial enough so all clear

21:24.380 --> 21:31.380
or AC might be more familiar to you. We also could look at the layout of our application

21:31.820 --> 21:38.820
expanding down here on the containers. If I tap this, this tap here, this is a two item

21:40.660 --> 21:47.660
grid, I think it's this container here. I could do something a little bit bizarre and

21:47.660 --> 21:54.260
make those rows wow. That did make sense from a mathematical point because this is a new

21:54.340 --> 21:58.340
and evenly spaced grid and I just asked it to do something a little bit daft but actually

21:58.340 --> 22:04.840
the columns were just fine so we can go back in there. This application obviously it's

22:04.840 --> 22:10.840
just a quick editing in line. I want my app, I want to test it, I want to run this piece

22:10.840 --> 22:17.840
of software so I'll test, run, I'll press run. It's going to go and okay I forgot to

22:17.920 --> 22:24.920
save the file. Sorry I should have asked if anybody realized what I'd done wrong there

22:25.240 --> 22:29.920
and offered a prize but it's happened to me once before and it will happen to me again

22:29.920 --> 22:36.920
I'm sure. So there you go it has compiled the application and built it natively onto our

22:37.480 --> 22:43.600
system. That is a live native application compiled for the current system but it is

22:43.640 --> 22:48.100
just a binary where it's a single binary as any good go application would be running

22:48.100 --> 22:54.440
off our hard drive but actually what I wanted to do was commit my really significant improvement

22:54.440 --> 22:59.240
to this calculator app to my operating system and so I'm going to use this other developer

22:59.240 --> 23:06.240
button called install and it is just going to improve every day of my life now so when

23:06.680 --> 23:13.100
I go back to my calculator app over here I now have a new version of this little piece

23:13.100 --> 23:20.100
of software and I just feel like this has been a big improvement for me. Hopefully you

23:20.100 --> 23:24.380
can imagine a lot more possibilities and you see the next project that you're going to

23:24.380 --> 23:31.380
build and I would love to hear about that. Anyway let me just, oh by the way if you really

23:31.700 --> 23:38.700
like building applications you like mark down and think it's the future of all good things.

23:39.060 --> 23:46.060
This slideshow application is a fine application called Slides with a Y of course and it's

23:46.860 --> 23:53.860
just marked down. Anyhow sorry I'm pressing the wrong button aren't I? There we go. If

23:54.380 --> 24:01.220
you would like to learn more about this that I have showed you and please do check it out

24:01.220 --> 24:06.100
any feedback that you have. It's early days but we're looking for people to get involved.

24:06.100 --> 24:12.100
Beta testing.app is the homepage for everything that we're doing. It offers you links to,

24:12.100 --> 24:16.580
I feel like some surveys let us know what you think is going to be useful. Sign up to

24:16.580 --> 24:23.580
beta testing when it's available and the second link there is actually not connected to that

24:25.300 --> 24:31.900
app website. We recently completed some user interviews and got some really great feedback

24:31.940 --> 24:36.940
about where the opportunities might exist in this area. If you're at Intrigue we're running

24:36.940 --> 24:40.940
a questionnaire based follow up so the second link there would be really interesting to

24:40.940 --> 24:46.180
get your feedback. Like I said this is all open core and everything so far is fully open

24:46.180 --> 24:53.180
sourced under the BSD license. Actually it's dual licensed with GPL as well for the licensing

24:55.420 --> 25:01.020
of business add-ons later but it is all out there with a compatible license. If you would

25:01.060 --> 25:04.580
like to see the source code which I didn't tell you about but honestly is there fully

25:04.580 --> 25:09.700
available and pretty straightforward you can go to our YouTube channel. There is a video

25:09.700 --> 25:16.020
series called Creating an App Builder I think. We used to do them weekly and then moved to

25:16.020 --> 25:19.860
monthly. There are 11 videos there that take you through almost all of what you've seen

25:19.860 --> 25:25.660
demonstrated earlier and the source code is currently in the tutorials repository because

25:25.660 --> 25:29.980
we're just working on neatening up the first iteration of the actual product that I just

25:30.020 --> 25:34.780
demonstrated to you there. But the majority of the code as I said been through the videos

25:34.780 --> 25:41.780
is available in the tutorials repository. Hopefully that's been really interesting.

25:42.060 --> 25:46.500
I'd love to take questions now but also like I said there's these little weird things out

25:46.500 --> 25:51.060
there but if you're interested in building the future pick up one of these stickers and

25:51.060 --> 25:55.100
slap it onto a laptop and tell the next person how it is that Go is going to be the next

25:55.140 --> 26:00.140
future or the best, brightest future for graphical application development. Thank you very much.

26:07.140 --> 26:13.140
Did you all just realise we just saw an operating system user interface completely building Go?

26:14.140 --> 26:17.140
Yeah. Wow. I'm shocked.

