WEBVTT

00:00.000 --> 00:02.060
you

00:30.000 --> 00:32.060
you

01:00.000 --> 01:02.060
you

01:30.000 --> 01:32.060
you

03:30.000 --> 03:46.060
you

03:46.060 --> 03:57.060
now it's proper green okay now it's a good green okay so so yeah so so when you look at this distribution

03:57.060 --> 04:26.120
oops wrong slide yeah so it's actually it's a number of components and we when you deploy the stack it's for production deployments it's Kubernetes only we do have VM distributions but they're for development only there's no way to upgrade the VM so if you're testing it VMs are fine we're publishing packages that are not available for you.

04:27.120 --> 04:35.120
Red Hat Ubuntu and Sousa but when you put it into production this is really a enterprise deployment.

04:35.120 --> 04:46.120
Just a couple of notes of like who who wants to use this type of thing this is for large scale deployments companies that have economies of scale to operate.

04:46.120 --> 04:55.120
People have custom requirements companies that need to self host who don't want to use a cloud provider or people who want to build a product.

04:56.120 --> 05:11.180
So okay well that's enough about about the background what I want to show today is actually a live demo of a gamma and this is sort of brave majority not you know we're already facing technical difficulties we'll see how it goes here.

05:11.180 --> 05:17.180
But I want to show you actually want to build an agama project and maybe customize it a little.

05:18.180 --> 05:23.180
So let's go here so I'm going to go to our.

05:27.180 --> 05:37.180
So this is a gamma lab as I mentioned a gamma lab is the developer site and so a gamma is a.

05:38.180 --> 05:57.180
So the idea with a gamma project is that it's everything you need in order to build a project that includes the code any libraries any web assets CSS HTML images so all that stuff together is what we call an agama archive.

05:58.180 --> 06:08.180
You take a gamma archive if you're Java people you might know what a war file is a war files are your whole application and you can deploy it on any.

06:08.180 --> 06:21.180
Application server that supports war files so a gamma files are sort of like war files for IDPs if you have this any IDP that supports deployment of a gamma should be able to run.

06:22.180 --> 06:41.180
The agama catalog is a catalog of projects that you can start with because it we don't want you to have to write everything from scratch the idea is is that we can create sort of a catalog of ready to go projects you can fork these and then modify them a little bit and publish them on your server.

06:42.180 --> 06:51.180
The project I want to work with today is called a gamma SMTP so I'm going to actually just go here and fork this project in my personal repo.

06:53.180 --> 07:06.180
And so a gamma lab doesn't actually store any code we're just using GitHub for everything here so we're storing you so you fork it and so now it's forked so now I'll go back to a gamma lab.

07:07.180 --> 07:12.180
And so I'll change the repository.

07:13.180 --> 07:17.180
And I'll say okay where to go.

07:18.180 --> 07:22.180
So this is this is the one I just forked so let's work with this one.

07:25.180 --> 07:29.180
And it says okay you don't have enough permissions so.

07:30.180 --> 07:42.180
We're using what's called a GitHub app I never heard of this thing but basically you can install a GitHub app in your in your project and so this enables us to have very granular permissions.

07:43.180 --> 07:51.180
So I'm going to configure and I'm going to basically have to add say okay where's the gamma this this app.

07:52.180 --> 07:55.180
Save.

07:57.180 --> 08:00.180
Yeah and so now I can go back to a gamma lab.

08:03.180 --> 08:06.180
And I should be able to switch to it now.

08:07.180 --> 08:13.180
Without that I wouldn't be able to read from the from the from the repository.

08:14.180 --> 08:19.180
Okay so now here's my project.

08:20.180 --> 08:26.180
Let's look at it in this is what we call the orchestrator it's the place that you actually write the agama code.

08:30.180 --> 08:34.180
So this this is what a gamma the the low code looks like.

08:35.180 --> 08:42.180
If you actually want to see the agama code itself you can hit generate code here and this will show you the agama source.

08:44.180 --> 08:46.180
But we don't actually want to see this.

08:47.180 --> 08:52.180
And so the idea here is that let's actually.

08:54.180 --> 08:59.180
Let's maybe make a new a new flow file so I'm going to teach you let's just say.

09:00.180 --> 09:05.180
Or dot foster dot.

09:09.180 --> 09:10.180
So.

09:13.180 --> 09:14.180
Say demo.

09:16.180 --> 09:17.180
So.

09:18.180 --> 09:23.180
Every agama flow has a unique name we call that the qualified name or QN.

09:24.180 --> 09:31.180
So when I'm evoking an agama flow using open ID connect we would always use the ACR agama to tell the IDP we're running in a gamma flow.

09:35.180 --> 09:42.180
But then we have an extra parameter called a gamma underscore flow and that and that would be the qualified name of the of the server.

09:45.180 --> 09:47.180
So here's the QN up here.

09:48.180 --> 09:56.180
Now in a gamma these are all the agama commands agamas are very concise language.

09:57.180 --> 10:06.180
So let's say I want to the first step of my flow is I want to display a form I would use RRF and here I would give the name of the template.

10:08.180 --> 10:13.180
And actually in the in a gamma lab we also have form authoring.

10:14.180 --> 10:21.180
So for example here here's the form and this is using Apache free marker.

10:22.180 --> 10:26.180
And this is kind of brave but let's try it.

10:27.180 --> 10:28.180
What if maybe I can.

10:31.180 --> 10:32.180
Drop in a new logo here.

10:34.180 --> 10:35.180
So.

10:36.180 --> 10:37.180
Let's try.

10:38.180 --> 10:40.180
That one looks beautiful way better.

10:41.180 --> 10:43.180
Okay so I just customized my form.

10:45.180 --> 10:46.180
Okay and I'll save it.

10:50.180 --> 10:51.180
So you got the idea.

10:52.180 --> 10:53.180
You can customize your forms.

10:54.180 --> 10:55.180
Now we also have a lib folder here.

10:56.180 --> 11:00.180
So the code folder is where all your agama orchestrator flows go.

11:01.180 --> 11:07.180
The lib folder is where all of your code goes so agama is low code not no code.

11:07.180 --> 11:15.180
That means that you're still going to call classes Java classes or groovy classes are both acceptable or you can drop in a jar file.

11:18.180 --> 11:19.180
And.

11:20.180 --> 11:33.180
Yeah and so when what what is a gamma file basically as we take it we make a zip file out of the code the the lib and the web folder and we have a project set that Jason that basically provides the metadata.

11:34.180 --> 11:36.180
Let's go back to the orchestrator.

11:37.180 --> 11:38.180
I want to keep going with a gamma.

11:40.180 --> 11:42.180
So and show you some of the other commands.

11:43.180 --> 11:51.180
So in addition to being able to render a form we can assign a variable you're all geeks you know what that means.

11:52.180 --> 12:02.180
We can call so in the call box we provide the class name the method name we send in arguments and we assign whatever gets you know comes back to the class name.

12:03.180 --> 12:06.180
We can get back from the method into a into the result.

12:07.180 --> 12:08.180
So that's a very important box.

12:09.180 --> 12:17.180
We also have a trigger so trigger means I want to call another agama flow sometimes you might break your agama flows into different parts.

12:18.180 --> 12:31.180
Maybe you have one we have one part that sends the email we have one part that maybe does registration so instead of building gigantic flows we can break our our orchestration into different flows and route between them.

12:33.180 --> 12:42.180
We have our FAC this is a very powerful command that allows you to redirect it stands for redirect and fetch it call back.

12:43.180 --> 12:46.180
So that means that we can send to an external open ID provider.

12:47.180 --> 12:49.180
A lot of things have an open ID interface these days.

12:50.180 --> 12:58.180
It's like you know a lot of things have a web interface well in authentication things have an open ID interface many authentication services have an open ID interface.

12:58.180 --> 13:02.180
When we call key cloak for sample we actually call it via open ID.

13:03.180 --> 13:09.180
So the ability to sort of built in you know call another IDP and get a response is very powerful.

13:10.180 --> 13:14.180
Let me actually so let's say we want to test this thing.

13:15.180 --> 13:17.180
Okay I've written my code and now I want to test it.

13:18.180 --> 13:22.180
So what I'm going to do is I'm going to download a dot gamma file.

13:23.180 --> 13:28.180
And now I'm going to ask SFDP that up to my server and deploy it.

13:31.180 --> 13:33.180
Dangerous I know but let's do it.

13:34.180 --> 13:39.180
So nope that's the wrong tab.

13:44.180 --> 13:47.180
This one yeah so let's try it.

13:47.180 --> 13:52.180
Okay now it's on my server that's good.

13:53.180 --> 14:02.180
And so there's a couple of ways to configure Johnson I'm going to show you the geeky way because you're developers and you can handle it.

14:03.180 --> 14:14.180
We have this thing called the two e and the two e basically it's an interactive command line thing it's better than I hate command lines.

14:15.180 --> 14:20.180
But you can we have a command line we have the two e in the commercial product is a web interface.

14:21.180 --> 14:24.180
But let me say so what I want to do here is upload my dot gamma file.

14:25.180 --> 14:33.180
So or rather it's already uploaded but I need to say okay this is the agama file I want to deploy.

14:34.180 --> 14:40.180
I need to fill a buster here while it's deploying so I'm just going to show you this thing sends email.

14:40.180 --> 14:46.180
So it actually uses the agama or the Johnson server to send email.

14:47.180 --> 14:57.180
You know this is one of the areas where actually so if you we want agama to support multiple IDPs we'd really love it key clout to have an agama deployment for example.

14:58.180 --> 15:04.180
If you have any IDP specific stuff what we want you to do is write an interface with all the methods.

15:04.180 --> 15:12.180
So in our server we said we have three methods that your IDP needs to do send email on board user.

15:13.180 --> 15:26.180
And so we have an implementation for Janssen that is how we send an email but if you're writing key cloak you would implement these three methods to in order to do whatever key cloak needs to do to send an email.

15:27.180 --> 15:33.180
So we want to sort of separate the IDP specific stuff.

15:34.180 --> 15:36.180
Okay I think it should be deployed now.

15:37.180 --> 15:38.180
Let's just go back and check.

15:39.180 --> 15:42.180
All server, agama, just see.

15:49.180 --> 15:50.180
Yeah so it looks good.

15:51.180 --> 15:54.180
Okay so let's actually test it out now.

15:54.180 --> 16:00.180
And so we have this really cool test RP called TARP.

16:01.180 --> 16:08.180
And so TARP it's a browser plugin which is really nice.

16:09.180 --> 16:11.180
So you put in the host name of your IDP.

16:12.180 --> 16:16.180
I think this is what is my host name actually.

16:18.180 --> 16:19.180
Moral boxer.

16:24.180 --> 16:28.180
Moral boxer.glue.info.

16:29.180 --> 16:32.180
Okay so now we're going to do dynamic client registration.

16:34.180 --> 16:35.180
So now I have a client ID.

16:36.180 --> 16:40.180
So remember when I send this request I'm going to send ACR values equals agama.

16:41.180 --> 16:50.180
And remember I need to send this extra parameter agama underscore flow and then I will go back.

16:50.180 --> 16:54.180
So I don't know the QN of the flow I want to invoke so I'm just going to go look at it.

16:55.180 --> 16:56.180
I think it's this one.

16:57.180 --> 17:01.180
And remember the QN is here so I'm just going to copy this.

17:02.180 --> 17:04.180
Copy this, go back to TARP.

17:08.180 --> 17:09.180
Paste it in.

17:11.180 --> 17:13.180
And let's trigger the flow.

17:14.180 --> 17:15.180
Oh no.

17:16.180 --> 17:17.180
I think I know what happened.

17:17.180 --> 17:21.180
I think probably my bad demo flow didn't like it.

17:23.180 --> 17:25.180
But I don't know if I have time to fix that.

17:26.180 --> 17:38.180
But basically you got the idea though is that we what we're going to do is just to summarize.

17:39.180 --> 17:40.180
I think I only have a couple of minutes left.

17:41.180 --> 17:42.180
So you build your flows here.

17:43.180 --> 17:44.180
You download them.

17:45.180 --> 17:46.180
You test them.

17:48.180 --> 17:53.180
And then when they're good we have another feature built in called publish release project.

17:54.180 --> 17:56.180
So this actually does a GitHub release.

17:57.180 --> 17:58.180
You know how GitHub has the release a section.

17:59.180 --> 18:02.180
So we have a way, an automatic way to do a release.

18:03.180 --> 18:09.180
And if you really, if you're really excited about your project and you want to share it with the community, you can publish it.

18:10.180 --> 18:12.180
That means you're submitting it to the agama explore catalog.

18:13.180 --> 18:20.180
We have a review process to make sure that it has the right documentation and license and everything else.

18:21.180 --> 18:25.180
But we're we want third parties to submit projects.

18:26.180 --> 18:27.180
So I think that's about it.

18:28.180 --> 18:29.180
How much time do I have?

18:31.180 --> 18:33.180
Okay, let me I'll take some questions.

18:34.180 --> 18:35.180
Sure.

18:35.180 --> 18:38.180
So you mentioned about identity providers being able to provide something.

18:39.180 --> 18:42.180
My company is an identity provider and authorization as a solution.

18:43.180 --> 18:47.180
And I'm not sure what you could be needing to add to support this or what our customers would get out of it.

18:48.180 --> 18:49.180
Could you explain?

18:50.180 --> 18:51.180
Very good question.

18:52.180 --> 18:54.180
Okay, so agama like Python, you know, it's it's a it's a.

18:55.180 --> 19:02.180
Okay, so the question is, is how can my company who has their own IDP use use use use agama.

19:02.180 --> 19:06.180
So a gamma is governed at the Linux foundation.

19:07.180 --> 19:14.180
And so if actually my one action item, please go to jans.io and and star this project.

19:15.180 --> 19:16.180
We need to get to a thousand stars.

19:17.180 --> 19:21.180
But a gamma is published here at the Linux foundation.

19:22.180 --> 19:24.180
And that includes the agama interpreter.

19:25.180 --> 19:27.180
We have an agama interpreter, which is in Java.

19:27.180 --> 19:39.180
So for if you have an IDP and you want to support a gamma, what you would need to do is support a way to enable your customers to upload and deploy a dot gamma archive.

19:40.180 --> 19:42.180
And then you would have to be able to interpret that.

19:43.180 --> 19:48.180
But that code is actually here for you to use under Apache to license.

19:49.180 --> 19:58.180
And also the documentation for the agama language is also here in the in the docs.

19:59.180 --> 20:00.180
So the language reference, etc.

20:01.180 --> 20:02.180
Is all here.

20:03.180 --> 20:08.180
But basically you'd have to build an agama deployment engine and a gamma interpreter sort of into your IDP.

20:09.180 --> 20:10.180
What does that get us?

20:11.180 --> 20:16.180
That gets you the ability to your customers would be able to use a gamma projects and deploy them.

20:16.180 --> 20:18.180
So they could use the developer tool right there.

20:19.180 --> 20:20.180
Gamma projects and then deploy them on your IDP.

20:21.180 --> 20:23.180
Do you have low code?

20:24.180 --> 20:26.180
So maybe nothing.

20:27.180 --> 20:30.180
But but if they have a lot of IDPs don't have low code.

20:31.180 --> 20:35.180
Also, we'd like to see commonality instead of each IDP having their own low code.

20:36.180 --> 20:40.180
We'd like to see why are we going to torture developers and make them learn five different low code ways.

20:41.180 --> 20:43.180
Let's get one low code platform for building web flows.

20:43.180 --> 20:54.180
And that way we really would really like to see this deployable on the cloud to like Amazon Cognito would be great if you could deploy your gamma project to Cognito.

20:55.180 --> 20:59.180
So we'd like to see interoperable web journeys just like war files.

21:00.180 --> 21:01.180
Yeah, any other questions?

21:02.180 --> 21:03.180
We're probably out of time right.

21:05.180 --> 21:06.180
Five minutes.

21:10.180 --> 21:11.180
Sure.

21:11.180 --> 21:17.180
So do you think the current state of the language to the SLB is finished or are there needs to be extended?

21:18.180 --> 21:19.180
It's two years old.

21:20.180 --> 21:23.180
Okay. So the question is what's the maturity of a gamma? Is it done?

21:24.180 --> 21:27.180
The we've it's about two years old.

21:28.180 --> 21:31.180
So it's still early and I wouldn't say it's finished.

21:32.180 --> 21:40.180
But we are we are using it and and and so and we have a number of pop up projects published this year.

21:41.180 --> 21:43.180
I'm going to plan to do one project per week.

21:44.180 --> 21:50.180
I have a if you follow me on LinkedIn, I have a new episodic called a gamma project of the week where I'm going to feature one project.

21:51.180 --> 21:53.180
So by the end of the year, we'll have about 50 projects.

21:54.180 --> 22:00.180
So it's still new, but it's we think it's usable now, but certainly we're going to keep improving it.

22:00.180 --> 22:18.180
So to get started, you know, you can go to I have stickers, but if you go to glue dot org slash a gamma dash lab, or just go to glue dot org, you'll find it.

22:19.180 --> 22:20.180
You can sign up for free.

22:21.180 --> 22:22.180
A gamma lab is a free developer site.

22:23.180 --> 22:25.180
So, yeah.

22:26.180 --> 22:28.180
So looking forward to seeing some of gamma projects.

22:28.180 --> 22:29.180
Thank you.

