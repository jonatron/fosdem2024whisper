WEBVTT

00:00.000 --> 00:02.060
you

00:30.000 --> 00:32.060
you

01:00.000 --> 01:02.060
you

01:30.000 --> 01:32.060
you

07:30.940 --> 07:32.960
you

07:32.960 --> 08:02.820
many years on porous soil.

08:02.960 --> 08:07.760
is useless and in fact it's dangerous because you may be making decisions that you

08:07.760 --> 08:10.880
technically cannot trust. You don't know the license that you are

08:10.880 --> 08:14.560
making sure that it doesn't get into your production environment. It is there.

08:14.560 --> 08:17.720
So we need to make sure that our S-bombs are uniquely identifiable and

08:17.720 --> 08:20.960
forcible, complete and available.

08:20.960 --> 08:26.280
And now we need to actually figure out how can we build that? How can we build

08:26.280 --> 08:31.040
a system that could give us some... We'll answer some of those questions that we were

08:31.040 --> 08:38.760
talking before. So we came up with this diagram which has five main properties.

08:38.760 --> 08:43.200
Availability, uniqueness, integrity, provenance and generation. It goes all the way

08:43.200 --> 08:47.840
from the life cycle of an S-bomb. So for example, availability, can you make sure

08:47.840 --> 08:52.040
that the S-bomb is there? Can you make sure that the uniqueness? Can you make

08:52.040 --> 08:55.320
sure that it's the one that you're looking for? Integrity hasn't changed. So on and so forth.

08:55.320 --> 08:59.000
And what we're going to be doing now is we're going to go through each one of

08:59.040 --> 09:02.600
those boxes and we're going to be finding some open source tools that you can use

09:02.600 --> 09:08.560
today and how can they play together?

09:08.560 --> 09:16.680
And the first one is attestations. So attestations is just a JSON file.

09:16.680 --> 09:21.240
I'm already simplifying this but somebody will kill me but it's a JSON file that can

09:21.240 --> 09:26.640
have arbitrary information about a software artifact. So if you are building a

09:26.680 --> 09:29.760
container image, you might want to store there how you're building information about the

09:29.760 --> 09:33.720
build system. You might want to know who approved the change. You won't want to

09:33.720 --> 09:39.360
any arbitrary information including obviously the S-bomb. And the second part

09:39.360 --> 09:43.880
that is very important about attestations is that it is authenticated.

09:43.880 --> 09:51.680
And what that means is that it is signed. And by doing that, if we put attestations

09:51.720 --> 09:57.200
in our provenance verification layer, we will basically manage to have S-bombs that

09:57.200 --> 10:04.200
are integrity and provenance verified. So the way that we could do that is by taking

10:04.360 --> 10:08.560
an attestation, wrap the S-bombs inside, plus some additional information about the

10:08.560 --> 10:15.560
context of how the S-bomb was built and sign it. And the nice, the good news are that

10:16.440 --> 10:23.240
there are actually tools today that can help you to build this flow like using

10:23.240 --> 10:28.920
SIGSTOR or in TOTA framework which is the attestation framework. And most recently we

10:28.920 --> 10:36.920
have S-bombs which is this effort to get one step further on how to know how that

10:38.360 --> 10:44.680
S-bomb was crafted and being able to make sure that, yeah, you can trust it.

10:44.720 --> 10:49.120
So we have now the provenance verification we're going to keep going. So at this point

10:49.120 --> 10:55.600
we have this JSON file super, like nice and signed and the S-bomb inside, this is good.

10:55.600 --> 11:02.600
But now we're going to keep going to the distribution side of things. And for that, there is this

11:02.880 --> 11:09.880
old concept that is called Contender Resolute Storage which again, it's a very offensive

11:09.880 --> 11:15.880
way of saying that it is a database where you can retrieve its data by the address of

11:15.880 --> 11:22.880
its content. But something as simple as that will give you integrity and immutability because

11:22.880 --> 11:29.880
you can commit overrides, you can detect that something has changed. And again, we could

11:30.680 --> 11:36.640
technically take one of those Contender Resolute Storage and put it in our distribution layer

11:36.640 --> 11:43.640
that way we can guarantee uniqueness and integrity. And for that, a tool that you might be familiar

11:44.400 --> 11:49.640
with are OCI registries which are all over the place and OCI registries is a good implementation

11:49.640 --> 11:56.640
for Contender Resolute Storage. So again, if we put together the whole picture and we

11:57.640 --> 12:04.640
use six-storey, total and cell-cell, the provenance verification and OCI registry, we will get

12:06.640 --> 12:12.640
some of the materials that you can trust in identity, integrity, and origin. And this

12:12.640 --> 12:15.640
is something that you can build yourself. This is something that you can put together,

12:15.640 --> 12:20.640
you can use cosine and sine, your S-bomb, and a rapid interstation, you can do that,

12:20.640 --> 12:25.640
all that. But now because we're biased, obviously, we're going to talk about a project that we

12:25.640 --> 12:32.640
started that it's an opinionated way of doing that. And it's Chainloop. So Chainloop is,

12:33.640 --> 12:38.640
we call that a metadata vault for super-supply chain. So basically it will take any piece of

12:38.640 --> 12:43.640
evidence, it will wrap it into the stations, it will sign it, and then it will route it to

12:43.640 --> 12:48.640
different locations. You can route it to different OCI registries, S3 buckets, dependency track,

12:48.640 --> 12:55.640
WAC that have been mentioned before, so on and so forth. And Chainloop gives you two additional

12:57.640 --> 13:04.640
things. So the first one, it gives you an evolution of what counter-dressable storage would be, which

13:05.640 --> 13:10.640
we call federated counter-dressable storage. And what it does is create this layer that makes

13:11.640 --> 13:16.640
sure that you can have data distributed across multiple back ends. So you might have five

13:16.640 --> 13:21.640
different OCI registries. You might have S3 buckets, or maybe from the same, or different

13:21.640 --> 13:30.640
organizations. You might be using this to send some of that data to your customers. And the other

13:30.640 --> 13:36.640
thing that it enables is advanced routing for replication. If you have some requirements for

13:36.640 --> 13:41.640
geolocation, for example, we have a user that needs to make sure that some data that gets

13:41.640 --> 13:48.640
generated goes to a back end in Europe because of data policies, so over attention rules. That's

13:48.640 --> 13:55.640
one. And this will give you availability. But the second part is, as mentioned before, it's

13:55.640 --> 14:02.640
collection. How do you make sure that you can reassure that your organization is collecting

14:02.640 --> 14:08.640
this piece of evidence, collecting metadata? And the way that we did that Chainloop is you

14:08.640 --> 14:15.640
can write a, we call it a contract, but it's a declarative statement of the pieces of evidence

14:15.640 --> 14:25.640
that your developers on the left side will need to provide. So if we put everything together, as

14:25.640 --> 14:32.640
you can see, the main pieces in the middle, they're the same. Chainloop doesn't use all these open

14:32.640 --> 14:41.640
source components, but extends on the availability side of things and on the enforcement. And now

14:41.640 --> 14:43.640
it's time for the demo.

14:44.640 --> 14:45.640
I have a microphone.

14:45.640 --> 14:46.640
Yeah.

14:50.640 --> 14:51.640
I'm over here.

14:58.640 --> 14:59.640
Wireless.

15:00.640 --> 15:01.640
Okay.

15:08.640 --> 15:15.640
Okay. So now let's see how we can do it in practice. So what I'm going to show you, I'm going to show

15:15.640 --> 15:24.640
you three demos. The first one is about collecting a cycle in the X and artifact. We are going to wrap

15:25.640 --> 15:34.640
it into that station. We are going to store it in different cloud storages. In this case, it's Azure. And we are

15:34.640 --> 15:43.640
going to send it automatically to dependency track and to Quack. The second demo is about, hey, I want to scan

15:43.640 --> 15:52.640
my, let's say, a jar file for CVEs. But I want to find the S-bomb and I want to find the latest VEX file.

15:52.640 --> 15:59.640
S-bomb may not be generated by the same team, may be generated by some other teams, let's say, by someone who is going

15:59.640 --> 16:07.640
to put it in production. And the VEX file may be generated by, I don't know, the security team in my organization

16:07.640 --> 16:16.640
or someone else who is pushing the application to production. And the last demo is about how can I share

16:16.640 --> 16:26.640
my S-bomb or any metadata or attestations with others. So let's jump to it. First of all, what I would like to show you is,

16:26.640 --> 16:42.640
one sec, can you see my screen? Yes, this is the Chainloop open source project under Apache 2.0 license.

16:42.640 --> 16:52.640
We are going to talk about Chainloop architecture for now. We have CLI and we have a service. So let's assume that right now I'm an

16:52.640 --> 17:06.640
operator or platform team or city office or the OSPO team. And I have Chainloop branding on my site. And I have a few

17:06.640 --> 17:18.640
storages connected and I have dependency track. I'm going to show you how does it look like. So I have a Chainloop, the latest

17:18.640 --> 17:28.640
version of Chainloop branding here. I can see all different backends connected. We are going to talk about the OSCI and the

17:28.640 --> 17:43.640
Azure Blob. I have different integrations. We keep adding new integrations to Chainloop every week. But the main one we are going to

17:43.640 --> 17:53.640
show you today is dependency track. I have one instance of dependency track running at home. And we have GWAC as well, but unfortunately I will

17:53.640 --> 18:10.640
just show you the documentation that we have because I don't have it running. And yes. Now you understand that I have the Chainloop

18:10.640 --> 18:20.640
branding and I have also that contracts in place. So this is my contract. Me as a platform team or as a security team, I expect some

18:20.640 --> 18:33.640
metadata to be pushed to Chainloop and I can modify that contract and I can see how many different teams are following those contracts. And I have

18:33.640 --> 18:45.640
everything ready. I have a token. I will pass the token to developer. And now I'm developer. So the developer, we are building a sample Java

18:45.640 --> 18:55.640
application. It is the demo spring clinic and we are doing pretty well. But we have been asked to integrate with Chainloop and we have been

18:55.640 --> 19:07.640
asked to start sending new metadata. So it was quite easy just because we have a reasonable workflow. Of course at some point we are going to have the

19:07.640 --> 19:15.640
GitHub action. But the reasonable workflow is just fine. We just need the, we call the Chainloop robot account. But we will have more

19:15.640 --> 19:31.640
organization tokens at some point. And I have to specify how to find those artifacts and S-bombs and Chainloop will do everything for me. If you don't use the

19:31.640 --> 19:46.640
workflow, just to show you how the CLI does it. Yes, here. So like our flow, the user experience is following Git flow as well. So you initialize

19:46.640 --> 20:00.640
the station and then you keep adding new artifacts, new evidences to the station. We validate all of them. So we are validating the contract. And then in the end you can even add different

20:00.640 --> 20:15.640
annotations. We didn't talk about annotations here. But we add some kind of annotations and we are pushing if everything is okay to Chainloop. So now imagine that I had my workflow run again with

20:16.640 --> 20:30.640
Chainloop on my project. We pushed all the different artifacts. Yeah, we got notification from Chainloop. Great job. You are making compliance and SecOps teams and

20:30.640 --> 20:52.640
Ospo teams happy. You get some summary of the contract. And yeah, that's it. Like we didn't have to do much on the developer side. Let's get back to the operator side. On the operator side, let me get to my script.

20:53.640 --> 21:08.640
What I want to show you, I want to show you that now we can see all these different runs for the very specific workflow. I will show you the attestation, the envelope and what kind of information we are storing because we are not

21:08.640 --> 21:23.640
storing all the metadata. We are storing everything around. And today in this very specific basic case we are storing just different environment variables provided by GitHub. So let's try to run those commands.

21:23.640 --> 21:52.640
Oh, sorry. Yeah, we are here. Okay, so as you can see we are collecting all information about those workflow runs. So you have some kind of visibility across all these different CI tools that you have across organization.

21:53.640 --> 22:11.640
You have the client envelope. You have in total statement with all information inside. It's not about like we automatically detect the head of the grid repo. We collect some other information about that commit.

22:11.640 --> 22:38.640
Those are environment variables I was talking about. You have annotations and information about the second DX and the artifact. And this is the same, but in more user friendly way. It's also verified because I have the publicly available in this machine and I have the proper environment variable defined and set.

22:38.640 --> 23:06.640
So now what I would like to show you is what if I'm someone else in my work or in my project and the only thing what I know, I know the shot or I have the the the the draft, the output that was provided to me. One nice thing about chain loop is that I can discover things about.

23:09.640 --> 23:28.640
That binary. So chain loop allows you to to to ask questions about. Okay, so I have a jar file or I have a git commit or I have a content image. I will get the we call it software barcode. I will take that hash and I will ask chain loop to provide me with more information.

23:28.640 --> 23:40.640
And now I can see that there are different attestations generated by different teams by different organizations by different people related to the very specific to the very specific.

23:41.640 --> 23:52.640
Container image or jar file in that very specific case so I can see that we have vex registry workflow which is ready to which is adding different vex files for that very specific.

23:53.640 --> 24:18.640
Jar file or other container images or jar files in my organizations. I have the main attestation that's the demo spring. But cleaning PR workflow. I can probably get jar fire from here and as bomb and I have some other the stations. This one is also related to the vex file.

24:19.640 --> 24:20.640
So what I can do.

24:21.640 --> 24:26.640
I can right now get some of the of those attestations and I can even download.

24:28.640 --> 24:32.640
Very specific artifacts just by providing just by providing show.

24:33.640 --> 24:47.640
And that gets me to the next demo. So what can we do about that right like we are storing all these different data we are throwing metadata and s bombs and vex files and everything was related to what we are building a chain loop based on different code.

24:48.640 --> 25:09.640
And I can build a very simple tool and the tool is about scanning for cities. I want to do something different. I want to get a very specific as bomb for my organization that is following very specific conventions.

25:10.640 --> 25:11.640
And I want to find it automatically.

25:13.640 --> 25:22.640
I want to retrieve the latest version of the vex file somehow as well just by knowing the the the hash of that of the jar file and that's what we are doing here.

25:23.640 --> 25:30.640
If you take a look at the of the code of the tool I wrote yesterday sorry it's bash.

25:31.640 --> 25:32.640
It's not go.

25:33.640 --> 25:34.640
We are using the sea lie.

25:36.640 --> 25:41.640
To discover different information about the very specific hash of the jar file.

25:41.640 --> 25:53.640
We are we are getting attestations. We are getting the latest one for a very specific workflows in this case for the most print spring pet cleaning and for vex registry.

25:54.640 --> 26:06.640
And in the end we are running trivy or you can run any other CV scanning tool with that very specific as bomb and Jason and vex file.

26:06.640 --> 26:14.640
And the result is that if you run that trivy with that drop file you will get CV as you can see.

26:18.640 --> 26:19.640
Sorry.

26:20.640 --> 26:21.640
Yeah, yeah, I see.

26:22.640 --> 26:23.640
I'm getting stressed.

26:23.640 --> 26:34.640
There is one there is one there is one there is one CV out here and we are removing it just by applying our vex file.

26:35.640 --> 26:41.640
Just because we understand that for instance this application is run behind the firewall so we are not concerned.

26:42.640 --> 26:46.640
Let me get to the last demo the last demo is about sharing.

26:50.640 --> 27:00.640
Everything like you can you can you can mark workflows as public at this point you can either have something starting organization or you can make it public so our attestations are also shared.

27:01.640 --> 27:07.640
If you go to releases you can you can see that our attestations reports are available.

27:09.640 --> 27:22.640
You can either have the UI but the best part is that you can actually get the the the Jason and you can automate different processes in your organization this way.

27:23.640 --> 27:27.640
Yes, so just just very quickly.

27:28.640 --> 27:29.640
Okay, just just to finish.

27:30.640 --> 27:42.640
Basically the final thoughts is that the the bar in terms of compliance and security has been raised and as one trust is what we think is going to be the next challenge.

27:42.640 --> 27:48.640
I know that there are many challenges on the way on the all the way in the life cycle but you know as one trust is something that we need to start thinking about.

27:49.640 --> 27:59.640
But the good news is that we can start thinking about that we can start building our own you know we can get that head start with open source security tools today and that's that's why we are very excited to be here.

28:00.640 --> 28:11.640
And that's it that you can find us in discord please join and yeah and you like what we do give us a star and thank you for your time if you have any question we might have I'm not sure.

28:18.640 --> 28:23.640
Hi, I'm Olle Johansson.

28:24.640 --> 28:33.640
You set the bar very high in the beginning saying as one trust and then you quickly said something about the public key you already had.

28:33.640 --> 28:34.640
Yeah, you mentioned six doors.

28:34.640 --> 28:37.640
Yeah, for individuals most of the right.

28:37.640 --> 28:48.640
What kind of solution do you see for trusting as well and validating as well as between customer and vendor here.

28:48.640 --> 28:50.640
You didn't really touch.

28:50.640 --> 29:01.640
No, okay, so the question was that we will be talking about trust on the signings of things but then we should have them with the public key and private key and what do we think is going to be there.

29:02.640 --> 29:04.640
I mean that's a very good question.

29:04.640 --> 29:07.640
I mean the current implementation with Chenle piece is you know it's a good implementation of Chenle.

29:07.640 --> 29:19.640
Obviously we have you know killer signings on the on the on the horizon to implement and and work like the entity and all this good stuff right this is basically the nature of the open source project but in terms of customers.

29:19.640 --> 29:31.640
I mean this is tricky because we have we have we have users because we have users that actually more than the press out things and even they're like talking about just give me access to KMS and my old of my vault instance and things like that.

29:31.640 --> 29:42.640
So I mean it's if you have any thoughts the answer is we don't know yet I would say so if we have any thoughts on that I would love to talk to you and hopefully we can shape it in the right way.

29:42.640 --> 29:45.640
Thanks again.

