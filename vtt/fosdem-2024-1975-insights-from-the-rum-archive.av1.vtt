WEBVTT

00:00.000 --> 00:12.040
Oh, last talk of this session is about the RUM archive, which is a data set of anonymized

00:12.040 --> 00:15.040
real user monitoring measurements.

00:15.040 --> 00:19.640
Now I know what some of you are thinking, Robin, if it's a data set, why does it have

00:19.640 --> 00:21.640
a palm tree in the logo?

00:21.640 --> 00:23.400
That doesn't make any sense.

00:23.400 --> 00:24.640
But think about it for a second.

00:24.640 --> 00:28.400
What happens if you go to a palm tree and you shake it?

00:28.400 --> 00:33.000
Something interesting might fall out, like a coconut.

00:33.000 --> 00:35.240
And the same thing happens with the RUM archive.

00:35.240 --> 00:38.920
If you shake it a little bit, something interesting might fall out.

00:38.920 --> 00:43.440
But for both, you need to be a little bit careful.

00:43.440 --> 00:47.960
Because if you're not, the coconut might fall straight on your face, leaving you scarred

00:47.960 --> 00:48.960
for life.

00:48.960 --> 00:53.640
So we need to be a little bit cautious in how we query the RUM archive, and we'll get

00:53.640 --> 00:55.360
to that later.

00:55.360 --> 00:57.960
The first thing I want to explain is what is actually in there.

00:57.960 --> 01:00.280
How do we get the coconuts in there?

01:00.280 --> 01:04.920
So currently, all the data is from the Akamai Ampulse products, which basically means we

01:04.920 --> 01:10.920
have a lot of Akamai customers that have Ampulse, and they let us put a piece of JavaScript

01:10.920 --> 01:12.880
on each of their pages.

01:12.880 --> 01:17.160
So every time a page is loaded, we send what is called a beacon, which contains all the

01:17.160 --> 01:21.160
performance measurements and a lot of other metadata for later analysis.

01:21.160 --> 01:26.600
Now, usually, our customers only see their own data, obviously.

01:26.600 --> 01:29.320
And here, we want to make this more publicly available.

01:29.320 --> 01:31.800
So we have to do a couple of things first.

01:31.800 --> 01:33.560
First of all, we filter the data.

01:33.560 --> 01:37.360
We only do the top 100 customers in terms of traffic.

01:37.360 --> 01:39.360
We anonymize the data.

01:39.360 --> 01:42.240
This includes stripping all of the URLs.

01:42.240 --> 01:47.400
So you won't know which measurement belongs to which site, which is a sad but necessary

01:47.400 --> 01:49.160
operation that we have to do.

01:49.160 --> 01:52.960
And then we further aggregate the data so that many similar measurements are actually

01:52.960 --> 01:57.080
combined into a single histogram for later analysis.

01:57.080 --> 01:58.640
This gives us two data sets.

01:58.640 --> 02:03.240
One, of course, for the page loads, and then one for third-party resources.

02:03.240 --> 02:08.120
These will be things like Google Analytics that are loaded from external URLs by many

02:08.120 --> 02:09.120
different customers.

02:09.120 --> 02:12.040
And so we can also offer some insights on that.

02:12.040 --> 02:16.240
We have most of the performance metrics you would expect, including some others, like

02:16.240 --> 02:17.240
RageClicks.

02:17.240 --> 02:19.640
This is if people got very frustrated.

02:19.640 --> 02:24.520
They start clicking the same area of the screen trying to make it work.

02:24.520 --> 02:28.080
For the third-party resources, we can also show if they were loaded from the cache or

02:28.080 --> 02:29.080
not.

02:29.080 --> 02:30.080
Very interesting.

02:30.080 --> 02:33.100
But crucially, one of the things we try to make the difference in is that we collect

02:33.100 --> 02:38.240
data from all the different browsers on all the different platforms.

02:38.240 --> 02:42.280
And you can, of course, also query on those from the data set as well.

02:42.280 --> 02:46.760
Now, you might be thinking, Robin, sounds fine, but don't we already have this from

02:46.760 --> 02:48.920
other public data sets?

02:49.720 --> 02:52.280
And partially, yes, this is true.

02:52.280 --> 02:57.240
We are blessed with very good web and web performance data sets, but we still feel that there are

02:57.240 --> 03:03.120
some gaps in there, gaps that we hope that the RUM archive might help fill, especially

03:03.120 --> 03:08.800
when it comes to things like cross-browser and real-user monitoring data.

03:08.800 --> 03:13.840
So let's say you're interested now and you say, how do I actually get access to this

03:13.840 --> 03:14.840
data?

03:14.840 --> 03:20.040
The main way is through Google BigQuery, where most of the data is stored.

03:20.040 --> 03:23.880
BigQuery is a very powerful, very flexible platform.

03:23.880 --> 03:26.480
It's sadly not the cheapest.

03:26.480 --> 03:28.680
It does cost you a bit of money.

03:28.680 --> 03:32.600
And even if you're willing to pay, it can take a while until you get useful data out

03:32.600 --> 03:37.840
of this, which is something a colleague of the Mozillaeans here today noticed a while

03:37.840 --> 03:38.840
ago.

03:38.840 --> 03:40.680
The reasoning was sound.

03:40.680 --> 03:47.200
They were trying to look for user agent Firefox on device mobile, expecting to get Firefox

03:47.200 --> 03:48.880
mobile data, obviously.

03:48.880 --> 03:56.440
It doesn't actually work, because in the RUM archive, Firefox is really just Firefox desktop.

03:56.440 --> 04:03.480
If you want mobile, you need Firefox mobile for Android and Firefox iOS for iOS.

04:03.480 --> 04:10.760
This is because we at the RUM archive put stock in consistency above all things.

04:10.760 --> 04:15.720
Now, especially for newer users, going to BigQuery directly is sometimes a bit of a

04:15.720 --> 04:16.880
big hurdle.

04:16.880 --> 04:20.480
So we also have a cheaper way, which we call the RUM insights.

04:20.480 --> 04:24.560
This is basically the team saying, OK, this is what we think most people will want to

04:24.560 --> 04:26.320
know about this data.

04:26.320 --> 04:31.840
We do the queries, and then we have some ready-made visualizations on the website for those as

04:31.840 --> 04:32.840
well.

04:32.840 --> 04:34.920
They also do the access.

04:34.920 --> 04:39.040
Sadly, though, even the RUM insights don't really help much for the Firefox mobile use

04:39.040 --> 04:40.040
case.

04:40.040 --> 04:45.040
As you can see, Firefox in our data set is definitely present on the desktop side.

04:45.040 --> 04:52.840
On the mobile side, none of the variants actually hit the 1% cutoff that we put for

04:52.840 --> 04:54.600
generating these diagrams.

04:54.600 --> 05:02.520
This is one of the many insights we can get from this data set, of course.

05:02.520 --> 05:06.720
Because having a nice coconut is of course all nice and dandy.

05:06.720 --> 05:08.480
You can't really do much with that, right?

05:08.480 --> 05:14.600
What you really want is you want to get to the juicy inside of the coconut, in this case

05:14.600 --> 05:16.120
the coconut milk.

05:16.120 --> 05:21.160
Now, I can hear some of you thinking, you think Robin, there is no such thing as coconut

05:21.160 --> 05:22.160
milk.

05:22.160 --> 05:23.160
Okay?

05:23.160 --> 05:25.100
Coconuts cannot be milked.

05:25.100 --> 05:27.640
They do not have nibbles.

05:27.640 --> 05:30.040
And you would be correct for the latter part, of course.

05:30.040 --> 05:31.800
But there are still ways to get milk out of this.

05:31.800 --> 05:34.000
You know, you could hit it with a machete.

05:34.000 --> 05:39.200
Or if you're a bit more sophisticated, you could hammer a screwdriver into these black

05:39.200 --> 05:40.720
spots there.

05:40.720 --> 05:42.680
You could still get something out of there.

05:42.680 --> 05:48.640
The point is, there are many different ways of getting the milky insights out of the data

05:48.640 --> 05:49.640
nut.

05:49.640 --> 05:52.000
But they don't all give you the same results.

05:52.000 --> 05:57.160
And a good example of this, I found when I first started querying the room archive, I

05:57.160 --> 06:01.240
just wanted to know, you know, roughly mobile versus desktop.

06:01.240 --> 06:02.240
What are we dealing with here?

06:02.240 --> 06:06.600
And when I plotted that out, I actually saw this weird periodic pattern.

06:06.600 --> 06:10.920
You have these bumps and valleys in there, which seem to suggest that people switch

06:10.920 --> 06:15.960
the type of device they use every three months, which of course makes no sense.

06:15.960 --> 06:17.040
Okay?

06:17.040 --> 06:20.480
And anyone who's ever done this kind of analysis already knows what this is.

06:20.480 --> 06:24.560
You know, this is of course just a bit of temporal interference.

06:24.560 --> 06:29.840
Because what I did not want to do was have a separate data point for each and every day

06:29.840 --> 06:32.680
that would be way too expensive in Big Merry, right?

06:32.680 --> 06:36.600
So what I want to do is just have one day per month.

06:36.600 --> 06:41.160
And naive as I was, I chose the first day of every month.

06:41.160 --> 06:44.920
Now this is not always the same day of the week, of course.

06:44.920 --> 06:50.240
This can very easily be a Saturday or a Sunday or a holiday, where you would expect more

06:50.240 --> 06:54.760
people to use mobiles than desktops, of course.

06:54.760 --> 06:56.640
The solution is of course also very simple.

06:57.200 --> 07:00.880
So the first day, we just use the first Tuesday of the month.

07:00.880 --> 07:05.240
Not the Monday, because that's often also still a holiday or a vacation day.

07:05.240 --> 07:08.840
But Tuesday should give us more consistent results.

07:08.840 --> 07:11.800
It's not fully foolproof though, as I found out.

07:12.960 --> 07:15.560
The first of July last year was a Saturday.

07:16.760 --> 07:22.840
So the first Tuesday of July was the fourth of July, the big US holiday.

07:22.840 --> 07:25.840
And that definitely does show up in these metrics.

07:25.840 --> 07:28.800
But this is not just something specific to the RUM archive, and

07:28.800 --> 07:30.920
every temporal data set has this.

07:30.920 --> 07:34.640
But I think it bears repeating because people keep making the same mistakes

07:34.640 --> 07:36.000
there, including me.

07:38.080 --> 07:42.040
Now diving a little bit deeper, looking at the different OSes that we see.

07:42.040 --> 07:45.840
On the desktop side, it's probably somewhat as you might expect.

07:45.840 --> 07:52.720
But on the mobile side, we have a very outsized representation of iOS devices.

07:52.720 --> 07:55.160
At nearly 63%.

07:55.160 --> 07:59.440
And I say outsized, because if you look at the actual sales numbers,

07:59.440 --> 08:03.840
globally, iOS fluctuates between about 15 and 20%.

08:05.160 --> 08:08.520
Even if you look at some of the richer countries, like let's say Australia,

08:08.520 --> 08:10.320
you expect a more 50-50 split.

08:11.600 --> 08:15.720
There are several reasons why iOS is overrepresented in the RUM archive.

08:15.720 --> 08:19.560
One of the main ones is that Akamai, as a company,

08:19.560 --> 08:22.680
is mostly present in the richer Western countries.

08:23.680 --> 08:24.600
Right?

08:24.600 --> 08:29.000
And our customers are mostly from industries like e-commerce, luxury goods,

08:29.000 --> 08:33.720
travel, that also address more richer end users as well,

08:33.720 --> 08:37.600
that are more likely to be on, say, iOS devices.

08:37.600 --> 08:42.360
So there is definitely an ingrained bias in the current RUM archive data set

08:42.360 --> 08:43.800
that you need to be aware of.

08:43.800 --> 08:46.560
But that doesn't mean the data isn't useful, in my opinion.

08:46.560 --> 08:49.800
We can still do much interesting stuff with it.

08:49.800 --> 08:54.000
For example, I think this serves nicely to highlight one of the big problems

08:54.000 --> 08:56.520
I feel we have in web performance right now,

08:56.520 --> 09:02.720
is our maybe somewhat overreliance on the Core Web Vitals and the Google Crux data set.

09:04.320 --> 09:07.960
You might not notice, but on iOS,

09:07.960 --> 09:12.560
you actually have no browser that can give you Core Web Vitals metrics,

09:12.560 --> 09:13.880
not even Chrome.

09:13.880 --> 09:19.560
This is because on iOS, every browser is actually Safari in disguise.

09:20.320 --> 09:23.440
Apple forces you to use the underlying WebKit engine,

09:23.440 --> 09:26.160
which does not support the Core Web Vitals.

09:26.160 --> 09:28.720
And so the more iOS traffic you have,

09:28.720 --> 09:32.200
the bigger your blind spot for those users is going to be

09:32.200 --> 09:36.640
if you only use the Core Web Vitals and the Crux data set.

09:36.640 --> 09:43.240
And I might say, Robin, that's only a problem for the customers represented in your RUM archive.

09:43.240 --> 09:48.000
And I would argue that the RUM archive currently does not maybe represent the global web,

09:48.000 --> 09:52.320
but I do think it's somewhat representative for, you know,

09:52.320 --> 09:54.600
for example, the e-commerce industry,

09:54.600 --> 09:59.360
which is definitely one that we consistently target when we talk about web performance.

09:59.360 --> 10:04.680
So I do think this can lead to interesting insights on that part.

10:05.880 --> 10:07.800
There is a silver lining to all of this.

10:07.800 --> 10:13.760
As you probably know, the EU is trying to force Apple to allow other browsers properly on iOS.

10:13.760 --> 10:17.520
Apple is dealing with this in one of the most disgusting ways ever.

10:17.560 --> 10:18.760
In my opinion.

10:18.760 --> 10:23.440
So I'm not quite sure how much this is actually going to change in practice,

10:23.440 --> 10:27.120
but still it is a step in the right direction.

10:27.120 --> 10:27.840
Okay.

10:27.840 --> 10:29.440
And even if this doesn't happen,

10:29.440 --> 10:32.960
we can still do some cross-browser comparisons

10:32.960 --> 10:38.160
by looking at other metrics that are readily available on all browsers.

10:38.160 --> 10:41.480
And we actually started doing this in the RUM archive,

10:41.480 --> 10:43.600
because we have those metrics, of course.

10:43.600 --> 10:46.560
I had hoped to present them to you today.

10:46.600 --> 10:52.480
But we want to be sure that we are 100% correct in our interpretation of this

10:52.480 --> 10:56.280
before we release any type of summary on that.

10:56.280 --> 11:02.240
So not yet, but soon we are working on this.

11:02.240 --> 11:04.080
I don't want to leave you hanging for today, though.

11:04.080 --> 11:07.760
I do still want to give you something to take home.

11:07.760 --> 11:11.880
And this is because there is a shining ray of light in the darkness.

11:11.880 --> 11:16.040
Because a couple of months ago, Firefox actually announced

11:16.040 --> 11:20.120
that they will now start implementing largest contentful paint.

11:20.120 --> 11:23.400
First Corel Vital available in non-chromium browsers.

11:23.400 --> 11:28.760
And this actually went live in stable Firefox about two weeks ago.

11:28.760 --> 11:33.240
And we already have some of the data in the RUM archive, which I looked at.

11:33.240 --> 11:40.560
And if you compare this, you will see that Firefox is actually faster than Chrome,

11:40.560 --> 11:45.760
sometimes a little bit, and later percentiles significantly faster than Chrome,

11:45.800 --> 11:47.560
for LCP.

11:47.560 --> 11:52.240
Now, what I think this means is that Firefox has won the browser speed wars.

11:52.240 --> 11:56.040
We should all immediately switch to Firefox and dump Chrome.

11:56.040 --> 11:59.920
No, it's much too early for that.

11:59.920 --> 12:03.160
We don't know if this actually means that Firefox is faster,

12:03.160 --> 12:07.360
or if they just use a slightly different algorithm, or they identify different elements,

12:07.360 --> 12:10.480
or it's just a different type of site that Firefox users visit.

12:10.480 --> 12:12.120
We don't know, right?

12:12.120 --> 12:15.680
So don't read too much into these results.

12:15.720 --> 12:18.400
I just wanted to have something to start the discussion,

12:18.400 --> 12:24.280
to start getting people and ties to actually look into what the core reasons for these results are.

12:24.280 --> 12:28.160
But so, useful things for the future.

12:28.160 --> 12:33.440
We're talking about Corel Vital, so you might ask Robin, what about INP coming up?

12:33.440 --> 12:38.000
INP is actually already well supported in the Ampulse products.

12:38.000 --> 12:44.120
So you can see here, this is an INP screenshot from the previous speaker's website, Tim's ScaleMates.

12:44.120 --> 12:47.240
You can see Tim has a ton of work to do.

12:47.240 --> 12:52.040
He claims he has the fastest website in the world, but we can all see the proof that it is not true.

12:52.040 --> 12:55.800
Shame on you, Tim, shame on you.

12:55.800 --> 13:00.560
So INP is in Ampulse, it's just not piped through the Remarkive yet.

13:00.560 --> 13:08.040
We expect this to happen in the coming months, and so we can also start analyzing data for that.

13:08.040 --> 13:13.800
So up until now, I've mostly been talking about the milk in the coconut, right?

13:13.800 --> 13:17.480
But we all know there is something else in the coconut as well.

13:17.480 --> 13:20.760
The flesh, the meat of the coconut.

13:20.760 --> 13:23.160
We rarely eat this directly.

13:23.160 --> 13:32.440
We usually process it into other foods, such as, for example, these delicious coconut cookies.

13:32.440 --> 13:35.000
These are actually kind of a Flemish specialty, I think.

13:35.000 --> 13:36.720
We call these Rotskis.

13:36.720 --> 13:40.040
I think there are amazing, amazing cookies.

13:40.040 --> 13:46.200
Now one thing you might see is that there are several individual cookies in this box, right?

13:46.200 --> 13:49.280
But they all look kind of the same.

13:49.280 --> 13:51.120
They're all quite similar.

13:51.120 --> 13:58.520
And sadly, that is also something that we see for the third-party resources that we have in the...

13:58.520 --> 14:02.680
He's not human.

14:02.680 --> 14:06.480
Kind of human.

14:06.520 --> 14:11.080
So third-party resources that we have in the Remarkive.

14:11.080 --> 14:16.160
Because if you start looking into this, a lot of them are from Google, as you might think.

14:16.160 --> 14:22.240
Most of them are ads, or tracking, or analytics, right?

14:22.240 --> 14:29.760
Most of these are things that the typical end user probably would like not to see loaded on the pages they visit.

14:29.760 --> 14:35.280
So it's a little bit ironic that we have to go all the way down to number 98

14:35.280 --> 14:41.520
to find the first sign of something that is created to try and mediate some of this,

14:41.520 --> 14:48.960
which is the very first cookie consent manager, the GDPR backwash, let's say.

14:48.960 --> 14:50.720
I say try to deal with all of this.

14:50.720 --> 14:52.960
I'm a bit skeptical that it actually works.

14:52.960 --> 14:57.840
But I mean, the fact that you have 100 entries before the first cookie consent manager,

14:57.840 --> 15:05.000
I think is a nice one-slide summary of some of the things that are wrong with the web today.

15:05.040 --> 15:10.560
Now, this was a bit of a downer, so I also wanted to end on a better note.

15:10.560 --> 15:17.040
So I went through the whole list, and almost near at the end at number 498,

15:17.040 --> 15:25.400
I find something that we all were hoping to see, which was, of course, the jQuery mouse wheel plugin.

15:25.400 --> 15:32.200
With 13,000 downloads every single day, half of that is from Tim's site, as we just heard.

15:32.200 --> 15:33.200
And then the other one's there.

15:33.200 --> 15:35.000
So jQuery is still going strong.

15:35.000 --> 15:37.680
Let's hear it for jQuery.

15:37.680 --> 15:41.600
As I said before, we also have some other stats on these third-party resources.

15:41.600 --> 15:44.080
For example, how often they're loaded from cache.

15:44.080 --> 15:45.720
And at the median, this is actually quite low.

15:45.720 --> 15:47.680
It's only about 2%.

15:47.680 --> 15:51.920
I definitely think that the browser cache partitioning plays into this.

15:51.920 --> 15:54.280
It gets better to higher percentiles.

15:54.280 --> 15:57.720
But so most of these third parties are not actually loaded from cache.

15:57.720 --> 16:02.040
This might not be a huge problem, though, because most of them are also quite small.

16:02.040 --> 16:06.160
Most of these are tracking pixels that are just a few hundred bytes in size,

16:06.160 --> 16:08.640
though there are definitely outliers.

16:08.640 --> 16:14.760
So one of the bigger ones that I found was a Google Ads JavaScript

16:14.760 --> 16:20.000
that was 131 kilobytes compressed.

16:20.000 --> 16:21.560
That's massive.

16:21.560 --> 16:26.880
And that was loaded over 260,000 times in a single day.

16:26.960 --> 16:34.560
So a very big impact just on that one external resource.

16:34.560 --> 16:37.600
Now we had a lot of different resources, a lot of different cookies.

16:37.600 --> 16:40.920
Another thing that we have a lot of is browser versions.

16:40.920 --> 16:47.040
Because browsers a few years ago, they started updating themselves fairly regularly.

16:47.040 --> 16:50.920
So for example, Chrome releases a new version almost every month.

16:50.920 --> 16:54.120
And the question there was, how long does it take for most users to switch to the new

16:54.120 --> 16:55.120
version?

16:55.120 --> 16:56.120
That's actually quite good.

16:56.360 --> 17:03.800
Because here is that within two weeks, within the month, over 75% of Chrome users are on

17:03.800 --> 17:05.560
the latest version.

17:05.560 --> 17:08.280
And most of the remaining ones are on the previous version.

17:08.280 --> 17:13.800
There is a very short long tail of versions present in the dataset.

17:13.800 --> 17:18.960
This is very similar for Firefox, which also very aggressively updates.

17:18.960 --> 17:22.960
But here we do see one interesting data point, which is the blue one here, which starts in

17:22.960 --> 17:24.680
August.

17:24.680 --> 17:27.760
And even in December still had about 13% usage.

17:27.760 --> 17:32.880
And it turns out this is something they call the extended support release, which I think

17:32.880 --> 17:36.000
is a long-term support version there.

17:36.000 --> 17:38.640
Probably mostly used by companies, I would imagine.

17:38.640 --> 17:41.600
So you do have a bit of a longer tail there.

17:41.600 --> 17:47.560
But other than that, Firefox is also a very cutting edge, I would say.

17:47.560 --> 17:51.840
This is of course contrasted with Safari.

17:51.840 --> 17:56.520
It's not an entirely fair comparison, because with Safari we don't have the minor version

17:56.520 --> 17:58.640
numbers like with the others.

17:58.640 --> 18:01.880
But here we still see the global trends, right?

18:01.880 --> 18:04.640
The latest version of Safari is 17.

18:04.640 --> 18:13.480
Even after two months, didn't even reach 50% of the Apple product population.

18:13.480 --> 18:18.800
And if you look even version 15, which was released over a year ago, is still at about

18:18.800 --> 18:21.800
14% of all page lists.

18:21.800 --> 18:27.640
So clearly in Safari you do have a lot of older versions, up to a year and even older

18:27.640 --> 18:29.400
present in your dataset.

18:29.400 --> 18:34.320
You can't really rely on newer features being readily available there.

18:34.320 --> 18:38.360
A very fun one there was Facebook.

18:38.360 --> 18:43.240
They have a ton of versions, often multiple per week.

18:43.240 --> 18:48.560
And their clients apparently also update to the new versions very, very quickly.

18:48.560 --> 18:53.560
Meaning that I often only had one data point per version, which messed with my graphing

18:53.560 --> 18:54.760
library.

18:54.760 --> 19:02.280
It tries to draw a line, finds only one point, and then decides to just draw nothing at all.

19:02.280 --> 19:06.520
Now interestingly, this is exactly what would happen if you would leave me alone with these

19:06.520 --> 19:08.280
cookies.

19:08.280 --> 19:12.240
You would know that there was supposed to be something there, but there's no physical

19:12.240 --> 19:17.760
evidence of it whatsoever left.

19:17.760 --> 19:20.160
So a couple of other things.

19:20.160 --> 19:24.080
So this is again from Tim's website.

19:24.080 --> 19:29.800
So Tim has his own very extensive ROM setup, as you by now all know.

19:29.800 --> 19:34.840
But even for people with their own ROM, I think it's useful to have the ROM archive next to

19:34.840 --> 19:38.680
that so you can compare both of these.

19:38.680 --> 19:42.680
For example, this is for the navigation types dimension.

19:42.680 --> 19:44.360
The biggest part is normal navigations.

19:44.360 --> 19:46.640
You click a link, you go to the sites.

19:46.640 --> 19:49.040
You can also have back forward navigations.

19:49.040 --> 19:53.440
People press the back button, which should be much faster because it should still be

19:53.440 --> 19:55.800
somewhere in the browser loaded.

19:55.800 --> 19:57.400
And they have things like reload.

19:57.400 --> 20:00.640
So people actually hard reloading the page.

20:00.640 --> 20:06.320
Now for the back forward navigations, you want to see as much of that as possible.

20:06.320 --> 20:09.360
Because people, that is the faster that you can get.

20:09.360 --> 20:13.560
You can see here that Tim has clearly very well optimized for this use case because he

20:13.560 --> 20:21.200
has a lot more people doing back forward navigations than the averages that we see in the ROM archive.

20:21.200 --> 20:22.440
So good work, Tim.

20:22.440 --> 20:23.960
The same goes for reloads.

20:23.960 --> 20:27.200
Reloads you actually want as few of those as possible.

20:27.200 --> 20:31.640
Because when people reload, it usually means something has been going terribly wrong and

20:31.640 --> 20:35.920
they're doing the have you tried to turn it off and on again, Mattage, to try and fix

20:35.920 --> 20:36.920
it.

20:36.920 --> 20:39.840
So Tim is only at about 1% there.

20:39.840 --> 20:46.400
Well that is much lower than what you see in the aggregated data there as well.

20:46.400 --> 20:51.120
So it can be useful even if you have ROM to compare to see where might we improve or where

20:51.120 --> 20:53.840
are we actually doing better than others.

20:53.840 --> 20:59.320
Or let's say you want to move into a new region or a new country that you don't have ROM

20:59.320 --> 21:00.320
for yet.

21:00.320 --> 21:06.520
You can try and get some ideas about what the situation is there before you actually do.

21:06.520 --> 21:10.120
And so to thank Tim for everything that he does for the web performance community, I

21:10.120 --> 21:13.920
actually brought him a little gift.

21:13.920 --> 21:17.240
It's a palm tree scale model, Tim.

21:17.240 --> 21:19.240
I don't really know what to do with these.

21:19.240 --> 21:21.600
Maybe you can have one of your tanks drive them over or something.

21:21.600 --> 21:22.600
I don't know.

21:22.600 --> 21:24.600
But so thank you, Tim.

21:24.600 --> 21:27.600
Thank you for that.

21:27.600 --> 21:36.080
Another thing I really wanted to look at was single page apps.

21:36.080 --> 21:37.960
I have to admit something.

21:37.960 --> 21:38.960
I am still on Twitter.

21:38.960 --> 21:41.840
I still call it Twitter as well.

21:41.840 --> 21:46.360
And if you're on Twitter, sometimes it seems like everything is react.

21:46.360 --> 21:47.840
Nothing else exists on the web anymore.

21:47.840 --> 21:48.840
All of it is react.

21:48.840 --> 21:53.000
All of it is single page apps, which I really hope is not the case.

21:53.720 --> 21:59.400
But when I looked at this, I was somewhat surprised because more than 40% of all page

21:59.400 --> 22:05.520
loads in the ROM archive are actually single page apps, which is much more than I would

22:05.520 --> 22:06.520
have thought.

22:06.520 --> 22:10.160
Now, for web performance people, this is actually good news.

22:10.160 --> 22:13.600
This means we have a lot of job security down the line.

22:13.600 --> 22:14.600
So that's good.

22:14.600 --> 22:15.840
It's a little bit weird.

22:15.840 --> 22:20.400
And another very interesting point here is the difference between hard and soft.

22:20.400 --> 22:25.960
So hard means you load the initial load of the single page app, the spinner that we saw

22:25.960 --> 22:26.960
before.

22:26.960 --> 22:28.760
That's basically the hard.

22:28.760 --> 22:33.120
The argument being you download more, it takes a longer time to load the very first

22:33.120 --> 22:35.560
time, but after that everything is much faster.

22:35.560 --> 22:38.960
That's usually the selling point for an SPA.

22:38.960 --> 22:44.880
But if you would take this at face value, you would say for every hard load, there was

22:44.880 --> 22:52.960
only one soft load after that, where you would expect a lot more soft loads and hard loads.

22:52.960 --> 22:58.120
And if that is actually the case, then that whole argument for SPAs doesn't actually hold

22:58.120 --> 22:59.120
through at all.

22:59.120 --> 23:02.200
Now, that's not what I'm saying.

23:02.200 --> 23:03.200
We need more research.

23:03.200 --> 23:05.600
I need to look deeper into the data.

23:05.600 --> 23:09.560
There could be other explanations for this.

23:09.560 --> 23:13.000
But interesting to think about.

23:13.000 --> 23:15.200
I definitely did not expect these results.

23:15.200 --> 23:19.800
And I would love to compare these with other datasets there as well.

23:19.800 --> 23:20.800
I'm running out of time.

23:20.800 --> 23:27.400
I had a little bit about HTTP3 there as well, including some things where I got very angry.

23:27.400 --> 23:33.520
But let's skip that because I really want to get to this final page.

23:33.520 --> 23:37.520
Because we all know that coconuts are amazing.

23:37.520 --> 23:40.160
They are exceptionally delicious.

23:40.160 --> 23:43.160
You can make a lot of different products for them.

23:43.160 --> 23:50.080
But you can make them even better if you combine the coconuts with something else.

23:50.080 --> 23:56.720
For example, delicious Belgian chocolate.

23:56.720 --> 24:01.640
I think you can get into a very much a 1 plus 1 equals 3 situation with this.

24:01.640 --> 24:06.560
In case you haven't tried this Belgian coconut chocolate, it is to die for.

24:06.560 --> 24:07.560
Definitely try it out.

24:07.960 --> 24:13.720
What I'm trying to say is that currently the RUM archive only has Akamai impulse data.

24:13.720 --> 24:20.880
We are very much open to other RUM vendors or even large sites with a big RUM presence

24:20.880 --> 24:26.720
contributing data to the dataset as well to hopefully help us remove some of the biases

24:26.720 --> 24:31.680
that we've seen to get a better picture of the actual global web in the RUM archive

24:31.680 --> 24:33.800
there as well.

24:33.800 --> 24:37.840
Some of you might think, sounds interesting Robin, but this is going to be a lot of work.

24:37.840 --> 24:38.840
Isn't it?

24:38.840 --> 24:42.440
No, no, it's actually super easy, barely an inconvenience.

24:42.440 --> 24:48.160
Because if you look at the SQL query that we use to put impulse into the RUM archive,

24:48.160 --> 24:52.320
that is only 1.6K lines of SQL.

24:52.320 --> 24:54.600
Only 1.6K lines.

24:54.600 --> 24:59.480
Very simple, two hour stops and the data is in.

24:59.480 --> 25:01.600
Well I guess the message is clear.

25:01.600 --> 25:05.440
The RUM archive is now open for business.

25:05.440 --> 25:11.480
What I talked about today is really just the highlights, the top what we can do.

25:11.480 --> 25:15.440
We are literally just started to shift the coconut milk there.

25:15.440 --> 25:17.520
So if you want to help out with that, please come.

25:17.520 --> 25:21.720
If you have any questions, if you want us to run some queries for you, if you want

25:21.720 --> 25:25.200
to help with the analysis, please let us know.

25:25.200 --> 25:34.000
If by now you are just really, really hungry, I would say please come and try out some of

25:34.000 --> 25:39.080
the excellent chocolates and cookies, because there's no way I'm taking them home with me

25:39.080 --> 25:40.080
today.

25:40.080 --> 25:41.640
Okay, so please, thank you.

