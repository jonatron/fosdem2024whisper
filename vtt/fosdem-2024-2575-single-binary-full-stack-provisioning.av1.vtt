WEBVTT

00:00.000 --> 00:09.000
Check. Can you hear me?

00:09.000 --> 00:11.000
Yeah.

00:11.000 --> 00:19.000
Service announcements. If you have glasses that look like this and you don't have them anymore, I found them.

00:19.000 --> 00:24.000
I checked they are not with cameras.

00:24.000 --> 00:26.000
Hi everyone.

00:26.000 --> 00:31.000
Check. Check. Is it loud? Can you hear me in the back?

00:31.000 --> 00:35.000
The HDMI audio doesn't work so I don't have any warm-up music for you.

00:35.000 --> 00:39.000
But thank you everyone for coming. Hi. I'll start in time.

00:39.000 --> 00:49.000
No, perfect. I'm just standing here. I'm not being angry at you.

00:49.000 --> 00:51.000
Who has the lights?

00:51.000 --> 00:54.000
Is there a lights control that we can turn off?

00:54.000 --> 00:58.000
Can you put in the slides and see?

00:58.000 --> 01:04.000
In the back. Can you see the slides if not raise your hands?

01:04.000 --> 01:09.000
Perfect.

01:09.000 --> 01:12.000
You're awake now, right?

01:12.000 --> 01:15.000
We have fire alarms in this building.

01:15.000 --> 01:17.000
All right. I'm going to get going.

01:17.000 --> 01:19.000
Still two minutes.

01:19.000 --> 01:22.000
Two minutes. Oh, all right.

01:22.000 --> 01:25.000
For those who need to follow them, we have to start on time because of video recording.

01:25.000 --> 01:35.000
So that's why we are punctual every time, every day.

01:35.000 --> 01:38.000
I got an assistant just for picking out the best stickers.

01:38.000 --> 01:47.000
That's the one thing you need at follow them is an assistant just to get you stickers while you're working.

01:47.000 --> 01:51.000
It keeps us sane.

01:51.000 --> 01:59.000
The Go community is 50% for the amazing language, 20% for the amazing performance and 100% for the stickers.

02:17.000 --> 02:34.000
All right. Hi, everyone.

02:34.000 --> 02:38.000
Hello. Can I quickly introduce you before you start? I know you have much to say. Sorry.

02:38.000 --> 02:39.000
Sure.

02:39.000 --> 02:41.000
I'd like to welcome James to the stage.

02:41.000 --> 02:47.000
James got this talk because he's every single bus word on my bingo, which is full stack provisioning, DSL and single binaries.

02:47.000 --> 02:50.000
And he will explain all what that means right now.

02:50.000 --> 02:51.000
Go ahead.

02:51.000 --> 02:57.000
Hi, everyone.

02:57.000 --> 03:01.000
So I'm James. I'm going to talk pretty quickly.

03:01.000 --> 03:03.000
And so don't be afraid and turn this down.

03:03.000 --> 03:05.000
Can we turn this down slightly?

03:05.000 --> 03:06.000
Maybe.

03:06.000 --> 03:08.000
We'll see how it goes.

03:08.000 --> 03:13.000
Yeah. So I'm going to talk really fast because I want to show you some real live demos and I'm going to be basically at 30 minutes.

03:13.000 --> 03:16.000
So it's going to go really fast, but all the stuff I talk about is online.

03:16.000 --> 03:20.000
And if you have questions, I'll probably not have any time, but maybe at the end.

03:20.000 --> 03:23.000
So I work on this tool called MGMT. This is some stuff I won't show you.

03:23.000 --> 03:26.000
I'm a hacker. I write a blog called the technical blog of James.

03:26.000 --> 03:28.000
Who's seen my blog? Just raise your hand.

03:28.000 --> 03:31.000
If not, just raise my hand. Your hand. So I seem really popular.

03:31.000 --> 03:33.000
All right. Thank you.

03:33.000 --> 03:37.000
And like, do we want bad information?

03:37.000 --> 03:42.000
Do we? Come on. Louder.

03:42.000 --> 03:48.000
I don't know about you, but I really don't. This is my nope guy.

03:48.000 --> 03:51.000
You might have seen this. It gives me a chance to breathe as I'm getting my talk.

03:51.000 --> 03:55.000
I'm going to be typing, so I'm going to be sitting just out of the way.

03:55.000 --> 03:59.000
So I have this project called MGMT. Do you want to see a quick demo?

03:59.000 --> 04:01.000
What?

04:01.000 --> 04:03.000
All right. All right. Okay.

04:03.000 --> 04:06.000
Really quickly because I don't have a time to give you a full explanation,

04:06.000 --> 04:10.000
but basically I'm running it here over on the left and MGMT is running.

04:10.000 --> 04:14.000
And then over here on the right, I've just asked it to create one file.

04:14.000 --> 04:19.000
So I can cat hello world, right? This file that it has created.

04:19.000 --> 04:21.000
But the cool thing is MGMT is watching in real time.

04:21.000 --> 04:25.000
So if I remove the file and cat the file comes right back, right?

04:25.000 --> 04:28.000
It's always watching in real time, doing that kind of thing.

04:28.000 --> 04:32.000
In fact, it's so fast, I can even remove the file.

04:32.000 --> 04:36.000
It's kind of my old demo. Oops, if I could type and cat the file.

04:36.000 --> 04:40.000
And it always is that fast that it just instantly can fix the file.

04:40.000 --> 04:43.000
And you can even do crazy things like this.

04:43.000 --> 04:48.000
And basically ask it to watch as fast as you can.

04:48.000 --> 04:52.000
And it will even, you can see MGMT on the left here is spinning really fast, fixing the file.

04:52.000 --> 04:56.000
And that's kind of boring because we can do much more.

04:56.000 --> 04:58.000
This is just the base.

04:58.000 --> 05:00.000
What we really do is we have this language called an FRP.

05:00.000 --> 05:04.000
It's a reactive language that has streams of values that go into the resources.

05:04.000 --> 05:09.000
And when anything changes, it kind of rebuilds the world.

05:09.000 --> 05:12.000
And I want to show you some real things it can do.

05:12.000 --> 05:14.000
So no more abstract stuff.

05:14.000 --> 05:19.000
So I want to actually, I want to provision, I brought this little kind of fat raspberry pi kind of computer.

05:19.000 --> 05:23.000
And I'm going to show you a building and then I'm going to go back in my slides while it's provisioning

05:23.000 --> 05:26.000
and show you a little bit about the tool and how it works.

05:26.000 --> 05:28.000
Does that sound fair?

05:28.000 --> 05:30.000
All right. Thank you.

05:30.000 --> 05:34.000
So here's my demo and just just a quick thing to show you.

05:34.000 --> 05:37.000
So I'm just actually run this here first.

05:37.000 --> 05:39.000
So I'm just going to start it up here.

05:39.000 --> 05:40.000
It's not perfect.

05:40.000 --> 05:43.000
Like my type unification algorithm implementation is really slow.

05:43.000 --> 05:44.000
So you'll see it.

05:44.000 --> 05:45.000
It takes a moment.

05:45.000 --> 05:51.000
But basically what happens is suppose you had this, this code at the top printf math dot 42.

05:51.000 --> 05:54.000
It's just a function that returns the value of 42.

05:54.000 --> 05:56.000
We actually build these graphs.

05:56.000 --> 06:03.000
You can see that the values come in and the data flows along these graphs and build these big trees.

06:03.000 --> 06:10.000
And in fact, for even small programs, they'll look like this or like this, these enormous graphs and they all just track

06:10.000 --> 06:12.000
what's being sent and what's not and so on.

06:12.000 --> 06:14.000
And so I'm not going to show you this demo.

06:14.000 --> 06:16.000
I'm going to show you this demo.

06:16.000 --> 06:19.000
So let's say you want to just provision a machine from scratch.

06:19.000 --> 06:24.000
In my language that I've built called MCL, you just put the following code now.

06:24.000 --> 06:29.000
It's all that you need is a single binary that runs this, this code and has everything you need.

06:29.000 --> 06:35.000
You basically just set like your interface on your laptop, the IP of your laptop.

06:35.000 --> 06:36.000
You put a repo.

06:36.000 --> 06:40.000
So his definition for a fedora repo and what mirror to get.

06:40.000 --> 06:42.000
And then you just define the actual machine.

06:42.000 --> 06:45.000
So host name one, the MAC address and you're done.

06:45.000 --> 06:46.000
And so let's go over here.

06:46.000 --> 06:49.000
So MGMT is just about done running here.

06:49.000 --> 06:51.000
It's just starting up some stuff.

06:51.000 --> 06:55.000
It's actually, I've pre-cached a whole mirror on my laptop.

06:55.000 --> 06:58.000
So that's just like the entire fedora repo.

06:58.000 --> 07:00.000
So you have the packages there.

07:00.000 --> 07:02.000
So we're going to have to wait for the internet.

07:02.000 --> 07:04.000
And then the machine here, just so you can see what's going on.

07:04.000 --> 07:10.000
I actually have a little HDMI capture card and right now the machine is off because I haven't plugged it in yet,

07:10.000 --> 07:13.000
but it will just show you on this screen what's going on.

07:13.000 --> 07:14.000
Does that make sense?

07:14.000 --> 07:16.000
Do you want to see this?

07:16.000 --> 07:20.000
It's going to be a little bit boring to watch a machine provision, but I kind of like this kind of thing.

07:20.000 --> 07:27.000
So anyway, so this is starting up and just, I'm just going to kill these slides for a second.

07:27.000 --> 07:30.000
What I'm going to do now, so it's starting up an inside MGMT.

07:30.000 --> 07:35.000
There's resources which embed a TFTP, DHCP and all these other servers.

07:35.000 --> 07:41.000
So let's find the power part here and plug this in.

07:41.000 --> 07:44.000
So that's plugged in.

07:44.000 --> 07:47.000
And I just forgot one thing for my bag.

07:47.000 --> 07:51.000
Some notes.

07:51.000 --> 07:56.000
Yeah, so here's the machine and it's actually starting up now.

07:56.000 --> 07:57.000
You'll see here.

07:57.000 --> 07:59.000
And on the left, we're just going to see what happens.

07:59.000 --> 08:03.000
So as events come in, so you can see right away the DHCP server said,

08:03.000 --> 08:07.000
Oh, I see someone talking to me on DHCP.

08:07.000 --> 08:08.000
Can I have an IP address?

08:08.000 --> 08:09.000
I'm not touching anything.

08:09.000 --> 08:16.000
The machine is now automatically requesting the like the stage one UFI stuff.

08:16.000 --> 08:17.000
This is a pixie boot.

08:17.000 --> 08:19.000
So it's a network boot type of thing.

08:19.000 --> 08:21.000
There's a TFTP server that passes those files.

08:21.000 --> 08:24.000
And in a second, it's going to start doing that.

08:24.000 --> 08:27.000
And you can see right now it's pulling down this file.

08:27.000 --> 08:29.000
Do you recognize these two?

08:29.000 --> 08:32.000
What are those?

08:32.000 --> 08:36.000
It's basically Linux and the initial root file system boot this stuff off.

08:36.000 --> 08:38.000
And MGMT is doing that.

08:38.000 --> 08:40.000
I'm not doing anything at all.

08:40.000 --> 08:43.000
And you'll see it's going to slowly kind of boot.

08:43.000 --> 08:46.000
And just to get a little bit more information about what's going on,

08:46.000 --> 08:53.000
the script I wrote in MCL has a little bit of extra information that it hides.

08:53.000 --> 08:59.000
So, see if I can, oh, there we go.

08:59.000 --> 09:03.000
Nope.

09:03.000 --> 09:08.000
Okay, so right here, I have a little file.

09:08.000 --> 09:15.000
Let me just fix one thing.

09:15.000 --> 09:17.000
I forget which is the right one.

09:17.000 --> 09:19.000
There we go.

09:19.000 --> 09:22.000
So I just have a little thing that just shows what the state is.

09:22.000 --> 09:26.000
So the computer is set to be provisioned and the state is not provisioned, right?

09:26.000 --> 09:28.000
Because we haven't provisioned it yet.

09:28.000 --> 09:31.000
And if you see it starting up, it actually is just loaded the kickstart file.

09:31.000 --> 09:33.000
Does anyone know what kickstart files?

09:33.000 --> 09:35.000
Anyone doesn't?

09:35.000 --> 09:36.000
Raise your hand.

09:36.000 --> 09:37.000
Don't feel silly.

09:37.000 --> 09:42.000
A kickstart file is just a definition file that's built into RPM and like Red Hat, Fedora,

09:42.000 --> 09:45.000
Flavor kind of OSs that just says what should we do?

09:45.000 --> 09:47.000
Like how should I provision the disks?

09:47.000 --> 09:48.000
All that kind of stuff.

09:48.000 --> 09:50.000
And so it's doing that thing.

09:50.000 --> 09:54.000
And I can actually even zoom in here if you want to see what's going on.

09:54.000 --> 09:56.000
Oops, now it's gone.

09:56.000 --> 09:57.000
Where'd it go?

09:57.000 --> 10:00.000
There it is.

10:00.000 --> 10:02.000
Just move over.

10:02.000 --> 10:03.000
Oops.

10:03.000 --> 10:10.000
What's going on with my little media player today?

10:10.000 --> 10:14.000
Where is it?

10:14.000 --> 10:15.000
There we go.

10:15.000 --> 10:17.000
So you can kind of see what's going on.

10:17.000 --> 10:19.000
So this is actually Anaconda itself running.

10:19.000 --> 10:21.000
It's checking the storage configuration.

10:21.000 --> 10:25.000
And in a moment, it'll do some stuff, which we'll see.

10:25.000 --> 10:30.000
And then while I'm doing that, I can even show you.

10:30.000 --> 10:35.000
So this is just me doing a random W get to the web server that's built into this single

10:35.000 --> 10:36.000
Golang binary.

10:36.000 --> 10:40.000
And so if you want to see what happens, it actually is just generated.

10:40.000 --> 10:42.000
It has a template built into the script.

10:42.000 --> 10:44.000
All this stuff is just generated.

10:44.000 --> 10:50.000
And what it's going to do is it's going to do the basic install, install a few packages,

10:50.000 --> 10:51.000
whatever you want.

10:51.000 --> 10:55.000
And at the very end, there's a post hook, which is part of kickstart.

10:55.000 --> 10:59.000
So at the very end, when it's done, just before the machine reboots, it will actually run some

10:59.000 --> 11:00.000
command.

11:00.000 --> 11:05.000
And in our case, it runs a little flag, a little W get that talks back to the web server to

11:05.000 --> 11:08.000
send a secret message that says I'm done.

11:08.000 --> 11:12.000
And so that's going to just do its thing.

11:12.000 --> 11:15.000
And storage is a little slow.

11:15.000 --> 11:19.000
It's just a little low budget machine.

11:19.000 --> 11:23.000
Just to show you what's going on, I'll do, oh, here we go.

11:23.000 --> 11:24.000
So there's storage.

11:24.000 --> 11:25.000
It's running its thing.

11:25.000 --> 11:27.000
All automatic.

11:27.000 --> 11:31.000
If anyone has their laptop, by the way, that wants to be provisioned, I can set up your

11:31.000 --> 11:32.000
laptop for you.

11:32.000 --> 11:35.000
It'll wipe it, but it'll be good.

11:35.000 --> 11:37.000
And you'll have a really good fedora machine.

11:37.000 --> 11:39.000
I kind of like fedora.

11:39.000 --> 11:41.000
It works.

11:41.000 --> 11:42.000
It's very modern, upstream.

11:42.000 --> 11:45.000
Easy to build these kinds of things in.

11:45.000 --> 11:47.000
And let's scroll down here a little bit here.

11:47.000 --> 11:49.000
You can see what it's doing.

11:49.000 --> 11:51.000
So here it's building the partition.

11:51.000 --> 11:55.000
And right now, if you look over here, this is MGMT.

11:55.000 --> 11:57.000
All those packages are downloading.

11:57.000 --> 12:02.000
So if you're ever curious about exactly what packages are requested over the network when

12:02.000 --> 12:05.000
you install an OS, you have exact logs.

12:05.000 --> 12:08.000
In fact, it was requesting all these files I'd never heard of.

12:08.000 --> 12:10.000
And it's kind of interesting to see how machines work.

12:10.000 --> 12:16.000
So with this embedded TFTP, DHCP server, all these pieces, you know exactly what's going on.

12:16.000 --> 12:20.000
And you can also see weird hardware requesting weird things.

12:20.000 --> 12:25.000
So there's the standard like what a pixie boot is supposed to request over the network.

12:25.000 --> 12:28.000
And then when you look, it actually does some weird things that you might not know about.

12:28.000 --> 12:33.000
Probably because some customer had some weird setup that wanted some firmware thing.

12:33.000 --> 12:34.000
I don't know exactly.

12:34.000 --> 12:36.000
So it's installing all the files.

12:36.000 --> 12:37.000
Hi, come on in.

12:37.000 --> 12:39.000
You're missing all the fun.

12:39.000 --> 12:44.000
And yeah, let's just go look at a few slides while it's doing its thing.

12:44.000 --> 12:48.000
In fact, if you want to be really nerdy and look at some code.

12:49.000 --> 12:52.000
I never know how well this goes.

12:52.000 --> 12:54.000
Is that too small for you to see?

12:54.000 --> 13:02.000
So this in so just I don't want to give you specifics about the code because that's not important.

13:02.000 --> 13:10.000
But the entire provisioner, this entire provisioning tool with the lines and comments and whatever is like 500 lines of MCL.

13:10.000 --> 13:17.000
And so the realization I had some time back when I was doing puppet stuff was that if we had the right language,

13:17.000 --> 13:21.000
and we had the right engine and runtime all implemented in Golang,

13:21.000 --> 13:24.000
we would actually have a new way of building tools.

13:24.000 --> 13:28.000
Now I'm not here trying to convince you that we should use my provisioning tool.

13:28.000 --> 13:29.000
I think you should.

13:29.000 --> 13:32.000
I think it's better than most provisioning tools out there.

13:32.000 --> 13:38.000
But the real thing I want to teach you about is that this is a new way to build whatever tool you want.

13:38.000 --> 13:43.000
And because it has all these real time events, it's very easy to glue all sorts of useful pieces together,

13:43.000 --> 13:48.000
whether it's automating a distributed Cef cluster, whether it's single provisioning.

13:48.000 --> 13:55.000
But like for me, like how many times have you all installed a Linux distro somewhere with like the USB key?

13:55.000 --> 13:58.000
Like be honest, everyone here, right?

13:58.000 --> 14:02.000
But the idea now you download this one binary, Golang makes that super easy.

14:02.000 --> 14:10.000
You run it, you just give it a Mac address and you just plug the ethernet cable from your laptop port into the machine you're provisioning.

14:10.000 --> 14:14.000
Or if you want, you could plug it into a switch and plug in a bunch of machines.

14:14.000 --> 14:16.000
I think that's pretty easy, no?

14:16.000 --> 14:19.000
I don't know. I think so.

14:19.000 --> 14:21.000
But yeah.

14:21.000 --> 14:24.000
So it's just installing all those packages.

14:24.000 --> 14:29.000
And let's just go back here and see.

14:29.000 --> 14:35.000
So yeah, so this is all the code it takes.

14:35.000 --> 14:36.000
Now here's the cool thing.

14:36.000 --> 14:41.000
So as I was saying kind of briefly at the beginning, I'll have to look online if you want a more fleshed out definition.

14:41.000 --> 14:44.000
Variables are streams of data.

14:44.000 --> 14:50.000
And so this base class here, you basically include this code as hostname one.

14:50.000 --> 14:55.000
And then there's a hostname one variable and it has fields.

14:55.000 --> 14:56.000
So provisioned.

14:56.000 --> 15:00.000
So what actually happens is this bottom chunk of code is sitting there just waiting.

15:00.000 --> 15:03.000
It's waiting until the provisioning happens.

15:03.000 --> 15:09.000
And then when the provisioning is done, this variable, which was previously false, turns to true.

15:09.000 --> 15:12.000
And that means that this block of code will declaratively execute.

15:12.000 --> 15:15.000
So you can do these kind of stream things that are very easy.

15:15.000 --> 15:26.000
And in this little file that we're pulling here, we just pulled this file and it's going to basically change the contents from that to provisioned.

15:26.000 --> 15:29.000
This is just some screenshots for fun.

15:29.000 --> 15:36.000
It works on all sorts of sketchy old machines like this one and so on.

15:36.000 --> 15:40.000
Just a few thoughts while we're waiting for this to run.

15:40.000 --> 15:45.000
These FRP languages, these reactive languages, you probably have only seen them in the web.

15:45.000 --> 15:50.000
Like all these web UI people use these languages because you just change something and then the elements update.

15:50.000 --> 15:55.000
I don't really know much about them, but that's really where they're used almost everywhere.

15:55.000 --> 16:00.000
In the 70s, they used to actually be used or were done as a proof of concept to control helicopters.

16:00.000 --> 16:02.000
So they can be very, very fast.

16:02.000 --> 16:10.000
And for me, realizing that FRP was a solution to a totally different problem that's not UI based was exciting for me.

16:10.000 --> 16:13.000
And there's so many cool things that you might not realize.

16:13.000 --> 16:15.000
All the variables have events.

16:15.000 --> 16:20.000
So if you're debugging something, you can just point to a variable, have it be displayed in a file,

16:20.000 --> 16:23.000
and you can watch it change as your program executes.

16:23.000 --> 16:26.000
Real-time live debugging of variables.

16:26.000 --> 16:27.000
Very cool.

16:27.000 --> 16:29.000
I use this all the time.

16:29.000 --> 16:30.000
No, I don't use it all the time.

16:30.000 --> 16:33.000
I should use it all the time, but yeah.

16:33.000 --> 16:38.000
This demo has a local mirror, but you know, you could do this off the internet too.

16:38.000 --> 16:39.000
All sorts of other cool things.

16:39.000 --> 16:42.000
500 lines of code.

16:42.000 --> 16:47.000
Just for curiosity, what provisioning tools do you all use today?

16:47.000 --> 16:48.000
Pulumi.

16:48.000 --> 16:51.000
Like all these tools, like how long did it take you to set them up?

16:51.000 --> 16:56.000
You need a DHP server, you need a TFTP server, you need an HTTP server to do pixie booting.

16:56.000 --> 17:00.000
Like I know those people that just, you know, use the cloud to provision their thing,

17:00.000 --> 17:03.000
but like if we want to really control our stack and control our provisioning,

17:03.000 --> 17:05.000
I think it's kind of important.

17:05.000 --> 17:07.000
A few things.

17:07.000 --> 17:09.000
The tool is not finished.

17:09.000 --> 17:11.000
MGMT, my tool, is not finished.

17:11.000 --> 17:17.000
The provisioning tool, which is one tool I've built with MGMT, is just one of those things.

17:17.000 --> 17:22.000
If you're good at programming and Golang, I desperately need more contributors who are smarter than me.

17:22.000 --> 17:27.000
I think I have the overall design, but some of the nitty-gritty little things to get them better and perfect.

17:27.000 --> 17:30.000
My type unification performance is really bad.

17:30.000 --> 17:35.000
It's like a, I'm sure, a very suboptimal, like, end to the power of end kind of algorithm.

17:35.000 --> 17:37.000
It's not that bad, but it feels bad.

17:37.000 --> 17:41.000
I still make, like, Golang concurrency bugs.

17:41.000 --> 17:43.000
I guess we all do, right?

17:43.000 --> 17:46.000
And I'm slowly killing one at a time, but if you're good at that,

17:46.000 --> 17:53.000
if you're good at lexing and parsing and, like, error messages to make my parser not be so hard to understand,

17:53.000 --> 17:54.000
that would be great.

17:54.000 --> 17:58.000
And writing new tools and all sorts of other cool things like that.

17:58.000 --> 18:01.000
I'm just a guy doing this because I believe in this project.

18:01.000 --> 18:03.000
I've been doing it for a while.

18:03.000 --> 18:05.000
It's kind of getting ready to be production ready.

18:05.000 --> 18:09.000
I think now it's finally really usable, but I don't know how to do this.

18:09.000 --> 18:11.000
Like, I don't want to make it proprietary.

18:11.000 --> 18:16.000
And so my next latest idea is the MGMT partner program.

18:16.000 --> 18:18.000
So you sign up for free.

18:18.000 --> 18:22.000
I have, like, a Google form, and I'm going to send you newsletters if you're interested.

18:22.000 --> 18:28.000
And if you have a company and you want to sponsor, that would be kind of really cool.

18:28.000 --> 18:34.000
And, yeah, if you want to go to this link, you can do that.

18:34.000 --> 18:42.000
Bitly MGMT-partner-program, like tell your companies, pay $100 per year,

18:42.000 --> 18:47.000
and I'll send you stuff and send you new tools, or free, if you really want.

18:47.000 --> 18:49.000
And, yeah, we'll come back to that.

18:49.000 --> 18:52.000
So let's just go back to this provisioning thing.

18:52.000 --> 18:55.000
So it's still coming along here.

18:55.000 --> 18:57.000
I'm going to just make this a little bit nicer to see.

18:57.000 --> 19:02.000
So that's, it's just finishing the package installation right now.

19:02.000 --> 19:06.000
The good news is I'll probably have another time for a live demo if you want another one.

19:06.000 --> 19:11.000
And we can see the machine is still not provisioned, still running away here.

19:11.000 --> 19:16.000
Quickly, while this is happening, does anyone have any quick questions, like really good questions?

19:16.000 --> 19:18.000
Scream it out, and I'll repeat it.

19:18.000 --> 19:27.000
I'm not sure if I see any questions, but I see that you were using just Dora for serving the CD-card.

19:27.000 --> 19:28.000
Tell me.

19:28.000 --> 19:32.000
I'm not familiar with the tool, so probably some of the documentation is something less.

19:32.000 --> 19:36.000
Since you were here, I can ask you, does it support other distros?

19:36.000 --> 19:38.000
Yeah, so at the moment, so I've built this provisioning tool.

19:38.000 --> 19:39.000
Can you repeat the question?

19:39.000 --> 19:41.000
Yeah, yep, I'm going to.

19:41.000 --> 19:44.000
So I've built this tool that just supports Fedora at the moment.

19:44.000 --> 19:49.000
And yes, you could definitely, in this MCL code, add like, if, if this, whatever.

19:49.000 --> 19:55.000
I haven't done all those if statements because, bless you, I'm just trying to test the minimally viable thing.

19:55.000 --> 20:01.000
But basically the goal is to add more distros when there's other people that want to do the work, right?

20:01.000 --> 20:03.000
I don't want to do the work for everyone else.

20:03.000 --> 20:04.000
Supposed to collaborate on it.

20:04.000 --> 20:08.000
So yeah, and actually right now here, it's just finishing off the configuring.

20:08.000 --> 20:10.000
The whole demo takes about 20 minutes.

20:10.000 --> 20:14.000
So I think we're about four or five minutes away.

20:14.000 --> 20:17.000
The last thing it does is checking all these packages.

20:17.000 --> 20:20.000
It's installing the bootloader.

20:20.000 --> 20:21.000
Let's just go over here.

20:21.000 --> 20:24.000
Look at that.

20:25.000 --> 20:27.000
Creating the users.

20:27.000 --> 20:29.000
This will ramfs.

20:29.000 --> 20:35.000
And then you'll see here in a moment, MGMT is going to wake up.

20:35.000 --> 20:40.000
And tell everyone what's going on.

20:40.000 --> 20:44.000
I was kind of a system in the original life.

20:44.000 --> 20:47.000
And I would look at machines doing this a lot.

20:47.000 --> 20:49.000
I was an early cobbler user.

20:49.000 --> 20:50.000
I don't know.

20:50.000 --> 20:51.000
Does anyone ever use cobbler?

20:51.000 --> 20:53.000
Like back in the day.

20:53.000 --> 20:55.000
And the thing is cobbler took so long to set up.

20:55.000 --> 20:59.000
I had to set up all these different pieces and get all these templates right.

20:59.000 --> 21:01.000
And it was kind of hard to do.

21:01.000 --> 21:04.000
And so after cobbler, I got into puppet.

21:04.000 --> 21:06.000
So I only use puppet.

21:06.000 --> 21:07.000
I did a lot of puppet.

21:07.000 --> 21:11.000
I have like old blog posts about all the fancy puppet stuff I was doing.

21:11.000 --> 21:14.000
And I was doing all these crazy puppet hacks.

21:14.000 --> 21:20.000
And then I realized one day that like all of these hacks should just be built into one tool, but not hacks.

21:20.000 --> 21:22.000
And then I started working on MGMT.

21:22.000 --> 21:29.000
Because the puppet folks just didn't think they were going to re-architect their core engine and language.

21:29.000 --> 21:38.000
And it was literally all of those lessons that probably happened over 10 years ago that taught me what I wanted to build.

21:38.000 --> 21:45.000
And I've been waiting to build the provisioning tool as one of the first examples of what MGMT could really do for a long time.

21:45.000 --> 21:48.000
And the real question I have, okay, so look at that.

21:48.000 --> 21:50.000
So I just ran the post-installation scripts.

21:50.000 --> 21:54.000
You can see here it got this URL, so action done, blah, blah, blah.

21:54.000 --> 21:56.000
Got flag equals true.

21:56.000 --> 22:03.000
And if you watch this here, this text file, I'm just pulling the text file.

22:03.000 --> 22:04.000
Why the text file?

22:04.000 --> 22:08.000
Because we're just declaratively putting some state into a text file.

22:08.000 --> 22:11.000
And MGMT will know when that changes.

22:11.000 --> 22:14.000
And why do we want to actually catch the state?

22:14.000 --> 22:19.000
Because when we know that it's done, MGMT is going to change a variable.

22:19.000 --> 22:21.000
The code will automatically update.

22:21.000 --> 22:28.000
And then when the machine reboots, it's not going to boot back into the provisioner again.

22:28.000 --> 22:30.000
Does that make sense?

22:30.000 --> 22:32.000
If it's working.

22:35.000 --> 22:37.000
Should be working.

22:38.000 --> 22:40.000
Maybe it's shy.

22:45.000 --> 22:51.000
Good point.

23:01.000 --> 23:05.000
Maybe it's not actually pulling that through.

23:07.000 --> 23:09.000
It's booted up.

23:10.000 --> 23:13.000
The flag should propagate.

23:14.000 --> 23:16.000
Let's see.

23:24.000 --> 23:27.000
It should boot up in a sec.

23:31.000 --> 23:36.000
So the annoying thing dealing with all these machines is they have all these weird kind of firmware,

23:36.000 --> 23:39.000
buggy things and timeouts and things like that.

23:39.000 --> 23:41.000
And here's one of them.

23:41.000 --> 23:45.000
You have to wait for quite a while for the pixie boots to timeout.

23:45.000 --> 23:47.000
Obviously this is a...

23:47.000 --> 23:49.000
So there's Fedora booting.

23:49.000 --> 23:57.000
And if we go here, in a moment, we'll be able to log into this machine.

24:03.000 --> 24:04.000
Not yet.

24:04.000 --> 24:06.000
Still loading.

24:10.000 --> 24:11.000
Still loading.

24:11.000 --> 24:13.000
Oh, I'm plugged in that work.

24:13.000 --> 24:15.000
For a sec.

24:19.000 --> 24:21.000
Did I ruin it?

24:22.000 --> 24:23.000
There we go.

24:23.000 --> 24:27.000
So logged in and the password is password.

24:27.000 --> 24:28.000
Don't tell anybody.

24:28.000 --> 24:30.000
And now we can do something destructive.

24:30.000 --> 24:32.000
Who wants to mess up this machine?

24:36.000 --> 24:37.000
True?

24:37.000 --> 24:38.000
Is this bad?

24:38.000 --> 24:40.000
Is that necessary?

24:40.000 --> 24:41.000
I don't know.

24:41.000 --> 24:43.000
We can delete DevNull.

24:45.000 --> 24:47.000
That's not good.

24:47.000 --> 24:49.000
What do you want to run?

24:49.000 --> 24:50.000
No one's adventurous.

24:50.000 --> 24:52.000
Anyways, you get the idea.

24:52.000 --> 24:55.000
So that's the provisioning tool.

24:57.000 --> 25:00.000
Yeah, do you want to see another quick demo or two?

25:00.000 --> 25:02.000
Only some of you do.

25:02.000 --> 25:04.000
Do the rest of you want to see another quick demo or two?

25:04.000 --> 25:05.000
Yeah.

25:05.000 --> 25:09.000
I'll just do a kind of a classic demo here.

25:09.000 --> 25:10.000
Oops.

25:16.000 --> 25:25.000
Just to show you, I'm going to over here start up MGMT.

25:25.000 --> 25:30.000
And the code that I'm running, is this working?

25:30.000 --> 25:32.000
I think it should be working.

25:32.000 --> 25:39.000
Just to show you what's going on, I promised about streams of stuff.

25:39.000 --> 25:41.000
I'll plug this.

25:41.000 --> 25:43.000
Can you see this OK in the back?

25:43.000 --> 25:44.000
How's that?

25:44.000 --> 25:48.000
So everything is a stream of values.

25:48.000 --> 25:51.000
So I have this function datetime.now.

25:51.000 --> 25:57.000
And it is literally the number of seconds since the epoch.

25:57.000 --> 26:01.000
And so it turns out that this is a function which happens to update every second.

26:01.000 --> 26:03.000
Because time is always moving forward.

26:03.000 --> 26:06.000
Other things like this multiplication are static.

26:06.000 --> 26:08.000
And you have all these different event streams.

26:08.000 --> 26:09.000
System load.

26:09.000 --> 26:10.000
Here's another one.

26:10.000 --> 26:12.000
System load down here.

26:12.000 --> 26:17.000
And for fun, I even added a view meter, which is actually sampling my actual laptop microphone.

26:17.000 --> 26:22.000
And so you just take all these values, combine them into this big template down here.

26:22.000 --> 26:26.000
And over here, I'm printing those out.

26:26.000 --> 26:33.000
So if I actually pull this file, see if this is working.

26:33.000 --> 26:37.000
You can see, I'm just pulling the file over here on your right.

26:37.000 --> 26:44.000
And if you look, you can see the time's changing, because it just reruns the graph every time something updates.

26:44.000 --> 26:47.000
The system load itself on my laptop, you'll see changes.

26:47.000 --> 26:52.000
And my little view meter, if I make noise, you can see it goes up.

26:52.000 --> 26:54.000
If my microphone is up loud enough.

26:54.000 --> 26:56.000
You get the idea, right?

26:56.000 --> 26:57.000
And all this is open source.

26:57.000 --> 26:58.000
You can all try this online.

26:58.000 --> 27:06.000
And the point is that you can now kind of start thinking about building your infrastructure in a way that you just describe the state.

27:06.000 --> 27:14.000
Today's state, the error scenarios, basically write a load balancer in software all very easily in this simple language.

27:14.000 --> 27:17.000
And then run it, and it will take care of things.

27:17.000 --> 27:23.000
So there's more material about this online, but that was just roughly to show you how it works.

27:24.000 --> 27:26.000
I'll kill that.

27:26.000 --> 27:31.000
Really quickly up to the top, because I got a few minutes left.

27:34.000 --> 27:42.000
So we have the core engine itself has all these resources.

27:42.000 --> 27:47.000
Those are the things that do work, like files, virtual machines, DHCP servers, so on.

27:47.000 --> 27:48.000
Those are all built in.

27:48.000 --> 27:54.000
And then there's this language, which is that FRP of values that creates graphs of resources and runs them.

27:54.000 --> 27:56.000
We run in parallel, we run in event driven.

27:56.000 --> 28:02.000
I didn't talk so much about some of the Golang nitty gritties, but Golang has been an absolutely great language for this.

28:02.000 --> 28:10.000
Because we do all this stuff very quickly in parallel, very, very fast, very easy to build this one binary with everything contained.

28:10.000 --> 28:15.000
And there's a lot of great libraries, bless you, that make it possible.

28:15.000 --> 28:19.000
So we leverage etcd, for example, which is also built in Golang and so on.

28:19.000 --> 28:22.000
We've got all sorts of different resources for managing things.

28:22.000 --> 28:23.000
Bless you.

28:23.000 --> 28:29.000
And yeah, lots of stuff about this is online already.

28:29.000 --> 28:33.000
Just quickly down at the bottom here.

28:33.000 --> 28:34.000
Future work.

28:34.000 --> 28:38.000
Who's like a really skilled or adventurous Golang programmer that wants to help out?

28:38.000 --> 28:40.000
Like if you've got skills, don't be shy.

28:40.000 --> 28:42.000
Ping me.

28:42.000 --> 28:49.000
This silly partner program thing, if you want to start using this, your company played around or just on your personal projects.

28:49.000 --> 28:52.000
Let's just recap a few things.

28:52.000 --> 28:53.000
He's just recapping his pen.

28:53.000 --> 28:56.000
That's the best joke I've got for the end here.

28:56.000 --> 29:02.000
I started a matrix channel because IRC is kind of dying and no one's there.

29:02.000 --> 29:07.000
We don't have a mailing list anymore because Red Hat used to host it and then they killed all the mailing lists.

29:07.000 --> 29:13.000
So if you are someone who hosts a reliable mailing list and wants to host our project, that would be great.

29:13.000 --> 29:15.000
There's a bunch of links online.

29:15.000 --> 29:18.000
So I'm purple idea on the internet all over places.

29:18.000 --> 29:19.000
So don't be shy.

29:19.000 --> 29:20.000
Feel free to ping me.

29:20.000 --> 29:26.000
If you're going to put in the time and you want to improve your Golang skills and so on, don't be shy.

29:26.000 --> 29:29.000
Ask me and I'll help you review your patches and so on.

29:29.000 --> 29:31.000
Yes, I'm someone's probably annoyed that I keep saying Golang.

29:31.000 --> 29:34.000
I just find it so confusing to say go all the time.

29:34.000 --> 29:36.000
It confuses my brain and when other people say it,

29:36.000 --> 29:38.000
it confuses me to hear what they're saying.

29:38.000 --> 29:40.000
So I know the language is called go.

29:40.000 --> 29:43.000
I just try to be less ambiguous.

29:43.000 --> 29:47.000
It turns out I'm not the only one, but my apologies if I've upset someone.

29:47.000 --> 29:52.000
There's a great conference in Ghent, which is right after FOSSTEM.

29:52.000 --> 29:56.000
And I'm going to be giving a slightly longer talk and a workshop,

29:56.000 --> 29:58.000
a talk on Monday workshop on Wednesday.

29:58.000 --> 30:00.000
So if you want to come by, it's free.

30:00.000 --> 30:02.000
Although we do ask you to sign up.

30:02.000 --> 30:04.000
It's a big six, seven, eight hundred person conference.

30:04.000 --> 30:07.000
So not huge like FOSSTEM, but still pretty big.

30:07.000 --> 30:10.000
And I have got some stickers if anyone would like a sticker

30:10.000 --> 30:12.000
and they're actually going to use it.

30:12.000 --> 30:14.000
So, yeah.

30:14.000 --> 30:16.000
Does anyone have a question or two?

30:16.000 --> 30:18.000
Yeah, go ahead.

30:18.000 --> 30:19.000
Scream it out.

30:19.000 --> 30:23.000
We're a lot about provisioning, but what about configuration management

30:23.000 --> 30:25.000
after something is provisioned?

30:25.000 --> 30:26.000
Absolutely.

30:26.000 --> 30:29.000
So the question is like what about config management after provisioning?

30:29.000 --> 30:31.000
And we absolutely do config management.

30:31.000 --> 30:35.000
My realization was that the standard way we talk about config management

30:35.000 --> 30:37.000
meant only this narrow thing.

30:37.000 --> 30:41.000
And I really believe that config management, the way I see it,

30:41.000 --> 30:43.000
is actually a more broad topic.

30:43.000 --> 30:46.000
And with the right tool, you can actually squeeze forward

30:46.000 --> 30:51.000
and do provisioning as part of your config management process.

30:51.000 --> 30:53.000
Do the actual configuring of the machine.

30:53.000 --> 30:57.000
So at that machine at the very end, we definitely can kick off MGMT

30:57.000 --> 31:00.000
and run itself and keep doing stuff there.

31:00.000 --> 31:02.000
That absolutely can happen.

31:02.000 --> 31:04.000
And then further, some people talk about orchestration.

31:04.000 --> 31:07.000
I don't like orchestration because orchestration is centralized.

31:07.000 --> 31:10.000
But we do what some people are calling, I think it's a lame word,

31:10.000 --> 31:12.000
but choreography.

31:12.000 --> 31:16.000
So this MCL language allows you to write distributed algorithms

31:16.000 --> 31:19.000
that run on more than one machine at the same time

31:19.000 --> 31:22.000
and they coordinate for various checkpoints and other things.

31:22.000 --> 31:26.000
It's really very cool, but definitely out of the scope for today's talk.

31:26.000 --> 31:28.000
So yeah, good question.

31:28.000 --> 31:30.000
Yeah, go ahead.

31:30.000 --> 31:33.000
I see an article about the distribution of topology.

31:33.000 --> 31:35.000
I'm not sure what's the...

31:35.000 --> 31:39.000
Yeah, the question is how does the distributed topology work?

31:39.000 --> 31:42.000
It's a longer story, but long story short, you write the MCL code.

31:42.000 --> 31:47.000
It gets pushed to every host in the cluster with EtsyD

31:47.000 --> 31:50.000
and they all run that separate algorithm, but some variables are different.

31:50.000 --> 31:53.000
So host name variable will be different per machine and so on.

31:53.000 --> 31:57.000
And they can use those slight differences to run slightly different codebaths

31:57.000 --> 31:59.000
in a way that they work together.

31:59.000 --> 32:03.000
And it's pretty cool, but I'm, you know, again, biased.

32:03.000 --> 32:05.000
Yeah, any more quick questions?

32:05.000 --> 32:08.000
I got about 30 seconds.

32:08.000 --> 32:10.000
Yes, no. Yeah, go ahead.

32:10.000 --> 32:15.000
Do you have a live version of MGMT doing post-provisioning of business

32:15.000 --> 32:17.000
or do you have a system?

32:17.000 --> 32:20.000
Yeah, so I use it personally for stuff.

32:20.000 --> 32:26.000
I run a few low-budget system-in jobs for some local businesses and stuff like that.

32:26.000 --> 32:29.000
But yeah, it's not publicly documented.

32:29.000 --> 32:31.000
It's just sort of, I use it.

32:31.000 --> 32:33.000
I've started using it very recently.

32:33.000 --> 32:35.000
But yeah, good question.

32:35.000 --> 32:38.000
And I think, so my goal right now is to have more people start using it

32:38.000 --> 32:40.000
and being early testers of real-world stuff.

32:40.000 --> 32:46.000
So if you're interested, please ping me and hopefully get you along with MGMT.

32:46.000 --> 32:47.000
Yeah?

32:47.000 --> 32:48.000
Thank you very much.

32:48.000 --> 32:49.000
Round of applause.

32:56.000 --> 32:57.000
Thank you.

