WEBVTT

00:00.000 --> 00:20.320
Thank you so much, the organizers and everybody here today.

00:20.320 --> 00:22.560
This is such a dream.

00:22.560 --> 00:28.560
Before I get into some things though, I wanted to dedicate just like the next 30 seconds

00:28.560 --> 00:33.280
right now to my best friend that passed in August.

00:33.280 --> 00:36.040
Many of you know her, Chris Nova.

00:36.040 --> 00:44.200
She is a prolific open source engineer, alpinist, hacker and past Fosdome speaker.

00:44.200 --> 00:48.440
What you're seeing on the screen right now is a photo of hers when she summited Mount

00:48.440 --> 00:53.240
Rainier several years ago.

00:53.240 --> 01:01.400
What I just wanted to say is that I hope we can always continue her memories here.

01:01.400 --> 01:06.720
With that said, I'm Paris Pittman.

01:06.720 --> 01:12.360
I'm a recovering Kubernetes maintainer.

01:12.360 --> 01:16.120
These days I hang out with the Swift programming language community and I sit on the Swift

01:16.120 --> 01:17.720
Core team.

01:17.720 --> 01:21.760
If you hear the twang in my o's, that's my hometown of Baltimore, Maryland.

01:21.760 --> 01:24.600
I sit in Seattle these days.

01:24.600 --> 01:28.800
So hello from Pacific Coast time and my brain still.

01:28.800 --> 01:33.240
I've been focused on committee management and governance of open source projects for

01:33.240 --> 01:37.960
quite a long time and I'm so happy to be here.

01:37.960 --> 01:47.400
The word cloud on the screen is a key part of my talk and my biography.

01:47.400 --> 01:54.880
It represents examples of roles, titles, groups and project organization that make up our

01:54.880 --> 01:58.000
open source communities today.

01:58.000 --> 01:59.960
I'm not going to fib.

01:59.960 --> 02:04.200
I've had a lot of very undefined hats in my life.

02:04.200 --> 02:06.840
These are some of the defined ones.

02:06.840 --> 02:12.640
Our maintainers today, if you sat in the talk that Kara just did, our maintainers today

02:12.640 --> 02:17.120
have tons of hats that they have to wear.

02:17.120 --> 02:21.200
At the end of the day, how can we help reduce these?

02:21.200 --> 02:26.880
Organizational design could definitely play a part but of course it doesn't play into

02:26.880 --> 02:28.680
all of our woes today.

02:28.680 --> 02:31.240
I'm not going to hit on anything funding related.

02:31.240 --> 02:36.720
It's quite funny how we were paired up on the schedule today, carried out all cash.

02:36.720 --> 02:38.640
I'm doing all humans.

02:38.640 --> 02:43.440
So welcome to the human piece.

02:43.440 --> 02:50.520
So in this open source world, if you have any kind of participatory goals with a project,

02:50.520 --> 02:58.880
there's elements that you need to plan for with and around when architecting roles, groups

02:58.880 --> 03:01.720
and processes for sustainability.

03:01.720 --> 03:06.840
The secret sauce to community lies in how you interpret and implement the elements.

03:06.840 --> 03:09.120
Let's go through those.

03:09.120 --> 03:12.400
Goals you have them.

03:12.400 --> 03:15.560
Lives collaboration.

03:15.560 --> 03:19.040
Distributed decision making.

03:19.040 --> 03:20.920
Transparency.

03:20.920 --> 03:23.120
And community engagement.

03:23.120 --> 03:26.960
Pull requests accepted.

03:26.960 --> 03:34.040
But now life has presented us with new elements that we need to design for and around.

03:34.040 --> 03:40.680
We have decades of open source community stories that we can look to to formulate new elements

03:40.680 --> 03:43.440
that can help support the maintainer.

03:43.440 --> 03:46.640
I'm sure you've heard a few of these, right?

03:46.640 --> 03:54.720
First one, you know a couple of maintainers that are probably masquerading as moderators.

03:54.720 --> 04:00.040
You probably know some who are tied up with code of conduct incidents.

04:00.040 --> 04:04.000
You've heard the infamous toxic community.

04:04.000 --> 04:10.160
What about that open source project that you know that has amazing engineering and no documentation?

04:11.160 --> 04:16.320
Or what if you know the engineering project where the maintainers are really trying to

04:16.320 --> 04:21.080
do their best to be the best documentarians that they can be but they just can't?

04:21.080 --> 04:22.080
Right?

04:22.080 --> 04:24.120
Same thing goes with website and branding.

04:24.120 --> 04:29.960
At the end of the day today, in order to market a project, you need to have a website and branding.

04:29.960 --> 04:36.880
So that means you as a maintainer are also going to need to put a hat on for website dev and designer.

04:37.880 --> 04:40.880
Another famous story.

04:40.880 --> 04:42.880
You're a product of your own success.

04:42.880 --> 04:43.880
Hooray!

04:43.880 --> 04:45.880
We've heard so many of those this week.

04:45.880 --> 04:46.880
Or weekend rather.

04:46.880 --> 04:48.880
It feels like a week, right?

04:48.880 --> 04:49.880
Hooray!

04:49.880 --> 04:54.880
But boo because now the workload is so absolutely not manageable for you.

04:57.880 --> 04:59.880
And yes, the next one.

04:59.880 --> 05:03.880
The never-ending quest for contributors to help out.

05:03.880 --> 05:08.880
Or for you to turn your users into steady maintainers.

05:08.880 --> 05:14.880
And that just really falls into this bucket that I call contributor turnover.

05:14.880 --> 05:23.880
And in a white paper, speaking of contributor turnover, in a white paper that I read from Carnegie Mellon,

05:23.880 --> 05:25.880
titled Why Do People Stop Flossing?

05:25.880 --> 05:28.880
That is, Why Do People Stop Contributing to Open Source?

05:28.880 --> 05:38.880
Quote, prior work has shown that the turnover rate of a project profoundly affects its survival probability and code quality.

05:38.880 --> 05:47.880
And in the same paper, another quote, 80% of projects fail due to contributor turnover.

05:48.880 --> 05:55.880
So, community management is clearly the missing element for organizational design today.

05:55.880 --> 06:02.880
If contributor turnover is that much of a metric for not having a lot of success.

06:02.880 --> 06:05.880
You've heard it themed in the stories too.

06:05.880 --> 06:08.880
Someone needs to do this work.

06:08.880 --> 06:10.880
We can't be everything to everyone.

06:10.880 --> 06:16.880
So how can we delegate this via roles, groups, and processes?

06:17.880 --> 06:23.880
When I have these conversations a lot with maintainers, because I do, that's my job.

06:23.880 --> 06:27.880
My question to them is, do you want to do this forever?

06:27.880 --> 06:30.880
Is this what you always want to do?

06:30.880 --> 06:37.880
This being 15 plus hats, or things that you don't want to do, or even things that you don't have skills in?

06:37.880 --> 06:44.880
Hilariously enough, this screenshot from Macedon literally came to me yesterday.

06:44.880 --> 06:46.880
It's such a great summary.

06:46.880 --> 06:52.880
This individual is saying that they need social media skills in order to promote their thing.

06:52.880 --> 06:55.880
And they just don't have that.

06:55.880 --> 06:57.880
And what is that?

06:57.880 --> 07:01.880
And what is this when I say, do you really want to do this forever?

07:01.880 --> 07:06.880
That's creating, maintaining, moderating mailing lists, chat platforms, forums,

07:06.880 --> 07:12.880
recruiting and onboarding new contributors, that's their documentation, their workflows, their processes.

07:12.880 --> 07:16.880
Also keeping your current contributors and maintainers.

07:16.880 --> 07:24.880
Also GitHub administration, website creation, mentoring, holy moly, y'all.

07:24.880 --> 07:26.880
That's a lot.

07:26.880 --> 07:38.880
So, first thing, maybe you should define a role that could be successful for you, which is community manager.

07:38.880 --> 07:42.880
This does not need to be someone who does community management as a profession.

07:42.880 --> 07:46.880
I know tons of engineers who wear a community manager hat.

07:46.880 --> 07:47.880
They love it.

07:47.880 --> 07:50.880
They have the skills and they're passionate for it.

07:50.880 --> 07:58.880
Because at the end of the day, that's all you need to shift the weight around from the maintainer.

07:58.880 --> 08:00.880
And implementation in the wild.

08:00.880 --> 08:02.880
And that's what I'm talking about.

08:02.880 --> 08:09.880
Dapper, a distributed application run time has a community manager role description posted in their community repo.

08:09.880 --> 08:15.880
It starts with writing down some responsibilities and posting it somewhere to be seen.

08:15.880 --> 08:20.880
That's your mailing list, your social media accounts, your issue backlog.

08:20.880 --> 08:23.880
The role can be iterated as code.

08:23.880 --> 08:26.880
That's not something that I hear a lot from maintainers.

08:26.880 --> 08:29.880
Maintainers are really pretty fearful about this.

08:30.880 --> 08:36.880
But ironically enough, you're not fearful about putting half-baked code out there.

08:36.880 --> 08:41.880
But you're okay with just going without.

08:41.880 --> 08:43.880
And let's not go without.

08:43.880 --> 08:45.880
You can iterate on this.

08:45.880 --> 08:51.880
It doesn't have to be the end state.

08:51.880 --> 08:53.880
So we talked about that.

08:53.880 --> 08:57.880
I just let loose with this one role that you should have, right?

08:57.880 --> 08:59.880
This community manager role.

08:59.880 --> 09:04.880
What are the other roles in open source though?

09:04.880 --> 09:06.880
This is it.

09:06.880 --> 09:08.880
That's what we got.

09:08.880 --> 09:16.880
Contributor and maintainer are two of the most common forms of organizational design in open source, no matter the size of the project.

09:16.880 --> 09:23.880
Two of the most common words that imply all of the work that you do.

09:23.880 --> 09:27.880
And that distributes trust.

09:27.880 --> 09:36.880
Even if you're the smallest of projects, you should at least have these two roles clearly defined, including how to get to be a maintainer.

09:36.880 --> 09:42.880
You've probably heard this term before in the last few years, but a contributor ladder, if you will.

09:42.880 --> 09:50.880
It helps people understand what you do, why you do it, and how to get there.

09:50.880 --> 09:54.880
What about the contributor ladder though?

09:54.880 --> 09:58.880
Is it that easy of a jump to go from contributor to maintainer?

09:58.880 --> 10:00.880
It's not.

10:00.880 --> 10:08.880
That's why we need things like mentoring and other community management type of activities.

10:08.880 --> 10:12.880
We added one in the middle and made it an actual ladder.

10:12.880 --> 10:17.880
Kubernetes has this, for instance, and it's the introduction of something called a reviewer.

10:17.880 --> 10:23.880
So you've got your contributor, reviewer, and maintainer.

10:23.880 --> 10:37.880
That reviewer is giving new contributors another wrong on that ladder to help build the trust, grow skills, and have practical mentoring experience versus a lofty one.

10:37.880 --> 10:40.880
Okay.

10:40.880 --> 10:42.880
But why stop there?

10:42.880 --> 10:47.880
Why do we have to stop with just those two roles or just community manager?

10:47.880 --> 10:50.880
If a project has needs, create them.

10:50.880 --> 10:52.880
Again, it's just like your code.

10:52.880 --> 10:56.880
Create it, and if it doesn't work, sunset it.

10:56.880 --> 11:02.880
According to the same Carnegie Mellon paper that I quoted earlier, role identity.

11:02.880 --> 11:07.880
It plays a strong role in contributor turnover.

11:07.880 --> 11:09.880
How about that?

11:09.880 --> 11:17.880
So while you're creating other roles, you're also building belonging and incentive to contribute.

11:17.880 --> 11:25.880
So what are some of those other roles that you could create that would solve some of the problems that we heard from the stories earlier?

11:25.880 --> 11:27.880
A release manager.

11:27.880 --> 11:29.880
A security lead.

11:29.880 --> 11:31.880
A communications lead.

11:31.880 --> 11:33.880
A social media manager.

11:33.880 --> 11:35.880
The list goes on.

11:35.880 --> 11:37.880
And honestly, it's kind of endless.

11:37.880 --> 11:42.880
Think about the things that you need and build for it.

11:42.880 --> 11:51.880
Speaking of endless, though, if a thriving community is your goal, build an emeritus role.

11:51.880 --> 11:56.880
One of the most forgotten parts, I think, of open source organizational design.

11:56.880 --> 12:02.880
How to exit off-board and be done with it and hang up your hat.

12:02.880 --> 12:06.880
And that should be celebrated.

12:06.880 --> 12:14.880
It should be kind of like retirement from your day job where they throw you a party at the end of the day and celebrate you.

12:15.880 --> 12:21.880
Project Jupiter actually calls their folks distinguished contributors.

12:21.880 --> 12:23.880
Isn't that cute?

12:23.880 --> 12:33.880
And I think that this is something that we really should try to normalize and include this in your contributor ladders.

12:33.880 --> 12:35.880
So now you have four.

12:35.880 --> 12:43.880
Contributor, reviewer, maintainer, and emeritus.

12:43.880 --> 12:50.880
So we have roles as one approach.

12:50.880 --> 12:53.880
Like groups, they're probably my personal favorite.

12:53.880 --> 12:57.880
And that is groups of humans.

12:57.880 --> 13:01.880
Groups allow people to drive work or interests in a space.

13:01.880 --> 13:03.880
And the group can only be two people.

13:03.880 --> 13:07.880
I hear a lot of naysayers from my maintainer friends sometimes.

13:07.880 --> 13:09.880
They'll say groups are so heavy.

13:09.880 --> 13:11.880
We're not Kubernetes.

13:11.880 --> 13:15.880
But like Kubernetes had groups before it was Kubernetes.

13:15.880 --> 13:19.880
Like why do we all think Kubernetes is Kubernetes?

13:19.880 --> 13:28.880
Kubernetes is Kubernetes because of these groups that were formulated in the early days.

13:28.880 --> 13:37.880
Because at the end of the day, what we've learned from groups is that they're great at bringing people in and guiding them to the work.

13:37.880 --> 13:46.880
Because at the end of the day, one of the most common phrases that I even use a lot of the times when we're talking about contributing over the source is jump right in.

13:46.880 --> 13:48.880
Just send a PR.

13:48.880 --> 13:52.880
That's not helpful when you're trying to scale a community.

13:52.880 --> 13:59.880
It's helpful to the people that you're talking to that know what you're talking about, but that's about it.

13:59.880 --> 14:01.880
So it's all about what you want out of it.

14:01.880 --> 14:04.880
Do you want experts in areas that you aren't?

14:04.880 --> 14:06.880
Do you want to distribute the load?

14:06.880 --> 14:12.880
Do you want a way to drive the work?

14:12.880 --> 14:18.880
Applying this to community management, because now that we know community management is so hella important.

14:18.880 --> 14:22.880
Several related successful groups have shaped over the years.

14:22.880 --> 14:35.880
And they are all targeting this community management of how can we together collectively work on that burden of community management.

14:35.880 --> 14:45.880
I recently created a contributor experience group with a hard focus on mentoring and bringing in over 60 new folks to the project each cycle.

14:45.880 --> 14:51.880
Kubernetes also has one that I led that supports 80,000 contributors.

14:51.880 --> 14:56.880
You all, 80,000.

14:56.880 --> 15:04.880
And all of these groups have different levels of decision making, approvals, charters, duties.

15:04.880 --> 15:10.880
But the one commonality that they all have is to support the maintainer.

15:10.880 --> 15:18.880
Some really cool examples in the wild of this that I've seen from various different types of sizes and types of projects.

15:18.880 --> 15:25.880
Again, because I think a lot of people assume that you have to be the Kubernetes of the world in order to do these cool, fun things.

15:25.880 --> 15:27.880
But you don't.

15:27.880 --> 15:34.880
For example, open telemetry has an end user working group that helps maintainers reduce their product management hacks.

15:34.880 --> 15:39.880
Because I know a lot of you have to toggle between what's important.

15:39.880 --> 15:42.880
This group helps them toggle between what's important.

15:42.880 --> 15:48.880
And then not only that, but then tries to get them to participate, them being end users.

15:48.880 --> 15:53.880
There is also advocacy and outreach with Jenkins, Debbie has a security team.

15:53.880 --> 15:56.880
Many projects have security teams these days.

15:56.880 --> 16:04.880
And then even in the SWIFT team, we are just about to launch an ecosystems work group to help our ecosystem maintainers.

16:04.880 --> 16:12.880
So again, this is also endless and this is also about your needs.

16:12.880 --> 16:17.880
But if you're still in the audience right now and you're still kind of like, I don't know.

16:17.880 --> 16:19.880
I don't know if I can do all this.

16:19.880 --> 16:27.880
Or if you have a community manager now, but your project is scaling up so much that it's even too much for them.

16:27.880 --> 16:34.880
Or what if you have tried, but this isn't just a thing for you?

16:34.880 --> 16:37.880
Well, there is the process component here.

16:37.880 --> 16:48.880
This process is really coming from the emergence of strong CI CD systems and the overarching infrastructure as code movement.

16:48.880 --> 16:57.880
And I've seen some really creative things on how engineers are project organizing themselves through configuration files.

16:57.880 --> 17:04.880
And I mean, imagine that you're an overburdened maintainer and you're really trying hard to onboard new contributors.

17:04.880 --> 17:16.880
And that means helping them with forming their groups and helping give out permissions to things like your Twitter or your Slack or whatever, you know, or your GitHub keys.

17:16.880 --> 17:22.880
And then you're also needing to update the documents in a million places, training folks on code of conduct stuff.

17:22.880 --> 17:30.880
The cool thing is in Kubernetes, we set something up like this that takes care of all of that.

17:30.880 --> 17:36.880
And it's this infrastructure is as community as I call it practice.

17:36.880 --> 17:39.880
Could be a way forward for you.

17:39.880 --> 17:50.880
This practice covers testing contributor management like bots that welcome first time contributors, artifacts, governance policy and procedure scaling.

17:50.880 --> 17:54.880
Kubernetes no longer has a full time community manager.

17:54.880 --> 17:57.880
I bet a lot of people think that it does.

17:57.880 --> 18:00.880
And the other thing is it hasn't for a long time.

18:00.880 --> 18:08.880
And the reason why is because it's held up by this infrastructure as community, it's governance.

18:08.880 --> 18:24.880
And all of those elements that I mentioned earlier with the delegated groups that have decentralized decision making, like contributor experience, special interest group and the testing special interest group and the steering committee.

18:24.880 --> 18:26.880
So we've reviewed roles.

18:26.880 --> 18:33.880
We've reviewed some groups at a high level and also showed you some process stuff.

18:33.880 --> 18:41.880
Good project organization and governance create environments where projects thrive and the humans do too.

18:41.880 --> 18:45.880
I was talking with Zach Saylor, a distinguished contributor.

18:45.880 --> 18:48.880
Again, I love that title in the Jupiter project.

18:48.880 --> 18:54.880
And he said that it took them two years, two years to rearchitect their project organization.

18:54.880 --> 19:01.880
But he said Paris quote, this is a quote, it was so worth it.

19:01.880 --> 19:03.880
And I said, why?

19:03.880 --> 19:04.880
Why?

19:04.880 --> 19:11.880
Because roles, groups and processes at the end of the day attract and bring new people to your project.

19:11.880 --> 19:13.880
It's scalable mentoring.

19:13.880 --> 19:16.880
One-on-one doesn't scale at communities of size.

19:16.880 --> 19:18.880
It just doesn't.

19:18.880 --> 19:22.880
And this way roles bring in shadows.

19:22.880 --> 19:26.880
You can easily have shadow organizations like CIG release and Kubernetes.

19:26.880 --> 19:29.880
Amazing shadow program, y'all.

19:29.880 --> 19:31.880
Just truly top notch.

19:31.880 --> 19:33.880
You should absolutely take a look at it.

19:33.880 --> 19:45.880
And then the third in that same kind of bucket is inviting other skills in, increases your chance of A, survival, and B, having a more diverse project.

19:45.880 --> 19:51.880
So why we sit in these talks of how to get more diversity, look to your project organization.

19:51.880 --> 19:57.880
And then the last thing, the one thing that I need to take a drink for because this gets me so excited.

19:58.880 --> 20:07.880
The last thing that not a lot of people recognize here, and this also goes back to Keras talk too, a little bit with the funding.

20:07.880 --> 20:15.880
It's like, how do we get more people that have day jobs contributing more and also being supported to do so?

20:15.880 --> 20:20.880
You know how we can do that by giving them roles and titles.

20:20.880 --> 20:30.880
Companies love roles and titles and it makes sense because you know why when you go to your managers at work and you say, hey, I want to contribute to XYZ project.

20:30.880 --> 20:32.880
You say that's nice.

20:32.880 --> 20:33.880
What's cool?

20:33.880 --> 20:34.880
What's in it for us?

20:34.880 --> 20:38.880
And then you're like, yeah, that's usually how the convoy goes.

20:38.880 --> 20:41.880
It's good, you know, we should do it.

20:41.880 --> 20:56.880
But imagine if you say, I would like to work my way to be a security lead for Kubernetes to bring industry experience to my day job.

20:56.880 --> 20:57.880
That's a game changer, y'all.

20:57.880 --> 21:00.880
And that's one of the reasons why Kubernetes has grown.

21:00.880 --> 21:08.880
And that's one of the reasons why you've seen Kubernetes so just well staffed in a way.

21:08.880 --> 21:15.880
I mean, of course, yes, trust me, I think the 300 plus maintainers would probably throw tomatoes at me when I say, well staffed.

21:15.880 --> 21:17.880
So I'm like ducking right now.

21:17.880 --> 21:19.880
But it's 300 maintainers, y'all.

21:19.880 --> 21:23.880
It's a lot.

21:23.880 --> 21:28.880
So to wrap up, remember the slide.

21:28.880 --> 21:38.880
Let's rally the industry around community management as an element go forward in addition to engagement, you know, pull requests accepted.

21:38.880 --> 21:49.880
Because at the end of the day, building robust, sustainable communities is more than accepting pull requests and taking issues.

21:49.880 --> 21:54.880
These two words, y'all, they can go so far to help our maintainers.

21:54.880 --> 21:55.880
Thank you.

21:58.880 --> 21:59.880
Thank you.

