WEBVTT

00:00.000 --> 00:16.960
Well, this is a depressing title. RIP. Rest in peace, and I hope rest means, like, restful.

00:16.960 --> 00:21.960
And not like this is the end of go, because I kind of like go. Anyway, this is going to

00:21.960 --> 00:28.960
be a very interesting talk. Rodolfo Plaza, thank you.

00:28.960 --> 00:38.960
Oh, actually I don't have my notes, so I'm going to swing it because I had to clone.

00:38.960 --> 00:45.960
Anyway, hello everybody, thanks for coming. So I'm going to present a project of mine

00:45.960 --> 00:52.960
that I created like maybe years back, a few years back now. It's called Rest in Peace,

00:52.960 --> 01:01.960
and it's about to make rest in peace, oh ho. So in 2021, Jan Lans Taylor and Robert Grissmer

01:01.960 --> 01:07.960
created a talk about how to use generics once they create implemented, actually implemented,

01:07.960 --> 01:14.960
the generics in go. And they were like, basically, I don't know if I have audio. We'll see.

01:14.960 --> 01:27.960
No. Anyway, so basically what Jan Lans Taylor is final words were, please use generics wisely.

01:27.960 --> 01:33.960
So of course, when a figure of authority asks you to use something wisely, what do you do?

01:33.960 --> 01:41.960
The total opposite. And people from CrowdStrike security company decided, I don't know if you

01:41.960 --> 01:46.960
can read in the back, but basically they were like, created a channel on the discord.

01:46.960 --> 01:52.960
It was a creative usage of generics contest submission, submit your worst implementation

01:52.960 --> 02:03.960
of generics in go. Basically, everything that Jan's told us not to do.

02:03.960 --> 02:10.960
So my, I did a thing I'm pretty proud, my, let's say to make the world the worst place,

02:10.960 --> 02:19.960
was an, I think, await in go because who needs go routines and channels anyway.

02:19.960 --> 02:29.960
Some people even did some try catch. If you're missing those good things from other languages.

02:29.960 --> 02:36.960
I got a plush because, you know, when you do something, the world like gives you something

02:36.960 --> 02:43.960
back called karma. And just for records, I listed everything that was attempted.

02:43.960 --> 02:52.960
We had like monads and stuff like that. Anyway, but out of all of this, I created something

02:52.960 --> 02:59.960
that thought was actually useful, use of generics, maybe not the one that was like supposed to be

02:59.960 --> 03:05.960
because the current implementation is not optimized for this use case.

03:05.960 --> 03:13.960
But I thought it was a nice anyway. So about me, I'm Tanguy, I'm from France.

03:13.960 --> 03:22.960
I worked 17 years in IT and I'm also CEO of HTMX. Okay, one person knows about HTMX.

03:22.960 --> 03:32.960
Anyway, so as you will see from this video, oh, we have sound now.

03:32.960 --> 03:39.960
Anyway, I'm ready to make anything for money. So I'm a freelancer.

03:39.960 --> 03:53.960
Specialized in go since 2015, worked in a normal consulting before that.

03:53.960 --> 03:59.960
I worked mostly on classic restful APIs, backends, and I've done some blockchains.

03:59.960 --> 04:06.960
And I stopped freelancing for a year, about a year to work a dagger.

04:06.960 --> 04:09.960
You should check them out. I think what they're doing is pretty cool.

04:09.960 --> 04:21.960
It's CI, CDS code. And I'm also very interested in pushing goes in more, I didn't say that, areas than just like

04:21.960 --> 04:28.960
microservices and web backends, so GUI, game engines and stuff like that.

04:28.960 --> 04:36.960
And the next talk will be about GUI. So I'll advise you to check it out.

04:36.960 --> 04:44.960
So now, can anyone recognize this?

04:44.960 --> 04:51.960
Basically, it's, yeah, thank you. Basically, it's the HTTP handler code that anybody does.

04:51.960 --> 04:55.960
You might even have like a validation step if you're fancy.

04:55.960 --> 05:05.960
And, but we do all of this code in the end, we decode the JSON and we encode the JSON for the response.

05:05.960 --> 05:10.960
But all of this is just for this line right here.

05:10.960 --> 05:16.960
For just this line, we do all of these gymnastics.

05:16.960 --> 05:27.960
So that's a lot of code. And let's say we had another handler to deal with another type, another type in our API.

05:28.960 --> 05:38.960
And now we do basically copy paste all of that previous code and change the code here, here and there.

05:38.960 --> 05:51.960
Myzermanos, whatever. Anyway, and so again, I see like a lot and a lot and a lot of duplication.

05:51.960 --> 05:58.960
And for me, like duplication, it's just, it's just something we should try to avoid as much as possible.

05:58.960 --> 06:04.960
There are some of the few rules about the rules of two or three, which I think is good.

06:04.960 --> 06:12.960
But when you create like a big API, you have more than two or three copies of that code.

06:12.960 --> 06:25.960
So you can have a solution and abstract the handler and create like a very unsafe type to basically get whatever you want in it.

06:25.960 --> 06:34.960
It can make it work, but then you call your back end, but you have to deal a lot in the back end.

06:35.960 --> 06:43.960
And then the back end will deal with a lot of type casting everywhere and it can fail many times.

06:43.960 --> 06:45.960
So you need to do a lot of hair handling.

06:45.960 --> 06:55.960
And here I put like basically what we should do to convert from one type to another and make sure it works.

06:55.960 --> 07:01.960
And it's all of this. All of this is, I don't know if I have the thing.

07:01.960 --> 07:10.960
Yeah. So basically all of this is for two types, for a structure with two fields, A and B.

07:10.960 --> 07:19.960
And for all of that, we have all of this boilerplate that basically take the dynamic code,

07:19.960 --> 07:23.960
transform it into a type safe that you can actually use in your back end.

07:23.960 --> 07:26.960
That's again a lot of code.

07:27.960 --> 07:32.960
And then the real back end can be easy once you have the right types,

07:32.960 --> 07:39.960
but we had to do all the way to here to be able to just call a simple back end.

07:39.960 --> 07:48.960
And by the way, if your back end is just that and you can make money out of it, go for it.

07:48.960 --> 07:55.960
So as I said, a lot of runtime reflect boilerplate to get back to types and potential reuse of the handler.

07:55.960 --> 08:00.960
So we had a lot of durable potential. Not so sure about it.

08:00.960 --> 08:07.960
So if finally we had a solution, thanks to Go 118, we have the generics.

08:07.960 --> 08:13.960
And so that's when this ID popped out.

08:13.960 --> 08:17.960
So the pro about generics, we have better type safety.

08:17.960 --> 08:21.960
We have better performance than empty interface.

08:21.960 --> 08:28.960
And as a wise person said, empty interface means nothing.

08:28.960 --> 08:39.960
And for this user, sorry, mis-type, for this use case, for my use case, we don't have better performance.

08:39.960 --> 08:46.960
There's an article from Vincent Marty that talk about this in depth.

08:46.960 --> 08:50.960
But somebody told me maybe it has been improved since.

08:50.960 --> 08:53.960
So maybe it's the procated. I don't know.

08:53.960 --> 08:58.960
And in general, it's more readable code for the users.

08:58.960 --> 09:07.960
And it allow more like don't repeat yourself all over your code base.

09:07.960 --> 09:11.960
So for example, without generics, we have this.

09:11.960 --> 09:16.960
So I just want to check the minimum between X and Y.

09:16.960 --> 09:22.960
And can anyone tell me what it prints?

09:22.960 --> 09:25.960
OK, not very interactive. OK.

09:25.960 --> 09:28.960
Well, actually it doesn't print. It doesn't even compile.

09:28.960 --> 09:32.960
Because mat.min accepts only float 64.

09:32.960 --> 09:37.960
So you just have to do this.

09:37.960 --> 09:41.960
I hate you, but I hate it.

09:41.960 --> 09:49.960
So, I don't know. I do it disgruntly, whatever.

09:49.960 --> 09:52.960
Not my native language, sorry.

09:52.960 --> 09:59.960
And with generics, we have this function, which is way better.

09:59.960 --> 10:02.960
It doesn't look like it, but it's way better.

10:02.960 --> 10:06.960
So the library code is not that great to read.

10:06.960 --> 10:08.960
That's for sure.

10:08.960 --> 10:12.960
But you can get used to it.

10:12.960 --> 10:15.960
And so you compare the previous one and this.

10:15.960 --> 10:20.960
Like, yeah, it's not one reads better.

10:20.960 --> 10:22.960
But the user code.

10:22.960 --> 10:24.960
On the user code, it's really way better.

10:24.960 --> 10:27.960
You don't have to cast those everywhere.

10:27.960 --> 10:31.960
So it makes for a better code base.

10:31.960 --> 10:33.960
So what about rest in peace?

10:33.960 --> 10:35.960
OK, I'm checking.

10:35.960 --> 10:37.960
OK.

10:37.960 --> 10:38.960
So rest in peace.

10:38.960 --> 10:44.960
The idea is to basically use generics to avoid all the...

10:44.960 --> 10:47.960
this HTTP boilerplate that I presented.

10:47.960 --> 10:51.960
For example, here we have some user code.

10:51.960 --> 11:00.960
We just wrap strings.toUpper in a function

11:00.960 --> 11:03.960
which is like an input, output.

11:03.960 --> 11:06.960
I don't even remember the name.

11:06.960 --> 11:09.960
But basically it takes a context, it takes a type,

11:09.960 --> 11:12.960
returns another type, and an error.

11:12.960 --> 11:17.960
And as long as your function respect this interface, you're good.

11:17.960 --> 11:22.960
And you can just wrap it, send it to the rip.handle,

11:22.960 --> 11:29.960
and you indicate the method, then you indicate you call this function.

11:29.960 --> 11:32.960
And then you have like a route options.

11:32.960 --> 11:35.960
And then you can just call curl on uppercase,

11:35.960 --> 11:40.960
and it will just put your input into uppercase.

11:40.960 --> 11:46.960
Magically you don't have to handle any HTTP about that.

11:46.960 --> 11:51.960
Library code, less readable, I will admit.

11:51.960 --> 11:55.960
So we have the type input, output, funk,

11:55.960 --> 11:58.960
which is like the function that needs to be respected

11:58.960 --> 12:03.960
to be used, then in the handle,

12:03.960 --> 12:07.960
which takes the input, takes an output,

12:07.960 --> 12:12.960
and put the method for this route,

12:12.960 --> 12:19.960
and then you can just pass it like that.

12:19.960 --> 12:21.960
But this was fun to do.

12:21.960 --> 12:27.960
It was my first experiment, but I wanted really to go a little bit further,

12:27.960 --> 12:30.960
because I do a lot of rest back-ends,

12:30.960 --> 12:34.960
so there are a lot of routes to deal with for resources.

12:34.960 --> 12:37.960
We need to create, delete, update them, et cetera.

12:37.960 --> 12:41.960
So I wanted to automate that as well.

12:41.960 --> 12:42.960
So rest in peace.

12:42.960 --> 12:46.960
So the key concept of rest services is the notion of resource.

12:46.960 --> 12:50.960
It's accessible via an URI,

12:50.960 --> 12:55.960
an action on the resource URI via HTTP methods.

12:55.960 --> 12:58.960
I mean, this is one implementation about rest.

12:58.960 --> 13:01.960
Normally it doesn't have to be HTTP, but anyway.

13:01.960 --> 13:05.960
And the current state is sent back through the same system,

13:05.960 --> 13:09.960
which in this case would be HTTP.

13:09.960 --> 13:13.960
So on the user code,

13:13.960 --> 13:20.960
I create like a user provider, like an entity provider.

13:20.960 --> 13:25.960
I pass it to here.

13:25.960 --> 13:28.960
I decided this is the path I want,

13:28.960 --> 13:32.960
and here I just take the default route options.

13:32.960 --> 13:37.960
And thanks to that, we'll see what it will give us.

13:37.960 --> 13:43.960
But so this user provider needs to implement this interface.

13:43.960 --> 13:45.960
Okay?

13:45.960 --> 13:48.960
So create, get, update, delete, list all.

13:48.960 --> 13:51.960
I will update that because list all is a little bit too much.

13:51.960 --> 13:54.960
I need to handle pagination and stuff like that.

13:54.960 --> 13:56.960
It's not there yet.

13:56.960 --> 13:59.960
But once you implement that on your code,

13:59.960 --> 14:01.960
you can just use your code.

14:01.960 --> 14:04.960
You don't have to deal with any HTTP whatsoever.

14:04.960 --> 14:07.960
And you pass it to this function.

14:07.960 --> 14:12.960
Then you have a whole slash user with all the bells and whistles,

14:12.960 --> 14:15.960
which gives you all of this.

14:15.960 --> 14:16.960
You can create the entity.

14:16.960 --> 14:17.960
You can get the entity.

14:17.960 --> 14:20.960
You can update the entity, delete, list.

14:20.960 --> 14:23.960
And I recently added fields.

14:23.960 --> 14:26.960
So now, because you can use patch, basically,

14:26.960 --> 14:29.960
to update just part of your entity,

14:29.960 --> 14:31.960
but the protocol is not defined.

14:31.960 --> 14:35.960
So you have to define your own way of doing patch.

14:35.960 --> 14:37.960
Is it like text-tips or something like that?

14:37.960 --> 14:39.960
And it's a little bit quirky.

14:39.960 --> 14:44.960
So I decided I found somebody talking about a pattern,

14:44.960 --> 14:45.960
which I liked,

14:45.960 --> 14:49.960
which is basically you take the whole path to the field,

14:49.960 --> 14:52.960
and then you can just put and get from it.

14:52.960 --> 14:58.960
And so that's how you update part of your resource.

14:58.960 --> 15:02.960
And so you have your entity and the entity provider

15:02.960 --> 15:06.960
thanks to a type inference that improves.

15:06.960 --> 15:08.960
You don't even have to pass that.

15:08.960 --> 15:09.960
You can just pass directly.

15:09.960 --> 15:13.960
You don't have to put the square brackets and put those types.

15:13.960 --> 15:17.960
So you pass the URL, the entity provider,

15:17.960 --> 15:18.960
and the route options.

15:18.960 --> 15:20.960
And here you go.

15:20.960 --> 15:22.960
You're good to go.

15:22.960 --> 15:26.960
What you get, creation of CRUD-HDP endpoints,

15:26.960 --> 15:29.960
content negotiation for many encodings.

15:29.960 --> 15:31.960
Right now we have JSON, XML,

15:31.960 --> 15:36.960
Protobuf, MessagePack, HTML, HTML forms.

15:36.960 --> 15:39.960
We have automated resource web pages

15:39.960 --> 15:41.960
that can edit the resource.

15:41.960 --> 15:45.960
Right now it's very nice UI.

15:45.960 --> 15:47.960
You see this is not my major.

15:47.960 --> 15:51.960
And a harmonious way of handling common scenarios,

15:51.960 --> 15:54.960
and because I've worked on many projects,

15:54.960 --> 15:58.960
and maybe because duplication, you do it once,

15:58.960 --> 16:01.960
and then you forgot you need to update all those

16:01.960 --> 16:03.960
boilerplates you've done, so then you forget.

16:03.960 --> 16:06.960
And then the behavior between all your handpoints

16:06.960 --> 16:10.960
are not really coherent.

16:10.960 --> 16:15.960
So that makes a good thing, I think.

16:15.960 --> 16:17.960
For example, this is just an implementation

16:17.960 --> 16:22.960
of adding a new encoding to this platform.

16:22.960 --> 16:26.960
That's the whole code to add the JSON encoding

16:26.960 --> 16:28.960
on REST in piece.

16:28.960 --> 16:32.960
So you just, I have like a facility like the RAP codec.

16:32.960 --> 16:35.960
I use the JSON new encoder from the standard live.

16:35.960 --> 16:38.960
JSON new decoder, then I define the MIME types.

16:38.960 --> 16:40.960
That's it. You're good to go.

16:40.960 --> 16:45.960
Most of the implementation are like that.

16:45.960 --> 16:47.960
So RIP is to HTTP.

16:47.960 --> 16:50.960
What an ORM is to SQL, me.

16:50.960 --> 16:54.960
But I know that how many of you hate ORM

16:54.960 --> 16:58.960
just to see if, okay, you might hate me as well.

16:58.960 --> 16:59.960
Anyway.

16:59.960 --> 17:04.960
But seriously, I hope it will help you

17:04.960 --> 17:07.960
create services more easily

17:07.960 --> 17:10.960
because I have a pain of repeating all this code all the time.

17:10.960 --> 17:13.960
So here's the QR code.

17:13.960 --> 17:17.960
Like, subscribe, click the back icon,

17:17.960 --> 17:18.960
something like that.

17:18.960 --> 17:20.960
Anyway.

17:20.960 --> 17:21.960
And here's a demo.

17:21.960 --> 17:24.960
Last time I did live code, it was awful,

17:24.960 --> 17:25.960
so now I have a video.

17:25.960 --> 17:28.960
Amazing.

17:28.960 --> 17:31.960
So I just run the server.

17:31.960 --> 17:35.960
And so all the logs that will print in yellow

17:35.960 --> 17:36.960
are from the servers.

17:36.960 --> 17:38.960
There is one that is from the logging handler

17:38.960 --> 17:41.960
that is the logging middleware.

17:41.960 --> 17:45.960
And the other one is from the backend code

17:45.960 --> 17:48.960
that we just logged for ourselves.

17:48.960 --> 17:50.960
So here I just get the list of users.

17:50.960 --> 17:53.960
There is only one called Jean.

17:53.960 --> 17:57.960
So here we see the backend.

17:57.960 --> 17:59.960
Whoops. No.

17:59.960 --> 18:00.960
No. Sorry.

18:00.960 --> 18:01.960
Anyway.

18:01.960 --> 18:04.960
We'll check on the next one.

18:04.960 --> 18:07.960
So now we're going to create a new one named Cam.

18:07.960 --> 18:09.960
Are you stopping, please?

18:09.960 --> 18:10.960
Thank you.

18:10.960 --> 18:12.960
I'm sorry.

18:12.960 --> 18:13.960
All right.

18:13.960 --> 18:14.960
Okay.

18:14.960 --> 18:17.960
Mm-mm.

18:17.960 --> 18:21.960
Did I check this video?

18:21.960 --> 18:23.960
Maybe not.

18:23.960 --> 18:24.960
Okay.

18:24.960 --> 18:26.960
So maybe it will take a little longer.

18:26.960 --> 18:28.960
I'm sorry about that.

18:28.960 --> 18:33.960
Yeah, that's karma.

18:33.960 --> 18:34.960
Are you serious?

18:34.960 --> 18:35.960
Okay.

18:35.960 --> 18:36.960
Okay.

18:36.960 --> 18:38.960
So, oh, yeah, but also there was no output.

18:38.960 --> 18:40.960
So we just saved this new user.

18:40.960 --> 18:44.960
So here is the log from the backend.

18:44.960 --> 18:47.960
And this is the middleware, the logging middleware,

18:47.960 --> 18:50.960
which is just a apache log style.

18:50.960 --> 18:55.960
Then I go, then I released again to just confirm

18:55.960 --> 19:01.960
that we have a new user in our list.

19:01.960 --> 19:06.960
Then we have, we just get one user

19:06.960 --> 19:11.960
and we decide to display as XML

19:11.960 --> 19:18.960
because why not live in the past?

19:18.960 --> 19:19.960
Because on each endpoint,

19:19.960 --> 19:21.960
you can have multiple encodings

19:21.960 --> 19:24.960
based on whatever I do content negotiation.

19:24.960 --> 19:27.960
So if the browser or whatever client asked for,

19:27.960 --> 19:30.960
and I have it, I will give it to you.

19:30.960 --> 19:32.960
That's your problem.

19:32.960 --> 19:35.960
If you want to XML anyway.

19:35.960 --> 19:40.960
So here we're going to just modify the first users

19:40.960 --> 19:43.960
and call him Philip instead of Jean.

19:43.960 --> 19:46.960
So here he is.

19:46.960 --> 19:47.960
Check is still Philip.

19:47.960 --> 19:48.960
Yeah, good.

19:48.960 --> 19:52.960
All right.

19:52.960 --> 19:54.960
Now I just want the field.

19:54.960 --> 19:57.960
So I just want the name of this entity.

19:57.960 --> 20:07.960
And so it just returns it as a JSON string in green.

20:07.960 --> 20:10.960
Now I'm going to, I don't know what I'm doing.

20:10.960 --> 20:15.960
Oh yeah, the email address got thrown in a trash

20:15.960 --> 20:18.960
because I did a full put on the entity

20:18.960 --> 20:21.960
and didn't specify the email address.

20:21.960 --> 20:23.960
So I'm going to just modify this field

20:23.960 --> 20:26.960
to modify the address.

20:26.960 --> 20:29.960
So now I do a put just on the field,

20:29.960 --> 20:31.960
on the email address field.

20:31.960 --> 20:36.960
And now I'm going to check again that it's correct.

20:36.960 --> 20:39.960
And here now we have a correct email address

20:39.960 --> 20:41.960
and correct name.

20:41.960 --> 20:44.960
Then I delete and then I will just check

20:44.960 --> 20:48.960
that we rightfully so deleted

20:48.960 --> 20:52.960
and there is only one user left in the thing.

20:52.960 --> 20:54.960
So yeah, so that's what you get.

20:54.960 --> 20:57.960
Sorry, it switched this as well.

20:57.960 --> 20:59.960
Okay.

20:59.960 --> 21:02.960
So that's what you get with just like this one line

21:02.960 --> 21:05.960
of handle entities and the whole backend implementation,

21:05.960 --> 21:07.960
of course.

21:07.960 --> 21:09.960
But yeah, I think it's pretty cool.

21:09.960 --> 21:12.960
On route option, it's something that I added

21:12.960 --> 21:14.960
since I did this talk in Golab.

21:14.960 --> 21:17.960
So now each route can have their own set

21:17.960 --> 21:23.960
of handle encodings and middlewares.

21:23.960 --> 21:27.960
So that's pretty nice because before it was like a global state.

21:27.960 --> 21:29.960
Not good.

21:29.960 --> 21:31.960
Okay.

21:31.960 --> 21:33.960
And for this to implement that,

21:33.960 --> 21:36.960
for example, we need the entity,

21:36.960 --> 21:39.960
which is just like the user struct.

21:39.960 --> 21:42.960
And we implement those two method,

21:42.960 --> 21:45.960
ID string, which return the ID as a string

21:45.960 --> 21:48.960
because our ID is an int.

21:48.960 --> 21:50.960
And the other way around, we need to convert

21:50.960 --> 21:53.960
from an int to a string.

21:53.960 --> 21:56.960
So if you have a better design,

21:56.960 --> 21:59.960
come talk to me because I'm not very satisfied with this,

21:59.960 --> 22:02.960
but it is what it is and it works pretty well.

22:02.960 --> 22:04.960
Plimitation is quite simple.

22:04.960 --> 22:06.960
And then on the entity provider,

22:06.960 --> 22:10.960
so on this example, it's just like a map, memory map,

22:10.960 --> 22:15.960
and we just, I just present you the updates.

22:15.960 --> 22:17.960
So this is just the backend you have to write.

22:17.960 --> 22:20.960
I put blogging because why not?

22:20.960 --> 22:25.960
I get my user from the memory,

22:25.960 --> 22:28.960
and then I just update it and that's it.

22:28.960 --> 22:31.960
So that's the code you have to create.

22:31.960 --> 22:34.960
So basically I tried, like with the memory map,

22:34.960 --> 22:36.960
it's like 100 lines of code for this,

22:36.960 --> 22:40.960
for all those method and implementation.

22:40.960 --> 22:43.960
I did in SQL, it was 110, something like that.

22:44.960 --> 22:47.960
So then you really reduce to just that.

22:47.960 --> 22:52.960
So for the future, oh, I have time,

22:52.960 --> 22:55.960
yeah, maybe I will have time for another thing,

22:55.960 --> 22:57.960
but I'm going to just finish that.

22:57.960 --> 23:01.960
So for the future, I would like to do nested resources,

23:01.960 --> 23:04.960
but I've heard like even Django REST API doesn't do

23:04.960 --> 23:07.960
nested resources, so maybe not.

23:07.960 --> 23:09.960
I want to add pagination,

23:09.960 --> 23:11.960
I want to add open API auto generation,

23:11.960 --> 23:13.960
so then you could generate whatever client

23:13.960 --> 23:15.960
for your system directly.

23:15.960 --> 23:17.960
I would love even more 8 OIS,

23:17.960 --> 23:19.960
I don't know how to pronounce that,

23:19.960 --> 23:21.960
but to have links and stuff,

23:21.960 --> 23:25.960
so the API is self-discoverable, I guess,

23:25.960 --> 23:27.960
even more than open API.

23:27.960 --> 23:31.960
And I would like to overly improve the API.

23:31.960 --> 23:35.960
So since last time, I did like the route options,

23:35.960 --> 23:40.960
the fields, I added protobuf during my way back from Italy,

23:40.960 --> 23:43.960
and I would love to use a log and slog,

23:43.960 --> 23:47.960
better handling and customization of HTML templates

23:47.960 --> 23:49.960
because you will see.

23:49.960 --> 23:54.960
And I would love also to generate GUI apps for that directly

23:54.960 --> 23:58.960
so you don't have to also bother that, of course.

23:58.960 --> 24:00.960
Simple GUI apps.

24:00.960 --> 24:04.960
So let me check if I can do this.

24:04.960 --> 24:07.960
Yes, yes, no, yes, yes.

24:07.960 --> 24:12.960
Okay, so yeah, this is my beautiful HTML GUI skills.

24:12.960 --> 24:15.960
So we have the user Jean.

24:15.960 --> 24:22.960
For example, we decide to, I don't know, Jean Marc.

24:22.960 --> 24:23.960
All right.

24:23.960 --> 24:26.960
And we can add a new person,

24:26.960 --> 24:29.960
see like a very well designed from the 90s,

24:29.960 --> 24:31.960
as vintage as me.

24:31.960 --> 24:35.960
Let's add Marc here.

24:35.960 --> 24:36.960
All right.

24:36.960 --> 24:38.960
Okay, we get back there.

24:38.960 --> 24:43.960
Then we have our full list and we can just delete.

24:43.960 --> 24:45.960
All this is thanks to HTMLX,

24:45.960 --> 24:47.960
which is you should check it out.

24:47.960 --> 24:48.960
It's pretty cool.

24:48.960 --> 24:50.960
Anyway, so this is the thing.

24:50.960 --> 24:56.960
I wish we could update those through by what you want, actually.

24:56.960 --> 25:04.960
And then the last demo I have is I play with my daughters

25:04.960 --> 25:08.960
a game called GoCraft, which is a implementation of,

25:08.960 --> 25:11.960
simple implementation of Minecraft in Go.

25:11.960 --> 25:16.960
And to bother them, I was like, how about I use my thing

25:16.960 --> 25:20.960
and see how it's usable and just be able to create blocks

25:20.960 --> 25:23.960
in the middle of their construction to annoy them.

25:23.960 --> 25:27.960
Or I can just delete and yeah.

25:27.960 --> 25:32.960
So for this, I'm just going to show the code at four last minute.

25:32.960 --> 25:38.960
I created a block type, which the ID will be the coordinates,

25:38.960 --> 25:39.960
XYZ.

25:39.960 --> 25:45.960
So my ID is, maybe, yeah, I guess I can still see.

25:45.960 --> 25:46.960
Yeah.

25:46.960 --> 25:47.960
Okay.

25:47.960 --> 25:49.960
So I split by X.

25:49.960 --> 25:58.960
So the ID is basically, if I show this, it's like that.

25:58.960 --> 25:59.960
I'm sorry.

25:59.960 --> 26:04.960
So I just say like the coordinates in XYZ as the ID

26:04.960 --> 26:08.960
and then I just have to marshal and then marshal this.

26:08.960 --> 26:10.960
And then in the game, I didn't implement get,

26:10.960 --> 26:12.960
I just implemented create.

26:12.960 --> 26:13.960
I get the coordinates.

26:13.960 --> 26:16.960
I create in the right format for the game.

26:16.960 --> 26:18.960
And then I update the block, dirty block.

26:18.960 --> 26:21.960
So this is really code just about the game.

26:21.960 --> 26:23.960
I'm not doing any HTTP in there.

26:23.960 --> 26:25.960
And here the delete, the same.

26:25.960 --> 26:29.960
It's just like code about this specific go game.

26:29.960 --> 26:30.960
That's it.

26:30.960 --> 26:36.960
And it works.

26:36.960 --> 26:37.960
And yeah.

26:37.960 --> 26:41.960
So if you were excited to use it, talk about it or something,

26:41.960 --> 26:42.960
go talk to me.

26:42.960 --> 26:43.960
I have a bow tie.

26:43.960 --> 26:45.960
You should recognize me.

26:45.960 --> 26:48.960
And so I would love to talk about it.

26:48.960 --> 26:52.960
If you have like a design ideas and stuff, I'm really up to it

26:52.960 --> 26:54.960
because I think we could improve it.

26:54.960 --> 26:59.960
And discuss about it, contribute anything.

26:59.960 --> 27:00.960
All right.

27:00.960 --> 27:02.960
And I want to thank the go team for the generics.

27:02.960 --> 27:05.960
Without that, it couldn't have been possible.

27:05.960 --> 27:09.960
The Ghostrasburg meetup because they had to suffer through my

27:09.960 --> 27:13.960
first iterations of crappy slides.

27:13.960 --> 27:17.960
The logo from a fellow Strasburg gopher.

27:17.960 --> 27:20.960
You for coming here, you online.

27:20.960 --> 27:21.960
I don't know where is camera.

27:21.960 --> 27:22.960
I guess there anyway.

27:22.960 --> 27:26.960
And for them in the go, they have organizer because like you're

27:26.960 --> 27:33.960
really, really top and HTML for the mean, of course.

27:33.960 --> 27:34.960
One of us.

