WEBVTT

00:00.000 --> 00:09.440
I bet it gets started because this one runs is really short on time.

00:09.440 --> 00:14.920
Okay, right, hello, it's still me.

00:14.920 --> 00:16.880
This is an unfortunately short talk.

00:16.880 --> 00:20.280
I'm going to be a bit straight for time, so I'm just going to run straight into it.

00:20.280 --> 00:21.760
So yeah, I work for OpenJDK.

00:21.760 --> 00:24.200
I work for Red Hat OpenJDK.

00:24.200 --> 00:28.400
I've been working on containers since I started at Red Hat, but since I joined the OpenJDK

00:28.400 --> 00:29.920
team, I try to diversify a little bit.

00:29.920 --> 00:33.840
So I started working on backpots about four years ago, but it's always been an issue as

00:33.840 --> 00:35.360
the kind of thing I did around the side.

00:35.360 --> 00:38.880
So I'm perennially a beginner and I still have to do myself a beginner.

00:38.880 --> 00:42.440
Loads of people in the audience here are significantly more experienced with backpots than me, and

00:42.440 --> 00:45.760
I hope if we have questions, they will help pitch in with answers.

00:45.760 --> 00:48.040
Okay, a little bit of preamble then.

00:48.040 --> 00:52.840
I'm not specifically talking about starting OpenJDK development itself, although there

00:52.840 --> 00:55.560
is some significant overlap.

00:55.560 --> 00:56.560
Why do it?

00:56.560 --> 00:59.880
There is a clear commercial reason, which is why so many companies are involved, but

00:59.880 --> 01:02.400
I'd argue there's another good reason is that it's fun.

01:02.400 --> 01:06.880
The kind of problems that you need to solve with backpots are a little bit different to

01:06.880 --> 01:11.720
regular development, so it's quite interesting, I think.

01:11.720 --> 01:15.360
There are a lot of documentation in OpenJDK community.

01:15.360 --> 01:17.200
Some's out of date.

01:17.200 --> 01:18.640
Some's a bit misleading.

01:18.640 --> 01:20.760
These two, URIs in particular, are not.

01:20.760 --> 01:22.020
These are fantastic.

01:22.020 --> 01:29.020
The top one is the quick cheat sheet thing, and the second one is your reference guide.

01:29.020 --> 01:31.380
It would be futile for me to try and rehash them here.

01:31.380 --> 01:32.860
I wouldn't do a better job.

01:32.860 --> 01:36.300
So instead, I'm going to try and focus on a couple of things that come up when you're

01:36.300 --> 01:43.020
just starting, and also some tips and tricks that I've picked up along the way.

01:43.020 --> 01:48.300
The focus really should be that doing backpots is a community thing, and you're joining a

01:48.300 --> 01:53.380
community, and certainly you will require sponsorship, reviews, and approvals.

01:53.380 --> 01:58.580
So it's important to recognize the community aspect of it and to build relationships with

01:58.580 --> 01:59.580
people.

01:59.580 --> 02:03.940
Okay, so the very, very, very first thing you need to do is to sign or be covered by

02:03.940 --> 02:08.100
the Oracle contributor agreement, because, well, that's really, really important.

02:08.100 --> 02:10.020
It's important for legal reasons.

02:10.020 --> 02:13.660
Your organization, if you work for a company that's doing this, then you might be covered

02:13.660 --> 02:16.900
by a sort of umbrella that's been signed, but check.

02:16.900 --> 02:20.980
It's important for legal reasons, but it's also important practically, because a whole

02:20.980 --> 02:24.100
load of automation won't happen for you until that's happened.

02:24.100 --> 02:29.020
So once you've signed that, you've got access to OpenJDK bot that operates on GitHub.

02:29.020 --> 02:32.060
It'll ignore you until that's done, so that's important.

02:32.060 --> 02:35.300
And the very, very first thing you should do is clone JDK, try building it, make sure

02:35.300 --> 02:40.780
it runs, and start forking GitHub repositories.

02:40.780 --> 02:44.140
Building it then, again, this is actually pretty well documented in the source tree.

02:44.540 --> 02:47.020
Building and testing pages in particular.

02:47.020 --> 02:48.700
A couple of quick tips.

02:48.700 --> 02:54.100
If you're building on a laptop, so that's saving up for a desktop, but turn on Ccash,

02:54.100 --> 02:56.980
it makes a huge difference in that sort of environment.

02:56.980 --> 03:00.740
You're going to require a boot JDK, which is a version or two one way or the other of

03:00.740 --> 03:02.140
what you're building.

03:02.140 --> 03:04.500
So you're going to start stashing those around.

03:04.500 --> 03:09.100
I download them from Adoptium, other vendors are available.

03:09.260 --> 03:13.260
I very much encourage that you run tests for backboards.

03:13.260 --> 03:18.660
The tier one test suite requires the Google test framework in the hotspot area, so download

03:18.660 --> 03:19.660
that too.

03:19.660 --> 03:24.140
And you need the job test tool, JTreg, which again, you might require more than one version

03:24.140 --> 03:28.140
of that, but it will be hit cross-up bridge when you come to it.

03:28.140 --> 03:33.060
Finally, unless you're actually working on fixing this, sometimes you will find that

03:33.060 --> 03:37.140
trying to build an older tree with a modern compiler will throw warnings which are promoted

03:37.180 --> 03:39.340
to errors by default.

03:39.340 --> 03:41.700
So if you're not trying to fix that and it's just getting in the way of what you're doing

03:41.700 --> 03:46.940
how to do, you can disable warnings as errors by passing that to the configure script.

03:46.940 --> 03:51.060
I think that even innate you these days, I think that's the way to do it.

03:51.060 --> 03:54.740
So as I said earlier, fork all the things.

03:54.740 --> 03:59.460
So go find the open JDK trees and all the backboards trees, create forks on GitHub,

03:59.460 --> 04:03.100
and then go into the settings and turn on actions for them.

04:03.100 --> 04:04.100
Do that first.

04:04.100 --> 04:05.100
Okay.

04:05.100 --> 04:12.500
To produce this slide, I spent quite a lot of time confused, so I think it's fair to

04:12.500 --> 04:14.980
say this can be confusing.

04:14.980 --> 04:20.100
You have the notion of the open JDK community as the sort of outer layer of abstraction,

04:20.100 --> 04:25.460
and your relationship with that is of starting as a contributor once you sign the OCA.

04:25.460 --> 04:27.940
Do that because you need to do that.

04:27.940 --> 04:31.620
The next thing then, you've got the notion of projects and you've got the notion of groups

04:31.620 --> 04:33.580
and they're distinct.

04:33.580 --> 04:36.500
The updates project, I mean, Dalibor covered this this morning.

04:36.500 --> 04:40.780
The updates project is the one that covers virtually all of the backport's work these

04:40.780 --> 04:44.380
days with the exception of 8U.

04:44.380 --> 04:48.460
Once you've done a couple of backports and found sponsors, you will be able to apply

04:48.460 --> 04:52.500
to become an author in a project, which is very, very useful and gets you an account

04:52.500 --> 04:54.380
in the open JDK infrastructure.

04:54.380 --> 05:01.820
To do that, you email the project lead for the project is Rob McKenna.

05:01.820 --> 05:08.740
For 8U, it's Andrew Haley.

05:08.740 --> 05:12.380
If you look at the commits in the Java trees, you'll see that they all have a very common

05:12.380 --> 05:13.580
format.

05:13.580 --> 05:18.140
The first line of the commit message starts with the bug number and that points into the

05:18.140 --> 05:19.340
Java bug system.

05:19.340 --> 05:22.460
This is very, very useful database of information about bugs.

05:22.820 --> 05:28.700
And when you're doing backports, you'll spend a lot of time tracing things in there.

05:28.700 --> 05:32.620
But the problem is, until you've acquired an open JDK account, you're limited in terms

05:32.620 --> 05:34.260
of how you can interact with it.

05:34.260 --> 05:38.820
You can't write to it, so you can't comment, write labels and things like that, but you're

05:38.820 --> 05:41.980
also limited in terms of what queries you can run.

05:41.980 --> 05:49.020
So thank you, Alexis Shippoliv for the JDK backports monitor project.

05:49.100 --> 05:55.940
This is Java program which basically constructs complicated JIRA queries and performs them

05:55.940 --> 05:58.860
and writes reports in a variety of different formats.

05:58.860 --> 06:04.620
Alexis not only created this, he also hosts an instance of it and publishes reports regularly

06:04.620 --> 06:05.940
to his own web server.

06:05.940 --> 06:07.780
So thank you, Alexis.

06:07.780 --> 06:13.420
If you make heavy use of this, and you work for an institution, I would strongly suggest

06:13.420 --> 06:16.140
you try and run it yourself.

06:16.140 --> 06:18.220
It might iron out some bugs.

06:18.220 --> 06:23.620
And also, if Alexis turns his website off, you will not be in hot water.

06:23.620 --> 06:26.060
So how to find a good backport bug?

06:26.060 --> 06:31.620
Here's an example of a parity report from Alexis' Backport Monitor.

06:31.620 --> 06:34.980
This is showing the first section, towards the top of the document here.

06:34.980 --> 06:41.380
The first section is a list of bugs which have been addressed in Oracle's build of 2103

06:41.420 --> 06:44.780
and have not yet been fixed in OpenJDK updates project.

06:44.780 --> 06:51.060
So signals that you should avoid a bug, as a beginner certainly, is someone already working

06:51.060 --> 06:52.060
on it?

06:52.060 --> 06:53.420
Has someone filed a request for review?

06:53.420 --> 06:56.180
Has someone opened a pull request that addresses the issue already?

06:56.180 --> 07:00.900
Or has a company, I think A for Amazon in this case, flagged a bug as of interest to

07:00.900 --> 07:01.900
them?

07:01.900 --> 07:07.100
So eyeballs are already on these bugs, so to start out, probably look somewhere else.

07:07.100 --> 07:10.900
And then these are signs that a bug might be suitable.

07:10.900 --> 07:15.540
Open-sourced tests that are previously closed, test-only patches.

07:15.540 --> 07:23.620
Those are pretty attractive because the backport projects are happy to accept test-only patches.

07:23.620 --> 07:25.300
It's very low risk to the product.

07:25.300 --> 07:28.180
It increases the quality of testing.

07:28.180 --> 07:31.260
And they're generally quite easy to backport, sometimes trivial.

07:31.260 --> 07:34.500
So that's a good sign.

07:34.500 --> 07:37.900
And finally, it doesn't show up well on a projector.

07:37.900 --> 07:40.780
Other flags then, depending on who you are, what your interests are.

07:40.780 --> 07:47.660
So platform-specific bugs, Windows bugs, Mac bugs, port-specific bugs, IOT64, etc.,

07:47.660 --> 07:49.420
will get less attention than more general bugs.

07:49.420 --> 07:51.820
I mean, almost nobody's doing Mac or Spark ports.

07:51.820 --> 07:55.300
So if that's an area that you can specialise in, that might be something worth looking

07:55.300 --> 07:57.300
for as well.

07:57.300 --> 07:59.300
Okay.

07:59.300 --> 08:00.780
I've got a couple of tips here about Git.

08:00.780 --> 08:06.540
So nowadays, I think all the JDK trees are in Git, or at least all the ones I deal with,

08:06.540 --> 08:07.540
which is nice.

08:07.540 --> 08:13.900
And time invested's perfecting Git, mastering Git, is worthwhile.

08:13.900 --> 08:16.940
There is actually a talk, I think, tomorrow in a different room from somebody who's going

08:16.940 --> 08:18.620
to give some super tips on Git.

08:18.620 --> 08:20.740
So I recommend that if you can fit it in.

08:20.740 --> 08:25.780
So the first stage then, this is a prerequisite for what's coming in my slides, the trees

08:25.780 --> 08:27.140
have grown really big, right?

08:27.140 --> 08:31.700
So if you clone them all, just the object storage for Git has grown to 200 megs-ish

08:31.700 --> 08:33.060
for 8U.

08:33.060 --> 08:36.140
By the time we get to 21U, it's 1.2 gigabytes.

08:36.140 --> 08:41.540
And if you've got all of those cloned, disk space is cheap, but that's network time, etc.

08:41.540 --> 08:47.060
If you stick all of those Git repositories as remotes in a local, one local repository,

08:47.060 --> 08:50.300
then you can deduplicate an awful lot of that storage.

08:50.300 --> 08:54.140
I think it last time I measured it, it's about a gig and a half for all of those.

08:54.140 --> 08:55.660
But that's not the main reason to do it, actually.

08:55.660 --> 08:59.020
I would say the main reason to do that is because it makes comparing objects between

08:59.020 --> 09:01.860
JDK trees really easy.

09:01.860 --> 09:05.860
You've always got access to any object in any of those trees, from any of those work

09:05.860 --> 09:11.580
trees, so you can look at the state of a particular patch as it was in mainline if you're in a

09:11.580 --> 09:13.780
backport's tree, etc.

09:13.780 --> 09:18.340
Without having to ferry patches around or export things.

09:18.340 --> 09:22.620
My favorite Git trick that I learned recently was the notion of Git work trees.

09:22.620 --> 09:28.060
When you make a clone, you by default get one work tree, it's the checkout, right?

09:28.060 --> 09:30.180
So the bit outside of the .git directory.

09:30.180 --> 09:34.220
You might be familiar with repositories which have zero work trees, that's bare repositories,

09:34.220 --> 09:36.460
such as if you were hosting them on a web server.

09:36.460 --> 09:40.580
But you can actually have more than one work tree for a single Git repository.

09:40.580 --> 09:42.740
The syntax is something like that.

09:42.740 --> 09:49.540
It creates a new sibling directory adjacent to your clone, tracking a particular branch

09:49.540 --> 09:51.300
from one of the remotes.

09:51.380 --> 09:55.140
That means you can have a work tree for each of the backport trees with only one common

09:55.140 --> 09:56.780
Git storage.

09:56.780 --> 10:02.660
Again, the reason that's really useful is if you're somewhere over in the 17U directory,

10:02.660 --> 10:06.540
you can still access and compare against objects in any of the other trees, just as if you

10:06.540 --> 10:11.460
were in a, it's essentially as good as being in a real Git clone.

10:11.460 --> 10:12.460
That's really handy.

10:12.460 --> 10:15.060
I blogged about it when I first discovered this, and that's somewhere at the bottom of

10:15.060 --> 10:20.220
the slide there, trying to talk about how it's useful for this stuff.

10:20.220 --> 10:21.220
Path changes then.

10:21.220 --> 10:26.940
So, files move around a lot between JDK versions, especially after 8U.

10:26.940 --> 10:32.180
What we used to have to do is use a corn shell script to basically take a patch and then

10:32.180 --> 10:38.460
mess the paths in the patch around to match your target tree, which was tricky.

10:38.460 --> 10:42.540
What you can do nowadays with the current new workflows is the opposite.

10:42.540 --> 10:46.900
If you're trying to backport a patch to 8U, for example, and the paths are all wrong,

10:46.900 --> 10:52.460
what I suggest you do is prior to trying to backport the patch, move the path files

10:52.460 --> 10:57.980
as they exist in 8U, in your local clone, to the patch that matches the source, the

10:57.980 --> 11:03.780
path from the patch you're trying to backport, which is a little counterintuitive.

11:03.780 --> 11:08.580
Commit that, but then that means when you pick the patch, you don't have any path conflicts,

11:08.580 --> 11:10.820
and you just have all the other problems to deal with instead.

11:10.820 --> 11:16.780
Once that's done, you can then revert the original commit, and the final delta is as

11:16.860 --> 11:19.940
if the commits, the fixups were all in the right place.

11:19.940 --> 11:25.140
You can either squash that yourself, rebase locally, or push it to get, and the gamebook

11:25.140 --> 11:31.420
and JDK bots would do that anyway when the commit was eventually accepted and integrated.

11:31.420 --> 11:33.740
I must have like seconds left, I guess.

11:33.740 --> 11:37.100
Just in passing, I use this all the time.

11:37.100 --> 11:41.900
You can type, I use this as a shorthand to open every file matching a particular regular

11:41.940 --> 11:46.540
expression in my editor in one go, and then I can, for quick substitutions, across a full

11:46.540 --> 11:47.740
tree.

11:47.740 --> 11:49.820
One last one then, a UI thing.

11:49.820 --> 11:55.220
I'm a complete holdout for Wayland, so that was a fascinating talk, but I'm still on X.

11:55.220 --> 11:59.860
When you run some of the tests for client stuff, which we're using AWT robot, and it

11:59.860 --> 12:04.820
moves to the mouse pointer or keyboard input, that can be a little confusing if you've

12:04.820 --> 12:08.620
paged off to do an email while you're waiting for the test to run, but also it can fail

12:08.620 --> 12:11.460
sometimes in esoteric environments.

12:11.500 --> 12:15.980
This is a real example of a backport I was doing last week with five new tests and all

12:15.980 --> 12:21.700
swing ones, four of them passed and one failed for me for who knows why.

12:21.700 --> 12:26.020
The solution in the next environment at least is a tool called Zephyr.

12:26.020 --> 12:29.020
It's just an X server in an X client.

12:29.020 --> 12:34.620
Fire that up, you get a little mini X window, run a terminal inside it, try running the tests

12:34.620 --> 12:35.620
in that.

12:35.620 --> 12:40.220
It isolates all of the mouse and keyboard operations from your main desktop, and in that

12:40.260 --> 12:44.260
circumstance all the tests pass and I have confidence they're okay.

12:44.260 --> 12:47.700
See how I'm closing?

12:47.700 --> 12:54.460
I have to say, as I said, it's fun and it's a community thing, but I have to reiterate

12:54.460 --> 12:57.860
one line from the excellent cheat sheet you were all earlier.

12:57.860 --> 13:03.380
You're quite close to the customer and there are a few safety nets, so be careful.

13:03.380 --> 13:05.580
The reviewers are fairly overburdened.

13:05.620 --> 13:12.620
They do a fantastic job, but you take some time over the patches and make sure that they

13:12.620 --> 13:14.620
update their high quality for everyone.

13:14.620 --> 13:15.620
That's it.

13:15.620 --> 13:16.620
Thank you.

13:16.620 --> 13:19.620
Yeah, have we got any questions?

13:19.620 --> 13:20.620
Hi.

13:20.620 --> 13:23.620
I'll send you a mic.

13:23.620 --> 13:25.620
Oh, okay.

13:25.620 --> 13:27.620
Sorry, just one little thing.

13:27.660 --> 13:32.660
I just came in at the end, you were talking about fixing up patches and stuff.

13:32.660 --> 13:33.660
Yeah.

13:33.660 --> 13:39.660
So when we completely relay out the source code for JDK9, those scripts that were actually

13:39.660 --> 13:44.660
put in the bin directory that actually will transfer patches between the old and new layout,

13:44.660 --> 13:46.660
you may or may not have found them.

13:46.660 --> 13:48.660
I can't remember the name of them either.

13:48.660 --> 13:50.660
Unshuffle patch.

13:50.660 --> 13:52.660
Unshuffle patch.

13:52.700 --> 13:54.700
I don't know whether they're useful, but I just let him mention them.

13:54.700 --> 14:01.700
Well, so Andrew Hughes maintained the 9TW, well, he maintained that script past 9U's

14:01.700 --> 14:05.700
life a little bit to further facilitate that, but I think it might be dead now.

14:05.700 --> 14:08.700
There was somebody over here, yeah.

14:08.700 --> 14:14.700
I'm going to say if there are anything that you can do about it, I can't remember the

14:14.700 --> 14:16.700
name of the either...

14:16.700 --> 14:18.700
Unshuffle patch.

14:18.740 --> 14:22.740
I'm going to say if there are anything that you can do about it.

14:22.740 --> 14:23.740
Yeah.

14:23.740 --> 14:25.740
Thank you very much.

14:25.740 --> 14:27.740
Yeah, I had a question about testing my back port.

14:27.740 --> 14:32.740
How can I make sure that I sufficiently test my back port if, say, for example, I'm porting

14:32.740 --> 14:35.740
a fix that doesn't have a regression test?

14:35.740 --> 14:37.740
Okay.

14:37.740 --> 14:39.740
That's interesting.

14:39.740 --> 14:46.740
So I think first thing is that unless you're really sure you don't need to run the tier

14:46.780 --> 14:54.780
one tests anyway, but flag it with your sponsor or reviewer, because it might be that they

14:54.780 --> 15:00.780
need more test coverage upstream in a newer tree anyway, and that should be back ported with it.

15:00.780 --> 15:07.780
Well, you might want to go and look at the justification that was given for there being

15:07.780 --> 15:13.780
no regression test when it was done in mainline and say and read about questions the reviewers

15:13.820 --> 15:17.820
asked then and what the actual fixer said.

15:17.820 --> 15:25.820
I mean, in theory, any fix that doesn't have a regression test needs to have some keyword

15:25.820 --> 15:27.820
attached, which explains why.

15:27.820 --> 15:29.820
If it's a dot fix, it's pretty obvious.

15:29.820 --> 15:31.820
If it's test itself, it's pretty obvious.

15:31.820 --> 15:36.820
Most other things, there can be like no-reg build.

15:36.820 --> 15:40.820
It's just fixing a build problem, things like that.

15:40.860 --> 15:44.860
So go look for the clues as to what to do in the mainline fix.

15:44.860 --> 15:50.860
You can at least run all the tests from the subcomponent of where that fix was done.

15:50.860 --> 15:53.860
So that's what I usually do.

15:53.860 --> 15:57.860
Because tier one is not usually running all the subcomponents tests there, but if you

15:57.860 --> 16:02.860
do a single chain in one area, then you just run all the tests there.

16:02.860 --> 16:09.860
Yeah, that GitHub actions things runs in a very limited set of tests, very, very limited.

16:10.820 --> 16:11.860
Thank you.

