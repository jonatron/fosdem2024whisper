WEBVTT

00:00.000 --> 00:10.240
So, my name is Mitri, I'm working for Linaro.

00:10.240 --> 00:18.920
Today I'm going to talk a little bit about the Linux Yopto, a fairly unused Linux kernel

00:18.920 --> 00:22.040
or Linux BSP for Yopto.

00:22.040 --> 00:26.120
About me, I've been working on both Open Embedded and Linux Kernel and contributing them since

00:26.120 --> 00:27.120
2007.

00:27.120 --> 00:32.480
Maybe some of you guys remember Open Zaurus, I've been using Open Zaurus but not contributing

00:32.480 --> 00:37.960
to it and started when it became on-stream.

00:37.960 --> 00:49.440
So, Linux came about 2000 commits and in our part of the Qualcomm ecosystem, we are working

00:49.440 --> 00:55.640
on the Qualcomm devices and I'm maintaining the Metaclick-com, the upstream and the open

00:55.640 --> 00:59.240
source BSP for the Qualcomm devices.

00:59.240 --> 01:07.080
And this talk is based on our experience with supporting or providing the canals.

01:07.080 --> 01:10.080
Should I move somewhere?

01:10.080 --> 01:13.120
With providing the canals for the Metaclick-com.

01:13.120 --> 01:19.680
So typical Open Embedded board support package, of course it contains Linux kernel.

01:19.680 --> 01:23.600
First come a recipe, custom.

01:23.600 --> 01:28.080
Initially the BSP will find their own recipe, their own way to do things.

01:28.080 --> 01:31.160
They have the source you write points into the Git tree.

01:31.160 --> 01:33.400
Yeah, sure.

01:33.400 --> 01:38.640
Sometimes this Git tree tracks the whole development history with all the tries, with all the attempts.

01:38.640 --> 01:44.560
Or sometimes it is just written for each major release or sometimes it's a mixture of both.

01:44.560 --> 01:46.680
So yeah, Roberto, the fix of the fix.

01:46.680 --> 01:52.600
It is not an imaginary thing, it is what I saw in one of the BSPs.

01:52.600 --> 01:55.560
Do you know how to track if the patch has been ever sent to upstream?

01:55.560 --> 01:57.840
What's the status of that patch?

01:57.840 --> 01:58.840
No.

01:58.840 --> 01:59.840
Which version is it?

01:59.840 --> 02:05.120
Well, if you're lucky, it is a long term support kernel, which you can up to the latest

02:05.120 --> 02:06.120
LTS release.

02:06.120 --> 02:09.440
I tell you, if you're lucky.

02:09.440 --> 02:13.520
And security updates, if you're extremely lucky.

02:13.520 --> 02:14.520
How to configure?

02:14.520 --> 02:20.200
Yeah, there will be usually a different config file either in the layer itself or in the

02:20.200 --> 02:21.520
same Git tree.

02:21.520 --> 02:24.280
So any idea how to upgrade it?

02:24.280 --> 02:33.040
Yeah, or how to enable the net filter or an other obscure option that the BSP vendor did

02:33.040 --> 02:35.040
not enable for you.

02:35.040 --> 02:37.520
Trouble some.

02:37.520 --> 02:40.240
And yeah, everybody does it this way.

02:40.240 --> 02:41.240
I think so.

02:41.240 --> 02:44.440
Well, I thought so.

02:44.440 --> 02:50.240
We tried to change this way for us.

02:50.240 --> 02:51.240
Linux Yachto.

02:51.240 --> 02:58.840
I knew about it for ages because it was the kernel that was used by OECore, by the core

02:58.840 --> 03:01.600
layer for the OpenEmbedded for Yachto.

03:01.600 --> 03:03.960
It was used for the QEMO machines.

03:03.960 --> 03:06.640
It has been used for some of the default BSPs.

03:06.640 --> 03:08.640
But why should I pay attention to it?

03:08.640 --> 03:10.120
I have my own kernel.

03:10.120 --> 03:14.200
Well, not quite.

03:14.200 --> 03:17.560
We found that it follows stable releases.

03:17.560 --> 03:20.560
It also follows the latest Linux release.

03:20.560 --> 03:23.400
It tracks the release canals.

03:23.400 --> 03:28.120
It has a very powerful kernel configuration tool based on the fragments, based on the

03:28.120 --> 03:30.560
internal scripting language.

03:30.560 --> 03:34.480
And it is endorsed by the Yachto project and the OpenEmbedded layer program.

03:34.480 --> 03:37.800
And that's actually what made us to look into it.

03:37.800 --> 03:42.880
We thought about making Metacore actually certified for Yachto project compatible layer

03:42.880 --> 03:43.880
program.

03:43.880 --> 03:47.960
And it is one of the recommendations.

03:47.960 --> 03:48.960
Sounds perfect.

03:48.960 --> 03:55.920
Well, all the stuff, all the DevConfig, all the points from the previous slides have been

03:55.920 --> 03:56.920
pointed.

03:56.920 --> 03:57.920
Yeah.

03:57.920 --> 04:03.080
The problem was that nobody uses it.

04:03.080 --> 04:05.000
We are trying to do it.

04:05.000 --> 04:11.000
So some literally small how-to.

04:11.000 --> 04:12.000
Yeah.

04:12.000 --> 04:16.520
This reminds me of one of the talks of reading the Emacs config.

04:16.520 --> 04:22.720
But I will be reading the Metacore configuration files.

04:22.720 --> 04:26.240
First of all, the recipe itself is in OECore.

04:26.240 --> 04:28.640
We do not have to provide any additional details.

04:28.640 --> 04:30.640
We do not provide the Git repo.

04:30.640 --> 04:32.960
We do not provide anything.

04:32.960 --> 04:35.880
The default is same.

04:35.880 --> 04:38.480
We just say, yeah, let's use the defaults.

04:38.480 --> 04:40.040
Let's enable it for our machine.

04:40.040 --> 04:41.040
Q-com.

04:41.040 --> 04:44.040
R&D is our OpenEmbedded machine.

04:44.040 --> 04:47.360
We will be using our paths and the bonus stuff.

04:47.360 --> 04:50.080
There will be a lot of the files described in the configuration.

04:50.080 --> 04:57.840
There will be a lot of the files in the SC format and the CFG format that should describe

04:57.840 --> 05:00.240
different options for different machines.

05:00.240 --> 05:03.280
We just need to enable a single root file.

05:03.280 --> 05:10.080
The kernel.yokto class will get all the files that are beneath that.

05:10.080 --> 05:16.240
So we do not have to list anything else in the source URI.

05:16.240 --> 05:19.400
If you need, you can add more of the configuration options.

05:19.400 --> 05:26.800
You can enable other features just by adding another append in your distro or in your enablement

05:26.800 --> 05:27.800
layer.

05:27.800 --> 05:28.800
That is it.

05:28.800 --> 05:29.800
You do not have to patch anything.

05:29.800 --> 05:32.280
You do not have to patch the DevConfig in either of the layers.

05:32.280 --> 05:41.560
You do not have to create something that tracks, oh, that was the DevConfig from that layer.

05:41.560 --> 05:43.720
The options changed.

05:43.720 --> 05:46.360
It also tracks stable, as I said.

05:46.360 --> 05:48.520
So we do not have to upgrade the versions.

05:48.520 --> 05:56.640
We do not have to upgrade anything when there is a new release from this stable team.

05:56.640 --> 06:04.680
Oh, sorry, one button.

06:04.680 --> 06:05.680
Patches.

06:05.680 --> 06:12.120
Of course, the BSP layer has tons of patches, hundreds of patches.

06:12.120 --> 06:16.040
We have to list all of them.

06:16.040 --> 06:17.040
They come in a series.

06:17.040 --> 06:20.040
This is just a few lines.

06:20.040 --> 06:22.800
In our layer, there are currently 78.

06:23.800 --> 06:29.120
We are trying to limit them to some same amount.

06:29.120 --> 06:33.360
And a bonus feature, bonus point.

06:33.360 --> 06:39.000
Because this is a recite from OECore, we have to track upstream status.

06:39.000 --> 06:45.000
So for each of the patches, there will be upstream status trailer that talks, yes, this

06:45.000 --> 06:46.600
patch has been submitted.

06:46.600 --> 06:47.600
Oh, sorry.

06:47.600 --> 06:50.600
We did not submit this patch yet.

06:51.600 --> 06:57.280
History is no longer written in some obscure git tree.

06:57.280 --> 07:02.600
There is all the history of the patches comes from the layer BSP.

07:02.600 --> 07:07.120
As the user, you can take a look at any pointers and find, okay, yeah, these patches have been

07:07.120 --> 07:09.280
enabled for this and that platform.

07:09.280 --> 07:11.400
And they have been changed this and that way.

07:11.400 --> 07:17.000
Oh, and when we're basing from 6.5 to 6.6, oh, they did this and that mistake, and I

07:17.000 --> 07:18.400
know how to fix it.

07:18.400 --> 07:22.840
So the whole history, the whole development is visible to the, well, is visible to the

07:22.840 --> 07:27.600
developers, is visible to the users of our layer.

07:27.600 --> 07:29.760
Config fragments.

07:29.760 --> 07:34.000
As I said, there is a powerful system of the config fragments.

07:34.000 --> 07:39.560
They have the SSE files that describe, okay, how it all beams together.

07:39.560 --> 07:44.840
And of course, the CFG files, the parts of the actual configuration.

07:44.840 --> 07:48.760
And SSE, they provide a street-like structure.

07:48.760 --> 07:53.520
They can include other SSE files or they can include config files.

07:53.520 --> 07:59.080
So there is a huge set of default features that you can enable.

07:59.080 --> 08:07.520
You just pull files from the default set that has been written for you by Richard, by Bruce

08:07.520 --> 08:10.800
Asheville.

08:10.800 --> 08:13.520
Several downsides.

08:13.520 --> 08:18.360
There is no control over the exact kernel version.

08:18.360 --> 08:22.840
This is all done by Bruce Asheville, by the maintainer of Linux Yachto.

08:22.840 --> 08:28.720
And when he upgrades to the next version, yeah, when is his decision.

08:28.720 --> 08:34.960
Before this new year, he decided to let everybody stay calm.

08:34.960 --> 08:40.560
And so he delays upgrading to 6.6 LTS for several weeks.

08:40.560 --> 08:45.520
And unless you know what's happening, this can cause some confusion.

08:45.520 --> 08:52.160
So we had to ask Bruce what's happening.

08:52.160 --> 08:55.080
Sometimes Linux Yachto gets delayed.

08:55.080 --> 08:56.280
Sometimes there are additional patches.

08:56.280 --> 09:02.760
Well, in fact, as it is a BSP for several devices, it has additional patches.

09:02.760 --> 09:12.640
And you have to understand how that corresponds to your device, how this conflicts with your

09:12.640 --> 09:15.480
patches.

09:15.480 --> 09:18.240
And the most important thing.

09:18.240 --> 09:23.160
So previously, you can easily have a set of developers working on just Git tree for your

09:23.160 --> 09:24.160
kernel.

09:24.160 --> 09:25.160
They do their job.

09:25.160 --> 09:27.240
They do it all right.

09:27.240 --> 09:33.480
They just tell you, OK, this is the Git commit that you should be pulling into your BSP layer.

09:33.480 --> 09:34.640
Yeah, OK.

09:34.640 --> 09:41.120
Now it is also responsibility of the maintainer of the corresponding layer to actually see

09:41.120 --> 09:47.320
what's going on, to work in close collaboration with the kernel developers.

09:47.320 --> 09:54.800
In our case, I'm working also as a reviewer for the patches being submitted by our developers

09:54.800 --> 10:01.840
and by Qualcomm developers enabling the particular features because sometimes they are not.

10:01.840 --> 10:07.520
So you can no longer just depend on being, oh, I'm Yachto developer.

10:07.520 --> 10:09.080
I'm open and better developer.

10:09.080 --> 10:12.600
You have to be kernel developer too.

10:12.600 --> 10:18.640
And the last but not least, so what if we have several hundred of BSP patches?

10:18.640 --> 10:19.840
How do you track them?

10:19.840 --> 10:27.800
How do you actually manage them so that it does not become the mess?

10:27.800 --> 10:36.320
So we solved that by splitting them into the series.

10:36.320 --> 10:41.080
And so we actually are working with, as I said, with Qualcomm people just, OK, you cannot

10:41.080 --> 10:45.760
say that, yeah, these hundred patches are for to enable this platform.

10:45.760 --> 10:49.960
You have to say, yeah, this is a feature, this is a 10 patches enabling this feature.

10:49.960 --> 10:52.760
These are 15 patches enabling another feature.

10:52.760 --> 11:00.120
And so splitting and tracking different patch sets separately.

11:00.120 --> 11:04.840
So rolling see, of course, there is the Linux Yachto itself repository, which has all the

11:04.840 --> 11:13.080
branches, all the patches, all the history from prehistoric times till the recent 6.6.

11:13.080 --> 11:15.080
Yachto can all cache.

11:15.080 --> 11:19.960
That is what I told you when I said that you are pulling the config fragments from the

11:19.960 --> 11:21.160
upstream.

11:21.160 --> 11:26.680
This is the repository with all the configuration fragments, with all the configuration scripts

11:26.680 --> 11:37.080
that your layer will pull, that will combine into the final kernel configuration.

11:37.080 --> 11:38.560
Yeah.

11:38.560 --> 11:44.720
Our unproud Metacucom, the upstream Qualcomm layer.

11:45.480 --> 11:52.000
If you are working on the, for some reason, Qualcomm robotics or on Qualcomm robotics

11:52.000 --> 11:56.880
platform, or if you are thinking about using the Yachto for your phone for some reason,

11:56.880 --> 12:00.560
and it works, please take a look.

12:00.560 --> 12:03.120
This is the area that you might be interested.

12:03.120 --> 12:06.240
And yeah, of course, yeah, linear services.

12:06.240 --> 12:11.400
We are linear development services, and we now have an account on Mastodon.

12:11.480 --> 12:15.280
So please join the followers, and of course we are hiring.

12:15.280 --> 12:17.080
So that's it.

12:17.080 --> 12:18.080
Ah!

12:18.080 --> 12:19.080
Yeah.

12:19.080 --> 12:20.080
Questions?

12:20.080 --> 12:21.080
Questions.

12:21.080 --> 12:22.080
Questions.

12:22.080 --> 12:23.080
Hello.

12:23.080 --> 12:51.080
How does the feature set from your kernel compares to some internal developer, the standard kernel

12:51.080 --> 12:52.080
Qualcomm provides?

12:52.080 --> 12:57.040
So I'm not working with Qualcomm, but I see often the big differences between the vendor

12:57.040 --> 13:00.360
kernel with thousands of patches compared to what is upstream.

13:00.360 --> 13:01.360
Yeah.

13:01.360 --> 13:05.520
So as I said, we are working for the Qualcomm upstream, or working on Qualcomm upstream

13:05.520 --> 13:06.880
enablement.

13:06.880 --> 13:12.800
So we are tracking what is going upstream, and we are developing, and we are sending patches

13:12.800 --> 13:13.800
upstream.

13:13.800 --> 13:21.800
So yes, right now there is a talk, or they just have been talked about different Qualcomm

13:21.800 --> 13:24.560
kernels in another building.

13:24.560 --> 13:25.840
You might be interested in statistics.

13:25.840 --> 13:32.680
In our case, as I said, currently for this metric, we call for enabling platforms that

13:32.680 --> 13:35.160
have not been fully integrated upstream.

13:35.160 --> 13:37.880
We have about 80 patches.

13:37.880 --> 13:38.880
Ah!

13:38.880 --> 13:39.880
Oh!

13:39.880 --> 13:41.880
Yeah, it works.

13:41.880 --> 13:55.880
So, internal deep tree, before we switch to Linux Yachter, contained from 150 to 200 patches.

13:55.880 --> 14:01.360
And so one of the reasons for switchover, and one of the points was that we were able

14:01.360 --> 14:02.560
to clean up that stuff.

14:02.560 --> 14:11.440
We were able to drop several, okay, I think it was about 20 patches.

14:11.520 --> 14:14.560
Just touching bit of config in a different way.

14:14.560 --> 14:17.000
So everything now goes to the Yachter.

14:17.000 --> 14:24.120
We were able to drop several obscure patches that had been lingering for years.

14:24.120 --> 14:31.680
And to move those patches actually into upstream, send them to upstream, rebook them and drop

14:31.680 --> 14:34.480
them finally.

14:34.480 --> 14:37.160
So I don't know if that answers your question.

14:37.160 --> 14:39.400
This doesn't work for the downstream development.

14:39.400 --> 14:43.440
Well, you are window with thousands of patches.

