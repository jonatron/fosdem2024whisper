WEBVTT

00:00.000 --> 00:10.000
I haven't said anything yet.

00:10.000 --> 00:11.000
All right.

00:11.000 --> 00:13.400
Good afternoon, everybody.

00:13.400 --> 00:18.640
This is a front-end journey back to Rails, or how I learned to stop worrying and love

00:18.640 --> 00:20.600
the hot wire.

00:20.600 --> 00:26.520
This is a story of how I strayed really, really far from what you'd call vanilla Rails as

00:26.520 --> 00:29.520
far as building new eyes goes.

00:29.520 --> 00:36.320
I got slightly fed up and then came back, discovered that it had changed a lot, and

00:36.320 --> 00:40.520
was really impressed with what I saw, and now I love it.

00:40.520 --> 00:43.160
So, a bit of a backstory.

00:43.160 --> 00:50.000
I discovered it would be on Rails in 2010, just as V3 had come out.

00:50.000 --> 00:56.840
I happily avoided the V2 merb curve-offal, if anybody remembers.

00:56.840 --> 01:03.520
I started working professionally in Rails in 2012 and in the last, what is this now,

01:03.520 --> 01:04.520
14 years?

01:04.520 --> 01:05.520
No, 12 years, sorry.

01:05.520 --> 01:06.760
But it must.

01:06.760 --> 01:14.200
I've worked in very different contexts, agency as a freelance, and now in a product company,

01:14.200 --> 01:20.360
which is called NodalView, where we help real estate professionals become even better real

01:20.360 --> 01:25.560
estate professionals with a lot of digital tools.

01:25.560 --> 01:31.000
In my spare time, I play table top RPGs a lot.

01:31.000 --> 01:36.080
I mentioned it one because it's a hobby that also lends itself to potentially infinite

01:36.080 --> 01:42.680
complexity, and also because it will be relevant later for the demo I'm going to show you,

01:42.680 --> 01:48.360
because it is about managing the infinite complexity of playing table top RPGs.

01:49.360 --> 01:53.000
So, Rails.

01:53.000 --> 01:59.240
Across the years, Rails, at least the front-end part of Rails, has changed a lot.

01:59.240 --> 02:05.520
We've gone through a lot of iterations of trying stuff, following the front-end guys,

02:05.520 --> 02:13.000
importing technologies, trying them, and then changing completely 18 months later.

02:13.000 --> 02:15.160
We could say it's been somewhat chaotic.

02:15.160 --> 02:19.640
So we've had a few attempts.

02:19.640 --> 02:28.160
Like, please raise your hand if you felt five of these across your career.

02:28.160 --> 02:29.880
All right, yes.

02:29.880 --> 02:32.760
All of them keep your hand up.

02:32.760 --> 02:34.240
All right.

02:34.240 --> 02:42.120
Yeah, so this is pretty much the trajectory that I followed, maybe not quite all of them,

02:42.120 --> 02:43.120
or maybe yes.

02:43.120 --> 02:44.120
I'm not sure anymore.

02:44.120 --> 02:47.880
It's a blur, really.

02:47.880 --> 03:01.600
And after all of this, so circa 2015, 2016, I kind of settled with React as a choice for

03:01.600 --> 03:04.920
front-end in a Rails app.

03:04.920 --> 03:11.320
And it started relatively soft, like small bits of React, small React component, loading

03:11.320 --> 03:16.360
a small tree in a page that still Rails.

03:16.360 --> 03:21.040
But that did not last long.

03:21.040 --> 03:24.080
Quickly gone to entire page.

03:24.080 --> 03:30.480
And then, well, we're loading the data and then rendering a Rails view and then rendering

03:30.480 --> 03:32.280
React again.

03:32.280 --> 03:37.560
So, might as well fetch the data directly from React.

03:37.560 --> 03:41.240
That would be easier.

03:42.160 --> 03:44.160
And we tried with REST and you know what happened.

03:44.160 --> 03:50.160
When what happens when you try to do an API with REST, lots and lots and lots of controllers.

03:50.160 --> 03:53.760
So there might be something simpler.

03:53.760 --> 03:57.640
And that's when GraphQL revealed itself.

03:57.640 --> 04:01.880
Brings also a lot of complexity.

04:01.880 --> 04:05.160
Anyone using GraphQL professionally right now?

04:05.160 --> 04:08.680
Yeah.

04:09.600 --> 04:13.280
Well, we're still using Rails routing.

04:13.280 --> 04:16.040
We're still using Rails a little bit.

04:16.040 --> 04:19.240
Might as well.

04:19.240 --> 04:25.000
So we introduced ReactRouter, client-side routing in one shape or form.

04:25.000 --> 04:32.640
And we're straying further and further away from React until we're kind of managing two

04:32.640 --> 04:36.040
applications in a single code base.

04:36.040 --> 04:38.560
And it's got some upsides.

04:39.440 --> 04:40.440
And really good.

04:40.440 --> 04:45.360
It gives us excellent UI fidelity, as we like to say.

04:45.360 --> 04:49.240
It's really good for delighting users and clients.

04:49.240 --> 04:53.000
It's really what we want as a result.

04:53.000 --> 04:55.160
But it comes at a huge cost.

04:55.160 --> 05:01.840
It essentially means you need to know two jobs if you need to shape a feature.

05:01.840 --> 05:11.120
And around that time, I tried looking at ways to make that easier.

05:11.120 --> 05:17.840
And this was also the era where React meta frameworks came.

05:17.840 --> 05:19.720
Started coming out.

05:19.720 --> 05:22.720
One of them was and still is.

05:22.720 --> 05:26.200
Next.js, which is kind of similar to Rails.

05:26.200 --> 05:27.200
It's very opinionated.

05:27.200 --> 05:28.200
It's got a lot of defaults.

05:28.200 --> 05:30.280
It does a lot of things for you.

05:30.280 --> 05:33.440
It does a lot of great stuff.

05:33.440 --> 05:35.640
But it doesn't really solve the problem.

05:35.640 --> 05:39.400
We're still managing two stacks at once.

05:39.400 --> 05:46.160
We still need to have people that are very proficient in either or Rails or React or whatever

05:46.160 --> 05:48.160
framework we're using.

05:48.160 --> 05:53.320
Or both, ideally, if you want to be efficient about it.

05:53.320 --> 06:01.120
And I still felt a bit torn apart in the one job that I like to do well.

06:01.120 --> 06:07.000
I'm doing two jobs slightly less well.

06:07.000 --> 06:14.440
So we're now around the beginning of last year.

06:14.440 --> 06:15.840
And it's time for a choice.

06:15.840 --> 06:22.440
I don't feel as a developer I can keep on like this.

06:22.440 --> 06:29.000
Having one foot in the Rails world and Ruby world and the other foot in the JS world,

06:29.000 --> 06:32.600
it's very uncomfortable.

06:32.600 --> 06:33.880
So I made a decision.

06:33.880 --> 06:42.600
I was going to try one or the other, but not both at the same time.

06:42.600 --> 06:51.440
And since I'm a very optimistic person, I tried the least likely candidate first.

06:51.440 --> 07:00.880
So I tried to build an application, an entire full stack application using only Next.js.

07:00.880 --> 07:10.040
No backend, no API, no a lot of stuff.

07:10.040 --> 07:14.880
And I quickly realized that it was going to be harder than I thought.

07:14.880 --> 07:19.200
I was missing a lot of things daily, constantly.

07:19.200 --> 07:28.880
I hadn't realized how much Rails and Ruby gave me until I started generally missing it.

07:28.880 --> 07:33.000
And there wasn't a single day where I wasn't telling myself, yeah, I'm going to need Rails

07:33.000 --> 07:38.400
to do this at some point.

07:38.400 --> 07:39.900
And that's through.

07:39.900 --> 07:45.400
It wasn't a happy experience, to be honest.

07:45.400 --> 07:50.480
As you can see on my screen.

07:50.480 --> 07:53.280
I was missing a lot of features.

07:53.280 --> 07:57.160
Next.js doesn't have an ORM or we have ActiveRecord.

07:57.160 --> 07:58.880
It's not that it has a bad one.

07:58.880 --> 08:02.000
It doesn't have one altogether.

08:02.000 --> 08:07.400
Doesn't do background jobs, doesn't do file uploads by default.

08:07.400 --> 08:08.400
Deploy anywhere.

08:08.400 --> 08:10.200
It's kind of a joke.

08:10.200 --> 08:15.120
You can deploy your Next.js application everywhere, but you should really deploy it on Versailles

08:15.120 --> 08:20.600
if you want to make it good.

08:20.600 --> 08:21.920
And also it's not in Ruby.

08:21.920 --> 08:27.760
This is half a joke and also not.

08:27.760 --> 08:32.480
When you've been writing Ruby for more than 10 years, you don't realize how much you're

08:32.480 --> 08:36.960
going to miss the methods in Enumerable until you don't have them.

08:36.960 --> 08:43.160
And that's the same thing for a lot of cool APIs.

08:43.160 --> 08:49.960
When I was doing that, the React ecosystem was changing a lot very quickly.

08:49.960 --> 08:58.040
Rails had historically been the framework for building single page apps until it wasn't.

08:58.040 --> 09:02.680
And the industry took a nosedive into the complete opposite direction with something

09:02.680 --> 09:06.800
that they called server components.

09:06.800 --> 09:08.800
It's really hard to, it's a talk in itself.

09:08.800 --> 09:13.040
I'm not going to go into details.

09:13.040 --> 09:17.560
So now the code is written on the server, then it executes again on the client, but

09:17.560 --> 09:20.160
not all of it, just the one you mark use server.

09:20.160 --> 09:24.000
But the one you mark use client is only on the client, but not really.

09:24.000 --> 09:27.080
So it's complex.

09:27.080 --> 09:33.520
And it started getting, first of all, very exhausting, but also kind of weird.

09:33.520 --> 09:41.200
I don't know if you can read the content of this React component.

09:41.200 --> 09:44.480
And I don't know.

09:44.480 --> 09:51.600
For everybody at the back end at home, this is an SQL query right in the middle of the

09:51.600 --> 09:54.200
React component.

09:54.200 --> 10:02.280
I'm not sure how it makes me feel, but it's not good.

10:02.280 --> 10:04.280
So second attempt.

10:04.280 --> 10:10.040
Yeah, kind of obvious and high-signed.

10:10.040 --> 10:17.320
So I was still doing Rails at work every day, so I was constantly reminded of how much

10:17.320 --> 10:20.040
better it was.

10:20.040 --> 10:25.680
So this time I tried, okay, I'm going to do it with only Rails.

10:25.680 --> 10:30.840
Time to see what's new in the frontend part of Rails.

10:30.840 --> 10:38.680
And the goal was, I wanted to use Rails, like all of Rails, without sacrificing either the

10:38.680 --> 10:44.120
quality of the UI, the quality of the experience for the user, and the quality of the experience

10:44.120 --> 10:48.680
for me.

10:48.680 --> 10:53.000
So that means that I still want all that.

10:53.000 --> 11:00.880
So everything that I had gotten used to from the few years of React, obviously components,

11:00.880 --> 11:05.960
but all the cool features, and all the, more importantly, all the UI features that a user

11:05.960 --> 11:08.680
would expect.

11:08.680 --> 11:13.520
I can't legitimately tell a user, well, you know, it used to be good, but now I'm doing

11:13.520 --> 11:18.040
only Rails, so welcome back to 2010.

11:18.040 --> 11:20.000
That wouldn't quite work.

11:20.000 --> 11:25.520
So can I, could I actually do all of that?

11:25.520 --> 11:29.080
Let's find out.

11:29.080 --> 11:31.440
Components.

11:31.440 --> 11:38.320
Components used to not be a part of Rails, really, you could get a lot done with Partials,

11:38.320 --> 11:42.480
but now they are.

11:42.480 --> 11:45.800
There are two libraries that do that pretty well.

11:45.800 --> 11:49.160
The first one is your component that I will not be talking about.

11:49.160 --> 11:59.640
The second is Flex with a pH that I will be using in this talk and in my applications.

11:59.640 --> 12:07.080
So this Ruby object that is a component that will render bit of HTML at some point the

12:07.080 --> 12:15.760
same way a ERB partial would, except it looks more like a component.

12:15.760 --> 12:19.480
If you squint a lot, you might see a React component there.

12:19.480 --> 12:23.040
It's got a prop and it's got a render method.

12:23.040 --> 12:26.640
And that's the real basics of it.

12:26.640 --> 12:32.080
The major difference is that it's a plain old Ruby object.

12:32.080 --> 12:37.360
So this is already big for me, at least.

12:37.360 --> 12:38.360
It means two things.

12:38.360 --> 12:45.440
It means I cannot forget five years of best practices of designing and components.

12:45.440 --> 12:49.720
That also means that I can pretty much import one-to-one components that I've designed in

12:49.720 --> 12:51.800
React.

12:51.920 --> 13:00.480
That means that again, it's a plain Ruby object, so I can do any kind of Ruby in there.

13:00.480 --> 13:05.800
This is also the good place for what used to be a decorator object or a presenter object

13:05.800 --> 13:09.400
in older applications.

13:09.400 --> 13:15.600
In the same way that you can render a component partial, sorry, in your controller, you can

13:15.600 --> 13:19.040
render that component that I just showed you.

13:19.040 --> 13:23.920
Same way that we'll do exactly what you think it does.

13:23.920 --> 13:25.520
Except that this would be an entire view.

13:25.520 --> 13:29.520
So you don't even have to do...

13:29.520 --> 13:32.440
You don't even have to do ERB for your views.

13:32.440 --> 13:35.160
You don't have to do ERB for your layouts.

13:35.160 --> 13:38.280
You don't have to do ERB at all, which is pretty cool.

13:38.280 --> 13:41.680
Because I don't know about you, but I don't really like ERB.

13:41.680 --> 13:48.280
It's really got a really clunky syntax, not a fan.

13:48.280 --> 13:50.320
So we can go a little bit further with components.

13:50.320 --> 13:58.040
You can add slots, which would allow you to define a skeleton for something that takes

13:58.040 --> 14:05.880
children like you would in React and call them later with a block.

14:05.880 --> 14:07.160
This would be...

14:07.160 --> 14:09.360
This represents a pop-over menu.

14:09.360 --> 14:18.240
It's got a trigger and it's got a content that will be revealed once you click on it.

14:18.240 --> 14:21.640
There will be a demo in just a minute.

14:21.640 --> 14:27.640
But what about interactivity?

14:27.640 --> 14:34.400
This brings us to the first part of what Rails now provides as default tools.

14:34.400 --> 14:35.720
It's called stimulus.

14:35.720 --> 14:41.560
And it's a very, very thin wrapper around a DOM object with a few lifecycle methods

14:41.560 --> 14:42.800
and event antlers.

14:42.800 --> 14:47.280
It's really, really bare bones, but it's enough.

14:47.280 --> 14:53.720
And in that case, it's enough to give us a possibility to bind click on that trigger

14:53.720 --> 15:01.600
and show the menu with a class and transition.

15:01.600 --> 15:06.200
And this is what the stimulus code looks like.

15:06.200 --> 15:09.800
Same it's got a connect method.

15:09.800 --> 15:15.000
You might remember a component that mounts from React, if you've used React, that's the

15:15.000 --> 15:17.240
exact same thing.

15:17.240 --> 15:22.600
And a few methods that do what a pop-over does, show clean, show high clean, that's not really

15:22.600 --> 15:26.040
complicated.

15:26.040 --> 15:33.640
I think this is the only place in the application that I'm going to show you that actually uses

15:33.640 --> 15:36.960
developer level JavaScript.

15:36.960 --> 15:42.800
The rest of it is either turbo or stimulus.

15:42.800 --> 15:43.800
Little bonus.

15:44.560 --> 15:48.640
I don't know if you can see it, but first line of the connect method, there's a use

15:48.640 --> 15:49.840
click outside.

15:49.840 --> 15:53.200
If you're missing hooks from React, don't worry.

15:53.200 --> 15:54.200
They're still there.

15:54.200 --> 15:58.840
There are hooks libraries for stimulus as well.

15:58.840 --> 16:06.040
So you can mix and match regular behavior in your stimulus components.

16:06.040 --> 16:09.520
All right, time for a little demo of what I just said.

16:10.240 --> 16:13.240
How do I get out of this?

16:18.240 --> 16:22.240
I won't see it here.

16:26.240 --> 16:35.240
So this is the application that I'm using to manage my table top RPG tables.

16:35.240 --> 16:40.560
And this is the pop-over that I just showed you with just a few lines of stimulus.

16:40.560 --> 16:42.840
And this is a normal pop-over is the point.

16:42.840 --> 16:46.240
It's just the same as you would expect.

16:46.240 --> 16:51.240
Coming back to the talk.

16:51.240 --> 16:53.480
There we go.

16:53.480 --> 16:59.800
The second part that I really, really wanted to keep because I just got it from React is

16:59.800 --> 17:00.800
suspense.

17:00.800 --> 17:05.960
You might remember suspense as the thing that loads your bits of JavaScript at the time

17:05.960 --> 17:06.960
that they're needed.

17:06.960 --> 17:16.560
But it had recently evolved, allowing you to put some kind of network request in a component

17:16.560 --> 17:21.600
and it would suspend, that's the name, until the network had finished and then it would

17:21.600 --> 17:28.160
show the component with the data in it and would display a fallback in the meantime.

17:28.160 --> 17:33.080
Like some sort of loading screen, spinners, Keletun or something.

17:33.080 --> 17:38.720
And turns out that this is really, really easy to do in Rails now.

17:38.720 --> 17:41.120
This is what it looks like.

17:41.120 --> 17:45.600
So this is the moment where we introduced the second really important part of modern front-end

17:45.600 --> 17:51.320
in Rails, Turbo and more specifically Turbo Frames.

17:51.320 --> 17:53.680
Remember iFrame from the 90s?

17:53.680 --> 17:57.000
This is similar but kind of better.

17:57.000 --> 18:05.360
So what we're doing here is calling a Turbo Frame, giving it a name and giving it a source

18:05.360 --> 18:08.680
which is another route in your application.

18:08.680 --> 18:10.560
Sorry.

18:10.560 --> 18:15.920
When the page containing the code on the top is going to be loaded, it's going to load

18:15.920 --> 18:19.320
the second page in the background.

18:19.320 --> 18:26.840
See if there's a frame with the same exact name on the other page and then show that.

18:26.880 --> 18:34.120
That's the part of the page that's got the frame with the same name.

18:34.120 --> 18:40.400
And you can still put your fallback in there in a block within your frame.

18:40.400 --> 18:43.280
It will appear until it's loaded.

18:43.280 --> 18:44.880
I'm going to show you what that does.

18:44.880 --> 18:48.000
So this is the frame on the other page.

18:48.000 --> 18:51.120
Major difference with React.

18:51.120 --> 18:56.640
This other page can absolutely be a real page that's got its own use.

18:56.640 --> 18:58.480
That reduces a lot of duplication.

18:58.480 --> 19:00.720
I'm going to show you.

19:00.720 --> 19:02.720
It's going to be easier to understand.

19:02.720 --> 19:05.840
With a demo I need to get out of there again.

19:05.840 --> 19:06.840
There we go.

19:06.840 --> 19:09.400
So this is the frame that I just showed you.

19:09.400 --> 19:11.000
No, this is not.

19:11.000 --> 19:13.040
I'm lying.

19:13.040 --> 19:19.600
This is the frame that I just showed you which is loading the list of the parties that belong

19:19.600 --> 19:20.600
to.

19:20.600 --> 19:24.240
But the list of the parties that belong to is also here.

19:24.240 --> 19:30.280
This is the same exact same code, same controller, no duplication.

19:30.280 --> 19:35.720
If I refresh the page, you see it.

19:35.720 --> 19:39.240
Just flash the loading screen and then load it.

19:39.240 --> 19:45.720
So that's how you do suspense in modern Rails.

19:45.720 --> 19:49.640
List one, inline forms.

19:49.640 --> 19:58.320
This is one of the big reasons why you would use frontend framework like React to do stuff.

19:58.320 --> 20:02.440
Same general ID.

20:02.440 --> 20:03.960
You define a turbo frame.

20:03.960 --> 20:09.120
This one doesn't have a source because it's not fetching a page right just yet.

20:09.120 --> 20:12.800
You have a link that explicitly points to that frame.

20:12.800 --> 20:17.440
So when you click on that link, instead of doing a full page reload and going to a page

20:17.440 --> 20:23.720
like a link would normally do, it's going to see if there's a content with the same

20:23.720 --> 20:28.040
frame name on the other page you're going to and then populate the content of that frame

20:28.040 --> 20:31.240
on your current page with that.

20:31.240 --> 20:34.480
And then you have an inline form.

20:34.480 --> 20:43.040
From the form page itself, it's mostly, very mostly normal Rails form.

20:43.040 --> 20:49.320
The UI.form that you see here just delegates to a form for that some standard Rails with

20:49.320 --> 20:56.520
the slight change of giving it a turbo action and a turbo frame.

20:57.520 --> 21:08.840
Caveat, I'm using the still unreleased new version of Turbo, Turbo 8 that just got dated

21:08.840 --> 21:12.080
to RC yesterday.

21:12.080 --> 21:17.080
So this is very fresh.

21:17.080 --> 21:20.280
It might be released this week.

21:20.280 --> 21:21.280
I hope.

21:21.280 --> 21:22.280
I really hope.

21:22.280 --> 21:25.560
It's really cool.

21:25.600 --> 21:29.920
So if it's a new record, I want to refresh the entire page.

21:29.920 --> 21:34.080
I'm going to create a full navigation with advance.

21:34.080 --> 21:40.440
If it's not a new record, if I'm editing, again, still with an inline form, I will just replace

21:40.440 --> 21:43.840
the content.

21:43.840 --> 21:51.280
Since I'm doing full navigation for the create action, I'm going to target the turbo frame

21:51.280 --> 21:53.960
at the top, which means the entire page.

21:53.960 --> 21:59.640
Otherwise, I will just refresh the frame I'm constrained into.

21:59.640 --> 22:03.640
And I want to stress that the controller is like the most vanilla controller.

22:03.640 --> 22:05.200
There's no magic here.

22:05.200 --> 22:11.400
This is just a normal Rails controller the same as 10 years ago, except maybe giving

22:11.400 --> 22:13.560
it a status if it fits.

22:13.560 --> 22:15.560
That's now needed.

22:15.560 --> 22:16.560
Demo.

22:17.560 --> 22:26.120
I think this is what I'm going to do here.

22:26.120 --> 22:29.200
So this is the link that I showed you before.

22:29.200 --> 22:31.280
Creates a form that I can barely see.

22:31.280 --> 22:32.280
Thanks, dark mode.

22:32.280 --> 22:34.280
I want to say test.

22:34.280 --> 22:36.280
There we go.

22:36.280 --> 22:38.280
Test, test, yes.

22:38.280 --> 22:39.280
Save.

22:39.280 --> 22:40.280
Boom.

22:40.280 --> 22:41.280
It's there.

22:41.280 --> 22:42.280
It's a thing.

22:42.280 --> 22:43.280
And now I can edit it.

22:44.280 --> 22:46.280
Test one.

22:46.280 --> 22:48.280
Super creative.

22:48.280 --> 22:51.280
And it's there.

22:51.280 --> 22:54.280
And it was very in line and very cool.

22:54.280 --> 22:59.280
That's inline forms.

23:02.280 --> 23:04.280
Loading states.

23:04.280 --> 23:09.280
If you were paying attention, you might have seen that when I was submitting these forms,

23:09.280 --> 23:10.280
the button changed.

23:10.280 --> 23:11.280
You got grayed out.

23:11.280 --> 23:12.280
You got disabled.

23:12.280 --> 23:14.280
And the text changed.

23:14.280 --> 23:20.280
The first part of that, I think disabled to buttons that are not doing a get action and

23:20.280 --> 23:26.280
all of the submit inputs, is done automatically by default by Turbo.

23:26.280 --> 23:33.280
And if you want to get a little fancy with it, you can add the Turbo submit with, that's

23:33.280 --> 23:39.280
a mouthful, arguments to that button and it will change the text while it is loading.

23:39.280 --> 23:41.280
That's also pretty cool.

23:41.280 --> 23:43.280
I think, do you want to see it again?

23:43.280 --> 23:44.280
Yes.

23:44.280 --> 23:45.280
All right.

23:47.280 --> 23:50.280
I'm running a little bit short on time.

23:50.280 --> 23:52.280
Where am I now?

23:52.280 --> 23:55.280
There we go.

23:55.280 --> 23:58.280
So I'm just going to do an edit one more time.

24:00.280 --> 24:03.280
So therefore test two.

24:03.280 --> 24:05.280
Look at the save button, please.

24:05.280 --> 24:07.280
There we go.

24:10.280 --> 24:11.280
All right.

24:11.280 --> 24:13.280
No, you stay.

24:13.280 --> 24:15.280
This is not for you.

24:16.280 --> 24:17.280
All right.

24:17.280 --> 24:19.280
So that was demo.

24:20.280 --> 24:21.280
Okay.

24:21.280 --> 24:22.280
This is the pool one.

24:23.280 --> 24:28.280
So all these really fast inline updates that I just showed you.

24:28.280 --> 24:29.280
Well, that's all what I'm good.

24:29.280 --> 24:31.280
That's easy to do in any technology really.

24:32.280 --> 24:41.280
What would be really cool is if when you update that post, everybody else that's on that

24:41.280 --> 24:46.280
page, like your party members in my demo application, would see the result immediately.

24:46.280 --> 24:51.280
And when you say that, that seems like it's a hard thing to implement.

24:51.280 --> 24:57.280
And if you've done it in another language or framework, you might think or have learned

24:57.280 --> 24:59.280
that it's hard to implement.

24:59.280 --> 25:01.280
No, it's not.

25:03.280 --> 25:09.280
Main part is you need to add that single keyword broadcast refreshes to the model that should

25:09.280 --> 25:12.280
refresh on the page that should be refreshed.

25:12.280 --> 25:15.280
You just add turbo stream from and the object.

25:15.280 --> 25:23.280
And the special case at the top, which I did in the wrong order I realized now, is a special

25:23.280 --> 25:28.280
case for when you're creating a record because you can't subscribe to record that doesn't

25:28.280 --> 25:30.280
exist yet, that doesn't really work.

25:30.280 --> 25:37.280
So the trick is to subscribe to a parent record and touch it when you create an as many association.

25:37.280 --> 25:39.280
And that's it.

25:39.280 --> 25:40.280
That's the whole thing.

25:40.280 --> 25:41.280
It's done.

25:41.280 --> 25:43.280
It's all refreshing.

25:43.280 --> 25:47.280
I'm just going to show you this one I'm really excited about.

25:49.280 --> 25:51.280
Again, I did that on the wrong space.

25:51.280 --> 25:52.280
There we go.

25:52.280 --> 25:56.280
So I had prepared a thing so you can see it.

25:56.280 --> 26:00.280
So test number two, I'm on the deleted.

26:00.280 --> 26:09.280
By the way, fancy confirm confirm dialogues also provided by turbo boom.

26:09.280 --> 26:10.280
It's gone.

26:10.280 --> 26:12.280
It's gone on the other side too.

26:14.280 --> 26:15.280
Thank you.

26:16.280 --> 26:21.280
I didn't make it, but I'm raising awareness.

26:21.280 --> 26:22.280
Let's see.

26:22.280 --> 26:26.280
Again, wrong space.

26:26.280 --> 26:27.280
This is hard.

26:27.280 --> 26:29.280
All right demo.

26:30.280 --> 26:32.280
Let's go back to playing.

26:32.280 --> 26:33.280
There we go.

26:34.280 --> 26:42.280
So yeah, if I'm honest, I think that covers about 80 to 90% of the common use cases of UI

26:42.280 --> 26:45.280
fidelity that you would ask in an application.

26:45.280 --> 26:52.280
And those tools that I've briefly gone over are versatile enough to do a lot more and

26:52.280 --> 26:57.280
they're getting a lot better as time goes.

27:00.280 --> 27:03.280
So yeah, for me at least it is mission accomplished.

27:06.280 --> 27:08.280
But wait, there's more.

27:10.280 --> 27:11.280
No, I like there's less.

27:11.280 --> 27:21.280
All of these things that I just showed you, they mean a lot of a lot fewer things to do

27:21.280 --> 27:23.280
to get to the same result.

27:24.280 --> 27:33.280
Meaning no more internal API is no more GraphQL no more 5000 rest controllers and J builders

27:33.280 --> 27:41.280
and you know, no more playing around with local state, at least very, very, very little,

27:41.280 --> 27:43.280
if not at all.

27:43.280 --> 27:47.280
No more duplicated logic across to half stacks.

27:47.280 --> 27:54.280
No more interminable asset compilations that take all of your GitHub action guillible time.

27:55.280 --> 28:01.280
By the way, plugging bun as a replacement for yarn or PNPM, bun is very cool.

28:02.280 --> 28:09.280
No more building and also hiring expertise in two different frameworks to do a thing.

28:10.280 --> 28:11.280
That's pretty cool.

28:13.280 --> 28:17.280
Yeah, lot, lot, lot less things to do.

28:17.280 --> 28:20.280
So of course this is a game of trade-offs.

28:20.280 --> 28:22.280
This is not a perfect solution.

28:23.280 --> 28:33.280
It's not as native like, as super cool as doing a full front-end framework.

28:34.280 --> 28:39.280
But on the other hand, it's sticking with the framework default a lot more.

28:39.280 --> 28:46.280
You get stuff done way quickly and you can realistically get stuff done alone if you're a solo developer,

28:46.280 --> 28:53.280
if you're just starting out, or if you want more bang for your hiring buck.

28:54.280 --> 28:56.280
But all of that means nothing.

28:56.280 --> 28:58.280
That means a lot.

29:00.280 --> 29:02.280
And that's the end of the talk.

29:11.280 --> 29:13.280
We have a little bit of time for questions.

29:14.280 --> 29:15.280
Yeah.

29:15.280 --> 29:17.280
Yeah, the live refresh result, the live reload.

29:17.280 --> 29:18.280
Yeah.

29:18.280 --> 29:19.280
What's that behind the scenes?

29:19.280 --> 29:20.280
Is it WebSockets?

29:20.280 --> 29:21.280
Yeah, it's WebSockets.

29:21.280 --> 29:23.280
It's all action cables, WebSockets.

29:23.280 --> 29:28.280
The question was, sorry, what library is that for the refresh?

29:28.280 --> 29:30.280
And it is in fact WebSockets.

29:30.280 --> 29:33.280
It's all action cable under the hood using the action cable from Rails.

29:35.280 --> 29:36.280
Yeah.

29:36.280 --> 29:44.280
I have also a comment, because I've also been looking into the data of the new turbo.

29:44.280 --> 29:54.280
And the refreshes does work well, but it's very important to also use a data turbo permanent on forms,

29:54.280 --> 29:58.280
because if you don't and you refresh all our users, then there's a full context.

29:58.280 --> 29:59.280
Yeah.

29:59.280 --> 30:00.280
Okay.

30:00.280 --> 30:04.280
So, full context, there are caveats, like you mentioned,

30:04.280 --> 30:13.280
especially when you have JS powered elements on the page, like a Tricks editor, like I just showed you.

30:13.280 --> 30:16.280
If you want to preserve their state, you need to do something about it.

30:16.280 --> 30:17.280
Yeah, that's right.

30:18.280 --> 30:19.280
Anyone else?

30:20.280 --> 30:21.280
Yeah.

30:21.280 --> 30:32.280
Do you consider a great solution, stand-on, angular or react application with RESTful APIs?

30:32.280 --> 30:35.280
Or, as you said, it's too hard.

30:35.280 --> 30:36.280
It's really too...

30:36.280 --> 30:37.280
So the question...

30:37.280 --> 30:38.280
Yeah.

30:38.280 --> 30:43.280
...personally love the syntax of the component, the Rails component.

30:43.280 --> 30:44.280
Okay.

30:44.280 --> 30:50.280
So the question is, would I still consider full front-end applications like React or Angular?

30:50.280 --> 30:55.280
Yes, but we have some at work.

30:55.280 --> 31:00.280
We have a big one at work, for example, and I'm certainly not going to throw that one away.

31:00.280 --> 31:03.280
But if I were starting a new application with...

31:03.280 --> 31:11.280
I did, and if it was a solo project or a very small team or an early-stage startup or just for fun, I'd definitely use this.

31:12.280 --> 31:23.280
And I wouldn't invest in a full front-end framework unless there was, A, a lot of money behind it and the real explicit use case for it now.

31:25.280 --> 31:26.280
Yeah.

31:26.280 --> 31:34.280
How hard would you say it is to migrate from the hellhole of having two different stacks to something like this?

31:34.280 --> 31:37.280
Can you do it partially or do you have at some point to...

31:37.280 --> 31:39.280
You could do it partially.

31:39.280 --> 31:42.280
The question was, sorry.

31:42.280 --> 31:45.280
How hard it is to migrate from an existing front-end application to this?

31:45.280 --> 31:54.280
The answer is you can do it step-by-step, replacing maybe some routes first, maybe your admin panel if you want to be in a safe space.

31:54.280 --> 32:03.280
And you can probably do it route-by-route, doing something like routing at the end-to-next level or something like this.

32:03.280 --> 32:08.280
And it doesn't have to be one or the other.

32:09.280 --> 32:11.280
I think... Yeah, there's one more.

32:11.280 --> 32:14.280
What's the best source of documentation for, for example, the broadcast...

32:14.280 --> 32:16.280
Oh yeah, Jesus.

32:16.280 --> 32:18.280
Yeah.

32:18.280 --> 32:20.280
Thanks for the question.

32:20.280 --> 32:26.280
Because some things use... Sometimes it's about rails, but sometimes it's about turbo.

32:26.280 --> 32:27.280
Yeah.

32:27.280 --> 32:30.280
Sometimes it's confusing where to go and look at that explicit call.

32:30.280 --> 32:32.280
I didn't know about broadcast repression.

32:32.280 --> 32:34.280
Yeah, it's new. It's still beta.

32:34.280 --> 32:35.280
So it's not...

32:35.280 --> 32:37.280
It could be in the turbo documentation.

32:37.280 --> 32:40.280
It's in turbo rails. It's provided by the Turbo Rails gem.

32:40.280 --> 32:49.280
So the question was, what's the best source of documentation that I've compiled a little bit, which contains also links that I've compiled a lot more,

32:49.280 --> 33:02.280
and expect all of that to change in the very near future, sorry, like I mentioned, a big solid upgrade is coming probably next week to the main driver of this.

33:03.280 --> 33:04.280
Last one.

33:04.280 --> 33:08.280
Do you have any experience with the Strada and the...

33:08.280 --> 33:13.280
No. I voluntarily did not... Do I have experience with Strada?

33:13.280 --> 33:20.280
Strada is the third wheel in turbo stimulus and the whole package of hot wire,

33:20.280 --> 33:29.280
and Strada is used to bridge native applications, native application skeletons with web views that are using the other two.

33:29.280 --> 33:33.280
I have no experience with it. That's why I didn't mention doing this talk.

33:33.280 --> 33:36.280
And I think that's it. Thank you very much for listening.

