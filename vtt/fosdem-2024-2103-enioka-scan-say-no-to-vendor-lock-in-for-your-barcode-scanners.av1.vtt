WEBVTT

00:00.000 --> 00:14.640
So, hello everyone.

00:14.640 --> 00:16.400
My name is Antoine Gonzales.

00:16.400 --> 00:22.320
I am a French developer at Enoca Outculture and today I'm going to talk to you about bar

00:22.320 --> 00:27.840
code scanners and bar codes in general and why they are important in the open source.

00:27.840 --> 00:29.640
So, a bit of context.

00:29.640 --> 00:31.560
Bar codes, why does it matter?

00:31.560 --> 00:35.640
If you probably have noticed that everything in your daily life has bar codes attached

00:35.640 --> 00:40.960
to them, whether it's grocery shopping, parcels that you order online, even menus in restaurants

00:40.960 --> 00:44.000
these days have bar codes attached to them.

00:44.000 --> 00:49.440
The idea behind this is basically bar codes end up being one of the most efficient way

00:49.440 --> 00:56.960
to attach digital data, usually an idea, but sometimes more than this, to physical objects.

00:56.960 --> 01:00.440
It has many different types, one dimensional and two dimensional ones.

01:00.440 --> 01:06.240
The one you're most likely familiar with is EAN 13, which is pretty much on every package

01:06.240 --> 01:13.200
ever and QR codes, which is mostly used to share links and stuff like that.

01:13.200 --> 01:18.320
So, as I said, they're used everywhere, but depending on workflows you may have more or

01:18.320 --> 01:20.680
less requirements with them.

01:20.680 --> 01:26.840
Usually, for example, if you deal with large scale packaging or inventory keeping, maybe

01:26.840 --> 01:29.960
you need to scan lots of them very quickly.

01:29.960 --> 01:35.720
So, some workflows have specific requirements and require dedicated devices, which is what

01:35.720 --> 01:39.080
bar code scanners are.

01:39.080 --> 01:45.240
And bar code scanners, so the less wonderful side of it, there's a wide variety of them,

01:45.240 --> 01:49.920
some small, some big, some that look like phone and that mostly are phones, some that

01:49.920 --> 01:56.560
look like rings that fit on top of your finger and you can use to scan products.

01:56.560 --> 02:00.600
There's a wide variety of them and a wide variety of manufacturers for them, and that

02:00.600 --> 02:02.080
comes with this problem.

02:02.080 --> 02:07.640
For example, each manufacturer tends to have their own APIs, SDKs, their own licenses that

02:07.640 --> 02:13.560
are very usually not open source friendly.

02:13.560 --> 02:17.840
Documentation that can be more or less complete depending on who makes them.

02:17.840 --> 02:22.800
And obviously, most of the time, it's not proprietary, otherwise it would not be here.

02:22.800 --> 02:25.360
It's proprietary.

02:25.360 --> 02:29.920
So what it means is usually when you pick a manufacturer for your backup scanners, you

02:29.920 --> 02:35.480
end up sticking to it because changing or just adding more variety to your fleet means

02:35.480 --> 02:37.600
having to rewrite your entire application.

02:37.600 --> 02:43.600
And for a lot of companies, it's just a lot of time to invest and not profitable in the

02:43.600 --> 02:46.280
end.

02:46.280 --> 02:49.200
So what is EnoCastCan then?

02:49.200 --> 02:56.760
It's an Android library with the goal of exposing a single common API to interact with different

02:56.760 --> 02:58.680
scanners.

02:58.680 --> 03:00.960
So how it does it?

03:00.960 --> 03:05.360
So the goal behind it is that it allows you to pick the manufacturers and the scanners

03:05.360 --> 03:07.880
that you need for your needs.

03:07.880 --> 03:12.560
That may mean combining different manufacturers because you have multiple needs in your company

03:12.560 --> 03:18.440
or just changing when the current contract does not fit your needs anymore without having

03:18.440 --> 03:21.440
to rewrite everything.

03:21.440 --> 03:25.840
And how does it enable this?

03:25.840 --> 03:27.720
So obviously, there's no magic.

03:27.720 --> 03:34.680
If every manufacturer and every device requires a specific way to communicate with them, a

03:34.680 --> 03:37.480
specific code needs to exist at some point.

03:37.480 --> 03:39.160
That's in the library.

03:39.160 --> 03:45.680
The idea is every device exposes their own API and we implement a communication way,

03:45.680 --> 03:50.360
a way of communicating with that device in the library, either through official documentation

03:50.360 --> 03:56.280
when possible or if we don't have access to it through reverse engineering, the protocols

03:56.280 --> 04:00.120
used by the scanner.

04:00.120 --> 04:04.560
Once we have that communication set up, what we can do is provide an abstraction layer

04:04.560 --> 04:10.400
that the end user can use to, for example, send very high-level commands to the scanner,

04:10.400 --> 04:16.280
for example, start reading barcode, turn on illumination, something like this.

04:16.280 --> 04:21.640
In the library, we'll find the connected scanners and try to translate to the appropriate protocols

04:21.640 --> 04:25.240
behind.

04:25.240 --> 04:28.640
What's interesting about this approach is it makes it very expandable.

04:28.640 --> 04:33.960
This means, for example, if we don't support any given device but we want to add support

04:33.960 --> 04:36.600
later, it's pretty simple to do.

04:36.600 --> 04:40.960
It's about implementing one interface or another.

04:40.960 --> 04:45.720
We describe what the device can do, how do we do it, how do we translate to something

04:45.720 --> 04:48.680
that the device can understand.

04:48.680 --> 04:54.320
If the device has specific features that may not be common on most scanners, we can divide

04:54.320 --> 04:59.240
these commended subgroups that are very easy to implement or not in a way that makes it

04:59.240 --> 05:01.800
obvious what the device can do.

05:01.800 --> 05:03.200
For the end user, nothing changes.

05:03.200 --> 05:09.960
The whole point of the library, the application that chooses the library doesn't need to adapt

05:09.960 --> 05:10.960
anything.

05:10.960 --> 05:16.800
It's the library itself that's plug-and-play.

05:16.800 --> 05:22.440
In terms of compatibility, so far we support quite a wide range of scanners.

05:22.440 --> 05:25.720
Some of them use Bluetooth, classical low-energy.

05:25.720 --> 05:27.280
Some of them are integrated.

05:27.280 --> 05:34.160
This means, for example, a smartphone with a scanning camera on top of it.

05:34.160 --> 05:39.080
For some situations, the Android camera is all you need, so the smartphone's camera,

05:39.080 --> 05:46.200
in which case we support both the legacy camera API and the new camera 2 API.

05:46.200 --> 05:52.320
One of the biggest upgrade we made recently last year was the compatibility with the Zebra

05:53.200 --> 05:54.200
data-wage.

05:54.200 --> 05:58.200
Zebra is one of the main manufacturers in the back-off scanner industry.

05:58.200 --> 06:03.720
Data-wage is their proprietary service that communicates with most of the fleets of integrated

06:03.720 --> 06:04.720
scanners.

06:04.720 --> 06:11.720
I think this one, for example, allowed us to pretty much support everything these manufacturer

06:11.720 --> 06:16.760
produces.

06:16.760 --> 06:20.760
Any device that's not in the list, whether it uses the existing supported technologies

06:20.800 --> 06:27.800
or something else, for example, USB, if Android lets you access this way of communication,

06:27.800 --> 06:32.280
theoretically, nothing stops you from adding compatibility.

06:32.280 --> 06:38.080
It may just require a bit more boilerplate to get working the first time.

06:38.080 --> 06:48.080
But overall, we have a lot of already set of helpers to make the process easier.

06:48.240 --> 06:50.720
What comes next for this library?

06:50.720 --> 06:55.160
So like I said, we have a lot of scanners that are supported already, but obviously not

06:55.160 --> 06:56.600
all of them can be.

06:56.600 --> 07:00.840
There's a lot of devices out there, so more and more devices are going to be added as

07:00.840 --> 07:04.560
we get all of them.

07:04.560 --> 07:09.080
We also want to provide an external documentation containing guides and examples for the code.

07:09.080 --> 07:14.400
So right now we have pretty complete API dots, but not a lot of guides and quick starts for

07:14.400 --> 07:20.400
people who want to judge before starting implementing it whether or not this library is in the

07:20.720 --> 07:23.720
list, what they expect and what they want for the need.

07:23.720 --> 07:29.720
We also want to provide a more complete separation of the core library and the existing SDKs

07:29.720 --> 07:36.240
that are implemented to let you just download what you need and not support dozens of devices

07:36.240 --> 07:39.280
you might not use.

07:39.280 --> 07:44.160
Another thing we want to add is a standalone app, so both an application and a service

07:44.160 --> 07:47.480
published to the Android Play Store.

07:47.480 --> 07:53.480
So in case the defaults, functionalities of the library is all you need, you already

07:53.480 --> 07:59.120
have access to it and you might not want to reimplement everything in your application.

07:59.120 --> 08:01.560
And finally, better Bluetooth support.

08:01.560 --> 08:05.840
So we already support Bluetooth pretty well, but a lot of devices have specific methods

08:05.840 --> 08:08.680
of pairing with your Android phone.

08:08.680 --> 08:14.080
Sometimes they require pairing via scanning a barcode that's generated by the device.

08:14.080 --> 08:18.240
This is through NFC pairing, which we do not support right now, but we want to in the

08:18.240 --> 08:25.280
future and Android support for the activities like camera that we provide.

08:25.280 --> 08:31.680
Now what we need help with, because obviously, like I said, we do not have access to every

08:31.680 --> 08:32.680
device.

08:32.680 --> 08:33.680
It's not possible.

08:33.680 --> 08:35.640
There's too many of them, but maybe you do.

08:35.640 --> 08:40.240
Maybe you have access to barcode scanners that we haven't tested yet, in which case you

08:40.240 --> 08:45.320
probably can help us to expand this library.

08:45.320 --> 08:49.960
So for example, by just simply testing whether or not the device you have is supported or

08:49.960 --> 08:51.840
not by the library.

08:51.840 --> 08:57.280
Sometimes even if it's not explicitly tested, manufacturers do reuse some of their code and

08:57.280 --> 09:02.400
some of their protocols, in which case maybe a device that we haven't tested does work

09:02.400 --> 09:03.800
with the library.

09:03.800 --> 09:06.240
Or if not, we know we need some work on it.

09:06.920 --> 09:13.720
You can also add easily more SDKs to make more devices compatible.

09:13.720 --> 09:17.560
So for example, if you have a device that we do not support and that's not compatible

09:17.560 --> 09:23.160
with the library, you can try to either reverse engineer it or provide the documentation

09:23.160 --> 09:27.520
necessary so we can add its functionalities to it.

09:27.520 --> 09:32.240
And finally, if you see any feature that you think is missing that could be done better,

09:32.240 --> 09:39.280
or optimized maybe, you can try your hand at upgrading the code base, basically.

09:39.280 --> 09:43.880
We try to be reactive with issues and questions that we receive.

09:43.880 --> 09:52.200
So if you want to take a look at it, there's a barcode to the GitHub repository.

09:52.200 --> 09:55.760
So if anyone has any questions, I can answer some of them.

09:55.760 --> 09:59.760
And otherwise, if you want to stop in the hallways or open discussions on GitHub, you're

09:59.760 --> 10:01.440
welcome to do.

10:01.440 --> 10:11.440
Thank you very much, Paul Singh.

10:11.440 --> 10:12.440
We have one question.

10:12.440 --> 10:13.440
Hi.

10:13.440 --> 10:19.760
Can I ask, are you planning on supporting any other platforms because a worrying amount

10:19.760 --> 10:24.560
of POS software still runs on Windows XP with serial?

10:24.560 --> 10:31.080
So Android is like right now it's only an Android library, mainly because in the mechanisms

10:31.120 --> 10:34.880
we use to connect to the different scanners are specific to Android.

10:34.880 --> 10:43.000
But the core compatibility layer, basically, with each device is not specific to Android.

10:43.000 --> 10:48.600
So even if connecting to a scanner uses Android, you could probably take the code base used

10:48.600 --> 10:55.760
to translate messages and port it to Windows or Mac or whatever else.

10:56.440 --> 10:59.440
Anyone else?

11:06.440 --> 11:07.440
Okay.

11:07.440 --> 11:09.440
Well, thank you very much, Antoine.

11:09.440 --> 11:10.440
That was great.

11:10.440 --> 11:11.440
Thank you very much.

11:11.440 --> 11:12.440
And...

11:12.440 --> 11:13.440
APPLAUSE

