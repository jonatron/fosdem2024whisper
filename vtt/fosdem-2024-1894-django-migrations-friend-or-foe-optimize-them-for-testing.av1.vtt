WEBVTT

00:00.000 --> 00:07.660
Hi everyone.

00:07.660 --> 00:09.800
How many Django users in here?

00:09.800 --> 00:11.120
Raise your hands.

00:11.120 --> 00:18.600
Keep your hands up if you are dealing with Django projects with a lot of migrations, with

00:18.600 --> 00:21.720
time and continuous integration minutes.

00:21.720 --> 00:25.120
Okay, let's talk it for you.

00:25.120 --> 00:26.120
Perfect.

00:26.120 --> 00:28.280
You are in the right room.

00:28.280 --> 00:29.680
Now, I am Denny.

00:29.680 --> 00:33.560
I am on your right side of the photo.

00:33.560 --> 00:40.520
I work again in JavaScript, Python, Vue.js, Django, everything.

00:40.520 --> 00:42.720
It's pain-me-stuff.

00:42.720 --> 00:47.480
So let's start with Django migrations.

00:47.480 --> 00:55.160
Our way to propagate changes from your models to a database schema and keeping track of

00:55.160 --> 00:56.160
them.

00:56.160 --> 00:59.240
Let's quickly recap migration commands.

00:59.240 --> 01:05.280
So you can use make migrations, migrate, show migration, and SQL migrate.

01:05.280 --> 01:11.800
The first one, make migrations, create new migrations based on your model chains.

01:11.800 --> 01:14.440
You can use different parameters in there.

01:14.440 --> 01:17.840
For example, an empty migration you can customize.

01:17.840 --> 01:23.160
You can give a migration a specific name, and you can restrict the creation of a migration

01:23.160 --> 01:26.120
to a specific application.

01:27.120 --> 01:35.360
The model, for example, if you want to recreate Twitter, we know the reason for that, is this

01:35.360 --> 01:36.360
one.

01:36.360 --> 01:43.760
You can create a class for a model, and then creating the migration with the command will

01:43.760 --> 01:49.800
create a new file in your project in the migration folder with this content.

01:49.800 --> 01:54.760
So initial equal true if it's the first migration in your project.

01:54.760 --> 02:01.080
A list of dependencies if you are using something like, for example, authentication, or if you

02:01.080 --> 02:07.760
are on the second migration in the project, the first dependency is the first migration,

02:07.760 --> 02:12.120
and a list of operations performed during the migration.

02:12.120 --> 02:19.680
Then you can migrate your migration, of course, using this command specifying an application

02:19.680 --> 02:23.000
or not, or a migration name.

02:23.000 --> 02:28.280
So if you want to move to a specific point in the history of your migration, you can specify

02:28.280 --> 02:29.920
this.

02:29.920 --> 02:38.440
So as a new project, you can migrate everything using managepi migrates, and everything is

02:38.440 --> 02:42.440
at the last version of your database schema.

02:42.440 --> 02:48.680
Then if you want to roll back every migration in a project, you can migrate to the zero

02:48.680 --> 02:52.000
migration, and everything is rolled back.

02:52.000 --> 02:58.680
You can move to the second migration in your project with this, and without specifying a

02:58.680 --> 03:03.120
migration number, you can migrate everything to the latest version.

03:03.120 --> 03:10.400
Now how this works under the hood, you have in your database a Django migration table with

03:10.400 --> 03:17.480
a content like this, so the application name, the name of the migration, and the date time

03:17.480 --> 03:25.160
when the migration has been applied to your database, so everything is on your database.

03:25.160 --> 03:34.400
There is a better way to show this, so using show migration, you can have a view of your

03:34.400 --> 03:41.800
list of migration in your database, in your schema, with a tick if the migration has been

03:41.800 --> 03:45.520
already applied in your database.

03:45.520 --> 03:51.000
And then with SQL Migrate, you can print your SQL statement for a specific migration.

03:51.000 --> 03:58.120
So with our example, we can display the SQL code for this.

03:58.120 --> 04:00.720
So let's take a look at this.

04:00.720 --> 04:07.160
A transaction will be opened, every command will be applied on your database, and then

04:07.160 --> 04:10.920
the transaction will be committed if no errors.

04:10.920 --> 04:17.840
Now if you need to make further changes in your model, you can apply those changes and

04:17.840 --> 04:20.040
then create another migration.

04:20.040 --> 04:27.680
The migration will depend on the first one, and then the code will be another transaction,

04:27.680 --> 04:30.920
the SQL command, and commit.

04:30.920 --> 04:38.520
And again, and again, you can apply migration on your database in production using this.

04:38.520 --> 04:45.440
What if you need to do further changes, then for example, an every tweet likes and a lot

04:45.440 --> 04:53.560
of other stuff, then you can make change in your models, create a single migration, because

04:53.560 --> 05:00.160
of course I like to be well organized and structured, so every single change for me

05:00.160 --> 05:03.440
means a single migration.

05:03.440 --> 05:08.080
Then you end up having a lot of migration like this one.

05:08.080 --> 05:16.040
But even worse, if you need to create, for example, a shop app for a customer, then you

05:16.040 --> 05:22.360
need to create a model, and then during the lifetime of your application, you need to do

05:22.360 --> 05:28.960
a lot of changes to your model structures.

05:28.960 --> 05:37.240
Okay, we won't list this, but we had to do a lot of changes, for example, adding tables,

05:37.240 --> 05:44.480
switching data from a table to another, to a main table to a detailed table, and a lot

05:44.480 --> 05:51.880
of other stuff, changing data during your workflow.

05:51.880 --> 06:03.200
So changes can be a lot of pain, a lot of stuff, and when migrations become a lot, then

06:03.200 --> 06:10.240
your performance during tests could decrease a lot, because during the deploy is perfect,

06:10.240 --> 06:19.440
you can move forward and backward with simplicity, but in tests it's not that simple, because

06:19.520 --> 06:25.320
you need to wait for every migration to apply before running tests.

06:25.320 --> 06:34.400
And if you are paying for your testing time on GitHub workflows or other platforms, then

06:34.400 --> 06:37.880
that could be painful.

06:37.880 --> 06:45.720
As a disclaimer, the timing for this talk may change from laptop to laptop, so keep this

06:45.800 --> 06:51.600
in mind, but on my old laptop, this is brand new, so it's faster, hopefully, on my old

06:51.600 --> 06:56.000
laptop, it was the timing.

06:56.000 --> 07:05.000
So running tests on 20 apps like Shop, I just copy pasted them 20 times in the example

07:05.000 --> 07:06.800
repository.

07:06.800 --> 07:13.480
Test took just a single second, less than a second to run, and that was perfect, so there's

07:13.560 --> 07:15.800
no need to do this talk.

07:15.800 --> 07:21.560
Well, not exactly, because creating the test database took 20 seconds.

07:21.560 --> 07:28.240
So one second of tests for this project, and 20 seconds for database creation.

07:28.240 --> 07:36.600
And that was not optimal, because we were on the verge between the team license and the

07:36.600 --> 07:48.200
enterprise license for the timing of workflow runs, so between 3,000 minutes monthly, and

07:48.200 --> 07:56.680
that wasn't optimal, we wanted to remain in the team license, because it was cheap, and

07:56.680 --> 08:00.360
then we wanted to optimize that time.

08:00.360 --> 08:08.960
The first possible workaround is to use KIPDB, running tests, and this parameter preserve

08:08.960 --> 08:14.240
the test database between runs, and that's perfect, because the first run applies the

08:14.240 --> 08:20.640
migrations, and then the database will be kept on your cache somewhere, on your Oculus,

08:20.640 --> 08:22.080
for example.

08:22.080 --> 08:29.640
If the database, of course, does not exist, it will be first created and migrated, and

08:29.640 --> 08:35.360
during other changes in other prequests, for example, migration will also be applied,

08:35.360 --> 08:40.320
so everything is okay, hopefully.

08:40.320 --> 08:46.720
So this approach saves 20 seconds for us after the first test run.

08:46.720 --> 08:55.080
The problem was configuring your CI CD, because a solution could be using cache or artifacts

08:55.080 --> 09:05.520
in GitHub workflow, but this takes time to create and store artifacts in GitHub, or,

09:05.520 --> 09:11.480
for example, using an external test database from inside the GitHub workflow, but that wasn't

09:11.480 --> 09:18.680
optimal, and a friend of mine, or mistaken, suggested me this package, Django migration

09:18.680 --> 09:27.520
CI, that allows you to simply configure an external test database, so you can consider

09:27.520 --> 09:35.120
this and save 20 seconds if you have an external database.

09:35.120 --> 09:44.200
Another possible workaround, one line workaround, is to use in your settings migrate equal false,

09:44.200 --> 09:53.360
so if you are using this, migration won't run during the test, and this is similar to

09:53.360 --> 10:01.960
set none as a value in migration modules, but for every apps in your project, so it's

10:01.960 --> 10:09.400
better this way, so single line change, and this has a lot of pros and cons, pros, of

10:09.400 --> 10:15.680
course, single line change, and it doesn't run migration during tests.

10:15.680 --> 10:23.640
The problem is it's like make migrations plus migrate before every test run, so this will

10:23.640 --> 10:31.960
add in our example repository five seconds of time, so that was the opposite of what

10:31.960 --> 10:34.360
I wanted to obtain.

10:34.360 --> 10:42.400
So diving into the Django documentation, I discovered this great, great comment, squash

10:42.400 --> 10:49.960
migration, and this squash an existing set of migrations into a single one, you can specify

10:49.960 --> 10:57.560
your migration name, and optionally start migration name, it will squash every migration

10:57.560 --> 11:00.520
into a single one.

11:00.520 --> 11:08.560
This was pretty good, I tried this one on the shop application, and I decided to squash

11:08.560 --> 11:11.560
every migration into a single one.

11:11.560 --> 11:16.720
It was good, not perfect for us, but it was good.

11:16.720 --> 11:23.400
The problem is that we needed to add manual porting, because for example we used a lot

11:23.400 --> 11:31.560
of functions, manual function, from a migration to another, from a version to another, and

11:31.560 --> 11:38.920
that weren't migrated or automatically squashed, so we had to copy paste the function code

11:38.920 --> 11:45.400
into the squash migration and make some adjustments.

11:45.400 --> 11:52.400
And if we inspect the squash migration file, we can see there is on the top of the class

11:52.400 --> 12:01.920
definition a list of things, a list of tuples in the replaces variable.

12:01.920 --> 12:07.440
So the first item is shop, the application name, and the second one is the migration

12:07.440 --> 12:15.240
name, for every one of the 26 migration.

12:15.240 --> 12:21.880
And the recommended process is first squash, keep the old files, commit and release to

12:21.880 --> 12:30.080
production, to staging the demo until production, then wait until all systems are upgraded with

12:30.080 --> 12:38.880
the new release, then you can remove the old migration files, commit and do a second release.

12:38.880 --> 12:46.400
Then last but not least, you need to transition your squash migration to a normal migration,

12:46.400 --> 12:53.880
delete all migration files, all old migration files that has been replaced, and update all

12:53.880 --> 13:00.720
migration that depends on the deleted ones with the new squash migration, and after everything

13:00.720 --> 13:06.760
you can remove the replaces attribute in the squash migration, and everything is fine.

13:06.760 --> 13:14.520
Then if you want to clean up your database, you can prove references, so in your database

13:14.520 --> 13:20.280
there won't be references to old migrations.

13:20.280 --> 13:28.520
Let's test performances after squashing, after spending a week on my work project doing that,

13:28.520 --> 13:43.000
and oh no changes, so I lost a week doing that without results, and don't tell my chief.

13:43.000 --> 13:46.600
So what's the point?

13:46.600 --> 13:53.400
Well the point of squash migration is to move back from having several hundred migrations,

13:53.400 --> 13:59.760
five to just a few, for example if you create a branch, a separate branch where you are

13:59.760 --> 14:06.520
working you alone, you can squash migrations and propose just a single migration file in

14:06.520 --> 14:09.920
your request.

14:09.920 --> 14:14.920
I know, I know you wanted to speed up tests, so let's do it.

14:14.920 --> 14:16.280
Are you ready?

14:16.280 --> 14:25.080
It's not that easy, but first you need to recreate migrations.

14:25.080 --> 14:32.440
So let's annotate migrations for a single specific application with show migrations,

14:32.440 --> 14:40.640
and then copy paste all the names of your migration files, and then you need to manually

14:40.640 --> 14:48.240
create a replaces, you remember this one from a moment ago, you need to recreate the

14:48.240 --> 14:55.880
replaces list with application name and migration file name, and store it somewhere in your

14:55.880 --> 15:04.600
computer, then move your migrations in a temporary directory, so out of the way, and

15:04.600 --> 15:11.480
make sure that show migrations doesn't show stuff.

15:11.480 --> 15:19.280
Now it's time to recreate migrations using your application name and a name, a specific

15:19.280 --> 15:27.240
name, for example init squash, so you remember that this is the squash migration, and that

15:27.240 --> 15:33.160
will create the first migration at your last model version.

15:33.160 --> 15:41.400
Then open your migration file, copy paste the replaces array list, you created a moment

15:41.400 --> 15:51.800
ago inside your class, then you can restore your old migration files in the original directories,

15:51.800 --> 15:59.080
make sure for missing or overwritten files, and then remove the temporary directory.

15:59.080 --> 16:06.600
Now with show migrations you need to check that everything is there, so all in this case

16:06.600 --> 16:13.360
26 migrations are there, and the first one, the squash migration is there but has not been

16:13.360 --> 16:21.240
applied, then apply your squash migrations and check again with squash show migrations

16:21.680 --> 16:27.440
that everything has been squashed and you have just a single migration, and then you

16:27.440 --> 16:36.920
can go back to your post squash task, so commit and release to production, upgrade those systems,

16:36.920 --> 16:43.520
of course staging demo production, everything else, update on migrations that depends on

16:43.520 --> 16:50.360
the deleted migrations, remove the replace attribute, and if you want to bring references

16:50.480 --> 16:57.080
to the little migration, and everything is perfect, right?

16:57.080 --> 17:08.240
Well, not exactly, if you have migrations providing initial data, you need to create

17:08.240 --> 17:17.320
a new migration for that, because recreating migration from scratch, it doesn't create that

17:17.360 --> 17:24.680
insertion in your modules, or even better, you can use fixtures, and in the doc you can

17:24.680 --> 17:35.240
see how to use fixtures in both database migration and also in testing, and that's perfect,

17:35.240 --> 17:42.000
and then you need to be aware of circular dependencies, because if your project is big

17:42.000 --> 17:47.800
and grows during the time, you could have circular dependencies from a project to another

17:47.800 --> 17:57.480
and backward, and this problem requires you to remove all foreign key, causing the circular

17:57.480 --> 18:07.560
dependency, create the first migration, restore the foreign keys, and create a second migration,

18:08.320 --> 18:12.840
and this way you will hopefully solve this.

18:12.840 --> 18:20.040
Now, let's try to test performances after all of this, after another week spent on the

18:20.040 --> 18:27.880
project trying to tell your chief that, oh, I'm working on something useful, I promise

18:27.880 --> 18:36.200
you, and yeah, of course, after recreating everything from scratch, our database creation

18:36.200 --> 18:42.560
task took five seconds instead of 20, that was perfect.

18:42.560 --> 18:50.360
Yeah, it was perfect, but does this apply to everyone?

18:50.360 --> 18:56.960
It depends, because if you have really big, big projects and you are paying by the minute

18:56.960 --> 19:06.160
your CI CD workflows, and you are on the verge of having to pay $3-4 per user per month,

19:06.320 --> 19:17.520
to 20 something dollars per user per month, then maybe you want to stay on the little

19:17.520 --> 19:25.680
cheaper branch of this, so that could be a solution, but if you just want to make order

19:25.680 --> 19:34.520
in your migration file, then just use squash migration without everything else, or if you

19:34.560 --> 19:40.360
want to speed up tests on your localhost, you just need to use KipDB, and everything

19:40.360 --> 19:48.080
is fine, without having to spend, in my case, two weeks working on this, just to save maybe

19:48.080 --> 19:56.360
a couple of seconds on your project, so it depends on your use case, and we are done,

19:56.360 --> 20:03.680
so if you want to see the example repository, it's there with three different branches,

20:03.720 --> 20:10.040
if you want to compare them on your local machine, and I uploaded the slides on the

20:10.040 --> 20:16.240
FOSDEN website, so they are there if you want to take a look at them.

20:16.240 --> 20:17.240
Thank you very much.

20:17.240 --> 20:29.440
Okay, we have time for quite a few questions, I see one up there.

20:29.440 --> 20:49.800
Given your salary, and these two weeks of work you've done, how many years of enterprise

20:49.800 --> 20:52.200
lessons did you avoid?

20:53.160 --> 21:00.920
That's a nice question, hopefully my chief didn't ask me that, but I think we could have

21:00.920 --> 21:08.720
paid maybe a year, I don't know, one year of this, but yeah, it was fun to play with

21:08.720 --> 21:17.160
this, and for me at least spending two weeks trying new stuff, or trying to discover hidden

21:17.160 --> 21:20.360
stuff from the jungle.

21:20.360 --> 21:21.360
More questions?

21:21.520 --> 21:22.520
Good question.

21:22.520 --> 21:37.200
Yeah, thanks for the great talk, I was wondering if you looked into using like seed data betas

21:37.200 --> 21:39.320
for CI, so that...

21:39.320 --> 21:40.320
Sorry.

21:40.320 --> 21:42.440
Yeah, you don't hear it?

21:42.440 --> 21:45.720
No, I didn't hear you, sorry.

21:45.720 --> 21:51.800
If you looked into seed data betas for CI, so that you run your migrations locally,

21:51.800 --> 21:58.560
and then dump the database, and then use that database during CI to start off with a pre-migrated

21:58.560 --> 21:59.560
database.

21:59.560 --> 22:06.360
No, I didn't think about that, it's a good idea, so you just upload your database dump,

22:06.360 --> 22:07.360
and then on your...

22:07.360 --> 22:12.960
Yeah, so you just set up your CI script to use that database when it initializes.

22:12.960 --> 22:15.680
That could be a good idea, I need to try that, thank you.

22:15.680 --> 22:21.480
So you restore the database and just applies your last migrations without having to apply

22:21.480 --> 22:22.480
everything.

22:22.480 --> 22:23.480
Yeah, exactly.

22:23.480 --> 22:29.320
Yeah, that's a good idea, thank you.

22:29.320 --> 22:30.320
Thank you.

22:30.320 --> 22:37.640
I was also wondering if you're using Postgres for example, you can disable fsync that will

22:37.640 --> 22:44.320
just keep database in memory, so that probably be a solution for big time.

22:44.320 --> 22:49.840
So locally we kept the database in memory, the problem was on our CI CD, so we created

22:49.840 --> 22:56.840
a service in the workflow files, and that was creating a database from scratch.

22:56.840 --> 23:03.240
So it was just a configuration you can just add on your Postgres site on the CI...

23:03.240 --> 23:10.320
We had to consider the time for storing and restoring the database on that configuration

23:10.320 --> 23:11.400
from the cache.

23:11.400 --> 23:22.480
So it was a little bit of time for that, but yeah, that was an option I tried to...

23:22.480 --> 23:26.240
More questions?

23:26.240 --> 23:29.240
So very cool talk.

23:29.240 --> 23:30.360
I like your method.

23:30.360 --> 23:36.440
I basically came up with the same method about five years ago for this approach.

23:36.440 --> 23:41.280
Do you think there's an opportunity to create a tool to automate some of this process?

23:41.280 --> 23:44.000
Well, that's a good question.

23:44.000 --> 23:51.640
Maybe implementing that in the squash migration in some way, I don't know.

23:51.640 --> 24:02.000
We could, we can try to do it just to save other two weeks of salary from other people.

24:03.000 --> 24:09.160
Okay, I think we're done with questions, so we're going to have another five minute

24:09.160 --> 24:11.160
break and then continue with the next talk.

24:11.160 --> 24:11.920
Thank you.

