WEBVTT

00:00.000 --> 00:01.000
Hello?

00:01.000 --> 00:02.000
All right.

00:02.000 --> 00:05.960
I'm going to start my talk.

00:05.960 --> 00:10.920
My name is Christian.

00:10.920 --> 00:14.560
I'm a software developer at a company called S44.

00:14.560 --> 00:19.780
We make software for ChargePoint operators and mobility service providers.

00:19.780 --> 00:24.080
So basically the cloud space of the EV stuff.

00:24.080 --> 00:26.040
All right.

00:26.040 --> 00:35.160
And today I'm going to talk about OCBP implementation and the clicker works.

00:35.160 --> 00:38.040
It worked a second ago.

00:38.040 --> 00:40.560
All right.

00:40.560 --> 00:47.240
So if you take a look around at chargers and charging networks, what you'll find often

00:47.240 --> 00:52.280
is a broken charger, a charger with a black screen, and especially payment terminals

00:52.280 --> 00:55.320
saying oops.

00:55.320 --> 01:04.000
I found a study from 2022 that said in the US that 75% or less than 75% of the chargers

01:04.000 --> 01:10.160
weren't working or when the users came up, they couldn't get a charge started.

01:10.160 --> 01:13.280
So now governments have gotten involved, right?

01:13.280 --> 01:22.160
There is uptime guarantees in the UK and the US Neve funding also relies on uptime guarantees.

01:22.160 --> 01:27.000
If I remember correctly, I think the off here also has uptime guarantee, but I'm not

01:27.000 --> 01:29.840
100%.

01:29.840 --> 01:37.800
And so the most recent thing I found for the US and the company I work at is mainly US based.

01:37.800 --> 01:45.000
So that's why there's a little focus there is that in 2023 broken chargers was like the

01:45.000 --> 01:52.120
major concern for users to use public infrastructure for charging.

01:52.120 --> 01:55.640
And then maybe most importantly, Reddit users are super unhappy.

01:55.640 --> 02:00.560
I think some subreddits even banned talking about broken chargers because they were really

02:00.560 --> 02:05.960
annoying.

02:05.960 --> 02:10.240
And I'm going to click.

02:10.240 --> 02:11.240
All right.

02:11.240 --> 02:18.160
So one thing that we found or our thoughts on why this happens is a lot of proprietary

02:18.160 --> 02:19.880
implementations.

02:19.880 --> 02:27.320
So you can see Dolly's interpretation of OCBP proprietary stuff.

02:27.320 --> 02:32.440
So if you're not Tesla, which owns the entire vertical, right, they know what's happening

02:32.440 --> 02:35.560
at the charging station in the car and in the cloud.

02:35.560 --> 02:36.960
Then what do you do?

02:36.960 --> 02:42.360
Well, what happens right now is there is a bunch of different vendors.

02:42.360 --> 02:48.440
Wherever you sneeze in the EV charging cloud stuff, there's a different vendor.

02:48.440 --> 02:53.560
And most of them don't really share what's happening under the hood, which results in,

02:53.560 --> 03:00.640
well, a bunch of uncalled for behavior unknown what's about to happen, especially later in

03:00.640 --> 03:08.160
the field when it's a user interacting with something and you don't have known input.

03:08.160 --> 03:14.520
Then of course, we have OCBP 1.6, which leaves up a lot of stuff to the imagination on when

03:14.520 --> 03:17.040
which message should be sent.

03:17.040 --> 03:23.480
And then maybe the CSMS thinks, well, I'm expecting ID token now, but get some other

03:23.480 --> 03:25.920
message.

03:25.920 --> 03:33.960
But one thing that I think is one of the most big problems with OCBP 1.6 is around monitoring.

03:33.960 --> 03:39.520
So right now, each hardware vendor builds in their own obscure monitoring messages.

03:39.520 --> 03:43.120
And if you want to integrate with like five different hardware vendors, well, then you

03:43.120 --> 03:47.880
have to work out how to understand all five different messages.

03:47.880 --> 03:50.560
And that basically mean the same thing.

03:50.560 --> 03:56.200
Well, that leads to broken parts in the fields and no one knowing about them, which then

03:56.200 --> 04:00.240
leads to Reddit users being angry because the charging station has been broken for like

04:00.240 --> 04:01.240
a week.

04:01.240 --> 04:03.680
No one really noticed.

04:03.680 --> 04:05.680
Thanks.

04:05.680 --> 04:08.720
All right.

04:08.720 --> 04:11.520
So what can we do to improve the state?

04:11.960 --> 04:16.960
Well, OCBP 2.01, I think is already a huge step in the right direction.

04:16.960 --> 04:19.480
You can see Dolly thinks as well.

04:19.480 --> 04:24.080
OCBP 2.01 winning strongly.

04:24.080 --> 04:29.280
One thing that I really like about OCBP 2.01 is it has a lot of use cases and it's super

04:29.280 --> 04:33.640
structured and you can build your test cases on them.

04:33.640 --> 04:39.560
And then of course, there's much more monitoring around the device model that helps in identifying,

04:39.600 --> 04:46.320
oh, there's something about to go wrong with the charger instead of just it's broken.

04:46.320 --> 04:49.760
But that still doesn't help with transparency.

04:49.760 --> 04:56.040
So if everyone just reinvents the wheel once again, just like with 1.6, well, you're still

04:56.040 --> 04:59.000
going to run into different interpretations.

04:59.000 --> 05:03.520
So we think there should be something that's open source, that's transparent, that you

05:03.520 --> 05:06.080
know what's happening under the hood.

05:06.120 --> 05:11.800
And we hope that with something like that, there is better cross compatibility between

05:11.800 --> 05:16.600
different vendors and the CSMSs can easily integrate with a bunch of different hardware

05:16.600 --> 05:17.600
vendors.

05:17.600 --> 05:20.600
And next one.

05:20.600 --> 05:21.840
All right.

05:21.840 --> 05:23.880
So we looked around.

05:23.880 --> 05:26.600
We didn't find something that we were super happy with.

05:26.600 --> 05:31.120
So we came up with the project Citrine open source.

05:31.120 --> 05:32.480
It's written in TypeScript.

05:32.520 --> 05:38.000
I know in this room that might not be the most popular choice, but on the internet it is.

05:38.000 --> 05:39.680
So that's why we went with it.

05:39.680 --> 05:42.080
It runs on Node.

05:42.080 --> 05:45.200
We have a API based modular architecture.

05:45.200 --> 05:52.480
So similar to what Achim was saying, there's some microservices and you can set it up that,

05:52.480 --> 06:00.360
for instance, transactions is super scalable, but maybe provisioning is maybe not as needed.

06:00.360 --> 06:03.560
It's released under the Apache 2 license.

06:03.560 --> 06:08.160
And most recently it's been adopted by the Linux Foundation Energy.

06:08.160 --> 06:11.440
And it's in their hands now.

06:11.440 --> 06:13.440
Yeah.

06:13.440 --> 06:19.520
So in general, we think OCPP shouldn't be like something that everyone works on once again

06:19.520 --> 06:25.680
and again, but like a stable cornerstone that you can adopt, that you can drop into what

06:25.680 --> 06:28.240
you want, where you need it.

06:28.240 --> 06:33.920
Because the messages are there, the protocol is really specified and redoing the same thing.

06:33.920 --> 06:38.040
Well, I can spend my time better.

06:38.040 --> 06:43.320
So taking a quick look at what we envision for the system architecture and how it works

06:43.320 --> 06:46.400
right now, going from the left to the right.

06:46.400 --> 06:55.680
So charging stations connect via WebSockets to the central system that helps us with scalability.

06:55.680 --> 07:00.560
You can have a bunch of different instances of the central system that manage the individual

07:00.560 --> 07:01.960
chargers.

07:01.960 --> 07:04.680
Then we publish on a message broker.

07:04.680 --> 07:11.960
What was important to us is to have our underlying technology kind of agnostic.

07:11.960 --> 07:18.960
So you can set up Kafka, you can set up PubSub, whatever you want.

07:18.960 --> 07:21.080
Just like with memory cache.

07:21.080 --> 07:23.000
So you can use your address in memory cache.

07:23.120 --> 07:25.720
At least that's what we've implemented for now.

07:25.720 --> 07:28.560
And then you can adapt whatever interface you want.

07:28.560 --> 07:33.640
And for relational databases right now, we have it hooked up to PostgreSQL, but you can

07:33.640 --> 07:37.360
set up whatever relational database you want.

07:37.360 --> 07:40.880
Then comes down here, the maybe more interesting part.

07:40.880 --> 07:43.200
So we have our modules.

07:43.200 --> 07:47.800
And like I mentioned, transactions is a big one.

07:47.800 --> 07:49.480
Most of the bandwidth goes there.

07:49.480 --> 07:53.640
So we set up the modules based on how much we think they're used.

07:53.640 --> 08:01.240
One second, one back.

08:01.240 --> 08:05.560
One thing I forgot to mention is we use Fastify as the web framework to interact with our

08:05.560 --> 08:06.560
setup.

08:06.560 --> 08:09.080
All right.

08:09.080 --> 08:17.960
So looking one step further under the hood, we have a JSON schema generation JavaScript

08:17.960 --> 08:25.000
that we take the set up, the part three of the OZP spec and use that to validate all incoming

08:25.000 --> 08:26.960
and outgoing messages.

08:26.960 --> 08:31.720
And we generate our TypeScript interfaces out of that.

08:31.720 --> 08:37.320
Then to run, for the implementation of the modules, we work a lot with decorators and

08:37.320 --> 08:41.800
metadata on which decorator is used for which message.

08:41.800 --> 08:46.280
And that's how we route the messages within the modules.

08:46.280 --> 08:53.640
And then one thing that I think is quite nice is that we have some open API documentation

08:53.640 --> 08:55.360
that's generated.

08:55.360 --> 09:01.760
And you can easily try out some OZP messages from the REST API.

09:01.760 --> 09:07.660
So you can either use the API generation, click try, or use postman and just straight

09:07.660 --> 09:11.240
up send OZP messages that then get forwarded to the charger.

09:11.240 --> 09:16.360
And our system does the interaction with the charger for it.

09:16.360 --> 09:18.400
All right.

09:18.400 --> 09:24.040
So then looking up and looking at a UI, so right now we've hooked it up to Directis, which

09:24.040 --> 09:32.320
is an open source project that gives you some nice UI on top of a relational database that

09:32.320 --> 09:35.600
helps with keeping it simple.

09:35.600 --> 09:37.120
But you can go crazy on it.

09:37.120 --> 09:43.440
You can build your own flows in Directis and do whatever complex things you want.

09:43.440 --> 09:49.640
For now, we have it set up so that we have a little testing set up with our app that

09:49.640 --> 09:54.480
we whipped up to try charging.

09:54.480 --> 09:55.480
Yeah.

09:55.480 --> 09:58.200
All right.

09:58.200 --> 10:00.840
So where are we at right now?

10:00.840 --> 10:14.120
So a few days ago, we released the 1.0 version that goes through the OCTP protocol's testing

10:14.120 --> 10:17.200
cases of core and advanced security.

10:17.200 --> 10:19.760
We're quite happy that that's working.

10:19.760 --> 10:24.720
It's been working for a while, but we only got to release recently.

10:24.720 --> 10:30.080
Then right now we're under development is the advanced device management and advanced

10:30.080 --> 10:31.320
UI.

10:31.320 --> 10:36.440
We also have a few other people that we're talking to about integrating some payment

10:36.440 --> 10:43.280
and just general, we've generated quite some buzz with people that would like to add some

10:43.280 --> 10:48.520
modules or add just on functionality.

10:48.520 --> 10:54.120
And so moving forward from there, we're looking to ISO 1511.8 support.

10:54.120 --> 11:03.040
And hopefully in July, that's what we anticipate is that we have the full OCP 201 implemented.

11:03.040 --> 11:08.080
And then for the future, of course, similar to what Ahim was saying, well, you can build

11:08.080 --> 11:10.760
on your BI tools or whatnot.

11:10.760 --> 11:17.920
And we hope that this is a nice interface for innovation on top of and not that you

11:17.920 --> 11:24.640
have to hook yourself as a machine in the middle or something similar.

11:24.640 --> 11:30.560
And I'm really happy that so many people were interested in this topic.

11:30.560 --> 11:33.840
So maybe you also want to contribute.

11:33.840 --> 11:35.400
We're fairly fresh.

11:35.400 --> 11:37.800
You can find us on GitHub.

11:37.800 --> 11:45.320
The top right is QR code to our Citroen OS core GitHub page.

11:45.320 --> 11:49.640
The first technical steering committee will happen on March 14th.

11:49.640 --> 11:53.800
So get involved, join, bring ideas.

11:53.800 --> 11:55.400
And we have a Discord server.

11:55.400 --> 11:58.720
So drop by and ask questions.

11:58.720 --> 11:59.720
Sometimes we're fast.

11:59.720 --> 12:02.680
Sometimes we're slow, depending on our workload in responding.

12:02.680 --> 12:05.680
All right.

12:05.680 --> 12:11.680
Does anyone have questions?

12:11.680 --> 12:28.000
One simple question.

12:28.000 --> 12:33.280
We all know every vendor does its own shit.

12:33.280 --> 12:37.200
On the other hand, you generate everything from the JSON schema.

12:37.200 --> 12:40.440
So how do you implement extensibility?

12:40.440 --> 12:46.960
When a message or an unknown message comes in, do you drop it or can you handle it in

12:46.960 --> 12:52.480
a smarter way knowing, okay, it's coming from this vendor and therefore I should interpret

12:52.480 --> 12:55.480
it somehow?

12:55.480 --> 12:58.040
So right now I believe we drop it.

12:58.040 --> 13:02.360
Our major taste has been the Everest.

13:02.360 --> 13:06.400
And they send normal messages.

13:06.400 --> 13:10.360
Am I in the wrong spot?

13:10.360 --> 13:11.640
All right.

13:11.640 --> 13:17.840
And for the detail on how it will be handled in the future, I'll get back to you on Discord

13:17.840 --> 13:18.840
for that.

13:18.840 --> 13:28.440
I got to check with a few people on what's happening, what's going to happen there.

13:28.440 --> 13:34.080
So you said you can make an API call and you send the, for example, start charging message

13:34.080 --> 13:35.560
to the charger.

13:35.560 --> 13:41.440
So do you use like then you get the API call, you use Kafka or something and then from Kafka

13:41.440 --> 13:43.400
it goes to the charging station?

13:43.400 --> 13:44.840
Okay, that's very cool.

13:44.840 --> 13:46.960
I'm also doing that.

13:46.960 --> 13:47.960
Yeah, exactly.

13:47.960 --> 13:53.080
I've seen implementations where they are just white.

13:53.080 --> 13:57.760
I've seen implementations where they are just white like a flag into a database that is

13:57.760 --> 13:59.320
like very, very important time.

13:59.320 --> 14:00.480
And I think that's very ugly.

14:00.480 --> 14:04.720
And I think like message brokers are very elegant solution.

14:04.720 --> 14:07.920
Yep, we agree.

14:07.920 --> 14:09.760
Okay.

14:09.760 --> 14:14.040
With message brokers and 15118 you have very strict timing.

14:14.040 --> 14:24.080
How do you ensure that your message brokers not too slow?

14:24.080 --> 14:26.320
I got a, I got a pun that one.

14:26.320 --> 14:28.920
I'm too nervous for that right now.

14:28.920 --> 14:30.440
I'm sorry.

