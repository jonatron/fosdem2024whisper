WEBVTT

00:00.000 --> 00:07.600
So I don't know if it's okay.

00:07.600 --> 00:08.400
So hi everyone.

00:08.400 --> 00:11.000
So as I was introduced, my name is Pierre.

00:11.000 --> 00:13.800
I'm a PhD student in France.

00:13.800 --> 00:18.500
And the subject of my thesis is to work on given subclass of

00:18.500 --> 00:22.000
the number eighties on cryptographic code.

00:22.000 --> 00:25.800
So be reassured, I won't talk about cryptography here.

00:25.800 --> 00:30.000
But the static analyzers seem to us as a good place to

00:30.000 --> 00:32.400
implement our analysis.

00:32.400 --> 00:37.100
So first I'll go through maybe a bit of an overview of the

00:37.100 --> 00:38.100
static analyzers.

00:38.100 --> 00:42.400
I don't know if any of you have followed up on the analyzer.

00:42.400 --> 00:45.400
Well, David, of course.

00:45.400 --> 00:50.800
Okay, so then I'll go through, well, a bit of our journey

00:50.800 --> 00:54.900
to our development of our analysis in the analyzer.

00:54.900 --> 00:59.500
And then I'll present some remaining issues that I think

00:59.500 --> 01:03.600
would be interesting to discuss within, well, with the

01:03.600 --> 01:07.200
community, I mean, because I think that some of the issues

01:07.200 --> 01:12.000
could be addressed directly within the analyzer.

01:12.000 --> 01:16.100
So first, how the analyzer is working.

01:16.100 --> 01:21.000
So in case you never used it, so it's a really dumb code

01:21.000 --> 01:21.800
here.

01:21.800 --> 01:25.600
So we just allocate a pointer and use it, well,

01:25.600 --> 01:27.200
free it and then use it.

01:27.200 --> 01:30.200
So this is the kind of code that the analyzer can detect

01:30.200 --> 01:33.600
as a problem, so statically at compile time.

01:33.600 --> 01:38.200
So when you call it with just dash F analyzer, this will give

01:38.200 --> 01:42.800
you a really nice output on the standard output with all the

01:42.800 --> 01:44.100
paths leading to the problem.

01:47.400 --> 01:49.100
So a bit of an overview.

01:49.100 --> 01:51.200
So it was introduced in just ten.

01:51.200 --> 01:55.900
So 2020, there is an API available to develop an

01:55.900 --> 01:56.700
out of plugin.

01:56.700 --> 01:59.900
So that's really interesting because you do not need to,

01:59.900 --> 02:05.600
well, rebuild all of GCC to, well, try the analyzer.

02:05.600 --> 02:08.500
And there is a symbolic execution in Giant inside it.

02:08.500 --> 02:12.800
So it's neither sound nor complete, as David said to me.

02:12.800 --> 02:17.600
But it's something really nice because as implementing your

02:17.600 --> 02:21.500
own analysis, you do not need to care about pass visibility

02:21.500 --> 02:24.500
because the analyzer will do it for you.

02:24.500 --> 02:29.500
And so how it works internally, so basically the analyzer

02:29.500 --> 02:33.100
will handle a state machine for given variables for you.

02:33.100 --> 02:37.800
So you do not really need to handle any data structure for

02:37.800 --> 02:38.400
this.

02:38.400 --> 02:39.800
The analyzer will do it for you.

02:39.800 --> 02:44.000
You just have to care about the transition of your variables.

02:44.000 --> 02:47.500
And there is, as you saw, a really nice reporting system.

02:47.500 --> 02:51.800
And since not long ago, there is also the option to

02:51.800 --> 02:53.200
output syrif file.

02:53.200 --> 02:57.800
So it's really nice standard pushed by Microsoft, I think.

02:57.800 --> 02:58.200
Yeah.

02:58.200 --> 02:59.500
And on the committee.

02:59.500 --> 03:00.100
Oh, okay.

03:00.100 --> 03:01.200
That's it.

03:03.500 --> 03:05.500
And well, thank you, David, for this.

03:05.500 --> 03:09.200
And also answering my email because it was my first

03:09.200 --> 03:10.400
experience with GCC.

03:10.400 --> 03:14.500
So it was a bit painful to go through GCC and the analyzer

03:14.500 --> 03:16.500
at the same time as a newbie.

03:18.700 --> 03:21.100
So how does it work internally a bit more?

03:21.100 --> 03:24.800
So usually variables are represented with both left value

03:24.800 --> 03:26.000
and right values.

03:26.000 --> 03:32.100
So for example, on the first line, you got an integer x with

03:32.100 --> 03:33.800
the value 42.

03:33.800 --> 03:37.100
So within the analyzer, there is a data structure known as

03:37.100 --> 03:42.700
store, which will give, well, keep the difference value for

03:42.700 --> 03:45.200
your variables at a given program point.

03:45.200 --> 03:52.200
So after the analyzing, after I've analyzed the second line,

03:52.200 --> 03:54.900
within the analyzer, you'll have this kind of state.

03:54.900 --> 03:59.300
So you'll have the region, which is the left value for the

03:59.300 --> 04:02.200
analyzer, x having the symbolic value.

04:02.200 --> 04:06.800
So the right value 42 and pointer having the symbolic value

04:06.800 --> 04:10.100
of the address of x.

04:10.100 --> 04:12.400
And so to implement the state machine, it's pretty easy.

04:12.400 --> 04:17.900
You just need to inherit from the state machine class.

04:17.900 --> 04:21.500
So as I said, the static analyzer will handle a map of s

04:21.500 --> 04:23.200
value to state for you.

04:23.200 --> 04:27.500
Something nice for reporting is that a given symbolic value

04:27.500 --> 04:32.700
can have its states having an origin.

04:32.700 --> 04:36.400
So it could be another s value, allowing the analyzer to

04:36.400 --> 04:41.700
rebuild the path to the problem you're triggering.

04:41.700 --> 04:45.400
So you can also have really complicated logic behind your

04:45.400 --> 04:47.300
states if you need to.

04:47.300 --> 04:50.400
So there is a class state you can inherit from too.

04:50.400 --> 04:54.900
And that's all you need to start to play with the analyzer.

04:54.900 --> 04:59.900
So our journey to implement a secret analysis in the static

04:59.900 --> 05:02.800
analyzer.

05:02.800 --> 05:06.700
So we needed to implement a taint analysis first.

05:06.700 --> 05:10.300
So taint analysis usually come from, well, historically

05:10.300 --> 05:12.500
come from the user input validation.

05:12.500 --> 05:15.500
So some of you might know it.

05:15.500 --> 05:18.800
So basically behind it, there's four core IDs.

05:18.800 --> 05:19.800
So there's the source.

05:19.800 --> 05:22.300
So where does the taint come from?

05:22.300 --> 05:23.100
The propagator.

05:23.100 --> 05:27.100
So it's the taint propagation through different variables.

05:27.100 --> 05:27.900
And the sync.

05:27.900 --> 05:32.600
So this will be operations triggering issues.

05:32.600 --> 05:36.300
And filter is how you can destroy the taint for a given

05:36.300 --> 05:37.200
variable.

05:37.200 --> 05:40.400
So if you apply it to my problem, it will become, well,

05:40.400 --> 05:41.800
the source is the secret.

05:41.800 --> 05:46.400
So for example, a cryptographic key, sorry, or a password,

05:46.400 --> 05:48.100
or anything at all.

05:48.100 --> 05:53.900
The propagator will be, well, how you propagate that secret

05:53.900 --> 05:56.000
dependent notion.

05:56.000 --> 05:58.800
The sync will be, in my case, well, condition.

05:58.800 --> 06:02.200
So if you have a secret dependent variables used in a

06:02.200 --> 06:06.500
condition or a memory access or non-constant CPU operations,

06:06.500 --> 06:09.900
you'll have some vulnerabilities on your code leading

06:09.900 --> 06:13.900
potentially to a side channel problem.

06:13.900 --> 06:17.000
And so filter will be, in our case, for example,

06:17.000 --> 06:17.800
the tainty ratio.

06:17.800 --> 06:24.100
So a call to B0 on an allocated area of memory, for example.

06:24.100 --> 06:27.200
So our submission is pretty simple.

06:27.200 --> 06:30.340
Every variable is in the start state.

06:30.340 --> 06:35.540
And in our case, if, so the original secret will be tainted

06:35.540 --> 06:36.240
by attributes.

06:36.240 --> 06:39.840
So for now, the developer has to give an attribute to the

06:39.840 --> 06:40.240
variable.

06:40.240 --> 06:43.340
And the variable will be tainted.

06:43.340 --> 06:49.240
But you can also have other variables being tainted if it

06:49.240 --> 06:56.240
is dependent by its initialization, sorry, by, well,

06:56.240 --> 06:58.640
another tainted variable.

06:58.640 --> 07:00.140
And the sync came here.

07:00.140 --> 07:04.440
So as soon as there is tainted variable used in a sync

07:04.440 --> 07:07.840
operation, so for example, the condition, we emit a warning

07:07.840 --> 07:08.840
through the analyzer.

07:11.640 --> 07:16.440
So our first try will just check if it was working correctly

07:16.440 --> 07:18.340
with a pre-intuitive one.

07:18.340 --> 07:19.540
So it's just a secret.

07:19.540 --> 07:22.140
You take attributes and use it in a condition.

07:22.140 --> 07:24.440
And we expected the warning to be emitted.

07:24.440 --> 07:26.940
So it was working perfectly.

07:26.940 --> 07:31.840
And now we wanted to check that the propagation was doing

07:31.840 --> 07:36.240
well too, and that was working too.

07:36.240 --> 07:41.040
But when we looked into the hood, we noticed that, well,

07:41.040 --> 07:45.640
actually, it was not variables who were tracked.

07:45.640 --> 07:47.640
It was their symbolic value.

07:47.640 --> 07:50.940
So for example, here, you had secret with the symbolic value

07:50.940 --> 07:53.640
of 42 and y with 142.

07:53.640 --> 07:56.700
And in the state map, so this is the map, the data

07:57.200 --> 08:02.600
structure keeping track of the state for your variables.

08:02.600 --> 08:06.800
Well, it's the symbolic value of 42 and 142, which are painted.

08:06.800 --> 08:12.400
So we came with a problem example, which is like this.

08:12.400 --> 08:15.900
And there was a false warning emitted here,

08:15.900 --> 08:20.100
because as it's 42, which is tracked and not x,

08:20.100 --> 08:26.600
here y was implicated tracked as tainted.

08:26.600 --> 08:29.300
So that's the minimal example representation of the data

08:29.300 --> 08:32.000
structure of the analyzer.

08:32.000 --> 08:37.400
So we needed to modify the state machine state map class

08:37.400 --> 08:42.100
to be able to not only track for symbolic values, which

08:42.100 --> 08:48.200
is really nice to do well pointer aliasing issues.

08:48.200 --> 08:52.300
So we wanted to also be able to track for origin.

08:52.300 --> 08:56.900
So that allows us to not implicitly track the value of y

08:56.900 --> 08:57.700
here anymore.

09:01.200 --> 09:06.600
So at the same time, we needed to modify the notion of origin

09:06.600 --> 09:11.900
for a trait, well, for a state, because in that case,

09:11.900 --> 09:15.800
we want to be able that when pointer is dereference to be

09:15.800 --> 09:21.000
able to know that it points to a tracked data.

09:21.000 --> 09:22.300
So here it's y.

09:22.300 --> 09:24.100
The address of y is here.

09:24.100 --> 09:29.100
So within the symbolic, well, the state machine state map,

09:29.100 --> 09:30.300
you'll have something like this.

09:30.300 --> 09:34.400
So this was allowed the analyzer to rebuild the pass.

09:34.400 --> 09:36.700
So basically, a secret, having the origin,

09:36.700 --> 09:40.000
is the kind of the original secret.

09:40.000 --> 09:41.800
You'll have y depending of secret,

09:41.800 --> 09:44.500
and the address of y is tainted, because y is tainted.

09:47.700 --> 09:49.800
So our modifications.

09:49.800 --> 09:53.000
We modified mainly the state machine state map logic, also

09:53.000 --> 09:59.100
a bit of class URL handling out of three API user,

09:59.100 --> 10:02.100
and also diagnostic related code.

10:02.100 --> 10:06.500
So we believe it could be nice to have those changes merged

10:06.500 --> 10:12.800
in the analyzer, because yeah, we are working on that,

10:12.800 --> 10:17.600
because it will allow the analyzer to receive

10:17.600 --> 10:21.900
a wider set of analysis, because for now,

10:21.900 --> 10:24.900
it's really nice to do some pointer related analysis.

10:24.900 --> 10:31.500
But if you want to get in touch with integer, float, or anything,

10:31.500 --> 10:35.500
it can mess up your analysis.

10:35.500 --> 10:37.400
So there are some remaining issues still,

10:37.400 --> 10:41.400
because when you're in the frontier, for example, of,

10:41.400 --> 10:49.100
well, scalar array and pointer, well, it can be a mess,

10:49.100 --> 10:52.400
because you do not want to track, for example,

10:52.400 --> 10:57.900
the third element of an array, so here, which is secret,

10:57.900 --> 11:00.400
and alias by its pointer.

11:00.400 --> 11:02.800
So the value of pointer is pointing to the third element,

11:02.800 --> 11:05.100
and you use it to access it.

11:05.100 --> 11:11.300
But you do not use the pointer to taint the region behind it.

11:11.300 --> 11:13.800
So to do it, we did a bit of trick.

11:13.800 --> 11:17.800
So at the same time, we are tainting the region t of 2,

11:17.800 --> 11:22.700
because we cannot just taint the symbolic value of t of 2,

11:22.700 --> 11:26.800
because otherwise we will taint 42.

11:26.800 --> 11:32.600
We have to also taint t plus 2, so the symbolic value behind it,

11:32.600 --> 11:36.600
so the address of the third element of t.

11:36.600 --> 11:39.400
So within the data, you have something like this.

11:39.400 --> 11:43.900
So what's interesting us is that value, well, not really that value,

11:43.900 --> 11:47.900
but the region containing that value.

11:47.900 --> 11:52.400
So we do not want to track the right value of that element.

11:52.400 --> 11:57.600
We do want to track its left value, and also its symbolic value,

11:57.600 --> 12:00.200
well, the symbolic value of its address.

12:00.200 --> 12:02.900
And so for now, we are chatting about it,

12:02.900 --> 12:05.600
because we do it in our analysis,

12:05.600 --> 12:10.600
but maybe it could be done directly within the analyzer.

12:10.600 --> 12:15.600
I do not have any solution yet, but I think it would be nice to discuss it.

12:15.600 --> 12:21.600
Another problem is regarding inter-procedural analysis.

12:21.600 --> 12:25.600
For example, here you have the local variable in the main function,

12:25.600 --> 12:28.600
which is secret, and when you give it to f,

12:28.600 --> 12:31.600
well, secret does not exist anymore.

12:31.600 --> 12:36.100
So you cannot really have, well, for now,

12:36.100 --> 12:42.100
or at least I didn't find the APIs within the analyzer to do it.

12:42.100 --> 12:48.100
You cannot really look at the value, well, of the taint of secret

12:48.100 --> 12:51.100
when you are in the context of the f function.

12:51.100 --> 12:56.100
So that's because the analyzer have data structure

12:56.100 --> 12:58.600
to represent a frame for functions,

12:58.600 --> 13:00.600
and so there's a notion of local values.

13:00.600 --> 13:03.600
So when you're within the context of the f function

13:03.600 --> 13:08.600
and you ask for, well, the state of the secret variable,

13:08.600 --> 13:10.600
well, for now, you just have a crash,

13:10.600 --> 13:14.600
because it's not a local variable.

13:14.600 --> 13:16.600
But we could discuss that.

13:16.600 --> 13:18.600
Yeah.

13:18.600 --> 13:22.600
So a bit of takeaways.

13:22.600 --> 13:24.600
So the modification we did are,

13:24.600 --> 13:29.600
well, now we can track state region for only inter-procedural analysis.

13:30.600 --> 13:32.600
So there are still issues remaining.

13:32.600 --> 13:35.600
So as I said, when you're in the frontier of region,

13:35.600 --> 13:37.600
when you want to track a region,

13:37.600 --> 13:41.600
so left values and one, well, right values,

13:41.600 --> 13:45.600
so scalar arrays and pointer frontier,

13:45.600 --> 13:48.600
and also inter-procedural analysis, as I said.

13:48.600 --> 13:50.600
So, yeah, that's it for me.

13:50.600 --> 13:52.600
Thanks for listening.

13:52.600 --> 13:54.600
Feel free to reach out if you need to.

13:54.600 --> 13:56.600
Sorry, you don't have the question.

13:56.600 --> 13:58.600
Yeah, that's the question, I think, though.

13:58.600 --> 14:00.600
Thank you.

14:04.600 --> 14:07.600
We have some questions.

14:07.600 --> 14:10.600
Yeah, so we have, like, questions and so forth.

14:10.600 --> 14:12.600
Well, do not force the question.

14:12.600 --> 14:15.600
If you do not have any questions, that's OK.

14:15.600 --> 14:17.600
I have many questions.

14:17.600 --> 14:19.600
I bet.

14:19.600 --> 14:21.600
Sorry, I should.

14:21.600 --> 14:23.600
We have 13 minutes.

14:23.600 --> 14:25.600
OK.

14:25.600 --> 14:27.600
So, you're the one.

14:27.600 --> 14:29.600
Yep.

14:29.600 --> 14:33.600
So, why don't try and implement the input thing

14:33.600 --> 14:36.600
into the privacy ecosystem, for example,

14:36.600 --> 14:38.600
instead of GCC?

14:38.600 --> 14:40.600
OK, so the question is,

14:40.600 --> 14:43.600
why not to implement the analysis

14:43.600 --> 14:46.600
directly into a more formal tool,

14:46.600 --> 14:48.600
such as privacy, for example?

14:48.600 --> 14:52.600
The idea is that there's already a lot of tools

14:52.600 --> 14:56.600
doing that particular issue,

14:56.600 --> 15:00.600
the kind of analysis, but

15:00.600 --> 15:03.600
a lot of them are kind of hard to use.

15:03.600 --> 15:07.600
You cannot really set them up easily.

15:07.600 --> 15:10.600
So, the idea behind it is to develop a tool

15:10.600 --> 15:14.600
which has no ambition to be neither sound nor complex,

15:14.600 --> 15:17.600
just usable, easily plug-in, plug-outs.

15:17.600 --> 15:19.600
So,

15:20.600 --> 15:24.600
the idea at the end would be for the developer

15:24.600 --> 15:27.600
to not touch his code base at all.

15:27.600 --> 15:30.600
So, that's work we need to do yet.

15:30.600 --> 15:36.600
But, yeah, the idea is just to try to think with the user

15:36.600 --> 15:41.600
and hopefully not making our tool a pain to use.

15:41.600 --> 15:43.600
Yeah, so that's it.

15:44.600 --> 15:49.600
Any more questions?

15:49.600 --> 15:51.600
Yeah.

15:51.600 --> 15:55.600
Is there a way to support, like, other languages,

15:55.600 --> 15:57.600
like if the static analyzer,

15:57.600 --> 16:00.600
because I saw only examples in C code.

16:00.600 --> 16:03.600
If, for example, the static analyzer was building a way

16:03.600 --> 16:06.600
that you could extend it to, for example, C++

16:06.600 --> 16:08.600
or other methods.

16:08.600 --> 16:12.600
Yeah, so the question is about

16:13.600 --> 16:16.600
if there are any other language support.

16:16.600 --> 16:22.600
So, as we are in the, well, Gimbalist representation,

16:22.600 --> 16:27.600
basically, we are targeting C code only for now

16:27.600 --> 16:33.600
because, well, the subset is way easier to manage.

16:33.600 --> 16:39.600
And the idea would be to then rely on, well, the analyzer

16:40.600 --> 16:44.600
because I don't think the C++ support is...

16:44.600 --> 16:47.600
Yeah, I mean, as you say, the analyzer runs on, like,

16:47.600 --> 16:50.600
Gimbalist, I say, in terms of intermediate representation.

16:50.600 --> 16:55.600
And so, in theory, it handles everything that we have a

16:55.600 --> 16:59.600
for, but in practice, it handles everything that I've

16:59.600 --> 17:01.600
implemented.

17:01.600 --> 17:05.600
And in particular, exception handling support isn't

17:05.600 --> 17:07.600
implemented yet.

17:07.600 --> 17:10.600
I'm interested in doing a separate code project.

17:10.600 --> 17:14.600
Or, if you want to start a new project, that would be

17:14.600 --> 17:17.600
a wonderful thing for someone to work on.

17:17.600 --> 17:19.600
I'm focusing on C.

17:19.600 --> 17:22.600
But, I mean, people have used it for, I think,

17:22.600 --> 17:26.600
as a concept of running, checking unsafe rust code

17:26.600 --> 17:28.600
and CPL.

17:28.600 --> 17:34.600
And in theory, anything that GCC compiles, you can analyze.

17:34.600 --> 17:36.600
It just might look rubbish.

17:37.600 --> 17:39.600
They're probably rewards, yes.

17:39.600 --> 17:41.600
So, that also was a question.

17:41.600 --> 17:42.600
Hi.

17:42.600 --> 17:43.600
Hi.

17:43.600 --> 17:45.600
How far in the game can you analyze things?

17:45.600 --> 17:49.600
For instance, can you analyze certain bits of, I mean,

17:49.600 --> 17:52.600
like, not things, other bits?

17:52.600 --> 17:56.600
I think it could be possible, but you have to modify

17:56.600 --> 17:58.600
the analyzer itself.

17:58.600 --> 18:02.600
So, from out of three, plugging as we are trying to do it,

18:02.600 --> 18:04.600
I'm not sure you can do it, really.

18:04.600 --> 18:09.600
But, there is data structure within the analyzer to do it.

18:09.600 --> 18:10.600
Yeah.

18:10.600 --> 18:15.600
Within the analyzer, essentially, we build a directed graph

18:15.600 --> 18:20.600
of program point, program state pairs.

18:20.600 --> 18:24.600
And the program state, there's a store thing,

18:24.600 --> 18:26.600
which basically models the state of memory.

18:26.600 --> 18:30.600
And that, in theory, tracks the Pupit level.

18:30.600 --> 18:35.600
So, for example, within this frame, within this local,

18:35.600 --> 18:39.600
within that frame, within bit 17 of that local,

18:39.600 --> 18:42.600
is bound to this symbolic value.

18:42.600 --> 18:44.600
How well it works.

18:44.600 --> 18:46.600
Yeah.

18:46.600 --> 18:48.600
And how well it works with the state machine as well.

18:48.600 --> 18:49.600
I don't know.

18:49.600 --> 18:50.600
Yeah.

18:50.600 --> 18:52.600
So, for now, no.

18:52.600 --> 18:53.600
Yeah.

18:53.600 --> 18:54.600
Yeah.

18:54.600 --> 18:55.600
You have a question?

18:55.600 --> 18:56.600
Yeah.

18:56.600 --> 18:59.600
I think, with the exact amount of pointers,

18:59.600 --> 19:02.600
you're already showing that probably you're going to run into

19:02.600 --> 19:05.600
a decidable problem to have perfect answers.

19:05.600 --> 19:07.600
So, you always have to make a trade-off between false positive

19:07.600 --> 19:09.600
and true positives.

19:09.600 --> 19:12.600
Do you have any guiding principles on how to decide?

19:12.600 --> 19:14.600
We want to, yeah.

19:14.600 --> 19:15.600
Just repeat.

19:15.600 --> 19:16.600
Yeah.

19:16.600 --> 19:17.600
Okay.

19:17.600 --> 19:21.600
So, the question is about, well, basically,

19:21.600 --> 19:23.600
completed or soundness behind it.

19:23.600 --> 19:27.600
So, we do not aim to be neither sound or complete.

19:27.600 --> 19:32.600
But we want to go to soundness more.

19:32.600 --> 19:38.600
So, it means all problems are true problems, basically.

19:38.600 --> 19:40.600
Well, yeah.

19:40.600 --> 19:42.600
Follow-up question.

19:42.600 --> 19:43.600
Yeah.

19:43.600 --> 19:46.600
There are a number of other static analyzers.

19:46.600 --> 19:47.600
Yeah.

19:47.600 --> 19:50.600
I wonder, like, are they all aiming for rough,

19:50.600 --> 19:52.600
the same balance between those two?

19:53.600 --> 19:59.600
Well, it depends of the different projects.

19:59.600 --> 20:04.600
We were, well, we went for the GCC static analyzer because,

20:04.600 --> 20:10.600
well, on the research part, there was no work on GCC.

20:10.600 --> 20:13.600
And we thought it would be interesting to, well, first understand,

20:13.600 --> 20:15.600
well, why?

20:15.600 --> 20:21.600
So, is there a particular reason?

20:21.600 --> 20:23.600
Is it because how the compiler is working?

20:23.600 --> 20:28.600
Or is it because it's, well, I don't know,

20:28.600 --> 20:32.600
because people are just used to go to LLVM, for example.

20:32.600 --> 20:34.600
Yeah.

20:34.600 --> 20:35.600
Yeah.

20:35.600 --> 20:38.600
I mean, from the general analyzer point of view,

20:38.600 --> 20:42.600
I guess I'm doing it from an extreme programming,

20:42.600 --> 20:46.600
pragmatic kind of, I have a bank of open source,

20:46.600 --> 20:48.600
pre-stuffware test projects.

20:48.600 --> 20:52.600
I turn on the analyzer, I see what it spits out and decide,

20:52.600 --> 20:54.600
does that suck or is it useful?

20:54.600 --> 20:56.600
And it's even accordingly.

20:56.600 --> 20:59.600
And it's not very formal.

20:59.600 --> 21:00.600
Yeah.

21:00.600 --> 21:02.600
Hopefully it's useful.

21:02.600 --> 21:05.600
In some ways, think of it as a glorified compiler warning.

21:05.600 --> 21:08.600
Like, it's like, I really want to spend a lot of compile time

21:08.600 --> 21:12.600
to get a bit of a deeper, more involved warning than that.

21:12.600 --> 21:15.600
It's not going to prove that your program is correct.

21:15.600 --> 21:16.600
Yeah.

21:16.600 --> 21:18.600
You still have time to analyze it.

21:18.600 --> 21:19.600
Yeah.

21:19.600 --> 21:21.600
Let's hope it's fine.

21:21.600 --> 21:22.600
You can do that.

21:22.600 --> 21:23.600
Yeah.

21:23.600 --> 21:25.600
Well, that's good.

21:25.600 --> 21:26.600
I think that's a good question.

21:26.600 --> 21:29.600
You mentioned the limit when it comes to procedural analysis

21:29.600 --> 21:32.600
with your static analyzer.

21:32.600 --> 21:34.600
Especially in use case like yours,

21:34.600 --> 21:36.600
where you try to track the access to secret,

21:36.600 --> 21:39.600
applying memory locations to secret states,

21:39.600 --> 21:43.600
how would you handle inter-translation unit-based

21:43.600 --> 21:46.600
analyzers because I could probably access this location

21:46.600 --> 21:48.600
from a completely different file if I wanted to?

21:48.600 --> 21:49.600
Yeah, probably.

21:49.600 --> 21:52.600
But the thing, oh, yeah, yeah, sorry.

21:52.600 --> 21:58.600
So the question is if we could not handle the problem

21:58.600 --> 22:03.600
of the interpersonal analysis problem within another pass,

22:03.600 --> 22:04.600
if I, yeah.

22:04.600 --> 22:07.600
So it could be done.

22:07.600 --> 22:11.600
But then we would have to get out of the analyzer

22:11.600 --> 22:15.600
or maybe add some other logic at some points.

22:15.600 --> 22:17.600
But the thing which is nice with an analyzer

22:17.600 --> 22:19.600
is that in our implementation,

22:19.600 --> 22:22.600
we do not need to care about symbolic execution,

22:22.600 --> 22:25.600
well, symbolic evaluation of variables.

22:25.600 --> 22:29.600
And, well, everything is taken care of.

22:29.600 --> 22:30.600
Yeah.

22:30.600 --> 22:34.600
I specifically had it run at the point in GCSE

22:34.600 --> 22:36.600
in the integrates with LTO.

22:36.600 --> 22:37.600
Oh.

22:37.600 --> 22:39.600
So you can actually do link time analysis.

22:39.600 --> 22:40.600
Yeah.

22:40.600 --> 22:43.600
Well, in theory, one thing is the link time analysis.

22:43.600 --> 22:44.600
Yeah.

22:44.600 --> 22:45.600
In practice, if you do it on either,

22:45.600 --> 22:48.600
I have a few test cases in the test suite.

22:48.600 --> 22:50.600
If you try doing it on anything non-trivial,

22:50.600 --> 22:52.600
it will explode right now.

22:52.600 --> 22:53.600
Yeah.

22:53.600 --> 22:54.600
Sorry.

22:54.600 --> 22:55.600
Yeah.

22:55.600 --> 22:58.600
But in theory, you will find all the order n squared.

22:58.600 --> 22:59.600
Yeah.

22:59.600 --> 23:03.600
And just to clarify, I'm not a developer of the analyzer.

23:03.600 --> 23:06.600
I'm just a user kind of the analyzer.

23:06.600 --> 23:09.600
So I'm, well, I did modify it,

23:09.600 --> 23:13.600
but so far it's just a local modification.

23:13.600 --> 23:16.600
And hopefully it will get merged at some point.

23:16.600 --> 23:17.600
Yeah.

23:17.600 --> 23:19.600
That would be nice, but we have to handle

23:19.600 --> 23:21.600
the inter-processor problem first.

23:21.600 --> 23:22.600
Yeah.

23:22.600 --> 23:23.600
Yeah.

23:23.600 --> 23:24.600
Yeah.

23:24.600 --> 23:25.600
Yeah.

23:25.600 --> 23:27.600
If you enter two links, like LTO,

23:27.600 --> 23:31.600
if you enter the integrates in LTO,

23:31.600 --> 23:34.600
you will get a lot of top positions from the for it.

23:34.600 --> 23:36.600
Doesn't that deal with some of it?

23:36.600 --> 23:37.600
Yeah.

23:37.600 --> 23:38.600
Maybe you should repeat the question.

23:38.600 --> 23:39.600
Yeah.

23:39.600 --> 23:42.600
The question is about, doesn't the analyzer

23:42.600 --> 23:48.600
come a bit late in the passes,

23:48.600 --> 23:53.600
because it could be run after a lot of optimization?

23:53.600 --> 23:54.600
Well.

23:54.600 --> 23:56.600
And the answer is yes.

23:56.600 --> 23:57.600
Yeah.

23:57.600 --> 23:58.600
The answer is yes.

23:58.600 --> 24:00.600
In the analyzer.

24:00.600 --> 24:01.600
Sorry.

24:01.600 --> 24:02.600
Yeah.

24:02.600 --> 24:04.600
I think that's a good question.

24:04.600 --> 24:05.600
Yeah.

24:05.600 --> 24:09.600
I mean, as I said, I chose to run that late

24:09.600 --> 24:13.600
in order to try and piggyback LTO.

24:13.600 --> 24:16.600
And unfortunately it means in theory,

24:16.600 --> 24:18.600
some optimizations have run,

24:18.600 --> 24:21.600
and very similar optimizations have assumed

24:21.600 --> 24:23.600
there's no undefined behavior.

24:23.600 --> 24:25.600
And, well, actually, what does it know about

24:25.600 --> 24:26.600
undefined behavior?

24:26.600 --> 24:29.600
So that's one area where they can be caused positives.

24:30.600 --> 24:33.600
Potentially we could move earlier.

24:33.600 --> 24:37.600
It would be a lot of work, because I don't know,

24:37.600 --> 24:39.600
a technical bet.

24:39.600 --> 24:40.600
Yeah.

24:40.600 --> 24:42.600
And how many times are?

24:42.600 --> 24:43.600
Yeah.

24:43.600 --> 24:44.600
End times up.

24:44.600 --> 24:45.600
One last question.

24:45.600 --> 24:46.600
One last question.

24:46.600 --> 24:47.600
Yeah.

24:47.600 --> 24:48.600
What is it?

24:48.600 --> 24:49.600
Yeah.

24:49.600 --> 24:50.600
Yeah.

24:50.600 --> 24:51.600
Sorry.

24:51.600 --> 24:54.600
In practice, that just means that if I care,

24:54.600 --> 24:57.600
then I want to analyze one time,

24:57.600 --> 25:00.600
so zero and one time, I would go three right.

25:00.600 --> 25:01.600
Yes.

25:01.600 --> 25:04.600
I'm not sure to.

25:04.600 --> 25:07.600
So I've had of running 10 analyzers.

25:07.600 --> 25:12.600
I now just run GCC twice, once with zero, analyze,

25:12.600 --> 25:14.600
and one with go three analyzers.

25:14.600 --> 25:15.600
Yeah.

25:15.600 --> 25:16.600
That's OK.

25:16.600 --> 25:20.600
So the question is, instead of running several analyzer,

25:20.600 --> 25:24.600
just have to run the static analyzer of GCC

25:24.600 --> 25:28.600
and then run the different optimization enabled.

25:28.600 --> 25:30.600
So is it the question?

25:30.600 --> 25:31.600
It's more than that.

25:31.600 --> 25:32.600
Yeah, I'm more than that.

25:32.600 --> 25:33.600
OK, thanks.

25:33.600 --> 25:34.600
I was, yeah.

25:34.600 --> 25:35.600
All right.

25:35.600 --> 25:36.600
Thank you again.

25:36.600 --> 25:37.600
Ends up.

25:37.600 --> 25:38.600
Thanks.

25:38.600 --> 25:39.600
Thanks.

