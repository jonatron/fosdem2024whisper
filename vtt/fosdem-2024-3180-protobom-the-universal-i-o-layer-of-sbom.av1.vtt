WEBVTT

00:00.000 --> 00:13.760
All right. Okay, I'm next. So, welcome. My name is Adolfo Garcia. I am a software engineer

00:13.760 --> 00:21.960
with a company called StackLoc, and we do supply chain security as well. So, I'm here

00:21.960 --> 00:29.600
to talk to you about like a project that we've been developing for the past six months, seven

00:29.600 --> 00:36.280
months or so. It's called Protobomb. So, just to give you a quick rundown of why this project

00:36.280 --> 00:41.360
came to be, let me start with the promise of Esbom. So, if you remember the promise of Esbom,

00:41.360 --> 00:48.640
the Esbom is supposed to be the entire analogy of the label of ingredients in our software.

00:49.600 --> 01:00.040
So, at some point, we had like a really good label, like ingredients label for our software,

01:00.040 --> 01:06.600
but at some point someone decided that, well, when we had one, we needed a new one that was

01:06.600 --> 01:11.920
almost quite the same, but not exactly compatible. So, this led to, you know, that friendly

01:11.920 --> 01:22.960
cooperation that Gary was talking about between the formats, and at some point, so, but jokes aside,

01:22.960 --> 01:30.720
this situation has kept Esbom applications in stock in a state that we don't want them to be in.

01:30.720 --> 01:39.120
And the fact is that most people working on Esbom applications tend to get stuck because they

01:40.080 --> 01:46.800
design their data models around the actual data models of the formats themselves. So,

01:46.800 --> 01:56.240
at some point, we decided to start working on Protobomb, which is trying to solve this problem.

01:56.240 --> 02:03.320
So, Protobomb came to be because of some public funding from the department of whole security

02:03.480 --> 02:12.040
through their science and technology directorates, and is now a project hosted under the OpenSF

02:12.680 --> 02:20.360
security tool in working group. And so, let me, sorry, I'm super rushing through the slides.

02:21.560 --> 02:26.440
So, let me give you a quick overview of what Protobomb does and what it's supposed to be,

02:26.440 --> 02:30.840
the problem that it's supposed to be solving. So, the idea of Protobomb is that while you have

02:31.720 --> 02:38.920
software Esbom formats that are not compatible by themselves, the data in them doesn't really

02:38.920 --> 02:46.120
have to be that incompatible. The fact that one Esbom format defines the hash labels using a hash

02:46.120 --> 02:51.400
and the other doesn't, or uppercase or lowercase, doesn't really change the meaning, as we just

02:51.400 --> 02:58.600
heard, of the data that's contained in them. So, what Protobomb tries to propose is that it gives

02:58.680 --> 03:07.240
you an abstraction of a graph that captures all of the Esbom data in those documents, and it

03:07.240 --> 03:15.720
rises one level above of the native libraries. So, the ideal of Protobomb is that you can let

03:15.720 --> 03:21.640
the Esbom formats flourish and be as expressive as they want, and we can still capture all of that

03:21.640 --> 03:29.960
information and make sure that we can do several interesting things with them. So, the first idea

03:29.960 --> 03:37.560
is anybody who has done some kind of Esbom work probably has created their own abstraction to

03:37.560 --> 03:45.640
read the Esbom data, and Protobomb keeps several definitions of the Esbom data in protocol buffers,

03:45.640 --> 03:52.920
so libraries can use them from many languages, and you can still use those libraries in your

03:52.920 --> 03:59.000
project. So, if right now we maintain an official Go library, another Python library is also coming,

04:00.120 --> 04:05.320
and we're open to having more of them, so the first thing that Protobomb makes is that collection of

04:06.120 --> 04:13.240
data structures that capture lost all of the Esbom data. We also capture how data gets degraded if

04:13.240 --> 04:20.600
you output the Esbom data to the native format, so if the idea is that you should never lose Esbom

04:20.600 --> 04:27.240
data, but in the cases that there's like some minor nuance that you have to, we document that and we

04:27.240 --> 04:34.680
let you know in the ideas that you can control how that that all of this happens. The second part of

04:34.680 --> 04:40.040
Protobomb is the library that we maintain. So, we maintain serializers and non-serializers to

04:40.040 --> 04:44.680
read and write the data into each of the formats, so the idea is that if you're building an Esbom

04:44.680 --> 04:51.800
application, you can read all of the data and work with the neutral representation of the data,

04:51.800 --> 04:58.120
and then we try to solve some of the most common problems there. The first one was ingestion and

04:58.120 --> 05:06.520
writing, and right now some new contributors on the project are solving how to pair our data

05:06.600 --> 05:11.320
structures with Gorms so that they can be ingested. So, the idea is that if you are trying to develop

05:11.320 --> 05:16.520
an Esbom application, you don't need to care about reading, writing, or storing that information

05:17.560 --> 05:27.080
in a database. Protobomb also offers an API to work with the Esbom data, so if you ingest

05:28.040 --> 05:36.920
data from Esbom, you can do some graph operations on it, so you can compare, mix, have differences

05:36.920 --> 05:42.600
between the information, and keep in mind that since Protobomb is operating one level above the

05:42.600 --> 05:49.240
formats, you don't care where the data came from. So, you can, for example, defend the SPDXS1 with

05:49.240 --> 05:56.680
a second on the SS1 or a cross versions, so for example, you can read an SPDX2 and an SPDX3

05:57.320 --> 06:02.680
document and make sure that they compare, and this is where we have that library of SPDX3

06:03.400 --> 06:06.120
test that we had before, we were mentioning before.

06:09.240 --> 06:14.360
And then one thing that we often get asked about is we are not trying to introduce a new,

06:14.920 --> 06:20.600
like a new Esbom format, so our idea is that we want to make things easier for developers

06:20.600 --> 06:26.200
while I think the actual experts do all of the expressivity that the Esbom formats need,

06:27.000 --> 06:33.960
so if you, while some of those data structures could be rendered, there are no guarantees that

06:33.960 --> 06:41.400
they will keep being useful if you try to exchange data in them. So, the way I want to

06:41.400 --> 06:47.720
analogy I often like to do is if you think about a picture, you want to work with a picture, so

06:47.720 --> 06:52.120
you don't care if that picture came to you in a JPEG or a PNG file, you just want to work with

06:52.120 --> 06:57.080
pictures and then when you have to save it for some reason, you can choose the appropriate format

06:57.080 --> 07:02.360
that you need to, that you prefer. So, how is Protobom, how does it handle the data? So,

07:03.080 --> 07:08.680
it's a graph, and why is it a graph? Well, if you think about it, both formats are really graphs,

07:08.680 --> 07:14.200
so SPDX, of course, was born as a graph, so you have packages and files connected,

07:14.200 --> 07:18.680
which are the nodes of the graph, and then you have directed relationships between them,

07:19.560 --> 07:27.480
and they are typed, and in Cyclone DX you have the components tree, and a tree is sort of a

07:27.480 --> 07:35.000
simple graph, but Cyclone DX also has a dependency tree that can be used to create new relationships

07:35.000 --> 07:41.480
between them, so that also forms a graph. So, in a graph, we start with a node, and then connect

07:41.480 --> 07:47.960
that node in an edge to another node, and so on, and in Protobom, those nodes are the packages and

07:47.960 --> 07:53.880
the files are represented in DSLM data, and we also add types, and the types are, I would say,

07:53.880 --> 08:02.920
inspired, but truly stolen from SPDX, and then we capture that data structure in something that we

08:02.920 --> 08:09.400
call a node list. So, the node list captures a fragment of our graph, which can be the whole

08:09.400 --> 08:17.800
document, and then using that node list to create a document, we simply wrap it in a container

08:17.800 --> 08:22.680
that's called the document, and then at some metadata, you have your S1 representation,

08:22.680 --> 08:28.920
and then using that node list is how we can create fragments and operations of S1 data.

08:30.360 --> 08:39.960
Finally, Protobom is an open source project hosted on the OpenSSF. We're on community

08:39.960 --> 08:49.880
meetings every two weeks, and if people want to join the community meetings, create libraries for it,

08:51.240 --> 08:58.920
the meetings are open to all. So, I think, hopefully, that was quick enough, and we

09:01.240 --> 09:06.280
for questions? Oh, awesome. Yeah, I was trying to get to that. So, yeah, well, these are the

09:06.920 --> 09:14.440
links. So, yeah. So, how do you handle the cases that you have a single S1 itself, or

09:14.440 --> 09:20.440
multiple S1s that connected by references? That is exactly, yeah. So, how do you handle,

09:21.080 --> 09:24.280
yeah, yeah. So, how do you handle when you have reference S1s?

09:25.320 --> 09:32.440
Instead of a single file? Well, the external references, they are lifted into the project

09:32.440 --> 09:39.160
itself. So, if you have a S1 that references others, we will just hold the references in the

09:39.160 --> 09:43.400
data. We don't follow them. That's something that we could potentially view. But the more

09:43.400 --> 09:48.520
interesting case is what happens when, for example, in SPDX, you can have many top-level

09:48.520 --> 09:53.880
components, and then Cyclone DX has one root-level component, and that's one of the degradations

09:53.880 --> 10:00.120
that you can control. So, you can make, if you ingest a project, like, if you try to write

10:00.200 --> 10:08.200
Cyclone DX, S1 that has multiple top-level nodes, you can control whether your project

10:08.200 --> 10:15.400
throws an error or just returns you the loss data or simply gives you a warning, for example.

10:15.960 --> 10:19.960
These are like tiny hacks that we're building into the project so that you can control how it

10:19.960 --> 10:25.320
behaves. You're treating like a monohepo for multiple root levels or a project file that's going...

10:26.200 --> 10:31.400
So, it's like in terms of your development, you're treating the multiple root files like a

10:31.400 --> 10:33.960
monohepo for multiple projects. Right, exactly.

10:36.200 --> 10:42.360
Yeah, so is it like a monorepo where you have all of your projects, like one root and then all of

10:42.360 --> 10:47.720
the projects there, or just like individual repositories breaking down the tree? Thomas?

10:55.400 --> 10:58.680
I can barely hear you.

11:13.880 --> 11:18.200
If you have different... So, the question, let me see if I understood. So, if you have six different

11:18.200 --> 11:27.480
tools that write S-bombs, how does it help? Well, the idea is, well, based on this... So,

11:27.480 --> 11:34.280
this is just a library to ingest and to write, right, so at the moment. So, based on this, you

11:34.280 --> 11:40.600
can start building other different abstractions of that same data. So, we have some demos of other

11:40.600 --> 11:46.680
tools that, for example, can recompose that data. So, if you have S-bombs in different structures

11:46.680 --> 11:53.400
that have, for example, a top-level component of one thing, and then in a live-down somewhere

11:53.400 --> 11:57.800
information about the same component, you can take those two and mix them in a new node that has

11:57.800 --> 12:02.040
all of the complete information. And this was thought because sometimes you will have a tool

12:02.040 --> 12:07.000
that will look at software, give you like secure information, you will have another tool that will

12:07.000 --> 12:11.160
give you licensing information. So, you can take those two and combine them into a single one.

12:12.120 --> 12:16.120
Yeah.

12:16.120 --> 12:21.160
Do you have any recommended GraphDB to store these data in?

12:21.160 --> 12:30.120
No. In fact, we're basing it on Gorm. So, right now it's more SQL table-based, but that would be enough.

12:30.120 --> 12:35.720
So, if there's like a recommended Graph database to store this, I don't think I know.

12:35.720 --> 12:38.680
So, let's thank everyone for...

