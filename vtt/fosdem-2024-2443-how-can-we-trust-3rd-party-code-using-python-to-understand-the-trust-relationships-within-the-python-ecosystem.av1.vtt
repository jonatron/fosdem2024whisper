WEBVTT

00:00.000 --> 00:16.720
Hi everyone, good afternoon. You're hearing the Python Dev Room. So we're going to have

00:16.720 --> 00:23.440
now Nigel Brown speaking about how we can trust third party tools when we have Python.

00:23.440 --> 00:28.160
Many times we don't realize all the dependencies that happen when we install a package from

00:28.160 --> 00:34.480
PyP and Nigel will be talking about how we can avoid getting some dodgy packages and things.

00:34.480 --> 00:45.040
Thank you very much Nigel. Thank you. Thank you. Right. Okay. My name is Nigel Brown. I've been

00:45.040 --> 00:52.880
programming since 1981 as a kid. I got a job about 12 years later. I've done mobile devices,

00:52.960 --> 00:58.880
security, data, lots of different languages. I currently work at a company called Stack Lock

00:59.680 --> 01:04.560
where I'm doing some data science and some engineering. If you're interested in the supply

01:04.560 --> 01:08.960
chain and frankly who isn't these days, you'll love Stack Lock. You should check them out.

01:09.840 --> 01:15.200
This talk covers some of the ideas that we've been grappling with there for the last nine months or so.

01:15.280 --> 01:24.880
Okay. Here are some supply chains attacks and recent examples. I don't know much about these attacks.

01:24.880 --> 01:31.440
I'm not a security researcher. Every time I read about one, I feel vaguely uncomfortable. These are

01:31.440 --> 01:38.960
things that could apply to me on the whole. And this is why we're looking at these things

01:39.040 --> 01:44.960
and the flames prove that they're scaring things. Okay.

01:47.600 --> 01:54.560
So, recent lawmaking legislation. We've got the executive order 1428 in the States and

01:55.200 --> 02:01.520
cybersecurity resilience proposals. The EO pushes S-bombs. What's an S-bomb?

02:02.560 --> 02:07.040
The software bill of materials. It's probably a bit too much detail to go into right now.

02:07.120 --> 02:10.240
Let's look it up. There's tracks over in the building about this.

02:12.320 --> 02:17.520
The S-bombs are more of a first step than a solution. They're a step in the right direction.

02:18.240 --> 02:24.240
Creating them sounds simple. But the practicalities get in the way actually and doing something with

02:24.240 --> 02:33.840
them is more of an art than a science still. They are progressing. The key point is the

02:33.840 --> 02:41.920
responsibility for the security of your code is shifting towards spenders. That means it's

02:41.920 --> 02:48.160
shifting towards you on the whole. There's some more scary flames there because that's

02:49.520 --> 02:58.320
quite scary. Okay. Supply chain attacks aren't you. It all boils down to who and what you trust.

02:59.280 --> 03:04.880
The key point really is that security, insecurity most often comes from behavior rather than the

03:04.880 --> 03:16.080
technology. Why are supply chain attacks becoming more fashionable? Maybe it's because they're easier

03:16.080 --> 03:23.200
than they used to be. Perhaps maybe everything else got harder. Okay. Perhaps they were always there

03:23.280 --> 03:28.400
and we just didn't notice. I don't know the answer there, but there is a lot more focus on them

03:29.040 --> 03:29.600
these days.

03:37.440 --> 03:45.040
So a word on trust. Basically, we want to trust some third party code.

03:45.920 --> 03:54.000
That circle represents us. We're victims, skateboards, developers. The supply chain is how this

03:54.000 --> 04:02.960
code actually gets to us. We generally get code delivered as some form of package.

04:05.920 --> 04:12.080
And that package, the source and the package have to live somewhere. Sometimes they live in the

04:12.080 --> 04:16.720
same place as in go, which is a very good example. Sometimes they're different places.

04:18.480 --> 04:23.840
Some other package repository. These can be private, but we're talking mostly about open source.

04:25.680 --> 04:30.320
Important point, we have to download it. These are all potential failures for the software supply

04:30.320 --> 04:38.480
chain. Of course, we have multiple versions. They're changing all the time. They're moving target.

04:39.440 --> 04:45.840
And there's normally tags in a source repository that point to the different versions.

04:47.040 --> 04:51.120
And these are delivered as a bag of files to us on our laptops or our servers.

04:54.000 --> 04:58.080
At this point, we can scan them. We can do vulnerability scanning and we can do static

04:58.080 --> 05:02.640
code analysis. We should do that. Definitely should do that.

05:06.720 --> 05:13.520
And the code has owners. And the point here is that you can't really trust code. It just

05:13.520 --> 05:19.120
is what it is. It's the owners you're trusting. And the question we're faced with a lot of the time

05:19.120 --> 05:26.320
is do we trust the right people? And it's not just the code owners. There are

05:26.320 --> 05:32.720
multiple other people, contributors. And we trust those people because of their reputation.

05:35.520 --> 05:42.080
Reputation comes from several sources. It comes from various media. Personal knowledge,

05:42.080 --> 05:46.480
you might know some of the developers. They're all quite often we trust in a community of one

05:46.480 --> 05:54.400
sort or another. And companies have reputation too. Sometimes good, sometimes bad.

05:57.840 --> 06:01.360
How do you trust a company? If you've got close source, that's the only trust you've got actually.

06:04.480 --> 06:07.360
The web of trust here is building up. Now,

06:07.440 --> 06:16.400
turtle is all the way down. It's an expression of infinite regress. I heard it once. I thought

06:16.400 --> 06:21.680
it would be a good metaphor for this stuff. It turns out, I'm looking for an image, turns out

06:21.680 --> 06:27.840
Cole Kennedy thought the same thing. So I nicked his image because it displays this quite well.

06:29.280 --> 06:36.240
The average middle size, medium size project has about 1500 transitive dependencies.

06:37.200 --> 06:44.800
So you depend on something and it depends on other things. And you can investigate one package

06:44.800 --> 06:50.640
at a time. You can look at its origins. You can look at the people. You can perhaps do a code

06:50.640 --> 07:02.480
audit. But doing thousands of them is hard work. It will just take too long. Now, we probably want

07:02.560 --> 07:06.640
automation to help with this. And that's one of the things that we're working on.

07:07.600 --> 07:11.520
Trying to give this thing some oil to keep it going.

07:13.440 --> 07:21.040
So this web of trust, the supply chain can be attacked at any point here. And it can break at

07:21.040 --> 07:26.640
any point. It doesn't have to be attacked necessarily. And also the main point, there's

07:26.640 --> 07:30.560
thousands of ways you can draw this diagram. It doesn't have to be like this.

07:31.520 --> 07:38.880
But there is complexity there. And it's messy. So what do we do about this mess?

07:41.600 --> 07:48.320
Okay. So what we currently do, we really like to see these. And that's because we can count them.

07:48.320 --> 07:56.160
And we can fix them. We can show improvements. They've been guilty of a little bit of a misdirection

07:56.160 --> 08:01.360
actually. In reality, only about 2% of these are exploitable.

08:04.080 --> 08:11.120
So if you're not careful, you end up doing a lot of work that you don't actually have to.

08:11.680 --> 08:17.600
This comes from Red Hat Report. I've seen other estimates of this 2% value. And they are similar

08:17.600 --> 08:25.360
sizes. Okay. Another thing you can do, static code analysis. Currently, it's mostly signature based.

08:25.600 --> 08:32.240
Finds things that we've found before. We think there may be more legs in perhaps grabbing the

08:32.240 --> 08:37.440
source, grabbing features from the source code and running it through a neural net. And this may or

08:37.440 --> 08:42.880
may not be more effective. There's still, there's lots of research out there. But there's still

08:42.880 --> 08:50.560
lots to do. We think we're going to be doing some of this work ourselves at Stack Lock.

08:51.120 --> 08:58.240
So, but that's more for the future. I mean, but the criticisms aside, we should definitely do

08:58.880 --> 09:03.920
CVE monitoring and static code analysis. Right. So don't take anything I say here.

09:03.920 --> 09:13.120
This is an excuse for not doing these things. Okay. So another idea is to look at metadata

09:13.120 --> 09:20.320
rather than the code itself. Okay. So that would be descriptions of the package links to the

09:20.320 --> 09:26.640
source repositories, activity around it, et cetera, et cetera. This is like a bit like a

09:26.640 --> 09:32.320
classic security traffic analysis or perhaps in bank fraud detection. We're looking for behavior

09:32.320 --> 09:39.360
around the package rather than the actual code itself. Okay. So this is a graph.

09:41.200 --> 09:47.520
A graph. We got basically malicious packages look different from

09:48.320 --> 09:53.120
non-malicious packages on the whole. The ones on the left, these little blue dots,

09:53.120 --> 09:57.600
malicious packages. The ones on the right are non-malicious packages. They're surrounded by

09:57.600 --> 10:04.240
nice bunch of purple users and orange source repositories. You can't see that probably in

10:04.240 --> 10:11.440
any detail from where you're sitting. The point is they look different most of the time. Sometimes

10:11.840 --> 10:18.480
you get good packages over here that are sort of isolated and you get malicious packages over there

10:18.480 --> 10:27.200
that are well connected. So I don't know. It's a malice parent there. It is some of the

10:28.080 --> 10:34.080
malicious packages look fine. Most malicious packages don't make any effort to hide the fact

10:34.080 --> 10:37.680
that they're malicious. If you look at their metadata, it's quite obviously something. There's

10:37.680 --> 10:43.680
no description. There's no effort put in at all. Unfortunately, a lot of legitimate packages look

10:43.680 --> 10:55.840
like that as well. It makes it a little bit harder. We started off. We put a neural net on this and

10:55.840 --> 11:01.360
we tried to put a classifier and we classified into malicious and non-malicious packages.

11:02.320 --> 11:07.040
It worked beautifully. It's like so what? You don't really need a neural net to tell the

11:07.040 --> 11:11.760
difference between those two things. You just need to look, you know, has it got any data associated

11:11.760 --> 11:21.760
with it? So not necessarily very fruitful. So we don't need a neural net. Instead, we did a simple

11:21.760 --> 11:26.480
score. We did a simple score. It looks at some malicious packages. It's mostly Python. We just

11:26.480 --> 11:33.680
start with some Rust and NPM as well. We looked at the activity and the provenance. I'll come

11:33.680 --> 11:37.600
on to that a bit later. We normalize it with a whole set of packages that we ingested.

11:40.000 --> 11:45.280
You can see here that most of the malicious packages, these are just malicious packages,

11:45.280 --> 11:50.640
they scored really low. So hey, it looks like we can spot malicious files using the metadata.

11:52.240 --> 11:59.920
Not so fast. Unfortunately, the base rate let us down, as I mentioned, we do get low scores for

11:59.920 --> 12:04.480
malicious packages, but we've got 10 times as many, at least 10 times as many good packages

12:04.480 --> 12:09.680
at school zero as well, which isn't great. So if we get a low score, it means we've got a one in 10

12:09.680 --> 12:15.280
chance maybe of finding a malicious package. We don't know for sure one way or the other. So you've

12:15.280 --> 12:21.680
got to go on to your code analysis then. And also, I should point out, this isn't a representative

12:21.680 --> 12:27.840
sample. We don't have a labeled data set of all the malicious packages in the PIKI repost,

12:27.840 --> 12:33.760
because we haven't found them all yet. So we've got samples, we sample as best we can,

12:33.760 --> 12:44.320
but we don't know. So does that handicap matter? Probably not, because most of the actual packages

12:44.320 --> 12:48.000
we want to spot, most of the packages we want to use are probably on the further side of the

12:48.000 --> 12:52.640
scale. They do have good description, they do have good information, and they are linked up.

12:53.360 --> 13:00.800
There are some exceptions. All right. Okay. We act like this currently.

13:02.560 --> 13:08.240
Vulnerabilities are all that there is, and they're all deadly. Okay. This creates a lot of work for

13:08.240 --> 13:13.280
everyone, as I mentioned earlier. We're only really worried about things that can hurt us.

13:13.840 --> 13:20.000
Right? And the real, the reality is that it's more like this. Most vulnerabilities come and

13:20.000 --> 13:29.360
don't hurt us. We should use things like Open Vex, right, to describe the vulnerabilities that are

13:29.360 --> 13:33.920
actually exploitable in place, and that's a sort of an emerging standard. And then we only have

13:33.920 --> 13:38.400
to deal with the shaded bit between the two circles there. Obviously, you want to fix all

13:38.400 --> 13:44.240
vulnerabilities, but, you know, there's a prioritization system that we can employ here.

13:44.800 --> 13:50.320
Another thing to note is that malicious code doesn't always use CVEs, and there are other

13:50.320 --> 13:57.360
things that can hurt us that aren't CVEs. So, we've got malicious code leverages bad habits,

13:57.920 --> 14:04.240
like leaking keys and manual processes. We got abandoned code, and it gets taken over,

14:04.240 --> 14:12.560
and it's not updated. But bugs and bad habits and abandon where

14:12.880 --> 14:19.200
can also hurt us accidentally without being malicious, right? Malice isn't everything. So,

14:19.200 --> 14:28.320
we want to avoid all these bad things. Most of the things we actually want to know about

14:28.320 --> 14:35.040
are actually hidden from us, right? Okay. So, the malicious code is hidden by stealth.

14:36.000 --> 14:44.240
Buggy code is hidden by incompetence or apathy. And since we started patching CVEs,

14:44.240 --> 14:46.800
bad actors have moved increasingly to zero-day exploits.

14:47.760 --> 14:53.360
All right. And let's remember, most code isn't malicious. When we look at the metadata,

14:54.560 --> 15:00.160
buggy, poorly maintained, abandoned, malicious code all look similar. And you have to ask yourself

15:00.160 --> 15:04.080
the question, well, we can't tell them apart. You have to ask yourself the question, do you

15:04.080 --> 15:10.800
really want to use any of them? So, given that this is a hard problem, why not do something

15:10.800 --> 15:17.440
simpler, right? Which is to invert the question. Look for the good, not the bad, right? Looking

15:17.440 --> 15:21.360
after your health. It's like looking after your health instead of focusing on disease.

15:22.720 --> 15:29.520
So, the good bits are everything outside the circle, right? We want all the rest of the code.

15:29.520 --> 15:35.840
And for the Rust developers who insist that code could be finished, it's this bit as well,

15:35.840 --> 15:44.720
the abandoned bit. Right. So, what does this look like? We want things that probably don't hurt us.

15:44.720 --> 15:50.960
So, this is the inverse of what we just had. So, it's good coding and hygiene habits,

15:52.720 --> 15:57.280
active development, regular releases, developers we trust.

16:00.000 --> 16:08.160
CBA and stuff like that. Coding now is clear. And the key point is looking for good things is easier

16:08.160 --> 16:15.520
because it isn't hidden. Okay. Right. So, I mentioned provenance. Right. The first challenge is

16:15.520 --> 16:19.040
provenance. Okay. If you're going to do anything with any of this code, if you're going to scan it,

16:19.040 --> 16:24.080
do whatever you like, we need there. Provenance means origin, right? We need to find out where

16:24.080 --> 16:32.800
the code came from. Starjacking is when a code lies about its origin. And it tends to be a better

16:32.800 --> 16:38.240
package than it is. So, you'll find that lots of different packages share the same source repository

16:38.240 --> 16:46.880
in the package systems. It's very common. How do we find provenance? Okay. So, remember the

16:46.880 --> 16:52.720
executive order earlier mentioned S bombs. Okay. S bombs are basically a shopping list of all your

16:53.680 --> 17:00.720
of your piece of code, whatever it is, operating system, game, package. It's like a shopping list.

17:00.720 --> 17:07.200
It's a document of provenance is what it is. What you put in an S bomb isn't quite standard yet,

17:07.200 --> 17:13.520
but it's becoming more standard. There's lots of work going on with standardization. Open SSF,

17:14.480 --> 17:22.560
there's a track over in the other building that covers this. It's where we probably want to go

17:22.560 --> 17:26.960
we want to be able to record these things strongly. Now, if you've got an S bomb, you want to put it

17:26.960 --> 17:30.720
somewhere, you want to put it somewhere safe. You don't want people tampering with your S bombs. So,

17:31.680 --> 17:39.040
a thing that's becoming more common is Sigstore. And now this is artifacts signing. It's storing

17:39.040 --> 17:46.160
artifacts in a transparency log. It's a distributed ledger. It gives us cryptographically strong

17:46.160 --> 17:51.680
provenance. It circumvents most of the problems with delivery that we've got.

17:53.440 --> 17:58.080
And there's a sort of convergence on this. It's being used more and more in the community.

17:59.280 --> 18:01.920
I think it's where we're going to end up and it does solve a lot of problems.

18:02.560 --> 18:07.200
But the fact is at the moment, most code isn't signed for now. And I think it would be a few years

18:07.200 --> 18:13.760
before it is. And nothing. Historical provenance. That's a stack lock thing.

18:14.400 --> 18:21.040
Okay, so we basically, we take a bunch of tags from the source repo and we take versions and we

18:21.040 --> 18:25.680
see if we can match the dates. And if the dates match up, then we say it's got some provenance.

18:25.680 --> 18:32.160
It's a statistical process. Quite hard to fake. There's a whole video on that on the, on our

18:32.160 --> 18:34.960
website if you're interested. Videos and blogs and things like that.

18:37.600 --> 18:43.520
I won't go into that any further here. Right, so just because you've got some code, you've got

18:43.520 --> 18:49.440
rock solid provenance for it, you know where it came from. There's no, actually, it's no

18:49.440 --> 18:56.720
really shortcut way of saying if it's any good. The old fashioned ways are the only ways you test it.

18:57.280 --> 19:03.280
You measure it, SCA, again, code review. It requires the provenance of course because you

19:03.280 --> 19:06.800
don't want to be reviewing some other bit of code that doesn't apply to your package.

19:09.520 --> 19:13.680
And you become intimate with it. And with all those turtles and packages, like,

19:14.320 --> 19:22.400
intimacy takes a lot of work. Right, we've got a community of people, right. So to make this

19:22.400 --> 19:31.600
viable at any scale, you want to share the work with the community. Okay, and also we want to

19:31.600 --> 19:36.240
automate this, right, because this is, you don't want to have to be on the email talking to people

19:36.240 --> 19:46.720
all the time. All right. Okay, I mentioned reputation a couple of times. So the reputation of the

19:46.720 --> 19:50.880
people and the, the companies that we're talking about, what do we know about someone? We know,

19:50.880 --> 19:55.280
perhaps we know them, we know a company that big, we know the size of a company mostly, we don't

19:55.360 --> 20:01.920
know much about them internally. We guess and we hope and, you know, do we even care? And the

20:01.920 --> 20:08.320
executive order says that we do, apparently. So that's where our reputation currently comes from,

20:08.320 --> 20:16.160
I think. Where should it come from? It should come from prior art, participation, recommendations.

20:16.160 --> 20:26.960
Generally, we want some proof. And generally, we want to automate this. Okay, so, the key points.

20:28.080 --> 20:34.480
Once again, look for good things. They're easier to spot. You don't trust code, you trust people.

20:35.200 --> 20:41.760
Trust is complex. It can break in many places. Reputation is important. Communities can share

20:41.760 --> 20:50.000
work. And automation makes this possible at scale. Shameless plug. That's the kind of stuff we're

20:50.000 --> 20:56.960
working at at Stack Lock. We're open to ideas. Try our tools. They're on the website. Joining a

20:56.960 --> 21:05.200
conversation with Discord. The source, if you like, if it's open, if it's not yet. And that's the

21:05.200 --> 21:07.680
end of the presentation. So, any questions, please?

21:20.560 --> 21:27.040
Page presentation, Nigel. Thank you very much. We have time for one question now. There. I'm coming

21:27.040 --> 21:46.000
to you. One second. Thank you for the talk. Maybe it was some humility. But what does your

21:46.000 --> 21:57.040
product Stack Lock do exactly to apply all you said? So, is it where you attend your packages and say

21:57.040 --> 22:00.800
where are the vulnerabilities or what does it work in practice?

22:03.280 --> 22:11.680
To this URL, www.cracksypackage.dev, you'll get to a web portal and you can type in the name of a

22:11.680 --> 22:17.600
package and it'll give you a score. What we're doing is we're increasing the number of facets the

22:17.600 --> 22:26.800
score is based off of. We've got provenance measures in there and we're going to be doing a

22:27.600 --> 22:33.920
reputation engine for it as well. So, there's a website and you can go straight there. To bring

22:33.920 --> 22:40.320
this to the developer, there's a VS Code plugin and you type along, you import a file and it'll

22:40.320 --> 22:46.000
give a squiggly line underneath it and it'll say, yeah, this has got a low score. Obviously, some of

22:46.000 --> 22:50.000
the low scores are absolutely fine but it just gives you an indication that you've got to do some more

22:50.000 --> 22:55.680
investigation. There's ways around most of this stuff but it's kind of like it just gives you flags.

22:56.560 --> 23:01.440
But yeah, go to the website. It's fairly intuitive. You don't need instructions for it.

23:03.280 --> 23:08.880
Cool. Thanks for the question. Thank you very much, Nigel. Please feel free to reach out to our

23:08.880 --> 23:14.480
speaker after. Thank you.

