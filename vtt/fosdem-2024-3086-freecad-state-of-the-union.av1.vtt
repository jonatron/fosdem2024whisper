WEBVTT

00:00.000 --> 00:16.560
So, we have York and Aikson are going to talk to us about the state of FreeCAD.

00:16.560 --> 00:22.840
So please give a warm welcome to York and Aikson.

00:22.840 --> 00:25.120
Hi.

00:26.120 --> 00:28.120
Hi.

00:28.120 --> 00:30.120
Is the microphone, yeah.

00:30.120 --> 00:32.120
Hi. Hello everybody.

00:32.120 --> 00:35.120
So this is what we're going to talk today.

00:35.120 --> 00:42.120
I will make a short update of what's going on, what has been done recently with FreeCAD.

00:42.120 --> 00:55.120
And Aikson will talk more about the assembly side of things.

00:55.120 --> 00:57.120
What do I go to the next one?

00:57.120 --> 00:58.120
Page, huh?

00:58.120 --> 01:01.120
The next page, yeah.

01:01.120 --> 01:03.120
Oh my.

01:04.120 --> 01:10.120
Oh, it's hard to use other people's software.

01:10.120 --> 01:15.120
My goodness.

01:15.120 --> 01:17.120
We'll get there.

01:24.120 --> 01:26.120
Wow, it's good in the browser.

01:26.120 --> 01:28.120
We'll get there.

01:28.120 --> 01:35.120
Basically, I will already talk while we are there.

01:41.120 --> 01:43.120
Yes.

01:43.120 --> 01:45.120
Okay.

01:45.120 --> 01:51.120
So the main thing everybody is always asking us is when is version one point there ready?

01:51.120 --> 01:53.120
And I have good news for you.

01:53.120 --> 01:55.120
It's almost ready.

01:55.120 --> 02:00.120
I know we've been saying that for like five years, but I swear it's almost ready.

02:00.120 --> 02:07.120
We basically, we have two more things that we think we cannot call it one point zero without that.

02:07.120 --> 02:11.120
It's the top naming problem and assembly.

02:11.120 --> 02:16.120
That's basically what I'm going to talk about briefly.

02:16.120 --> 02:19.120
And I will talk about these other things too.

02:19.120 --> 02:23.120
That's basically all that we are doing now and what you could already,

02:23.120 --> 02:27.120
you can already see if you use a development version.

02:27.120 --> 02:30.120
Can you go one further?

02:30.120 --> 02:32.120
I hope so.

02:32.120 --> 02:34.120
Something, something.

02:34.120 --> 02:36.120
So, um,

02:36.120 --> 02:37.120
Oh,

02:37.120 --> 02:41.120
proprietary platforms, you know what that is.

02:41.120 --> 02:43.120
It's not responding.

02:43.120 --> 02:45.120
I go back.

02:45.120 --> 02:47.120
Okay, let's just do it on the browser.

02:47.120 --> 02:50.120
Yeah.

02:50.120 --> 02:53.120
So, um, that's a teacher.

02:53.120 --> 02:55.120
A lot of things.

02:55.120 --> 02:57.120
Woo.

02:57.120 --> 03:00.120
Thank God.

03:00.120 --> 03:03.120
I don't know what to say.

03:03.120 --> 03:05.120
So top naming basically is,

03:05.120 --> 03:10.120
it's the main course of, of free cad is a problem we have with free cad since a long time.

03:10.120 --> 03:14.120
Basically when you transform geometry,

03:15.120 --> 03:19.120
any geometry in free cad has named components with this is edge one, this is edge two,

03:19.120 --> 03:22.120
that is face one, face two.

03:22.120 --> 03:24.120
And when you change the geometry,

03:24.120 --> 03:28.120
the open cascade kernel of free cad reconstruct the things,

03:28.120 --> 03:33.120
the thing, and especially with, with sketches where there is a computation needed

03:33.120 --> 03:38.120
to know which edge depends on, on which one the order is shuffled.

03:38.120 --> 03:43.120
And this prevents or this hinders all the naming.

03:43.120 --> 03:46.120
When you reference one edge by name, for example,

03:46.120 --> 03:49.120
if you say, I'm building upon one edge, edge one,

03:49.120 --> 03:53.120
and then your edge one is somewhere else, your model breaks.

03:53.120 --> 03:58.120
Everybody who has worked with, worked with free cad knows that problem.

03:58.120 --> 04:00.120
That's our main course.

04:00.120 --> 04:03.120
And it's basically about to be solved.

04:03.120 --> 04:05.120
Hopefully.

04:05.120 --> 04:11.120
Crossing fingers that we'll see when it's there if it holds a promise,

04:11.120 --> 04:15.120
but it's basically a fork of free cad,

04:15.120 --> 04:18.120
which is the, the link three branch.

04:18.120 --> 04:20.120
It's working there already.

04:20.120 --> 04:26.120
So we have an example of it's working and, and it's working really reliably.

04:26.120 --> 04:30.120
So basically there is a new engine that keeps tracks of the name

04:30.120 --> 04:33.120
and renames things as it needed.

04:33.120 --> 04:37.120
And that is the last piece of this is being merged currently.

04:37.120 --> 04:41.120
So in the next few months, who knows this is done.

04:41.120 --> 04:46.120
So this is basically everything I just explained.

04:46.120 --> 04:47.120
Assembly.

04:47.120 --> 04:51.120
Dr. Co will talk about it in a moment.

04:51.120 --> 04:54.120
We have lots of new stuff in the sketch.

04:54.120 --> 04:59.120
That's basically where most of the new stuff is being done now.

04:59.120 --> 05:03.120
We have auto constraining, which is much better.

05:03.120 --> 05:11.120
We have lots of people are working on really interface things and having the workflow in the sketch or more streamlined,

05:11.120 --> 05:14.120
removing some unnecessary operations.

05:14.120 --> 05:21.120
Now you can build these things and you erect a grid to try and other shapes and you already have the right conference put for you.

05:21.120 --> 05:23.120
You just need to edit.

05:23.120 --> 05:27.120
If you want to change anything, we have on screen inputs.

05:27.120 --> 05:32.120
So you make a rectangle, you click two points and you can enter the dimensions there without having to build.

05:32.120 --> 05:35.120
We don't have to go click anywhere else.

05:35.120 --> 05:38.120
So those are like small UI improvements.

05:38.120 --> 05:50.120
But we are beginning to get into UI and UX and try to address all those little things and make see what we can do to make things flow better.

05:50.120 --> 05:55.120
Lots of teaming and UI work is being done too.

05:55.120 --> 06:04.120
There are new teams coming, trying to solve, make all these little widgets a little bit better,

06:04.120 --> 06:09.120
a little bit less different one from each other.

06:09.120 --> 06:16.120
There are light teams for who likes light teams, dark teams for who likes dark teams.

06:16.120 --> 06:19.120
Everybody is having fun with this.

06:19.120 --> 06:25.120
It's surprising how everybody use them to say, oh, wow, this is so much better and it's just teaming.

06:25.120 --> 06:36.120
But you can do so much with that in terms of having your own application like behave more the same across, across where benches etc.

06:36.120 --> 06:44.120
Before I let Aksion talk just a last word about what's happening around Fricade.

06:44.120 --> 06:47.120
We are in a kind of exponential growth now.

06:47.120 --> 06:52.120
Things are like pouring everywhere and new developers coming from all kinds.

06:52.120 --> 06:56.120
We have a non-profit since it's our second year now.

06:56.120 --> 06:59.120
The FPA is the Fricade Project Association.

06:59.120 --> 07:04.120
And we begin to finally, we begin to learn how to spend money.

07:04.120 --> 07:12.120
Like it would be hard to earn money, but it's actually much harder to spend it in an open source project.

07:12.120 --> 07:17.120
How do you do that responsibly, transparently?

07:17.120 --> 07:19.120
How you make the best of the money?

07:19.120 --> 07:27.120
It's really something we had to learn and it took more than a year to begin to learn about it.

07:27.120 --> 07:35.120
Some Fricade veterans have also created a commercial company around Fricade, which is Onsell,

07:35.120 --> 07:44.120
which is its aim is basically to try to sell commercial solutions to people who need commercial stuff.

07:44.120 --> 07:49.120
Companies who are not comfortable with taking an open source software.

07:49.120 --> 07:54.120
And so the idea of Onsell is to bring them a commercial package.

07:54.120 --> 08:01.120
So with all the stuff that companies need around an open source software to feel more comfortable.

08:01.120 --> 08:06.120
And as always, Blender is our main inspiration into all this.

08:06.120 --> 08:14.120
Like how they managed to get to higher commercial levels and still, it's still a community project.

08:14.120 --> 08:17.120
And that's basically what we're trying to do here.

08:17.120 --> 08:25.120
Like maintain Fricade as a community project and try to wet our feet with that commercial world.

08:25.120 --> 08:32.120
We want Fricade, but without getting lost in the way.

08:32.120 --> 08:38.120
So I'll let action talk about the assembly system now.

08:38.120 --> 08:41.120
Testing, testing, can you hear me?

08:41.120 --> 08:44.120
Alright, thanks.

08:45.120 --> 08:55.120
Okay, I'm going to talk about what is called the Onsell assembly solver.

08:55.120 --> 09:00.120
I'm part of Onsell and assembly will be LGPL.

09:00.120 --> 09:05.120
And the work starts from my work.

09:05.120 --> 09:09.120
Oh my.

09:09.120 --> 09:12.120
There are your slides now.

09:12.120 --> 09:14.120
I know, but...

09:14.120 --> 09:18.120
How do I get out?

09:18.120 --> 09:19.120
Get out?

09:19.120 --> 09:20.120
Escape?

09:20.120 --> 09:22.120
There's an escape?

09:22.120 --> 09:26.120
Oh my.

09:26.120 --> 09:28.120
Can you go just page...

09:28.120 --> 09:30.120
Oh yeah.

09:30.120 --> 09:32.120
If you go that way, you have yours.

09:32.120 --> 09:34.120
Alright.

09:34.120 --> 09:45.120
So basically, my work starts here.

09:45.120 --> 09:51.120
Goodness, what is so tough suddenly?

10:05.120 --> 10:15.120
I have a very little introduction while you're looking at it.

10:15.120 --> 10:19.120
There was at the time a second Fricade project.

10:19.120 --> 10:23.120
When Fricade started, there were two projects, two open source projects named Fricade.

10:23.120 --> 10:26.120
And one of them was ours that we know.

10:26.120 --> 10:31.120
And the other one was something that I called launched.

10:31.120 --> 10:36.120
And now after like 15 or something years,

10:36.120 --> 10:40.120
Dr. Ko is like putting his Fricade inside our Fricade.

10:40.120 --> 10:43.120
And it's like a cosmic combination.

10:43.120 --> 10:48.120
Both Fricade are joining into one effort.

10:48.120 --> 10:50.120
Right.

10:50.120 --> 10:56.120
I started out doing this in earnest in 1991.

10:56.120 --> 11:02.120
And this project here, I started out as Fricade

11:02.120 --> 11:05.120
and I launched it in the year 2000.

11:05.120 --> 11:09.120
So predating Fricade.org.

11:09.120 --> 11:15.120
Anyhow...

11:15.120 --> 11:20.120
So the important thing here is this software here

11:20.120 --> 11:23.120
is a multi-body dynamic software

11:23.120 --> 11:28.120
which is equivalent to say, Adams for those who are into multi-body dynamics,

11:28.120 --> 11:34.120
which is probably the premier multi-body dynamic software used in industry

11:34.120 --> 11:39.120
by Boeing, Ford, Caterpillar and so on.

11:39.120 --> 11:44.120
So I was in the theory of multi-body dynamics in the 1980s.

11:44.120 --> 11:47.120
So I really got absorbed into it.

11:47.120 --> 11:52.120
But the license for Adams was, of course, ridiculous for a professor.

11:52.120 --> 11:57.120
And I just said, okay, I know how to do it, so I decided to make it.

11:57.120 --> 12:01.120
So the next question was, you know, do I program in FORTRAN?

12:01.120 --> 12:03.120
Do I program in C?

12:03.120 --> 12:08.120
And I said, if I did that, I'd be 20 years behind.

12:08.120 --> 12:13.120
And I was just saying, you know, let me look, see what is more productive.

12:13.120 --> 12:18.120
As it turns out, in the 90s, small talk was the big rage.

12:18.120 --> 12:21.120
Small talk had just invented the GUI.

12:21.120 --> 12:28.120
Small talk had just invented the mouse, integrated IDEs and so on.

12:28.120 --> 12:31.120
So I used small talk for this program.

12:31.120 --> 12:36.120
And within a year, I was able to get a simulation going.

12:36.120 --> 12:42.120
And then I spent about, you know, three to five years, depending on how you count it,

12:42.120 --> 12:45.120
to get what you see on the left side.

12:45.120 --> 12:48.120
Speak closer. All right.

12:48.120 --> 12:50.120
On the left side.

12:50.120 --> 12:54.120
And I tried to commercialize that.

12:54.120 --> 12:57.120
Indeed, we did form a company.

12:57.120 --> 13:00.120
And we got bought up by Adams.

13:00.120 --> 13:03.120
I decided to leave to start my own.

13:03.120 --> 13:11.120
And I put this, as you can see, the graphics here is, of course, pretty bad.

13:11.120 --> 13:13.120
Just extrusion.

13:13.120 --> 13:16.120
2D is extruded. That's it.

13:16.120 --> 13:20.120
So I made add-ins for space claim.

13:20.120 --> 13:25.120
And the motion simulation is mine, still running in small talk.

13:25.120 --> 13:28.120
But the simulation now works with space.

13:28.120 --> 13:31.120
And the system is quite capable.

13:31.120 --> 13:34.120
It can do systems like this.

13:34.120 --> 13:39.120
And hopefully, FreeCAD will be doing this in the future.

13:39.120 --> 13:45.120
Certainly in kinematics and assembly, that will be all LGPL.

13:46.120 --> 13:54.120
We, the multi-body dynamic side, the dynamic side, we undecided at this point.

13:54.120 --> 13:55.120
Okay.

13:55.120 --> 14:03.120
So hopefully soon FreeCAD will be able to simulate systems like this.

14:03.120 --> 14:04.120
Okay.

14:04.120 --> 14:06.120
All right.

14:06.120 --> 14:08.120
Back to my slide.

14:10.120 --> 14:11.120
15 minutes left.

14:11.120 --> 14:13.120
Okay. Good.

14:16.120 --> 14:20.120
So the theory, if you're interested in the theory,

14:25.120 --> 14:27.120
the theory is right there.

14:27.120 --> 14:29.120
Okay.

14:29.120 --> 14:32.120
It's in open office format.

14:32.120 --> 14:37.120
And this is just a summary page in PDF.

14:37.120 --> 14:44.120
And for those who, you know, want to get into the details, it's all there.

14:44.120 --> 14:45.120
Okay.

14:45.120 --> 14:49.120
And hopefully it's reproducible too.

14:49.120 --> 14:50.120
All right.

14:59.120 --> 15:04.120
So this is the open source version, which is in C++.

15:04.120 --> 15:05.120
All right.

15:05.120 --> 15:13.120
In order to make it work in FreeCAD, I had to translate it from small talk to C++.

15:14.120 --> 15:22.120
And that was an exercise that really taught me something interesting too.

15:22.120 --> 15:30.120
So translating from C++ would be similar to translating from Python to C++.

15:30.120 --> 15:39.120
So, all right.

15:39.120 --> 15:41.120
A little bit more on the theory.

15:41.120 --> 15:43.120
I'm supposed to make it technical.

15:43.120 --> 15:47.120
I guess they want me to impress you guys with the technicality.

15:47.120 --> 15:48.120
So.

15:53.120 --> 15:59.120
It's basically you have the world frame or the inertial frame.

15:59.120 --> 16:07.120
And then from there you go to the assembly frame for, and then from the assembly, you go to the part frame.

16:07.120 --> 16:08.120
All right.

16:08.120 --> 16:13.120
And then from the part frame, you have markers frame.

16:13.120 --> 16:14.120
All right.

16:14.120 --> 16:18.120
And then from the marker frame, you go to the end frame.

16:18.120 --> 16:27.120
And the end frame can be on a point or it could be on a curve or it could be on a surface.

16:27.120 --> 16:28.120
All right.

16:28.120 --> 16:37.120
And the point itself could be moving relative to the marker and the curve itself could be changing shape relative to the marker.

16:37.120 --> 16:39.120
And why would I want to do that?

16:39.120 --> 16:58.120
For example, if I have an actuator moving a piston or hydraulic piston out as a function of time, I want to be able to describe the movement of the E marker relative to the M marker.

16:58.120 --> 17:04.120
And that would be the purpose of having things move.

17:05.120 --> 17:20.120
So once you have the kinematics where the position of things are, the next thing is to use constraints to make sure that they connect in an interesting way to make your mechanism.

17:20.120 --> 17:21.120
All right.

17:21.120 --> 17:27.120
And the constraints are basically absolute constraint, Euler parameter constraint at point.

17:27.120 --> 17:31.120
That means they are at the same point in the plane.

17:31.120 --> 17:33.120
The lines are perpendicular.

17:33.120 --> 17:39.120
They are at a certain distance, constant velocity in couplers and so on.

17:39.120 --> 17:40.120
Extruster.

17:40.120 --> 17:49.120
So the equations and we solve this in a right way, mathematical, exact way.

17:49.120 --> 17:55.120
You should get kinematics and dynamics quite nicely.

17:55.120 --> 18:10.120
So right now we have a lot of assemblies in free cat, but I don't think any of them solve the full kinematic equations completely in 3D.

18:10.120 --> 18:21.120
So with that, you can create joints like this, rigid, prismatic, revolute, parallel, cylinder, cylindrical, spherical, and so on.

18:21.120 --> 18:30.120
And hopefully almost all of modern day mechanisms could be solved using this combination of joints.

18:30.120 --> 18:37.120
So let me share something that I think is most interesting that I discovered in this practice.

18:37.120 --> 18:40.120
So I started on a small talk, which is very Python like.

18:40.120 --> 18:44.120
So I think that could be shared with you guys.

18:44.120 --> 18:49.120
Going from small talk to Python or Python to C++.

18:49.120 --> 18:53.120
I was a bit worried, you know, how do you do it?

18:53.120 --> 19:01.120
And, you know, C++ is of course a terrifying language to me.

19:01.120 --> 19:08.120
But I realized that actually I don't need to use all the bells and whistles of C++.

19:08.120 --> 19:15.120
Let me just get into C++ so that you can get into free cat.org.

19:15.120 --> 19:20.120
So I made C++ in a way that is small talk like.

19:20.120 --> 19:30.120
And once I was able to do that, miraculously, the small talk and the C++ could stay on side by side and look very similar.

19:30.120 --> 19:38.120
And as a result, I was able to do a translation in about 6 months when I was worried, wow, it may take quite a long time.

19:38.120 --> 19:44.120
So I want to pass this on to you because Python people may want to do that too.

19:44.120 --> 19:49.120
You want to, you have developed something in Python, it's nice, but it's slow.

19:49.120 --> 19:53.120
You want now to put it into C++ to make it fast.

19:53.120 --> 19:58.120
And you have never wanted to do that because it's just terrified of C++.

19:58.120 --> 20:03.120
But now I think there's an opportunity. It's not that difficult.

20:03.120 --> 20:08.120
Okay, so you will make Python and C++ look alike.

20:08.120 --> 20:13.120
So what's the secret?

20:13.120 --> 20:18.120
I don't worry about protect and private. Everything is public.

20:18.120 --> 20:22.120
All variables are public. Functions are public and virtual.

20:22.120 --> 20:30.120
Okay, and the secret is to use smart pointers, shared, underscore, PTR.

20:30.120 --> 20:40.120
If you do that, then the C++ objects behave very much like the Python object.

20:40.120 --> 20:48.120
Okay, and in the past, you are afraid to use pointers because you worry about memory leaks.

20:48.120 --> 20:53.120
Okay, you worry about when to use new and delete.

20:53.120 --> 20:57.120
And if there's a match, you are guaranteed to have memory leaks.

20:57.120 --> 21:05.120
And then the other thing is in C++, you have copy by value or copy by reference.

21:05.120 --> 21:13.120
But if you use shared pointer, those things, you don't have to worry.

21:13.120 --> 21:18.120
The only slide additional is the worry of circularity.

21:18.120 --> 21:23.120
You have one shared pointer, A to B, and if B points back to A,

21:23.120 --> 21:28.120
that would be a circular reference.

21:28.120 --> 21:32.120
All you have to do is you use a shared pointer from A to B,

21:32.120 --> 21:36.120
and then from B to A, you just use a plain raw pointer.

21:36.120 --> 21:41.120
And that circularity for shared pointer will not be a problem.

21:41.120 --> 21:46.120
As you go around in a bigger circle, you just have to break one of those with a raw pointer,

21:46.120 --> 21:49.120
and you should be in good shape.

21:50.120 --> 22:00.120
So that's my, I guess, extra bonus message to you guys about Python to C++.

22:00.120 --> 22:02.120
That's it.

22:02.120 --> 22:14.120
Just one last thing to add is that there is already a version of this working in FreeCAD

22:14.120 --> 22:21.120
that you can get in the on-cell has a special build of FreeCAD that they issued

22:21.120 --> 22:24.120
which already contains part of this.

22:24.120 --> 22:31.120
So that's testable in their build and soon in main FreeCAD.

22:31.120 --> 22:34.120
Okay. Are there any questions?

22:42.120 --> 22:44.120
Hello, thank you very much for the very nice talk.

22:44.120 --> 22:48.120
I'm very curious with all this new powerful functionality,

22:48.120 --> 22:52.120
what your thoughts are about possible changes to the user interface.

22:52.120 --> 22:56.120
If it will be easy to integrate, if there need to be new concepts in the user interface,

22:56.120 --> 22:58.120
maybe if there would even be visual programming,

22:58.120 --> 23:04.120
like how do we envision that users can use all the functionality that you introduce?

23:06.120 --> 23:13.120
Assembly has been around in a long time, so I don't think there's anything unusual.

23:13.120 --> 23:18.120
So we are developing something on on-cell,

23:18.120 --> 23:26.120
but I believe that any of the assemblies can use my solver to get good assembly solutions.

23:31.120 --> 23:38.120
Hello, can I ask if there's any roadmap for the path work bench

23:38.120 --> 23:44.120
and in particular about using the fourth access, the available ability,

23:44.120 --> 23:46.120
if that is on the roadmap at all?

23:49.120 --> 23:51.120
Yes, what do you know about that?

23:53.120 --> 23:56.120
Sorry, could you repeat?

23:56.120 --> 24:02.120
Brad Collette is the, I guess, originator of path.

24:04.120 --> 24:10.120
From talking to him, he wants to make it as professional as possible,

24:10.120 --> 24:13.120
or as solid as possible.

24:13.120 --> 24:20.120
So I'm sure it's in our roadmap, but I don't know exactly what that roadmap is.

24:20.120 --> 24:25.120
I mean, it's certainly a high priority. Let's put it that way.

24:28.120 --> 24:32.120
So my question is, is there going to be a default assembly workbench

24:32.120 --> 24:34.120
and a DAST case with one one?

24:35.120 --> 24:37.120
Good question.

24:37.120 --> 24:38.120
You want to?

24:38.120 --> 24:46.120
I think we have Pierre Boyer creating one in on-cell,

24:46.120 --> 24:50.120
and we call it an integrated assembly.

24:52.120 --> 24:59.120
But like I said, for everyone to work together to create one nice one for freeCAD,

24:59.120 --> 25:01.120
it's definitely our goal.

25:01.120 --> 25:09.120
So we'll put our integrated assembly out, and as usual, freeCAD is open source,

25:09.120 --> 25:17.120
and people can give a lot of input, hopefully constructive input, and then we can move on.

25:18.120 --> 25:24.120
Yeah, just to add something, we hope that this will be the one that unifies everybody.

25:24.120 --> 25:30.120
But it would still have all the others, and there are many paradigms,

25:30.120 --> 25:36.120
and other people who want another sort of assembly in that will stay.

25:36.120 --> 25:42.120
We just hope there will be like a good default that most people will want to use.

25:44.120 --> 25:47.120
There's a question online.

25:47.120 --> 25:53.120
Once toponaming is solved, would you allow adding custom names to elements, faces, edges,

25:53.120 --> 25:57.120
for example, instead of only having generic names like face1, edge2, etc.,

25:57.120 --> 26:00.120
a user could attach custom strings?

26:03.120 --> 26:10.120
I'm not sure I understood exactly the question, but the thing is, yes,

26:10.120 --> 26:13.120
the translation engine that we're...

26:13.120 --> 26:19.120
There is a kind of mechanism that maps the older edge1 to the new edge1

26:19.120 --> 26:24.120
and keeps tracks that's always the same edge that gets named edge1.

26:25.120 --> 26:30.120
That engine is also able... You can use custom names there.

26:30.120 --> 26:34.120
So instead of edge1, you could change the name to left edge.

26:34.120 --> 26:38.120
And so, yeah, I think that's what the person is asking,

26:38.120 --> 26:44.120
if you can begin to customize the things and give labels and names to things.

26:44.120 --> 26:47.120
And yes, that's already in the engine.

26:55.120 --> 27:00.120
Thank you very much.

27:00.120 --> 27:03.120
Super news for the topological naming problem,

27:03.120 --> 27:07.120
but I think the one most interesting to me is the change in the UX.

27:07.120 --> 27:13.120
I think that's one major, major wall for beginning users.

27:13.120 --> 27:17.120
Another question I have, I was recently listening to a podcast from Opulo,

27:17.120 --> 27:22.120
a machine making pick and place for electronics,

27:22.120 --> 27:24.120
open source but commercial.

27:24.120 --> 27:26.120
And what I found very interesting is they said,

27:26.120 --> 27:31.120
we want to build with FreeCAD just so that our machine can be the best.

27:31.120 --> 27:36.120
How much emphasis do you put on building features in FreeCAD

27:36.120 --> 27:41.120
to support this community open hardware approach of just contribution,

27:41.120 --> 27:45.120
like building... So for code, it's very easy because you just add line of code,

27:45.120 --> 27:51.120
and you have a Git diff. What about Git diff in FreeCAD somehow?

27:51.120 --> 27:54.120
Yeah, we're thinking about that all the time.

27:54.120 --> 27:57.120
Of course, it's very hard to obtain.

27:57.120 --> 28:02.120
It depends a lot on what's your use case, what you want to see in diffs.

28:02.120 --> 28:06.120
But if you look at the FreeCAD forum, you have several threads about that,

28:06.120 --> 28:10.120
people looking for possible solutions.

28:10.120 --> 28:14.120
I would say none of the other software...

