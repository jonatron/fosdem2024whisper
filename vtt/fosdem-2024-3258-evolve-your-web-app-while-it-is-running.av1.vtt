WEBVTT

00:00.000 --> 00:12.720
Thank you. So I want to evolve my application. I'm going to use Gleam and Erlang. The organization

00:12.720 --> 00:19.640
asked for slides, but this is a luster application. So I can't give you the slides. My name is

00:19.640 --> 00:25.400
Kiro van Gelder. I'm a freelancer from my own company. I've been using software for

00:25.400 --> 00:31.960
up to 30 years since I don't know how many platforms, languages, environments. And I

00:31.960 --> 00:36.840
happen to like to beam Erlang, Gleam, etc. So that's why I picked it. That's not only

00:36.840 --> 00:44.240
why I picked it. So recently I was at Langdev, model-driven stuff, all kinds of things that

00:44.240 --> 00:50.000
people showed us. One talk that spiked my interest was about, okay, well, we have a

00:50.000 --> 00:53.760
game. We have a description of a game. And while we're running the game, there's people

00:53.760 --> 00:57.720
interacting with the game. Well, there's things we don't quite like, so we're going

00:57.720 --> 01:03.400
to change the rules. And then we have to keep, the game has to keep running. So, yeah, well,

01:03.400 --> 01:07.960
okay, that looked awesome. So I thought I can build something like that, but I'm going

01:07.960 --> 01:13.240
to do it on Beam. Beam has these superpowers, all the reloading and things are, it seems

01:13.240 --> 01:17.640
really suited for it, so why not? And then the other thing I thought, well, if I want

01:17.640 --> 01:23.760
to do that with a game, and I have to build some kind of infrastructure and things, let's

01:23.760 --> 01:30.000
start with a simple game. So I picked out Holland's Ganserbord. You have a little goose

01:30.000 --> 01:37.000
spawn, and you have to reach the very middle spot. And if you look at it from the model

01:37.000 --> 01:45.400
and the rules, there's actually quite a few of interesting exceptions for all the kinds

01:45.400 --> 01:50.960
of places that you can run around on. And land on a goose, you have to move twice as

01:50.960 --> 01:56.400
far. You can skip it during, if you're in prison, well, you can only get released when

01:56.400 --> 02:04.880
someone else releases you. It's kind of special. So what will I talk about? Tiny introduction

02:04.880 --> 02:10.440
on model-driven development. I'm going to tell you why I do the modeling game. I'm

02:10.440 --> 02:13.840
going to explain a little bit about dynamic reloading as the Beam provides it for those

02:13.880 --> 02:18.680
who might not know it. I'm going to tell you why the game itself, the instance will be

02:18.680 --> 02:25.680
running in core Erlang, and that will be demos all along. Model-driven development. You want

02:25.680 --> 02:30.120
to have some model. It needs to have a very precise description, and at some point, me

02:30.120 --> 02:36.000
as an editor, sometimes in a computer editor, will make that description. And from that

02:36.000 --> 02:42.240
description, we generate an instance that is running what we described. Why would you

02:42.280 --> 02:52.280
want to do that? Instances sometimes are, well, they're compiled targets, and they know the

02:52.280 --> 02:55.840
things that they have to do, but they don't know things about themselves. A model is a

02:55.840 --> 03:01.640
description that does know it. A very nice example that was given on that Langdef was

03:01.640 --> 03:10.240
about Dutch income tax. This is described in laws. Computers do not interpret laws, but

03:10.360 --> 03:21.200
they went through the effort to take the law, adjust it a little bit so they did it together

03:21.200 --> 03:29.200
with lawyers to make sure you got something that a computer could interpret. So laws might

03:29.400 --> 03:35.520
have ambiguities or vagueness things in there. Computers don't. Well, then they had these

03:35.520 --> 03:42.520
more precise versions of the law, and they, from that model, they generated Java code.

03:42.640 --> 03:48.640
Dutch income tax is running on Java code at the moment. Additional things you can do

03:48.640 --> 03:54.400
once you have it in the model is you can start reasoning about it. So by now, I understand

03:54.400 --> 03:58.120
that even if they want to introduce a new law, they can, you can just plug it in the

03:58.120 --> 04:04.120
system and see is there any contradiction here. If so, please adjust this law proposal.

04:05.120 --> 04:12.120
Often you'll have a domain specific language like the adjusted law. For my conserboard,

04:15.320 --> 04:22.320
you could have stuff like this. Often people will want to edit these DSLs by hand, but

04:22.480 --> 04:26.920
I'm very much interested in small deltas. If I have a running game and I make a big

04:26.920 --> 04:31.680
modification in here, I don't have a game. So I need to make sure I do a small step,

04:31.720 --> 04:38.240
a small delta. So I have to, with what I do, I have to restrict the possible edits that

04:38.240 --> 04:45.240
can be done, which I call deltas. How does that look? Building a system called Eagle.

04:47.640 --> 04:54.640
It's running on a server. That is, I have a browser. That's my client. From the client,

04:55.960 --> 05:00.560
I do the editing of the model. From there, I generate my instance, my game, and then

05:00.600 --> 05:07.600
from the same or a different browser, I view the game and I play the game. Why would I

05:11.400 --> 05:16.520
want to do a modeling GLEAM? The model should be as precise as possible as I just explained.

05:16.520 --> 05:22.920
GLEAM gives us types. Type safety is more than non-type safety. So my name is GLEAM.

05:22.920 --> 05:29.920
Other benefit, a superpower of GLEAM, you can compile it both to Erlang and to JavaScript.

05:29.920 --> 05:35.720
So I can, if I have my model and I can somehow transmit it, I can just use the exact same

05:35.720 --> 05:41.720
code on both sides of my client server and I know that it's the same thing. It saves

05:41.720 --> 05:48.720
me work. What does it look like? I have my model here. So in my LusterUp, I now have

05:49.160 --> 05:55.800
an iframe. This iframe is the model client that I showed in the previous picture. It's

05:55.800 --> 06:02.800
an iframe, so it's a web page, but as you might guess, that web page again is a LusterUp.

06:04.040 --> 06:09.280
And I want to grow the Hanzer board from as minimal a thing as possible in small deltas.

06:09.280 --> 06:14.840
So let's see where we can start. My model is very simple. It's a bit too simple here,

06:14.840 --> 06:21.160
so I need a bit more of a model. I can make a list of an int. I could even make a list

06:21.160 --> 06:26.560
of a list of an int and it's represented here. And I not only want to describe that I have

06:26.560 --> 06:33.560
some type, it also needs to have some default value. In addition to that, we have a cell.

06:35.560 --> 06:40.320
My Hanzer board isn't quite finished yet. Sorry. I have a plain cell starting to finish

06:40.320 --> 06:47.040
and I might even use the goose. And right now what I also have then is a game type. It

06:47.040 --> 06:53.680
has a board which has a list of cells and it has pawns which are a list of numbers indexing

06:53.680 --> 07:00.680
where the pawns are. It's a choice. There are other choices. And the default of my Hanzer

07:02.520 --> 07:06.720
board then has one cell at the moment which is plain, which is a bit ridiculous. So let's

07:06.720 --> 07:13.000
add a few more cells and say we're going to start at some of these things. And of course

07:13.000 --> 07:16.160
the default that I gave to the int turned out to be a bit awkward because I wanted it to

07:16.160 --> 07:22.160
be zero. So I mess a bit with my model. In very small steps, I modify my description

07:22.160 --> 07:29.160
to get hopefully to a better place. Dynamic reload. Erlang and beam provides us the tools

07:33.040 --> 07:40.040
to do these timing upload. This is a loop. Usually there's a process running on the beam

07:40.920 --> 07:47.920
that is executing this loop. It had been started by another process. And generally it receives

07:48.360 --> 07:53.360
messages, handles them, sends back some results. That's what the from exclamation mark is.

07:53.360 --> 07:58.840
It sends back some result. Could be errors. Could be part of the new state. And then it

07:58.840 --> 08:05.840
loops. And another possible message could be well just stop and then you don't loop.

08:06.840 --> 08:13.840
All there is to it. What Erlang and beam also provide is a way to reload, sorry, to load

08:17.640 --> 08:24.640
new code into your, into the beam for a specific module. That's the code module in the Erlang

08:27.280 --> 08:34.280
kernel package. You call it binary here in the middle. Target is the target module. The

08:35.280 --> 08:39.560
thing in square brackets is the file name that it would be coming from. We don't care.

08:39.560 --> 08:46.560
And the object code is compiled core Erlang code. At that point when you do that, you

08:49.680 --> 08:53.000
have your old version of the code in the beam and you have a new version of the code in

08:53.000 --> 08:59.040
the beam. But the existing processes, my game, my Hansbord is still running the old stuff.

08:59.040 --> 09:06.040
So now I'm going to send a message upgrade to my Hansbord process. And roughly like that

09:08.280 --> 09:12.280
this is the same loop as before but now I have the relevant upgrade part. Instead of

09:12.280 --> 09:17.640
just looping, which would loop in my old code, I have to say format this module for my target

09:17.640 --> 09:24.000
module, my Hansbord module, explicitly specify the module with the loop and then it's guaranteed

09:24.000 --> 09:31.000
to use the new version of the code. And then I can happily play along my game with upgraded

09:32.080 --> 09:39.080
code. Now why do we do that in Erlang? The difference between the local loop and the

09:41.560 --> 09:47.680
exported loop is something that Gleam does not know. So I can't do it. Why did I pick

09:47.680 --> 09:53.680
core Erlang? Because we can do this all in memory. No need to use file systems and other

09:53.720 --> 10:00.720
things. There is an Erlang C-E-R-L library that can generate these things. I wrapped it for

10:00.800 --> 10:07.800
Gleam. That's called Gencore Erlang and you can find it on the hex. So let's start a game.

10:15.520 --> 10:22.520
I already made the type properly. So I'm ready to create a game. If I connect to the server

10:22.520 --> 10:29.320
it won't do anything here, but if I create an instance it's now and it will connect to

10:29.320 --> 10:36.320
the game. So as you can see, it picked up the start plain plain from the definitions that

10:36.600 --> 10:43.600
I had at the left. It also picked up a move button. The rules, there are some implicit

10:43.680 --> 10:50.680
rules that I did not edit things about. I did not tell anything about. I need to be able

10:51.280 --> 10:54.920
to do something in my game. So there's a hard code that moves. I will just move the pawn

10:54.920 --> 11:01.420
one forward. And there's also a check for the win condition. So where the pawn is, it has

11:01.420 --> 11:07.760
to check on the board whether that's a finished location. And that rule is going on continuously.

11:07.760 --> 11:14.760
I have not made nice deltas and things for that in the UI and when at some point I will.

11:15.120 --> 11:21.240
But these things are running in the background in the instance. Now at least I'll show you

11:21.240 --> 11:28.240
the move. If I move, my pawn moves one forward. So yay, getting closer to the finish in my

11:30.360 --> 11:37.360
GUNS board. All right. So a little bit more about the bits and pieces that are happening.

11:38.360 --> 11:45.360
There's the Asian communication from the browser to the server for the model. Whenever

11:49.120 --> 11:56.120
there is a delta that's made, we just recreate the entire instance module in Core Erlang, reloaded

11:56.120 --> 12:03.120
and upgraded. And the instance just keeps talking to it. It doesn't even notice it from the client

12:03.960 --> 12:10.960
and also talks in terms of chasing with it. State and rules. The initial state is something

12:13.640 --> 12:20.640
that should be adopted, adjusted and rules are... So yeah, that's right. The rule is

12:21.160 --> 12:25.440
something that is in the model. I talk about a conceptual thing there. My instance doesn't

12:25.440 --> 12:32.200
know the rule. It just has code. And my client doesn't know what the rule is either. It just

12:32.200 --> 12:39.200
knows whether it can do something or cannot do something. So what is important that I

12:41.240 --> 12:46.920
wanted to make as two kind of changes. Some changes that when I do that, the instance will

12:46.920 --> 12:53.920
in the end see it. So I'm going to change the board. And that when I change the board

12:53.920 --> 13:00.600
it's going to compile the change into the Core Erlang, reload it, do some small migration

13:00.600 --> 13:07.600
and then also pass that information to our client. So, here we have it again. If I turn

13:09.200 --> 13:15.480
this into a Goose for instance, it becomes a Goose. So that was one recompilation of

13:15.480 --> 13:20.840
Erlang in the back button. Now I make another plane. I can add another one if I want to.

13:20.840 --> 13:27.840
And at some point I'm going to have to reach the finish here. So let's make that. So yeah,

13:28.840 --> 13:35.840
that was three, four recompilations of things in memory and moving on. Involving. But another

13:39.160 --> 13:46.160
one thing that I might want to change, because I can also create multiple instances, is my

13:46.400 --> 13:53.120
starting state. And that would mean that the only thing that happens if I change that from

13:53.120 --> 13:58.800
my client, it changes my model, but nothing else, unless I don't start a new instance,

13:58.800 --> 14:05.800
nothing happens with it. And that looks like this. So I have a game one and a game two.

14:08.000 --> 14:13.520
Game two hasn't been started yet. And if I change this one from zero to one, now I start

14:13.520 --> 14:20.120
at position one. Then we notice that in game one nothing happened. But if I start a new

14:20.120 --> 14:27.120
instance, then this one will now start at position one instead of position zero. And

14:29.520 --> 14:35.040
just to show that even though it shows two, it didn't change to one, but didn't show it.

14:35.040 --> 14:42.040
If I move, it will go to three. Well, and where did I put the finish today? On start,

14:43.040 --> 14:50.040
zero, one, three, on number four. I'll just move to four. There. I finished my game. I

14:50.040 --> 14:57.040
won. So things I want to do in the future. I'm very much interested in what kind of deltas

15:02.440 --> 15:09.440
are usable, sensible. You saw me adding cells to a board. You saw me change the type of

15:10.400 --> 15:17.400
the board. Okay. What if I remove a cell from the board? Yeah. What if the pawn is on there?

15:18.040 --> 15:25.040
It quickly becomes like, you could think of a couple of solutions for when you remove

15:25.320 --> 15:29.720
the cell from the board. You move the pawn to the previous or the next cell, or you remove

15:29.720 --> 15:34.720
it, or you put it on cell zero. But why would, why, how do you pick one? Depends on your

15:34.720 --> 15:41.720
application. So I really want to look more into that. Another thing is that I don't think

15:44.880 --> 15:49.120
the Hanselboard UI that I had looks very nice. It would be much better if it looked like

15:49.120 --> 15:56.120
the second slide that I showed. But if I do that, then the client really knows about Hanselboard.

15:57.200 --> 16:01.680
But what if I want to make a slightly different game? So, okay. And what if my Hanselboard

16:01.680 --> 16:07.080
knows about most of the things I do, but I add that labyrinth thing? Now I want to render

16:07.080 --> 16:13.160
a nice labyrinth. Okay. Can I make something that knows its Hanselboard, but can also adjust

16:13.160 --> 16:18.240
to changes that I make in the model that expands on what was already there that they didn't

16:18.240 --> 16:24.440
know about in the start? And obviously, it needs to be multiplayer because playing in

16:24.440 --> 16:28.880
my own is, I want you all to play with me.

16:28.880 --> 16:35.880
All right. The code that you saw in the iframes is in the top link. While reasoning about

16:36.280 --> 16:40.960
this, I also wrote a little, a start of a Gleam library that generates Gleam code, which

16:40.960 --> 16:45.640
is the second link, the one that generates Core Erlang. It's the third link, my own

16:45.640 --> 16:51.480
web page, the fourth. And if you want to know what the Dutch income text is looking like,

16:51.480 --> 16:54.480
it's all in there. Thank you.

16:54.480 --> 17:01.480
We have time for a couple of questions. Anyone? Any? Okay.

17:01.480 --> 17:08.480
Thank you. That was really quite amazing technology there. I was wondering, do you have

17:11.920 --> 17:16.920
thoughts on like when you might decide to apply these sorts of techniques to a problem?

17:16.920 --> 17:19.600
When it would be a good question.

17:19.680 --> 17:27.680
Yeah. Okay. Question is when this kind of solution would apply to a problem. It's, I might not

17:27.680 --> 17:33.320
be the best person to answer this because I'm somewhat new to model driven. It helps

17:33.320 --> 17:38.360
when you, when that description is going to give you something, whether that is checking

17:38.360 --> 17:45.360
that something is coherent or correct. When, yeah, the model should give you something.

17:50.600 --> 17:54.640
When not to do it, well, if you just want to play Hansenboard, just make a Hansenboard

17:54.640 --> 17:59.840
server and a Hansenboard client because it's much faster. Much quicker to build. So it's,

17:59.840 --> 18:06.840
it's, it is an investment. It's quite an investment. It's not just, not 10% extra. It's a factor

18:10.000 --> 18:17.000
much, possibly 5, 10 extra to make sure that you can really do that kind of stuff.

18:17.400 --> 18:21.400
Other question? It was the same question.

18:21.400 --> 18:23.400
Because it's fun.

18:23.400 --> 18:25.400
Okay.

18:25.400 --> 18:32.400
Yeah, that was really, really cool. Really interesting. When you changed like the initial

18:33.040 --> 18:40.040
state, you showed like the running client didn't update, right? Like it didn't, it didn't

18:40.040 --> 18:47.040
update the client because all these updates are triggered through messages. Is it possible

18:48.040 --> 18:54.040
that you could replay message history from the beginning with a running client? So like

18:54.040 --> 19:00.040
if I updated the initial state of a running process, could I then replay all of the messages

19:00.040 --> 19:05.040
it's received to change propagates?

19:05.040 --> 19:12.040
There's, there's, there's two answers to that, I guess. Yeah. Is it possible to replay all

19:16.340 --> 19:23.340
the events that happened both to the model and the instance or just to the instance game?

19:24.040 --> 19:31.040
Just to the instance. Just to the instance. At the moment, no.

19:32.040 --> 19:33.040
Would you?

19:33.040 --> 19:38.040
Would be, would be interesting. One way in which at least the part of the answer would be yes

19:38.040 --> 19:42.040
is if you look at the model when I, when I say please change this in this way with this

19:42.040 --> 19:47.040
delta, the server will respond by just giving you back, yep, I applied this delta, now you

19:47.040 --> 19:49.040
do too.

19:49.040 --> 19:56.040
Okay, cool. Any other questions? Okay, thank you then.

19:56.040 --> 19:57.040
Thank you.

20:01.040 --> 20:02.040
Thank you.

