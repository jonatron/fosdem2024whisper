WEBVTT

00:00.000 --> 00:15.040
So, yes, it is everywhere.

00:15.040 --> 00:21.160
And what is sometimes I think people tend to forget or don't realize is that we keep

00:21.160 --> 00:23.960
releasing curly releases like crazy.

00:23.960 --> 00:31.960
So these are single blobs for every release we have done since 1996 until now.

00:31.960 --> 00:34.160
That's 254 releases.

00:34.160 --> 00:35.960
We did one this Wednesday.

00:35.960 --> 00:40.800
So anyway, that's just, you know, yeah, we keep releasing stuff and we keep adding

00:40.800 --> 00:42.400
source code and changing source code.

00:42.400 --> 00:48.560
This is the, so the blue line, the top line is all code in curl and live curl taken together.

00:48.560 --> 00:50.600
The red one is just the command line tool.

00:50.600 --> 00:55.440
But since the command line tool uses the library, so it's, there's a lot of development, a

00:55.440 --> 00:59.840
lot of changes, and we're adding a lot of command line options.

00:59.840 --> 01:06.360
That, I'm not sure that's so good, but we do that anyway.

01:06.360 --> 01:15.840
And so, yeah, back in, when I renamed the project curl in 1998, we had 24 options, I

01:15.840 --> 01:17.560
believe, and now we have 258.

01:18.560 --> 01:21.920
So that's roughly 10 a year on average.

01:21.920 --> 01:26.040
So yeah, and chances are we're going to have even more soon, right?

01:26.040 --> 01:32.600
Well, and even if we just look at the last few years, you can see that all of these graphs

01:32.600 --> 01:38.840
show a significant growth there as well, meaning that we're still, we keep doing things and

01:38.840 --> 01:43.120
we keep changing things and we actually make curly better product every year.

01:43.120 --> 01:51.400
So I just wanted to mention that it's a good idea sometimes to upgrade this, you know.

01:51.400 --> 01:57.280
I don't know exactly how it is in all projects, but in curl we have this, I don't know, there's

01:57.280 --> 02:01.720
a trend, people keep using very, very old curved versions.

02:01.720 --> 02:05.960
Sometimes it's a little bit boring, you know, and we actually fix stuff.

02:05.960 --> 02:13.080
Yeah, so curl is this Swiss Army knife of internet transfers and one of the cooler things

02:13.200 --> 02:17.320
we did within the last few years is that we had a parallel transfer site.

02:17.320 --> 02:18.320
I hope you all know that.

02:18.320 --> 02:24.560
So nowadays then, traditionally, of course, if you just write curl in a lot of URLs, it

02:24.560 --> 02:28.440
will get them seriously one by one by one by one, but now you can use this option and

02:28.440 --> 02:30.320
it'll get them all in parallel.

02:30.320 --> 02:35.440
Well, actually it will get up to 50 by default in parallel, you can change that.

02:35.480 --> 02:43.840
I guess there's some, usually by default there's a 10, 24 open file descriptors, right?

02:43.840 --> 02:50.480
So there's some kind of maximum that will cause you problems, but otherwise it's awesome

02:50.480 --> 02:57.760
for when you want to get a lot of files down faster, possibly from just lingering on your

02:57.760 --> 03:03.560
disk like curl has always done, or it does by default, right?

03:03.560 --> 03:07.040
So you can ask curl to remove it, remove.

03:07.040 --> 03:11.840
For example, you have a timeout, you really want to get this download done in two seconds,

03:11.840 --> 03:14.560
and if it's not done in two seconds, it's going to fail, right?

03:14.560 --> 03:18.600
But what happens with that leftover file?

03:18.600 --> 03:22.520
If you have this flag, it won't be there.

03:22.520 --> 03:26.960
If you don't use the flag, you will have a partial one, possibly, right?

03:26.960 --> 03:35.480
So, and we also have added a lot of fun other ways to control multiple transfers, really,

03:35.480 --> 03:37.200
or transfers in general.

03:37.200 --> 03:43.640
We've had this option for a long time, which is, this has, this is a sort of a reverse

03:43.640 --> 03:44.640
speed limit.

03:44.640 --> 03:47.440
If it's slower than this, kill it.

03:47.440 --> 03:52.320
If it's slower than this many bytes per second for this amount of time, we don't want it

03:52.320 --> 04:00.000
anymore, basically, detecting catching, stall transfers, too slow for me, stop.

04:00.000 --> 04:02.960
But we also have this other one.

04:02.960 --> 04:11.800
So sure, only, only do this transfer at the maximum speed of 100K, that's bytes per second,

04:11.800 --> 04:17.120
or you can also do, if you want to do those, you know, download a million files, maybe you

04:17.120 --> 04:22.200
don't want, you don't want those million files to happen immediately, maybe you want to slow

04:22.200 --> 04:24.840
down the rate a little bit, and then you can do it like this.

04:24.840 --> 04:30.360
I just want to get those files at maximum two per second, or that means, that means

04:30.360 --> 04:37.000
started requests, or maybe three per hour, or 14 per month, or week, and blah, blah,

04:37.000 --> 04:38.000
blah.

04:38.000 --> 04:42.000
Basically, a way to, if you really want to get a lot of files, maybe from the same server,

04:42.000 --> 04:46.000
and you, maybe it's your server, you don't want to overload it immediately, or maybe

04:46.000 --> 04:50.160
you know that the files are just updated every once in a while, anyway, so why not slow

04:50.160 --> 04:52.040
it down.

04:52.040 --> 04:59.720
And of course, you can also ask, so ignore the file if it's too big, and this will also

04:59.720 --> 05:07.600
nowadays actually stop the transfer if it, if it downloads that much, which in some cases

05:07.600 --> 05:11.920
you don't know how big the file is, right, and you might not want to fill up your disk

05:11.920 --> 05:16.680
space when the server surprises you Monday morning.

05:16.680 --> 05:21.720
And of course, one of the bigger things I've done recently is, yeah, KERL has had this

05:21.720 --> 05:27.040
concept that I call config file, it's really not a config file, it's passing the user names

05:27.040 --> 05:31.400
or whatever in those config files, and you couldn't do that, but now you can, because

05:31.400 --> 05:38.040
we have introduced a way, so we have introduced this new option to KERL called variable, so

05:38.160 --> 05:43.800
it's basically a way to set the variables in the command line and in these kind of config

05:43.800 --> 05:47.960
files for KERL, and why do you want that?

05:47.960 --> 05:53.240
I'll show you just some examples, so basically you can set, it's just a name, it has some

05:53.240 --> 05:59.720
content and you can get that content from the command line like that, or read it from,

05:59.720 --> 06:05.360
you can also, you can set it in the config file with different syntax, but that's the

06:05.360 --> 06:07.520
same as the old, all right.

06:07.520 --> 06:15.080
So you can basically set it as pure content like this, or you can read it from the file,

06:15.080 --> 06:21.000
you can get it from the environment variable, which means that you can do stuff like this,

06:21.000 --> 06:27.400
or you can set it from the environment variable like this, you import it like with a percent

06:27.400 --> 06:28.400
sign.

06:28.400 --> 06:31.600
I'll show you some examples and why it's cool.

06:32.600 --> 06:34.840
Blah, blah, blah, blah.

06:34.840 --> 06:38.760
So basically, so you can set, why would you, you set a command line and you can then expand

06:38.760 --> 06:43.000
them of course, so if you want to for example set a command, a name, and you want to use

06:43.000 --> 06:48.880
it in an option, you can ask it explicitly to expand it, and it sounds a little bit weird,

06:48.880 --> 06:53.480
but it works like this basically, so you can expand, if you want to, the data option as

06:53.480 --> 07:00.000
someone might know, it's short version is dash D is for sending a post for example, so

07:00.000 --> 07:06.800
in this case you can send the content, the variable content in here would be sent as

07:06.800 --> 07:12.840
a post, and the content of the variables host user here would be in the URL that it uses

07:12.840 --> 07:15.320
to the command line.

07:15.320 --> 07:21.120
Basically just gives you more freedom to create weird config files and use that to do more

07:21.120 --> 07:28.360
curl, and you can also, what's even more fun than this, you can then for example read those

07:28.400 --> 07:32.840
contents of files for example, so if you wanted to post from a file or you wanted to read

07:32.840 --> 07:38.080
credentials from a file, you can do that as well, and then if you want to make it even

07:38.080 --> 07:44.280
more cool, you can apply different functions when you expand these contents, so you can

07:44.280 --> 07:50.200
JSON encode it, you can URL encode it, and you can be 64 encoded if you want to in the

07:50.200 --> 07:55.600
config file, so really to help you do those weird things that people want to do.

07:55.640 --> 08:02.120
For example, you get the, and are complicated more so than we want to sometimes.

08:02.120 --> 08:08.080
So basically with this tool, it's a really simple one, it basically just gets sets parts

08:08.080 --> 08:15.200
of a URL for you, like this, if you want to, you can give it a URL and you set a host name

08:15.200 --> 08:21.440
and it'll just replace the host name in the URL and output that, or you can just ask for

08:21.440 --> 08:29.520
the host name part from a URL, or you can redirect a URL, so if that is the first URL

08:29.520 --> 08:34.560
and you want to redirect another, how would the end result become, right, typically then

08:34.560 --> 08:41.680
of course a relative redirect, dot dot slash dot dot slash blah blah blah, what would happen,

08:41.680 --> 08:46.880
or change parts of it, like update the port number or you could append query strings,

08:47.120 --> 08:52.880
or you can do more complicated things, you can output everything as JSON, so we would split it

08:52.880 --> 08:57.600
up in different components and output everything as JSON and you could j que it or whatever you

08:57.600 --> 09:04.240
want to do, and you can also do things like extracting parts of the query string, so maybe I

09:04.240 --> 09:12.640
want to just a component from that weird URL, a little thing just to help you work with URLs

09:12.640 --> 09:19.440
better, we also worked quite a lot on adding JSON stuff in curl recently, so for example you can,

09:20.560 --> 09:24.800
we have this option called write out, you should know about it, it's called, it's actually

09:24.800 --> 09:31.280
dash w in the short form, it helps you just output stuff from the previous transfer, it has a lot

09:31.280 --> 09:37.840
of variables, you can download speed or headers or things, and we also, it works like that,

09:38.800 --> 09:46.960
we recently added support for getting all that data output as JSON, so now you can do like this

09:47.920 --> 09:55.360
dash w and the variable called JSON, and that variable then will spew out the huge

09:55.360 --> 10:02.240
JSON object with all of those variables that I call them as JSON object, pretty much it's a fancy

10:02.240 --> 10:07.280
way, if you want to get everything in JSON, you work with JSON, you want to do j que it, curl

10:07.280 --> 10:13.840
helps you go there, and in the, oh right, it also, we have this other variable called

10:15.360 --> 10:22.560
header JSON, it's called header JSON, right, it then outputs all the response headers as a JSON

10:22.560 --> 10:30.720
object, also to help you work with the headers maybe scripted, j que it, whatever you want to do,

10:30.720 --> 10:38.320
so basically you do more JSON, so you can, and of course we ship hb3 enabled by default, if you

10:38.320 --> 10:46.400
happen to be, have that config enabled, no, this too has that, but you know, in theory you could,

10:48.160 --> 10:56.480
no, but it's a tls setup problem for all of us, but we enable hb3 by default, and if it's possible

10:57.040 --> 11:02.560
and it's a really cool way, and now you can do it with curl, and you can just, you know,

11:03.280 --> 11:10.800
ask for curl to use hb3, it's called dash dash hb3, and hb3 as you know uses quick, quick is a

11:10.800 --> 11:16.080
different transport protocol, it's done over udp, so it's not the same connection, right, so we can't

11:16.080 --> 11:23.600
upgrade from a hb1 or hb2 to an hb3 connection, so they actually have to be different connections,

11:23.600 --> 11:32.160
and since hb3 is still being blocked, problematic in expersentable attempts,

11:33.360 --> 11:40.160
so when you ask curl to do hb3, it will actually try hb3 and hb1 and 2 at the same time,

11:41.840 --> 11:47.200
and go with the one that works best, that works, it's actually, it's raising them together, so it

11:47.200 --> 11:54.000
starts with hb3, a little bit before it tries the other ones, it works really well, so it's

11:54.000 --> 12:00.480
in the happy eyeballs style, so we do happy eyeballs on pv4, pv6, and then happy eyeballs

12:00.480 --> 12:08.080
between hb3 and hb2, and hb2, one will of course downgrade to hb1 if it can't speak hb2, kind of fun,

12:10.160 --> 12:16.960
you should try it out, and of course if you're using then the parallel option thing with

12:16.960 --> 12:22.400
uppercase z, it will do them multiplex if possible if it's on the same host,

12:23.680 --> 12:28.080
really fun, and of course I have written about most of this in everything curl, you should

12:28.080 --> 12:33.040
read it, it's a lot of pages, thank you.

12:33.280 --> 12:35.280
Thank you.

12:44.800 --> 12:50.480
Questions? There's a question, I have stickers.

12:50.800 --> 12:54.800
Yeah.

12:58.240 --> 13:03.440
Thanks for the presentation, are those all nice features accessible also for

13:04.640 --> 13:10.080
library users in C or in Python bindings, or is it available only from command line?

13:11.760 --> 13:16.800
Most of this is powered by the library, so almost everything that is that I mentioned here,

13:16.880 --> 13:23.520
that is network related, is available to the library, really problem, and that's also why I

13:23.520 --> 13:28.720
wanted it to be used the same parser, so true rel and curl uses the exact same parser, so they

13:28.720 --> 13:35.520
will work exactly the same way on those URLs. One more question?

13:38.000 --> 13:43.520
Nothing more, thank you. Thank you.

13:46.800 --> 13:49.520
Thank you.

