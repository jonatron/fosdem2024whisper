WEBVTT

00:00.000 --> 00:08.520
All right, good morning.

00:08.520 --> 00:10.920
Again, I'm Sergio Amarata.

00:10.920 --> 00:14.800
I'm a board member on the RISC forum,

00:14.800 --> 00:19.120
and an active member of the RISC committee that

00:19.120 --> 00:20.800
writes specs for RISC.

00:20.800 --> 00:24.240
And I'm also the maintainer of the Librisque Open Source

00:24.240 --> 00:25.840
project.

00:25.840 --> 00:29.520
So today, we'll be talking about how RISC can support end

00:29.520 --> 00:32.480
to end live streaming with packet recovery.

00:32.480 --> 00:34.800
But in particular, I will explain

00:34.800 --> 00:38.840
how we can support this in a broadcast scenario, meaning

00:38.840 --> 00:42.560
streaming to as many users as your bandwidth can support.

00:45.800 --> 00:49.560
So we'll cover the topic in two sections.

00:49.560 --> 00:52.520
First, we'll provide a roadmap or an update

00:52.520 --> 00:58.120
on the RISC specification and the Librisque project itself.

00:58.120 --> 01:01.520
And then we'll go to a practical application

01:01.520 --> 01:04.640
and show you how you can do live streaming in a large scale

01:04.640 --> 01:06.640
with the open source tools provided.

01:10.480 --> 01:14.280
So on to part one, the development roadmap.

01:14.280 --> 01:18.440
The last time I gave an update at FOSDEM regarding RISC

01:18.440 --> 01:24.800
was February 2020, a few days before the pandemic shutdown.

01:24.800 --> 01:28.160
Now, four years later, we will explore what happens

01:28.160 --> 01:30.560
instead.

01:30.560 --> 01:33.640
I guess if I have waited one more year,

01:33.640 --> 01:36.840
I could have blamed the Thanos snap for the delay.

01:41.600 --> 01:46.880
So let's do a brief recap of the beginning of the protocol.

01:46.880 --> 01:52.000
In 2017, the VSS forum created the RISC activity group

01:52.000 --> 01:56.720
for the purpose of creating a unified interoperable protocol

01:56.720 --> 02:00.920
for transmission of IP data over loss in networks.

02:00.920 --> 02:04.400
The requirements were that it needed

02:04.400 --> 02:07.880
to be based on the UDP protocol, and it needed

02:07.880 --> 02:12.560
to include negative acknowledgment retransmission

02:12.560 --> 02:13.880
requests.

02:13.880 --> 02:17.800
So one year later, after a successful multi-vendor

02:17.800 --> 02:21.040
interop event, the simple profile specification

02:21.040 --> 02:22.040
was published.

02:22.040 --> 02:24.520
You can see that in the bottom.

02:24.520 --> 02:26.400
The RISC activity group then proceeded

02:26.400 --> 02:30.240
to add multiplexing and encryption capabilities

02:30.240 --> 02:36.400
and publish the main profile specification in early 2020.

02:36.400 --> 02:40.000
It was at that time that the Libris Library Open Source Project

02:40.000 --> 02:41.960
first was published.

02:41.960 --> 02:44.400
And you can refer to my talk I gave back then,

02:44.400 --> 02:46.760
where I go into detail explanation

02:46.760 --> 02:49.960
of what the simple profile does and the main profiles

02:50.000 --> 02:53.600
and the differences, et cetera.

02:53.600 --> 02:59.360
So as you can see on this slide, the RISC activity group

02:59.360 --> 03:02.360
has been quite busy adding features to the protocol

03:02.360 --> 03:05.240
to accommodate all possible use cases

03:05.240 --> 03:08.360
during the last four years.

03:08.360 --> 03:11.800
What started with the simple profile, the first release,

03:11.800 --> 03:16.760
as the desire to add packet recovery to an RTP stream

03:16.760 --> 03:23.080
with an MPEG-TS payload, has now turned into a reach protocol

03:23.080 --> 03:26.560
that will work with any payload and which includes

03:26.560 --> 03:29.760
multiplexing, encryption, and authentication.

03:32.760 --> 03:34.760
So Libris, the open source project,

03:34.760 --> 03:37.480
currently supports a simple profile and main profile.

03:37.480 --> 03:39.840
And we're working on adding support for the advanced profile.

03:40.840 --> 03:44.840
So in addition to the core specifications for the protocol,

03:44.840 --> 03:48.840
the RISC activity group has also published a series

03:48.840 --> 03:52.840
of recommendation or best practice documents.

03:52.840 --> 03:58.840
These are documents that extend the protocol into specific applications,

03:58.840 --> 04:03.840
into specific niches, and you need to actually consider that

04:03.840 --> 04:08.840
in the library that is compatible with this specification.

04:10.840 --> 04:13.840
So the library Libris, when applicable,

04:13.840 --> 04:15.840
has been made compatible with these recommendations,

04:15.840 --> 04:20.840
the code synchronization, the relay, et cetera, et cetera.

04:22.840 --> 04:25.840
So enough history about the protocol and the specification documents,

04:25.840 --> 04:27.840
those are all publicly available.

04:27.840 --> 04:28.840
They're not behind any payload.

04:28.840 --> 04:31.840
The VSF documents can be downloaded, the PDFs,

04:31.840 --> 04:34.840
and you can look at the specs and all the recommendations.

04:35.840 --> 04:38.840
Let's talk about the Libris open source project itself, right?

04:40.840 --> 04:44.840
In case you are not familiar with what RISC is,

04:44.840 --> 04:48.840
we can define it with just one simple sentence, like you see up there.

04:48.840 --> 04:51.840
It's a new protocol for transmission of IP data

04:51.840 --> 04:57.840
across lossing networks using UDP with NAT-based retransmissions.

05:00.840 --> 05:02.840
Before getting into anything else,

05:02.840 --> 05:05.840
I'd like to clarify the three most common misconceptions

05:05.840 --> 05:08.840
people have about the RISC protocol.

05:09.840 --> 05:14.840
And this has come about in talks and conversations.

05:14.840 --> 05:19.840
People tell me, oh, well, RISC is only for MPEC-TS, false.

05:19.840 --> 05:22.840
Advanced profile includes support for any payload

05:22.840 --> 05:26.840
with clearly identified payload types in the header now.

05:26.840 --> 05:30.840
There's even an registration with support binary payloads, et cetera.

05:31.840 --> 05:34.840
And misconception number two, you need a large buffer

05:34.840 --> 05:38.840
and therefore latency is large, a second or more, right?

05:38.840 --> 05:41.840
In order for you to use RISC, false.

05:41.840 --> 05:45.840
You really need two to six times the round trip time,

05:45.840 --> 05:47.840
the RTT, between the two endpoints

05:47.840 --> 05:50.840
you're trying to send the data through.

05:50.840 --> 05:55.840
So the shorter the RTT, the total buffer required will also be shorter

05:55.840 --> 06:00.840
and you can talk about 10 milliseconds, 20 millisecond total latency.

06:00.840 --> 06:03.840
It's just depending on what network you're deploying it in.

06:04.840 --> 06:07.840
In addition, and this is a major misconception

06:07.840 --> 06:13.840
on that second point, RISC also supports real-time data channels

06:13.840 --> 06:18.840
with no added latency, with lossy channels

06:18.840 --> 06:22.840
that you can have APIs going back and forth in real-time

06:22.840 --> 06:25.840
and send data that cannot wait for these buffers.

06:25.840 --> 06:29.840
Misconception number three, you can only use RISC

06:29.840 --> 06:31.840
for transmitting in one direction, right?

06:31.840 --> 06:34.840
You send data over there, this is packet recovery, you're done.

06:34.840 --> 06:35.840
That's false.

06:35.840 --> 06:38.840
The protocol allows for bidirectional transmission

06:38.840 --> 06:41.840
both with and without packet recovery on both directions.

06:41.840 --> 06:44.840
The limitations are usually introduced

06:44.840 --> 06:46.840
by the implementer of the protocol.

06:46.840 --> 06:49.840
The specifications are broad enough

06:49.840 --> 06:53.840
so that each implementer has the freedom

06:53.840 --> 06:56.840
to add or remove features at will.

06:57.840 --> 07:01.840
So let's talk about the Libris Development Roadmap.

07:01.840 --> 07:04.840
How do we determine where to go next, right?

07:04.840 --> 07:07.840
So we divide it into three categories.

07:07.840 --> 07:13.840
The first one is we want to improve the reach of the library.

07:13.840 --> 07:20.840
And by improving the reach, we mean improving the adoption

07:20.840 --> 07:24.840
of the library by client applications

07:24.840 --> 07:29.840
so that users can go ahead and have it available on every device.

07:29.840 --> 07:34.840
Libris, of course, adds support for all the different specs

07:34.840 --> 07:38.840
like I showed before and all the recommendations

07:38.840 --> 07:41.840
so that all these reach features that make the protocol

07:41.840 --> 07:44.840
have more use cases are available immediately

07:44.840 --> 07:47.840
under the Libris library.

07:47.840 --> 07:49.840
The second is distribution, right?

07:49.840 --> 07:53.840
We make sure that our library compiles on every platform

07:53.840 --> 07:56.840
so that it can easily be adopted by anybody

07:56.840 --> 07:59.840
and that it makes it when possible

07:59.840 --> 08:07.840
into open source applications like FFMPEG, Libris, OBS, etc.

08:07.840 --> 08:14.840
As a matter of fact, when running it within the video LAN servers,

08:14.840 --> 08:17.840
it compiles in all 21 different architectures

08:17.840 --> 08:20.840
that are predefined in their CI.

08:20.840 --> 08:24.840
So we're pretty confident that if somebody wants to use it, they can.

08:24.840 --> 08:31.840
In the distribution aspect, we also have it on the major distros now

08:31.840 --> 08:35.840
available in Debian, OpenBSD, etc.

08:35.840 --> 08:39.840
And the third aspect of how to determine what the roadmap is

08:39.840 --> 08:45.840
is we do timely enhancements and timely bug fixes

08:45.840 --> 08:49.840
very quickly when they come about.

08:49.840 --> 08:55.840
So on the feature set, I think that the most important addition recently

08:55.840 --> 08:59.840
that allows the application to be used into this broadcast market

08:59.840 --> 09:01.840
like one too many, the media service scenario

09:01.840 --> 09:06.840
is the EAPSRP6A authentication protocol.

09:06.840 --> 09:10.840
It was introduced in 2022 and what it allows you to do

09:10.840 --> 09:15.840
is instead of the normal model where you have a pre-shared key

09:15.840 --> 09:17.840
that you have to share among two endpoints

09:17.840 --> 09:21.840
which makes it very insecure because if that communication of that key

09:21.840 --> 09:25.840
for the encryption gets compromised, your entire network is compromised now.

09:25.840 --> 09:30.840
This protocol allows you to do a username and password,

09:30.840 --> 09:33.840
a unique username and password for each of the connected clients

09:33.840 --> 09:37.840
and part of the protocol, doing that username and password exchange

09:37.840 --> 09:40.840
which is different for them, includes the negotiation

09:40.840 --> 09:42.840
and the exchange of the pre-shared key.

09:42.840 --> 09:48.840
So there's no risk anymore of that pre-shared key to ever be compromised.

09:48.840 --> 09:52.840
Other features that allow the broader adoption

09:52.840 --> 09:57.840
is that we're working on a one-way satellite application,

09:57.840 --> 10:04.840
we're working on multicast discovery and a few other things.

10:04.840 --> 10:07.840
So third aspect, the distribution.

10:07.840 --> 10:12.840
Many FOSS projects already have Libreps compiled by default

10:12.840 --> 10:14.840
or have it as an option.

10:14.840 --> 10:18.840
If you know of additional projects or if you know,

10:18.840 --> 10:22.840
please drop me a line, I'd like to keep a database

10:22.840 --> 10:27.840
of which projects are actually already included in it, if possible.

10:27.840 --> 10:33.840
Ritz is also a part of my own day-to-day operations

10:33.840 --> 10:36.840
which gives us the advantage of finding the bugs

10:36.840 --> 10:42.840
before they are found in the wild and we fix them very quickly.

10:42.840 --> 10:46.840
OK.

10:46.840 --> 10:50.840
So performance enhancements over the last few years,

10:50.840 --> 10:53.840
we now have the ability to automatically configure

10:53.840 --> 10:55.840
based on the network conditions.

10:55.840 --> 10:59.840
The Libreps library does an RTT with a new packet

10:59.840 --> 11:02.840
that was released, the Echo packet, 10 times per second.

11:02.840 --> 11:06.840
What that does is it lets us measure, with a UDP,

11:06.840 --> 11:10.840
you know, ping, not a regular ping, the network conditions

11:10.840 --> 11:12.840
between the two endpoints.

11:12.840 --> 11:16.840
We know the inter-packet spacing, the variance, mid and max,

11:16.840 --> 11:18.840
we know the latency, we know all these things

11:18.840 --> 11:21.840
and with those values, with those parameters,

11:21.840 --> 11:24.840
and if you look at the default configuration,

11:24.840 --> 11:27.840
the library will auto-adjust its buffer

11:27.840 --> 11:30.840
to the perfect buffer for that link

11:30.840 --> 11:33.840
without you having to guess or know anything about the network.

11:33.840 --> 11:36.840
It will also adjust the initial buffer,

11:36.840 --> 11:41.840
the reordering buffer based on your jitter on the network.

11:41.840 --> 11:44.840
Your inter-packet spacing jitter, gaps in maximum jitter,

11:44.840 --> 11:48.840
and make sure your reorder buffer is at least that much.

11:48.840 --> 11:51.840
We've added, you know, because we've done these

11:51.840 --> 11:55.840
very large improvements, we've realized we need better metrics,

11:55.840 --> 11:57.840
so we've added support for Prometheus

11:57.840 --> 11:59.840
and other things straight out of the library,

11:59.840 --> 12:01.840
so that you can actually grab that and, you know,

12:01.840 --> 12:03.840
plug it into third-party tools

12:03.840 --> 12:05.840
and immediately create your dashboard

12:05.840 --> 12:10.840
that gives you the proper visibility in the connections.

12:10.840 --> 12:15.840
And, you know, last release was just a couple of months ago.

12:15.840 --> 12:19.840
So the top priorities for 2024 for the development roadmap

12:19.840 --> 12:24.840
is we want to add support for DTLS encryption and authentication.

12:24.840 --> 12:27.840
We want to fully add support for the new advanced profile

12:28.840 --> 12:33.840
that adds, you know, the new header ID with the special payloads.

12:33.840 --> 12:36.840
And we want to try to see if we can get back support

12:36.840 --> 12:39.840
of the library into VLC 3.0.

12:44.840 --> 12:48.840
So the goal of the original project, like we mentioned before,

12:48.840 --> 12:53.840
was an interoperable standard for this type of transmission.

12:53.840 --> 12:56.840
There were, you know, half a dozen or a dozen different methods

12:57.840 --> 13:00.840
or there still are of doing UDP with packet recovery,

13:00.840 --> 13:03.840
each vendor specific, et cetera, et cetera.

13:03.840 --> 13:06.840
Our goal was to create an interoperable standard

13:06.840 --> 13:08.840
with multiple implementations,

13:08.840 --> 13:11.840
and I think we've achieved that at this point,

13:11.840 --> 13:14.840
at least at the higher broadcast level

13:14.840 --> 13:16.840
and tier one, tier two companies

13:16.840 --> 13:19.840
and a lot of the open source projects that support REST.

13:19.840 --> 13:21.840
They all talk to each other,

13:21.840 --> 13:23.840
even if it's not the same implementation.

13:26.840 --> 13:28.840
So now to part two, right?

13:28.840 --> 13:32.840
Let's look at REST as a live streaming platform, right?

13:32.840 --> 13:36.840
And particularly we want to look at a model that does N2S.

13:36.840 --> 13:39.840
How do you use REST and Libris in particular

13:39.840 --> 13:42.840
to do an N2N streaming chain,

13:42.840 --> 13:44.840
like the one we're doing here, for example,

13:44.840 --> 13:48.840
or, you know, any one-to-many scenario, right?

13:49.840 --> 13:51.840
Lots of viewers.

13:51.840 --> 13:55.840
So let's diagram, you know, a simple scenario here.

13:56.840 --> 13:59.840
We have three components,

13:59.840 --> 14:02.840
sources, the sender, which is a REST device,

14:02.840 --> 14:04.840
and many receivers on the bottom,

14:04.840 --> 14:07.840
and the box here on the bottom, you know,

14:07.840 --> 14:10.840
symbolizes a single one of those receivers.

14:13.840 --> 14:16.840
So we see the logos up there for FFMPEG, BLC,

14:16.840 --> 14:18.840
and Open Broadcast Studio.

14:18.840 --> 14:21.840
That could be also G-streamer, any source,

14:21.840 --> 14:23.840
any encoder, it doesn't matter.

14:23.840 --> 14:26.840
Somebody that has the ability to generate

14:26.840 --> 14:29.840
compressed or uncompressed video stream, right?

14:29.840 --> 14:32.840
Well, we need a binary stream of some kind

14:32.840 --> 14:34.840
pushed to the library.

14:34.840 --> 14:38.840
Libris in particular doesn't care about what the payload is.

14:38.840 --> 14:40.840
You can push anything in the payload,

14:40.840 --> 14:42.840
we'll deliver that to the other side,

14:42.840 --> 14:44.840
even though the spec for simple profile and main profile

14:44.840 --> 14:46.840
say that you're transmitting MPEG-TS,

14:46.840 --> 14:48.840
the library doesn't look at the payload

14:48.840 --> 14:50.840
or restrict it in any way.

14:51.840 --> 14:53.840
Okay.

14:53.840 --> 14:58.840
So the source is sending a UDP,

14:58.840 --> 15:01.840
or RTP media stream into the input.

15:01.840 --> 15:04.840
We buffer it so that we have it available

15:04.840 --> 15:08.840
for retransmission, and the minute the buffer is full,

15:08.840 --> 15:11.840
we start listening on, we put the sender

15:11.840 --> 15:13.840
in what we call listening mode.

15:13.840 --> 15:15.840
It opens a UDP port and start listening

15:15.840 --> 15:19.840
for receivers that want that stream, right?

15:20.840 --> 15:24.840
So the minute our receiver wants to connect to us,

15:24.840 --> 15:26.840
then the handshake happens.

15:26.840 --> 15:28.840
I'm obviously oversimplifying the process

15:28.840 --> 15:30.840
of the handshake that all happens.

15:30.840 --> 15:35.840
The SRP68 protocol is quite complex.

15:35.840 --> 15:37.840
It would take a talk just to go through the details

15:37.840 --> 15:39.840
of that handshake and everything that happens.

15:39.840 --> 15:41.840
So this is only symbolic.

15:41.840 --> 15:43.840
The handshake happens.

15:43.840 --> 15:46.840
The username is sent to us,

15:46.840 --> 15:49.840
and we check for that username within our database

15:49.840 --> 15:50.840
of username and passwords.

15:50.840 --> 15:52.840
It's not really a data-major password,

15:52.840 --> 15:57.840
but a password hashes to keep everything safe.

15:57.840 --> 16:01.840
If the authentication succeeds,

16:01.840 --> 16:05.840
then we send as part of the SRP68 protocol

16:05.840 --> 16:08.840
the pre-shared key so that the receiver

16:08.840 --> 16:11.840
can decrypt the data now.

16:11.840 --> 16:14.840
Once the data is decrypted, that's it.

16:14.840 --> 16:19.840
We have an end-to-end transmission from source

16:19.840 --> 16:23.840
to hundreds of destinations

16:23.840 --> 16:26.840
with just the risk protocol in between.

16:26.840 --> 16:31.840
So with proper planning and setting everything up correctly,

16:31.840 --> 16:34.840
you can have a 300 millisecond glass-to-glass,

16:34.840 --> 16:38.840
one to hundreds of listeners.

16:38.840 --> 16:40.840
You need a good network.

16:40.840 --> 16:42.840
Like I said, the latency is more dependent

16:42.840 --> 16:46.840
upon the RTT between the endpoints than anything else.

16:46.840 --> 16:49.840
I mentioned 300 milliseconds

16:49.840 --> 16:52.840
because in our large-scale deployments,

16:52.840 --> 16:54.840
we've done this anywhere within the U.S.

16:54.840 --> 16:58.840
with 300 milliseconds glass-to-glass.

16:58.840 --> 17:02.840
When you have to expand it and have users that are

17:02.840 --> 17:06.840
across the ocean or with crappy networks or Wi-Fi,

17:06.840 --> 17:09.840
the latency will auto-adjust.

17:09.840 --> 17:11.840
The protocol will auto-adjust.

17:11.840 --> 17:14.840
For those players, suddenly they get 500 milliseconds.

17:14.840 --> 17:17.840
We notice as a rule of thumb that somebody in Wi-Fi

17:17.840 --> 17:21.840
gets a penalty of another 200 milliseconds automatically.

17:21.840 --> 17:27.840
So how do you do this from a practical point of view?

17:27.840 --> 17:31.840
The LibreSploracle includes some command-line utilities

17:31.840 --> 17:35.840
that allows you to send, receive, and relay.

17:35.840 --> 17:37.840
The RISC2RISC is the one...

17:37.840 --> 17:39.840
If you want to do a relay application one-to-many,

17:39.840 --> 17:41.840
this is the ideal scenario.

17:41.840 --> 17:45.840
You can also do it with a RISC sender, to be honest,

17:45.840 --> 17:50.840
but the RISC2RISC is effective because it acts as a relay,

17:50.840 --> 17:52.840
doesn't encrypt or decrypt, doesn't do anything,

17:52.840 --> 17:57.840
but receives data and sends data both in the RISC format.

17:57.840 --> 18:03.840
You can put this in a CDN, your data sender anywhere,

18:03.840 --> 18:06.840
and you configure in the RISC2RISC a listener

18:06.840 --> 18:11.840
with authentication, and then you put your stream from anywhere,

18:11.840 --> 18:15.840
your source, like from here, to that endpoint.

18:15.840 --> 18:17.840
Then you configure the other end,

18:17.840 --> 18:20.840
the one that's going to send to the older viewers

18:20.840 --> 18:22.840
with a database of user-oriented passwords,

18:22.840 --> 18:26.840
and now you have the full authentication.

18:26.840 --> 18:29.840
It adds no additional latency in that process.

18:29.840 --> 18:34.840
It's only the latency that you decide to put as far as buffering.

18:34.840 --> 18:37.840
As far as quality and quantity,

18:37.840 --> 18:43.840
the sweet spot seems to be between 3 and 5 megabits per second,

18:43.840 --> 18:47.840
resolution 720p or 1080p, whatever code you're using

18:47.840 --> 18:49.840
gives you better or less quality,

18:49.840 --> 18:53.840
and that seems to traverse all the different VPNs,

18:53.840 --> 18:56.840
corporate networks, et cetera, without any issues.

18:56.840 --> 19:00.840
Quantity, the RISC2RISC can handle 100 simultaneous connections,

19:00.840 --> 19:02.840
and the number seems low,

19:02.840 --> 19:04.840
but because of the threading model

19:04.840 --> 19:06.840
and the fact that it has to do retransmissions,

19:06.840 --> 19:09.840
after that the retransmissions get compromised.

19:09.840 --> 19:13.840
The way you scale is that you can instantiate multiple instances

19:13.840 --> 19:16.840
of the same RISC2RISC application within the same machine,

19:16.840 --> 19:21.840
and in our case, we have 1500 simultaneous viewers

19:21.840 --> 19:26.840
going off of this type of transmissions 24-7.

19:26.840 --> 19:30.840
So the RISC password utility is also a command line utility

19:30.840 --> 19:34.840
available on the project that allows you to create

19:34.840 --> 19:37.840
the username and password combination hashes,

19:37.840 --> 19:40.840
just like the HD password file in Apache has a similar format,

19:40.840 --> 19:42.840
that's why we created it this way.

19:42.840 --> 19:45.840
You run the utility, put a username and password

19:45.840 --> 19:48.840
and that outputs this username with a hash,

19:48.840 --> 19:50.840
and then you append that to a file,

19:50.840 --> 19:53.840
and then the sender can grab that file

19:53.840 --> 19:56.840
and use it as an authentication database.

19:56.840 --> 19:59.840
In the case you want to scale that to a much higher level,

19:59.840 --> 20:01.840
you integrate directly with the library

20:01.840 --> 20:04.840
and you use the library callbacks to do the authentication

20:04.840 --> 20:06.840
yourself against your own databases,

20:06.840 --> 20:09.840
and you can scale that to thousands of users.

20:09.840 --> 20:14.840
The command line sender is a typical scenario

20:14.840 --> 20:16.840
of what I put in the diagram,

20:16.840 --> 20:18.840
what I was using in the diagram,

20:18.840 --> 20:21.840
you put the input any type of UDP stream,

20:21.840 --> 20:24.840
output you encrypt it, and then the output URL,

20:24.840 --> 20:27.840
if you look at RISC, is in your column, column,

20:27.840 --> 20:29.840
you add 127, you add the add,

20:29.840 --> 20:32.840
just like you do typically for FFMpeg or VLC

20:32.840 --> 20:35.840
or that type of stuff, when you want to listen instead of send,

20:35.840 --> 20:37.840
and it creates a listening on that port,

20:37.840 --> 20:40.840
and that's all you would need to do to create a sender

20:40.840 --> 20:44.840
and use the sender as a really, as well, just for one stream.

20:44.840 --> 20:48.840
On the receiver side, you want a player, for example,

20:48.840 --> 20:53.840
that you can put the username and password, right?

20:53.840 --> 20:57.840
You put the RISC in FFMpeg as the input,

20:57.840 --> 20:59.840
RISC, column, forward, slash, forward, slash, et cetera,

20:59.840 --> 21:02.840
or VLC, or any one of your choice.

21:02.840 --> 21:05.840
In our case, we did a custom VLC application

21:05.840 --> 21:09.840
inside of Raspberry Pi where we were doing this 1500

21:09.840 --> 21:10.840
at the same time.

21:10.840 --> 21:13.840
There were Raspberry Pi's running VLC 3.0 inside

21:13.840 --> 21:17.840
with a lib-RISC implementation inside.

21:17.840 --> 21:19.840
The transmission of the secret in this case,

21:19.840 --> 21:21.840
which is a password for the username and password,

21:21.840 --> 21:25.840
should be handled in the same way you share passwords now

21:25.840 --> 21:29.840
for any account outside the scope of the protocol,

21:29.840 --> 21:30.840
and that's it.

21:30.840 --> 21:34.840
Then it becomes very simple to create a large-scale network

21:34.840 --> 21:36.840
with this.

21:36.840 --> 21:40.840
So the summary is the key feature for this

21:40.840 --> 21:42.840
is this new type of authentication

21:42.840 --> 21:46.840
that makes the secure implementation on a large scale,

21:46.840 --> 21:49.840
and it gives you better latency, lower latency,

21:49.840 --> 21:53.840
then the equivalent HLS or dash,

21:53.840 --> 21:56.840
with a security model that's built into the protocol.

21:56.840 --> 22:01.840
It's no longer the browser or the DRM inside the browser,

22:01.840 --> 22:02.840
everything.

22:02.840 --> 22:05.840
It's the protocol handles the entire DRM.

22:08.840 --> 22:14.840
So we have a really solid roadmap for the future.

22:14.840 --> 22:16.840
We were looking for additional contributors

22:16.840 --> 22:20.840
and people that want to help adding the next set of features.

22:20.840 --> 22:23.840
We're looking for open-source projects

22:23.840 --> 22:25.840
that want to implement the library.

22:25.840 --> 22:28.840
We'll help you put it in.

22:28.840 --> 22:29.840
And that's it.

22:29.840 --> 22:31.840
Thank you very much.

22:31.840 --> 22:33.840
Thank you.

23:02.840 --> 23:06.840
Okay, the question is, what if you're pushing your stream

23:06.840 --> 23:09.840
to Africa with a really bad connection?

23:09.840 --> 23:12.840
What is the acceptable packet loss?

23:12.840 --> 23:15.840
I'm not sure what you mean by acceptable packet loss.

23:15.840 --> 23:18.840
To me, zero is an acceptable packet loss,

23:18.840 --> 23:21.840
and the protocol is capable of achieving zero

23:21.840 --> 23:23.840
if you give it enough buffer.

23:23.840 --> 23:25.840
You give it a second buffer,

23:25.840 --> 23:28.840
and the round trip is 200 milliseconds,

23:28.840 --> 23:31.840
and you will get zero packet loss.

23:31.840 --> 23:34.840
We've done tests and we've done transmissions between Australia.

23:34.840 --> 23:36.840
I was just two weeks ago doing a demo,

23:36.840 --> 23:40.840
a transmission from Australia to Madrid.

23:40.840 --> 23:42.840
16 cameras at 10 megabits per second each

23:42.840 --> 23:45.840
were being transmitted in real-time using RISC,

23:45.840 --> 23:48.840
and they were being used in Madrid

23:48.840 --> 23:52.840
for a production of the event.

23:52.840 --> 23:55.840
And the transmission didn't have a single packet loss,

23:55.840 --> 23:58.840
and it was all done across open internet.

23:58.840 --> 24:00.840
We used one second buffer there

24:00.840 --> 24:02.840
because the connections were relatively good,

24:02.840 --> 24:05.840
but if you go and, you know,

24:05.840 --> 24:08.840
if your transmission is really bad,

24:08.840 --> 24:11.840
just increase your latency, and the protocol will recover.

24:11.840 --> 24:14.840
We have part of our CI integration process

24:14.840 --> 24:19.840
tests that add 50% and even 75% packet loss.

24:19.840 --> 24:21.840
And you see spikes in bandwidth,

24:21.840 --> 24:23.840
but we recover every single packet

24:23.840 --> 24:28.840
if you give it enough buffer.

24:28.840 --> 24:32.840
Does it support simultaneous build rates?

24:32.840 --> 24:34.840
Does it support simultaneous build rates?

24:34.840 --> 24:37.840
Yes, we support multiplexing.

24:37.840 --> 24:41.840
In all this example, I've done just one UDP input.

24:41.840 --> 24:44.840
You can configure the library and the command lines

24:44.840 --> 24:47.840
to ingest multiple UDP inputs,

24:47.840 --> 24:49.840
give it a different ID,

24:49.840 --> 24:51.840
and then on the other side, you can demultiplex them.

24:51.840 --> 24:53.840
I assume that's what you mean by maybe having

24:53.840 --> 24:55.840
different build rates within the same stream.

24:55.840 --> 24:59.840
The camera, like, sends it on the fly

24:59.840 --> 25:02.840
according to network to the combination?

25:02.840 --> 25:06.840
Correct, yes.

25:06.840 --> 25:08.840
And one of the specifications that you saw

25:08.840 --> 25:12.840
on the recommendations was called source adaptation.

25:12.840 --> 25:15.840
It was written precisely to accommodate that scenario.

25:15.840 --> 25:18.840
What is the best case, best use,

25:18.840 --> 25:21.840
or the best practice recommendation

25:21.840 --> 25:24.840
on how to do source adaptation?

25:24.840 --> 25:26.840
Reduce the build rate, adjust the build rate

25:26.840 --> 25:28.840
based on network conditions.

25:28.840 --> 25:34.840
It's all documented in a part of a spec as well.

25:34.840 --> 25:38.840
So for non-MPEC-PS payloads,

25:38.840 --> 25:39.840
as you mentioned,

25:39.840 --> 25:42.840
is there already a mechanism like a composite trail

25:42.840 --> 25:46.840
to basically define the mapping of different payloads?

25:46.840 --> 25:47.840
Absolutely.

25:47.840 --> 25:49.840
For advanced profile, there's a GitHub repository

25:49.840 --> 25:50.840
that has the mappings already.

25:50.840 --> 25:53.840
We have a dozen or two dozen of them.

25:53.840 --> 25:56.840
I'm one of the administrators of the repository.

25:56.840 --> 25:58.840
All you need to do is go in and, you know,

25:58.840 --> 26:02.840
put an MR for whatever binary payload you want to define.

26:02.840 --> 26:04.840
All right, thank you.

26:04.840 --> 26:06.840
I have another question here.

26:06.840 --> 26:10.840
Is it also possible to multiplex and demultiplex subtitles?

26:10.840 --> 26:13.840
Is it also possible to multiplex and demultiplex subtitles?

26:13.840 --> 26:14.840
Yes.

26:14.840 --> 26:17.840
The protocol itself doesn't care what you put in.

26:17.840 --> 26:21.840
We consider each of them as a binary payload of some sort.

26:21.840 --> 26:25.840
You're the one that determines what the format of that payload is.

26:25.840 --> 26:27.840
And you have this pipe.

26:27.840 --> 26:29.840
You put multiple UDP streams.

26:29.840 --> 26:32.840
One of them is going to be your VTT payload

26:32.840 --> 26:35.840
or closed caption or whatever you want to put in

26:35.840 --> 26:37.840
with whatever format you want.

26:37.840 --> 26:42.840
We don't define or control the format of what you put in.

26:42.840 --> 26:44.840
We do to decide on multiplex and mulling.

26:44.840 --> 26:47.840
We give you the capability to give them IDs

26:47.840 --> 26:49.840
so that in the other side you can map those IDs

26:49.840 --> 26:52.840
to different outputs when it comes out.

26:52.840 --> 26:54.840
Thank you.

26:54.840 --> 26:57.840
But it means that you don't do any timing, right?

26:57.840 --> 26:59.840
In between the different streams.

26:59.840 --> 27:00.840
That's all user-side.

27:00.840 --> 27:01.840
Well, no.

27:01.840 --> 27:03.840
When you give us...

27:03.840 --> 27:05.840
The question is,

27:05.840 --> 27:08.840
that means that you don't do any timing or synchronization.

27:08.840 --> 27:09.840
On the contrary,

27:09.840 --> 27:12.840
because we are taking care of the multiplexing,

27:12.840 --> 27:15.840
when we ingest all the different UDP streams,

27:15.840 --> 27:17.840
the timing is guaranteed.

27:17.840 --> 27:19.840
The minute we receive that UDP stream,

27:19.840 --> 27:22.840
we actually, in the library, the implementation that we did,

27:22.840 --> 27:24.840
we grab the timestamp at the network card.

27:24.840 --> 27:28.840
This stream came in at this time,

27:28.840 --> 27:32.840
and then we reproduce that exact timing on the other end.

27:32.840 --> 27:34.840
We reproduce the spacing, the pacing,

27:34.840 --> 27:36.840
and the latency.

27:36.840 --> 27:39.840
We make it fixed, so that is not variable.

27:39.840 --> 27:42.840
That means that when you multiplex many things

27:42.840 --> 27:43.840
in the same tunnel,

27:43.840 --> 27:45.840
you're guaranteed they're in sync on the other side,

27:45.840 --> 27:48.840
or at least as they were when they came in.

27:53.840 --> 27:56.840
We're starting the use cases of the protocols

27:56.840 --> 27:58.840
to the more for...

27:58.840 --> 28:01.840
kind of the current adoption on endpoint devices,

28:01.840 --> 28:04.840
mobile devices, browsers.

28:05.840 --> 28:08.840
Okay, the question is,

28:08.840 --> 28:10.840
the use cases of the protocol,

28:10.840 --> 28:12.840
what is it towards more,

28:12.840 --> 28:13.840
point-to-point devices,

28:13.840 --> 28:16.840
point-to-multipoint, browsers, etc.

28:16.840 --> 28:18.840
This is the last question of our time.

28:18.840 --> 28:23.840
The original idea was to just do point-to-point transmissions.

28:23.840 --> 28:25.840
That was the original scope

28:25.840 --> 28:28.840
when we created the first version of the spec.

28:28.840 --> 28:29.840
That has changed.

28:29.840 --> 28:32.840
We achieved that, and now we went beyond that.

28:32.840 --> 28:35.840
Now we want to tackle the distribution.

28:35.840 --> 28:38.840
We want to tackle the one-to-many, the media servers.

28:38.840 --> 28:42.840
We have actually a project going on with Miss Server

28:42.840 --> 28:45.840
to add a lot of this functionality and the scalability

28:45.840 --> 28:47.840
as part of the project itself,

28:47.840 --> 28:49.840
so that we have at least one media server

28:49.840 --> 28:51.840
that already supports that in a very scalable way,

28:51.840 --> 28:54.840
where it becomes very simple for an application

28:54.840 --> 28:57.840
like VLC, or VFF Play, or Gstreamer

28:57.840 --> 28:59.840
to hook up to this media server

28:59.840 --> 29:04.840
and start the playback immediately using the Pshuoroko.

29:04.840 --> 29:06.840
Thank you very much.

