WEBVTT

00:00.000 --> 00:16.000
I can try this with high school, because of why?

00:16.000 --> 00:18.000
Not to anything?

00:18.000 --> 00:21.000
Are you press a five?

00:21.000 --> 00:23.000
Second screen?

00:23.000 --> 00:27.000
No, it doesn't work on my laptop.

00:27.000 --> 00:29.000
I don't know why.

00:29.000 --> 00:33.000
This is not on the screen, you say?

00:33.000 --> 00:38.000
You are looping it?

00:38.000 --> 00:44.000
Yes, so it's better when I use your laptop for presenting the slides.

00:44.000 --> 00:47.000
And then switch when I'm at the end.

00:47.000 --> 00:51.000
Because I want to start now.

00:51.000 --> 01:02.000
So in the last few years I have been working on the Libre Sock FPGA prototype.

01:02.000 --> 01:14.000
Using the orange crap and what I did is porting the existing LS2 to the orange crap

01:14.000 --> 01:19.000
and began investigating why DRAM doesn't work.

01:22.000 --> 01:31.000
Both the ECP5 and the IS-40 FPGAs have Libre toolshelves

01:31.000 --> 01:41.000
and I have various FPGA ports including the orange crap which I use for Libre Sock prototyping.

01:42.000 --> 01:51.000
And there is also a micro-word which already supports the Libre Sock.

01:51.000 --> 02:01.000
So at the end of my presentations I might be able to do a live demo.

02:01.000 --> 02:12.000
And like DRAM that uses the original mig but we have switched to N-mig.

02:12.000 --> 02:21.000
So the next generation of the Milky Misc generator in that one doesn't fit into LS2.

02:21.000 --> 02:31.000
So I was unable to rebuild the original from the micro-word

02:31.000 --> 02:39.000
and decided that I would continue working on N-mig based DRAM.

02:39.000 --> 02:52.000
And I found some very good bugs here.

02:52.000 --> 02:59.000
ECP5 is big enough for prototyping the Libre Sock core

02:59.000 --> 03:06.000
and when I started I was already able to run cold boot but there was no DRAM

03:06.000 --> 03:15.000
so I began modifying N-mig boards and the clerser pins needed to connect.

03:15.000 --> 03:26.000
And the reason why I am doing this is I wanted to design a GPU that is even ready for VR.

03:26.000 --> 03:35.000
That is my motivation I have with LS2 and its current GPU needs non-free firmware

03:35.000 --> 03:39.000
and on the long term I wanted to avoid this.

03:39.000 --> 03:53.000
And I also mentioned that the i40 FPGA is used by Valve and Bitgrace for example in the Valve Index.

03:53.000 --> 04:01.000
Now the question is why do we use N-mig in DRAM?

04:01.000 --> 04:09.000
What we are using with DRAM itself is an N-mig port of Lambda Sock

04:09.000 --> 04:17.000
and N-mig is already used by Libre Sock project and we don't want to have multiple toolkits

04:17.000 --> 04:25.000
so everything gets ported to N-mig and we took parts of micro-word and ported them to N-mig

04:25.000 --> 04:35.000
and the same goes for most of the other things that we want to port them to N-mig.

04:35.000 --> 04:44.000
And the old mig which had some design weaknesses we want to avoid

04:44.000 --> 05:00.000
and we also want to avoid LightX which provides a huge collection of libraries and even software.

05:00.000 --> 05:08.000
And in N-mig we don't have all those features at the moment.

05:09.000 --> 05:18.000
N-mig is much more powerful than Varylock and VHDL. Actually it is a Varylock generator

05:18.000 --> 05:30.000
and it is much easier to use for anyone who knows Python so you don't have to learn another VHDL

05:30.000 --> 05:35.000
if you want to contribute to Libre Sock.

05:35.000 --> 05:44.000
And N-mig of course it works nice with Yosos, Next, PNR and GCC and all those things.

05:44.000 --> 05:55.000
And it is also used by DRAM. DRAM is a simplified RAM controller.

05:55.000 --> 06:09.000
It currently only supports ECP-5 but in the future we might want to support I-40 and those heavier Xilinx models

06:09.000 --> 06:18.000
which provide even more cells so you can design more complex designs.

06:18.000 --> 06:28.000
And I wanted to learn how to use a DRAM file that comes with the ECP-5.

06:28.000 --> 06:37.000
I found that there was already some software hardware designs,

06:37.000 --> 06:47.000
MicroVot that support booting Linux using the MicroVot and I wanted to do the same with the Libre Sock Core

06:47.000 --> 06:52.000
but I didn't get there because the DRAM isn't currently working.

06:52.000 --> 06:59.000
There are multiple generations of DRAM, for example DDR.

06:59.000 --> 07:09.000
As DRAM interfaces DDR4 for the Power 9, DDR5 for the Power 10

07:09.000 --> 07:24.000
and on the OrangeCrab we only have DDR3 and it is small but large enough to boot Linux.

07:24.000 --> 07:33.000
And for the OrangeCrab pins we have Migen boards. I made the changes myself.

07:33.000 --> 07:45.000
And the controllers that we can use are found in both DRAM and in LiteDRAM so I have compared those controllers.

07:45.000 --> 07:55.000
They are very similar but there are changes that might be important.

07:55.000 --> 08:00.000
And I also compared software that comes with both.

08:06.000 --> 08:18.000
And if it does not work debugging is hard so I am going to look for ways to connect this to a host computer

08:18.000 --> 08:31.000
and for example run software from an external emulated memory.

08:31.000 --> 08:36.000
And here we have the ECP-5 DRAM controller.

08:36.000 --> 08:47.000
It has high speed I.O. interfaces with many built-in blocks and one of them is the data Q-throop.

08:47.000 --> 09:03.000
Buffer manager is a very complex module and it handles all the timings that you need for DRAM and those modules are FPGA specific.

09:03.000 --> 09:22.000
And we have Python implementations of both files so for DRAM and for DDR and those modules are very similar.

09:23.000 --> 09:38.000
Here is a typical module so you have to connect data lines, address lines and few address lines and clocks.

09:38.000 --> 09:51.000
And then we have a burst-dead signal that is used for read leveling so our software checks whether this burst-dead signal is asserted.

09:51.000 --> 09:59.000
And the data valid signal controls the DFI phases.

09:59.000 --> 10:11.000
And on the input size we have a pause signal which we have to assert if we change the delay.

10:11.000 --> 10:19.000
And then we use the read clock cell to set up the delay.

10:19.000 --> 10:35.000
So only with a certain kind of delay we can get everything working properly and we have to brute force which delay is the best one.

10:35.000 --> 10:44.000
Then we have a library called libgiram which we use to initialize this DRAM.

10:44.000 --> 10:59.000
And here we have to provide a context and we give it some base addresses and the profile for example includes the delays.

10:59.000 --> 11:05.000
And first we set the FITO software control then perform some init sequence.

11:05.000 --> 11:08.000
I think that it hasn't changed.

11:08.000 --> 11:19.000
Then we load the calibration and then we turn it back again and ideally it should work but I found out that it doesn't work that way.

11:19.000 --> 11:32.000
The MAM test doesn't pass or it sometimes only passes for some addresses and for some addresses it doesn't pass.

11:32.000 --> 11:40.000
So it seems that the data that I read back is corrupted.

11:40.000 --> 11:47.000
And that is a problem related to read leveling only.

11:47.000 --> 11:56.000
Read leveling on the ECP5 we only use read leveling and that has to be done for each file module.

11:56.000 --> 12:07.000
And there is an inner loop for the bitflip so we do tests for different combinations.

12:07.000 --> 12:22.000
We do a test for each read window and then try and use that returns a score and then we try to find the minimum and maximum delays.

12:22.000 --> 12:32.000
And then we take the bitflip with the best score and in this example only one of the bitflip values works.

12:32.000 --> 12:56.000
And the whole bitflip thing that isn't currently implemented in DRAM only in lite DRAM.

12:56.000 --> 13:15.000
And here we can see the read leveling for both files and we see that only the first bitflip works that we have the same settings for each file and that there are three working delays.

13:15.000 --> 13:44.000
And then we use the delay that is in the middle and once the delay is set we do a speed test that is currently not implemented but I'm going to implement that zone and then it copies the Linux kernel to the flash and then it puts into Linux.

13:45.000 --> 13:55.000
That takes longer time because it has to be decompressed.

13:55.000 --> 14:07.000
And then everything Linux kernel in a DRAM FS comes from the flash module that also holds the bit string for the FPGAs.

14:07.000 --> 14:18.000
First of all the FPGAs configured.

14:18.000 --> 14:40.000
Then I log in as root of course we don't have network that's one of the things I plan to share the BeagleBone Blacks network and then theoretically being able to SCP files to the orange grab.

14:40.000 --> 14:57.000
But I think that will be much more work but I have a Beagle wire, a small FPGAs so one of them will be used as a debugging aid and the other one will run Leprechaun.

14:57.000 --> 15:17.000
And I think it might be a good idea combining those because I have both boards and if I can use both for my work that seems to be a better option.

15:17.000 --> 15:32.000
And of course if I enter arch it shows that it is a power PC architecture and so now.

