WEBVTT

00:00.000 --> 00:06.000
It's fine.

00:06.000 --> 00:07.720
Anyway, good morning everyone.

00:07.720 --> 00:08.840
My name is Daniel.

00:08.840 --> 00:11.840
Today I'm going to take a few minutes to tell you a little

00:11.840 --> 00:16.080
bit about a JMAP only client for Android that I've been

00:16.080 --> 00:19.480
working on for a while.

00:19.480 --> 00:21.560
But first a few quick notes about myself.

00:21.560 --> 00:25.000
I usually work in instant messaging.

00:25.000 --> 00:28.120
I'm an XMPP developer.

00:28.120 --> 00:31.080
I am on the Council of the XMPP Standards Foundation.

00:31.080 --> 00:35.440
I develop an XMPP client for Android called Conversations.

00:35.440 --> 00:41.360
And yeah, JMAP is a long-term side project of mine.

00:41.360 --> 00:45.320
I checked yesterday that I registered the LTT.RS domain in

00:45.320 --> 00:46.200
2017.

00:46.200 --> 00:49.400
And I think I've been working on that for even longer than

00:49.400 --> 00:51.480
that, somewhere on my hard drive.

00:51.480 --> 00:57.960
There's an implementation for the pre-RFC JMAP thing.

00:57.960 --> 00:59.560
That's at Fastmail Road.

00:59.560 --> 01:02.400
And yeah, these days I develop a aforementioned Java

01:02.400 --> 01:06.680
library and the Android client for letters.

01:06.680 --> 01:08.160
So why JMAP?

01:08.160 --> 01:10.800
So as someone who's starting from scratch, I think you

01:10.800 --> 01:14.040
already got the sales pitch for JMAP.

01:14.040 --> 01:17.360
You have a same set of extensions.

01:17.360 --> 01:20.440
You can do sent and receive over the same protocol.

01:20.440 --> 01:22.840
JSON parsers are readily available.

01:22.840 --> 01:27.000
You don't have to do whatever IMAP is.

01:27.000 --> 01:29.720
On top of that, you don't have to do any mind parsing.

01:29.720 --> 01:32.480
If you ever wrote a mind parser, you know how much of a

01:32.480 --> 01:35.760
relief that is not having to do that.

01:35.760 --> 01:37.320
It has built-in push support.

01:37.320 --> 01:40.320
So especially if you're targeting web or modern

01:40.320 --> 01:43.320
mobile phone operating systems, it's good to have

01:43.320 --> 01:44.520
vendor push.

01:44.520 --> 01:49.080
And yeah, essentially just see Ricardo's maybe omitted

01:49.080 --> 01:51.880
slides on how bad or how weird IMAP is.

01:51.880 --> 01:58.680
And yeah, you pretty much know why I way to JMAP.

01:58.680 --> 02:01.520
So a little bit of the architecture.

02:01.520 --> 02:07.520
The way applications have changed or how Android

02:07.520 --> 02:10.320
applications are developed have changed quite a lot.

02:10.320 --> 02:13.120
In the last 10 years, Google has released a set of

02:13.120 --> 02:16.320
libraries they call Jetpack that make application

02:16.320 --> 02:17.560
development a lot easier.

02:17.560 --> 02:21.000
And Lettuce tries to use a lot of them.

02:21.000 --> 02:24.240
For example, there's Room, which is a database

02:24.240 --> 02:27.760
abstraction layer where you basically define how your

02:27.760 --> 02:31.000
UI displays the information in the database.

02:31.000 --> 02:33.840
And then whenever you write to the database, your UI

02:33.840 --> 02:35.880
automatically gets updated.

02:35.880 --> 02:39.160
And only those things that have changed.

02:39.160 --> 02:43.840
So the way I implemented is that my JMAP library has a

02:43.840 --> 02:48.320
generic search backend that's then implemented by Room.

02:48.320 --> 02:49.400
We write data to Room.

02:49.400 --> 02:51.680
And then magically, our UI gets updated.

02:51.680 --> 02:54.600
And we don't have to do anything.

02:54.600 --> 02:57.520
And also because my main job, again, is developing

02:57.520 --> 03:01.040
conversations, which by now is like 10 years old and quite

03:01.040 --> 03:02.040
legacy.

03:02.040 --> 03:05.320
Lettuce also has a sort of playground for me to work

03:05.320 --> 03:09.280
with new Android APIs, such as Material.U, which is the new

03:09.280 --> 03:14.040
design language, or predictive things like that.

03:14.040 --> 03:18.000
So you already heard that both IMAP and JMAP are

03:18.040 --> 03:20.640
essentially like cache management protocols.

03:20.640 --> 03:24.360
And that allows us to have great offline capabilities in

03:24.360 --> 03:24.840
Lettuce.

03:24.840 --> 03:29.760
So all queries, whether you view a certain mailbox or even

03:29.760 --> 03:32.880
if you do a search, those are all cached.

03:32.880 --> 03:38.680
So if you retry a search or redo a search, when you're

03:38.680 --> 03:41.720
offline, you still see all search results.

03:41.720 --> 03:47.080
And then all user actions are handled by another Jetpack

03:47.120 --> 03:51.000
library called WorkManager that automatically retries those

03:51.000 --> 03:53.600
actions when the user comes back online.

03:56.440 --> 03:59.320
Yeah, while the app is in the foreground, we use web

03:59.320 --> 04:03.960
sockets and event source to listen for server side

04:03.960 --> 04:06.320
changes and refresh the UI.

04:08.880 --> 04:11.560
And we also, when the app is in the background, we have a

04:11.560 --> 04:14.280
fully open source web push implementation.

04:14.280 --> 04:18.280
We don't actually use LIC Play Services library, but we talk

04:18.280 --> 04:19.640
directly.

04:19.640 --> 04:22.320
We are open source code too.

04:22.320 --> 04:25.720
So Firebase, or the Google Play Services to retrieve a

04:25.720 --> 04:31.480
web push URL, you can actually trick Firebase into giving

04:31.480 --> 04:36.120
you a web push URL instead of doing the application

04:36.120 --> 04:38.840
server thing that you might be familiar with from other

04:38.840 --> 04:39.880
Android apps.

04:39.880 --> 04:43.120
But that requires like Vapet, like a voluntary application

04:43.120 --> 04:46.480
server identification, which JMAP currently does not

04:46.480 --> 04:47.480
support.

04:47.480 --> 04:50.760
And I'm in the process of writing in RFC for that.

04:50.760 --> 04:54.640
And yeah, because we have native web push, we can also hook

04:54.640 --> 04:57.720
in other push implementations that are not bound by Google.

04:57.720 --> 04:59.200
For example, like Unified Push.

04:59.200 --> 05:03.440
And the way that works is, for example, that the JMAP server

05:03.440 --> 05:06.480
can tell my XPP server to tell conversations to wake up

05:06.480 --> 05:07.160
letters.

05:07.160 --> 05:09.320
And then Google is not involved at all.

05:09.320 --> 05:13.600
And I can like self-force every part of that.

05:13.600 --> 05:16.840
We also have native enabled by default order

05:16.840 --> 05:18.760
crypt support.

05:18.760 --> 05:19.760
No plug-in required.

05:19.760 --> 05:21.000
It just works.

05:21.000 --> 05:23.080
You see a lock icon on your compose screen.

05:23.080 --> 05:25.600
If the other part supports it too.

05:25.600 --> 05:29.280
During account setup, we ask for key import.

05:29.280 --> 05:32.400
If we previously used setup messages, just refer to the

05:32.400 --> 05:35.600
auto crypt spec on how that works.

05:35.600 --> 05:38.960
But server devs, please allow us to search for arbitrary

05:38.960 --> 05:42.640
email headers, because we need that to discover the setup

05:42.640 --> 05:44.040
message.

05:44.040 --> 05:45.240
That's it.

05:45.240 --> 05:46.720
Thank you for your attention.

05:46.720 --> 05:49.800
You will find the code of the JMAP library on Codebook, the

05:49.800 --> 05:51.000
Android client.

05:51.000 --> 05:52.120
If you want, follow me on message.

05:52.120 --> 05:54.560
I'm Daniel at Google.Social.

05:54.560 --> 05:58.160
The source code for my slides is also online.

05:58.160 --> 05:59.280
Yeah, thank you.

05:59.280 --> 06:00.720
Any questions?

06:00.720 --> 06:01.720
Thank you.

06:02.480 --> 06:11.480
Any conversation about letters or JMAP?

06:11.480 --> 06:16.480
Come on.

06:16.480 --> 06:19.720
So you said there's no need for a MIME parser.

06:19.720 --> 06:22.800
Is there really no, never any reason to have a MIME

06:22.800 --> 06:24.280
parser yourself?

06:24.280 --> 06:25.920
Yeah, I didn't want to put that on the slides.

06:25.920 --> 06:29.200
But as soon as you do like PGP encryption, you do have to do

06:29.200 --> 06:30.080
a MIME parser.

06:30.080 --> 06:30.840
That's what it was.

06:30.840 --> 06:33.360
Oh, damn, now I have to deal with my parsing.

06:33.360 --> 06:37.600
But the MIME that is in most PGP messages that I encountered

06:37.600 --> 06:40.440
is a lot saner than what you might encounter on

06:40.440 --> 06:42.640
wild email servers.

06:42.640 --> 06:45.720
So yeah, that's a relief.

06:45.720 --> 06:47.160
All right.

06:47.160 --> 06:48.360
Any further question?

06:54.360 --> 06:57.440
For the boost, I want to know.

06:57.440 --> 07:00.640
Do you use Udify?

07:00.640 --> 07:06.920
You can receive the notification or all the Zmaps over?

07:06.920 --> 07:08.200
Yes.

07:08.200 --> 07:10.960
Yeah, so JMAP has built in web push support, which is like

07:10.960 --> 07:11.800
an RFC as well.

07:11.800 --> 07:16.200
And then you can either speak web push towards Google and let

07:16.200 --> 07:19.160
Google relay your messages or use Unified Push.

07:19.160 --> 07:22.000
And you best go to UnifiedPush.org if you want to

07:22.000 --> 07:24.480
learn more about the self-hosted version of Unified

07:24.480 --> 07:27.320
Push, because that's too complicated of a topic to

07:28.000 --> 07:30.800
have in a five-minute Q&A session.

07:30.800 --> 07:31.880
All right.

07:31.880 --> 07:34.960
Any further question?

07:34.960 --> 07:37.200
Otherwise, thanks again to Daniel.

07:37.200 --> 07:38.160
Thank you.

