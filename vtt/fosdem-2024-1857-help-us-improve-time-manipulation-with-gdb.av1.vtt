WEBVTT

00:00.000 --> 00:05.000
Which is wizards and barlocks.

00:07.800 --> 00:11.320
Welcome to my talk on manipulating time with GDB.

00:11.320 --> 00:13.200
Well, that's what I would have said

00:13.200 --> 00:15.360
if it wasn't for the RR talk that came right before me

00:15.360 --> 00:18.040
that taught everything that you're supposed to know

00:18.040 --> 00:18.920
that I was gonna say.

00:18.920 --> 00:21.840
So instead, let's talk about how you can help us

00:21.840 --> 00:25.340
make manipulating time with GDB even better, right?

00:25.340 --> 00:27.280
So let me give a quick summary

00:27.280 --> 00:28.640
of what I'm gonna be talking about.

00:28.640 --> 00:30.560
First, some introduction in case you didn't catch

00:30.560 --> 00:32.640
the previous talk, in case you didn't,

00:32.640 --> 00:35.320
you have no idea you were slipping in the talk or something.

00:35.320 --> 00:37.720
I don't know how you would, it was a pretty good talk.

00:38.880 --> 00:42.160
I'm then going to go into the technical details

00:42.160 --> 00:46.640
of how it works and as I explain how each little bit

00:46.640 --> 00:49.960
is working, I'll also explain to you why this little bit

00:49.960 --> 00:51.120
might be buggy.

00:51.120 --> 00:53.840
And then, I'll give you a couple links,

00:53.840 --> 00:58.000
a couple QR codes to where you can see the list of bugs

00:58.000 --> 01:01.200
that we have open, and then you can pick your favorite

01:01.200 --> 01:05.120
and I'll give you a little request to help us fix them

01:05.120 --> 01:07.340
and some contact information if you're not comfortable

01:07.340 --> 01:10.760
just throwing an email to the void of the mailing list

01:10.760 --> 01:12.000
and you would like to talk to someone

01:12.000 --> 01:13.200
who you think is a person.

01:14.200 --> 01:16.880
Right, so let's go from the start.

01:16.880 --> 01:18.880
What the hell am I talking about?

01:18.880 --> 01:19.920
Or first, who am I?

01:19.920 --> 01:21.760
Hello, I'm Guinevere.

01:21.760 --> 01:23.600
I've been hired by Red Hat to work on GDB.

01:23.600 --> 01:25.000
I've been doing it for almost three years

01:25.000 --> 01:27.080
and just recently I've been appointed

01:27.080 --> 01:30.880
one of the maintainers for GDB for one of the specific areas

01:30.880 --> 01:32.720
that does reverse debugging in GDB.

01:33.920 --> 01:36.160
And one of the things that I like to do

01:36.160 --> 01:40.280
is help people get into contributing to open source.

01:40.280 --> 01:42.200
I always wanted to contribute to open source

01:42.200 --> 01:44.200
when I was in university, but it always felt

01:44.200 --> 01:45.800
like an impossible task.

01:45.800 --> 01:48.960
I would need to be like some sort of genius to do it.

01:48.960 --> 01:50.840
And then as I started doing it professionally,

01:50.840 --> 01:52.440
I realized that there are some people

01:52.440 --> 01:54.880
who aren't geniuses like me who are doing it

01:54.880 --> 01:56.680
and I wanted to spread that around.

01:57.960 --> 02:01.280
And what is this GDB that I keep mentioning?

02:01.280 --> 02:03.840
In case you don't know, GDB is a very famous debugger

02:03.840 --> 02:08.840
for C, C++, it's been around for like 30 something years.

02:09.400 --> 02:12.080
Not sure how many, more than 30.

02:12.080 --> 02:14.280
But yeah, it is basically, if you're a time wizard,

02:14.280 --> 02:15.120
it's your best friend.

02:15.120 --> 02:16.600
It can slow down your program,

02:16.600 --> 02:19.080
it can stop it altogether and just,

02:19.080 --> 02:21.000
and as you can learn, as you just learned,

02:21.000 --> 02:22.840
it can also make it run backwards.

02:24.120 --> 02:25.480
I call it time travel debugging

02:25.480 --> 02:27.440
because it's much more fun than reverse debugging,

02:27.440 --> 02:28.760
let's be honest.

02:28.760 --> 02:31.640
It lets you undo instructions and full statements

02:31.640 --> 02:33.800
and even maybe sometimes start,

02:33.800 --> 02:35.600
go to the very start of the program.

02:36.680 --> 02:39.600
And it's very useful for a wide range of things

02:39.600 --> 02:42.600
from race conditions to just logical problems

02:42.600 --> 02:45.040
to just understanding the code that you don't understand.

02:45.040 --> 02:46.800
All of this was mentioned in the previous talk.

02:46.800 --> 02:47.800
If you didn't manage to catch it,

02:47.800 --> 02:50.400
I'll give a quick run over and then you can use

02:50.400 --> 02:51.760
what I teach here to go back in time

02:51.760 --> 02:52.920
and see the previous talk.

02:53.920 --> 02:58.920
So, since a lot of people were here in the previous talk,

02:59.120 --> 03:00.600
not many of you will be asking,

03:00.600 --> 03:03.400
many of you might be asking how is that possible,

03:03.400 --> 03:05.320
not many of you would be saying that's impossible,

03:05.320 --> 03:06.760
which was my joke.

03:06.760 --> 03:09.760
So I'm just gonna go and explain like,

03:09.760 --> 03:10.600
how is this possible?

03:10.600 --> 03:13.360
Because CPU is not meant to execute backwards.

03:13.360 --> 03:17.960
It doesn't have a way to just undo things.

03:17.960 --> 03:20.080
So let's go with a simple instruction.

03:20.080 --> 03:22.520
This is an x86 instruction,

03:22.520 --> 03:24.920
just adding one to a region of memory.

03:24.920 --> 03:27.640
And this one sounds like it would be very easy to undo,

03:27.640 --> 03:28.600
right?

03:28.600 --> 03:30.160
You just need to subtract one from the memory.

03:30.160 --> 03:32.440
You can do it arithmetically.

03:32.440 --> 03:33.560
Sounds like it.

03:33.560 --> 03:36.000
It's not quite that easy because whenever you use

03:36.000 --> 03:41.000
the arithmatic unit in the x86 CPU,

03:41.840 --> 03:43.440
it overrides some stuff.

03:43.440 --> 03:46.960
So you cannot just undo things logically.

03:46.960 --> 03:48.880
The best way to do it is to,

03:48.880 --> 03:49.920
instead just remember,

03:49.920 --> 03:52.320
hey, I'm looking at this address of memory.

03:52.320 --> 03:55.280
It is this long and it has this value.

03:55.280 --> 03:57.240
And then you save that in your program.

03:57.240 --> 04:00.960
But as I said, this is the arithmetic unit.

04:00.960 --> 04:03.920
So we also need to know the flags that were there before

04:03.920 --> 04:05.520
because it's gonna get overwritten.

04:05.520 --> 04:07.280
And every single instruction that happens,

04:07.280 --> 04:09.480
it will also increment the instruction pointer

04:09.480 --> 04:10.320
or the program counter.

04:10.320 --> 04:12.440
I use those interchangeably here.

04:12.440 --> 04:14.080
So we need to remember that.

04:14.080 --> 04:17.040
And if you basically created this in your program,

04:17.040 --> 04:17.960
inside your program,

04:17.960 --> 04:20.440
and then you added some markers here and there to say like,

04:20.440 --> 04:23.080
okay, between these ends is a single instruction,

04:23.080 --> 04:26.240
then you get exactly what GDB record pool does.

04:26.240 --> 04:27.800
This is the area that I'm most familiar with

04:27.800 --> 04:29.960
and it's the area that I maintain.

04:29.960 --> 04:33.480
It does exactly what I showed you and nothing more.

04:33.480 --> 04:35.520
So there are good things and bad things

04:35.520 --> 04:36.760
about using this version.

04:36.760 --> 04:38.680
A good thing is that it just comes with GDB.

04:38.680 --> 04:40.640
You don't need any extra things.

04:40.640 --> 04:43.680
It can fully reconstruct the program state

04:43.680 --> 04:44.880
to any previous state.

04:44.880 --> 04:48.640
It's not something that every single way to do it can do.

04:48.640 --> 04:52.760
But the bad thing is that it is really, really slow.

04:52.760 --> 04:55.000
If you think that the twice as slow thing

04:55.000 --> 04:56.640
that was mentioned in the RR is bad,

04:56.640 --> 04:59.680
try, I don't know, 20 or 40 times or even more.

04:59.680 --> 05:02.640
I'd never stopped to test how long it is.

05:02.640 --> 05:04.600
It's just unusably slow at this point.

05:04.600 --> 05:06.000
But it's really nice.

05:06.000 --> 05:07.540
We should make that better.

05:08.880 --> 05:10.560
And it's a little harder to support

05:10.560 --> 05:14.800
because we need to teach GDB every single instruction

05:14.800 --> 05:17.120
that we want to support for every single architecture.

05:17.120 --> 05:19.600
There's nothing that says only works in these architectures

05:19.600 --> 05:22.120
of that other than people putting their time

05:22.120 --> 05:24.280
into teaching the GDB disassembler.

05:26.160 --> 05:29.680
And as you can see, there are a lot of,

05:29.680 --> 05:31.560
as you can imagine, there are a lot of possible things

05:31.560 --> 05:32.960
that can go wrong.

05:32.960 --> 05:34.560
One of the things, like I said,

05:34.560 --> 05:36.240
we need to teach every single instruction

05:36.240 --> 05:37.520
to the disassembler.

05:37.520 --> 05:40.920
This is a QR code for a couple bugs

05:40.920 --> 05:43.640
that have been filed for missing instruction for this,

05:43.640 --> 05:44.760
missing instruction for that,

05:44.760 --> 05:47.080
missing instruction for this architecture.

05:47.080 --> 05:50.480
And also, if you like, making code neater,

05:50.480 --> 05:53.440
if you enjoy making it more readable,

05:53.440 --> 05:56.080
the disassembly code for x86 is a complete master.

05:56.080 --> 05:58.200
There's a single function with over 3,000 lines

05:58.200 --> 06:01.360
and unreadable other functions and members

06:01.360 --> 06:03.680
that are just a single letter.

06:03.680 --> 06:04.600
Please help.

06:06.640 --> 06:08.840
But that is just a single way to do it

06:08.840 --> 06:10.040
and a very small example.

06:10.040 --> 06:12.480
So let's look at a little bit of a longer one.

06:12.480 --> 06:14.720
Let's say we have an instruction here

06:14.720 --> 06:16.320
at this program counter.

06:16.320 --> 06:19.880
And then your program goes into this instruction

06:19.880 --> 06:21.120
and this instruction, which,

06:21.120 --> 06:23.200
so you can see that this was a jump

06:23.200 --> 06:25.480
and then it continues executing everything.

06:25.480 --> 06:28.440
You can see exactly where your program went through, right?

06:28.440 --> 06:31.560
And if we were saved exactly this information

06:31.560 --> 06:33.080
and just a couple bits more,

06:33.080 --> 06:34.280
like how long each instruction is,

06:34.280 --> 06:36.720
what kind of instruction it is and everything,

06:36.720 --> 06:38.720
we could have a very good idea

06:38.720 --> 06:43.160
of what path your program took through the code.

06:44.160 --> 06:48.520
And we could maybe not recreate everything,

06:48.520 --> 06:50.360
but we can understand like, hey,

06:50.360 --> 06:52.440
the bug is happening because there's some logic wrong

06:52.440 --> 06:55.720
at this point, which is making us take a wrong if somewhere.

06:56.760 --> 07:00.600
This is also the NGDB, is the bit trace recording.

07:00.600 --> 07:05.600
This relies on a feature of x86, I think Intel only,

07:05.600 --> 07:07.720
but don't quote me on that,

07:07.720 --> 07:12.720
which saves the whole path

07:12.760 --> 07:14.640
in a region of memory called the BTS.

07:14.640 --> 07:16.560
And then whenever the inferior,

07:16.560 --> 07:19.000
which is a program that's really debugging, is stopped,

07:19.000 --> 07:21.720
GDB looks at that region of area

07:21.720 --> 07:23.720
and does all that information of like,

07:23.720 --> 07:26.280
it's this big and it was this kind of instruction.

07:27.600 --> 07:29.920
It is again good because it's in the SQL tool

07:29.920 --> 07:32.120
and compared to the other version, it's pretty fast.

07:32.120 --> 07:36.680
It's no, I don't think there's any big slowdowns,

07:36.680 --> 07:38.640
maybe like two x and three x,

07:38.640 --> 07:40.520
which when we're talking about recording the whole

07:40.520 --> 07:42.680
execution is kind of all right.

07:42.680 --> 07:46.520
But like as I said, you cannot reconstruct everything

07:46.520 --> 07:49.920
and it's hardware dependent and it needs to be in the hardware.

07:49.920 --> 07:52.680
It's not like we can do anything to improve that.

07:53.760 --> 07:56.520
It has a couple of issues with test suite regressions,

07:56.520 --> 07:58.400
you hit some assertion errors

07:58.400 --> 08:00.200
and there's some usability problems

08:00.200 --> 08:02.240
with like not being very clear when you can

08:02.240 --> 08:03.560
or cannot do something,

08:03.560 --> 08:06.680
but it's not an area that I looked much more

08:06.680 --> 08:07.920
than what I needed to make this talk.

08:07.920 --> 08:10.160
So I'm not familiar with the problems.

08:10.160 --> 08:13.680
If anyone found it interesting, we can still chat.

08:15.240 --> 08:17.920
And well, I've been talking about,

08:17.920 --> 08:19.840
looking at each instruction at a time

08:19.840 --> 08:23.240
and you have this kind of execution style.

08:23.240 --> 08:26.840
What if you had, you made like a whole checkpoint,

08:26.840 --> 08:28.360
everything that's happening in your system

08:28.360 --> 08:30.440
at the very start of the program

08:30.440 --> 08:31.560
and then you keep going

08:31.560 --> 08:32.920
and then when you reach a certain point,

08:32.920 --> 08:34.240
you create a new checkpoint.

08:34.240 --> 08:37.240
So then you can fully recreate whatever is happening

08:37.240 --> 08:39.920
at an earlier stage and you can keep going.

08:41.160 --> 08:43.840
You cannot step a single instruction back,

08:43.840 --> 08:45.960
but you can step a lot and go forward some.

08:46.960 --> 08:48.560
This is what our R does.

08:48.560 --> 08:50.280
And this is why I got confused

08:50.280 --> 08:52.200
when we didn't say there was a live in theory

08:52.200 --> 08:54.320
because no, it has to have a live in theory.

08:54.320 --> 08:56.800
You create a checkpoint, you go forward,

08:56.800 --> 08:59.200
you create a checkpoint, move back and step forward.

09:00.160 --> 09:02.360
At least this is how I think our R works.

09:04.040 --> 09:05.920
And there's also a tool called UDB,

09:05.920 --> 09:07.960
which I've been told does that.

09:07.960 --> 09:09.800
It is proprietary.

09:09.840 --> 09:10.920
I have no idea how that works

09:10.920 --> 09:12.760
and I'm not all that interested in it.

09:14.160 --> 09:16.800
But yeah, and then what our R does,

09:16.800 --> 09:21.800
as you have all seen, is it creates a way for GDB

09:22.680 --> 09:25.160
to control the fewer.

09:25.160 --> 09:26.960
Yeah, it does that by creating a GDB server.

09:26.960 --> 09:29.160
I'll talk a little bit more about that later.

09:30.560 --> 09:33.640
But yeah, so those are the three main ways

09:33.640 --> 09:36.840
that I know of doing reverse debugging now.

09:36.840 --> 09:39.720
But once we recorded the thing, how do we use it?

09:41.520 --> 09:43.280
You using the GDB front end,

09:43.280 --> 09:45.640
which is the part that handles your commands and everything,

09:45.640 --> 09:46.960
you can do it two ways.

09:46.960 --> 09:48.720
Using reverse next, reverse step,

09:48.720 --> 09:51.520
and all those commands that were explained in the RR talk.

09:51.520 --> 09:53.640
Or you can actually just say to GDB,

09:53.640 --> 09:55.760
hey, I'm going to be going backwards

09:55.760 --> 09:57.800
using set execution direct reverse,

09:57.800 --> 09:59.920
and then just say next step or whatever,

09:59.920 --> 10:01.960
and it's going to understand what you want.

10:01.960 --> 10:03.800
Because actually behind the scenes,

10:03.800 --> 10:05.240
if you say reverse next,

10:05.240 --> 10:09.880
it is just doing that, setting it to reverse,

10:09.880 --> 10:10.960
and then executing the instruction,

10:10.960 --> 10:12.120
and then setting it back forward.

10:12.120 --> 10:15.840
So it does exactly the same thing.

10:15.840 --> 10:17.680
And when we handle the command,

10:17.680 --> 10:21.720
we try to make use of as much information as possible

10:21.720 --> 10:24.040
for going forward, as much of the logic as possible.

10:24.040 --> 10:25.400
And only when we know, okay,

10:25.400 --> 10:28.240
this part has to be different when we're going backwards,

10:28.240 --> 10:30.600
then we add a specific case like, okay,

10:30.600 --> 10:33.360
if going backwards and blah, blah, blah, then do this.

10:33.360 --> 10:36.720
And when we're doing that,

10:36.720 --> 10:38.840
and assuming that everything works until proven otherwise,

10:38.840 --> 10:40.320
what could possibly be buggy?

10:43.000 --> 10:48.000
And RR, like I said, it does a very smart thing.

10:49.520 --> 10:51.520
It tries to do as little as possible.

10:51.520 --> 10:52.880
It just creates a GDB server,

10:52.880 --> 10:54.920
which can control the infuer,

10:54.920 --> 10:58.560
the program that you're debugging, and just that.

10:58.560 --> 11:00.800
And then it's going to open a GDB server,

11:00.800 --> 11:05.520
and accept commands from another client,

11:05.520 --> 11:07.560
another GDB somewhere.

11:07.560 --> 11:12.280
And everything of command handling and understanding,

11:12.280 --> 11:14.960
and saying, okay, we're going to move these many instructions,

11:14.960 --> 11:17.680
or whatever that, that's all handled by GDB.

11:17.680 --> 11:22.160
All RR does is reset the information on the program.

11:23.840 --> 11:25.120
So yeah, what could possibly go wrong

11:25.120 --> 11:27.520
with this kind of setup, right?

11:27.520 --> 11:28.920
So, so many things.

11:29.920 --> 11:33.920
The fact that there had to be two whole talks explaining

11:33.920 --> 11:37.160
why this feature is nice and it exists,

11:37.160 --> 11:39.880
should tell you that this is not a very well-known feature.

11:39.880 --> 11:42.400
It's not something that you see many people using.

11:42.400 --> 11:45.440
And yet, there are over 30 bugs filed for it.

11:46.520 --> 11:47.840
In a feature that no one's using,

11:47.840 --> 11:49.400
that's kind of crazy to me,

11:49.400 --> 11:51.680
because if people were using,

11:51.680 --> 11:53.560
that would be just so many more.

11:53.560 --> 11:56.440
And along with things actually going wrong,

11:56.440 --> 11:58.160
there's also confusing things,

11:58.360 --> 12:01.560
and just user experience problems.

12:01.560 --> 12:03.280
So let's go over a couple of them.

12:04.160 --> 12:05.880
A command that's very, very useful

12:05.880 --> 12:08.960
if you're very used to GDB is the command until.

12:10.040 --> 12:13.720
You can tell it to go until a loop ends, for instance.

12:13.720 --> 12:15.960
It just does not work in reverse mode.

12:15.960 --> 12:18.400
Or, well, if you say reverse until, it just does not work.

12:18.400 --> 12:20.720
If you're setting the execution to reverse,

12:20.720 --> 12:22.160
it works just wrong.

12:22.160 --> 12:24.520
So yeah.

12:24.520 --> 12:26.080
And there are some commands,

12:26.080 --> 12:27.960
for instance, record instruction history,

12:27.960 --> 12:29.800
and function call history.

12:29.800 --> 12:31.280
These sound like it should work

12:31.280 --> 12:34.160
for all recording features, right?

12:34.160 --> 12:35.720
But yeah, no, they're only available for Btrace,

12:35.720 --> 12:37.840
and there's no way to tell as a user.

12:37.840 --> 12:38.960
There's nothing in the help text.

12:38.960 --> 12:42.040
There's nothing in the name of the command.

12:42.040 --> 12:43.680
There's not bug open for it,

12:43.680 --> 12:46.560
but there's a Stack Overflow question, that's the why.

12:46.560 --> 12:50.040
So yeah, that is part of the UX problem.

12:50.040 --> 12:51.720
And another UX problem.

12:51.720 --> 12:55.480
If you're used to GDB, ignore the last 30 seconds.

12:55.480 --> 12:57.040
But if you're not,

12:57.120 --> 12:59.960
at this start here, this is a GDB session,

12:59.960 --> 13:04.200
that says we are right before executing

13:06.600 --> 13:08.840
right before calling the function setup.

13:08.840 --> 13:11.120
So when you're going forward and you say step,

13:11.120 --> 13:13.640
you wanna step into the function setup.

13:13.640 --> 13:15.800
What this execution log is showing

13:15.800 --> 13:17.480
is that if you say reverse step,

13:17.480 --> 13:20.000
you do not step into the setup function.

13:20.000 --> 13:23.680
You step through the previous line that was not printed,

13:23.680 --> 13:26.640
because yes, that makes much sense.

13:26.640 --> 13:27.800
It's something that we've talked about

13:27.800 --> 13:28.680
in the mailing list before.

13:28.680 --> 13:30.680
It's not a trivial problem to solve,

13:30.680 --> 13:32.920
but it is a real problem.

13:32.920 --> 13:34.360
And there's another problem here

13:34.360 --> 13:36.480
in this very execution log.

13:36.480 --> 13:38.600
I say continue to move forward.

13:38.600 --> 13:42.000
And then GDB says no more execution history.

13:42.000 --> 13:44.720
And my very scientific testing of asking one friend

13:44.720 --> 13:47.560
has revealed that this makes it sound

13:47.560 --> 13:49.240
like you cannot execute forward anymore

13:49.240 --> 13:50.560
and you have to start again.

13:50.560 --> 13:52.960
You can, it's not gonna be stimulating,

13:52.960 --> 13:54.120
it's going to be running.

13:54.120 --> 13:56.840
So from the audience reaction,

13:56.840 --> 13:59.000
I think more people are confused by this.

13:59.000 --> 14:01.840
We have a couple of user experience problems.

14:01.840 --> 14:03.880
And if you like a challenge,

14:03.880 --> 14:06.080
if you don't want something easy to start,

14:06.080 --> 14:08.560
we have really hard issues.

14:08.560 --> 14:10.800
We have problem with multiple inferiors,

14:10.800 --> 14:13.440
because GDB can open multiple programs to be debugged.

14:13.440 --> 14:15.880
And there's no way for the recording

14:15.880 --> 14:19.440
to know which program is being recorded, actually.

14:20.680 --> 14:23.560
And there's lots of problems with handling signals

14:23.560 --> 14:24.400
and things like that,

14:24.400 --> 14:26.840
because this was introduced before GDB could do that.

14:26.840 --> 14:29.880
So no one ever looked back.

14:29.880 --> 14:31.640
GDB recording itself has a problem

14:31.640 --> 14:33.400
with multi-threading programs,

14:33.400 --> 14:35.880
because I showed you all the information,

14:35.880 --> 14:39.600
the memory, the region of memory, and the value.

14:39.600 --> 14:41.680
Where do I put the thread information there?

14:43.560 --> 14:46.040
Yeah, we don't record multi-thread stuff.

14:46.040 --> 14:48.400
So that's one reason to use RR.

14:48.400 --> 14:49.680
Until we fix that.

14:49.680 --> 14:51.240
So please help us fix that.

14:51.240 --> 14:53.600
I want people to use GDB.

14:53.600 --> 14:57.640
And as I said at the start, it is just unusably slow.

14:57.640 --> 15:00.160
We need some profiling to be done.

15:00.160 --> 15:02.360
We need to figure out why is it so slow

15:02.360 --> 15:04.840
and figure out how it can be faster,

15:04.840 --> 15:07.400
so that it can be more used

15:07.400 --> 15:10.880
and people can find more bugs for me to continue working.

15:10.880 --> 15:14.240
And then a question that some people might be asking is,

15:14.240 --> 15:15.080
where do I come in?

15:15.080 --> 15:17.360
Why am I giving you the talk?

15:17.360 --> 15:19.920
I said at the start that I like reverse debugging,

15:19.920 --> 15:21.560
and I like getting people interested.

15:21.560 --> 15:23.480
So if I said anything here,

15:23.480 --> 15:24.800
that's not like an interesting problem

15:24.800 --> 15:26.640
or an interesting thing that you would like to see

15:26.640 --> 15:30.400
how it works and how it can get fixed, just hit me up.

15:30.400 --> 15:33.800
And we'll chat and see where it goes.

15:35.520 --> 15:36.720
Does anyone have any more questions

15:36.720 --> 15:38.040
that I haven't answered yet?

15:39.880 --> 15:40.720
Okay, yeah.

15:40.720 --> 15:43.360
Yeah, in the previous talk in the era,

15:43.360 --> 15:45.960
it was supposed to enable some flag of the kernel,

15:45.960 --> 15:48.480
something like ourinary, or something.

15:48.480 --> 15:51.080
Would you know why is it necessary

15:51.080 --> 15:56.080
in the internals error needs to get the...

15:57.440 --> 16:01.200
Yeah, and also I said it was because of security reason,

16:01.200 --> 16:02.800
and I don't know if the person who has that,

16:02.800 --> 16:04.200
oh yeah, he's still here.

16:04.200 --> 16:07.280
Right, so the reason we need the perf flag

16:07.280 --> 16:09.480
is because as far as I understand it,

16:09.480 --> 16:10.680
again, I didn't look at our,

16:10.680 --> 16:12.000
but as far as I understand it,

16:12.000 --> 16:13.960
whenever a perf event happens,

16:13.960 --> 16:16.120
we get the checkpoint.

16:16.160 --> 16:20.200
So if a perf event would happen, we dump everything,

16:20.200 --> 16:25.080
and I think, yeah, so if you need that flag

16:25.080 --> 16:26.920
to make, to read into perf events

16:26.920 --> 16:28.720
and get that kind of internal information

16:28.720 --> 16:31.480
of another program, you would need that for RR as well.

16:32.560 --> 16:34.120
So I can't answer questions,

16:34.120 --> 16:36.680
so do you know, like can you provide some examples

16:36.680 --> 16:37.880
of perf events?

16:38.800 --> 16:40.160
When does it happen?

16:40.160 --> 16:43.880
I'm sorry, I can't because, again, it's not my area.

16:44.240 --> 16:46.320
I look at this as similar stuff, sorry.

16:47.280 --> 16:48.520
I think you were first.

16:50.040 --> 16:54.160
So as I understand, I may be conscious,

16:54.160 --> 16:57.520
but you record whenever there is writing

16:57.520 --> 16:58.520
on the off memory.

16:58.520 --> 16:59.800
No, when perf events happen.

16:59.800 --> 17:02.200
No, I'm not talking about,

17:02.200 --> 17:03.520
I'm talking about GP.

17:06.560 --> 17:07.800
It records every instruction.

17:07.800 --> 17:10.180
Yeah, every instruction, but for reverse,

17:11.020 --> 17:14.180
reverse, continue off.

17:14.180 --> 17:15.780
Reverse execution, yeah.

17:15.780 --> 17:18.860
Do, with watch point work, or is it?

17:20.220 --> 17:22.660
So the question is, can you use watch points

17:22.660 --> 17:23.900
even with GDB recording?

17:23.900 --> 17:25.900
And the answer is yes, you can.

17:28.780 --> 17:32.780
Most of GDB has no idea that a recording has happened.

17:32.780 --> 17:36.940
We sort of like separate what is handling commands,

17:36.940 --> 17:38.220
what is dealing with threads,

17:38.220 --> 17:40.100
what is dealing with the CPU itself,

17:40.100 --> 17:42.180
and somewhere along that stack,

17:42.180 --> 17:43.900
there is the part that goes,

17:43.900 --> 17:45.980
oh wait, you're trying to execute inverse.

17:45.980 --> 17:47.540
I'm not gonna send that to the CPU,

17:47.540 --> 17:48.900
I'm going to do it myself.

17:50.380 --> 17:52.940
And that facility has no information

17:52.940 --> 17:54.620
about like watch points and everything,

17:54.620 --> 17:56.460
and conversely, the watch point stuff

17:56.460 --> 17:57.700
has no idea that that's happening.

17:57.700 --> 18:00.660
It just will check later if that has happened.

18:00.660 --> 18:04.460
So yeah, everything that works forward,

18:04.460 --> 18:06.820
works backwards, except for changing

18:06.820 --> 18:07.700
the state of your program,

18:07.700 --> 18:10.700
because we're simulating based on what happened before.

18:10.700 --> 18:12.820
I think that was the question, yeah.

18:12.820 --> 18:15.220
How does it work with system calls?

18:15.220 --> 18:16.820
Does it work there somehow,

18:16.820 --> 18:20.820
or is it able to record kernel space or something like that?

18:24.340 --> 18:25.940
I'm sorry, I don't know.

18:25.940 --> 18:28.340
I've never tried seeing what happens.

18:28.340 --> 18:30.140
You won't be able to record the kernel space

18:30.140 --> 18:32.300
because whenever you step,

18:32.300 --> 18:34.260
whenever you execute step instruction

18:34.260 --> 18:36.080
over a Cisco instruction,

18:36.080 --> 18:38.160
you are never stepping into the kernel space.

18:38.160 --> 18:39.640
If you want to debug the kernel space,

18:39.640 --> 18:42.400
you need to basically debug the Linux kernel

18:42.400 --> 18:43.960
throughout QM for example.

18:45.320 --> 18:47.520
Then you can actually debug both the user space

18:47.520 --> 18:49.360
and kernel space, but otherwise no.

18:49.360 --> 18:50.880
So it's not gonna be able to handle

18:50.880 --> 18:52.560
like the side effects of a Cisco,

18:52.560 --> 18:54.080
but it knows that a Cisco has happened

18:54.080 --> 18:58.040
and does everything else basically, I think.

18:58.040 --> 18:59.320
I think Mark was first.

19:00.320 --> 19:05.320
So the multi-threaded case, can that ever work?

19:06.600 --> 19:09.440
Yes, I have a couple of ideas how.

19:09.440 --> 19:13.660
You can have basically like multiple separate histories,

19:13.660 --> 19:15.000
one for each thread,

19:15.000 --> 19:18.720
or you could have an extra field for each thing

19:18.720 --> 19:21.400
that says this is what thread X or for thread Y,

19:21.400 --> 19:23.440
or you could have, you can order things

19:23.440 --> 19:25.520
to like a single instruction per thread.

19:25.520 --> 19:28.840
There are a couple ways that I have not tested at all,

19:28.840 --> 19:30.960
and I don't know if any of them work,

19:30.960 --> 19:32.120
but I don't see a reason,

19:32.120 --> 19:35.120
like a theoretical reason why it would just be impossible.

19:36.440 --> 19:37.520
The thing is, you,

19:39.400 --> 19:42.800
one thing is the history, your log, what we record.

19:42.800 --> 19:45.920
The other thing is that we would need to serialize

19:45.920 --> 19:49.560
execution also because if you have two threads

19:49.560 --> 19:51.160
if you serialize it, it's still.

19:51.160 --> 19:53.440
You don't know which one changed memory,

19:53.440 --> 19:56.320
so how could you know if it was thread,

19:56.320 --> 19:59.440
two threads are just poking at memory, changing memory,

19:59.440 --> 20:01.320
how would you know which one it was?

20:01.320 --> 20:03.720
How would you know which instruction caused the side effect

20:03.720 --> 20:05.600
that you're seeing, so we would need to serialize,

20:05.600 --> 20:08.000
meaning the way this works is basically

20:08.000 --> 20:10.160
single-staff type instruction.

20:10.160 --> 20:12.760
So we would need like single-staff thread one,

20:12.760 --> 20:15.320
and then single-staff thread two,

20:16.320 --> 20:18.640
before that, you know, do a round-robin thing.

20:18.640 --> 20:20.760
Yeah, which would make actual,

20:21.960 --> 20:22.960
yeah, it would be even slower,

20:22.960 --> 20:24.880
but it would make my rate conditions more likely,

20:24.920 --> 20:26.640
so maybe it's a good thing, I don't know.

20:26.640 --> 20:29.840
Did you kind of just put back in a stop mode?

20:29.840 --> 20:33.400
Yeah, this is, like I said, complex issue.

20:33.400 --> 20:35.840
If you want a challenge, let's talk in the mail list.

20:35.840 --> 20:37.600
You would need to provide guarantee

20:37.600 --> 20:39.200
the both forward progress and everything.

20:39.200 --> 20:40.520
That's a real mess.

20:41.600 --> 20:42.440
Let's talk in the mail list.

20:42.440 --> 20:44.440
It's a little complicated for right now, I'm sorry.

20:44.440 --> 20:47.160
If you have multiple threads that

20:47.160 --> 20:50.960
where you were trying to find a base condition,

20:50.960 --> 20:53.040
then if you know

20:54.040 --> 20:56.520
what thread is using what memory,

20:56.520 --> 20:59.000
and you know that because you recorded that,

20:59.000 --> 21:01.920
then you can tell the user, hey,

21:01.920 --> 21:06.920
these threads are at that time competing for the same thing.

21:08.200 --> 21:09.040
Yes?

21:09.040 --> 21:11.520
I think you also need to track all the move-exes

21:11.520 --> 21:13.160
and stuff like that, because if you don't,

21:13.160 --> 21:15.760
then you don't know if they are really

21:15.760 --> 21:17.600
race conditioning or not.

21:17.600 --> 21:19.880
Okay, so I'm just gonna repeat

21:19.880 --> 21:21.640
in case anyone's watching from afar.

21:22.640 --> 21:26.440
The question or comment is saying that if we know

21:26.440 --> 21:28.520
all the threads that are trying to access the memory

21:28.520 --> 21:30.240
at the same time, we can tell the user

21:30.240 --> 21:33.520
that a race condition is happening.

21:33.520 --> 21:36.160
And in theory, yes, if we keep track of the move-exes

21:36.160 --> 21:37.920
and everything, but the problem, again,

21:37.920 --> 21:42.840
the recording part is very far away

21:42.840 --> 21:44.440
from everything else from GDB.

21:44.440 --> 21:47.360
So unless you manage to do this recording,

21:47.360 --> 21:49.440
and then later you also create a command

21:49.440 --> 21:52.480
that does that kind of querying into the data,

21:52.480 --> 21:54.640
there's no easy way to get that information

21:54.640 --> 21:55.600
available to the user.

21:55.600 --> 22:00.600
We're not set up to get this kind of low-level stuff

22:00.680 --> 22:04.240
right out easily.

22:04.240 --> 22:05.080
Yeah?

22:05.080 --> 22:05.920
I have a question.

22:05.920 --> 22:07.440
It's not a thread-based question.

22:07.440 --> 22:08.280
Thank you.

22:09.480 --> 22:12.080
But actually, I work a lot with microcontrollers,

22:12.080 --> 22:15.440
and for example, with flash memory,

22:15.440 --> 22:17.800
four megabytes of flash memory, something like that.

22:17.800 --> 22:22.520
And I'm just wondering whether how hard would it be

22:22.520 --> 22:25.600
to make also GDB time traveling work

22:25.600 --> 22:27.680
on such microcontrollers?

22:27.680 --> 22:31.560
I guess the memory space is kind of an issue.

22:31.560 --> 22:33.840
Yeah.

22:33.840 --> 22:36.120
First off, if you're debugging GDB

22:36.120 --> 22:38.440
in the microcontroller itself, which I don't think it would be

22:38.440 --> 22:41.600
because GDB is big, then memory becomes an issue.

22:41.600 --> 22:46.120
If you're not, I don't know if GDB server is set up to do that.

22:46.120 --> 22:49.200
And if it were, it would make the same memory issue.

22:49.200 --> 22:52.200
So we would need a facility to get the disassembling

22:52.200 --> 22:55.640
information into GDB itself and then send it back

22:55.640 --> 22:56.600
to the GDB server.

22:57.960 --> 23:00.960
The problem is because also because you have scalability,

23:00.960 --> 23:03.760
and then you have distribution and you need to...

23:03.760 --> 23:06.600
So yeah, that's a complex use case.

23:08.120 --> 23:10.040
This backhand, the...

23:10.040 --> 23:11.000
Recordful.

23:11.000 --> 23:12.440
Yeah.

23:12.440 --> 23:14.040
This is all inside GDB.

23:14.040 --> 23:16.760
So if you're remote debugging, you don't need to teach

23:16.760 --> 23:18.800
the server anything at all.

23:20.040 --> 23:22.640
It's all being recorded on GDB side.

23:22.640 --> 23:23.480
Oh really?

23:23.480 --> 23:24.320
Yeah.

23:24.320 --> 23:25.160
Huh.

23:25.160 --> 23:28.880
So you can use Linux GDB server with this and it works.

23:28.880 --> 23:29.720
Okay, I'm surprised.

23:29.720 --> 23:31.600
You can open OCD maybe in this case,

23:31.600 --> 23:33.120
but you need some kind of...

23:33.120 --> 23:38.120
So what you need is to teach GDBs reverse debugging engine

23:38.400 --> 23:40.200
about that instruction set.

23:40.200 --> 23:42.560
This only supports X86 and...

23:42.640 --> 23:45.560
I think it does ARM and something,

23:45.560 --> 23:47.320
Power or S390.

23:47.320 --> 23:49.200
There are a couple of architectures

23:49.200 --> 23:50.240
that are partially supported.

23:50.240 --> 23:52.240
You need to basically create your own disassembler

23:52.240 --> 23:54.160
from scratch, unfortunately.

23:54.160 --> 23:57.360
Yeah, there is a disassembly engine inside GDB,

23:57.360 --> 23:59.040
but it only creates text.

23:59.040 --> 24:01.240
And I try to backport it, but...

24:02.400 --> 24:04.080
So right now, you create your own disassembly

24:04.080 --> 24:05.280
from scratch, it's easier.

24:05.280 --> 24:06.560
Yeah.

24:06.560 --> 24:08.440
Oh yeah, sorry, we're out of time.

24:08.440 --> 24:12.480
So we can talk more at the hallway track.

24:12.560 --> 24:13.480
Or probably tomorrow,

24:13.480 --> 24:16.640
because I'm gonna be managing everything.

24:16.640 --> 24:19.240
But thank you for coming and I promise...

24:19.240 --> 24:29.840
If anyone would like to contact me,

24:29.840 --> 24:32.200
these are my contact information.

24:32.200 --> 24:33.240
Yeah, thank you.

