WEBVTT

00:00.000 --> 00:03.600
Yeah, thanks guys.

00:03.600 --> 00:13.840
So I'm going to talk about SSRUN project, our deployable open run, open source run solution.

00:13.840 --> 00:21.000
So it's going to be, talk about 4G and 5G, because I know that many of you still use

00:21.000 --> 00:26.520
4G, although we usually focus these days on 5G.

00:26.520 --> 00:35.240
I'll start with talking about our repositories and the naming, as this causes a bit of confusion.

00:35.240 --> 00:41.600
And then I kind of split the talk, kind of 30%, 4G, and 70%, 80%, maybe 5G.

00:41.600 --> 00:49.600
And primarily talking about our newest baby, so SSRUN project, which is an open run native

00:49.600 --> 00:59.200
CUDU implementation written from scratch, and then obviously also demo that here.

00:59.200 --> 01:06.000
So if you go to GitHub, SSRUN, these days you see two repositories.

01:06.000 --> 01:12.200
One is called SSRUN 4G, and one is SSRUN project.

01:12.200 --> 01:17.040
And I'm going to explain why we have those two projects here in a second.

01:17.040 --> 01:18.080
But let me ask a question.

01:18.080 --> 01:21.680
So who's interested in who's doing 4G in the audience?

01:21.680 --> 01:24.640
You're most interested in 4G.

01:24.640 --> 01:25.640
Great.

01:25.640 --> 01:29.080
And who's interested in 5G?

01:29.080 --> 01:32.280
OK, that's actually more.

01:32.280 --> 01:33.600
Nice.

01:33.600 --> 01:35.760
So a little bit of background in history.

01:35.760 --> 01:43.520
So when we started with that, actually 10 years ago with libLTE, which was back then

01:43.520 --> 01:51.760
a pure C implementation of the LTE physical layer, that obviously was all 4G.

01:51.760 --> 01:55.800
And then the first application, the real application we had was the UE.

01:55.800 --> 02:03.160
So a 4G UE, back then still in a separate repository that we figured out would be better

02:03.160 --> 02:09.040
to actually join this when by 2017 we created the E-note B.

02:09.040 --> 02:19.360
So SSRTE basically became the file layer, the UE, and the E-note B, and all in the same

02:19.360 --> 02:20.360
repository.

02:20.360 --> 02:23.960
And later on there was also an EPC added to that.

02:23.960 --> 02:34.840
And then to explain a little bit that gap that we had between 2018 and 2021, so we added

02:34.840 --> 02:40.480
a lot of new functions like carrier aggregation, ebMS, MIMO, and there's actually, Foster

02:40.480 --> 02:44.720
talks about this and they go into detail what we did there.

02:44.720 --> 02:49.120
But primarily what we did in this time was to harden the E-note B and the UE application

02:49.120 --> 02:54.640
to make them deployable, to run them in real networks, and that's what we have today.

02:54.640 --> 03:02.560
So they're deployed in the field, running in hundreds of base stations on a daily basis.

03:02.560 --> 03:13.920
And then in 2021 we got very excited back then of course about 5G and we implemented

03:13.920 --> 03:22.800
both for NSA and for SA based on the old, based on the existing SSRTE 4G architecture

03:22.800 --> 03:24.240
and software architecture.

03:24.240 --> 03:38.240
We implemented for NSA a UE and an E-note B or G-note B as well as for 5GSA.

03:38.240 --> 03:49.400
But then, I mean that was all based on the 4G code base and we were kind of in trouble

03:49.400 --> 03:52.840
because we still call it SSRTE.

03:52.840 --> 03:56.200
So we kind of figured out, okay, what can we do there?

03:56.200 --> 04:02.640
If we call it SSRTE NR, that's going to be a problem at some stage with 6G, so we figured

04:02.640 --> 04:05.520
out okay, let's call it SSRTE RAN.

04:05.520 --> 04:07.160
That made total sense back then, right?

04:07.160 --> 04:13.400
So we had back then in the entire, in the same repo, we had 4G, UE, and E-note B as

04:13.400 --> 04:19.800
well as 5GSA and 5G NSA, UE and E-note B.

04:19.800 --> 04:26.880
But what happened then was actually ORAN came into play and everybody was getting excited

04:26.880 --> 04:30.320
about ORAN as a buzzword.

04:30.320 --> 04:31.320
What does it mean?

04:31.320 --> 04:37.880
It's kind of initiation or initiative by operators to open up the interfaces between the radio

04:37.880 --> 04:39.200
components.

04:39.200 --> 04:44.680
And the idea here is to avoid the defector VendorLogin that we have today.

04:44.680 --> 04:49.640
So when you build a network, you're buying all the components from a single vendor.

04:49.640 --> 04:55.000
And the idea here is really to use off-the-shelf hardware for the CU and the DU, which is basically

04:55.000 --> 05:03.720
your G-note B, your base station, and put Linux software on it and run it and use open interface

05:03.720 --> 05:09.280
between those components as well as between the G-note B hardware and the radio, so the

05:09.280 --> 05:12.920
IU side on the left side, the left-hand side.

05:12.920 --> 05:21.560
And this is in fact something that 3GVP itself brought into the game because they are the

05:21.560 --> 05:29.880
ones who define the CU and the DUs, but others have provided a radio interface, so a frontal

05:29.880 --> 05:39.480
interface between the DU and the IU, which the ORAN lines took and basically defined

05:39.480 --> 05:45.640
the open frontal interface or an open frontal interface to talk to an IU.

05:45.640 --> 05:49.080
And that's basically what it all is.

05:49.080 --> 06:00.040
And what we did back then was to, and having known and having implemented all of that 5G,

06:00.040 --> 06:04.720
all those 5G applications already in the old codebase and knowing the limitations of that

06:04.720 --> 06:09.400
codebase, we kind of set aside and said, okay, would it be cool to actually start a

06:09.520 --> 06:15.640
scratch and get rid of all the legacy and rewrite everything?

06:15.640 --> 06:17.360
And that's what we did.

06:17.360 --> 06:26.080
So we sat down and rewrote everything and the Azure's Run project, so as we call it today,

06:26.080 --> 06:32.560
is a completely new software architecture, so we had people really laying it out from

06:32.560 --> 06:41.080
the being on with all the interfaces in there that the ORAN Alliance specifically specifies.

06:41.080 --> 06:48.680
And with all the thinking that went into that for openness, for interoperability, for performance,

06:48.680 --> 06:55.920
all towards really deployable open-force radio platform, RAN platform.

06:55.920 --> 07:02.080
And that's what we did and that's what today is Azure's Run project.

07:02.120 --> 07:07.040
And that was also back then when we figured out, okay, or realized, okay, that's now a

07:07.040 --> 07:13.600
new project and that's now a new platform and we need to give it a proper name and distinguish

07:13.600 --> 07:19.800
from the old codebase, which is still totally valid and totally functioning.

07:19.800 --> 07:24.760
So we kind of renamed the old Azure's Run, which was not that old by then, only a year

07:24.760 --> 07:28.200
or two, to become Azure's Run 4G.

07:28.200 --> 07:33.520
And that is what it is today and that's what you find in the GitHub repository.

07:33.520 --> 07:40.520
Still getting new releases and updates, but the new stuff is Azure's Run project.

07:40.520 --> 07:47.960
So this new architecture, this new 5GSA codebase.

07:47.960 --> 07:52.720
And then as we have seen, there's quite a bunch of people who are still interested in

07:52.960 --> 08:01.240
4G that it's often a little bit misunderstood that this is kind of an old project and it's

08:01.240 --> 08:02.760
not maintained, but that's not the case.

08:02.760 --> 08:09.440
As I said, it's deployed and it's a maintained 4G codebase for the ENOB and the UE.

08:09.440 --> 08:17.160
And it still contains a UE implementation like this proof of concept UE that we did back

08:17.240 --> 08:25.240
then with limited 5G support, admittedly, with all the legacy and the limitation that

08:25.240 --> 08:27.280
we had back then.

08:27.280 --> 08:37.280
But it's still used by quite a few people in the research community after all and it's

08:37.280 --> 08:42.640
good enough to attach to a GNOT B and you can work with that.

08:42.640 --> 08:49.120
And the 5G GNOT B code that repository is not recommended to be worked on.

08:49.120 --> 08:54.640
So for everyone who is using SA or is interested in SA, please use the new RAPO.

08:54.640 --> 08:59.360
We're not fixing any bugs there in the old one.

08:59.360 --> 09:05.560
And the last release was actually just the end of the year where we, because of those

09:05.560 --> 09:12.520
users who want to use SSUE with 5GSA mode, that have been fixed for to support more bandwidths

09:12.560 --> 09:17.120
like minor things, no real DSP changes or anything bigger, but this is something that

09:17.120 --> 09:19.640
you can do.

09:19.640 --> 09:24.720
And then use the UE in the old repository, so this testing UE, to connect to the GNOT

09:24.720 --> 09:26.600
B and the new RAPO.

09:26.600 --> 09:31.320
And it's working within the limitations perfectly fine.

09:31.320 --> 09:33.680
And now let's come to the SSRUN project.

09:33.680 --> 09:40.800
So this is in a nutshell the architecture and in everything we have here in green and

09:40.880 --> 09:43.400
blue, especially within our scope.

09:43.400 --> 09:47.880
If you're a little bit familiar with the Nome Clutcher, it's the DU and the CU.

09:47.880 --> 09:53.760
So the CU is the control or central unit, sorry, doing most of the control and plane

09:53.760 --> 09:56.840
stuff here in the upper left corner.

09:56.840 --> 10:00.480
It's further split into a UP component.

10:00.480 --> 10:06.200
And then you have the DU, which is the physical layer and layer 2.

10:06.200 --> 10:08.600
Those two components again have a split in there.

10:08.720 --> 10:17.240
So many splits that give you options, possibilities to cut them and implement one thing in hardware,

10:17.240 --> 10:26.240
one thing or everything in software, however you want and whatever your application requires.

10:26.240 --> 10:31.800
And then you have the so-called frontal interface, which you can see down there, where we support

10:31.800 --> 10:38.440
also frontal 7.2, which is this new open frontal protocol, which you can use to talk

10:38.480 --> 10:44.960
to commercial radio units, and also frontal split 8, which is IQ baseband, so user piece.

10:44.960 --> 10:48.440
Like this is the default, so to speak.

10:49.960 --> 10:54.840
And then four or five points about this.

10:54.840 --> 10:56.560
So this is a complete solution.

10:56.560 --> 10:59.440
So it's layer 1, layer 2, layer 3.

10:59.440 --> 11:01.360
You get everything there.

11:01.360 --> 11:06.480
It's not just like a subset of the RAM solution.

11:07.000 --> 11:10.360
We don't implement anything like RIC or SMOs.

11:10.360 --> 11:13.040
We don't implement a core.

11:13.040 --> 11:19.080
But we are exposing all the centered interfaces so we can talk to third-party components that implement that.

11:19.080 --> 11:23.120
It's very portable, so it's running on ARM.

11:23.120 --> 11:26.280
It's running on x86, on Intel, and on AMD.

11:26.280 --> 11:33.920
All performance, yeah, already coming to the third point, all performance critical things are written

11:33.920 --> 11:41.440
in SIMD instructions for ARM, neon, and for x86, AVX2 and AVX512.

11:41.440 --> 11:43.560
And it's also very scalable.

11:43.560 --> 11:51.720
So you can actually run this like a full 5GSA with the physical layer on a Raspberry Pi

11:51.720 --> 11:57.520
and attach a B200 to it and attach a phone to it and it will work.

11:57.520 --> 12:03.720
But the same thing also runs on 128 core Ampera server or Epic server.

12:03.720 --> 12:09.320
Obviously doing then MIMO and all the thousand whistles and higher bandwidth and throughput.

12:09.320 --> 12:10.960
And very flexible.

12:10.960 --> 12:17.400
As I said, every interface that you have there you can cut and then talk to a third-party component

12:17.400 --> 12:25.160
or mix and match and maybe put some stuff on the physical layer implementation,

12:25.160 --> 12:30.360
some running in the ARM cores and embedded system.

12:30.400 --> 12:36.720
Everything is interoperable, so we have integrations with VATI units, with core networks, with RIX,

12:36.720 --> 12:42.280
all the components that you need to build a full RAM, which are out of scope of us.

12:42.280 --> 12:47.880
We do integrations and talk to others and try to work with them and it's all open.

12:47.880 --> 12:53.360
So please feel free to look at the code and it's all very transparent,

12:53.360 --> 12:58.720
which we believe is very important also for like TECO projects.

12:58.720 --> 13:02.720
And I don't want to dwell too much on the mainline features here,

13:02.720 --> 13:13.080
but I think the main takeaway is that everything is there that a normal user or operator even would actually need from that.

13:13.080 --> 13:18.560
So all the bandwidth and all the modulation schemes and all of that.

13:18.560 --> 13:24.000
The performance is like we are looking at carrier grade like numbers.

13:24.000 --> 13:28.480
So many UEs, 24-7 operation, highest bandwidth.

13:28.480 --> 13:31.720
I mean, this is what the spec defines.

13:31.720 --> 13:36.040
So 1.5 Gb in the downlink, 200 Mb in the uplink.

13:36.040 --> 13:41.400
This is a four-layer downlink, 100 MHz and one-layer uplink.

13:41.400 --> 13:42.760
And it's all accelerated.

13:42.760 --> 13:46.880
So we are not putting any, we support FAC hardware acceleration

13:47.840 --> 13:56.480
with Intel ACC100 cards or other DbDK bound BBDF devices, but we don't need that.

13:56.480 --> 14:00.200
So it all runs efficiently on ARM and Intel.

14:00.200 --> 14:05.080
And then there are some features coming up in the next release.

14:05.080 --> 14:13.840
So we're doing bi-yearly releases that's like a pattern that we have been following with like for many years already.

14:13.840 --> 14:18.080
But we're doing constant pushes to main, but not releasing that code.

14:18.080 --> 14:23.360
And the next one includes for instance, mobility, so between cells.

14:23.360 --> 14:29.280
Then I know there's interest in NTN, so there will be initial support for release 17 NTN.

14:29.280 --> 14:35.040
So to talk to geostationary satellites, multi-cell support,

14:35.040 --> 14:38.160
and the split between the components that I showed.

14:38.160 --> 14:40.520
It's also an important point.

14:40.520 --> 14:46.280
And then I know that all this telco stuff is very overwhelming, especially if you start with that.

14:46.280 --> 14:48.080
I completely understand this.

14:48.080 --> 14:52.240
And that's something that we put a heavy emphasis on.

14:52.240 --> 14:58.680
So to really increase the user experience and ask people to engage with us,

14:58.680 --> 15:06.040
to simplify really the barrier and to lower the barrier, the entry barrier for telco in general,

15:06.040 --> 15:09.880
and also ORAN, which has again its own complexities.

15:09.880 --> 15:12.600
So we've put a lot of results in documentation.

15:12.600 --> 15:22.880
So there's application notes, there's developer guidelines, there's code styles for contributions.

15:22.880 --> 15:24.560
Lots of testing is going on.

15:24.560 --> 15:25.400
That's also something.

15:25.400 --> 15:33.280
So there's a MATLAB based repo where we do all the physical layer conformance testing against MATLAB.

15:33.280 --> 15:35.600
Yes, you need a 5G tool for that to test.

15:35.600 --> 15:47.440
But it's still very useful for people and for researchers who tend to have access to the university or where they work on engagement.

15:47.440 --> 15:50.280
So everything is hosted on GitHub.

15:50.280 --> 15:52.920
We ask you to engage here.

15:52.920 --> 16:00.480
So discussions forum, we used to have a mailing list, but for the new repo, we're not using that anymore.

16:00.480 --> 16:02.720
So better GitHub.

16:02.720 --> 16:05.480
And then of course the code itself.

16:05.480 --> 16:08.680
And then there's an overview of docs.essence-round.com.

16:08.680 --> 16:11.800
You find everything there.

16:11.800 --> 16:15.000
And if there's something not there, then reach out.

16:15.000 --> 16:22.720
And it's also something we are collecting ideas to create new application notes and things like that.

16:22.720 --> 16:24.840
And then the demo.

16:24.840 --> 16:25.920
How am I going?

16:25.920 --> 16:27.560
Not too bad.

16:27.560 --> 16:35.160
So I would have loved to actually do like an ORAN demo to really show you, bring the components and everything.

16:35.800 --> 16:39.120
Unfortunately, the reality is that it's very complex.

16:39.120 --> 16:41.800
So you need big servers.

16:41.800 --> 16:45.560
Usually you need extra hardware like switches.

16:45.560 --> 16:47.200
You need timing.

16:47.200 --> 16:47.880
Very important.

16:47.880 --> 16:49.400
So you actually need PDP.

16:49.400 --> 16:53.360
So precision time protocol, grandmasters, the GPS clocks, CERN.

16:53.360 --> 17:03.080
And the IU is the one that you see there is like a big brick weighs five kilos and nothing you can just put in a trolley and bring over.

17:03.080 --> 17:04.640
Definitely not the servers.

17:05.600 --> 17:14.720
What we did is to kind of like, you know, miniaturize it a little bit.

17:14.720 --> 17:18.560
But this is how small we got it.

17:18.560 --> 17:25.320
This whole setup fits in a big suitcase like in those Peli cases.

17:25.320 --> 17:27.920
But it's still like a desktop PC.

17:27.920 --> 17:33.360
And this radio unit there on the left hand side, it still weighs five kilos.

17:33.360 --> 17:39.360
Plus, you know, power supply, then the PDP grandmaster, you need GPS, which is difficult to get here.

17:39.360 --> 17:42.320
And all of that, you know, it's still it's still complicated.

17:42.320 --> 17:46.160
Nothing for a weekend and to put in the backpack.

17:46.160 --> 17:48.000
But obviously we do a demo there.

17:48.000 --> 17:53.040
And what I will show here is the exact same software.

17:53.040 --> 18:01.840
Remember, we support both ORAN split 7.2 to talk to those guys, to those radio units, but also to a user P.

18:01.840 --> 18:07.120
So that's why I have here my B200 mini.

18:07.120 --> 18:12.320
And I have a Pluto running Maya.

18:12.320 --> 18:15.120
And I have a Cots phone here.

18:15.120 --> 18:17.520
So this is a Motorola phone.

18:17.520 --> 18:25.640
And I'll use something that we also created to make it easier for people to get started.

18:25.640 --> 18:30.360
So all the components that I'm showing here are running off a Docker Compost Script that it's also in the repo.

18:30.360 --> 18:35.400
So in the Docker, you know, top level folder.

18:35.400 --> 18:38.680
There is a Compost for the G-Node B.

18:38.680 --> 18:41.520
That includes Open 5GS as a 5G core.

18:41.520 --> 18:45.680
There's an Influx DB and a Krofana dashboard.

18:45.680 --> 18:54.240
This is something we used to basically to show, visualize the performance of the radio.

18:54.240 --> 18:58.800
And I'm trying to get us all running here.

18:58.800 --> 19:13.520
And then let me just connect this guy here.

19:13.520 --> 19:20.960
Yeah, one thing missing here.

19:20.960 --> 19:28.080
So what I will run here is just a Docker Compost here.

19:28.080 --> 19:41.000
Really in the main G-Node B or as I was running Docker folder specifying like a configuration that I just adopted here a little bit to find the frequency that's actually empty.

19:41.000 --> 19:48.120
Because if we look at Maya here and we tune you a little bit, it was actually quite crowded here.

19:48.120 --> 19:52.160
So all the radio folks are occupying the spectrum.

19:52.160 --> 19:53.600
So this looks OK.

19:53.640 --> 20:00.560
So I picked the AFKAN here that is empty.

20:00.560 --> 20:02.000
So now it's running.

20:02.000 --> 20:05.160
So this was just one command, just a Docker Compost up.

20:05.160 --> 20:10.880
It's starting the core and starting the Influx, starting Krofana, starting G-Node B.

20:10.880 --> 20:12.000
And that's running there.

20:12.000 --> 20:16.160
So if you go back to Maya, we see the G-Node B broadcasting.

20:16.560 --> 20:19.360
So this is the SSB and the SIB.

20:19.360 --> 20:25.320
So all the information is broadcast by the G-Node B without a UE attached to it identify itself.

20:25.320 --> 20:29.240
And what do you see here in the white band admission?

20:29.240 --> 20:42.720
Those are CSIRS or reference signals for the UE to adjust it and to do tele-measurements and to report the quality back.

20:42.720 --> 20:46.200
And what I do now is to run straight.

21:02.720 --> 21:05.320
Do you see this?

21:05.320 --> 21:08.280
So this is the Motorola.

21:08.280 --> 21:10.880
I will make this a little bit smaller.

21:10.920 --> 21:18.280
Because what we see now is, so if we, this is a Motorola phone that I have here.

21:18.280 --> 21:23.080
So if I take this out of Airplay mode, what happens is it will scan for a cell, it will do a patch.

21:23.080 --> 21:31.160
So send an initial signal and then all the attached procedure comes and what we, you know, what's going on there,

21:31.160 --> 21:34.280
the communication with the cell and with the core.

21:34.280 --> 21:37.640
And then it goes very quickly.

21:37.680 --> 21:41.160
But that's something that we can do here.

21:41.160 --> 21:45.160
And it's, you see there, and now it's actually attached.

21:45.160 --> 21:58.640
So all the transition that we see here now on the outer band, this is the UE doing uplink signaling, uplink control signaling.

21:58.640 --> 22:00.760
And now the level has adjusted a little bit.

22:00.760 --> 22:07.880
So the dialing transmission, I guess, is the, is the blue, still like the blue level there and the higher power ones.

22:07.880 --> 22:10.920
This is actually the UE.

22:10.920 --> 22:16.480
And just to see that, so do you see the network name here?

22:16.480 --> 22:18.720
That's FOSM24.

22:18.720 --> 22:23.200
And what we can do now is to have a look at the profiler.

22:23.200 --> 22:25.640
So that's running in the background as well.

22:25.640 --> 22:28.360
So usually we do, it's obviously a console application.

22:28.360 --> 22:33.080
We have console traces, but we created this nice Krofana dashboard there.

22:33.080 --> 22:39.640
So it's all the data is pushed into influx to be, and it's just displaying the stats there.

22:39.640 --> 22:48.120
What we can do is to, to now, yeah, use an application, signal guru.

22:48.120 --> 22:51.160
So you can actually also look at, look at this here.

22:51.160 --> 22:55.320
I will, because actually the Wi-Fi, the Wi-Fi is very bad here.

22:55.320 --> 23:00.320
I would have backhauled over Wi-Fi, but it's not, it's not great.

23:00.320 --> 23:02.040
So what I do is I just run an IPerf.

23:08.520 --> 23:12.520
So, Mac.

23:12.520 --> 23:18.000
So, can we still see that?

23:18.000 --> 23:24.760
So now you see that this one user, obviously this is only a very narrow 20 mega cell CISO.

23:25.160 --> 23:31.640
We're not, not getting 1.4 gigabit, but we get like 32 megabits here.

23:31.640 --> 23:33.200
Maybe we can do a little bit more.

23:37.200 --> 23:38.440
I still do that longer.

23:39.560 --> 23:43.280
Maybe 50, I'm not sure if the channel is, is good enough to do that.

23:43.280 --> 23:45.960
But yeah, it's going up.

23:45.960 --> 23:50.280
And then the phone also showing that, like this is an application we use to,

23:51.280 --> 23:57.760
to get, you know, information from the, from the baseband.

23:57.760 --> 23:59.840
And what I do now is I disconnect that here.

24:00.840 --> 24:02.200
I do this and maximize.

24:03.440 --> 24:04.640
Close free mode.

24:04.640 --> 24:07.160
So now I can actually walk around with the phone.

24:07.160 --> 24:08.800
So it's still doing, it's still doing low.

24:08.800 --> 24:11.080
So have a look at the, at the MCS level.

24:11.080 --> 24:12.640
So this is very good here.

24:12.640 --> 24:15.720
So if I walk around here, it should adopt the link and

24:15.720 --> 24:17.560
the, the rate should kind of go down a little bit.

24:21.240 --> 24:24.760
So the, like this dynamic MCS adaptation,

24:24.760 --> 24:27.200
depending on the measurements that the phone does.

24:27.200 --> 24:28.680
I mean, we can go out of the room as well.

24:28.680 --> 24:33.800
And when I come back, like the, the MCS is, is going up again.

24:34.920 --> 24:37.560
And doing full rate again.

24:37.560 --> 24:49.560
And I think with that I'm.

24:49.560 --> 25:08.560
I think we can still take a question.

25:13.560 --> 25:14.560
Sure. Yeah. Sorry.

25:20.560 --> 25:29.560
Yes. Yeah.

25:29.560 --> 25:35.560
I mean, we have native support for, for UHD and in, in this

25:35.560 --> 25:42.560
repo, but yes, you can actually use the SOPE UHD wrapper to,

25:42.560 --> 25:47.560
to take the, the blade to run the plate over the UHD or the

25:47.560 --> 25:48.560
UHD SOPE wrapper.

25:48.560 --> 25:50.560
I always take, like mix it up.

25:50.560 --> 25:52.160
But yeah, you can do that.

25:52.160 --> 25:57.160
Also with the lime or with any other radio that supports SOPE.

26:03.560 --> 26:06.560
Nothing, I mean, it needs to support obviously full duplex.

26:06.560 --> 26:12.560
So it's, it's after all still like LT or NR bandwidth wise,

26:12.560 --> 26:15.560
10 mega is enough.

26:15.560 --> 26:17.560
But full duplex, it needs to be full duplex.

26:17.560 --> 26:21.560
Even, I mean, TDD theory is not full duplex, but I mean,

26:21.560 --> 26:25.560
the way we, we handle that and UHD handles, it's, it's,

26:25.560 --> 26:28.560
it needs to be full duplex.

26:28.560 --> 26:29.560
Yes.

26:29.560 --> 26:31.560
But no other, other specs there.

26:36.560 --> 26:37.560
Yeah.

26:42.560 --> 26:43.560
Yes.

26:46.560 --> 26:47.560
Yeah.

26:48.560 --> 26:49.560
Yes.

26:49.560 --> 26:52.560
And in fact, we are looking, looking at this.

26:52.560 --> 26:56.560
So those are used here that we, that we used, that we, that I

26:56.560 --> 26:58.560
showed here.

26:58.560 --> 26:59.560
This one.

26:59.560 --> 27:04.560
And so this is a, where is it now?

27:04.560 --> 27:11.560
This is a, a so-called ORAN 7.2a IU.

27:11.560 --> 27:16.560
So it's, it's basically doing, it's basically doing the

27:16.560 --> 27:23.560
pre-coding in the, in the, in the, in the du.

27:23.560 --> 27:25.560
So it's not doing the pre-coding.

27:25.560 --> 27:28.560
So if you had a massive MIMO1, what you wanted to do is to

27:28.560 --> 27:33.560
send all the layers to it and then compare it with the, with

27:33.560 --> 27:37.560
the, with the pre-coding coefficients and let the IU do that.

27:37.560 --> 27:40.560
And that's something that you can, that you can do with 7.2b.

27:40.560 --> 27:44.560
So if you have an IU that supports that and does speak an

27:44.560 --> 27:49.560
ORAN, ORAN open frontal, you can, you can do that.

27:49.560 --> 27:50.560
Okay.

27:50.560 --> 27:51.560
Thank you very much.

27:51.560 --> 27:52.560
Thank you.

