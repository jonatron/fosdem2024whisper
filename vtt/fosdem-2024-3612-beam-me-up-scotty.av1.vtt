WEBVTT

00:00.000 --> 00:07.920
Very short presentation about me,

00:07.920 --> 00:12.520
what is BIM for everyone that doesn't know it, of course.

00:12.520 --> 00:13.920
Thank you, David.

00:13.920 --> 00:17.600
Thank you.

00:18.800 --> 00:22.720
So thank you all for coming.

00:22.720 --> 00:27.400
As David said, this is just a brief introduction on what most of us,

00:27.400 --> 00:31.280
I think, already know the BIM and what's around there.

00:31.280 --> 00:37.600
I'll try to speak louder because I don't think that those things are working,

00:37.600 --> 00:39.760
but the camera is okay.

00:39.760 --> 00:45.400
So obviously, this one doesn't work no more.

00:50.840 --> 00:53.360
Come on.

00:57.400 --> 01:02.400
Oh, spoiler.

01:02.400 --> 01:06.840
Okay. So what is BIM?

01:06.840 --> 01:11.720
BIM, as we know, is the virtual machine that powers the old Erlang,

01:11.720 --> 01:14.560
Elixir, Glim, etc., etc. ecosystem.

01:14.560 --> 01:20.440
It was originally built in the late 70s to early 80s,

01:20.440 --> 01:22.680
and it runs in production ever since.

01:22.680 --> 01:26.600
Very nice. It's almost 40 years of running in production.

01:27.600 --> 01:31.960
Okay. The focus of the virtual machine,

01:31.960 --> 01:34.240
since it's very conception,

01:34.240 --> 01:39.520
was on concurrency and distribution in a moment where nobody was considering it.

01:39.520 --> 01:44.880
Actually, people are still inventing the wheel of concurrency to these days.

01:44.880 --> 01:48.360
Let's think of ACCA, for example, or things like that.

01:48.360 --> 01:54.640
An interesting statistics about the BIM is that according to Cisco,

01:55.000 --> 02:03.240
about 90 percent of internet traffic goes at least one time through BIM and Erlang node.

02:03.240 --> 02:09.520
BIM is being used in production successfully by WhatsApp, Discord, and such,

02:09.520 --> 02:14.880
to handle a very large amount of messages per second,

02:14.880 --> 02:18.800
like more than one million.

02:18.800 --> 02:21.840
Obviously, since we're all here and we are cool kids,

02:22.040 --> 02:26.080
we do love doing things cool, like making programming languages.

02:26.080 --> 02:29.640
So the first of all is obviously Erlang,

02:29.640 --> 02:31.400
the one that started it all,

02:31.400 --> 02:35.560
the old-wise guy, and that's an example of Erlang.

02:35.560 --> 02:38.600
It's very inspired in its syntax by Prologue.

02:38.600 --> 02:42.760
It is a functional language, dynamically typed.

02:42.760 --> 02:49.600
There are some very nice things like pattern matching, binary pattern matching.

02:49.720 --> 02:53.960
Actually, this is an example of the Ranch library,

02:53.960 --> 02:57.880
which is a framework for handling TCP connections.

02:57.880 --> 03:04.160
As you can see, there are things like tuples, lists, etc., etc., supervisors.

03:04.160 --> 03:06.520
I'll talk about this later on.

03:06.520 --> 03:11.040
And it's an example of a behavior, of an application.

03:11.040 --> 03:13.320
I'll talk about this later on, too.

03:13.320 --> 03:14.920
There are macros in Erlang.

03:14.920 --> 03:17.400
There are preposers based.

03:17.520 --> 03:20.320
And this leads to Elixir,

03:20.320 --> 03:25.440
another language in which macros are first class, first of all.

03:25.440 --> 03:28.080
And Elixir is much more recent.

03:28.080 --> 03:32.120
Some say it triggered a renaissance of the beam,

03:32.120 --> 03:33.560
of interest in the beam,

03:33.560 --> 03:37.080
because of its ruby-like syntax,

03:37.080 --> 03:41.200
which is, in my opinion, nicer than Prologue,

03:41.200 --> 03:42.640
based on one.

03:42.640 --> 03:47.520
But I don't say so for everyone.

03:47.520 --> 03:50.720
This is an example of another library,

03:50.720 --> 03:54.040
and it's under for connections to a kind of database.

03:54.040 --> 03:56.200
Also, Elixir is functional,

03:56.200 --> 03:57.360
just like Erlang,

03:57.360 --> 03:59.960
and it's dynamically typed for now.

03:59.960 --> 04:05.760
Because there's some work on bringing types to the Elixir compiler.

04:05.760 --> 04:08.480
Being a beam language,

04:08.480 --> 04:10.040
it also has pattern matching,

04:10.040 --> 04:11.640
also binary pattern matching,

04:11.640 --> 04:14.360
and macros, as I said, are first class.

04:14.360 --> 04:17.640
And then there's the cool new kid, Glim.

04:17.640 --> 04:21.240
I see many people rejoicing.

04:21.240 --> 04:29.080
The syntax, it's a strange mix between an ML language and a beam language.

04:29.080 --> 04:31.840
Its syntax is a bit inspired by Rust,

04:31.840 --> 04:35.360
but the most important thing is that it's statically typed,

04:35.360 --> 04:36.920
rather than dynamically.

04:37.040 --> 04:40.160
And it also has a philosophy,

04:40.160 --> 04:45.680
being a statically type of handling some errors before they happen,

04:45.680 --> 04:48.680
rather than just doing it later on.

04:48.680 --> 04:50.680
And it can also compile to JavaScript.

04:50.680 --> 04:52.960
As I say, it is the cool new kid,

04:52.960 --> 04:54.840
so it has to compile to JavaScript.

04:54.840 --> 05:01.840
But then, as I said,

05:01.840 --> 05:06.240
there are a number of other friends of the beam.

05:06.240 --> 05:10.760
Least flavored Erlang, if you really like parenthesis.

05:10.760 --> 05:17.160
Pure Erl, if you're an Askel guy who wants to run on Erlang for some reason.

05:17.160 --> 05:21.160
Then if you're more Askel-y than Askel's guy,

05:21.160 --> 05:23.280
and you want to try dependent types,

05:23.280 --> 05:27.160
you can also compile Idris2 to Erlang, if you want.

05:27.160 --> 05:33.440
And then just a bunch of languages that the great wise man Peter Weirding did.

05:33.440 --> 05:36.760
So, Braggful, which is a PHP compiling to Erlang,

05:36.760 --> 05:40.840
Lua compiling to Erlang, and all things like that.

05:40.840 --> 05:44.480
He just loves making beam languages.

05:44.480 --> 05:47.000
And he's a very nice guy.

05:47.000 --> 05:52.400
So, why is people still continuing to build languages on the beam?

05:52.400 --> 05:58.880
Because the beam has some kind of superpowers built in there.

05:58.880 --> 06:01.520
Actually, let me interject for a moment.

06:01.600 --> 06:06.160
What I'm referring to as beam is actually beam OTP,

06:06.160 --> 06:11.480
or as I have written, he started calling beam plus OTP.

06:11.480 --> 06:12.240
What's the difference?

06:13.320 --> 06:20.120
So, beam is just the bytecode VM that runs the core bytecode code.

06:20.120 --> 06:22.520
And it's register-based.

06:22.520 --> 06:27.840
Then there's a runtime system called ERTS,

06:27.840 --> 06:29.600
the Erlang runtime system.

06:29.600 --> 06:35.400
That handles how to make this binary code run on the beam.

06:35.400 --> 06:38.000
Yeah, that's true.

06:38.000 --> 06:42.920
So, we have concepts, processes, synchronization,

06:42.920 --> 06:48.000
because everything in the beam is a synchronous.

06:48.000 --> 06:54.720
And ports, ETS tables, which are used for storage of persistent data and such.

06:54.720 --> 07:02.080
It also takes care of scheduling the processes on the beam in a preemptive fashion.

07:02.080 --> 07:05.680
And it's usually mixed, confused with the beam.

07:05.680 --> 07:12.720
So, I keep referring to beam plus ERTS as beam, as everyone is doing.

07:12.720 --> 07:20.280
Then there's another part, very important, in the Erlang ecosystem, that's OTP.

07:20.280 --> 07:26.240
It's a framework that provides you with some battle-tested abstractions.

07:26.240 --> 07:30.880
I think many of us use supervisors, gen servers,

07:30.880 --> 07:33.000
state machines, and things like that.

07:33.000 --> 07:37.320
Supervisors handle what happens if a process fails.

07:37.320 --> 07:41.280
Gen servers are an abstraction on the concept of a server.

07:41.280 --> 07:46.400
State machines are abstractions on the concept of state machines, obviously.

07:46.400 --> 07:51.920
The great part of using the Erlang ecosystem is that all of these three

07:51.920 --> 07:54.840
components provide one alpha of greatness.

07:54.840 --> 07:56.680
So, we have three albs of greatness in total.

07:58.880 --> 08:02.920
So, what are the superpowers, or beam plus OTP?

08:02.920 --> 08:06.080
As I've recently started talking, calling it.

08:06.080 --> 08:08.320
First of all, concurrency.

08:08.320 --> 08:14.600
As I said before, the main unit of concurrency is the process.

08:15.560 --> 08:20.400
The process is just a piece of sequential code that's running,

08:20.400 --> 08:26.720
having his own memory, his own it, and sharing nothing with all other processes.

08:26.720 --> 08:27.920
What's the point of it?

08:27.920 --> 08:33.600
Handling failure in just one simple and easy way,

08:33.600 --> 08:36.120
located just in the process.

08:36.120 --> 08:39.600
Meaning that when you have a crash in your process,

08:39.600 --> 08:42.760
only that process will crash and not the whole application.

08:43.760 --> 08:50.240
Then, a consequence of that is that garbage collection runs on a per process basis.

08:50.240 --> 08:54.520
So, you don't need like in Java to stop everything just to run the garbage

08:54.520 --> 08:57.400
collector, you can run it synchronously.

08:57.400 --> 09:02.960
And finally, since we do share nothing, the only way process is ever to

09:02.960 --> 09:08.040
communicate with each other is by sending messages or signals actually.

09:09.040 --> 09:16.200
This allows the beam to scale seamlessly from a single node setup to a multi-node setup.

09:16.200 --> 09:19.920
You just rather than sending it to a local process,

09:19.920 --> 09:23.920
you send a message to a process in a different beam node.

09:23.920 --> 09:30.320
Then, this leads to the let it crash philosophy of beam and OTP.

09:30.320 --> 09:37.040
Since every part in the end is just a tree of supervisors, a supervision tree.

09:38.040 --> 09:43.040
You can also obviously propagate failure between processes so

09:43.040 --> 09:51.040
that you can handle doing the right thing depending on what process is crashed.

09:51.040 --> 09:59.040
But why in this world would you need supervisors?

09:59.040 --> 10:04.040
Since we have Kubernetes that almost seem to do the right and the same thing.

10:04.040 --> 10:07.040
Restarting our pod if something is not working.

10:07.040 --> 10:12.040
Well, the main idea is that when if a network connection goes down,

10:12.040 --> 10:15.040
you don't want to restart your application.

10:15.040 --> 10:17.040
So, those are two different layers.

10:17.040 --> 10:25.040
OTP focuses on the application layer, handling failures in your domain.

10:25.040 --> 10:30.040
And then Kubernetes focuses on the larger aspect of orchestration.

10:30.040 --> 10:38.040
So, you don't want to crash, as I said before, if a network question is going down.

10:38.040 --> 10:45.040
You just need to handle that in your application and you restart the pod or your deployment

10:45.040 --> 10:51.040
just in very specific cases or very tragic cases.

10:51.040 --> 10:53.040
That's where Kubernetes comes into the rescue.

10:54.040 --> 11:01.040
Being application-based, the supervision trees are obviously also more granular.

11:01.040 --> 11:10.040
So, that you can define a different strategy rather than just turning it on when the process crashed.

11:10.040 --> 11:16.040
So, it provides for your application a more flexible way to handle crashes.

11:17.040 --> 11:19.040
Kubernetes does not.

11:19.040 --> 11:25.040
It just handles networking, bring up and down pods, and that's it.

11:25.040 --> 11:32.040
Those are different level orchestrating containers is a different level than handling failures in your application.

11:32.040 --> 11:37.040
Next superpower of being a plus OTP is immutability.

11:37.040 --> 11:44.040
It didn't seem so when it was built, but now we see its value together with a share nothing concurrency.

11:45.040 --> 11:54.040
Because having no shared memory means that the processes cannot change the state of under process unexpectedly.

11:54.040 --> 11:59.040
And that's the reason why we also have immutability of data structures.

11:59.040 --> 12:03.040
This also leads to a referential transparency.

12:03.040 --> 12:13.040
Even if the beam allows you to have some kind of side effects, for example, logging or networking,

12:13.040 --> 12:20.040
it's just a pragmatic way of handling it rather than setting up a whole monad stack, for example.

12:23.040 --> 12:26.040
Then, final superpower distribution.

12:26.040 --> 12:36.040
As I said before, from the point of view of an application, it's the same to pass messages to a local node,

12:37.040 --> 12:44.040
a node in the same virtual machine or in another node that is running maybe in another part of the world.

12:44.040 --> 12:50.040
This allows you to distribute the work efficiently, seamlessly as a programmer.

12:50.040 --> 12:55.040
And this is made by a built-in protocol to discover nodes.

12:55.040 --> 13:00.040
And you can scale horizontally however you want.

13:00.040 --> 13:04.040
The code that you wrote will just work most of the time.

13:07.040 --> 13:18.040
Finally, since those things run in production ever since, there's a huge interest in observability and debuggability.

13:18.040 --> 13:28.040
The most easy thing to do is connect to your live application and start an interactive shell just to see what's going wrong.

13:29.040 --> 13:30.040
You can trace.

13:30.040 --> 13:37.040
There's an interesting tool called tracing later on, and access all the information of a process and so on and so forth.

13:37.040 --> 13:42.040
Tracing and profiling, as I said, are built-in into the machine.

13:42.040 --> 13:48.040
They are battle tested by running in production for years.

13:48.040 --> 13:57.040
If anybody uses ReContrace, it's very nice, but can anyone give me a match spec that works?

13:58.040 --> 14:00.040
I never found a way to make it work.

14:00.040 --> 14:04.040
And let's not forget hot-code reloading.

14:04.040 --> 14:06.040
It's really interesting.

14:06.040 --> 14:13.040
You can change your code while it is running so that, for example, if you have detected a bug in your live application,

14:13.040 --> 14:19.040
you can just fix it on the fly and your application will just work with the new fix.

14:19.040 --> 14:23.040
Then there are other interesting aspects.

14:23.040 --> 14:31.040
The first one, pattern matching, is more interesting from one who is writing programming languages.

14:31.040 --> 14:42.040
The BIM makes it really easy to write functional languages with pattern matching, also at binary level.

14:42.040 --> 14:49.040
Then BIM is already container aware since a number of years, I think,

14:49.040 --> 14:58.040
allowing you to use C-groups and Kubernetes, obviously, seamlessly, not what Java does, for example.

14:58.040 --> 15:04.040
It makes it easy to have foreign function codes.

15:04.040 --> 15:16.040
You just write a C-node that seems to be an orang node and just communicate with it.

15:16.040 --> 15:20.040
Or you can use the FFI built-in.

15:20.040 --> 15:22.040
What's the future for the BIM?

15:22.040 --> 15:28.040
Obviously, the first part is being more and more largely adopted.

15:28.040 --> 15:40.040
And then there are some interesting research level developments on bringing gradual typing to some languages like Elixir and Erlang.

15:40.040 --> 15:52.040
Also, Elixir, but a number of languages, are doing a pretty huge job of developing numerical computing and AI on BIM nodes

15:52.040 --> 15:58.040
in order to distribute those calculations in an easier way.

15:58.040 --> 16:08.040
Obviously, there's also work on embedded systems, like bringing, for example, a small instance of the BIM vehicle machine on microcontrollers.

16:08.040 --> 16:11.040
There's a work on that, especially at UMBM.

16:11.040 --> 16:20.040
Then, the main challenge is obviously becoming a wider and wider adopted choice for the backend.

16:20.040 --> 16:26.040
And in that sense, having all these people here is a very good sign.

16:26.040 --> 16:28.040
Thank you for being there.

16:28.040 --> 16:31.040
And if you have any questions, feel free to answer.

16:31.040 --> 16:33.040
I mean, feel free to ask.

16:38.040 --> 16:40.040
Thank you.

