WEBVTT

00:00.000 --> 00:28.440
So, I'm going to talk today about strategies for building healthy open source communities.

00:28.440 --> 00:33.080
I wanted to start by just quickly thanking the Alfa Peace Loan Foundation.

00:33.080 --> 00:39.000
So, they fund the Chaos Data Science Initiative, which pays me, and also thanks to the Linux

00:39.000 --> 00:42.720
Foundation and Board Foundation, which also provides support for the projects.

00:42.720 --> 00:51.800
I have been in the technology industry for well over 20 years, working mostly on open

00:51.800 --> 00:58.160
source projects with a focus on community strategy metrics and growing your contributor

00:58.160 --> 00:59.160
base.

00:59.160 --> 01:06.080
And I can tell you that it is really, really hard to build a strong open source community

01:06.080 --> 01:07.720
for a project.

01:07.720 --> 01:11.920
Most of us struggle with finding enough humans to sustain our projects.

01:11.920 --> 01:17.840
So, let's start by talking just a little bit about the problem and why it can be so hard

01:17.840 --> 01:23.520
to achieve sustainable communities for open source projects.

01:23.520 --> 01:24.920
Like I said, the problem is hard.

01:24.920 --> 01:31.320
I like to start my community talks with a quote from an alien life form on Star Trek

01:31.320 --> 01:37.600
the next generation who described humans as ugly bags of mostly water.

01:37.600 --> 01:42.320
Now, I don't think we're ugly, so I think they missed that part.

01:42.320 --> 01:43.680
But we're super squishy, right?

01:43.680 --> 01:45.480
And not just in the physical sense.

01:45.480 --> 01:47.720
We can be unpredictable.

01:47.720 --> 01:56.080
We can be irrational, especially when we're stressed out, overworked, burnt out.

01:56.080 --> 01:58.600
And the reality is, right, we're not robots.

01:58.600 --> 02:00.680
We're not mindless automatons.

02:00.680 --> 02:02.480
We have feelings.

02:02.480 --> 02:04.120
We have bad days.

02:04.120 --> 02:10.280
We have other commitments and we have personal challenges in our lives that are often completely

02:10.280 --> 02:12.720
invisible to other contributors.

02:12.720 --> 02:18.440
And they can get in the way of our contributions to open source projects.

02:18.440 --> 02:23.720
But you can't have an open source project without having human beings to maintain it.

02:23.720 --> 02:29.080
So you need to be able to encourage people to participate in ways that are sustainable

02:29.080 --> 02:34.760
over the long term, both for your project and also for those people.

02:34.760 --> 02:40.400
And it helps to be proactive and ask people to participate in specific ways and in ways

02:40.400 --> 02:43.560
that match the work you need to do within your project.

02:43.560 --> 02:48.360
Now many projects struggle to find people who will actively participate in their projects

02:48.360 --> 02:51.520
and continue to participate over the long term.

02:51.520 --> 02:55.080
If it was easy, you'd already have all the people you need to maintain your project.

02:55.080 --> 02:57.960
We wouldn't need this dev room.

02:57.960 --> 03:00.640
And none of you would be here watching this talk.

03:00.640 --> 03:06.300
But I think a common theme throughout all of the presentations in this dev room so far

03:06.300 --> 03:10.500
really has been that we're in a situation now where there are a lot of open source projects

03:10.500 --> 03:15.220
and not enough contributors and not enough resources to maintain those projects.

03:15.220 --> 03:20.860
So maintainers are burning out and they're in desperate need of help.

03:20.860 --> 03:25.540
And sometimes it can be really difficult to get people to contribute to your project.

03:25.540 --> 03:30.420
And unfortunately there's no magic, there's no one size fits all solution.

03:30.420 --> 03:34.940
So throughout this talk I'll focus on some things you can do to increase the chances

03:34.940 --> 03:40.380
of building a community and growing contributors for your project.

03:40.380 --> 03:44.860
Now that we've talked about the problem and some of the challenges, I'll shift into talking

03:44.860 --> 03:48.020
about strategies for building healthy communities.

03:48.020 --> 03:52.940
So next I'll talk about, and after that I'll talk about us taking a strategic goals based

03:52.940 --> 03:54.880
approach to metrics.

03:54.880 --> 03:59.420
And then finally I'll talk about some metrics you can use to measure project sustainability.

03:59.420 --> 04:06.380
To grow your community along with some resources and some final thoughts at the end.

04:06.380 --> 04:10.980
So as promised let's start by talking about developing and executing on a long term strategy

04:10.980 --> 04:13.340
for building a healthy community.

04:13.340 --> 04:18.900
Including motivation, project governance, new contributor onboarding, roadmaps, contributor

04:18.900 --> 04:25.380
ladders which you might have heard before from some of the talks, and leadership.

04:25.380 --> 04:31.140
To have people's motivations for contributing to your project vary widely.

04:31.140 --> 04:35.100
Some people are contributing as a part of their job while others might contribute to

04:35.100 --> 04:42.260
gain experience or maybe learn about a particular language or particular technology.

04:42.260 --> 04:45.700
Regardless of why they showed up there are some things you can do to motivate them to

04:45.700 --> 04:47.220
stick around.

04:47.220 --> 04:53.860
Clear communication, working in the open, and reducing friction are key to helping people

04:53.860 --> 04:54.860
stick around.

04:54.860 --> 04:59.660
And I'll talk more in the upcoming slides about the importance of explicit and clearly

04:59.660 --> 05:04.420
communicated project governance along with onboarding docs and fostering a welcoming

05:04.420 --> 05:06.140
community.

05:06.140 --> 05:10.540
There are also other things you can do to motivate people to contribute.

05:10.540 --> 05:16.980
Having good first issues or help wanted labels are excellent places to start because these

05:16.980 --> 05:23.700
help those humans find something they can work on while they learn more about your project.

05:24.460 --> 05:28.660
Good first issues and help wanted labels are passive requests for help.

05:28.660 --> 05:37.300
So I also encourage people to be proactive and specific about ways that people can help.

05:37.300 --> 05:44.260
Asking someone specific to review a PR or answer a question or respond to an issue demonstrates

05:44.260 --> 05:52.020
that you recognize their unique expertise and that you want their help with it.

05:52.020 --> 05:57.860
Anything that we're wanted and appreciated makes us squishy humans feel good, right?

05:57.860 --> 06:02.500
Which can be a strong motivator to contribute to an open source project or to continue contributing

06:02.500 --> 06:04.380
over time.

06:04.380 --> 06:07.820
People can also be more motivated to contribute when all of the project work is done in the

06:07.820 --> 06:12.260
open where they can participate as equals.

06:12.260 --> 06:16.660
When some of the work is done within the walls of a company or maybe inside a close knit

06:16.660 --> 06:23.540
group of maintainers it can leave the rest of us feeling left out and demotivated.

06:23.540 --> 06:26.300
A lot of people like to hate on project governance.

06:26.300 --> 06:30.460
It's just extra paperwork, it's busy work, it's politicking, it gets in the way of doing

06:30.460 --> 06:33.340
the real work on the project.

06:33.340 --> 06:38.340
But this isn't true of good governance which is really just about setting the expectations

06:38.340 --> 06:43.500
and getting all of the various humans within your community collaborating together.

06:44.100 --> 06:50.620
Ultimately the focus of project governance is on people, the roles we play, our responsibilities,

06:50.620 --> 06:55.900
how we make decisions and what we should expect from each other as part of participating in

06:55.900 --> 06:58.500
the community.

06:58.500 --> 07:03.340
The goal should be to make the processes for participation as obvious as possible.

07:03.340 --> 07:06.020
Even for people who are brand new to the community.

07:06.020 --> 07:11.460
Having clear rules about how collaboration occurs, how decisions are made, what types

07:11.500 --> 07:17.180
of contributions are in or out of scope helps community members make contributions that

07:17.180 --> 07:21.500
are likely to be accepted and embraced by the project.

07:21.500 --> 07:25.780
This helps avoid wasting people's time with contributions that maybe just aren't aligned

07:25.780 --> 07:28.020
with the project for whatever reason.

07:28.020 --> 07:33.300
A healthy project with clear governance makes the humans happy and it sets your project

07:33.300 --> 07:38.060
up for future growth and long term success.

07:38.100 --> 07:41.020
The good news is you don't have to start from scratch.

07:41.020 --> 07:45.100
The link we have here is some good templates with some instructions that apply to most

07:45.100 --> 07:51.100
projects if you want to quickly and easily build out some basic governance for your project.

07:52.420 --> 07:57.420
It's a lot more difficult to participate in a community if you don't know anything about

07:57.420 --> 08:03.740
the role you might play, the expectations, the key players or any of the rules for participating.

08:03.780 --> 08:10.780
That explicit documented project governance gives you both new and existing contributors

08:10.780 --> 08:14.940
a clear path to guide them through your project.

08:14.940 --> 08:20.660
Spending a bit of time documenting that governance up front can save you a lot of time later

08:20.660 --> 08:25.140
with fewer questions about how things work and it gives you a document that you can

08:25.140 --> 08:29.380
point those other humans to if they have questions.

08:29.380 --> 08:34.060
When I start contributing to an open source project, I want to know how decisions are

08:34.060 --> 08:40.180
made, who makes those decisions, where the discussions about those decisions happen,

08:40.180 --> 08:45.660
which helps me understand whether those decisions are made fairly and out in the open.

08:45.660 --> 08:50.260
The bottom line is that if the processes for collaboration and decision making are not

08:50.260 --> 08:55.420
clearly documented as part of the project governance, this introduces uncertainty into

08:55.420 --> 09:00.300
the mix and uncertainty makes the humans nervous.

09:00.300 --> 09:05.180
It increases the barrier to contribution and it jeopardizes the health and viability of

09:05.180 --> 09:08.060
your project.

09:08.060 --> 09:14.260
Good documentation is how we scale the things that take up precious time for the already

09:14.260 --> 09:19.020
overworked human beings, like answering the same onboarding questions over and over and

09:19.020 --> 09:21.380
over and over.

09:22.340 --> 09:29.500
I see so many open source projects with contributing guides that don't actually provide any useful

09:29.500 --> 09:32.980
information for people who are contributing.

09:32.980 --> 09:37.860
At a minimum, a new contributor needs to understand how to spin up an environment where they can

09:37.860 --> 09:44.380
do their development, the expectations for testing, how to run tests, and any processes

09:44.380 --> 09:50.100
or other expectations that you have for pull requests and then instructions for any other

09:50.140 --> 09:53.540
requirements you might have.

09:53.540 --> 09:59.180
If this is all well documented, new contributors can get started with a minimal amount of help

09:59.180 --> 10:05.420
from the existing maintainers, which can save you a lot of time in the long run.

10:05.420 --> 10:10.940
When a project doesn't have good onboarding docs, those poor, squishy, burnt out maintainers

10:10.940 --> 10:15.860
can get frustrated by the amount of time they spend on new contributor questions, which

10:16.020 --> 10:19.820
can make it hard for contributors to feel welcome.

10:19.820 --> 10:23.620
It'll take a longer time for them to become productive.

10:23.620 --> 10:30.060
This is how the humans get discouraged and then just drift away from your project.

10:30.060 --> 10:35.660
This does not mean that you need to spend weeks and months writing the perfect onboarding

10:35.660 --> 10:37.940
documentation.

10:37.940 --> 10:41.220
At this point, anything is better than nothing.

10:41.260 --> 10:47.260
If you start with a few things that help people actually get started quickly, then new contributors

10:47.260 --> 10:54.020
can help make those onboarding documents better by adding more details and maybe some additional

10:54.020 --> 10:59.820
instructions for something that they found confusing or that they struggled with.

10:59.820 --> 11:03.980
Then after onboarding, people need to be able to find something to work on.

11:03.980 --> 11:09.660
Having public roadmaps is a great way to do your planning in the open, while helping people

11:09.700 --> 11:13.620
find something to work on that aligns with the direction of the project.

11:13.620 --> 11:19.260
If you were here yesterday for Lori Apples' talk, she talked a bit about roadmaps as well.

11:19.260 --> 11:24.140
Roadmaps provide some crucial functions within open source projects, including setting the

11:24.140 --> 11:31.140
direction of the project, prioritizing tasks, organizing the work, and attracting and retaining

11:31.140 --> 11:36.580
contributors, and also providing transparency into where the project is heading.

11:36.580 --> 11:43.500
I think a lot of people underestimate the impact that a well-defined and up-to-date roadmap

11:43.500 --> 11:47.060
can have when building community around a project.

11:47.060 --> 11:53.060
They can help guide everyone toward achieving common goals and having a shared vision about

11:53.060 --> 11:57.980
the future of a project to help contributors work on activities that are aligned with that

11:57.980 --> 12:00.660
vision.

12:00.660 --> 12:05.420
The document linked on the slide has loads of detailed information about building a roadmap

12:05.420 --> 12:07.420
for your open source project.

12:07.420 --> 12:12.820
One of the most important things to think about is how you'll maintain that roadmap over time

12:12.820 --> 12:14.700
and actually keep it up-to-date.

12:14.700 --> 12:19.820
It can help to use tools that are already part of your development or your community processes,

12:19.820 --> 12:24.500
like GitHub project boards, for example, if you use GitHub, so that people don't need

12:24.500 --> 12:26.980
to use yet another tool.

12:26.980 --> 12:31.140
If you have community or developer meetings, it can help to have someone walk through the

12:31.140 --> 12:35.780
roadmap every couple of weeks just to talk about the things that are blocked or need

12:35.780 --> 12:37.660
help.

12:37.660 --> 12:42.780
Maybe set aside some focus time once or twice a year to think about the future of the project,

12:42.780 --> 12:46.220
and then you can incorporate that back into the roadmap.

12:46.220 --> 12:52.700
Bonus points if you can find a really good project manager who can help with the process.

12:52.700 --> 12:57.980
Your project should also be designed to keep diversity, equity, and inclusion top of mind.

12:57.980 --> 13:02.420
Building a diverse community where all of these humans feel welcome and included doesn't

13:02.420 --> 13:04.140
just happen.

13:04.140 --> 13:06.780
It requires putting work and thought into it.

13:06.780 --> 13:09.100
But this time is well spent, right?

13:09.100 --> 13:14.100
Providing an environment where everyone, including people from marginalized populations, feels

13:14.100 --> 13:20.660
safe is the first step toward building a diverse community around your project.

13:20.660 --> 13:26.100
Ideally having programs that give people opportunities for shadowing, mentoring, and sponsoring new

13:26.180 --> 13:32.180
potential leaders can help you grow a diverse set of people into new leaders for your project.

13:32.180 --> 13:33.500
Paris talked a bit about this.

13:33.500 --> 13:39.140
The Kubernetes experience, sorry, the Kubernetes contributor experience special interest group

13:39.140 --> 13:43.420
is a really great place to see some examples of how to implement programs for things like

13:43.420 --> 13:45.540
shadowing and mentoring.

13:45.540 --> 13:49.900
And projects that make a concerted effort to actually bring in new people from a variety

13:49.900 --> 13:54.780
of backgrounds and have programs in place to move them into leadership positions are

13:54.820 --> 14:01.220
more likely to benefit from increased innovation and just have a healthier contributor community.

14:01.220 --> 14:05.940
And by having a diverse and welcoming community, you have the advantage of getting those humans

14:05.940 --> 14:11.820
who might not feel welcome in some other projects.

14:11.820 --> 14:16.300
Now Paris and Bill both talked about contributor ladders.

14:16.300 --> 14:20.540
Defining the roles and responsibilities for contributors, reviewers, and maintainers can

14:20.540 --> 14:24.300
really help with recruiting new humans into these roles.

14:24.340 --> 14:30.100
It can help to think about this as a ladder where contributors can climb up to become reviewers

14:30.100 --> 14:32.780
and those reviewers can become maintainers.

14:32.780 --> 14:38.060
But what's important is to document and make sure that people understand how they can climb

14:38.060 --> 14:43.540
that ladder and how they can gain more responsibilities within your project.

14:43.540 --> 14:49.100
A contributor ladder usually outlines the different contributor roles within the project

14:49.220 --> 14:53.220
and along with the responsibilities and privileges that come with them.

14:53.220 --> 15:00.220
Having a contributor ladder helps set expectations for the roles and it encourages people to

15:00.220 --> 15:04.860
think about how they might take on areas of increasing responsibility within the project.

15:04.860 --> 15:08.780
And as you get more of the humans moving into maintainer roles, you can reduce the load

15:08.780 --> 15:11.300
of the existing maintainers.

15:11.300 --> 15:14.700
And the good news is, again, there's a template that you can use to avoid building this from

15:14.700 --> 15:15.700
scratch.

15:15.700 --> 15:21.180
This one was based on Kubernetes, so it probably has more roles than you need, but you can

15:21.180 --> 15:25.340
simplify it, customize it, make it work for whatever your project needs.

15:27.820 --> 15:31.260
Paris talked a little bit about emeritus as well, so I feel like I'm just dovetailing

15:31.260 --> 15:33.500
on all the things Paris said.

15:33.500 --> 15:37.420
But humans like to think of ourselves as irreplaceable.

15:37.420 --> 15:38.820
We are not.

15:38.820 --> 15:40.700
We move on to other jobs.

15:40.700 --> 15:41.700
We burn out.

15:41.700 --> 15:42.700
We retire.

15:42.700 --> 15:48.300
And let's face it, unlike the robots, humans are mortal and we do not live forever.

15:48.300 --> 15:52.540
You should think about what you might want to do next and how you can prepare someone

15:52.540 --> 15:55.340
else to take over after you move on.

15:55.340 --> 16:00.780
I encourage projects to have an option for people to move into emeritus roles, which

16:00.780 --> 16:06.580
recognizes the hard work that they've put in into a project and gives others a point

16:06.580 --> 16:07.580
of contact.

16:08.460 --> 16:12.820
If they have any questions about what came before, while also allowing you to step away

16:12.820 --> 16:15.660
from the day-to-day responsibilities of the project.

16:15.660 --> 16:21.020
And I encourage you to think of stepping into an emeritus role as a successful way of just

16:21.020 --> 16:27.020
sort of handing off your duties to the next generation of maintainers for a project.

16:27.020 --> 16:32.020
Now, I've talked a lot about things you can improve.

16:32.020 --> 16:35.780
Metrics can help you decide where you need to improve your community and measure your

16:35.820 --> 16:38.860
progress after making improvements.

16:38.860 --> 16:44.820
But quite a few people seem to take what feels to me like a random approach to metrics by

16:44.820 --> 16:50.220
measuring the things that they see other people measuring or gathering the metrics maybe that

16:50.220 --> 16:52.940
are easiest to collect.

16:52.940 --> 16:55.220
And maybe this even provides something useful.

16:55.220 --> 17:02.020
But I encourage you to think about your goals and take maybe a less random and more strategic

17:02.020 --> 17:05.460
approach by focusing on those goals.

17:06.140 --> 17:09.900
And when I say start with the goals, I don't actually mean start with your goals for the

17:09.900 --> 17:11.060
community.

17:11.060 --> 17:16.620
I actually think you need to take a few steps back and start at the very top.

17:16.620 --> 17:22.060
What's important for your organization or what's important for your project as a whole?

17:22.060 --> 17:27.100
And this in a lot of cases has been a company in my case, but it could be an organization

17:27.100 --> 17:28.620
like a foundation.

17:28.620 --> 17:31.380
It could just be the project instead of an organization.

17:31.820 --> 17:37.820
But you should start by looking at what that organization or project hopes to accomplish

17:37.820 --> 17:40.220
and what its goals and objectives are.

17:40.220 --> 17:45.300
And then you can take this down a level and figure out what your goals are as a community.

17:45.300 --> 17:49.180
And your roadmap can be one input into this whole process.

17:49.180 --> 17:53.340
And the most important part of putting together the strategies and plans for your open source

17:53.340 --> 17:59.100
contributions is then aligning them with the overall goals of your project.

17:59.100 --> 18:03.060
If your goals for the community don't support the overall goals for the project, you aren't

18:03.060 --> 18:05.140
likely to be successful.

18:05.140 --> 18:09.980
So it's worth the time to figure out what you want to do and how it supports the rest

18:09.980 --> 18:15.460
of the project or how it supports what your organization is trying to achieve.

18:15.460 --> 18:19.740
Once you figure out what you want to do as a community and then can tie it back to the

18:19.740 --> 18:24.500
bigger organization or the project, then you can start looking at using metrics to measure

18:24.500 --> 18:27.180
your progress.

18:27.180 --> 18:32.180
So people often ask me, for example, of the projects with the best metrics.

18:32.180 --> 18:34.780
But I really just don't think that's a good approach.

18:34.780 --> 18:39.380
What you measure depends on your goals and what you're trying to achieve, which may be

18:39.380 --> 18:42.100
completely different for other projects.

18:42.100 --> 18:46.020
So I prefer to encourage people to start by defining their goals.

18:46.020 --> 18:51.340
And ultimately, you need to look at your strategies and plans and come up with criteria that will

18:51.340 --> 18:55.060
help you measure whether or not you are successful.

18:55.060 --> 19:00.580
For example, if you want to improve the performance of a particular piece of open source software,

19:00.580 --> 19:02.580
measuring commits is not going to get you that.

19:02.580 --> 19:08.220
You actually need to have success criteria and measurement based on those types of performance

19:08.220 --> 19:10.100
you're trying to improve.

19:10.100 --> 19:14.460
If you want to gain influence within an open source project, maybe you work at a company.

19:14.460 --> 19:17.940
Maybe you measure increases in contributions or the number of employees who are moving

19:17.940 --> 19:20.340
into positions of leadership.

19:20.340 --> 19:24.780
And as with any good strategies and plans, hopefully the outcome and results should be

19:24.780 --> 19:29.180
measurable so that you can tell whether your efforts are successful.

19:29.180 --> 19:31.580
And this is where your metrics come in handy.

19:31.580 --> 19:36.180
Once you decide on your success criteria, you need to make sure that you can get the

19:36.180 --> 19:41.540
data required to measure it and maybe start measuring it now, get a good baseline of data.

19:41.540 --> 19:46.900
And there are loads of tools available to measure data about open source projects.

19:46.900 --> 19:51.100
Some of the commonly used tools can be found in the Linux Foundation's Chaos project where

19:51.100 --> 19:53.260
I work.

19:53.260 --> 19:57.940
But there are also loads of other tools and lots of big projects already have dashboards

19:57.940 --> 20:01.700
using either the Chaos tools or CNCF uses DevStats.

20:01.700 --> 20:07.220
There are loads of tools available for doing this.

20:07.220 --> 20:11.580
Since this is a presentation about building community, I encourage you to focus on your

20:11.580 --> 20:17.020
goals while also thinking about your time would be best spent on community activities.

20:17.020 --> 20:22.140
I've given a lot of suggestions so far in this presentation and you should not try to

20:22.140 --> 20:24.340
do everything at once.

20:24.340 --> 20:29.720
So I recommend that you think strategically about where you should start while keeping

20:29.720 --> 20:31.900
your goals top of mind.

20:31.900 --> 20:36.380
If you know you've had people interested in contributing but they've given up when

20:36.380 --> 20:39.980
they couldn't get started, maybe you should start with onboarding docs.

20:39.980 --> 20:45.060
If you have a lot of casual contributors, maybe you focus on the contributor ladder and governance

20:45.060 --> 20:52.140
to help move some of those other humans up to take on more leadership positions.

20:52.140 --> 20:57.700
An excellent way to free up time from maintainers is by getting help with different types of

20:57.700 --> 21:03.420
contributions that take up valuable time and are actually required to make an open source

21:03.420 --> 21:05.100
project successful.

21:05.100 --> 21:10.820
Things like documentation, marketing, community management, project management, and many more

21:10.820 --> 21:12.100
roles.

21:12.100 --> 21:16.820
For projects with complex code bases especially, it can sometimes be easier to onboard people

21:16.820 --> 21:21.820
into these roles first to free up some time to onboard other contributors later.

21:21.820 --> 21:27.020
This also has the advantage of bringing people in to help with things that can have a big

21:27.020 --> 21:34.940
impact on growing your community like roadmaps, governance, and other documentation.

21:34.940 --> 21:36.380
Time is precious.

21:36.380 --> 21:41.300
So it is important to identify the problem areas within your community where you can

21:41.300 --> 21:46.180
focus on the right things while avoiding wasting time on areas that are already working

21:46.180 --> 21:47.180
well.

21:47.180 --> 21:53.060
However, metrics do need to be interpreted in light of your goals, how you operate as

21:53.060 --> 21:57.100
a community, and all of the other things happening within your project.

21:57.100 --> 22:00.620
There's no one size fits all interpretation of metrics.

22:00.620 --> 22:05.900
So in this next section, I'll use some example graphs from some of our chaos metrics and

22:05.900 --> 22:10.180
talk about what some trends might indicate and how to think about addressing potential

22:10.180 --> 22:12.460
issues.

22:12.460 --> 22:16.140
One key area to look at for your project is responsiveness.

22:16.140 --> 22:19.620
This is a backlog graph from the chaos grammar lab tool.

22:19.620 --> 22:23.340
In this project, you can see that there are times where they've got a lot of PRs in the

22:23.340 --> 22:26.100
backlog that need to be merged or closed.

22:26.100 --> 22:29.900
Now, if these PRs are coming from several regular contributors who aren't maintainers,

22:29.900 --> 22:33.700
it might be a good idea to look at how you can promote some of those humans to become

22:33.700 --> 22:38.300
reviewers or maintainers to help out with the workload.

22:38.300 --> 22:42.300
But as with any metrics, you need to interpret them in light of your project.

22:42.300 --> 22:47.180
There are other things that can cause an increase in the backlog, like everyone preparing for

22:47.180 --> 22:54.540
a big release or maybe a big conference or just vacation season that might not be resolved

22:54.540 --> 22:57.260
by moving more people into leadership.

22:57.260 --> 23:00.940
Again, these graphs come from grammar lab.

23:00.940 --> 23:04.660
Other metrics to look at responsiveness focus on the amount of time it takes for maintainers

23:04.660 --> 23:07.260
to close issues in PRs.

23:07.260 --> 23:10.740
Looking at trends for these metrics is particularly important.

23:10.740 --> 23:14.820
This example, you can see that it's taking a lot longer for maintainers to close issues

23:14.820 --> 23:15.820
or PRs.

23:15.820 --> 23:21.940
It might be a good idea to look at how you can promote some more humans to become reviewers,

23:21.940 --> 23:23.260
maintainers, help with the workload.

23:23.260 --> 23:26.860
Again, you need to interpret this in light of your project.

23:26.860 --> 23:31.020
There are other things that can cause an increase in time to close, like the project becoming

23:31.020 --> 23:36.380
more complex or becoming larger, which can just increase the time required for things

23:36.380 --> 23:40.660
like testing and other activities that would happen in the process of reviewing and closing

23:40.660 --> 23:41.660
PRs.

23:41.660 --> 23:48.260
It can also help to look at the types of contributors that you have.

23:48.260 --> 23:53.180
In this case, casual contributors are those drive-through contributors who make a small

23:53.180 --> 23:58.340
handful of contributions and then disappear possibly forever.

23:58.340 --> 24:01.780
Regular contributors are the ones who make some contributions and then they stick around

24:01.780 --> 24:04.740
and continue to make contributions over a period of time.

24:04.740 --> 24:08.860
Core contributors are usually the maintainers who are there for the long term.

24:08.860 --> 24:11.020
You can really learn a lot from this graph.

24:11.020 --> 24:14.780
If you have a very small number of casual and regular contributors, this can mean that

24:14.780 --> 24:19.660
people don't have the information needed to become productive and to contribute.

24:19.660 --> 24:23.300
In some cases, onboarding docs can help solve these issues.

24:23.300 --> 24:27.300
Another thing this graph can indicate is whether there may be some fundamental issues within

24:27.300 --> 24:32.820
the project that are driving the humans away from your project.

24:32.820 --> 24:37.180
If you see the total number of contributors declining or the number of regular contributors

24:37.180 --> 24:42.820
declining, this can indicate some deeper issues, maybe toxic community members or an

24:42.820 --> 24:46.580
unwelcoming environment, and that probably needs to be resolved before you do anything

24:46.580 --> 24:48.980
else.

24:48.980 --> 24:53.020
Or it can mean there are other issues with things like lack of responsiveness.

24:53.020 --> 24:57.500
This metric is often called the bus factor or lottery factor based on the idea that if

24:57.500 --> 25:03.340
one person disappeared after winning the lottery and that person was making all of the contributions,

25:03.340 --> 25:06.940
then the project would probably be in trouble if they left.

25:06.940 --> 25:10.180
This graph uses data from Chaos's Augur software.

25:10.180 --> 25:13.540
I recommend measuring this because there are a few things that can tell you.

25:13.540 --> 25:17.460
First of all, how big of an issue is your current contributor situation?

25:17.460 --> 25:21.260
If it's like this one, you really should focus on getting some additional contributors and

25:21.300 --> 25:23.340
maintainers.

25:23.340 --> 25:27.500
You also might find that there are people who are contributing more than you realized,

25:27.500 --> 25:29.580
which is the other reason this is a good metric.

25:29.580 --> 25:34.780
This can help you think about who you can encourage to contribute more or maybe find

25:34.780 --> 25:37.940
someone who can move up the ladder into a leadership role.

25:37.940 --> 25:41.260
So you might look at some of those people who are a little bit lower down on the graph

25:41.260 --> 25:45.980
and see if you can promote them up into being a maintainer.

25:45.980 --> 25:50.520
The catch here and with so many metrics is that we don't want to just think about the

25:50.520 --> 25:53.360
people who are making commits.

25:53.360 --> 25:54.520
This is a good start, right?

25:54.520 --> 25:58.800
It's a start, but you should also be thinking about how to move people into leadership positions

25:58.800 --> 26:03.600
to be responsible for things that might not show up in GitHub, like documentation, community

26:03.600 --> 26:08.920
management, marketing, mentorship, lots of other important roles.

26:08.920 --> 26:12.920
And metrics are not something that you look at once and never revisit.

26:12.920 --> 26:18.160
It's important to think about metrics gathering as an ongoing process of measuring, improving,

26:18.160 --> 26:19.680
and monitoring.

26:19.680 --> 26:23.880
So you think about your goals and what you want to achieve.

26:23.880 --> 26:25.440
You pick some metrics.

26:25.440 --> 26:31.800
You make improvements, and then you monitor that over time.

26:31.800 --> 26:36.160
And before I wrap up the talk, here are just a few resources that you might find useful.

26:36.160 --> 26:41.280
There's some great stuff there from the CNCF contributor strategy tag around how to use

26:41.280 --> 26:42.760
and templates.

26:42.760 --> 26:47.480
The Open Source Way guidebook is just another one of my favorite community resources.

26:47.480 --> 26:49.680
And then the chaos metrics.

26:49.680 --> 26:51.560
We also have a Slack channel.

26:51.560 --> 26:52.680
You're welcome to join us.

26:52.680 --> 26:56.720
Anyone can participate in the chaos project.

26:56.720 --> 27:00.760
Maintaining an open source project is so much work.

27:00.760 --> 27:05.280
And there are so many maintainers who are overworked, exhausted, and burning out.

27:05.280 --> 27:09.320
The best way to address this challenge is by finding more humans and growing your contributor

27:09.320 --> 27:10.320
community.

27:10.320 --> 27:12.480
But it's hard work, right?

27:12.480 --> 27:17.560
And it takes time away from the day-to-day activities now, which can be super hard to

27:17.560 --> 27:21.440
justify if you feel like you're barely keeping up as it is.

27:21.440 --> 27:26.080
In the longer term, spending at least a little time on things that can help you recruit and

27:26.080 --> 27:29.040
keep new contributors will be worth it.

27:29.040 --> 27:32.680
And as I mentioned before, you don't need to do everything at once.

27:32.680 --> 27:34.180
Think about your goals.

27:34.180 --> 27:38.360
Use your metrics to help you figure out where your time would be best spent.

27:38.360 --> 27:40.320
So this is what I'm asking you to do.

27:40.320 --> 27:44.960
If you're a contributor to an open source project, carve out maybe an hour a week to

27:44.960 --> 27:50.360
improve your onboarding docs, your contributing guide, your project governance metrics, or

27:50.360 --> 27:55.920
just spend that time helping another human learn to do something new in the community.

27:55.920 --> 27:56.920
With that, thank you.

27:56.920 --> 27:59.920
And I'll, I think we have another two minutes for questions.

27:59.920 --> 28:18.000
Yes?

28:18.000 --> 28:19.360
Thanks for the presentation.

28:19.360 --> 28:24.000
It seems that some of the ideas that you presented, the contribution layer, the layer.

28:24.000 --> 28:26.080
Sorry, can you speak up a little bit?

28:26.080 --> 28:27.080
Thanks.

28:27.080 --> 28:28.920
Thanks for the presentation.

28:28.920 --> 28:31.200
It looks like some of the ideas that you presented,

28:31.200 --> 28:34.360
like the contribution ladder, can be maybe at odds

28:34.360 --> 28:38.960
with a project that is really owned by a company

28:38.960 --> 28:41.920
or where there is a strong presence of the company.

28:41.920 --> 28:45.040
Do you believe that there is a way to resolve this?

28:45.040 --> 28:47.760
Yes, I do think that there's a way to resolve that.

28:47.760 --> 28:49.480
I do think that sometimes the governance

28:49.480 --> 28:51.880
and the contributor ladders sometimes

28:51.880 --> 28:53.200
work a little bit differently

28:53.200 --> 28:54.720
when you're talking about projects

28:54.720 --> 28:56.480
that are owned by companies.

28:56.480 --> 28:59.000
I think that the best thing that the company can do

28:59.000 --> 29:03.080
is to be honest about what roles are really open

29:03.080 --> 29:06.280
to people from the community and which ones might not be.

29:06.280 --> 29:07.880
And that might not be something

29:07.880 --> 29:10.560
that your company wants to be transparent about,

29:10.560 --> 29:12.840
but I think if you're really trying

29:12.840 --> 29:14.360
to build a community around it,

29:14.360 --> 29:16.760
I do think you have to be transparent about that.

29:16.760 --> 29:18.720
And I think that the people that will stick around

29:18.720 --> 29:23.000
in your community will at least respect that transparency,

29:23.000 --> 29:26.400
even if maybe it's not the answer that they wanted to hear.

29:26.400 --> 29:27.960
So I think there's definitely room for that,

29:27.960 --> 29:29.800
but it will look a little bit different

29:29.800 --> 29:33.000
and you will have to have that balance

29:33.000 --> 29:34.800
between the company and the community.

29:36.000 --> 29:37.720
Hey, thank you, Don.

29:37.720 --> 29:39.080
All we have time for.

29:39.080 --> 29:39.920
Thanks.

29:39.920 --> 29:40.760
Thanks.

29:40.760 --> 29:41.600
Thank you.

