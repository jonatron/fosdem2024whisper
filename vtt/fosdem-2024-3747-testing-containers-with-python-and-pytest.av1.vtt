WEBVTT

00:00.000 --> 00:15.000
Okay, next we have Dan Chudamak with testing containers with Python and PyTest.

00:15.000 --> 00:26.360
Wow, thanks. You haven't heard the talk yet, but thank you. So, first, the boring part,

00:26.360 --> 00:32.040
I'm Dan, I'm a software developer working for SUSE, I do other stuff, but since we only

00:32.040 --> 00:39.560
have 15 minutes, I'm just going to jump right into the meet, and that's why should you test

00:39.560 --> 00:43.360
containers? I'm not going to answer that, please test your containers if you deploy

00:43.360 --> 00:50.680
applications or anything else. And the first question usually people ask is, why don't you

00:50.680 --> 00:57.520
use shell scripts? Because I mean, shell scripts, they are super portable, they run everywhere,

00:57.520 --> 01:04.240
and shell scripts are also pretty fast. And given that shell scripts run everywhere, and

01:04.240 --> 01:14.080
they are so super-duper portable, everyone understands them. Apparently, I'm not everyone.

01:14.080 --> 01:19.280
Because in my opinion, shell scripts are very brittle, especially once I have to do string

01:19.280 --> 01:24.600
modeling, that's the point where I start to test my tests. And if I need to write tests

01:24.600 --> 01:31.800
to test my tests, I think I'm doing it wrong. You can disagree, but so let me give you the

01:31.800 --> 01:37.840
short sales pitch, why you should use Python, PyTest, and especially this is about a PyTest

01:37.840 --> 01:48.440
plugin that I wrote that's called PyTestContainer. So, what this thing can do for you is, it

01:48.600 --> 01:57.360
handles all the boring plumbing part of a test suite for containers, like pulling images,

01:57.360 --> 02:02.800
building containers, launching everything, and cleaning up, and not leaving you with

02:02.800 --> 02:13.320
terabytes of stale data. It uses the Python test-infra module, in case you know Python,

02:13.680 --> 02:22.760
PyTest, this is just another convenience module to just access files, check whether there

02:22.760 --> 02:27.720
are open ports, stuff that you can do with the Python standard library, but it's just

02:27.720 --> 02:35.120
another convenience layer there. One part that took more time than I care to admit,

02:35.120 --> 02:41.240
but that I'm moderately proud about is that the whole test suite is designed, it supports

02:41.240 --> 02:47.040
parallel test runs. So, if you use the PyTest X-Test plugin, it allows you to execute all

02:47.040 --> 02:53.040
your tests in parallel, so assuming you have 500 cores, you can run 500 tests in parallel.

02:53.040 --> 03:00.480
And the whole thing also works if your container images expose ports, provided you don't open

03:00.480 --> 03:04.400
a thousand ports on each and run 500 tests in parallel, then you'll run out of three

03:04.440 --> 03:12.040
ports. But there's tools for that. If you're using Podman and not just Docker, it can also work

03:12.040 --> 03:22.440
with Podman parts. You can also create abstractions to create container volumes and it will clean

03:22.440 --> 03:29.680
up after itself. Also, if you're more into the area, I have an application and I want to check

03:29.920 --> 03:36.800
whether it works not just on my box, but also on Fedora, CentOS, Debian, Arc Linux, Alpine,

03:36.800 --> 03:42.520
and whatever else there is in the world. You can just define a set of tests and you tell the

03:42.520 --> 03:47.760
plugin on which container images to execute them and it will do that for you. So, that allows

03:47.760 --> 03:53.800
you to have the same set of tests and run that on different containers, which would be, that would

03:53.840 --> 03:59.920
be more into the area that you are looking to test an application. It works with Podman and Docker,

03:59.920 --> 04:06.640
you just change it by changing environment variable. And if you happen to be in the lucky

04:06.640 --> 04:12.680
position to support enterprise-grade software that's very stable, hence very old, it still works

04:12.680 --> 04:20.560
with Python 3.6 and on all the important architectures, which took also more time than I care to admit.

04:21.560 --> 04:27.840
So, let's just take a look at a very simple example. This would be just a typical Python test

04:27.840 --> 04:32.680
file with your imports, then you define your container image. In this case, it's just the

04:32.680 --> 04:39.240
open-source-at-umbleweed image. And then you define a very trivial test. And in this case,

04:39.240 --> 04:48.000
what you can see here is, so this stuff here, that's really what testing for shines and it just

04:48.360 --> 04:53.520
takes a look at the O.S. release there. Very simple test, but you could do more elaborate

04:53.520 --> 05:02.040
examples. So, what are possible use cases? Of course, you'll just base images, you could test

05:02.040 --> 05:09.560
those, you could do applications inside containers, and another test, another possible use case would

05:09.560 --> 05:14.120
be you have an application and you want to check whether the application works on multiple O.S.s,

05:14.320 --> 05:20.800
but you don't need virtual machines for that. Then you could use PyTest container for that as well.

05:20.800 --> 05:30.120
So, I guess if you're in this talk, you might know a bit about PyTest and as the name suggests,

05:30.120 --> 05:35.800
it's a Python testing framework, otherwise the name would be very bad. All it really does is

05:35.800 --> 05:42.080
assemble tests, so it's like unit test on steroids, executes all test functions. And one thing that

05:42.200 --> 05:48.880
PyTest container uses extensively are fixtures. If you're not known to PyTest, you probably know

05:48.880 --> 05:55.520
setup and tear down functions from all other testing frameworks and PyTest fixtures are kind of

05:55.520 --> 06:01.840
the thing there. So, a fixture is really just a parameter for a test function and it can return

06:01.840 --> 06:08.520
a certain value and before that do some setup, give you something in this very simple example.

06:08.840 --> 06:15.440
This is from the PyTest docs, so it would give you, it would for instance create a mock SMTP connection

06:15.440 --> 06:21.120
and for the PyTest container, it gives you a connection to the already created container.

06:21.120 --> 06:26.880
And another cool thing that PyTest has is test parameterization, where you can just define

06:26.880 --> 06:35.400
multiple parameters. So, in this case, you would get your, you would have a test and you want to

06:35.440 --> 06:41.880
execute it for all combinations of those values, so it would run your test for all the, for the whole

06:41.880 --> 06:51.240
Cartesian product, so all combinations of 0, 1 and 2 and 3. Let's just jump into a few usage

06:51.240 --> 06:59.360
examples. So, in case you want to build new containers, you just define yourself the base

06:59.440 --> 07:08.360
URL, you have the, you define yourself the docker file and you create the creatively named class

07:08.360 --> 07:14.680
derived container and if you didn't already see, I shouldn't be in charge of naming things because

07:14.680 --> 07:22.480
I'm terrible at it, but I'm not very creative. But so, what will happen now if you pass this,

07:23.200 --> 07:31.840
if you pass this created class into your test function, the plugin will first pull your, pull

07:31.840 --> 07:39.040
the space image, it will build the container on top of that, launch it, pass it into this, pass it

07:39.040 --> 07:45.440
into the test function and once the test is executed, it will get cleaned up. You can also,

07:46.240 --> 07:54.080
so you can also define pass in other already created containers into this as a base, that all

07:54.080 --> 08:00.240
works. I have an example for that later. As I mentioned, binding free ports, you might not say,

08:00.240 --> 08:09.680
why don't you just add a parameter somewhere, okay, expose port 8000 on the host and that works as

08:09.680 --> 08:16.640
long as you only launch, as you don't launch tests in parallel. So, if you want to launch, if you

08:16.640 --> 08:23.280
for instance want to test this specific container five times in parallel, you can't bind all of them

08:23.280 --> 08:29.360
to the same port and for that, there's a relatively simple abstraction. So, you just create this

08:29.360 --> 08:37.920
port forwarding class, pass it into the container and then it will get exposed in the test. There,

08:37.920 --> 08:45.520
you will get the host port and this is inferred automatically on launch of the test.

08:49.840 --> 08:58.960
If you want to test ports, so this is very apartment specific, works rather like this. So,

08:59.840 --> 09:04.240
essentially a port is just a combination of containers and the only really interesting

09:04.240 --> 09:09.840
part that you want to use it for is again port forwarding, works exactly the same like with

09:10.960 --> 09:24.640
containers. One little catch. So, so far I was telling, I was claiming that your containers would be

09:25.440 --> 09:31.520
launched after the test and destroyed after the test and that's not entirely true because most

09:31.520 --> 09:38.160
tests don't modify the container and then you can get away with creating your container before

09:38.160 --> 09:44.560
all tests and tearing it down after all tests and you save actually a substantial amount of time.

09:45.280 --> 09:52.560
But if you decide to do tests like these where you try whether RM minus RF actually works,

09:52.560 --> 09:59.520
then any subsequent, any subsequent test will fail and start burning. So, and therefore there's a

09:59.520 --> 10:06.240
different fixture that's called just container per test and that will actually ensure that all,

10:06.240 --> 10:13.600
that you just get a fresh container for every test but it costs extra. So, but then you can also

10:13.600 --> 10:19.840
RM minus RF everything in your container and the subsequent container will still kind of work.

10:21.600 --> 10:25.760
For the case where you decide, where you want to run a bunch of tests,

10:26.560 --> 10:32.880
but you don't want to do the whole pie test parameterization before that, you can just dump all

10:32.880 --> 10:40.160
your containers into a global variable that's called container images and pie test will do the

10:40.160 --> 10:46.480
automatic parameterization. So, in this case, these, all the tests in the test module would get

10:46.480 --> 10:53.840
executed with all these containers and that's for instance what, what we're doing in, in the,

10:54.480 --> 11:00.080
in the, for Kiwi test functions where you just want to ensure, okay, they work on CentroStream,

11:00.080 --> 11:09.520
Fedora, DBN, R-Clinux, etc. Pp. What I've, what I hinted on previously that's dependencies

11:09.520 --> 11:14.160
between containers which is essentially just you want to build a container based on another one,

11:14.160 --> 11:23.840
based on another one, which would essentially be just you, you split up your, you would split

11:23.840 --> 11:31.280
up your Docker file. This might sound like maybe a weird idea at first but it can be,

11:31.280 --> 11:37.520
it can be relatively useful if you have, if you want to check different base images and then

11:38.320 --> 11:43.680
build stuff on top of them or you want to, or you decide to modify your base image. So,

11:43.680 --> 11:52.960
we have used this relatively extensively in the BCI test suite and you can, you can simply create

11:52.960 --> 12:00.640
containers that derive from others and that derive from others and you can do this relatively

12:00.640 --> 12:11.040
extensively, just don't add loops. That, that will not work. In case you want to, want to check whether,

12:11.680 --> 12:17.440
for instance, the environment in your container is still, is what you, what you expect or some

12:17.440 --> 12:23.200
config and you don't want to mess with the JSON that Docker Inspector, Portman Inspector gives you,

12:24.640 --> 12:31.120
that's also to a certain extent implemented. So, you'll get, you'll get a Python usable

12:31.120 --> 12:37.040
version of the inspect of a container where you can, for instance, check what's the user in there,

12:37.040 --> 12:42.320
what's the CMD of this container, if there's something in the environment and other stuff.

12:45.680 --> 12:50.960
Since I'm nearly out of time, I'm going to jump over this since it's not really that interesting

12:50.960 --> 13:00.320
actually. One important thing is if you are, so if you create an application in your container,

13:01.040 --> 13:07.280
applications usually take time to launch, please use health checks. Health checks are cool. I know

13:07.280 --> 13:13.920
they are not part of the OCI spec, that's a bummer, but please use health checks. Because if you start

13:13.920 --> 13:19.680
using a test suite and you, and you yourself execute a test manually, you launch your container,

13:19.680 --> 13:24.480
you try to curl where the application is there and it all works and then you automate it and it

13:24.480 --> 13:31.600
suddenly fails because the machine is much faster than you are. And your application is simply not

13:31.600 --> 13:38.240
up there. What PyTest container supports, if your app, if your container image has a health check

13:38.240 --> 13:44.960
defined, it will wait until the container is healthy. And as long as it's not healthy, it will not

13:44.960 --> 13:50.960
execute your test. If it becomes unhealthy, your test immediately fails. So, if you add a health check

13:51.040 --> 13:58.640
into your container file or if it's just in the image, then it will wait and it will start

13:58.640 --> 14:03.680
execute the test and you can always be sure that your container will be healthy. And if you don't

14:03.680 --> 14:10.320
want that for whatever reason, then you can just say, okay, I don't care about health checks. Then

14:10.320 --> 14:18.320
you just define the timeout to be minus one or you comment the health check out, but well. And then

14:18.960 --> 14:24.240
you can, then your container might not, might still be starting or it might be unhealthy.

14:25.600 --> 14:32.560
As I said, by default, it will use, it will pick Portman, but you can just set use Docker.

14:35.360 --> 14:41.840
And what I'm, as I said, moderately proud is you can just run your tests in parallel. That also

14:41.840 --> 14:50.720
works with port forwardings. So, that can save you a lot of time unless all your container builds

14:50.720 --> 14:57.840
run themselves in parallel. So, then you're not going to save a lot. The thing cleans up very

14:57.840 --> 15:03.200
well after itself. So, if you create containers of volumes or parts or temporary directories,

15:03.200 --> 15:08.640
all that gets cleaned up, images and intermediate layers are retained because otherwise it would

15:08.640 --> 15:16.720
just take forever and ever. There's a few people that use it. Most of them are those that I bullied

15:16.720 --> 15:24.000
into that, but maybe you find this useful and you will be on this list. And since I'm out of time,

15:24.000 --> 15:28.480
thank you.

