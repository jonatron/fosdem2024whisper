WEBVTT

00:00.000 --> 00:08.080
All right, folks, we're starting.

00:08.080 --> 00:12.880
So we've got Alan Pope, and he's going to talk about community and compliance.

00:12.880 --> 00:18.360
Hello, everyone.

00:18.360 --> 00:23.160
We might have to go slightly fast because my laptop battery is dying, so apologies for

00:23.160 --> 00:24.160
that.

00:24.160 --> 00:32.080
So hello, and welcome to my short, gentle talk, Compliance as a Community Effort.

00:32.080 --> 00:37.680
I've got two goals with this talk, raise awareness of compliance tools available in

00:37.680 --> 00:45.640
open source projects, and increase compliance engagement in open source projects between

00:45.640 --> 00:48.640
maintainers, contributors, and the rest of the community.

00:49.040 --> 00:55.400
It's a new topic for me, so I'd appreciate any feedback, either afterwards, here in

00:55.400 --> 00:59.480
Meet Space, or later in a bar, or via email.

00:59.480 --> 01:03.840
My contact details are at the end.

01:18.640 --> 01:19.640
Thank you.

01:19.640 --> 01:20.640
Thank you.

01:20.640 --> 01:21.640
Thank you.

01:21.640 --> 01:22.640
Thank you.

01:22.640 --> 01:23.640
Thank you.

01:23.640 --> 01:24.640
Thank you.

01:24.640 --> 01:25.640
Thank you.

01:25.640 --> 01:26.640
Thank you.

01:26.640 --> 01:27.640
Thank you.

01:27.640 --> 01:28.640
Thank you.

01:28.640 --> 01:29.640
Thank you.

01:29.640 --> 01:30.640
Thank you.

01:30.640 --> 01:31.640
Thank you.

01:31.640 --> 01:32.640
Thank you.

01:32.640 --> 01:33.640
Thank you.

01:33.640 --> 01:34.640
Thank you.

01:34.640 --> 01:35.640
Thank you.

01:35.640 --> 01:36.640
Thank you.

01:36.640 --> 01:37.640
Thank you.

01:37.640 --> 01:38.640
Thank you.

01:38.640 --> 01:39.640
Thank you.

01:39.640 --> 01:40.640
Thank you.

01:40.640 --> 01:41.640
Thank you.

01:41.640 --> 01:42.640
Thank you.

01:42.640 --> 01:43.640
Thank you.

01:43.640 --> 01:44.640
Thank you.

01:44.640 --> 01:45.640
Thank you.

01:45.640 --> 01:46.640
Thank you.

01:46.640 --> 01:47.640
Thank you.

01:47.640 --> 01:48.640
Thank you.

01:48.640 --> 01:49.640
Thank you.

01:49.640 --> 01:50.640
Thank you.

01:50.640 --> 01:51.640
Thank you.

01:51.640 --> 01:52.640
Thank you.

01:52.640 --> 01:53.640
Thank you.

01:53.640 --> 01:54.640
Thank you.

01:54.640 --> 01:55.640
Thank you.

01:55.640 --> 01:56.640
Thank you.

01:56.640 --> 01:57.640
Thank you.

01:57.640 --> 01:58.640
Thank you.

01:58.640 --> 01:59.640
Thank you.

01:59.640 --> 02:00.640
Thank you.

02:00.640 --> 02:01.640
Thank you.

02:01.640 --> 02:02.640
Thank you.

02:02.640 --> 02:03.640
Thank you.

02:03.640 --> 02:04.640
Thank you.

02:04.640 --> 02:05.640
Thank you.

02:05.640 --> 02:06.640
Thank you.

02:06.640 --> 02:07.640
Thank you.

02:07.640 --> 02:08.640
Thank you.

02:08.640 --> 02:09.640
Thank you.

02:09.640 --> 02:10.640
Thank you.

02:10.640 --> 02:11.640
Thank you.

02:11.640 --> 02:12.640
Thank you.

02:12.640 --> 02:13.640
Thank you.

02:13.640 --> 02:14.640
Thank you.

02:14.640 --> 02:15.640
Thank you.

02:15.640 --> 02:16.640
Thank you.

02:16.640 --> 02:17.640
Thank you.

02:17.640 --> 02:18.640
Thank you.

02:18.640 --> 02:19.640
Thank you.

02:19.640 --> 02:20.640
Thank you.

02:20.640 --> 02:21.640
Thank you.

02:21.640 --> 02:22.640
Thank you.

02:22.640 --> 02:23.640
Thank you.

02:23.640 --> 02:24.640
Thank you.

02:24.640 --> 02:25.640
Thank you.

02:25.640 --> 02:26.640
Thank you.

02:26.640 --> 02:27.640
Thank you.

02:27.640 --> 02:28.640
Thank you.

02:28.640 --> 02:29.640
Thank you.

02:29.640 --> 02:30.640
Thank you.

02:30.640 --> 02:31.640
Thank you.

02:31.640 --> 02:32.640
Thank you.

02:32.640 --> 02:33.640
Thank you.

02:33.640 --> 02:34.640
Thank you.

02:34.640 --> 02:35.640
Thank you.

02:35.640 --> 02:36.640
Thank you.

02:36.640 --> 02:37.640
Thank you.

02:37.640 --> 02:38.640
Thank you.

02:38.640 --> 02:39.640
Thank you.

02:39.640 --> 02:40.640
Thank you.

02:40.640 --> 02:41.640
Thank you.

02:41.640 --> 02:42.640
Thank you.

02:42.640 --> 02:43.640
Thank you.

02:43.640 --> 02:44.640
Thank you.

02:44.640 --> 02:45.640
Thank you.

02:46.640 --> 02:47.640
Thanks, woes.

02:47.640 --> 02:54.640
That includes code scanning, reviewing to ensure compliance with their license obligations,

02:54.640 --> 03:00.640
DevOps integration to build compliance tools into their development process.

03:00.640 --> 03:06.640
We also provide open chain certification processes and services.

03:06.640 --> 03:12.640
And recently we've also provided training to, I have to say this is quite vaguely,

03:12.640 --> 03:16.040
developers of a large proprietary software product

03:16.040 --> 03:19.640
which consumes a lot of open source products.

03:19.640 --> 03:21.640
That's as specific as I can be.

03:23.640 --> 03:28.040
So, let's get into the mind of an open source developer.

03:28.040 --> 03:30.640
The quick and easy questions,

03:30.640 --> 03:33.640
you likely know the answer to,

03:33.640 --> 03:36.640
but the answer may be different for each of you.

03:36.640 --> 03:40.640
Why do developers create open source software?

03:40.640 --> 03:41.640
Why would you do that?

03:41.640 --> 03:46.640
There's many reasons beyond because I can

03:46.640 --> 03:50.640
and because I want to and why not.

03:50.640 --> 03:54.640
There's the traditional one which is to scratch an itch

03:54.640 --> 03:57.640
or to solve a problem of some kind that that developer has.

03:57.640 --> 03:59.640
There's personal development,

03:59.640 --> 04:02.640
maybe you want to learn a new toolkit, a framework,

04:02.640 --> 04:04.640
learn a new language or something.

04:04.640 --> 04:07.640
Maybe you want to build a portfolio,

04:07.640 --> 04:10.640
have some contributions on your GitHub profile

04:10.640 --> 04:13.640
that everyone looks at or maybe you want to announce a project

04:13.640 --> 04:16.640
on LinkedIn if you're looking for a job or something.

04:16.640 --> 04:21.640
Some people do it just for a sense of community and contribution.

04:21.640 --> 04:23.640
They just want to give back,

04:23.640 --> 04:31.640
helping others with new software to increase the corpus of software

04:31.640 --> 04:32.640
that's out there in the community.

04:32.640 --> 04:35.640
Maybe it's your job, maybe you've just been told

04:35.640 --> 04:37.640
to work on some open source software.

04:37.640 --> 04:38.640
That happens as well.

04:38.640 --> 04:42.640
There's a number of reasons why people contribute

04:42.640 --> 04:44.640
or create new software.

04:44.640 --> 04:46.640
That's all very reasonable.

04:46.640 --> 04:53.640
But why do people and organizations contribute to existing software?

04:53.640 --> 04:55.640
I mentioned why people create them.

04:55.640 --> 04:57.640
What about why people contribute?

04:57.640 --> 04:58.640
Maybe they want to improve it.

04:58.640 --> 05:01.640
Maybe they want to fix some bugs, add a feature

05:01.640 --> 05:04.640
or change functionality in the software.

05:04.640 --> 05:06.640
Maybe they also want career advancement

05:06.640 --> 05:10.640
and they fear that adding a few contributions on GitHub

05:10.640 --> 05:12.640
will help them in their career.

05:12.640 --> 05:16.640
Maybe community and networking is what they desire.

05:16.640 --> 05:20.640
Open source projects bring people together from around the world

05:20.640 --> 05:21.640
with shared interests.

05:21.640 --> 05:24.640
That's pretty obvious given you're at FOSDEM

05:24.640 --> 05:25.640
and if you look around you,

05:25.640 --> 05:27.640
there's a lot of people with shared interests around you.

05:27.640 --> 05:29.640
Some people want to give back,

05:29.640 --> 05:30.640
maybe it's a sense of altruism.

05:30.640 --> 05:34.640
There's a lot of reasons why people contribute to open source software.

05:36.640 --> 05:38.640
That's why people contribute.

05:38.640 --> 05:45.640
What about some of the ways in which they do that contribution?

05:45.640 --> 05:46.640
How do they contribute?

05:46.640 --> 05:50.640
There's probably amongst those items listed there

05:50.640 --> 05:54.640
some of the activities that you may have taken upon,

05:54.640 --> 05:57.640
whether it's translating software into your language

05:57.640 --> 06:00.640
or maybe you've filed bugs

06:00.640 --> 06:03.640
or maybe you've handed out stickers and events.

06:03.640 --> 06:09.640
There's a lot of ways in which you can contribute to an open source project

06:09.640 --> 06:12.640
depending upon your skill set and your desires.

06:12.640 --> 06:14.640
But one of the things that's often missing from these

06:14.640 --> 06:18.640
often cited lists of ways you can contribute

06:18.640 --> 06:20.640
is actually license compliance.

06:20.640 --> 06:22.640
Doesn't sound super interesting.

06:22.640 --> 06:25.640
Why would I want to do that?

06:25.640 --> 06:31.640
Well, trust is a big thing in open source software.

06:31.640 --> 06:35.640
Some of the keep contributors and users coming back

06:35.640 --> 06:40.640
is confidence in your project and a sense of trust in your project.

06:40.640 --> 06:45.640
At the basic level, they trust that the project is sustainable.

06:45.640 --> 06:50.640
Users might trust that the project is going to update regularly

06:50.640 --> 06:53.640
and put out timely releases when needed.

06:53.640 --> 06:57.640
Contributors to those projects will trust that their translations

06:57.640 --> 07:00.640
get merged in a timely fashion.

07:00.640 --> 07:03.640
That code gets reviewed in a timely fashion

07:03.640 --> 07:06.640
and merged into the project and eventually released

07:06.640 --> 07:09.640
and that their bugs get attention.

07:09.640 --> 07:14.640
And consumers of the project, maybe not direct consumers,

07:14.640 --> 07:17.640
maybe they're consuming your project inside their project.

07:17.640 --> 07:21.640
Maybe you built a library and they're using your library.

07:21.640 --> 07:27.640
They may want to trust that you're on top of security issues.

07:27.640 --> 07:32.640
And all of them likely trust, perhaps subconsciously,

07:32.640 --> 07:37.640
that the project is complying with license requirements.

07:37.640 --> 07:40.640
A lot of the time people don't even think about it.

07:40.640 --> 07:44.640
It may, of course, be the case that your favourite project

07:44.640 --> 07:48.640
is fully compliant with all of their license obligations.

07:48.640 --> 07:50.640
Do you know that for sure, though?

07:50.640 --> 07:53.640
Do you really know that for sure?

07:53.640 --> 07:57.640
What about all the dependencies that that project depends upon?

07:57.640 --> 07:59.640
Are you certain?

07:59.640 --> 08:03.640
When did you last check to make sure?

08:03.640 --> 08:07.640
Can you prove that you're complying with all the licenses

08:07.640 --> 08:09.640
if someone did ask you?

08:09.640 --> 08:12.640
Indeed, consider what you would say right now

08:12.640 --> 08:14.640
if someone asked you,

08:14.640 --> 08:16.640
does your project comply with all the licenses

08:16.640 --> 08:18.640
under which the software is distributed?

08:18.640 --> 08:22.640
In my experience, the majority of traditional open source projects

08:22.640 --> 08:25.640
are not written by lawyers.

08:25.640 --> 08:30.640
And also, the project team may not have access to legal advice,

08:30.640 --> 08:32.640
not directly, especially smaller applications

08:32.640 --> 08:35.640
or libraries created as a side project

08:35.640 --> 08:37.640
or something you do in the evening.

08:37.640 --> 08:40.640
But in order to improve trust in the software supply chain,

08:40.640 --> 08:43.640
it's something we should consider,

08:43.640 --> 08:47.640
just like all the other activities I listed on one of the previous slides.

08:47.640 --> 08:52.640
So let's think about the community's role in this.

08:52.640 --> 08:58.640
Users and contributors are already very familiar with these buttons in GitHub.

08:58.640 --> 09:03.640
They'll often use them without prejudice when you have bugs

09:03.640 --> 09:08.640
or when they require a new feature or when you've moved their cheese.

09:08.640 --> 09:12.640
And from a practical perspective,

09:12.640 --> 09:16.640
the project should accept license issues

09:16.640 --> 09:18.640
just like they accept any other issue.

09:18.640 --> 09:21.640
It's just like any other bug, right?

09:21.640 --> 09:25.640
And users and contributors should be empowered and encouraged

09:25.640 --> 09:29.640
to hit that button when there's a license issue.

09:29.640 --> 09:33.640
But we should also assume good intent.

09:33.640 --> 09:36.640
The default posture when a license issue is raised

09:36.640 --> 09:40.640
is not quick, let's sharpen all the pitchforks

09:40.640 --> 09:44.640
and start a thread on Twitter and Reddit and hack and use.

09:44.640 --> 09:49.640
It's engage in open conversation on the issue.

09:49.640 --> 09:54.640
There are a few barriers to community engagement with these compliance issues.

09:54.640 --> 09:58.640
There's a lack of awareness and understanding of licenses in general.

09:58.640 --> 10:03.640
Many contributors may not be fully aware of the importance of license compliance.

10:03.640 --> 10:08.640
That can be addressed with a bit of education, better documentation.

10:08.640 --> 10:10.640
It's a complex topic.

10:10.640 --> 10:15.640
Interrelationship between different types of potentially incompatible licenses

10:15.640 --> 10:18.640
is a hard thing to understand sometimes.

10:18.640 --> 10:23.640
So to make it easy, we should simplify the process

10:23.640 --> 10:26.640
of enabling them to report issues.

10:26.640 --> 10:29.640
Automate regular scanning of your project.

10:29.640 --> 10:32.640
There are tools I'll mention in a minute that can scan your project

10:32.640 --> 10:36.640
and highlight when there are license compliance problems.

10:36.640 --> 10:40.640
You can also integrate that into the whole process

10:40.640 --> 10:43.640
so that every time someone submits a pull request,

10:43.640 --> 10:47.640
a scan is done to ensure that not only the code is tidy

10:47.640 --> 10:53.640
and the tests run, but the tests should include license compliance as well.

10:53.640 --> 10:57.640
One of the other barriers is fear of legal repercussions.

10:57.640 --> 10:59.640
People don't want to press the issue button

10:59.640 --> 11:02.640
because they worry that if they talk about the problem,

11:02.640 --> 11:05.640
then the lawyers are going to come knocking on their door

11:05.640 --> 11:08.640
and it's all going to be blown up out of proportion.

11:08.640 --> 11:12.640
But what we should do is highlight that we're open

11:12.640 --> 11:14.640
to talking about these compliance issues.

11:14.640 --> 11:19.640
Be welcoming when someone wants to report an issue

11:19.640 --> 11:24.640
and foster a community that's full of open communication and dialogue

11:24.640 --> 11:29.640
rather than won't fix that kind of thing.

11:29.640 --> 11:31.640
So where do we start?

11:31.640 --> 11:35.640
Well, the Linux Foundation have a project called Open Chain.

11:35.640 --> 11:36.640
It's a good place to start.

11:36.640 --> 11:39.640
It's full of policies and procedures, loads of documentation.

11:39.640 --> 11:41.640
It's all open source.

11:41.640 --> 11:43.640
I've put a picture of the website up there.

11:43.640 --> 11:46.640
The URL is openchainproject.org.

11:46.640 --> 11:50.640
If you Google for Open Chain, you find some nonsense blockchain stuff.

11:50.640 --> 11:54.640
So this is the actual website.

11:54.640 --> 11:55.640
And it's all on GitHub as well.

11:55.640 --> 11:58.640
So there's repository in there with loads of documents

11:58.640 --> 12:03.640
that you could get started with to understand this whole compliance process.

12:03.640 --> 12:07.640
There's also a ton of tools available to help you.

12:07.640 --> 12:12.640
At the top end, there's the rather spendy black duck.

12:12.640 --> 12:18.640
Then there's open source tools like SIFT by Ankor and OSS Review Toolkit.

12:18.640 --> 12:23.640
And these allow you to build a software bill of materials

12:23.640 --> 12:27.640
so you understand what all the bits and bytes are inside your project

12:27.640 --> 12:31.640
and they can scan your repository,

12:31.640 --> 12:35.640
they can scan docker containers that contain your software

12:35.640 --> 12:36.640
and all that kind of good stuff.

12:36.640 --> 12:38.640
These tools don't solve everything.

12:38.640 --> 12:43.640
They're part of the story, but they're very useful for automating that scan.

12:43.640 --> 12:51.640
So you're aware of stuff that may be non-compliant ahead of time.

12:51.640 --> 12:58.640
We should, as I said, engage contributors in the compliance process.

12:58.640 --> 13:04.640
Ignoring a license violation and hoping it will go away is not a solution.

13:04.640 --> 13:10.640
We should educate and raise awareness that we're open to this kind of dialogue.

13:10.640 --> 13:15.640
Educate the rest of the team so they know that if someone files a licensing issue,

13:15.640 --> 13:18.640
don't panic, don't just delete the GitHub repository.

13:18.640 --> 13:20.640
It's not necessarily caused a panic.

13:20.640 --> 13:27.640
People make mistakes with their licenses and these things are solvable.

13:27.640 --> 13:29.640
And also celebrate the successes.

13:29.640 --> 13:34.640
So when you do solve a problem, don't bury it in a commit somewhere

13:34.640 --> 13:36.640
that fixes the license.

13:36.640 --> 13:40.640
Celebrate it like we weren't compliant and now we are.

13:40.640 --> 13:41.640
That's great.

13:41.640 --> 13:46.640
Just as you would celebrate the release of your software, celebrate being compliant.

13:46.640 --> 13:50.640
That's a good thing.

13:50.640 --> 13:54.640
I've mentioned we should establish clear policies and procedures

13:54.640 --> 14:01.640
so people know what their expectations are when they file an issue to do with compliance.

14:01.640 --> 14:04.640
And also promote a blame-free environment.

14:04.640 --> 14:09.640
Don't go pointing the finger and sharpening the pitchfork to try and find out,

14:09.640 --> 14:13.640
well, who committed this thing and who, you know, go through the get blame history

14:13.640 --> 14:17.640
and try and figure out who it was and chase them down.

14:17.640 --> 14:18.640
That doesn't help.

14:18.640 --> 14:22.640
Let's solve the problem and understand why it happened

14:22.640 --> 14:24.640
and try and prevent it happening in the future.

14:24.640 --> 14:26.640
Maybe assign responsibility.

14:26.640 --> 14:29.640
Maybe your team is large enough that you've got enough people

14:29.640 --> 14:34.640
that someone could be responsible for monitoring license compliance.

14:34.640 --> 14:38.640
I get that a lot of open source projects are, you know, that XKCD comic

14:38.640 --> 14:41.640
and the little balancing thing in the bottom right-hand corner.

14:41.640 --> 14:43.640
There's a lot of open source projects like that.

14:43.640 --> 14:45.640
But if you do have a significant team,

14:45.640 --> 14:54.640
maybe give some responsibility to a community member to keep an eye on this kind of stuff.

14:54.640 --> 15:02.640
So some takeaways from my little semi-rant.

15:02.640 --> 15:04.640
Integrate some compliance tools early on.

15:04.640 --> 15:07.640
Start scanning your projects.

15:07.640 --> 15:10.640
Make sure that you're using the correct licenses in the correct ways.

15:10.640 --> 15:13.640
Maybe you have a lot of dependencies.

15:13.640 --> 15:19.640
It's quite fashionable these days to use software from NPM and Cargo and Pipeye

15:19.640 --> 15:22.640
and, you know, are they all compliant as well?

15:22.640 --> 15:25.640
Are you consuming software that is also compliant?

15:25.640 --> 15:27.640
Leverage automation.

15:27.640 --> 15:32.640
You absolutely should have tools that are scanning your repositories on a regular basis.

15:32.640 --> 15:34.640
And this kind of stuff is pretty easy to do.

15:34.640 --> 15:37.640
Many of the providers that I've mentioned,

15:37.640 --> 15:41.640
you can just enable a GitHub action on your repository.

15:41.640 --> 15:44.640
Very quick and easy to do, very straightforward,

15:44.640 --> 15:50.640
and gives you a bit of peace of mind that you're scanning on a regular basis.

15:50.640 --> 15:53.640
And integrate compliance into the review process.

15:53.640 --> 15:56.640
So when someone contributes a new code,

15:56.640 --> 15:59.640
you can scan that before it gets merged,

15:59.640 --> 16:04.640
rather than two years down the road when that contributor has left the project.

16:04.640 --> 16:06.640
And engage with the community.

16:06.640 --> 16:13.640
Don't be afraid to have conversations in the open, in Matrix or IRC or wherever it is.

16:13.640 --> 16:15.640
You have those conversations.

16:15.640 --> 16:19.640
Don't feel the need to hide those licensing conversations away

16:19.640 --> 16:23.640
because you're scared of the lawyers coming knocking on your door.

16:27.640 --> 16:29.640
Switching tack slightly.

16:29.640 --> 16:32.640
I wanted to mention another project.

16:33.640 --> 16:38.640
We're bootstrapping this at Orcro, and it's a project called Corinthian.

16:38.640 --> 16:46.640
One of the challenges of open source businesses is in terms of mergers and acquisitions.

16:46.640 --> 16:50.640
Company acquiring another company asks the other company,

16:50.640 --> 16:53.640
do you have any open source software?

16:53.640 --> 16:56.640
They say, I don't know, somewhere maybe, I don't know.

16:56.640 --> 16:58.640
And in order it may be done.

16:58.640 --> 17:03.640
But the problem is the lawyers who are very smart about mergers and acquisitions

17:03.640 --> 17:08.640
are not necessarily super smart about open source software and licensing.

17:08.640 --> 17:13.640
And this is a bit of a gap in the market for lawyers performing these activities.

17:13.640 --> 17:20.640
So we started this project to collate process documentation for lawyers

17:20.640 --> 17:23.640
to help them understand the open source community,

17:23.640 --> 17:27.640
the open source licenses, how they fit together, how they interact.

17:27.640 --> 17:31.640
It's all open source, they will all be on GitHub.

17:31.640 --> 17:35.640
That domain just points to a static page at the moment, but we're building it out.

17:35.640 --> 17:42.640
I sincerely apologise for the AI generated Corinthian logo over there.

17:42.640 --> 17:46.640
It was done in a hurry. Patches welcome.

17:48.640 --> 17:51.640
And finally I wanted to highlight another talk this weekend

17:51.640 --> 17:57.640
given by Andrew Katz, Andrew is a well respected and knowledgeable open source lawyer

17:57.640 --> 18:00.640
with many years experience in the field.

18:00.640 --> 18:03.640
He's also an all round good egg.

18:03.640 --> 18:07.640
He's the all gross CEO, so he's my boss.

18:07.640 --> 18:10.640
So please go to his talk tomorrow.

18:12.640 --> 18:16.640
Or watch it online later on if the room is full.

18:16.640 --> 18:19.640
I hope the information I provided has been interesting.

18:19.640 --> 18:22.640
If you have any questions, again, I'm not a lawyer.

18:22.640 --> 18:25.640
This is not legal advice. It's just my opinion.

18:25.640 --> 18:27.640
Thank you for this.

18:42.640 --> 18:44.640
So quick question.

18:44.640 --> 18:51.640
Is there any support that a company or organisation that can support

18:51.640 --> 18:57.640
humanitarian organisations or other organisations in being compliant?

18:57.640 --> 19:00.640
Like kind of consultancy or support or ad hoc or whatever.

19:00.640 --> 19:05.640
Or guiding or come, let's say come a week to our organisation,

19:05.640 --> 19:08.640
help us set things up in the right direction and just, you know.

19:08.640 --> 19:11.640
Yeah, there are a few organisations that can assist in this kind of stuff

19:11.640 --> 19:15.640
like Software Freedom Law Centre,

19:15.640 --> 19:19.640
Software in the Public Interest,

19:19.640 --> 19:22.640
OSC, what is it, Open Source Something.

19:22.640 --> 19:24.640
It's also a different channel.

19:24.640 --> 19:29.640
I will put the notes, the answers to that question in the slide

19:29.640 --> 19:32.640
and upload it to the FOSDEN website.

19:32.640 --> 19:41.640
So, fun talk.

19:41.640 --> 19:47.640
Right now there is sort of a lot more pressure around knowing what's in your

19:47.640 --> 19:50.640
software because the security folks have suddenly realised,

19:50.640 --> 19:52.640
gosh, we should worry about that.

19:52.640 --> 19:55.640
Is there a way that we can sort of align efforts from the compliance folks

19:55.640 --> 19:57.640
with the security folks?

19:57.640 --> 20:01.640
It turns out that some of those tools that do security scanning

20:01.640 --> 20:03.640
also do license scanning as well.

20:03.640 --> 20:06.640
So there is actually quite an overlap there and some of the tools

20:06.640 --> 20:09.640
can like hit both buttons for you.

20:09.640 --> 20:12.640
Things like SIFT that does the S-bomb,

20:12.640 --> 20:16.640
ANCOR have other tools that can do the security scanning as well.

20:16.640 --> 20:19.640
So yeah, there are some tools that can do that, absolutely.

20:32.640 --> 20:38.640
So more of a shout out for a project and tool than a question.

20:38.640 --> 20:41.640
Reuse.software, that's the URL.

20:41.640 --> 20:45.640
So it's a Python tool reuse and it's also a spec around how to put

20:45.640 --> 20:47.640
license information in your project.

20:47.640 --> 20:48.640
Nice.

20:48.640 --> 20:51.640
You can't really comply with SIFT, the dependencies you use

20:51.640 --> 20:53.640
haven't actually told you what their license is.

20:53.640 --> 20:55.640
So that's for everyone.

20:55.640 --> 20:59.640
Make clear what license the software is released under.

20:59.640 --> 21:00.640
Absolutely.

21:00.640 --> 21:02.640
So Reuse.software has good tools for the whole video.

21:02.640 --> 21:03.640
Excellent.

21:03.640 --> 21:04.640
Thank you for that.

21:09.640 --> 21:12.640
You have four minutes of your lives back.

21:12.640 --> 21:13.640
Thank you very much.

21:13.640 --> 21:14.640
Thanks very much.

