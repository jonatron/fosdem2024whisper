WEBVTT

00:00.000 --> 00:05.000
Okay, we can start.

00:05.000 --> 00:08.000
Hi everyone.

00:08.000 --> 00:14.000
Today I'm here to present Flutter in Embedded System, precisely Linux Embedded.

00:14.000 --> 00:17.000
Quick presentation of me.

00:17.000 --> 00:18.000
I'm AndrÃ© Rikki.

00:18.000 --> 00:24.000
I'm from Italy and I work at Amarulla Solution as Embedded Linux Consultant and Developer.

00:24.000 --> 00:36.000
My background is mostly C++ on both console and UI application using different frameworks and also recently Flutter.

00:36.000 --> 00:42.000
In this talk I'm going to present the Flutter framework from a developer point of view.

00:42.000 --> 00:50.000
So we will not go deeper in how the framework is used in the Embedded and Outworks.

00:51.000 --> 00:57.000
Outintegrate with the most common build systems such as Yokto and Buildroot.

00:57.000 --> 01:05.000
And if there is enough time I'll show a quick video of a commercial product that we developed with one of our customers.

01:07.000 --> 01:09.000
So, what is Flutter?

01:09.000 --> 01:15.000
Flutter is a UI framework developed by Google, was first released in 2015 for Android,

01:15.000 --> 01:21.000
and then was later ported to iOS, Windows, Linux and web application.

01:21.000 --> 01:30.000
The idea behind this framework is to have a single framework and codebase to create a good-looking UI application,

01:30.000 --> 01:34.000
natively complied and multi-platform.

01:34.000 --> 01:39.000
And it uses Dart as programming language and we will talk about that later.

01:40.000 --> 01:45.000
So, let's go through the advantages of Flutter.

01:45.000 --> 01:51.000
First of all, Flutter is fast because it compiles natively for ARM and Intel machine.

01:51.000 --> 01:57.000
You can expect great performance both at startup and at runtime.

01:57.000 --> 02:04.000
Also, the idea was to help the developers to achieve 60 frames per second.

02:04.000 --> 02:10.000
So, you can expect fluid and responsive UI on any kind of devices.

02:15.000 --> 02:17.000
Now, let's talk about Dart.

02:17.000 --> 02:21.000
Dart is the programming language used by Flutter.

02:21.000 --> 02:32.000
Being modern and designed precisely for UI, it comes with multiple advantages and tools that are really helpful when dealing with UI applications.

02:32.000 --> 02:40.000
First of all, is that the language is completely asynchronous, so it's quite impossible to have the application to freeze.

02:40.000 --> 02:48.000
By contrast, for example, with C++, I saw in my experience multiple times where, for example, in the UI loop,

02:48.000 --> 02:54.000
people were opening files or doing some blocking operations and performance were really bad on that.

02:54.000 --> 03:06.000
In this case, it's impossible and the architecture of Dart abstracts the complexity of a multi-threaded typical shell memory multi-threading.

03:06.000 --> 03:09.000
So, this is really, really important in my opinion.

03:09.000 --> 03:20.000
Another important point is that the language is completely no safe, so it's practically impossible to have a segmentation fold in Dart application.

03:21.000 --> 03:30.000
This is another really important point because the UI application is what the final user sees, so it's important to have it always responsive and alive.

03:30.000 --> 03:35.000
Finally, all the error management is handled through exception.

03:35.000 --> 03:44.000
So, even if there are some errors during the execution of the application, simply error exception are thrown.

03:44.000 --> 03:48.000
And even if there are not catch, the application keeps running.

03:48.000 --> 03:52.000
And we will see an example in a future slide.

03:52.000 --> 03:57.000
And all of that in an easy to learn and familiar syntax language.

03:57.000 --> 04:05.000
I came, as I said, from a C++ experience and working with Dart was really, really smooth and really easy to learn.

04:06.000 --> 04:11.000
So, Flutter is fast, Dart is great, but that's not all.

04:11.000 --> 04:14.000
Flutter and the entire framework is also productive.

04:14.000 --> 04:21.000
And with that, I mean that allow development and maintenance of application, which really is.

04:21.000 --> 04:25.000
One of the most important key is Outreload and OutreStart.

04:25.000 --> 04:32.000
Outreload is the ability to apply changes without recompiling and restart the application.

04:32.000 --> 04:39.000
As you can see in the GIF, by simply changing the code from a dark theme to a light theme,

04:39.000 --> 04:45.000
without recompiling, the changes are directly applied in the running application.

04:45.000 --> 04:48.000
This is really important.

04:48.000 --> 04:56.000
We reduce a lot the time of development and maintenance and also the stress on the developer.

04:56.000 --> 05:01.000
Also, being modern, it comes with a set of useful tools such as Stotics Analysis,

05:01.000 --> 05:07.000
Widget Introspection and also debugging and logging and much, much more.

05:15.000 --> 05:18.000
Finally, Flutter Extract is flexible.

05:18.000 --> 05:23.000
As I said, it's meant to work on a multi-platform.

05:23.000 --> 05:27.000
And you can expect the same look and feel of the application on any screen.

05:27.000 --> 05:31.000
This means that from a more commercial point of view,

05:31.000 --> 05:36.000
if you need to deploy application on embedded and also on mobile and Windows,

05:36.000 --> 05:39.000
you can expect the same look and feel.

05:39.000 --> 05:43.000
And this is really important from the final user point of view.

05:43.000 --> 05:49.000
And also, the out-of-time compilation and natively compilation of the code

05:49.000 --> 05:54.000
allow for really fast and great performance on any platform.

05:57.000 --> 06:00.000
All of that in a single programming language, of course.

06:02.000 --> 06:06.000
This is my typical setup.

06:06.000 --> 06:11.000
I use Visual Studio Code with the official Flutter extension

06:11.000 --> 06:15.000
and on the right, it's the running application.

06:15.000 --> 06:20.000
As you can see on the top left, there are the typical running tools

06:20.000 --> 06:25.000
and debugging such as Start, Stop and Step Into, but also the Autrestart.

06:25.000 --> 06:29.000
Autreload is embedded in the Flutter extension.

06:29.000 --> 06:34.000
So if I apply any changes in the code and save the file,

06:34.000 --> 06:38.000
the changes are automatically reloaded in the page.

06:38.000 --> 06:42.000
And in the bottom, there is the Debug console.

06:42.000 --> 06:48.000
As you can see, an exception is thrown because the application tries to save a file when starting.

06:48.000 --> 06:52.000
But even if there are some errors, the application is still running

06:52.000 --> 06:54.000
and works without any problem.

06:54.000 --> 06:58.000
In my opinion, this setup is really important.

06:58.000 --> 07:01.000
It's really easy to use. It's really productive.

07:01.000 --> 07:05.000
And I think that from the developer point of view,

07:05.000 --> 07:11.000
allow the maintenance and development to be really, really easy and less stressful.

07:13.000 --> 07:21.000
I'm happy to see that Flutter is becoming more and more popular in the embedded system,

07:21.000 --> 07:22.000
precisely Linux.

07:22.000 --> 07:26.000
Yesterday I saw a different talk regarding this topic.

07:26.000 --> 07:33.000
And it's important because the community is really active and huge

07:33.000 --> 07:35.000
and it's becoming more popular on Linux.

07:35.000 --> 07:40.000
So if you have any difficulties or if you are facing any problems,

07:40.000 --> 07:44.000
most of the time you will find a solution online.

07:44.000 --> 07:47.000
Then there is a huge list of packages.

07:47.000 --> 07:55.000
There is an online repository where free packages are hosted and developed by the community.

07:55.000 --> 07:57.000
They come in different types.

07:57.000 --> 08:03.000
I use the packages to visualize, for example, a lot of animation or SVG file,

08:03.000 --> 08:11.000
but there are also packages that are more into the code such as MQTT communication or file parsing.

08:11.000 --> 08:16.000
Flutter is actually developed and updated.

08:16.000 --> 08:24.000
In the last year, I had to update the Flutter version both on my laptop and on the target multiple times.

08:24.000 --> 08:30.000
So Google and the community keeps updating the framework and improving security

08:30.000 --> 08:32.000
and adding new features constantly.

08:32.000 --> 08:38.000
Finally, it is used by big tech companies, first of all Google, the creator,

08:38.000 --> 08:40.000
but also BMW and Toyota.

08:40.000 --> 08:51.000
And those companies keep the project alive contributing because Flutter is completely free and open source.

08:51.000 --> 08:58.000
It goes on a BSD3 license so you can use it without any troubles.

09:02.000 --> 09:10.000
Now, let's do a quick comparison with the most famous UI framework for embedded Linux.

09:10.000 --> 09:12.000
First of all, a VGL.

09:12.000 --> 09:15.000
The first point for me is the most important one.

09:15.000 --> 09:16.000
C is not dark.

09:16.000 --> 09:24.000
C is a really powerful language, but when it comes to UI application, it's not so easy to use,

09:24.000 --> 09:26.000
and it's really easy to mess things up.

09:26.000 --> 09:36.000
Instead, Dart is designed to work with, for UI application, and we saw all the advantages that the language come with.

09:36.000 --> 09:42.000
Also, autoload and autrastart, there is no way to achieve that in LVGL.

09:42.000 --> 09:47.000
Of course, you have to rebuild and recompile and redeploy the application every time.

09:47.000 --> 09:51.000
Instead, Flutter has this amazing feature.

09:51.000 --> 10:02.000
Also, it has more platform supported because LVGL can only run on desktop or embedded, and Flutter can also run on mobile.

10:02.000 --> 10:04.000
There are more packages available.

10:04.000 --> 10:09.000
Let's call it, also call it their Libs, as we saw in the previous slide.

10:09.000 --> 10:13.000
And of course, Flutter is a bigger community behind it.

10:13.000 --> 10:19.000
Finally, using Flutter is much, much easier to build the application and publish.

10:19.000 --> 10:25.000
We've seen a later slide, how to integrate the Flutter application inside the Yocto,

10:25.000 --> 10:30.000
and you don't have to mess with the build argument.

10:30.000 --> 10:34.000
It's all handled by the framework and the Yocto project.

10:34.000 --> 10:41.000
Instead, with LVGL, if you need to cross-compile, it can be a bit tricky.

10:41.000 --> 10:44.000
Then, Flutter versus Qt.

10:44.000 --> 10:47.000
C++ and QML versus Dart.

10:47.000 --> 10:53.000
C++ is a step up against C, but still can be quite difficult.

10:53.000 --> 11:01.000
I saw multiple times Qt application having a really bad performer issue because C++ was not optimized.

11:01.000 --> 11:10.000
And QML is designed for UI application like Dart, but first of all, it's an interpreted language.

11:10.000 --> 11:15.000
So if you start doing any kind of logic inside QML, the application will be crap.

11:15.000 --> 11:22.000
And I think that Dart is still much better for UI development.

11:22.000 --> 11:25.000
Here again, autreload and autrestart.

11:25.000 --> 11:30.000
It is possible to achieve autrestart and autreload with QML,

11:30.000 --> 11:34.000
but in my experience, I was never able to do that.

11:34.000 --> 11:39.000
Most of the time, QML is strictly connected to C++ for modeling and such,

11:39.000 --> 11:43.000
so you of course need to recompile everything.

11:43.000 --> 11:48.000
Third point, Flutter, as I said, is completely free and upersoos.

11:48.000 --> 11:52.000
Instead, Qt has commercial licensing.

11:52.000 --> 11:59.000
So if you want to use Qt in a commercial product, you probably end up buying a lot of royalty.

11:59.000 --> 12:04.000
And finally, Flutter, I think that it's rapidly improving.

12:04.000 --> 12:10.000
I mean, Qt is improving too, but the release cycle is much slower compared to Flutter,

12:10.000 --> 12:15.000
so I think that this one is also really important.

12:15.000 --> 12:26.000
So we saw a lot of advantages and good points, but it's not everything is perfect.

12:26.000 --> 12:37.000
So in my experience, one of the, let's say, tricky part of Dart is that when working in embedded Linux,

12:37.000 --> 12:43.000
you can expect coming from C or C++ to be able to do anything you want,

12:43.000 --> 12:47.000
for example, accessing the hardware directly from the U application.

12:47.000 --> 12:55.000
For example, in the product that we showcased later, I added to read proximity sensor input

12:55.000 --> 12:59.000
directly from the U application to simply turn on the display.

12:59.000 --> 13:05.000
This one was not possible because Dart doesn't allow to read directly the hardware

13:06.000 --> 13:08.000
to access directly the hardware.

13:08.000 --> 13:17.000
The structure is a bit complex to use, so long story short, I was not able to do that.

13:17.000 --> 13:23.000
But the solution that is foreign function interface, also known as language bindings.

13:23.000 --> 13:30.000
So what is possible is that we can create a C library with a public interface

13:30.000 --> 13:34.000
and then we can call those methods directly from the Dart application.

13:34.000 --> 13:44.000
This is really important because we can solve a lot of the issue related to more complex stuff from the language

13:44.000 --> 13:46.000
by using a C library.

13:46.000 --> 13:54.000
So start up the application, the library is loaded, and then I can call directly the public function.

13:54.000 --> 14:05.000
By doing so, I was able to solve the issue and read the proximity sensor input from my Dart application.

14:09.000 --> 14:13.000
Now, how to integrate Flutter in your project?

14:13.000 --> 14:20.000
Well, build route, there is the Flutter package developed and maintained by my co-worker Adam Daskat.

14:21.000 --> 14:26.000
It has done a great job on this package and is currently maintaining it.

14:26.000 --> 14:32.000
In my experience, I used Yokto for my project, so I'm a bit more into that.

14:32.000 --> 14:37.000
There is the Metaflutter hosted on GitHub that is the, let's say, official Flutter,

14:37.000 --> 14:41.000
is maintained by some guys from Toyota and the community.

14:41.000 --> 14:47.000
Integrating the Flutter inside your operating system is really, really easy.

14:47.000 --> 14:54.000
Just include the layer, add the dependency in your image, and you are pretty done.

14:54.000 --> 15:01.000
The Flutter engine and Flutter Embedder are automatically compiled and added in your system.

15:01.000 --> 15:06.000
If you need to include, obviously, you will need to include your application.

15:06.000 --> 15:14.000
You can use the Flutter Gallery Recypes as reference, pretty straightforward stuff.

15:14.000 --> 15:19.000
You just copy the Recypes, adapt the repository,

15:19.000 --> 15:28.000
and maybe if you want to adapt some build arguments, and then add as a dependency, and it's done.

15:28.000 --> 15:34.000
You don't need to mess up with any related cross-compiling stuff or any of that.

15:34.000 --> 15:43.000
On GitHub, on my page, I have a repo manifest that I've done almost a year ago, hopefully still working.

15:43.000 --> 15:52.000
For a tinkerboard, simply create the Yocto project and download all the layer needed,

15:52.000 --> 15:55.000
and then add the dependency inside the image.

15:55.000 --> 16:00.000
When you compile, you can simply put the result on SD card,

16:00.000 --> 16:04.000
and you will have the Flutter Gallery on your hardware.

16:05.000 --> 16:19.000
Now I'll show a video of the product that we developed with one of our customers.

16:19.000 --> 16:22.000
The device is an intercom device.

16:22.000 --> 16:29.000
It's running a Rockchip processor, so obviously a bit more powerful than the tinkerboard.

16:30.000 --> 16:33.000
This is the intercom device.

16:33.000 --> 16:42.000
It's able to connect to another device on the other side and have video and audio stream.

16:42.000 --> 16:50.000
Under the hood, there is a lot running, but as you can see, the application is still smooth and responsive,

16:50.000 --> 16:53.000
and the performance is really, really good.

16:54.000 --> 16:59.000
This is a custom keyboard that we developed to achieve the design that the customer wanted,

16:59.000 --> 17:08.000
and those are some lotty animations that are running with the package that I included from the Flutter Dev.

17:08.000 --> 17:13.000
The final result, in my opinion, is really good.

17:13.000 --> 17:17.000
We as developers are really happy with the result.

17:17.000 --> 17:21.000
The customer is happy with the result from the commercial point of view,

17:21.000 --> 17:25.000
so that's why I was presenting Flutter today.

17:25.000 --> 17:34.000
So, if you have any more questions, thank you everyone.

17:43.000 --> 17:45.000
Great.

17:45.000 --> 17:52.000
You mentioned this Dart is a custom language, but there's an MQTT library.

17:52.000 --> 17:58.000
How does it work? Do you have to, for each protocol, implement it in Dart again?

17:58.000 --> 18:02.000
So, Dart is not...

18:02.000 --> 18:08.000
The question is if, for example, MQTT is actually...

18:08.000 --> 18:11.000
There is a custom stuff running under the hood.

18:11.000 --> 18:18.000
Not really, because in reality, Dart can be recompiled as C++.

18:18.000 --> 18:22.000
So, simply, Dart, you can use Dart as you...

18:22.000 --> 18:28.000
It's like you are using C++ code, and MQTT actually didn't really look into it,

18:28.000 --> 18:30.000
because I downloaded the package.

18:30.000 --> 18:36.000
It was working flawlessly, so included on running, and I was really, really happy with the result.

18:36.000 --> 18:39.000
So, yeah.

18:39.000 --> 18:47.000
Thank you for the talk. I'd like to know what is the memory footprint with Flutter Engine, I mean, like Flash and ROM.

18:47.000 --> 18:51.000
Okay, the question is the memory footprint of Flutter Engine.

18:51.000 --> 19:01.000
So, let's say that one of the disadvantages of Flutter is that it's a bit more resource-less hungry compared to Qt or LVGL.

19:01.000 --> 19:09.000
I think that the Flutter Engine was like 14, 15 megabytes on the storage,

19:09.000 --> 19:17.000
and on the memory, I didn't run any kind of profiling on the hardware,

19:17.000 --> 19:21.000
but I think that it's comparable to Qt application when running.

19:24.000 --> 19:26.000
Yeah?

19:27.000 --> 19:33.000
Yachto, do you really need a big operating system underneath,

19:33.000 --> 19:38.000
or is it capable of running on, say, a pre-artore or something like this,

19:38.000 --> 19:42.000
a more lean operating system underneath?

19:42.000 --> 19:50.000
Okay, the question is that if Flutter is able to run in less powerful operating systems such as FiatOS.

19:50.000 --> 19:52.000
Oh, perhaps Bare Metal.

19:52.000 --> 19:58.000
Oh, Bare Metal. I don't think so. I think that at the moment it requires a lean operating system.

19:58.000 --> 20:00.000
Okay, thanks.

20:00.000 --> 20:06.000
I have one more question. You said about integration to a distant project based on Yachto.

20:06.000 --> 20:14.000
So, we just integrate a map of Flutter, and you said we do not have to take care about any cross-compilation.

20:14.000 --> 20:22.000
What was the work? Like, my distant project is compiled by GCC, and Flutter, I read that there is a dependency to C1.

20:22.000 --> 20:30.000
So, the question is how is the end-all the layer, and how is the cross-compilation managed?

20:30.000 --> 20:37.000
So, I think that everything is end-all by Yachto, and the meta-layer, the meta-layer.

20:37.000 --> 20:45.000
The meta-flutter is really well done. You can simply download and add the layer dependency in your Yachto project,

20:45.000 --> 20:53.000
and if you include the dependency in your image of the Flutter engine, it will automatically be compiled,

20:53.000 --> 21:01.000
because Yachto takes manage everything about that, so you don't really need to take care of that.

21:02.000 --> 21:04.000
Hi.

21:04.000 --> 21:06.000
Hi.

21:06.000 --> 21:11.000
What about Flutter, Yachto, and IRM32?

21:11.000 --> 21:12.000
Sorry?

21:12.000 --> 21:15.000
IRM32, ashtag, too. Have you had any experience?

21:15.000 --> 21:22.000
Actually, the question is if Flutter is capable to run a 32-bit platform.

21:22.000 --> 21:23.000
IRM32?

21:23.000 --> 21:25.000
No.

21:25.000 --> 21:27.000
Simply no.

21:27.000 --> 21:29.000
Do you have any port, any project on Yachto?

21:29.000 --> 21:32.000
No, at the moment, I don't think so.

21:50.000 --> 21:56.000
Yeah, the question is if I know any company that is moving from Qt to Flutter.

21:56.000 --> 22:05.000
The video before explained one of our customers was mainly using Qt for your application, and now is moving to Flutter.

22:05.000 --> 22:15.000
So I think that because of the open-source licensing, this is really tempting from a core-mesh point of view.

22:15.000 --> 22:17.000
Yeah?

22:17.000 --> 22:23.000
It's a bit of a tilt question, so for the current project, did you do the whole project in Flutter and Dart?

22:23.000 --> 22:24.000
Yeah.

22:24.000 --> 22:25.000
Okay.

22:25.000 --> 22:32.000
In your company, do you also have projects where part of the product is made in C++ or something else?

22:32.000 --> 22:35.000
And how do you, would you integrate that with Flutter?

22:35.000 --> 22:43.000
Okay, the question is if the whole project was made in Flutter or if there are also other applications running with C++.

22:43.000 --> 22:52.000
Well, in this case, the UI is run with Flutter, and there are a set of microservices that are running under hood with running C++.

22:52.000 --> 23:09.000
For example, they take care of the video and audio stream and all of that, and the application communicates with those microservices via NQTT, for example.

23:09.000 --> 23:13.000
Okay, I think there's no more questions, so thank you very much.

23:22.000 --> 23:24.000
Thank you.

