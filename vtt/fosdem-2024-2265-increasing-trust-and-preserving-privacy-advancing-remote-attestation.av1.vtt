WEBVTT

00:00.000 --> 00:11.240
I'm Leonardo and you're not from ARM and I think it's going to be a great end of the

00:11.240 --> 00:14.080
day so looking forward.

00:14.080 --> 00:18.480
Well, hi everyone.

00:18.480 --> 00:31.520
So this is a talk about remote attestation and yeah, because we think remote attestation

00:31.520 --> 00:42.080
is sort of an inflection point and it's becoming increasingly available and used and any new

00:42.080 --> 00:49.480
technology when it comes to the fore you have to consider different aspects, societal

00:49.480 --> 00:51.640
and technical as well.

00:51.640 --> 00:57.160
And yeah, so we're here to talk about this.

00:57.160 --> 00:58.160
Possibly interesting things.

00:58.160 --> 01:01.000
My name is Thomas as Fritz said.

01:01.000 --> 01:03.480
I'm your notes.

01:03.480 --> 01:05.520
The ghost of Hannes is here with us.

01:05.520 --> 01:10.800
He couldn't come to Brussels but he's here in spirit.

01:11.800 --> 01:14.320
Yep, that's us.

01:14.320 --> 01:22.200
Okay, so I wanted to start with this sort of timeline that tries to capture some of the

01:22.200 --> 01:29.600
more relevant events in the history of remote attestation starting from the theoretical

01:29.600 --> 01:37.800
underpinnings with the DDSA paper from the fine people at PARC in 1983.

01:37.800 --> 01:45.360
And you have to wait sort of 15 years before research trickles down into industry.

01:45.360 --> 01:53.000
You have at the end of the century the first industrial consortium that is formed to actually

01:53.000 --> 01:59.920
define what a trusted computing architecture is in terms of behavior, in terms of the interfaces

01:59.920 --> 02:02.000
that it needs to expose.

02:02.000 --> 02:07.160
And so we have TCPA formed which then morphs into TCG, the trusted computing group.

02:07.160 --> 02:13.760
These are the guys that are responsible for producing the TPM12, TPM20 specs, among other

02:13.760 --> 02:15.240
things.

02:15.240 --> 02:21.560
So you have the first decade of the 2000s that is sort of where attestation, because

02:21.560 --> 02:29.880
you know, TPM has a strong attestation story bound to the idea of using the TPM as a route

02:29.880 --> 02:32.080
of trust for reporting.

02:32.080 --> 02:38.280
So you have the first decade that is sort of driven by trusted computing use cases.

02:38.280 --> 02:48.080
Then enter the second decade and you have AMD and Intel SGX cropping up.

02:48.080 --> 02:54.920
And this starts the sort of confidential computing driven decade where you have the first, second

02:54.920 --> 03:01.880
and finally the third iterations of the architectures, which culminate into the SCV, SNP, Intel

03:01.880 --> 03:05.000
TDAX and ARM CCA.

03:05.000 --> 03:09.600
And you have a few other interesting events in that period.

03:09.600 --> 03:16.120
You have the riot paper from the Microsoft guys that sort of articulates fully the ideas

03:16.120 --> 03:19.280
that were in the DDSSA paper.

03:19.280 --> 03:28.840
So 30 and odd year later, you have finally the dice ideas on paper and not just on paper

03:28.840 --> 03:30.480
and code.

03:30.480 --> 03:40.160
And you also have the PSA attestation from ARM, which is sort of an IOT targeting attestation

03:40.160 --> 03:43.920
for IOT platforms like riot as well.

03:43.920 --> 03:55.080
So you have also this area of the users of the, well, this is covered by attestation

03:55.080 --> 03:56.080
primitives.

03:56.080 --> 03:59.640
Where attestation primitives starts to enter.

03:59.640 --> 04:04.240
And then you get into 2020s and so on.

04:04.240 --> 04:12.040
And here is where we sort of see some kind of maturity in terms of the standards that

04:12.040 --> 04:16.080
are actually coming to the fore.

04:16.080 --> 04:22.160
Not just standard in terms of standardized formats, data formats and rats that was mentioned

04:22.160 --> 04:23.160
before.

04:23.160 --> 04:25.280
And that is coming out this year.

04:25.280 --> 04:30.400
Is one example, but also software standards.

04:30.400 --> 04:36.080
So the configure FSTSM ABI that Linux kernel is just upstream is one very, very concrete

04:36.080 --> 04:40.440
example of standardization in that space, in the software space.

04:40.440 --> 04:44.400
So we are here, as I said, we're probably at an inflection point.

04:44.400 --> 04:52.400
The primitive is increasingly available, not just in the configuration computing space,

04:52.400 --> 05:03.840
although CC is a very, very prominent area, right, that drives this.

05:03.840 --> 05:12.680
But also, so you have use cases in IOT, you have use cases in TCP remediation.

05:12.680 --> 05:21.440
Well it's also cropping up in your devices with interesting societal fullbacks.

05:22.440 --> 05:27.960
And so basically the idea is that, like Dave Taylor said, every authentication use case

05:27.960 --> 05:29.600
is also an authentication use case.

05:29.600 --> 05:36.160
For wherever you have the need for authentication, authentication which is effectively a stronger

05:36.160 --> 05:40.640
authentication primitive, stronger identification primitive is something that could be used

05:40.640 --> 05:46.240
to either reinforce or supplant your previous thing.

05:46.240 --> 05:50.840
So that's where we are.

05:50.840 --> 05:57.800
And yeah, so I think when you have, as I said, when you have this new technologies, you need

05:57.800 --> 06:05.920
to look at the bigger picture and try to understand what are the implications that the use of

06:05.920 --> 06:11.280
these technologies have on the wider ecosystem.

06:11.320 --> 06:18.680
One of the interesting things here is the centralization risks that are involved with

06:18.680 --> 06:19.680
attestation.

06:19.680 --> 06:21.680
Another one is privacy.

06:21.680 --> 06:23.720
Well, let's start with centralization.

06:23.720 --> 06:27.600
I think it's here, yeah.

06:27.600 --> 06:33.760
So if you have looked at the RATS architecture picture that was in the talk before, you have

06:33.760 --> 06:39.800
seen that the verifier is at the very center of the image.

06:39.800 --> 06:46.680
And it's not just visual biases, it's really a central architecture upon a choke point

06:46.680 --> 06:55.840
of the architecture where all the message flows are intercepted basically.

06:55.840 --> 07:01.320
And also where the decisions are made because the verifier box has a verifier owner attached

07:01.320 --> 07:02.320
to it.

07:02.320 --> 07:08.360
And the verifier owner is the guy that has the power to decide who talks to who, right,

07:08.400 --> 07:12.840
which attest has the right to talk to a reliant party.

07:12.840 --> 07:16.920
So he's actually gating the information flow.

07:16.920 --> 07:21.560
And therefore he's a very powerful entity.

07:21.560 --> 07:28.600
And the risk here is associated with monopoly, right?

07:28.600 --> 07:36.320
So there are the situations where if you don't look at the carefully at your design and your

07:37.320 --> 07:46.320
architecture, you slip into this potential centralization risks, which we have seen in

07:46.320 --> 07:47.320
a way.

07:47.320 --> 07:51.840
I don't know whether you have followed that.

07:51.840 --> 07:58.160
Environment integrity is something that exploded last summer.

07:58.160 --> 08:00.200
And yeah, it's the cautionary tale.

08:00.200 --> 08:06.280
It's the perfect story of vertical integration where you have basically a monopolist actor

08:06.280 --> 08:09.280
that takes care of the whole thing and basically subversely.

08:09.280 --> 08:15.560
Well, it creates problems.

08:15.560 --> 08:25.720
So the fact here is that centralization can be sort of tackled, we think.

08:25.720 --> 08:41.400
The RAS architecture has a nice, it basically cuts through the, it has sort of, it curves

08:41.400 --> 08:48.400
out the roles in a way that you can actually, across a long tussle boundaries.

08:48.400 --> 08:53.400
So you can actually remodel the roles in a way that, you know, for example, you're moving

08:53.400 --> 08:59.960
the very fine function towards the user, in a user centric way.

08:59.960 --> 09:06.280
But you know, not all use cases are, not for all use cases, it is possible to do this,

09:06.280 --> 09:11.040
this rearrangement of roles because sometimes you would end up in a conflict of interest

09:11.040 --> 09:12.680
situation or something like that.

09:12.680 --> 09:18.680
So maybe one idea is to run the verifier as a neutral entity, a multi stakeholder entity.

09:19.680 --> 09:26.960
Analyze and script, that's what they did with when they democratized the X599 world

09:26.960 --> 09:32.760
by creating this multi stakeholder consortium that runs the less encrypt function, which

09:32.760 --> 09:38.320
is another example of this kind of centralization opportunities.

09:38.320 --> 09:39.320
Yeah.

09:39.320 --> 09:44.400
Privacy is another aspect.

09:44.400 --> 09:48.040
So all the flows, all the message flows go through the verifier, the verifier has to

09:48.040 --> 09:53.080
see the claims to make the ref value matching.

09:53.080 --> 09:55.880
Therefore, you know, it sees everything.

09:55.880 --> 10:01.920
So the potential of abusing this position is great because PII are maybe not in the evidence,

10:01.920 --> 10:06.480
but can be actually indirectly obtained from that.

10:06.480 --> 10:09.480
And so, so this is, this is a risk.

10:09.480 --> 10:12.120
There are things in the, in the, in the toolbox.

10:12.160 --> 10:16.920
There are basically two kinds of ways to deal with this.

10:16.920 --> 10:22.720
One is to inflate your anonymity set, either by cryptographic primitives, group signatures

10:22.720 --> 10:28.000
and stuff like that, or using methods like anonymization in the hardware, like, you know,

10:28.000 --> 10:34.720
creating a batch of devices, like FIDO does, like ARM CCA does, in certain configuration.

10:34.720 --> 10:42.960
The other thing is, well, yeah, is you reduce the, the claim set.

10:42.960 --> 10:49.440
So what you need to expose to the, okay, to the outside world by claim reduction and,

10:49.440 --> 10:54.640
and other patterns like selective disclosure and, etc.

10:54.640 --> 10:58.440
So things are there.

10:58.440 --> 11:00.160
So these were the societal aspects.

11:00.160 --> 11:03.240
This one is instead the technical aspects.

11:03.240 --> 11:11.360
So we have, we have been in a situation where mostly the, the designs were, so we're, we're,

11:11.360 --> 11:18.080
we're transitioning from a situation where the, the solutions were experimental, right?

11:18.080 --> 11:20.640
So we are, we were mostly in research mode.

11:20.640 --> 11:27.480
Now we need to move to a different approach, a more engineering oriented approach and,

11:27.480 --> 11:29.400
yeah, more structural approach.

11:29.400 --> 11:34.600
And we think we have, you know, some suggestion to make and I'll let Yonis, and I'll let,

11:34.600 --> 11:36.760
sorry for taking so long.

11:36.760 --> 11:37.760
Hey.

11:37.760 --> 11:38.760
Okay.

11:38.760 --> 11:45.560
So I want to talk to you a bit about IEDF and why we think it's a good venue to try

11:45.560 --> 11:51.880
to standardize standards relating to remote out the station.

11:51.880 --> 11:56.600
So first off, let's look a bit at some of the IEDF principles that form the core of

11:56.600 --> 12:01.960
its mission and why we think these are relevant to, to the hacker crowd here at Fosnum.

12:01.960 --> 12:09.080
So we started openness, open process, so everyone can get involved and can, can, can read standards

12:09.080 --> 12:10.800
that are being worked on.

12:10.800 --> 12:14.760
And this includes not just technical folks, but also members of the, let's say, civil

12:14.760 --> 12:21.320
society who have things to, to say about things that are being standardized or drafted.

12:21.320 --> 12:25.680
The second is technical expertise or competence, meaning that the IEDF only works on things

12:25.680 --> 12:28.640
that it has the competence to talk to.

12:28.640 --> 12:36.160
And it will, it will listen to technically competent input from whatever source there

12:36.160 --> 12:37.520
is.

12:37.520 --> 12:42.720
And this, the third, third principle is that of practical ethos.

12:42.720 --> 12:49.160
So rough consensus and running codes or trying to base all our standards on our engineering

12:49.160 --> 12:52.280
judgment and our real world experience.

12:52.280 --> 12:57.040
And more pragmatically, it means that all the standards need to come accompanied by

12:57.040 --> 13:02.080
some, some code for verification and hopefully multiple, multi-employment, implementations

13:02.080 --> 13:03.360
that are interoperable.

13:03.360 --> 13:07.960
So let's look at, at the station in the IEDF.

13:07.960 --> 13:12.720
I think the rats working group has already been mentioned and the major milestone that's

13:12.720 --> 13:18.480
been achieved about a year ago, the, the remote out station procedures architecture document

13:18.480 --> 13:23.440
from which this diagram is taken shows that the roles involved in making the remote out

13:23.440 --> 13:26.080
station usable.

13:26.080 --> 13:31.040
And the rats working group is there to essentially standardize around this diagram, around the

13:31.040 --> 13:34.360
roles, mechanisms, data formats inherent in this.

13:34.360 --> 13:38.560
But if you want to look at remote out station as an authentication mechanism, then we need

13:38.560 --> 13:41.440
to go beyond the rats and this diagram.

13:41.440 --> 13:44.920
And we need to look at cases where the attester and their lying party are trying to interact

13:44.920 --> 13:49.720
over different protocols like O-Auf, TLS, ESD, stuff like that.

13:49.720 --> 13:54.600
So let's start by looking at credential insurance.

13:54.600 --> 13:58.080
And in this case, I mean, for example, X5-9 certificates.

13:58.080 --> 14:03.920
So the enrollment over secure transport and certificate management protocols are central

14:03.920 --> 14:07.400
to public infrastructure.

14:07.400 --> 14:13.000
And it allows an entity to request from a registration or certification authority to

14:13.000 --> 14:15.480
generate a certificate.

14:15.480 --> 14:23.400
And a recent requirement from the CA browser forum has put in place a need from RA or CA

14:23.400 --> 14:29.000
for the entity to prove the security state of the key that's being certified.

14:29.000 --> 14:33.640
So that's why we're trying to integrate remote out station to make this happen.

14:33.640 --> 14:40.760
So the way remote out station works here is the verifier sends an ounce to the entity

14:40.760 --> 14:47.760
and entity that uses that to generate evidence and package it up in the CSR.

14:47.760 --> 14:53.440
And then the RA-CA can get an out station result back and decide whether it wants to

14:53.440 --> 14:58.960
trust the entity and issue the certificate.

14:58.960 --> 15:04.680
The identifiers there are for the places where you can find more information about how this

15:04.680 --> 15:07.000
all works.

15:07.000 --> 15:10.520
If we look at ACME, it's again for certificate insurance.

15:10.520 --> 15:13.320
And as you can see, the diagram looks pretty much the same.

15:13.320 --> 15:19.280
The only difference is in the fact that the evidence is carried in a different format

15:19.280 --> 15:23.800
defined by the W3C, so web-alpha format.

15:23.800 --> 15:31.120
So just to highlight the fact that we're pretty open and pragmatic about what we use.

15:31.120 --> 15:35.480
And if there's something ready, then we can just use that.

15:35.480 --> 15:42.440
The second type of credential that we care about, for example, in this case is OAuth,

15:42.440 --> 15:48.040
where a client might want to get an identifier and perhaps some credentials from an authorization

15:48.040 --> 15:49.040
server.

15:49.040 --> 15:51.360
Again, pretty much the same diagram.

15:51.360 --> 15:57.560
And then if we move on to secure channel establishment protocols like TLS, these are quite different

15:57.560 --> 16:02.280
because of their symmetricity compared to credential issuance.

16:02.280 --> 16:04.320
And we've tried to preserve that.

16:04.520 --> 16:09.600
In the diagram here, you can see one type of flow where the server is the one that testing

16:09.600 --> 16:12.000
itself, but you can have the same on both sides.

16:12.000 --> 16:15.880
So both the client and server can test themselves.

16:15.880 --> 16:21.440
They can use either attestation results or evidence as credentials, and they can use

16:21.440 --> 16:27.600
credentials, these credentials instead of PKI or alongside PKI.

16:27.600 --> 16:31.480
So obviously, we're dealing with some sensitive stuff here, and we want to make sure that

16:31.560 --> 16:35.840
our specifications are as secure as possible.

16:35.840 --> 16:39.960
And the way we do this is obviously we use our experience with these protocols, making

16:39.960 --> 16:46.960
sure that they're secure, and we use implementations to drive testing and make sure that we catch

16:48.160 --> 16:49.160
any bugs.

16:49.160 --> 16:54.400
But obviously, we can't just rely on that because we can't do proper thorough testing.

16:54.400 --> 17:00.080
So recently, we've been integrating formal verification into our work, trying to prove

17:00.120 --> 17:05.560
that the security properties that we care about are upheld by our designs.

17:05.560 --> 17:12.000
And actually, in IETF, we have a new usable formal methods proposed research group to take

17:12.000 --> 17:15.080
care of this more broadly.

17:15.080 --> 17:19.440
So I want to leave you with one message, which is please join us.

17:19.440 --> 17:24.280
Please join us in drafting these standards and implementing them and making sure that

17:24.280 --> 17:26.400
they work properly in the real world.

17:27.000 --> 17:33.000
Yeah, and we tend to lurk around in the ROTS working group and the CCC at the station.

17:33.000 --> 17:35.000
Thank you.

17:47.000 --> 17:49.000
Okay, I'll repeat the question.

17:56.400 --> 18:03.400
Is there like a representation for applying the service?

18:04.800 --> 18:07.800
I think there probably is.

18:07.800 --> 18:13.400
Yes, so the question was for ACME, for the ACME integration of remote other stations,

18:13.400 --> 18:19.120
whether there is example codes or reference implementation.

18:19.120 --> 18:21.160
I think there probably is.

18:21.160 --> 18:27.240
I think I've seen a demo from the person who was drafting this.

18:27.240 --> 18:30.240
But yeah, we can get in touch.

