WEBVTT

00:00.000 --> 00:07.000
Hi guys, thanks for attending.

00:07.000 --> 00:11.200
Yesterday I gave a talk about Calculang.

00:11.200 --> 00:14.880
This talk will be different.

00:14.880 --> 00:17.960
Yesterday's talk was in the JavaScript Dev Room.

00:17.960 --> 00:26.160
It was more about interacting with numbers and workings and formulas and sharing numbers

00:26.160 --> 00:34.560
and workings using Calculang and facilitated by this diagram which I went through.

00:34.560 --> 00:41.320
The important thing to know about this is Calculang is a language for calculations.

00:41.320 --> 00:43.760
It doesn't do other things.

00:43.760 --> 00:47.960
To do things with numbers you have to use another language and you call numbers from Calculang

00:47.960 --> 00:50.240
rather than re-implement them.

00:50.240 --> 00:55.440
This makes Calculang simple and focused.

00:55.440 --> 01:02.360
You just write pure functions or formulas from spreadsheet parlance.

01:02.360 --> 01:08.880
I talked about this in terms of these aims.

01:08.880 --> 01:09.880
Shareable and communicable.

01:09.880 --> 01:11.040
We're encapsulating numbers.

01:11.040 --> 01:14.080
We have a thing we can share.

01:14.080 --> 01:19.120
It doesn't have programming mixed in there.

01:19.120 --> 01:20.120
Transparent and verifiable.

01:20.120 --> 01:21.440
These are things I spoke about yesterday.

01:21.440 --> 01:22.680
Today we're going to...

01:22.680 --> 01:23.680
This talk will be more technical.

01:24.320 --> 01:25.640
Yesterday's talk was more interactive.

01:25.640 --> 01:32.200
Today I'm going to focus on this flexibility and reusability.

01:32.200 --> 01:35.000
We have a language that's just for calculations.

01:35.000 --> 01:45.240
I'm trying to develop a language which is flexible so that calculations can be reused.

01:45.240 --> 01:47.640
We look at an example which is from...

01:47.640 --> 01:50.560
You can find this example on Calculang.dev.

01:50.640 --> 01:53.400
You're a shop.

01:53.400 --> 01:55.960
You buy something for some price.

01:55.960 --> 01:58.760
You sell it for some price, hopefully higher.

01:58.760 --> 02:00.440
You've got some level of fixed expenses.

02:00.440 --> 02:04.880
You've got some number of units you buy and sell.

02:04.880 --> 02:06.360
We have these formulas.

02:06.360 --> 02:08.360
First of all, we have the separation of concerns.

02:08.360 --> 02:11.080
Over here we have these formulas.

02:11.080 --> 02:13.200
Sales is units times sales price.

02:13.200 --> 02:15.600
Purchases is units times purchase price.

02:15.600 --> 02:19.360
Profit sales minus purchases minus expenses.

02:19.360 --> 02:25.000
Over here, for these inputs, we have results for these formulas.

02:25.000 --> 02:26.680
This side is calling results.

02:26.680 --> 02:31.120
This is calling numbers from here rather than recalculating them.

02:31.120 --> 02:39.480
As a bit last side, I'm just going to sit and point out.

02:39.480 --> 02:44.600
If you did this in a spreadsheet, depending on how you design it, you've got one layout.

02:44.600 --> 02:50.320
Your layout decisions are made when you key in the formulas.

02:50.320 --> 02:54.800
But just to show you, we have separation so we can control layout.

02:54.800 --> 02:57.040
Here we're looking at sales prices in one value.

02:57.040 --> 02:58.360
It's a range of values.

02:58.360 --> 03:04.080
We put it on a x-axis.

03:04.080 --> 03:05.080
We didn't need to change that.

03:05.080 --> 03:06.400
We had to do it with calculations.

03:06.400 --> 03:11.800
The calculations are free from layout.

03:11.800 --> 03:16.760
I'm coming back to properties by Calculant to make it flexible.

03:16.760 --> 03:20.080
First of all, this isn't like the code that I showed yesterday, the Calculant code.

03:20.080 --> 03:27.240
I'm hiding some things, so I'll unhide them for you.

03:27.240 --> 03:31.280
These are the inputs.

03:31.280 --> 03:33.880
This is a convention to describe an input.

03:33.880 --> 03:36.360
The Calculant can understand it's an input.

03:36.360 --> 03:41.760
It's a function mapping onto the same name with underscore in.

03:41.920 --> 03:45.320
We have a convention to describe inputs.

03:45.320 --> 03:51.080
We have these inputs up here, so I'm just going to get this out of the way.

03:51.080 --> 03:54.240
We export constants, everything in Calculant, that's the rule.

03:54.240 --> 04:00.360
That's redundant, so let's get rid of that.

04:00.360 --> 04:03.960
Here are the formulas that we can focus on.

04:03.960 --> 04:09.480
I said some things about Calculant code yesterday.

04:09.600 --> 04:14.520
First of all, it looks like JavaScript because it's based on JavaScript and it compiles into

04:14.520 --> 04:20.160
JavaScript, so you get a JavaScript bundle or ESM at the end, which has just got pure

04:20.160 --> 04:26.920
functions in there, interior as portable.

04:26.920 --> 04:31.760
Second thing I said is that functions and ... sorry, there's only two primitives in Calculant

04:31.760 --> 04:39.280
to know about, which is formulas and inputs.

04:39.280 --> 04:47.280
Here expenses is an input, units is an input, and these sales, purchases, profit, or formulas,

04:47.280 --> 04:55.400
but all of them are implemented as functions, so we call units like it's a function, even

04:55.400 --> 04:57.360
with an input.

04:57.360 --> 05:04.480
Fourthly, Everton is a function which is a nice uniformity.

05:04.480 --> 05:09.240
It's good for refactoring things, so if units becomes a formula later, which is a hint about

05:09.400 --> 05:13.440
what we'll do next, then there's no refactoring.

05:13.440 --> 05:20.600
But we also, we don't populate these brackets, so that's something the Calculant compiler

05:20.600 --> 05:21.600
does for you.

05:21.600 --> 05:25.600
We will analyze how inputs are used and we'll populate those brackets for you, so we'll

05:25.600 --> 05:27.960
tread inputs through all those brackets.

05:27.960 --> 05:31.400
You can see, in this case, it's the only thing that the Calculant compiler does.

05:31.400 --> 05:35.520
You can see the output here.

05:35.520 --> 05:40.200
Let's just look at where inputs are used and build in a tree, which you can see down

05:40.200 --> 05:41.200
here.

05:41.200 --> 05:47.280
A little bit of graph theory, a little bit of logic.

05:47.280 --> 05:52.520
It knows that sales depends on sales price and units, profit depends on all of these

05:52.520 --> 05:58.200
things and populates this.

05:58.200 --> 06:04.440
This isn't in order to make formulas concise.

06:04.480 --> 06:07.920
It's in order to make numbers flexible.

06:07.920 --> 06:13.400
So that, supposing we're looking at different sales price here, different sales price here,

06:13.400 --> 06:18.640
but all it's saying is that if you have a higher sales price, you're going to make more

06:18.640 --> 06:21.560
money.

06:21.560 --> 06:25.080
If we're thinking about changing our sales price, we might actually want to create a

06:25.080 --> 06:29.600
constraint, a demand curve.

06:29.600 --> 06:31.640
New requirement, let's see how that's implemented.

06:32.640 --> 06:37.840
I'm going to turn on inputs so you can see what happens.

06:37.840 --> 06:39.840
Units is an input.

06:39.840 --> 06:45.680
With a demand curve, units is a formula.

06:45.680 --> 06:46.680
Not now it's changed.

06:46.680 --> 06:51.720
We didn't need to refactor where it's used.

06:51.720 --> 06:53.960
But there are changes in the JavaScript.

06:53.960 --> 06:58.880
So now purchases depends on sales price and purchase price.

06:58.880 --> 07:01.560
Previously it depended on units.

07:01.560 --> 07:06.840
Now units is determined by the sales price.

07:06.840 --> 07:10.520
So that's an example of input inference.

07:10.520 --> 07:15.520
So Calculation will infer inputs and populate them for you so you don't need to manually

07:15.520 --> 07:16.520
trade things.

07:16.520 --> 07:21.640
You can build functions which depend on inputs in complex ways.

07:21.640 --> 07:27.760
Basically you've got this flexibility to create cheap inputs and change your models,

07:27.760 --> 07:29.760
your calculations.

07:29.760 --> 07:35.680
But there's something happening that I did here that I don't like which is I copied

07:35.680 --> 07:39.080
all these formulas.

07:39.080 --> 07:43.000
And this would be nicer or neater if we didn't need to do that.

07:43.000 --> 07:48.840
So this is the same thing, nothing changed over here.

07:48.840 --> 07:53.320
This is the same thing, just modular.

07:53.320 --> 08:04.440
So we have a file, a calculating file which is important calculations or functions from

08:04.440 --> 08:06.920
the original shop model.

08:06.920 --> 08:12.280
So this is the original, exactly what we saw at the beginning, units is an input.

08:12.280 --> 08:17.040
But it has a different definition, it has that formula for units.

08:17.040 --> 08:25.080
And effectively this is a way that you can say I want these calculations but with these

08:25.080 --> 08:26.080
definitions.

08:26.080 --> 08:30.280
So Calculation gives precedence to what you define closer to the entry point, closer to

08:30.280 --> 08:33.280
the root, then closer to the actual calculation.

08:33.280 --> 08:41.360
So you can change how calculations work when you import them.

08:42.080 --> 08:51.800
Now in practice you can see examples where I use this on Calculation.dev.

08:51.800 --> 09:00.040
I indicate with this icon that modularity is being used.

09:00.040 --> 09:11.480
So yesterday I looked at a savings calculator which estimates for some interest rate, for

09:11.480 --> 09:17.280
some amount you're saving, it estimates an amount that you will have at the end after

09:17.280 --> 09:18.800
five years.

09:18.800 --> 09:22.760
You can change these things in the savings calculator.

09:22.760 --> 09:25.040
But interest rate might not be a thing that is fixed.

09:25.040 --> 09:30.960
So as time goes on you might find interest rates can change, we know that.

09:30.960 --> 09:37.880
So you might want to analyse how your original calculations, you might want to update your

09:37.880 --> 09:44.320
original calculations and analyse the gap between what you actually got and what you

09:44.320 --> 09:48.440
expected to get.

09:48.440 --> 09:53.240
Here we're doing that analysis for five different years.

09:53.280 --> 09:59.960
So again five different sets of results.

09:59.960 --> 10:06.280
And there's no copying of code, we're reusing the same savings calculations, we're updating

10:06.280 --> 10:14.480
that in a controlled way by making interest rate something that depends on a new input

10:14.480 --> 10:20.520
cut-off for actuals and it uses either expected or actual.

10:20.520 --> 10:32.840
So there are analyses, we can use the properties modularity input inference to make our analysis

10:32.840 --> 10:35.000
more contained.

10:35.000 --> 10:39.320
What I like about this is we've got one place where savings calculations happen, we've got

10:39.320 --> 10:50.480
one place where reconciliation calculations happen, all the logic is segregated.

10:51.440 --> 10:56.840
So other place where I use this, I made a pension calculator, it's for some calculations

10:56.840 --> 11:01.200
in Ireland and it's work in progress and lots of disclaimers on it.

11:01.200 --> 11:07.520
But I try to show people the value of pension tax relief, at least pre-retirement.

11:07.520 --> 11:15.920
And so we've got a pension calculator, but you want income tax calculations, so rather

11:15.920 --> 11:22.600
than put income tax calculations into the pension calculator, we use modularity, we

11:22.600 --> 11:25.440
use formulas.

11:25.440 --> 11:34.240
Down here just to structure some of these things better, I use modularity.

11:34.240 --> 11:40.840
And this one was my first test of modularity in calculating.

11:40.840 --> 11:47.000
It's a model which calculates, every year around September, October there's a budget

11:47.000 --> 11:52.680
in Ireland, the government changes tax rates and on the radio lots of people are talking

11:52.680 --> 11:58.480
about this change causes, this impact on finances, this lets you change those things and see

11:58.480 --> 12:01.560
an estimated impact on government finances.

12:01.560 --> 12:10.320
And there's no two copies of the calculations, it's just reusing.

12:10.880 --> 12:13.280
We're using calculations.

12:13.280 --> 12:24.240
The last thing I'll briefly touch on is we have separation of concerns.

12:24.240 --> 12:30.200
That creates an issue for Calculant because you need to make a thing on the right hand

12:30.200 --> 12:35.000
side there in order to see or do, I don't know, a Calculant with the numbers that come

12:35.000 --> 12:36.000
out of Calculant.

12:36.080 --> 12:46.200
So Calculant Vinspec is a very rough visualization API based on this which is brilliant.

12:46.200 --> 12:54.280
But it lets you map formulas and inputs directly to visual channels.

12:54.280 --> 12:59.280
This is a presentation I link in my abstract where you can see examples, there are code

12:59.280 --> 13:04.520
blocks here, we're passing in the model, input courses and values which don't change.

13:04.520 --> 13:09.840
We pass in a mark, we want bars, we say on the x-axis, we want different months so you

13:09.840 --> 13:15.080
can pass inputs in with a domain.

13:15.080 --> 13:21.240
So in a declarative way you can make visualizations of your numbers that come out of Calculant

13:21.240 --> 13:27.480
which is not prescribed, Calculant isn't the pinninated, you can use anything you want.

13:27.480 --> 13:35.840
This has many disadvantages but it's a way of using this.

13:35.840 --> 13:41.480
I'm starting to use this closer to the metal because this is far more powerful but it's

13:41.480 --> 13:46.840
very important to have a quick way when you're developing a model to get numbers out and

13:46.840 --> 13:49.200
see them.

13:49.200 --> 13:55.960
So that's one thing to help to develop things for that right hand side.

13:56.640 --> 14:11.760
So that's modularity and some of the technical details about the language and one way to

14:11.760 --> 14:12.760
visualize.

14:12.760 --> 14:21.960
I won't go through this but you can see examples in the tools code for different visuals.

14:21.960 --> 14:23.960
Any questions?

14:23.960 --> 14:24.960
Yeah?

14:24.960 --> 14:25.960
Syntax for Calculant is JavaScript.

14:25.960 --> 14:48.960
Do you think it would be helpful to have more human readable syntax?

14:48.960 --> 14:50.960
Yeah, definitely.

14:51.960 --> 14:55.960
In the medium or long term yes.

14:55.960 --> 15:00.960
It's got the developer experience overall.

15:00.960 --> 15:06.960
It's not something I put a huge amount of attention on but over time, of course I will.

15:20.960 --> 15:33.400
Because you're writing the formulas in a kind of declarative way, they're kind of light

15:33.400 --> 15:41.080
and there aren't too many different things to know.

15:41.080 --> 15:48.960
I said there's two primitives, formulas and inputs.

15:48.960 --> 15:51.960
I think it's conceptually simple.

15:51.960 --> 15:56.960
The developer experience and some things about performance are hard now but I think the conceptually

15:56.960 --> 15:58.960
can be much better.

15:58.960 --> 16:02.960
I showed you there's redundancy in the code that you're writing.

16:02.960 --> 16:08.960
So that is an issue that we can address in the future.

16:08.960 --> 16:11.960
What I really like is that there's no servers in old strata.

16:11.960 --> 16:13.960
It's all client-side.

16:13.960 --> 16:21.960
It's all client-side but that stuff is you need to run a compiler on your machine currently.

16:21.960 --> 16:23.960
It uses an old API.

16:23.960 --> 16:29.960
I use webpack and babble to make the thing but that will change.

16:29.960 --> 16:31.960
You can publish it right?

16:31.960 --> 16:36.960
Yeah, you get a bundle that you can publish.

16:36.960 --> 16:42.960
We will have a standalone calculator for certain sometime soon.

16:42.960 --> 16:51.960
The blocker for developers probably isn't just running on your local machine right now.

16:51.960 --> 16:53.960
I had a link to Calculated Party.

16:53.960 --> 16:55.960
It's a channel on metrics.

16:55.960 --> 16:58.960
You can join and talk more.

16:58.960 --> 17:02.960
If people want to contribute something for a community gallery,

17:02.960 --> 17:10.960
because that would be a nice next goal, then talk to me and we can try something.

17:10.960 --> 17:15.960
Things are typically good at our education or things that are simple

17:15.960 --> 17:24.960
because computationally just makes sure it works.

17:24.960 --> 17:26.960
Thank you.

