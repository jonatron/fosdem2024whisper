WEBVTT

00:00.000 --> 00:06.160
We'll get started.

00:06.160 --> 00:10.560
Sylvester will introduce us to Piepart MC.

00:10.560 --> 00:11.560
Thank you for coming.

00:11.560 --> 00:13.400
I'm Sylvester Arrabas.

00:13.400 --> 00:17.240
I work at the AGH University in KrakÃ³w in Poland.

00:17.240 --> 00:23.600
And this is a project carried out together with a team from the University of Illinois,

00:23.600 --> 00:26.040
Urbana-Champaign in US.

00:26.600 --> 00:32.040
So Piepart MC is the highlight here.

00:32.040 --> 00:39.480
But from the perspective of this conference, probably I should read the subtitle, namely

00:39.480 --> 00:46.800
How to engineer a Python to Fortran binding in C++ for use in Julia and MATLAB and why

00:46.800 --> 00:48.240
to do it.

00:48.240 --> 00:57.400
So the package that this tool is interfacing is called Piepart MC.

00:57.400 --> 01:03.160
It's a Monte Carlo simulation package for air resolves that are, for example, floating

01:03.160 --> 01:04.160
in the air.

01:04.160 --> 01:11.960
It's an open source tool developed for more than 20 years at Urbana-Champaign.

01:11.960 --> 01:14.280
And just one line about the physics.

01:14.280 --> 01:21.360
So usually it's kind of a box model, so studying just processes without a spatial context.

01:21.360 --> 01:25.920
But it also has an option to be coupled with the Worf weather simulation for a cast.

01:25.920 --> 01:29.280
So here is the HPC context.

01:29.280 --> 01:35.200
And it simulates things like air pollution, evolution due to collisions of particles,

01:35.200 --> 01:39.440
condensation, chemical reactions, et cetera.

01:39.440 --> 01:47.440
And on the technical side, it's actually an object-oriented code base written in quite

01:47.440 --> 01:54.680
classic, using quite classic subset of Fortran, but still in very much object-oriented manner.

01:54.680 --> 02:03.200
And despite 20 years of heritage, it has a very comprehensive test suite.

02:03.200 --> 02:08.560
And I would say it could be an example of best practices in Fortran.

02:08.560 --> 02:15.760
However, its usage poses several challenges, for example, to students who intend to start

02:15.760 --> 02:20.200
off using it, for example, from a Jupyter notebook.

02:20.200 --> 02:24.440
And these challenges are related with, first of all, multiple dependencies.

02:24.440 --> 02:27.080
The need to compile it.

02:27.080 --> 02:31.600
Getting updates doesn't have really a workflow ready.

02:31.600 --> 02:37.280
The automation of simulations, analysis, et cetera, usually involves Shell.

02:38.280 --> 02:45.040
The input output is handled through multiple text files.

02:45.040 --> 02:51.360
And to analyze output from these simulations, usually one needs to actually look or use

02:51.360 --> 02:55.640
some of the Fortran code the simulation is based on.

02:55.640 --> 03:02.360
So the question that was posed when we started was how to bring together these two seemingly

03:02.360 --> 03:03.800
separate worlds.

03:03.840 --> 03:08.520
So on the right-hand side, this is the simulation package, part MC, with its Fortran code base,

03:08.520 --> 03:13.160
a bit of C code base, different dependencies.

03:13.160 --> 03:19.600
And then a perspective of a modern student, let's say, who starts with Jupyter and expects

03:19.600 --> 03:26.360
basically everything to be importable and interoperable with other libraries, scipy,

03:26.360 --> 03:27.920
numpy, et cetera.

03:27.920 --> 03:33.640
So the goals would be to lower the entry threshold for installation and usage.

03:33.640 --> 03:41.280
To ensure that the same experience is doable on different operating systems.

03:41.280 --> 03:48.320
And also to streamline the dissemination of studies based on the simulation tool, for

03:48.320 --> 03:55.360
example, for peer review with scientific journals.

03:55.360 --> 04:00.040
So the status of the project, as of now, of part MC, this Python bindings, is that we

04:00.080 --> 04:07.120
released after two years of development version one, it's on PyPy.

04:07.120 --> 04:13.960
And we also published a description of the package in the software X journal.

04:13.960 --> 04:17.640
So we are kind of ready for a rollout.

04:17.640 --> 04:21.160
And today I will talk more about the internals.

04:21.160 --> 04:23.480
And the internals start with PyBind 11.

04:23.480 --> 04:31.520
So despite we are talking about Python and Fortran, we actually, we picked PyBind 11,

04:31.520 --> 04:39.280
which is a C++ tool for developing Python packages as our backbone.

04:39.280 --> 04:40.400
So here's some highlights.

04:40.400 --> 04:47.280
The project actually is for those who are new to it, it's quite a remarkable success,

04:47.280 --> 04:54.640
I would say, with over 300 contributors on GitHub, 2,000 forks and 14,000 stars.

04:54.640 --> 04:56.240
Congratulations to PyBind 11.

04:56.240 --> 04:57.680
And it's very useful.

04:57.680 --> 05:01.160
So it fits here into the picture.

05:01.160 --> 05:07.720
So essentially we developed in C++, in C and in Fortran, so it's a triple language project,

05:07.720 --> 05:15.000
something that uses PyBind 11 and a few other components to automate building of this part

05:15.080 --> 05:19.480
of C and offering the Python package.

05:19.480 --> 05:28.640
So probably what's also worth mentioning is here that most of the work on PyPartnC was

05:28.640 --> 05:36.280
around substituting this text file input output with JSON-like Python native, let's say,

05:36.280 --> 05:44.000
or Python-like Pythonic input output layer.

05:44.000 --> 05:50.600
And as I mentioned, the original project has the object-oriented structure, so we tried

05:50.600 --> 05:57.680
to also couple Python's garbage collector with the Fortran functions that are provided

05:57.680 --> 06:00.960
for creating and deallocating objects.

06:00.960 --> 06:08.880
And there are many, many dependencies that the project has in Fortran, in C, in C++.

06:08.880 --> 06:19.480
And here, let me just mention that we picked Git submodules as a tool to pin versions of

06:19.480 --> 06:24.800
these dependencies, which is useful because the pip install command is able to grab packages

06:24.800 --> 06:32.200
from a Git repository, and this would include all the submodules with their versions.

06:32.200 --> 06:37.520
So let me now present a bit of code and how it looks from a user perspective.

06:37.520 --> 06:42.480
So this example here, please don't look particularly on the license of code, maybe just on the bulk

06:42.480 --> 06:45.600
of code, and the type of code.

06:45.600 --> 06:51.800
So here on the left, we have the Fortran Hello World for using the PartMC package, and on

06:51.800 --> 06:57.440
the right, three text files that would be the minimum to start a simplest simulation.

06:57.440 --> 07:05.440
So now this is the end result that uses the PyPartnC layer, so essentially the same can

07:05.520 --> 07:12.520
be obtained with a single file, starting with importing from this PyPartnC wrapper, and then

07:13.880 --> 07:20.880
using this kind of JSON-like notation, essentially here, list and dictionaries that are wrapped.

07:24.360 --> 07:31.360
So one achievement kind of, and one big advantage of using Python is that actually providing

07:32.360 --> 07:39.360
Python wrappers, you are catering also to Julia users, for example, here through the

07:41.360 --> 07:48.360
PyCall.jl package, essentially the same code and the same logic can be obtained for Julia

07:51.440 --> 07:54.320
users using PyPartnC.

07:54.320 --> 08:01.320
And finally, example with using Matlap, which ships with built-in Python bridge, and then

08:01.440 --> 08:08.440
which allows also to use PyPartnC to access the Fortran code from Matlap.

08:10.000 --> 08:16.000
So these three examples I've shown are actually part of our CI, so we have them in the readme

08:16.000 --> 08:23.000
file, and on CI we are executing the Julia, the Python, the Fortran, and the Matlap example,

08:25.480 --> 08:29.920
uploading the output as artifacts, and there is an assert stage that checks if the output

08:29.920 --> 08:33.040
from all these languages match.

08:33.040 --> 08:37.560
By the way, the timings here are essentially compilation and set up, so it's not that Fortran

08:37.560 --> 08:44.560
takes much shorter, the execution is always done through the Fortran code base and binary,

08:45.560 --> 08:52.000
but clearly compiling just the Fortran code is faster than setting up the Python, Julia,

08:52.000 --> 08:57.120
or Matlap environment, and how it works actually in practice when looking at the code.

08:57.120 --> 09:04.120
So here, this diagram might be not perfectly visible, but the right column is C++ layer,

09:05.080 --> 09:11.160
here is the C layer, here is Fortran layer, and here is the user code either in Julia,

09:11.160 --> 09:13.240
Matlap, or Python.

09:13.240 --> 09:19.080
And the different color here is to depict the package that we are interfacing with.

09:19.080 --> 09:26.080
So if we start with this readme code here, the user's Python code, we have set up the

09:27.120 --> 09:34.120
some import and instantiation of a single object of this arrow data class as an example,

09:34.520 --> 09:40.160
and what happens if we call it, first it goes through barely visible, I guess.

09:40.160 --> 09:47.160
So anyhow, this is the kind of outer layer for the C++ implemented Python package, and

09:48.200 --> 09:49.840
now I hope it's more visible.

09:49.840 --> 09:53.240
This is how PyBind 11, how one works with PyBind 11.

09:53.240 --> 10:00.160
So this is the C++ code where we define a module for Python, creating a Python class

10:00.160 --> 10:07.160
from C++ code looks roughly like this, with some templates defining the class that we

10:07.920 --> 10:14.920
interface how to handle memory allocation and defining particular methods.

10:17.240 --> 10:22.760
Here there is an init method, so a kind of constructor, and this constructor, when called,

10:22.800 --> 10:29.800
goes through C++ code, this arrow data class that we wrap, but quickly we need on our way

10:30.320 --> 10:37.320
to Fortran to go into what is written here up at the top, C binded signatures for the

10:38.200 --> 10:39.360
Fortran function.

10:39.360 --> 10:46.360
So they cannot take exceptions, exception handling through, across these languages is essentially

10:46.360 --> 10:50.920
undefined behavior, depending on the compiler.

10:51.000 --> 10:53.360
This is how it looks from the C++ perspective.

10:53.360 --> 11:00.360
So when we look now on the C signatures here at the top, they match to what is later defined

11:03.000 --> 11:07.000
in Fortran with the Fortran built in C binding module.

11:07.000 --> 11:14.000
So whenever you see this bind C or C underscore types, these ensure within Fortran code that

11:15.000 --> 11:22.000
we can access this code from C, and each of these routines is written for our wrapper

11:25.080 --> 11:31.360
and essentially calls quickly as a fin wrapper around the original Fortran routines that

11:31.360 --> 11:32.800
we wanted to wrap.

11:32.800 --> 11:37.840
So for example, the one below spec file read arrow data.

11:37.840 --> 11:40.960
So now we go finally to the wrapped code.

11:40.960 --> 11:47.960
This is the unmodified code that we access, and it sits in a Git submodule of the Pypartmc

11:47.960 --> 11:49.440
project.

11:49.440 --> 11:56.440
Now the fun starts when this Fortran code actually calls its input output layer, and

12:00.000 --> 12:07.000
there is like, usually a simulation takes something like 20 different text files to be read

12:07.000 --> 12:10.400
through, and these text files are nested.

12:10.400 --> 12:16.600
So what we've done is we replaced one of the components of the original Fortran package

12:16.600 --> 12:23.600
with our implementation that starts in Fortran, then goes through a C layer back to C++, which

12:30.000 --> 12:32.520
then uses JSON for Fortran.

12:32.520 --> 12:39.520
So this is a C++ library that helps get very readable C++ code for using Fortran, and this

12:44.320 --> 12:51.320
was our solution to replacing the multiple text files with what from user perspective

12:51.680 --> 12:56.640
are essentially in memory, MATLAB, Julia, or Python objects.

12:56.640 --> 13:02.400
We also have online documentation for the project generated from the source code, and

13:02.520 --> 13:09.520
as you can see here, for example, the types are hinted correctly.

13:11.120 --> 13:18.120
So despite in principle the Fortran parameter ordering is the key, we do inform Python users

13:23.040 --> 13:25.240
for the types of the arguments.

13:25.240 --> 13:32.240
So to start a summary, what we achieved with the Pypartmc wrapper is that we have a list

13:32.400 --> 13:39.040
of different types of the wrapper, and we have a single command pip installation on Windows

13:39.040 --> 13:46.040
Linux and OS X, with the exception that from Apple Silicon we are still struggling to get

13:46.160 --> 13:53.160
it done and help welcome, if any of you is a Fortran hacker who could help us produce

13:53.160 --> 13:55.160
universal binaries.

13:55.160 --> 14:02.160
We provide access to unmodified internals of the Pypartmc underlying package from Python,

14:02.400 --> 14:04.400
MATLAB, and also C++.

14:04.400 --> 14:10.920
So as a side effect by product of this goal of providing Python interface, we got also

14:10.920 --> 14:15.920
Julia MATLAB and C++ layer.

14:15.920 --> 14:22.920
Probably something that might not be obvious from the original plan, and we ended up actually

14:24.520 --> 14:31.040
using extensively is that this provides us with a nice tool for development of other

14:31.040 --> 14:38.040
Python packages because we can use part mc in test shoots to verify against the established

14:40.880 --> 14:42.880
simulation package.

14:42.880 --> 14:49.880
And also probably it's maybe a non-trivial way to use pip, but since C and Fortran are

14:50.040 --> 14:57.040
probably not the best, are not the solutions, not the technologies where you see mainstream

15:06.760 --> 15:13.760
package managers coming in or being established here, we managed to ship Fortran codes to

15:14.520 --> 15:21.520
users of Windows 6 Linux different variants of binary packages through pip.

15:21.880 --> 15:28.880
So it's essentially probably one way of thinking of the PyPy.org platform.

15:32.480 --> 15:37.680
And from the point of view of what I mentioned earlier, providing students or researchers

15:37.680 --> 15:44.680
using this package with tool to disseminate their research workflows, including input

15:45.560 --> 15:50.960
data, output data analysis workflow in a single, for example, Jupyter file for a paper peer

15:50.960 --> 15:52.600
review.

15:52.600 --> 15:59.600
And finally, PyPy.org mc allows to extend the Fortran code with some Python logic.

15:59.680 --> 16:06.680
So since we interface with, we expose the internals of the package, we can do in a simulation

16:07.600 --> 16:10.600
the time stepping can actually be done from Python.

16:10.600 --> 16:17.600
And you can add to, let's say, if you have 10 different steps of the simulation done

16:17.640 --> 16:22.640
in Fortran, you can add an 11th one that is in Python, Julia or whatever.

16:22.640 --> 16:29.640
And the final point is probably one of the key things here is that having statically

16:29.920 --> 16:34.920
linked all the dependencies, we can actually use the package on platforms such as Colab

16:34.920 --> 16:40.920
or Jupyter Hubs of various institutions by doing just pip install and importing what

16:40.920 --> 16:47.920
otherwise would require getting a lot of dependencies and a lot of compile time stuff available.

16:48.760 --> 16:49.920
Take home messages.

16:49.920 --> 16:54.920
So I wanted to kind of give you a little bit of a little bit of a little bit of a little

16:54.920 --> 16:58.920
bit of a little bit of a little bit of a little bit of a little bit of a little bit

16:59.060 --> 17:05.320
kind of underline that PyBind 11, despite being a C++ tool is actually a valuable thing

17:05.320 --> 17:08.480
for interfacing Fortran with Python.

17:08.480 --> 17:12.440
And this is linked to the fact that PyBind 11 offers CMake integration.

17:12.440 --> 17:18.280
So your C++ projects can have build automation in CMake, and CMake handles Fortran well,

17:18.280 --> 17:20.740
so this was the key thing here.

17:20.740 --> 17:27.740
The glue language role of Python is, I think, nicely exemplified here with Julia and Matlap,

17:27.740 --> 17:29.740
including CI.

17:30.620 --> 17:35.260
Static linkage of the dependencies was essential for us, for example, due to the fact that

17:35.860 --> 17:39.020
there is no standardized ABI for four different

17:40.220 --> 17:42.220
versions, even of the same compiler,

17:43.420 --> 17:45.420
have different

17:47.540 --> 17:51.340
binary incompatibilities, and this was essential to get it working on on

17:52.060 --> 17:54.700
platforms such as Colab or other Jupyter Hubs.

17:55.260 --> 18:01.340
But this prevented us from from publishing the package on KONDA due to KONDA policy of no static linkage.

18:02.060 --> 18:05.420
We've used more than 10 Git submodules for

18:07.180 --> 18:10.020
tracking our dependencies from the GitHub repo.

18:10.820 --> 18:14.140
As I mentioned, help welcome in getting the universal binaries

18:15.260 --> 18:17.260
generated with G4tran.

18:18.980 --> 18:20.980
The CI on

18:20.980 --> 18:23.540
using MATLAB is possible thanks to the

18:24.020 --> 18:28.660
MATLAB actions. So the producer of MATLAB MapWorks offers

18:31.940 --> 18:36.700
CI, GitHub actions that actually do not require any MATLAB license.

18:36.700 --> 18:42.860
So if one wants to run MATLAB code on GitHub, this is important and just wanted to thank them. And finally,

18:43.300 --> 18:49.020
a fun fact or the positive thing that actually when we submitted the paper about the project to the Software X Journal,

18:49.860 --> 18:54.980
just reporting that during the peer review, the reviewers indeed tried the code and

18:55.340 --> 18:58.780
provided us with feedback that also helped. So this was kind of positive that

18:59.340 --> 19:07.700
it did work. Let me acknowledge funding from US National Science Foundation and Polish National Science Center

19:08.140 --> 19:10.540
and thank you for your attention.

19:20.020 --> 19:22.020
Any questions?

19:30.020 --> 19:38.020
Yes, thank you for that presentation. My question was exactly did you keep in Fortran and what did you pass to

19:38.020 --> 19:44.020
Python site? So it's a race or some or just single values?

19:44.500 --> 19:52.020
So the question is about if I understand correctly what kind of data we are tackling with

19:54.020 --> 19:58.020
passing us during the simulation. So it's a

20:00.020 --> 20:06.020
the Monte Carlo simulations here are tracking particles in kind of attribute space that

20:07.020 --> 20:16.020
tracks their physical and chemical properties. So it's usually 20, 30 dimensional attribute space that is randomly

20:16.020 --> 20:22.020
sampled. So we have vectors of these particles in this attribute space. So usually this could be

20:23.020 --> 20:24.020
from thousands to

20:26.020 --> 20:32.020
hundreds of thousands of particles that each of the particle has like 30 attributes.

20:33.020 --> 20:44.020
From Python perspective, usually the user does not really use the roll data of the simulation, the state vector, just some aggregate information

20:45.020 --> 20:59.020
which is passed back to Python as enumerables that can be used with NAMPy, but we don't actually assume that it must be NAMPy. So one can use just lists if they are enough.

21:00.020 --> 21:02.020
I hope that answers.

21:03.020 --> 21:16.020
My question is just because we need some roll data from Fortran site to Python site and then it's just some two dimensional matter. Here we have some problems that we need to know where we keep the data.

21:18.020 --> 21:28.020
We are not exposing particle locations in memory. They are always returned as new objects to Python because this is it is never the state vector of the simulation. It's just a

21:29.020 --> 21:37.020
some aggregate information that characterizes it in a simpler way. So usually we have just one dimensional enumerable.

21:38.020 --> 21:40.020
For you it's much more simple. Thank you.

21:47.020 --> 21:48.020
Time for one more question.

21:50.020 --> 21:51.020
If there is one.

21:51.020 --> 22:03.020
Okay, if not we'll wrap up here because apparently there's a queue outside to get in for the next talks. Thank you. Thank you very much.

