WEBVTT

00:00.000 --> 00:08.100
Okay. Well, cool.

00:08.100 --> 00:11.520
Yeah. So, displayed at her.

00:11.520 --> 00:15.400
I like usually like a standing and jumping around,

00:15.400 --> 00:17.180
but here I've got to type.

00:17.180 --> 00:21.920
So, you forgive me for sitting down here.

00:21.920 --> 00:25.820
So, we'll talk about

00:25.820 --> 00:30.380
embeddable code playground specifically in a dogs.

00:30.380 --> 00:33.780
Let me ask how many of you

00:33.780 --> 00:40.540
prefer dull static dogs compared to interactive dogs?

00:41.380 --> 00:44.260
Because you probably have to maintain them.

00:44.260 --> 00:50.660
Oh, okay.

00:50.660 --> 00:52.660
Okay. I thought you are writing dogs.

00:52.660 --> 00:55.780
Yeah. Well, understood.

00:55.780 --> 01:00.780
Well, so, just to know who I'm,

01:00.780 --> 01:03.500
Peter Seitz, Anton is actually

01:03.500 --> 01:06.820
the author of the code we'll talk about,

01:06.820 --> 01:10.820
but unfortunately, he couldn't get a visa to come here.

01:10.820 --> 01:12.700
So, you stuck with me.

01:12.700 --> 01:16.020
But if you have any like a super advanced questions,

01:16.020 --> 01:19.420
there is Anton contacts and you can

01:19.420 --> 01:22.500
send it to him, he's very responsive guy.

01:22.500 --> 01:25.060
So, if you think about

01:25.060 --> 01:31.460
their more interactive,

01:31.460 --> 01:33.500
well, code playground,

01:33.500 --> 01:36.460
interactive scenarios, they generally better work

01:36.460 --> 01:41.980
for the explain the topics and also allowing to engage the reader.

01:41.980 --> 01:43.340
Maybe not all the readers,

01:43.340 --> 01:45.100
but I think the best ones,

01:45.100 --> 01:46.320
the most curious ones,

01:46.320 --> 01:50.700
which actually want to understand how things work.

01:50.700 --> 01:54.700
So, we'll look at three items in this short presentation.

01:54.700 --> 01:56.900
Their use cases, their approach,

01:56.900 --> 01:59.580
what we have in this open source project,

01:59.580 --> 02:02.500
and implementation.

02:02.500 --> 02:08.140
First, let's look at their tutorials.

02:08.140 --> 02:09.780
If you look at the tutorials,

02:09.780 --> 02:13.420
you often want to explain something by example.

02:13.420 --> 02:15.660
I think we can look at this very,

02:15.660 --> 02:17.300
let's say simple case,

02:17.300 --> 02:23.180
we are actually using some real live or the SAS out there,

02:23.180 --> 02:26.620
which is provides a very simple database where we can

02:26.620 --> 02:31.620
push some simple JSON object.

02:31.620 --> 02:35.380
We can go ahead and run it.

02:35.380 --> 02:37.540
Actually, what happens in this case,

02:37.540 --> 02:46.780
well, it does interaction as described above.

02:46.780 --> 02:51.460
Then sends their object to the database.

02:51.460 --> 02:56.420
Well, what we can also do is to go ahead and

02:56.420 --> 03:06.060
go ahead and to modify that and run.

03:06.060 --> 03:14.780
Then we can see this object was stored.

03:14.780 --> 03:17.980
Now, we want to demo the Cloud API.

03:17.980 --> 03:20.900
In this case, to play with it,

03:20.900 --> 03:29.780
we can go ahead and also use the get one to play with it somewhere.

03:29.780 --> 03:33.460
Let's say you have a second message and we have,

03:33.460 --> 03:35.060
and if you can say,

03:35.060 --> 03:39.140
is there like some message number 45?

03:39.140 --> 03:43.940
We can see, well, it's not there.

03:43.940 --> 03:49.620
Again, if you really want to experiment and play what works

03:49.620 --> 03:51.380
and how it works,

03:51.380 --> 03:55.980
that can be the very beautiful way to do it.

03:55.980 --> 04:02.380
Another cool way what we found it's being used

04:02.380 --> 04:09.140
is their release nodes.

04:09.340 --> 04:13.860
What we have in this case is this example.

04:13.860 --> 04:16.580
If you look at the Golang,

04:16.580 --> 04:20.340
they have just made recently very important changes,

04:20.340 --> 04:28.900
how the variables operate as related to coroutines.

04:28.900 --> 04:30.380
If you look in this case,

04:30.380 --> 04:36.140
that makes it look like a little bit counter-intuitive.

04:36.140 --> 04:40.100
We have coroutines called in the loop,

04:40.100 --> 04:47.980
and for some reason they are not showing different loop counters.

04:47.980 --> 04:52.500
Well, in Golang 1.22, that was fixed.

04:52.500 --> 04:58.620
If you guys want to showcase their feature in the release

04:58.620 --> 04:59.820
don and the commentations,

04:59.820 --> 05:05.140
but really let people to explore and put the holes,

05:05.140 --> 05:08.220
in this case I think that's a wonderful tool.

05:08.220 --> 05:09.740
I'm not sure about you,

05:09.740 --> 05:12.580
I often then read in some features,

05:12.580 --> 05:14.260
I do a lot of work with databases,

05:14.260 --> 05:17.020
and they say, hey, we implemented that new feature,

05:17.020 --> 05:18.260
and I wanted to put a hole,

05:18.260 --> 05:20.300
oh, did you implement that option,

05:20.300 --> 05:22.300
or does it work in this way?

05:22.300 --> 05:26.300
That is a very easy way to play with it

05:26.300 --> 05:29.860
if I would go in through with all their installation process,

05:29.860 --> 05:34.260
and so on and so forth.

05:34.740 --> 05:40.860
Another example we can see is some of their describing,

05:40.860 --> 05:47.340
some of their options in a documentation.

05:47.340 --> 05:50.140
Like if you think in this case as a corral,

05:50.140 --> 05:51.460
everybody could use corral,

05:51.460 --> 05:54.700
it has this wonderful JSON options,

05:54.700 --> 05:59.500
with this very cool, correct,

05:59.500 --> 06:04.220
but also very mouthful example,

06:04.220 --> 06:09.860
which we can also go ahead and provide example for.

06:09.860 --> 06:12.620
Say, hey, that is a JSON object,

06:12.620 --> 06:15.740
we post that to the server,

06:15.740 --> 06:22.820
that is what we get in return.

06:22.820 --> 06:27.460
This HTTP bin, that is actually another like

06:27.580 --> 06:29.460
well-known open source project,

06:29.460 --> 06:33.940
which essentially allows you to post something to that

06:33.940 --> 06:35.860
and then get in return,

06:35.860 --> 06:39.300
what exactly you posted with Othead,

06:39.300 --> 06:40.100
and so on and so forth,

06:40.100 --> 06:45.700
very convenient for debugging.

06:45.700 --> 06:47.420
What you can also do here in this case,

06:47.420 --> 06:49.580
if you are curious to say, well, interesting.

06:49.580 --> 06:52.660
So, corral has the support for JSON.

06:52.660 --> 06:55.780
Does it validates JSON,

06:56.420 --> 06:59.220
or just sends whatever stuff we have?

06:59.220 --> 07:01.620
Well, let's check it out.

07:01.620 --> 07:04.460
Well, we can see in this case,

07:04.460 --> 07:08.940
we are getting the error response back from the server,

07:08.940 --> 07:11.660
rather some sort of corral output,

07:11.660 --> 07:12.780
that means it doesn't.

07:12.780 --> 07:17.300
Again, that can be very helpful to get the user to explore

07:17.300 --> 07:18.940
kind of what he's not very certain,

07:18.940 --> 07:21.500
which may not be quite explained

07:21.900 --> 07:26.700
in this portion of documentation.

07:26.700 --> 07:30.260
Or we can also showcase example,

07:30.260 --> 07:32.620
what existed in the docs,

07:32.620 --> 07:37.380
how we can send the output from file.

07:37.380 --> 07:39.420
Pretty simple here.

07:39.420 --> 07:44.380
Okay. If you are looking at the deep dives,

07:44.380 --> 07:47.500
there may be some interesting in terms of more functionality.

07:47.500 --> 07:48.980
Going to a database,

07:48.980 --> 07:52.380
space where I spent a lot of my time,

07:52.380 --> 07:57.380
let's say we want to describe what is an absurd in SQL.

07:58.900 --> 08:01.540
All right, anybody heard what is absurd?

08:01.540 --> 08:03.460
Right, well, that is something like,

08:03.460 --> 08:06.500
we want to insert the data,

08:06.500 --> 08:09.340
but if it's out there, we want to update it.

08:09.340 --> 08:10.620
The very common.

08:10.620 --> 08:13.100
Okay, so we want to say,

08:13.100 --> 08:17.060
let's say we have this table out there, right?

08:17.060 --> 08:24.660
And we want to go ahead and use their MySQL insert or replace

08:27.380 --> 08:28.140
syntax, right?

08:28.140 --> 08:30.900
Then we want to, well, as I said,

08:30.900 --> 08:38.580
like to update one employee's salary and then also add another

08:38.580 --> 08:43.540
one, well, we can go ahead and run it.

08:43.540 --> 08:45.340
Like why use this as example here?

08:46.220 --> 08:50.380
Because what you can see is we are not showing everything in

08:50.380 --> 08:51.060
example, right?

08:51.060 --> 08:55.020
We are working with some sort of like a seed data which is,

08:58.180 --> 09:01.260
well, was pre-created as a part of a previous scenario, right?

09:01.260 --> 09:03.700
Which is very common.

09:03.700 --> 09:06.940
Here is also another example of the same thing,

09:06.940 --> 09:11.140
but with Postgres, right?

09:11.140 --> 09:13.380
Where we're using a different scenario, right?

09:13.380 --> 09:17.620
And you may ask, well, okay, this is how it works,

09:17.620 --> 09:23.900
but I know also the Postgres SQL has a syntax on conflict

09:23.900 --> 09:25.900
do nothing, right?

09:25.900 --> 09:29.220
So what would that be if that's what we do?

09:29.220 --> 09:33.700
Oh, well, in this case, we can see what the Emma's salary, right?

09:33.700 --> 09:36.660
Which was a conflict in row, was not changed.

09:36.660 --> 09:41.420
So again, we can play with those things.

09:41.460 --> 09:44.460
Okay, well, these are kind of setting landscape, I think,

09:44.460 --> 09:47.940
what things can be useful, but now let's look in terms of what

09:47.940 --> 09:54.380
is approach and how it works.

09:54.380 --> 10:00.740
Now, if you think about the tools and the doc creation, right?

10:00.740 --> 10:08.140
You would find what it is not easy to find the good

10:09.140 --> 10:11.140
technical writers, right?

10:11.140 --> 10:13.140
Or documentation offers, right?

10:13.140 --> 10:19.140
And they also can be rather, well, let's go like a selfish

10:19.140 --> 10:20.140
of a time, right?

10:20.140 --> 10:23.140
They don't want to do a lot of useless crap, right?

10:23.140 --> 10:24.140
In this case.

10:24.140 --> 10:28.140
So we want to make sure that writer experience is important,

10:28.140 --> 10:32.140
not just the reader experience, which we already defined,

10:32.140 --> 10:37.140
has one of those interactive playgrounds.

10:38.140 --> 10:42.140
So what approach we took in this project is saying how we can

10:42.140 --> 10:47.140
make it as sort of like a seamless as possible, right?

10:47.140 --> 10:51.140
We don't want to say, hey, you know what, you are going to create

10:51.140 --> 10:55.140
our interactive code playground in completely different tooling,

10:55.140 --> 10:57.140
right, separate from documentation, right?

10:57.140 --> 11:01.140
And then figure out is that going to live in the same version

11:01.140 --> 11:03.140
control, right, and so on and so forth, right?

11:03.140 --> 11:06.140
Or, you know, things like that.

11:06.140 --> 11:10.140
What we want in this case is to have your documentation, right,

11:10.140 --> 11:13.140
which was this, right?

11:13.140 --> 11:18.140
Just as easy as possible, add the ability to run and to edit

11:18.140 --> 11:20.140
and run, right?

11:20.140 --> 11:24.140
So you can say, hey, we added, you can see the run and edit here.

11:24.140 --> 11:27.140
And if I run, you can see what is the output of that

11:27.140 --> 11:29.140
documentation example is.

11:29.140 --> 11:32.140
So how can we approach that?

11:32.140 --> 11:37.140
So it is easy or integration which is easy on writing.

11:37.140 --> 11:41.140
Well, it's actually quite easy.

11:41.140 --> 11:46.140
So what we have is you are writing documentation in the same

11:46.140 --> 11:48.140
format as you got used to, right?

11:48.140 --> 11:52.140
Let's say maybe it's a markup language, as in this example,

11:52.140 --> 11:54.140
or something else.

11:54.140 --> 12:01.140
And then you can embed this like a code API widget.

12:01.140 --> 12:08.140
That widget itself will figure out the previous code block

12:08.140 --> 12:10.140
and make it interactive, right?

12:10.140 --> 12:14.140
So there is no, like, some special thing required,

12:14.140 --> 12:20.140
and that pretty much works in any documentation thing

12:20.140 --> 12:24.140
which already exists, right?

12:24.140 --> 12:27.140
So you can see that example here.

12:27.140 --> 12:38.140
So the code which existed here just gets interactive.

12:38.140 --> 12:43.140
So, well, of course, hello world is always easier, right?

12:43.140 --> 12:48.140
Let's look at some more complicated examples.

12:48.140 --> 12:53.140
One, I think, which is very important is the template

12:53.140 --> 12:54.140
approach, right?

12:54.140 --> 12:57.140
I think what I briefly mentioned already,

12:57.140 --> 13:00.140
if I want to show something like this, right?

13:00.140 --> 13:07.140
That is like a relatively, you know, complicated query, right?

13:07.140 --> 13:14.140
For that to be meaningful, I also need to pre-generate table

13:14.140 --> 13:17.140
in this case, which I probably do not want to have

13:17.140 --> 13:19.140
on my documentation thing.

13:19.140 --> 13:23.140
And this is designed done by providing a template.

13:23.140 --> 13:27.140
So a template in this case is basically something which is

13:27.140 --> 13:34.140
run before the scenario is done, right?

13:34.140 --> 13:37.140
And in this case, I can write some text and, hey,

13:37.140 --> 13:39.140
I created a table, but I'm not really specifically

13:39.140 --> 13:41.140
final comments because there's a irrelevant in this case.

13:41.140 --> 13:46.140
I populated with some data and then I have a code,

13:46.140 --> 13:52.140
the code which was created before, right?

13:52.140 --> 13:57.140
That is how template would look like.

13:57.140 --> 14:04.140
So I can highlight, right, where exactly in the context,

14:04.140 --> 14:09.140
I want to run that code which was,

14:09.140 --> 14:13.140
which is interactive part of the documentation.

14:13.140 --> 14:21.140
Okay, so here is another thing which you will find quite helpful.

14:21.140 --> 14:25.140
So if you are building some sort of tutorial, right,

14:25.140 --> 14:28.140
building the tutorial, right, you would often want to say,

14:28.140 --> 14:35.140
hey, there is actually multiple steps where I need the user

14:35.140 --> 14:39.140
to go through them one after another.

14:39.140 --> 14:41.140
And that is an example here.

14:41.140 --> 14:45.140
What you can see is what we are defining the function

14:45.140 --> 14:50.140
in a one-code block and then we are using that function

14:51.140 --> 14:54.140
in a in a another code block, right?

14:54.140 --> 14:58.140
We can, and I'll show you in a second, define dependency

14:58.140 --> 15:00.140
between those code blocks.

15:00.140 --> 15:04.140
That means when you are running this second section,

15:04.140 --> 15:07.140
the first section would always be run,

15:07.140 --> 15:12.140
like let me, I don't know, let's say break this code, right?

15:12.140 --> 15:15.140
For example, and then I can go ahead and run the second one.

15:15.140 --> 15:19.140
It says, oh, well, you know, things got broken, right,

15:19.140 --> 15:22.140
on the previous stuff, right?

15:22.140 --> 15:27.140
And how that works is what we identify,

15:27.140 --> 15:32.140
we refer to the first one as a cell number two, right?

15:32.140 --> 15:37.140
And then identify the second snippet as a cell

15:37.140 --> 15:40.140
which depends on a cell number two, right?

15:40.140 --> 15:43.140
That means pretty much that the content of that cell

15:43.140 --> 15:46.140
is going to be run.

15:47.140 --> 15:50.140
Then the second cell is run, right?

15:50.140 --> 15:52.140
Even if you, as users, don't click run, right?

15:52.140 --> 15:55.140
If you say, hey, I don't want to go through

15:55.140 --> 15:57.140
all those like five steps in tutorial,

15:57.140 --> 15:59.140
I want to start with step number six

15:59.140 --> 16:01.140
because that is where the real meet happens.

16:01.140 --> 16:03.140
You can do it, right?

16:03.140 --> 16:05.140
You can just jump in the middle.

16:05.140 --> 16:06.140
Okay.

16:06.140 --> 16:12.140
So finally, so how does that all things work?

16:12.140 --> 16:20.140
Well, there are actually a couple of ways it can work.

16:20.140 --> 16:25.140
One is we can have a browser playground

16:25.140 --> 16:30.140
and then a sandbox environment, right?

16:30.140 --> 16:37.140
Which is pretty much docker-based, right?

16:37.140 --> 16:41.140
And that's where we can use browser API,

16:41.140 --> 16:44.140
JavaScript and whatever.

16:44.140 --> 16:49.140
The second approach we can have also is web assembly, right?

16:49.140 --> 16:51.140
So if you can say, hey, you know what?

16:51.140 --> 16:56.140
We want no kind of serocomponent, right?

16:56.140 --> 16:59.140
It runs completely in a browser.

16:59.140 --> 17:01.140
We can do that, but probably in web assembly,

17:01.140 --> 17:03.140
it can be sometimes heavy, right?

17:03.140 --> 17:05.140
Especially saying, well, you know what?

17:05.140 --> 17:08.140
I want to showcase how, you know, like a Postgres

17:08.140 --> 17:12.140
operates when, you know, getting all that Postgres pulled in,

17:12.140 --> 17:14.140
the assembly started, right?

17:14.140 --> 17:17.140
That may not be the best experience, right?

17:17.140 --> 17:21.140
Especially with slower connections.

17:21.140 --> 17:31.140
So that is where docker, right, can be very helpful, right?

17:31.140 --> 17:37.140
So with docker, you can implement whatever you want

17:37.140 --> 17:46.140
and the setup of this service is an open source project, right?

17:46.140 --> 17:49.140
So you can roll your own as well.

17:49.140 --> 17:54.140
There is a variety of existing playgrounds

17:54.140 --> 18:00.140
which are supported at, you know,

18:00.140 --> 18:01.140
core API website, right?

18:01.140 --> 18:07.140
Which can get you started pretty quickly.

18:07.140 --> 18:11.140
Yes, so here are some examples,

18:11.140 --> 18:17.140
and I will of course share, well, slides if you actually slide there.

18:17.140 --> 18:21.140
The online, this is a live tutorial.

18:21.140 --> 18:27.140
You can see there's like a number of projects already started to use that

18:27.140 --> 18:31.140
with, you know, pretty good success.

18:31.140 --> 18:42.140
And you can see with core IP.org showcase that is where all the examples exist, right?

18:42.140 --> 18:45.140
Here are specific projects, right?

18:45.140 --> 18:47.140
There are kind of two sub-repositories.

18:47.140 --> 18:51.140
One is for JavaScript kind of client side,

18:51.140 --> 18:54.140
and other four, the server side, again, it's split

18:54.140 --> 19:01.140
because you may just want to use their client side

19:01.140 --> 19:03.140
if you're using like JavaScript or something

19:03.140 --> 19:05.140
where you don't need a server component.

19:05.140 --> 19:11.140
And yet, if you want to ask some more questions for Anton, right,

19:11.140 --> 19:18.140
or get some feedback, Antonz.org is his website.

19:18.140 --> 19:25.140
So that's all I had, and I would be happy to answer questions

19:25.140 --> 19:32.140
or get out of the way because I think I'm the last thing standing between you and your viewers.

19:32.140 --> 19:39.140
Yeah, we started with docs code, and now we've gone to code docs.

19:39.140 --> 19:42.140
Any questions?

19:42.140 --> 19:46.140
You don't understand, the back-end is also part of this project or not?

19:46.140 --> 19:53.140
Yes, yes, so in this case, code IP, that is your Docker back-end, right?

19:53.140 --> 20:02.140
Code IP JS, that's your, I think, so both of them are open source.

20:02.140 --> 20:18.140
What do you mean?

20:32.140 --> 20:40.140
Oh, you mean in terms of what people run, right, what kind of, so not right now.

