WEBVTT

00:00.000 --> 00:29.000
Okay, so now we have both students.

00:29.000 --> 00:31.000
So now we have both speakers here.

00:31.000 --> 00:34.000
We can start the talk, the next talk.

00:34.000 --> 00:37.000
The talk is going to be about a slow migration from Django

00:37.000 --> 00:40.000
templates to Vue and GraphQL.

00:40.000 --> 00:46.000
So Jonathan, Jonathan, Jonathan and Dominic Georg,

00:46.000 --> 00:50.000
both Germans, they're going to talk about a system,

00:50.000 --> 00:53.000
Alexis, which is a school information system,

00:53.000 --> 00:57.000
which was apparently written in using Python Django

00:57.000 --> 01:01.000
templates and they now ported it to Vue and GraphQL.

01:01.000 --> 01:04.000
So give them a warm welcome and thank you very much.

01:04.000 --> 01:09.000
Thank you.

01:09.000 --> 01:12.000
Can we get the microphone for the other speakers?

01:12.000 --> 01:14.000
Thank you very much.

01:14.000 --> 01:24.000
These were speakers, the last one is the prize speaker.

01:24.000 --> 01:28.000
Hello, first them and Python Deafroom.

01:28.000 --> 01:31.000
We are the Alexis project.

01:31.000 --> 01:36.000
That's the all Libra school information system and we want

01:36.000 --> 01:41.000
to tell you how we transitioned from a Django app,

01:41.000 --> 01:45.000
with a templated web front end to an interactive web front

01:45.000 --> 01:50.000
end as the needs arose for one of those in our project

01:50.000 --> 01:53.160
and how we did it incrementally.

01:56.600 --> 02:01.600
I'm Michael Bauer and I'm a developer at Alexis

02:02.240 --> 02:05.120
and I work mostly on the new frontend

02:05.120 --> 02:07.320
and the new features we are enabled with that.

02:07.320 --> 02:11.840
So with that let's introduce the rest of the team.

02:11.840 --> 02:12.840
More of the team.

02:13.840 --> 02:15.360
Yeah, my name is Nick.

02:15.360 --> 02:19.920
I'm more or less one of the founders

02:19.920 --> 02:21.240
of the project.

02:21.240 --> 02:25.200
I started tinkering on the school management system.

02:25.200 --> 02:26.960
When I was still at school,

02:26.960 --> 02:29.960
I don't think I can remember when that was.

02:30.800 --> 02:33.920
Today, yeah.

02:36.280 --> 02:38.440
I don't know what my role is on the project right now,

02:38.440 --> 02:40.960
but someone might know.

02:40.960 --> 02:41.800
So.

02:42.800 --> 02:44.000
I have a microphone on my own,

02:44.000 --> 02:45.400
so I don't need to microphone.

02:45.400 --> 02:46.240
That's decent.

02:46.240 --> 02:47.080
So I'm Jonathan.

02:47.080 --> 02:49.240
I'm the lead developer with the Alexis project

02:49.240 --> 02:51.680
and I'm coordinating the dev process

02:51.680 --> 02:53.440
and everything connected to this.

02:54.800 --> 02:57.240
Okay, so let's get started with the talk.

02:57.240 --> 02:59.120
What's about Alexis?

02:59.120 --> 02:59.960
What is Alexis?

02:59.960 --> 03:02.720
This is a free and open source school information system

03:02.720 --> 03:04.480
and it has a free software license,

03:04.480 --> 03:07.360
a European public license.

03:07.360 --> 03:11.680
So it's thought of as an alternative for schools

03:11.680 --> 03:14.880
that they have a free option to manage themselves

03:14.880 --> 03:18.760
and organize themselves.

03:19.680 --> 03:22.200
It's a modular system,

03:22.200 --> 03:25.880
so any school can just take what they need

03:25.880 --> 03:29.480
and don't have to use the whole system.

03:29.480 --> 03:33.880
And it's also done in such a way

03:33.880 --> 03:38.040
that it complements existing solutions.

03:38.040 --> 03:39.960
So we're only focused on the parts

03:39.960 --> 03:42.920
that aren't there yet in a free software way.

03:44.360 --> 03:46.960
It's developed by software developers,

03:46.960 --> 03:48.640
but also students and teachers.

03:48.640 --> 03:53.200
So we're working together with pilot schools

03:53.200 --> 03:56.400
and already have it in use there.

03:59.440 --> 04:02.840
The main Alexis features,

04:02.840 --> 04:04.720
of course they're divided into these components,

04:04.720 --> 04:06.760
but this sort of the main components

04:06.760 --> 04:08.640
is the base data management.

04:11.000 --> 04:12.440
It's the basis of the schools,

04:12.440 --> 04:16.240
like we have classes and pupils and teachers and so on.

04:17.120 --> 04:19.480
Then we have a timetable system.

04:19.480 --> 04:23.280
It's like a calendar system just for schools.

04:23.280 --> 04:25.760
So you can create timetables

04:25.760 --> 04:28.640
and you can serve them to the students.

04:28.640 --> 04:32.440
So each student has its own personalized timetable.

04:32.440 --> 04:34.720
Also the teachers have them.

04:34.720 --> 04:37.800
And there's a digital class register

04:37.800 --> 04:40.160
to take all the notes and information

04:40.160 --> 04:42.440
for classes seating plans.

04:42.440 --> 04:47.440
So you can design and show seating plans

04:48.200 --> 04:50.640
for the classrooms.

04:50.640 --> 04:53.400
And it also integrates with other services.

04:53.400 --> 04:55.960
We have a matrix integration,

04:55.960 --> 04:58.560
a O of integration,

04:58.560 --> 05:02.000
LDAP and CSV,

05:02.000 --> 05:04.720
V import, export.

05:04.720 --> 05:09.720
And also we just have a calendar system inside Alexis

05:10.720 --> 05:15.320
that's producing standard Eichel calendar feed.

05:15.320 --> 05:20.320
So there's lots of choice

05:21.360 --> 05:26.360
in which ant devices are used to hook up to Alexis.

05:28.120 --> 05:30.240
And it's a quite universal system.

05:31.440 --> 05:34.240
There's also provisions for student ID cards

05:34.240 --> 05:37.240
and inventory management in schools.

05:38.240 --> 05:42.040
With that I would like to give over to Nick.

05:42.040 --> 05:45.600
He is presenting you the telecom technology stack.

05:45.600 --> 05:47.240
Yeah, thank you.

05:51.240 --> 05:53.120
Okay, yeah.

05:53.120 --> 05:56.440
So thanks for making this nice graphic

05:56.440 --> 05:59.320
to help me know how this works.

06:00.520 --> 06:03.280
Jonathan, yeah, well, our legacy code base

06:03.280 --> 06:06.720
was a traditional Django project

06:06.720 --> 06:11.720
and with all the modules as Django applications.

06:13.480 --> 06:16.640
When we started basically everyone was doing

06:16.640 --> 06:20.240
server side rendering with all the nice templating features

06:20.240 --> 06:21.520
of the Django framework.

06:22.520 --> 06:24.840
To introduce you to the rest of the tech stack

06:24.840 --> 06:26.600
on top of Django,

06:27.680 --> 06:31.080
we use PostgreSQL quite heavily.

06:32.200 --> 06:35.240
There's a salary task broker and Redis

06:35.240 --> 06:39.880
for caching and for synchronizing several nodes

06:39.880 --> 06:43.000
when running Alexis in a multi-node setup.

06:45.080 --> 06:48.320
Yeah, and for the front end parts,

06:48.320 --> 06:52.040
we, as I already said, we used the Django templating engine

06:53.000 --> 06:58.000
and some not very well integrated front end utilities

07:00.560 --> 07:02.840
like the materialized CSS framework

07:02.880 --> 07:07.880
which at the time somewhat allowed for making

07:09.440 --> 07:12.920
yeah, modern interfaces following the material design

07:12.920 --> 07:17.920
standards, but it started to bit rot quite quickly here

07:19.160 --> 07:24.160
and Jonathan will give you some idea about that later.

07:27.360 --> 07:29.440
Okay, so that was the legacy tech stack

07:29.440 --> 07:33.360
and where is my name somewhere else here?

07:33.360 --> 07:34.600
Do I have to say anything more?

07:34.600 --> 07:39.040
Yeah, you can see a page in the legacy tech stack.

07:39.040 --> 07:40.200
So you have to.

07:40.200 --> 07:41.520
Yes, yes, nice.

07:41.520 --> 07:45.320
Little overview of how it looked in the past

07:45.320 --> 07:49.880
and yeah, I have to say then the problems started.

07:49.880 --> 07:53.480
We occurred some very ugly bugs like

07:53.480 --> 07:55.600
I think users described to us there

07:55.600 --> 07:58.320
if there was like a select menu,

07:59.240 --> 08:01.080
depressed an item in the select menu

08:01.080 --> 08:04.880
and but actually was selected the item above

08:04.880 --> 08:06.960
or below this item.

08:06.960 --> 08:10.040
So that was not so good

08:10.040 --> 08:13.680
because many users were using iPads.

08:13.680 --> 08:17.760
And in addition to strange bugs like this,

08:18.840 --> 08:22.440
there was also a problem with maintenance,

08:22.440 --> 08:27.440
with materialized as you can see by this issues here.

08:27.480 --> 08:29.840
So yeah, there was a big discussion

08:29.840 --> 08:33.640
whether materialized will be developed any further.

08:35.840 --> 08:39.720
And in addition to these problems,

08:39.720 --> 08:43.520
there was also a request for new features.

08:43.520 --> 08:47.880
As we spoke about time table planning or sitting plans,

08:47.880 --> 08:52.720
we needed some way to do this highly dynamic features

08:52.720 --> 08:56.760
in a better way because the control of time table planning

08:56.800 --> 08:58.880
is a very complicated thing.

08:58.880 --> 09:01.840
Also these customizable calendar views

09:01.840 --> 09:05.160
and auto saving views where you don't need

09:05.160 --> 09:06.800
to press the save button.

09:07.920 --> 09:12.560
It all wasn't possible anymore with our old front end.

09:12.560 --> 09:15.280
So we had an idea Nick will present to you.

09:17.880 --> 09:22.880
Okay, so yeah, probably many of you know that

09:23.880 --> 09:27.760
it's now the new thing to separate front end

09:27.760 --> 09:32.000
and back end entirely and make a nice shiny mobile app

09:32.000 --> 09:33.080
or whatever.

09:34.640 --> 09:39.640
And yeah, Jonathan more seriously already gave a few hints

09:40.480 --> 09:43.480
about why we would want to do that.

09:43.480 --> 09:48.160
I think there's one other challenge that we faced.

09:48.160 --> 09:51.440
Did you mention offline capabilities and caching?

09:52.440 --> 09:55.840
No, because you know, Alexis is used in schools

09:55.840 --> 09:59.480
and things might be different in other parts of the world

09:59.480 --> 10:02.400
but in Germany only two things are certain

10:02.400 --> 10:04.040
in the school system.

10:04.040 --> 10:07.000
Namely that your mobile network will not work at school

10:07.000 --> 10:09.280
and that's the wifi won't work at school.

10:10.600 --> 10:12.120
These two things are certain

10:12.120 --> 10:14.320
and therefore teachers always complain

10:14.320 --> 10:18.000
that they could not use the server side rendered views

10:18.000 --> 10:20.360
when they had no connection to the server.

10:20.400 --> 10:24.320
So I think this was more or less one of the biggest

10:24.320 --> 10:26.440
challenges we tried to solve.

10:26.440 --> 10:29.860
So separating the front end actually makes sense here.

10:31.520 --> 10:33.360
Okay, so what we wanted to do,

10:33.360 --> 10:35.000
we wanted to replace materialize

10:35.000 --> 10:40.000
because materialize was stuck somewhere in 2015

10:40.920 --> 10:45.920
and wasn't really developed, it was abandoned.

10:47.280 --> 10:48.920
We had a few patches on top of that,

10:48.920 --> 10:50.440
I think somewhere even upstream

10:50.440 --> 10:55.440
but it didn't get better and it lacked the dynamics

10:55.480 --> 11:00.480
that we needed for a really new shiny intuitive interface.

11:03.160 --> 11:06.440
Yeah, so what are reactive?

11:06.440 --> 11:07.280
All right, yeah.

11:09.760 --> 11:11.720
Yeah, reactive front end libraries

11:12.720 --> 11:17.320
and yeah, to make the interface,

11:17.320 --> 11:22.320
yeah, to not have it reload on every single interaction

11:23.840 --> 11:28.840
and yeah, and also a very important idea.

11:29.080 --> 11:31.160
Alexis provides a very good foundation

11:31.160 --> 11:33.720
for handling organizational data at schools

11:33.720 --> 11:38.720
but yeah, we want to tailor to the needs

11:38.800 --> 11:43.040
of different schools, of different types of schools.

11:43.040 --> 11:47.560
The ideas they have, one of our most important claims

11:47.560 --> 11:50.560
that we share with schools when we expand

11:50.560 --> 11:53.440
the benefits of free software is that we can make

11:53.440 --> 11:55.080
the software work like the school works

11:55.080 --> 11:57.840
and we can transform the software

11:57.840 --> 11:59.560
instead of transforming the school.

11:59.560 --> 12:04.560
So on top of the foundations for organizational data

12:05.280 --> 12:08.560
management, the idea was now that if we could

12:08.560 --> 12:11.400
replace the front end for some parts,

12:11.400 --> 12:14.600
like make a different class register

12:14.600 --> 12:18.360
for an elementary school because they have

12:18.360 --> 12:21.520
very different needs, we do not have to replace

12:21.520 --> 12:26.520
the data structures, the models and the APIs

12:26.960 --> 12:29.760
but we can make a front end that is more tailored

12:29.760 --> 12:31.040
to the needs.

12:34.600 --> 12:35.440
Yeah.

12:36.320 --> 12:37.640
Okay.

12:37.640 --> 12:38.480
Yeah.

12:38.480 --> 12:40.560
This is not my part anymore.

12:40.560 --> 12:41.400
No.

12:41.400 --> 12:46.400
So we then decided on how we want to do our new

12:46.920 --> 12:49.360
technonesis tech so we, as we said,

12:49.360 --> 12:52.440
we just took the backend set, okay, that's our backend

12:52.440 --> 12:56.440
and then we decided we want to do an interactive front end

12:56.440 --> 13:00.440
with UJS and the front end library beautify

13:00.440 --> 13:04.440
and some other UJS libraries and we want those both parts

13:05.440 --> 13:10.440
at communicate and yeah, we are a graph API.

13:10.760 --> 13:15.760
And so this was our plan and there were some challenges

13:15.880 --> 13:16.920
with this plan.

13:18.440 --> 13:20.800
Oh, just a graph API.

13:20.800 --> 13:24.480
So, yeah, let's see again.

13:25.880 --> 13:27.800
Thanks for helping me keep up with my tradition.

13:27.800 --> 13:30.480
I always give one very good talk before BiaNite

13:30.480 --> 13:32.720
and one very bad talk after BiaNite.

13:33.720 --> 13:34.560
Okay.

13:34.560 --> 13:35.880
So, yeah.

13:39.880 --> 13:44.880
So as we already said, the platform is supposed

13:47.560 --> 13:48.520
to be very modular.

13:48.520 --> 13:51.240
It consists of, don't know, do we have some figure

13:51.240 --> 13:55.400
how many jungle apps we had at that point

13:55.400 --> 13:57.520
when we started the migration?

13:57.520 --> 13:59.680
Like around 15 I think.

14:00.680 --> 14:05.680
Like 50 apps that could be loaded dynamically

14:06.400 --> 14:09.920
into the jungle project.

14:09.920 --> 14:12.600
We actually had quite a bit of magic in there

14:12.600 --> 14:17.600
to discover the modules of the jungle apps dynamically.

14:17.680 --> 14:22.600
So the administrators who deploy servers for schools

14:22.600 --> 14:26.920
could simply install the Python packages needed

14:26.920 --> 14:30.200
for the system they want to put together

14:30.200 --> 14:34.080
and then everything falls into place

14:34.080 --> 14:37.000
in kind of some black magic way.

14:37.920 --> 14:41.520
And now this did not turn out so well

14:41.520 --> 14:44.840
for separating the front end

14:44.840 --> 14:48.800
because normally when we separate the front end,

14:48.800 --> 14:52.400
we want to have one JavaScript or whatever application

14:52.400 --> 14:54.440
that is delivered to the clients,

14:54.440 --> 14:59.000
nicely bundled with whatever JavaScript bundler

14:59.000 --> 15:00.400
is the current type.

15:01.560 --> 15:04.960
And then it is one JavaScript application.

15:04.960 --> 15:07.760
We could not do this because we do not know

15:07.760 --> 15:10.480
which parts of the system are used and in which versions.

15:10.480 --> 15:14.360
This might be very flexible for every school.

15:14.360 --> 15:19.360
So we need to bundle the JavaScript front end application

15:21.000 --> 15:23.440
on the machine where Lexus is deployed.

15:23.440 --> 15:24.280
Yeah?

15:24.960 --> 15:25.800
10 minutes left.

15:25.800 --> 15:26.880
Oh, yeah, thank you.

15:26.880 --> 15:29.480
Okay, and you need these 10 minutes?

15:29.480 --> 15:30.320
Probably.

15:30.320 --> 15:31.160
Probably, okay.

15:32.480 --> 15:33.320
Yeah.

15:33.320 --> 15:37.600
So the right way would be you have one front end application,

15:37.600 --> 15:38.840
one backend application.

15:38.840 --> 15:41.920
They are more or less separated in development.

15:41.920 --> 15:45.240
They could be developed independently,

15:45.240 --> 15:50.240
but we cannot do this because, yeah, what's?

15:50.880 --> 15:51.760
Okay.

15:51.760 --> 15:56.760
I have to switch the display so you can see this.

15:59.880 --> 16:03.880
Okay, this is where we actually generate parts

16:03.880 --> 16:06.960
of the bundling configuration for VIT

16:06.960 --> 16:09.120
because when we build the bundle,

16:09.120 --> 16:11.440
we know which applications are there.

16:11.440 --> 16:14.880
We have the JavaScript front end code bundled

16:14.880 --> 16:19.880
with the Python packages in the same repository

16:21.960 --> 16:24.800
and at deployment time,

16:24.800 --> 16:27.440
we need to extract the JavaScript front end code

16:27.440 --> 16:29.720
and let it all fall in place like we did

16:29.720 --> 16:31.760
with the Python applications,

16:31.760 --> 16:34.840
which was sort of a major challenge.

16:36.280 --> 16:37.600
So, yeah.

16:39.080 --> 16:42.360
Yeah, the microphone is developing, that's good.

16:42.360 --> 16:44.280
And then we faced another challenge.

16:44.280 --> 16:47.600
We said, okay, we weren't able to migrate

16:47.600 --> 16:49.560
all these apps at once.

16:49.560 --> 16:53.680
So we had to find a way to integrate the old front end

16:53.680 --> 16:55.240
with the new front end.

16:55.240 --> 16:57.640
And what you can see here on the Bima

16:57.640 --> 17:02.360
is like how the new front end does look like.

17:02.360 --> 17:05.120
So there is no real optical difference

17:05.120 --> 17:07.960
with the old front end, but it's the new front end

17:07.960 --> 17:12.960
and we have had to find a way to put those old pages

17:14.080 --> 17:16.640
somewhere in this new front end.

17:16.640 --> 17:20.240
And if I just say the word iframe,

17:20.240 --> 17:23.320
I probably get some scary faces here.

17:23.320 --> 17:28.320
So, yeah, we made it and just put an iframe somewhere in there

17:29.800 --> 17:33.480
and then we built some glue, which takes the URL,

17:33.480 --> 17:36.720
which is actually called and then called

17:36.720 --> 17:38.880
the different URL with a prefix

17:38.880 --> 17:43.560
where the old site lives and integrates with in the front end.

17:43.560 --> 17:46.840
And that looks like this.

17:46.840 --> 17:51.740
So what you see within this container is an old page.

17:51.740 --> 17:54.200
And what you see around this container

17:54.200 --> 17:55.920
is the new front end.

17:55.920 --> 18:00.920
So if you can see which URL is dated here,

18:01.400 --> 18:04.360
it has the prefix Django.

18:04.360 --> 18:08.200
So it's within the iframe and if I click the button,

18:08.200 --> 18:11.600
the iframe will navigate to this Django URL.

18:12.600 --> 18:16.360
I will do this and you can see that magically

18:16.360 --> 18:21.360
the actual URL from our new front end is also updated.

18:21.560 --> 18:26.560
So it's a kind of, yeah, ugly magic.

18:26.680 --> 18:31.160
And this also goes one way further.

18:31.160 --> 18:35.480
So this is an old view within the new front end

18:35.480 --> 18:38.960
and now I click one of these links

18:38.960 --> 18:43.280
and it's navigating to a new view in our new front end.

18:43.280 --> 18:48.280
So this needed a large bunch of glue

18:49.160 --> 18:50.800
to put all this together,

18:50.800 --> 18:55.800
but now it's working with some exceptions.

18:57.920 --> 18:59.640
Nick will come too.

18:59.640 --> 19:01.160
Some exceptions, yeah.

19:03.520 --> 19:07.400
So like this iframe with a server-side URL page

19:07.400 --> 19:10.880
in the new view.js front end,

19:10.880 --> 19:13.200
they are always communicating using

19:14.440 --> 19:17.160
some sort of JavaScript message passing.

19:17.160 --> 19:19.280
I did not yet understand.

19:20.880 --> 19:22.720
Okay, so what are we doing here?

19:22.720 --> 19:26.760
This is the dynamically generated bundler config

19:26.760 --> 19:27.600
or something.

19:27.600 --> 19:29.600
Yes, it is.

19:29.600 --> 19:33.360
I don't think we have the time to go into detail about this.

19:33.360 --> 19:34.960
And oh, whoa, there's a video.

19:35.360 --> 19:36.800
Michael is fine.

19:36.800 --> 19:38.240
Yeah, I had to Michael.

19:38.240 --> 19:39.080
Yeah.

19:39.080 --> 19:41.160
Here you can see the new front end in action

19:41.160 --> 19:42.720
and why we did this transition

19:42.720 --> 19:46.800
because we wanted to have more interactivity

19:46.800 --> 19:50.480
and here you see how you can design a timetable now

19:50.480 --> 19:52.320
with the new view front end.

19:53.280 --> 19:57.240
Someone's inserting lessons into the timetable

19:57.240 --> 20:00.600
and it's highly dynamic and all just works.

20:01.080 --> 20:06.080
So we just want to tell you about new problems

20:15.760 --> 20:19.160
and I think this last part will also be done by Nick.

20:20.200 --> 20:22.460
So, oh, yes, this problem.

20:24.800 --> 20:26.520
Okay, we already talked about iframes

20:26.520 --> 20:27.640
and how they communicate

20:27.680 --> 20:32.160
or sometimes we all know communication fails

20:32.160 --> 20:36.640
and that you have Alexis and Alexis and Alexis.

20:36.640 --> 20:38.800
And I think this visualizes quite well

20:38.800 --> 20:42.560
what sort of trouble this slow migration caused for us

20:42.560 --> 20:47.560
but we did not see this too often in the recent time, right?

20:47.840 --> 20:51.400
Mm, not too often.

20:51.400 --> 20:52.640
I don't think so.

20:52.640 --> 20:54.600
Prove me wrong, okay, thank you.

20:55.600 --> 20:57.120
We called it mini Alexis.

20:57.120 --> 20:59.920
Now we call it Alexis Matroszka situation.

21:01.520 --> 21:03.120
If you know what this means.

21:03.120 --> 21:06.360
So, yeah, it did just a good.

21:06.360 --> 21:08.200
It pops up every month again.

21:08.200 --> 21:10.600
Every other month here.

21:10.600 --> 21:13.400
All right, so now we have ugly front end bugs

21:13.400 --> 21:16.480
for the integration and all of this will be sorted out

21:16.480 --> 21:18.120
once we get all applications

21:18.120 --> 21:20.320
and all views migrated to the new front end.

21:21.320 --> 21:25.000
The JavaScript ecosystem shares some of the same problems

21:25.000 --> 21:28.040
we had with materialized situation

21:28.040 --> 21:30.480
because you know there's beautify three

21:30.480 --> 21:33.960
and it's pretty neat.

21:33.960 --> 21:35.680
We needed to migrate to view three.

21:35.680 --> 21:39.120
View two has been deprecated for two years or something.

21:40.480 --> 21:41.520
Pardon?

21:41.520 --> 21:45.880
This year, this year, this is not too far in the past.

21:45.880 --> 21:47.360
Okay, but it's deprecated.

21:47.400 --> 21:49.680
And beautify three is cool

21:49.680 --> 21:52.000
and we would want to migrate to it,

21:52.000 --> 21:54.600
but it's still missing the calendar component,

21:54.600 --> 21:57.400
the calendar date picker component, right?

21:57.400 --> 22:01.400
And we are basically the only thing Alexis ever does

22:01.400 --> 22:02.240
is handle dates.

22:02.240 --> 22:06.720
So this is somewhat of short, some sort of showstopper here.

22:08.080 --> 22:09.640
We hope that this will be sorted out.

22:09.640 --> 22:11.520
I think the release date for the date picker

22:11.520 --> 22:13.200
is moved every quarter or year

22:13.200 --> 22:14.960
to the next quarter of the year of some,

22:14.960 --> 22:17.360
but we will see how this works out.

22:19.040 --> 22:22.840
Yeah, of course there's an easy solution to the problem

22:22.840 --> 22:25.520
and an obvious solution here

22:25.520 --> 22:29.000
because we could just do this, right?

22:32.280 --> 22:33.480
No tomatoes for me?

22:35.400 --> 22:36.840
To get some new problems.

22:38.120 --> 22:40.840
And so we are always shifting from one set of problems

22:40.840 --> 22:42.200
to the next set of problems.

22:42.200 --> 22:44.480
Okay, thanks for bearing with us.

22:45.400 --> 22:47.320
I think I'm slowly getting awake.

22:47.320 --> 22:48.760
You can find us in the hallway track

22:48.760 --> 22:53.760
if you want to get more information and less chaos maybe.

22:55.680 --> 22:58.960
All right, do you have any last words, Jonathan?

22:58.960 --> 23:02.160
I think we have like three minutes for questions

23:02.160 --> 23:03.120
if I'm right.

23:03.120 --> 23:07.000
So maybe if someone wants to ask a question,

23:07.000 --> 23:10.160
otherwise we also will be available via email.

23:10.160 --> 23:12.000
So yeah.

23:12.400 --> 23:13.240
Any question?

23:16.080 --> 23:16.920
Thank you.

23:23.160 --> 23:24.320
I have a question.

23:24.320 --> 23:27.640
Why did you think about GraphQL instead of something

23:27.640 --> 23:31.720
like Django's framework and exposing APIs and using that

23:31.720 --> 23:34.600
instead of adding a new layer in between the front end

23:34.600 --> 23:35.760
and the end?

23:38.120 --> 23:41.120
Yeah, well, I think we chose GraphQL.

23:42.680 --> 23:46.920
Because I think the obvious alternative

23:46.920 --> 23:48.840
would be US or something like this.

23:48.840 --> 23:53.080
So, but we chose GraphQL because we were able to select

23:53.080 --> 23:55.080
what we deliver to the front end.

23:55.080 --> 23:57.280
We have like very complex models.

23:57.280 --> 24:00.440
And we say that, okay, we just take this set of information

24:00.440 --> 24:01.600
for this page.

24:01.600 --> 24:05.120
And from the other page, we need a much larger set.

24:05.120 --> 24:07.840
But of course, this GraphQL integration

24:07.840 --> 24:11.560
is causing us problems with an un-maintained

24:11.600 --> 24:15.040
or slightly maintained Django library and things like that.

24:15.040 --> 24:17.320
So as we said, another set of problems.

24:21.560 --> 24:22.400
Yeah.

24:25.280 --> 24:28.760
I think for the presentation, it's not right.

24:28.760 --> 24:29.600
Help.

24:30.680 --> 24:32.000
Yeah, back to you.

24:34.480 --> 24:35.800
I can just be loud.

24:35.800 --> 24:37.800
Yeah, just be loud.

24:37.800 --> 24:39.160
Okay, I'll just be loud.

24:39.160 --> 24:41.000
So thanks for the presentation.

24:41.000 --> 24:42.760
I know your pain.

24:42.760 --> 24:44.840
I've had to do that job a lot.

24:44.840 --> 24:47.280
So my question is, why didn't you,

24:47.280 --> 24:49.160
what I've been having success now

24:49.160 --> 24:51.320
is the back end for the front end, right?

24:51.320 --> 24:53.480
Because all these fancy new reactive libraries

24:53.480 --> 24:57.200
now have these meta frameworks, which is an awful word.

24:57.200 --> 24:58.520
But they kind of work.

24:58.520 --> 25:00.720
And so like, have you considered doing that?

25:00.720 --> 25:03.120
So the way I like to do it is you have the new back end

25:03.120 --> 25:04.040
for front end.

25:04.040 --> 25:05.960
And when they don't know what to do, okay,

25:05.960 --> 25:09.240
PHP help, then they just get the page back.

25:09.240 --> 25:11.920
So why did, I don't know if you looked at it like,

25:11.920 --> 25:14.480
why did you try to keep a single page application?

25:16.960 --> 25:17.960
You want to answer this?

25:17.960 --> 25:20.080
I can transfer from there.

25:20.080 --> 25:23.880
Yes, I would, what was the question about this?

25:23.880 --> 25:26.320
Have you taken a look at these back end for front end?

25:26.320 --> 25:28.040
Do you like them, do you not like them?

25:28.040 --> 25:28.880
Is that?

25:30.240 --> 25:31.680
What exactly do you mean?

25:31.680 --> 25:35.080
So like next JS, for example, that's the reactive.

25:35.080 --> 25:35.920
Yeah, okay.

25:35.920 --> 25:38.000
It has one like that.

25:38.000 --> 25:43.000
Yes, it's a kind of, we never have been using this.

25:44.400 --> 25:49.120
So it's like two years after this migration started,

25:49.120 --> 25:53.400
we just thought, oh, we could also use, have used this.

25:53.400 --> 25:55.400
So, but now the work is done.

25:55.400 --> 25:56.680
We have to go on with this.

25:56.680 --> 26:00.360
Our developer capacities are very limited.

26:00.360 --> 26:05.360
So yes, it's a kind of knowledge we didn't have.

26:09.000 --> 26:12.360
Okay, so thank you very much for the very nice talk.

26:12.360 --> 26:13.520
Interesting system.

26:13.520 --> 26:14.360
Thank you.

26:14.360 --> 26:15.200
Thank you.

26:15.200 --> 26:16.040
Thank you.

26:16.040 --> 26:16.880
Thank you.

26:16.880 --> 26:17.720
Thank you.

26:17.720 --> 26:18.560
Thank you.

26:18.560 --> 26:19.400
Thank you.

26:19.400 --> 26:20.240
Thank you.

