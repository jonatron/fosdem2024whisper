WEBVTT

00:00.000 --> 00:21.560
All right, let's settle down.

00:21.560 --> 00:23.720
We have Merve Goulmez.

00:23.720 --> 00:29.280
She's going to talk about friend or foe, exploring in process isolation to maintain

00:29.280 --> 00:32.760
memory safety for unsafe rust.

00:32.760 --> 00:34.160
Thank you very much.

00:34.160 --> 00:35.640
Take it away.

00:35.640 --> 00:40.240
Hello, everyone.

00:40.240 --> 00:45.040
I am happy to be here.

00:45.040 --> 00:46.320
Let's get started.

00:46.320 --> 00:54.120
I hope that one is working now.

00:54.120 --> 01:02.800
As you see, previous presentation I talked about is uptake of rust and EtoB project,

01:02.800 --> 01:11.120
for example, rust for Linux or Mozilla or currently is happening is rust in Windows OS.

01:11.120 --> 01:19.360
For example, Mozilla is now 11% is rust and the other different languages, for example,

01:19.360 --> 01:22.000
C and C++.

01:22.000 --> 01:32.640
Of course, that one is all virtual developments, requires mixed language application.

01:32.640 --> 01:36.520
Also today we saw previous talk.

01:36.520 --> 01:38.840
They talk about unsafe rust.

01:38.840 --> 01:41.240
Rust has actually highest two languages.

01:41.240 --> 01:46.160
One of them is safe and the other one is unsafe rust.

01:46.160 --> 01:51.240
And unsafe rust doesn't enforce memory safety guarantees and why we need it.

01:51.240 --> 01:55.440
Sometimes we want to do some low level control or implementation details or sometimes we

01:55.440 --> 01:58.960
need it for optimization.

01:58.960 --> 02:07.440
In Cherry Talk, they did really demo here and unsafe rust can violate completely rust

02:07.440 --> 02:09.400
application memory safety.

02:09.400 --> 02:16.560
They can do different route pointers or they can allow us to call unsafe functions via

02:16.560 --> 02:21.720
foreign function interface.

02:21.720 --> 02:29.400
Academic work shows that more than 72% of rust created is dependent on at least one unsafe

02:29.400 --> 02:34.080
FFI.

02:34.080 --> 02:38.240
Now we have two things, safe rust and unsafe rust.

02:38.240 --> 02:41.960
Unsafe rust says trust me, I know what I am doing.

02:41.960 --> 02:48.320
Should we do trust or should we do something and put on shield?

02:48.320 --> 02:49.720
And the gap is here actually.

02:49.720 --> 02:54.840
I always mention this mixed language application undermines memory safety guarantee of safe

02:54.840 --> 02:58.080
rust.

02:58.080 --> 03:01.160
And as a result, isolation is really needed.

03:01.160 --> 03:02.280
And I am a PhD student.

03:02.280 --> 03:04.280
I am a researcher.

03:04.280 --> 03:13.400
A lot of academic work to address this issue, we have a lot of academic work for example

03:13.400 --> 03:18.240
airing, trust, sun crust or so on.

03:18.240 --> 03:26.400
But what is the difference between these different academic publications?

03:26.400 --> 03:32.520
They either say that okay, we should use process-based isolation or we should use in process isolation.

03:32.640 --> 03:36.000
When you have process-based isolation, firstly you have integrity.

03:36.000 --> 03:43.320
It means that each processor, I mean it is on virtual memory space and also the other

03:43.320 --> 03:45.600
nicest things you have resilience.

03:45.600 --> 03:50.160
It means that each processor, it is on failure boundary.

03:50.160 --> 03:57.280
And if one process is crash, the other one is not affected.

03:57.280 --> 04:04.760
And a good example for that one, multiprocess software architecture.

04:04.760 --> 04:07.400
And the other side, we have in process isolation.

04:07.400 --> 04:13.240
It means that you have one other space and inside this one other space, how we can isolate

04:13.240 --> 04:15.000
one part of it.

04:15.000 --> 04:23.520
For example, you want to protect just a key or you want to protect one part of applications.

04:23.520 --> 04:28.760
Of course, if you have in process isolation, it can significantly reduce the runtime cost

04:28.760 --> 04:40.320
because context-severing compared to the traditional process isolation is lower.

04:40.320 --> 04:46.720
And I put here early approaches.

04:46.720 --> 04:52.720
This small box and inside the small box means that in process isolation and the other we

04:52.720 --> 04:56.880
have just sandbox provide the process-based isolation.

04:56.880 --> 05:00.040
And I would like to highlight something.

05:00.040 --> 05:09.320
Just one of them is offering crash resistance, but this is process-based isolation.

05:09.320 --> 05:19.040
We have STRAT here, but STRAT doesn't support for us, just it supports C applications.

05:19.040 --> 05:25.000
And I did some measurement and according to this measurement, if you have process-based

05:25.000 --> 05:33.920
isolation, actually it is 10 times higher than compared in process isolations.

05:33.920 --> 05:44.520
But the gap is here actually can be provided best of the board wars.

05:44.520 --> 05:50.560
It means that can we have integrity and failure boundaries similar to process-based isolations

05:50.560 --> 05:55.880
and we want to also have overheads similar to in process isolation.

05:55.880 --> 06:03.280
And my goal is firstly maintain the rest application safety and also we want to increase the software

06:03.280 --> 06:11.520
resilience of rest applications and also how we can provide ease of use in the development.

06:15.520 --> 06:20.160
In my early work, we provide some approach for C applications.

06:20.160 --> 06:26.320
This is secure rewind and discard and this is an approach for recovering vulnerable application

06:26.320 --> 06:30.320
after an attack is detected.

06:30.320 --> 06:32.120
And how we achieve that stuff?

06:32.120 --> 06:36.960
First we compartment the application in the distinct domains and we want to make sure that

06:36.960 --> 06:42.920
a memory defect with a domain must only affect that domain memory.

06:43.320 --> 06:47.720
This approach is relying on hardware assisted software fault-based isolation.

06:47.720 --> 06:51.520
This is a protection key for user space.

06:54.120 --> 06:56.320
And also how I detect it?

06:56.320 --> 07:04.520
I use different pre-existing detection mechanism, for example, stack canneries and domain violations.

07:05.520 --> 07:13.120
And as a result of this work, we publish some C library, SDRet library.

07:13.120 --> 07:17.120
If you want to check out, you can scan the QR code.

07:19.120 --> 07:22.920
Now I would like to explain the high-level idea.

07:22.920 --> 07:26.120
We have function F and we have unsafe.

07:26.720 --> 07:36.720
And if you write just some box on top of that, we want to have some memory safety guarantees

07:36.720 --> 07:38.720
and we want to have some isolation.

07:38.720 --> 07:41.720
And let's get started.

07:41.720 --> 07:48.720
We have parent domain and we want to run this function F in another domain.

07:48.720 --> 07:52.720
Another domain means stacks that can heap isolations.

07:53.720 --> 07:58.720
It means that I want to run this function F in another domain.

08:00.720 --> 08:06.720
And to run my function in the nested domain D, firstly I need to push the argument.

08:06.720 --> 08:12.720
I need to enter domain D and pull argument from the parent domain.

08:12.720 --> 08:14.720
And invoke F.

08:15.720 --> 08:20.720
I am executing applications, execute the function F.

08:20.720 --> 08:24.720
And the question is that is there something bad or not?

08:24.720 --> 08:30.720
But we have a guarantee that now if nested domain has some memory vulnerability,

08:30.720 --> 08:33.720
it will not affect the parent domain memory.

08:33.720 --> 08:36.720
It means that parent domain is still secure.

08:36.720 --> 08:41.720
And I am offering saying that you don't need to create your application, actually.

08:41.720 --> 08:47.720
You can just continue the execution.

08:50.720 --> 08:57.720
How I am offering, probably all of you know that this RAS says there's some API for panic.

08:59.720 --> 09:08.720
And we run the function F in the nested domain and after that we are checking the result.

09:08.720 --> 09:17.720
If results say that yes, you have something bad things happens

09:17.720 --> 09:22.720
and for example I can detect stack memory overflow or domain-domain violations,

09:22.720 --> 09:24.720
it will return error.

09:25.720 --> 09:30.720
If everything is okay, we don't need to do anything, it will just return okay.

09:30.720 --> 09:37.720
But the idea is that actually we are using this API, panic,

09:37.720 --> 09:41.720
but we are actually adding a new feature.

09:41.720 --> 09:43.720
Panic has also memory safety guarantees.

09:43.720 --> 09:52.720
It means that when panic happens, you can still continue your execution.

09:55.720 --> 09:59.720
And after that I explain this rewind and discard.

09:59.720 --> 10:05.720
And if nothing happens, if we didn't detect any memory safety violations,

10:06.720 --> 10:13.720
we will just push mutable arguments and return value and we will return parent domain.

10:14.720 --> 10:22.720
For this whole process in high-level idea, this STRAAT API,

10:22.720 --> 10:26.720
CAPI is already offering this pink box,

10:26.720 --> 10:36.720
but the point for this blue box is how we can track the rest of the types of the arguments

10:36.720 --> 10:42.720
and how we can push another domain and how we can pull it again.

10:45.720 --> 10:54.720
And probably all of you know that we have a lot of serialization creator.

10:54.720 --> 10:56.720
And what is serialization?

10:56.720 --> 11:01.720
It means serialization, we should encode the data in a format,

11:01.720 --> 11:07.720
like I just put it in a jar, and after that we should deserialize.

11:07.720 --> 11:12.720
When we jump to the nested domain, we should deserialize.

11:15.720 --> 11:20.720
And as a case study, I work on two RAS crates, BINCOT and ABONOMATIONS.

11:21.720 --> 11:27.720
BINCOT is a transformed data in a common binary representation

11:27.720 --> 11:31.720
that allows passing data between different platforms.

11:31.720 --> 11:36.720
And only the mention that SANDCRAS is process-based isolation mechanisms

11:36.720 --> 11:38.720
and that uses BINCOT.

11:38.720 --> 11:44.720
But actually, we realize that BINCOT, for our cases, is redundant

11:44.720 --> 11:51.720
because SANDCRAS and also STDF-FI, we are ingested in single platform.

11:53.720 --> 12:00.720
And I explore ABONOMATIONS, it's based on Rust Object MemoLayout presentations,

12:00.720 --> 12:03.720
but it is just for specific single platform.

12:03.720 --> 12:07.720
And it doesn't store any metadata or any type systems.

12:08.720 --> 12:13.720
It can deserialize the place without need for another cooperation.

12:15.720 --> 12:20.720
And we realize that ABONOMATIONS is efficient and suitable for our purpose.

12:22.720 --> 12:24.720
And we did some benchmarking.

12:24.720 --> 12:28.720
SNAPE is a fast comparison C-library from Google,

12:28.720 --> 12:32.720
and it designed for high-speed compression and the compression of data.

12:33.720 --> 12:38.720
And also presented as an FFI example in the Rust books.

12:39.720 --> 12:47.720
And what we compare, compress and uncompress random-generated data of different sizes.

12:47.720 --> 12:51.720
And we measure execution time of each operation for different serialization creators,

12:51.720 --> 12:53.720
like BINCOT and ABONOMATION.

12:56.720 --> 13:01.720
I show as a demo here, when I did all stuff, I just used a sandbox macro.

13:02.720 --> 13:11.720
And sandbox macro is ensure that this compressed function is completely run in the different domain,

13:11.720 --> 13:13.720
and it will not affect the parent domain.

13:13.720 --> 13:16.720
And uncompress is also here.

13:18.720 --> 13:24.720
Here we tested with different number of bytes, and this is the execution time.

13:26.720 --> 13:30.720
What is our lesson learned stuff?

13:31.720 --> 13:35.720
Of course, if you have number of bytes, if it is smaller,

13:35.720 --> 13:40.720
in process isolation approach clearly outperforms compared to process-based isolations.

13:42.720 --> 13:47.720
Because if you have in process isolation, you will not so much overhead.

13:47.720 --> 13:52.720
But the interesting start with later,

13:55.720 --> 13:59.720
we realize that even for modest-sized arguments,

13:59.720 --> 14:03.720
the context, which is not important anymore,

14:03.720 --> 14:07.720
is dominated by data serialization method.

14:07.720 --> 14:09.720
What you use.

14:14.720 --> 14:22.720
And our lesson learned tree, the data serialization method can significantly impact performance,

14:22.720 --> 14:26.720
and it is critical to optimize it for different cases.

14:27.720 --> 14:32.720
If you are working on this serialization creator or developing,

14:32.720 --> 14:38.720
we can talk about it, how we can improve or how we can fit our use cases.

14:42.720 --> 14:49.720
In summary, we introduced secure rewind and discard with isolated domains for REST-FFI.

14:50.720 --> 14:53.720
We have two goals.

14:53.720 --> 15:00.720
Firstly, we want to protect integrity of REST application from memory safety violation in unsafe program.

15:02.720 --> 15:06.720
The main point is that actually I would like to highlight,

15:06.720 --> 15:09.720
we are increasing the REST application availability,

15:09.720 --> 15:18.720
because we have a still option for if unsafe portion of our applications is the some memory safety,

15:18.720 --> 15:20.720
we can return back.

15:20.720 --> 15:22.720
We have option there.

15:23.720 --> 15:30.720
And I provided REST-FFI creators, it is open source,

15:30.720 --> 15:33.720
if you would like to try.

15:35.720 --> 15:37.720
And what is our takeaway?

15:37.720 --> 15:42.720
Improved isolation approach clearly outperforms compared to process-based isolations.

15:43.720 --> 15:50.720
But other important things is that data serialization method can significantly impact the performance.

15:51.720 --> 15:53.720
Thank you if you have a question.

15:53.720 --> 16:12.720
Can you quickly explain how these domains actually work?

16:12.720 --> 16:19.720
How do you enter a domain and how do you define what part of memory is part of the domain and what is outside the domain?

16:20.720 --> 16:26.720
Of course, it is actually handled by my C-Labri before that.

16:26.720 --> 16:28.720
I wrote it.

16:28.720 --> 16:36.720
But for RASPEX, if you just use sandbox macro, it will automatically handle it.

16:36.720 --> 16:47.720
But if you go into details, for each domain I will create a new stack and new heap memory area.

16:47.720 --> 16:59.720
Early, when there is some talk about this allocator, you can specify for allocators for specific domain.

16:59.720 --> 17:02.720
Entering a new stack, what does it mean?

17:02.720 --> 17:09.720
Just change the stack pointer and continue execution there.

17:09.720 --> 17:14.720
So you do a stack switch and share it to an entry point.

17:14.720 --> 17:17.720
But the important point is to do this rewind and discard.

17:17.720 --> 17:22.720
You should first save your execution context in a secure way.

17:22.720 --> 17:27.720
This is the point how we can recover.

17:27.720 --> 17:30.720
That is kind of like set-jump and long-jump style.

17:30.720 --> 17:33.720
Yes, set-jump, long-jump, but in a secure way.

17:33.720 --> 17:35.720
Now we have a guarantee that...

17:35.720 --> 17:41.720
Then you use some hardware mechanism to make sure that certain domains, certain memory is only accessible.

17:41.720 --> 17:45.720
Yes, exactly. That is true. That is completely true.

17:45.720 --> 17:52.720
This is the install feature. We are using that one. It is lightweight. That is why.

17:52.720 --> 17:54.720
Because you don't need system calls?

17:54.720 --> 17:55.720
Yes, exactly.

17:55.720 --> 17:57.720
You don't need to use a RAM trip?

17:57.720 --> 18:00.720
Yes, exactly. You have got everything now.

18:11.720 --> 18:14.720
First, thanks for the great talk.

18:14.720 --> 18:19.720
When deciding which piece of memory you put in the new domain,

18:19.720 --> 18:27.720
the global state is shared between different domains or you copy all the global states?

18:27.720 --> 18:33.720
Current version is just supporting HIP and memory.

18:33.720 --> 18:39.720
HIP and memory, but for the global shared, you should copy and pass it.

18:39.720 --> 18:42.720
It is not going to be your application. You should change it.

18:42.720 --> 18:46.720
But as a future work, I would like to support this.

18:46.720 --> 18:53.720
How we can actually sync between different domains to global shared states?

18:53.720 --> 18:56.720
That could be very costly.

18:56.720 --> 19:00.720
Sharing and copying the global state could be very costly.

19:00.720 --> 19:01.720
Yes, exactly.

19:01.720 --> 19:06.720
For example, here also, even though I have improved the isolations,

19:06.720 --> 19:12.720
changing arguments between domains create a lot of overheads.

19:12.720 --> 19:16.720
Yes, this is the bottleneck now. How we can improve actually this part?

19:16.720 --> 19:23.720
How we can pass the function argument one domain to another domain?

19:23.720 --> 19:25.720
This is the actual cost, actually.

19:25.720 --> 19:31.720
Second question. You copy back all the mutable arguments.

19:31.720 --> 19:37.720
Do you use that even if they are not changed or do you do that all the time?

19:37.720 --> 19:44.720
I am just pushing this. If they are mutable, I am pushing the argument.

19:44.720 --> 19:48.720
But you don't check if they have been changed by the function.

19:48.720 --> 19:50.720
If they are mutable, then you copy them back.

19:50.720 --> 19:51.720
Yes, exactly.

19:51.720 --> 19:54.720
So it is a static check and not a runtime check.

19:54.720 --> 19:55.720
Thanks.

19:55.720 --> 19:57.720
Thanks for your nice question.

19:57.720 --> 19:58.720
Awesome.

19:58.720 --> 20:02.720
Sorry, unfortunately that was all we had time for.

20:02.720 --> 20:04.720
Can we give another?

20:04.720 --> 20:06.720
Thank you to Mervin.

20:06.720 --> 20:07.720
Thank you.

20:21.720 --> 20:22.720
Thank you.

