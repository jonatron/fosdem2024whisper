WEBVTT

00:00.000 --> 00:08.880
Thank you all for being here and for waiting, sorry for that.

00:08.880 --> 00:15.800
So our next speaker is Nicolas, who is a staff engineer with a lot of experience and

00:15.800 --> 00:24.840
he is here to talk about Enix and an actual use case that he incurred during his time

00:24.840 --> 00:27.120
in Hazura.

00:27.120 --> 00:34.120
Thank you Nicolas, for your applause.

00:34.120 --> 00:41.120
So, does your build time keep getting longer?

00:41.120 --> 00:46.160
Well maybe we can extract some packages into overrack packages.

00:46.160 --> 00:50.920
But then the packages are extracted, started to explore the dev time to work and integrate

00:50.920 --> 00:52.640
in your app.

00:52.640 --> 00:54.760
And then it's hard to keep up with two versions?

00:54.760 --> 00:57.600
Yeah, at Hazura it was the same.

00:57.600 --> 01:00.440
The build time was like 15 minutes for the frontend.

01:00.440 --> 01:04.320
The dev reload time was like 5 minutes, so you make a change, you wait 5 minutes and

01:04.320 --> 01:06.560
then it's actually done.

01:06.560 --> 01:10.080
And tooling wasn't proper everywhere.

01:10.080 --> 01:11.840
So we had to make a change.

01:11.840 --> 01:14.440
And this is the story of this change.

01:14.440 --> 01:15.440
First who am I?

01:15.440 --> 01:18.320
I'm Nicolas, I'm a staff engineer at Pethitch.

01:18.320 --> 01:21.200
You can find my Twitter and my blog.

01:21.200 --> 01:24.880
This is also in the right hand form in my blog if you want to dig further.

01:24.880 --> 01:28.080
So let's get back to the topic.

01:28.080 --> 01:29.520
So what was the setup?

01:29.520 --> 01:35.560
We had two code bases, the open source one and the enterprise version.

01:35.560 --> 01:40.680
What we did was we extracted some of the code from the open source code base into a bundle

01:40.680 --> 01:43.680
through extra layers of webpack.

01:43.680 --> 01:48.840
And then we installed this into the enterprise application.

01:48.840 --> 01:52.000
It seems pretty standard, right?

01:52.000 --> 01:53.960
But then tooling wasn't the same everywhere.

01:53.960 --> 02:01.440
In one place we had touch scripts, yes, test, storybook, chromatic, Cypress, so very good

02:01.440 --> 02:04.120
dev experience, dev installation and everything.

02:04.120 --> 02:10.520
In the other side, which let's remember, enterprise clients pay for the other side, we had JavaScript,

02:10.520 --> 02:14.120
no touch scripts, yes, test, and that's it.

02:14.120 --> 02:17.560
No storybook, no entry and test, nothing else.

02:17.560 --> 02:21.480
Because it was so complex to work in this second part of the application, this was the

02:21.480 --> 02:24.080
end result setup.

02:24.080 --> 02:25.920
But that's not it.

02:25.920 --> 02:27.320
Get worse.

02:27.320 --> 02:31.640
We had one K-line of custom webpack config just to bundle part of the application into

02:31.640 --> 02:33.720
the other one.

02:33.720 --> 02:37.680
Log files management was hell when you change one thing in one place.

02:37.680 --> 02:40.800
You had to make sure the log file, not the package version, the log file was the same

02:40.800 --> 02:41.800
in the other place.

02:41.800 --> 02:45.840
Otherwise, things will crash in production and without end to end test, you only know

02:45.840 --> 02:49.440
when you're in production or when you test your dev environment.

02:49.440 --> 02:54.000
CI was very slow because of this whole system.

02:54.000 --> 02:56.080
So we wanted a Mono-repo tool.

02:56.080 --> 03:02.880
Let's have everything inside of a single Mono-repo, having them work better in union instead of

03:02.880 --> 03:05.240
isolation.

03:05.240 --> 03:07.960
We made a wish list for what we wanted to do.

03:07.960 --> 03:13.280
What we wanted in the Mono-repo tool was task orchestration, saying build this app before

03:13.280 --> 03:15.200
this one.

03:15.200 --> 03:18.880
We wanted to have dependency-graph-visualization because right now we have two packages, but

03:18.880 --> 03:20.200
in the future we'll have more.

03:20.200 --> 03:24.280
We want to see what the hell is going on without having to guess and looking at packages and

03:24.280 --> 03:26.040
digging through code.

03:26.040 --> 03:27.840
We wanted to have consistent tooling.

03:27.840 --> 03:33.320
Let's say we have just and the same config of just and the same version of just everywhere.

03:33.320 --> 03:35.520
Because yes, it wasn't the same version of just before.

03:35.520 --> 03:38.040
Fun to make with stuff.

03:38.040 --> 03:40.040
And we wanted to have contact constraints.

03:40.040 --> 03:45.320
And for example, the open source edition couldn't import the pro edition, because you don't

03:45.320 --> 03:47.320
want to give away things for free.

03:47.320 --> 03:50.640
Like companies get paid for.

03:50.640 --> 03:53.800
We wanted to have distributed task execution so that we could scale the CI by adding more

03:53.800 --> 03:59.240
runners and to say run those jobs in parallel and deal with how you want to do.

03:59.240 --> 04:03.400
And the bonus point is we wanted code generation so that scaffolding was baked into the tool

04:03.400 --> 04:08.200
so that in the end everything was done for us.

04:08.200 --> 04:15.080
So after this open X we went into the ecosystem, look at every tool that existed.

04:15.080 --> 04:19.360
And we checked every one of them.

04:19.360 --> 04:22.760
First a small disclaimer.

04:22.760 --> 04:25.920
This work happened about a year ago.

04:25.920 --> 04:28.120
New tools exist since now.

04:28.120 --> 04:30.400
Like Moon repo didn't exist back then.

04:30.400 --> 04:33.400
So if you want you can also look into Moon repo.

04:33.400 --> 04:37.160
And I also want to shout out every engineers working on those moon repo tools.

04:37.160 --> 04:38.520
They are amazing.

04:38.520 --> 04:40.240
If you have anything they are always willing to help.

04:40.240 --> 04:43.120
So kudos to them.

04:43.120 --> 04:44.920
So what did we look into?

04:44.920 --> 04:46.920
First one, Bazel.

04:46.920 --> 04:50.000
Bazel is made by Google to handle Google monopos.

04:50.000 --> 04:52.840
It's huge, complex, you can do a lot of things.

04:52.840 --> 04:55.920
But it's also very complex to use.

04:55.920 --> 05:00.520
We looked at Gretel because yes, Gretel can do other things than just Java.

05:00.520 --> 05:03.120
You can do whatever you want in Gretel.

05:03.120 --> 05:06.400
It's tailored to Java but you can do JavaScript, you can do Go, you can do whatever you want

05:06.400 --> 05:08.400
in it.

05:08.400 --> 05:13.640
We looked at Lerner which is the historical and classical tool to manage a moon repo in

05:13.640 --> 05:16.480
the old days of JavaScript.

05:16.480 --> 05:21.800
We looked at NX because I've used this in the past in the Angular days when NX was only

05:21.800 --> 05:24.080
an Angular plugin.

05:24.080 --> 05:27.200
And yes, this is a real monopo tool.

05:27.200 --> 05:31.680
We looked at Pence which is mainly used by IBM but also in other places.

05:31.680 --> 05:36.440
It turns out it's pretty good if you want to experiment and give it a try.

05:36.440 --> 05:41.040
We looked at Java repo because all the hype and trouble was solved and everything.

05:41.040 --> 05:43.800
So it was in the list.

05:43.800 --> 05:46.640
And so that was like the tool that we looked into.

05:46.640 --> 05:48.360
So let's see.

05:48.360 --> 05:50.680
We wanted Tasker-based acquisition.

05:50.680 --> 05:53.520
Well they could all do it so that's good.

05:53.520 --> 05:58.960
We wanted dependency graph visualization and Pence didn't support it.

05:58.960 --> 06:02.440
So those two are out.

06:02.440 --> 06:04.960
Then we wanted ecosystem tooling.

06:04.960 --> 06:06.440
Troubles didn't support it.

06:06.440 --> 06:07.600
Lerner neither.

06:07.600 --> 06:11.520
So we end up with either Bazel or NX.

06:11.520 --> 06:13.800
Project constraints, they both support it.

06:13.800 --> 06:14.800
Amazing.

06:14.800 --> 06:18.200
We wanted this task execution, they both support it.

06:18.200 --> 06:19.200
Cool.

06:19.200 --> 06:21.960
And congeneration, well Bazel didn't support it.

06:21.960 --> 06:28.200
While we could have added Bazel congeneration utilities and extra code, it was also simpler

06:28.200 --> 06:30.400
to set up than NX.

06:30.400 --> 06:33.760
Complex to set up than NX was way simpler to do.

06:33.760 --> 06:40.600
So Indian NX was the tool that met his needs that we had at Hazara.

06:40.600 --> 06:44.760
If you want to learn more about those tools, this is a great resource.

06:44.760 --> 06:50.840
It's open source and contributed by many of the maintainers of such monorapos where you

06:50.840 --> 07:03.200
have a graph of all the main things that make the monorapo features and each project

07:03.200 --> 07:06.720
is listed in here with what it can or cannot do.

07:06.720 --> 07:10.040
So we had with the tool NX.

07:10.040 --> 07:13.680
But turns out there is two flavors of NX.

07:13.680 --> 07:15.400
Integrated or package based.

07:15.400 --> 07:17.520
First let's go into package based.

07:17.520 --> 07:23.960
Package based is behave like a PNPM, such as NPM workspace.

07:23.960 --> 07:28.320
You have many packages, they all link together.

07:28.320 --> 07:30.200
It works pretty well.

07:30.200 --> 07:32.120
But it doesn't have consistent tooling.

07:32.120 --> 07:36.200
You can do whatever you want in your projects.

07:36.200 --> 07:40.560
The migration path is way here because you just slap an extra JSON at the root and it's

07:40.560 --> 07:43.200
done basically.

07:43.200 --> 07:45.160
But there is still a bit of step between the leaves.

07:45.640 --> 07:49.200
Let's remember why we are doing that because we want to make sure the build between libraries

07:49.200 --> 07:53.680
is way faster so that we don't reinvent the wheel every time.

07:53.680 --> 07:56.880
So then what is integrated?

07:56.880 --> 08:04.000
Integrated means that every tool in the workspace is unified and considered a monorapo as one

08:04.000 --> 08:05.000
unit.

08:05.000 --> 08:09.800
Every tool is consistent because every tool has the same version and the same configuration

08:09.800 --> 08:10.800
everywhere.

08:11.120 --> 08:15.280
You can train it in a specific project but the base is the same.

08:15.280 --> 08:21.280
But the migration is more thoughtful because you need to decide how you want to migrate.

08:21.280 --> 08:25.960
Do you want to align with NX context or do you want to bend NX to your wheel because

08:25.960 --> 08:28.480
you can do both.

08:28.480 --> 08:34.320
But thanks to this, we have optional build steps between libraries, which means we could

08:34.320 --> 08:37.280
solve all speed issues.

08:37.280 --> 08:41.240
But there is one more thing, plug-ins.

08:41.240 --> 08:42.400
But what the hell is a plug-in?

08:42.400 --> 08:45.200
A plug-in can do three things.

08:45.200 --> 08:50.440
It can generate generators that allows you to scaffold the bases.

08:50.440 --> 08:52.080
NX new library, done.

08:52.080 --> 08:53.360
NX new application, done.

08:53.360 --> 08:56.120
NX new storybook, done.

08:56.120 --> 09:03.040
It can execute it, which is wrapping the tool to make it simpler for you to consume.

09:03.040 --> 09:07.360
And the best part is automatic migration.

09:07.360 --> 09:12.000
For example, a new version of desk came up and you need to update your test to have a

09:12.000 --> 09:16.000
new configuration for the timer.

09:16.000 --> 09:20.760
NX will migrate your code for you automatically and it works 95% of the time.

09:20.760 --> 09:22.400
You won't have to do anything.

09:22.400 --> 09:28.440
This was really helpful for us because the code base was huge, like a million of code

09:28.440 --> 09:31.960
on those lines and it was hard to maintain.

09:31.960 --> 09:35.400
So that's all good and all, but we engineers, right?

09:35.400 --> 09:38.760
Tread-offs, not everything is green.

09:38.760 --> 09:40.880
Yeah, there is two big ones.

09:40.880 --> 09:43.400
First one is single version policy.

09:43.400 --> 09:48.360
We state that there may only be one version of a dependency and package inside of the

09:48.360 --> 09:50.720
monorepo.

09:50.720 --> 09:56.120
While it adds extra constraints, it's also recommended within any monorepo.

09:56.120 --> 10:00.720
Because if you have a library that is built using React 16 and another one with React 18,

10:00.720 --> 10:05.000
you cannot import the 16 into the 18 one.

10:05.000 --> 10:11.640
And the way I see single version policy for me is a bit like buy versus loan with interest.

10:11.640 --> 10:15.880
When you want to migrate React, if you buy, you just bite the bullet.

10:15.880 --> 10:19.800
You spend maybe a bit more time, but you do it everything at once and everything is a

10:19.800 --> 10:20.800
daily.

10:20.800 --> 10:26.760
Versus if you loan the migration, meaning you have to spend many times doing many packages

10:26.760 --> 10:33.640
one by one over time, every time you have to regain context, how do I migrate this again?

10:33.640 --> 10:35.360
How do I send this again?

10:35.360 --> 10:39.960
And every single time you want to migrate a new system, it takes way longer in the end.

10:39.960 --> 10:43.080
But it's a bigger investment up first.

10:43.080 --> 10:46.080
You pick.

10:46.080 --> 10:49.440
Buy enough tools is another constraint.

10:49.440 --> 10:56.240
You have to wait for the tools, meaning that, for example, like this version came up, you

10:56.240 --> 11:00.320
have to wait for NX to update in their setup so that it will automatically migrate the

11:00.320 --> 11:01.320
tools.

11:01.320 --> 11:06.040
In enterprise software, waiting for a day or week is not that big of a deal for a new

11:06.040 --> 11:08.440
test version, to be honest.

11:08.440 --> 11:12.560
And it's way better now because they work hand in hand with actual engineers working

11:12.560 --> 11:14.400
on those tools.

11:14.400 --> 11:19.200
And some of them actually work at NX now, so that helps a lot.

11:19.200 --> 11:25.060
And if you need it, there is plenty of escape hatches, so you can just do whatever you want

11:25.060 --> 11:29.020
in the case you may need.

11:29.020 --> 11:30.860
So we know what we want.

11:30.860 --> 11:31.860
We want to manoeuble.

11:31.860 --> 11:32.860
We want NX.

11:32.860 --> 11:33.860
We want integrated.

11:33.860 --> 11:36.500
How do we proceed?

11:36.500 --> 11:39.940
Because we're not going to say, we're going to freeze production for six months until

11:39.940 --> 11:41.140
we might get everything.

11:41.140 --> 11:44.060
That's never going to work.

11:44.060 --> 11:48.940
So the goal is to migrate incrementally without stopping the digital data work.

11:48.940 --> 11:53.180
And we add some requirements for this migration.

11:53.180 --> 11:57.580
First of all, we wanted to have no cost freeze during this migration.

11:57.580 --> 12:02.580
We had many engineers working on the code base, and we never wanted to say, stop working

12:02.580 --> 12:05.500
for half a day every week so that we can migrate stuff.

12:05.500 --> 12:07.780
That's not feasible.

12:07.780 --> 12:10.140
We wanted to have as little regression as possible.

12:10.140 --> 12:11.980
Nobody likes bugs.

12:11.980 --> 12:14.420
And neither of those customers.

12:14.420 --> 12:16.420
We wanted to adhere to NX.

12:17.060 --> 12:23.060
So that automatically migration what was as easy as possible.

12:23.060 --> 12:26.100
And which meant less maintenance in the end.

12:26.100 --> 12:29.620
And furthermore, if we have standard tools, then reusable skills.

12:29.620 --> 12:31.460
You can switch teams and everything is the same.

12:31.460 --> 12:33.460
So that's nice.

12:33.460 --> 12:38.300
Like companies that do loads of re-ogs, that's a big seller.

12:38.300 --> 12:39.460
And nice to keep.

12:39.460 --> 12:41.460
We had seven years of Githy story.

12:41.460 --> 12:45.820
Githy story is sometimes the only reason sometimes we can debug something because of

12:45.820 --> 12:47.140
the JavaScript and such.

12:47.140 --> 12:49.140
So we wanted to keep it.

12:49.140 --> 12:51.620
So here was the situation.

12:51.620 --> 12:54.060
We had our current code base.

12:54.060 --> 12:58.580
We then created a new NX workspace, like just create a new workspace.

12:58.580 --> 13:00.940
We import the code into the workspace.

13:00.940 --> 13:01.940
We build it.

13:01.940 --> 13:02.940
Is it working?

13:02.940 --> 13:04.820
Yeah, everything is done.

13:04.820 --> 13:06.820
Except not.

13:06.820 --> 13:10.940
Things broke, obviously, because our code had many issues.

13:10.940 --> 13:16.100
And so the next step is to identify a whiteboard and then break the current build.

13:16.100 --> 13:19.340
This way we can fix it in the current application.

13:19.340 --> 13:21.820
And then we can start over again.

13:21.820 --> 13:25.340
The good thing about this migration path is that at every step of the way we provided

13:25.340 --> 13:31.100
value to the actual developer working on the old system while preparing the new system.

13:31.100 --> 13:37.380
And at one point we identify some of migration we needed to make to NX.

13:37.380 --> 13:42.580
So every time we create a new workspace, we added a non-migration beforehand.

13:42.580 --> 13:48.060
And we did this cycle many times to make sure every step of the way it worked, we even had

13:48.060 --> 13:54.260
a crown to do on a weekly basis to make sure everything was good.

13:54.260 --> 13:57.700
And I mentioned we had to make tweak to NX.

13:57.700 --> 14:02.460
One thing we had to tweak was the JavaScript path because we had add slash.

14:02.460 --> 14:05.540
And in the monomaple, add slash means nothing because there is no root.

14:05.540 --> 14:07.580
There is only packages.

14:07.580 --> 14:13.340
But we tweaked it so we can make sure the migration was not blocking and require a lot of work

14:13.340 --> 14:16.260
on the previous code base.

14:16.260 --> 14:21.580
We had to include Node.js fanbots because even though no Node.js code should end up in the

14:21.580 --> 14:28.100
browser, we all have Node.js code in the browser, like HTTP and such.

14:28.100 --> 14:34.060
We had to make some specific changes to the web-config, like SVG and such.

14:34.060 --> 14:40.500
And we had to disable some ASN tools because, well, our code wasn't up to standard, obviously.

14:40.500 --> 14:43.380
So that's what we needed to do.

14:43.380 --> 14:44.780
What about our code, right?

14:44.780 --> 14:48.780
So first of all, we had CSS module without the .manual.tss extension.

14:48.780 --> 14:52.220
So there would be a VIN like CSS modules, but we didn't have the extensions.

14:52.220 --> 14:54.500
We had to fix it.

14:54.500 --> 14:57.780
We used an ability to pass in CSS in tabscript.

14:57.780 --> 15:02.940
And it shouldn't have worked, but somehow it did.

15:02.940 --> 15:06.260
So thanks, Webpack 3, I guess.

15:06.260 --> 15:09.700
But we had to change this so that it worked with Webpack 5.

15:09.700 --> 15:15.260
Path imports relied heavily on Webpack config, so we had to change that also.

15:15.260 --> 15:21.180
We had to update a test in tabscript to a version that is compliant with NX.

15:21.180 --> 15:24.420
We had to update the entry points so that they only export a component and not mount

15:24.420 --> 15:26.140
the application.

15:26.140 --> 15:28.140
And this was the kicker.

15:28.140 --> 15:33.340
Turns out, somehow, the build compiled with a lot of second-dependencies.

15:33.340 --> 15:34.420
Like a lot.

15:34.420 --> 15:37.980
Like 150 loops of second-dependencies within the codebase.

15:37.980 --> 15:42.940
And this was like one of the libraries, not just the bootstrap of it.

15:42.940 --> 15:48.140
So we had to dig through and fix our code, basically.

15:48.140 --> 15:51.860
And we went down through 95, and now Webpack was able to compile the application, and the

15:51.860 --> 15:54.980
browser was able to load it.

15:54.980 --> 15:58.340
So that was good.

15:58.340 --> 15:59.620
What it looked like in the end.

15:59.620 --> 16:06.700
We had our pro application that loads the pro library that imports the OSS library.

16:06.700 --> 16:11.020
And the OSS application that loads the OSS library and the end-to-end test that both

16:11.020 --> 16:13.740
imports the library and the application.

16:13.740 --> 16:17.220
Thanks to this, this was, by the way, generated by the NX graph of the workspace.

16:17.220 --> 16:18.980
We don't have to do anything.

16:18.980 --> 16:21.100
So all good, right?

16:21.100 --> 16:22.820
Everything is nearly ready.

16:22.820 --> 16:25.220
We just need to switch.

16:25.220 --> 16:29.660
And switching means keeping the Git history.

16:29.660 --> 16:36.300
So to keep it, we first made a commit to clean up the old workspace.

16:36.300 --> 16:41.500
Then we made a second commit to Git MV to the over place.

16:41.500 --> 16:45.140
Then we made an archive for OSS because, given we are open source product, we wanted to make

16:45.140 --> 16:48.380
sure a contribution went up broken because of this.

16:48.380 --> 16:54.220
Both commits, we applied the known tricks, and then we were in NX land.

16:54.220 --> 16:59.460
Thanks to this way, the second commit was able to identify into Git blame to make sure

16:59.460 --> 17:01.740
Git blame doesn't pick up this commit.

17:01.740 --> 17:06.060
So we still kept our Git history for whatever we wanted.

17:06.060 --> 17:10.300
In the end, the total freestime for this migration was three hours.

17:10.300 --> 17:15.180
From the beginning to the actual end of the migration, three hours total.

17:15.180 --> 17:18.020
It wasn't a fault lasting a few months.

17:18.020 --> 17:22.900
And the three hours is because of CI was slow to run on the four commits that I mentioned

17:22.900 --> 17:25.100
before.

17:25.100 --> 17:27.540
So all good and all right.

17:27.540 --> 17:28.540
What about the results?

17:28.540 --> 17:34.460
We want numbers for all users and all developers.

17:34.460 --> 17:37.420
First all users, zero bargain pollution.

17:37.420 --> 17:39.180
That was great.

17:39.180 --> 17:42.780
Because of this incremental approach that we took, we were able to see that every step

17:42.780 --> 17:47.260
of the way we didn't break something because otherwise we would have identified it in the

17:47.620 --> 17:48.860
app.

17:48.860 --> 17:55.460
The over surprise was that because everything is unified, the bonus rate decreased quite

17:55.460 --> 17:59.100
a lot from 43 megs to 13 megs.

17:59.100 --> 18:04.300
And funny thing is when you get a call from a service representative, thank you, Niko.

18:04.300 --> 18:08.340
I can finally use the app locally without being too slow to load.

18:08.340 --> 18:09.620
Thanks, I guess.

18:09.620 --> 18:11.380
It's a bit weird.

18:11.380 --> 18:14.220
You wouldn't before, but still.

18:14.220 --> 18:16.420
So this helped us at the low time.

18:16.420 --> 18:21.700
We have the application loading like five seconds faster thanks to this.

18:21.700 --> 18:24.300
Okay, that's good for devs and everything for users.

18:24.300 --> 18:26.300
What about devs?

18:26.300 --> 18:29.300
Well, 30x faster local devs.

18:29.300 --> 18:33.100
Because we didn't have to have build step every step of the way, we went from five minutes

18:33.100 --> 18:34.740
to ten seconds.

18:34.740 --> 18:36.540
This was life changing.

18:36.540 --> 18:40.940
Try to imagine when you debug something, you make a change where five minutes to see

18:40.940 --> 18:42.940
that the console you added show ups.

18:42.940 --> 18:47.620
Now it's like ten seconds in an instant for what we used to.

18:47.620 --> 18:51.660
And the CI was about 60% faster in the worst scenario.

18:51.660 --> 18:57.420
In the best case scenario, it's about 80% faster thanks to caching and things like that.

18:57.420 --> 18:58.420
All right, good.

18:58.420 --> 18:59.420
Is it the end?

18:59.420 --> 19:00.540
Are we done?

19:00.540 --> 19:02.860
We are now in Enixland.

19:02.860 --> 19:03.860
We have the packages.

19:03.860 --> 19:05.420
Are we good?

19:05.420 --> 19:07.500
It could be.

19:07.500 --> 19:10.220
It could be a step that we, you say is good enough.

19:10.220 --> 19:11.820
We don't want to go further.

19:11.820 --> 19:13.180
But you could.

19:13.180 --> 19:18.580
One of this area is architect of the coupling where you say I want to make sure that my

19:18.580 --> 19:21.860
open source doesn't import my enterprise code.

19:21.860 --> 19:25.340
And you can info that thanks to Linchwool in Enix.

19:25.340 --> 19:30.660
You have a Linchwool that's better than Debreche, but it basically says that a pro code can

19:30.660 --> 19:34.420
import shared and OSS and pro and that's about it.

19:34.420 --> 19:36.300
A shared can import shared.

19:36.300 --> 19:38.060
In a visual way, this looks like this.

19:38.060 --> 19:42.820
Where you ensure that libraries in the scope can only import within the scope or the scope

19:42.820 --> 19:46.020
they allow to go to.

19:46.020 --> 19:51.460
This helped us heavily to ensure that open source code stayed open source and the enterprise

19:51.460 --> 19:58.020
code stayed enterprise and open source couldn't import through the tooling production like

19:58.020 --> 20:04.380
a cloud enterprise code.

20:04.380 --> 20:10.020
Then the other thing we went further is to unify our tooling.

20:10.020 --> 20:15.820
While in this migration, we just add Enix, generate new entry and test.

20:15.820 --> 20:18.060
We add the new entry and test for our provision.

20:18.060 --> 20:22.260
And this costs us like 20 minutes to do.

20:22.260 --> 20:27.580
We now have a V-test in some of the new projects.

20:27.580 --> 20:30.660
And we also made our custom plugin because you could make your own plugin.

20:30.660 --> 20:32.860
It's relatively easy.

20:32.860 --> 20:36.540
And thanks to the plugin, we can create a new library.

20:36.540 --> 20:42.540
I want a library with this scope and this type and put it in the right folder for me.

20:42.540 --> 20:43.540
I don't care.

20:43.540 --> 20:44.540
Do it for me.

20:44.540 --> 20:45.820
And the naming would be automatic.

20:45.820 --> 20:47.540
Everything would be automatic.

20:47.540 --> 20:52.420
In those cases, you can say generate automatically like the code owner, update the CI if needs

20:52.420 --> 20:54.980
so and that.

20:54.980 --> 20:59.140
Because in the end, thanks to the plugin, you get the specificity of your tooling, all

20:59.140 --> 21:03.420
of the developer and engineers mind and into automation.

21:03.420 --> 21:07.660
Because we all know this documentation that is never updated.

21:07.660 --> 21:12.780
And a tooling is always updated because we use it regularly.

21:12.780 --> 21:17.620
So if we know it's all of it, we can look into it.

21:17.620 --> 21:24.900
So in the end, what I wanted to say is coding on a last code base shouldn't feel like this.

21:24.900 --> 21:27.020
You are not sure you're going to break something.

21:27.020 --> 21:29.780
You are not sure what you change with a fact.

21:29.780 --> 21:32.140
You have no idea what is going on.

21:32.140 --> 21:33.780
Instead it should feel like this.

21:33.780 --> 21:34.780
A happy dance.

21:34.780 --> 21:40.620
We just pass the ball around and have things moving in the right direction.

21:40.620 --> 21:43.620
Thank you for your attention.

21:43.620 --> 22:05.620
Are there any questions?

22:05.620 --> 22:09.340
So in this case, we didn't use NPM to share on the outside.

22:09.340 --> 22:14.700
However it's supported in NX to be able to release applications.

22:14.700 --> 22:21.540
And thanks to the NX plugin, it can understand your workspace and create a package for your

22:21.540 --> 22:24.780
library to be exported publicly on NPM.

22:24.780 --> 22:30.140
Next week there is a new launch event for NX and they are going to announce something

22:30.140 --> 22:32.180
that may be related to your question.

22:32.180 --> 22:36.180
Are there any other questions?

22:36.180 --> 22:37.180
Yes.

22:37.180 --> 22:39.180
Can you hear me well?

22:39.180 --> 22:40.180
Yes.

22:40.180 --> 22:47.180
My question is what was the main reason for such decrease of the bundle size?

22:47.180 --> 22:54.300
Is it because you are using all of these cycles in the code?

22:54.300 --> 23:01.980
One of the questions was why we end up with such a lower reduction in the bundle size,

23:01.980 --> 23:08.700
because what happened in the beginning of the talk, what happened before is that we

23:08.700 --> 23:12.180
had one package that we had bundled into a package.

23:12.180 --> 23:16.140
Sorry, there are a lot of slides.

23:16.140 --> 23:20.940
Anyhow, I think you remember close enough.

23:20.940 --> 23:26.460
So what we did before is we exported a large part of the application into a package and

23:26.460 --> 23:30.380
then we imported this package into the proper base.

23:30.380 --> 23:36.020
First change now is that Webpack now has a unified view of the whole system and has

23:36.020 --> 23:38.300
a way better tree taking.

23:38.300 --> 23:43.220
Because in this middle package right here, Webpack didn't understand what was actually

23:43.220 --> 23:49.020
imported into the end application and wasn't able to do as powerful tree taking as before.

23:49.020 --> 23:52.900
So that was one huge step that helped us on this.

23:52.900 --> 23:58.340
The second step was having updated Webpack configuration and tooling, which makes sure

23:58.340 --> 24:01.260
that we didn't need to target IE anymore.

24:01.260 --> 24:05.420
So that reduced like 5 megabits from the bundle.

24:05.420 --> 24:09.740
And so both things combined plus better CSS processing with like a unified view again

24:09.740 --> 24:14.740
of the whole system made that we had this decrease in bundle size.

24:14.740 --> 24:15.740
Yeah.

24:15.740 --> 24:36.180
So today I don't pay for it and I'm doing a similar migration using an X2.

24:36.180 --> 24:41.540
There is a new tool that I would investigate, which is called MoonRepo, which is similar

24:41.540 --> 24:43.340
in some cases to an X.

24:43.340 --> 24:48.620
However, through this day for an enterprise ready product, I will still use an X.

24:48.620 --> 24:57.500
Because the one thing they are moving towards to is to also have a way smarter CI.

24:57.500 --> 25:00.980
Because if your CI can understand your workspace, it can also understand better what to do and

25:00.980 --> 25:02.540
what not to do.

25:02.540 --> 25:07.060
And so for this day, an X would be still my choice.

25:07.060 --> 25:11.740
In the future, I will still investigate MoonRepo to see if it could make sense.

25:11.740 --> 25:19.340
But unless you have a huge scale like 10,000 engineers, Bazel would make sense.

25:19.340 --> 25:23.900
Because you could have a team of like 20 engineers working on Bazel.

25:23.900 --> 25:25.900
So yeah, that's my answer.

25:25.900 --> 25:26.900
Yeah.

25:26.900 --> 25:35.900
So just to make sure when you started with an X, you imported package by package.

25:35.900 --> 25:37.900
But you threw away the results in the ads.

25:37.900 --> 25:38.900
Yeah.

25:38.900 --> 25:39.900
And you redid it in two hours.

25:39.900 --> 25:40.900
Yeah.

25:40.900 --> 25:46.900
So this way, we made sure the old system was being updated to the change we needed to do.

25:46.900 --> 25:51.340
So this way, if for whatever reason we had to stop, we still provided value to the existing

25:51.340 --> 25:52.340
base.

25:52.340 --> 25:59.660
So on the question before, what do you think of TurboRepo?

25:59.660 --> 26:00.660
Yeah.

26:00.660 --> 26:09.300
So TurboRepo has some features that are integrated into an X in terms of a feature of parity.

26:09.300 --> 26:16.100
However, it lacks some of the larger system that is required for an enterprise project.

26:16.100 --> 26:18.340
You don't have distributed task execution, for example.

26:18.340 --> 26:19.820
You don't have unified tooling.

26:19.820 --> 26:21.780
You don't have generators.

26:21.780 --> 26:27.500
And this makes that, for me, TurboPo is a middle between learner and an X.

26:27.500 --> 26:32.380
It's like a middle ground where you have a bit better because you could have tasks like

26:32.380 --> 26:35.580
caching on the cloud, thanks to like Verso.

26:35.580 --> 26:38.060
But you don't have the full power of something like an X.

26:38.060 --> 26:39.060
So yeah.

26:39.060 --> 26:40.060
Yeah.

26:40.060 --> 26:48.060
If you compare TurboRepo with the other way of choosing the index, the first one, how

26:48.060 --> 26:50.780
would you compare it?

26:50.780 --> 26:53.580
So I'm going to have two answers for that.

26:53.580 --> 26:57.140
One which is related to next week announcement and one for today.

26:57.140 --> 27:02.180
For today, an X requires a bit more conscience and tooling when you set it up.

27:02.180 --> 27:08.540
But stay tuned because it will be even easier to adopt an X to an existing workspace because

27:08.540 --> 27:13.900
they are trying to change the fact that an X is smart and trying to understand what is

27:13.900 --> 27:14.900
your project.

27:14.900 --> 27:17.900
And you have less friction to adopt an X.

27:17.900 --> 27:18.900
Yeah.

27:18.900 --> 27:28.900
Did you have any non-Node.js applications or services that you needed to integrate in

27:28.900 --> 27:35.380
this migration or an X is only for Node.js related to nodes?

27:35.380 --> 27:36.380
Great question.

27:36.380 --> 27:39.580
So by default, an X is agnostic.

27:39.580 --> 27:43.420
There is an ecosystem of plugins that exists supported officially by an X that is very

27:43.420 --> 27:45.780
fund-electrified and circulated.

27:45.780 --> 27:47.540
However you could do whatever you want.

27:47.540 --> 27:55.620
There is community plugins for go, for .NET, for Java, inside of an X where for example

27:55.620 --> 28:00.060
for the Java project it will understand the POM.xml and try to understand whatever it

28:00.060 --> 28:01.700
can automatically.

28:01.700 --> 28:07.340
And one great thing about Polyglot repo like this is you can say when your backend change,

28:07.340 --> 28:11.620
we render end-to-end tests for the frontend because they are related.

28:11.620 --> 28:16.540
Because you can say your frontend like your SDK impulse is related to the backend because

28:16.540 --> 28:18.460
it is linked to the Open API spec.

28:18.460 --> 28:21.900
Then this, we trigger everything on the frontend.

28:21.900 --> 28:28.780
And this is where an X or a manual report shines is that it's one context even if it's

28:28.780 --> 28:29.780
for Polyglot.

28:29.780 --> 28:31.780
Unfortunately we don't have more time for questions so we'll begin with a close for

28:31.780 --> 28:32.780
you guys.

