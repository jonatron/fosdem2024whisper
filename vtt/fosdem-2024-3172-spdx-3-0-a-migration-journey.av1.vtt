WEBVTT

00:00.000 --> 00:11.880
Good morning everybody. So I've got too many slides to present, so I'm going to go kind

00:11.880 --> 00:16.920
of fast. I think all of you know what SPDX is. Does anybody not know what SPDX is? I'm

00:16.920 --> 00:21.680
going to skip up, Axe Troublemaker. Now I'm going to skip through kind of the what is

00:21.680 --> 00:27.040
SPDX slide and jump into what are we doing about 3.0. This is really a talk about my

00:27.080 --> 00:31.760
kind of more practical journey. I'm one of the maintainers of the tools and I recently

00:31.760 --> 00:36.480
went through a process to upgrade the tools for 3.0 and I thought if I shared my experience

00:36.480 --> 00:42.600
with you, those of you who are writing tools yourself might gain some of my experience

00:42.600 --> 00:48.600
from that and help you out with your tooling. So as far as the agenda, I thought I might

00:48.600 --> 00:52.880
start with a little bit of context. Why did we even do 3.0? Because as you'll see there

00:52.920 --> 00:57.160
are some breaking changes or some changes you'll have to adapt to in your code. So it's

00:57.160 --> 01:01.000
good to know why we're all doing this. I'm going to talk a little bit about the approach

01:01.000 --> 01:04.400
to creating the spec because that will give you context to some of the techniques I've

01:04.400 --> 01:10.040
used for upgrading the tools and an overview of the changes, the important part. Then I'll

01:10.040 --> 01:17.040
talk about my practical experience on the Java libraries itself. So why SPDX 3.0? We've

01:17.040 --> 01:20.840
gotten a lot of feedback from the community. By the way, you guys hear me okay?

01:20.840 --> 01:27.840
We have no idea. Yeah, we don't know if it's... There we go. Let's see if I can... It is there.

01:39.760 --> 01:44.920
I think that'll work. Alright, a little bit easier. So we've got a lot of feedback on

01:44.920 --> 01:49.680
the SPDX 2 spec that is just too complicated. There are too many pages in the spec. So we

01:49.720 --> 01:55.000
took some steps in 3.0 to simplify it. At the same time, we added a lot more use cases,

01:55.000 --> 01:59.480
which actually can make it a little bit more complicated. So we've taken a few approaches.

01:59.480 --> 02:03.600
I think the biggest one is the introduction of profiles in SPDX to allow you to focus

02:03.600 --> 02:09.520
in on the things that you care about on SPDX and that does create some changes into the

02:09.520 --> 02:14.480
specs and impacts the tooling. Another big change that impacts the tooling is we made

02:14.560 --> 02:20.000
a lot more flexible. We have some people using SPDX and extremely large deployments, very,

02:20.000 --> 02:26.280
very large S-bombs, and they want to be able to basically distribute this S-bomb across

02:26.280 --> 02:30.840
many different files, across the network. And so you'll see some structural changes

02:30.840 --> 02:35.000
that allow you to do that more easily and of course reliably and in a way that you can

02:35.000 --> 02:41.160
authenticate the relationships. There's a lot of interest in SPDX and non-licensing

02:41.200 --> 02:46.680
and non-security scenarios now. So product safety is coming up in 3.1 and some of that

02:46.680 --> 02:53.160
actually started to kind of come into 3.0 as well. But there is a lot of changes to support

02:53.160 --> 02:58.600
that as well. And a big change, there was actually a time when there was yet a third standard.

02:58.600 --> 03:02.840
I know many of you are frustrated with two standards. There was actually three for a

03:02.840 --> 03:06.960
while and we merged two of them together in SPDX so that also had somewhat of an impact.

03:07.000 --> 03:12.600
So I'm not going to go through all this, but just to point out, we've been around for a long time.

03:12.600 --> 03:19.000
So don't ask me why we created two standards. We started back in 2010 and we've gone through a

03:19.000 --> 03:27.800
lot of evolutions. Most of them adding use cases back in the early 2000s, 2010, 2013. We added

03:27.800 --> 03:32.480
security use cases. More recently, we did the merger. And you can see on the top some of the

03:32.520 --> 03:37.320
external influences, the NTIA being one of the most significant in terms of accelerators.

03:37.320 --> 03:45.760
What's that? And the CRA. Absolutely. I am in Europe. Yes. And we've also done some work on

03:45.760 --> 03:53.040
ISO standardization that's on the timeline as well. And of course, this has an impact on how we

03:53.040 --> 03:59.000
evolved the SPAC itself. We started off in a very simple PDF. So we'd give tool developers like

03:59.040 --> 04:05.360
myself, here's a PDF, go implement it. That kind of created some errors. Some of us read the words

04:05.360 --> 04:10.400
a little bit differently. English isn't the most precise way of describing some of the technical

04:10.400 --> 04:17.680
features. We moved that over into a markdown file that was a little bit easier and we generated

04:17.680 --> 04:23.960
things. And then we went to an ISO SPAC. Have any of you guys ever gone through an ISO specification

04:24.000 --> 04:30.360
process? It's interesting. There are a lot of requirements. They're very picky about their

04:30.360 --> 04:37.760
format. So we went through that. And then where we ended up is going to more of a model based

04:37.760 --> 04:45.680
description of the language and generating actually multiple different schema files. For 3.0,

04:45.680 --> 04:50.440
we actually spent quite a bit of time deciding how we want to do the SPAC infrastructure for 3.0.

04:51.040 --> 04:56.200
We decided that a lot of us wanted to write directly to schemas. There's a lot of people

04:56.200 --> 05:01.480
though that wanted to make it just human readable and human writable more importantly. So we actually

05:01.480 --> 05:07.280
took kind of a middle ground. We described everything in a markdown files, but in a very

05:07.280 --> 05:12.640
specific format that every time you commit to the repository, it checks to make sure you adhere to

05:12.640 --> 05:19.640
that format. And then we take that and we generate an intermediate schema file. And that schema file

05:19.760 --> 05:26.160
then generates everything else. So I have a little bit of a diagram to kind of show you what the

05:26.160 --> 05:30.720
process is. And this is important if you want to contribute to the SPAC. This kind of gives you a

05:30.720 --> 05:35.960
guide on how to do that. We started with a conceptual model. This is kind of temporary. We

05:35.960 --> 05:40.880
don't use that anymore, but it's just a picture to get us all on the same page. And then we write

05:40.880 --> 05:45.680
the specs and markdown. And this is where you can contribute. You can just commit directly to the

05:45.720 --> 05:51.440
SPAC in that specific format. And thanks to Alexios and quite a few other contributors, we have

05:51.440 --> 05:58.480
tools and generators that right now is generating a website, an HTML version of the pages. And

05:58.480 --> 06:03.880
here's where us tools developers get to actually kind of get a little excited, at least I do. We

06:03.880 --> 06:11.360
generate a Shackle Owl schema file. Now, how many of you have never heard of Shackle or Owl? Okay.

06:11.560 --> 06:17.000
Oh my gosh. You guys are going to kill me. But there's good news. We translate the Shackle and

06:17.000 --> 06:21.480
Owl to something that you do understand. So, you know, just hang in there because we will get you,

06:21.480 --> 06:26.440
we're going to be generating certainly JSON schema files, you know, that I think is really popular.

06:27.440 --> 06:31.440
But you might be wondering, first you're wondering what the heck is Shackle and Owl. Look it up.

06:31.440 --> 06:38.080
It's really interesting. It's very complicated, but it's very complete. Okay. It's very complete. And

06:38.120 --> 06:42.760
then this is where we go to, we call it serialization schemas because JSON looks different than XML,

06:42.760 --> 06:48.360
looks different from, you know, there may be other schemas that we generate as well. And the way we,

06:48.360 --> 06:53.280
the reason we did all this is it ensures consistency. If we agree on what the markdown file is,

06:53.280 --> 06:57.680
everything is completely consistent all the way through to the schemas you use to validate your

06:57.680 --> 07:05.640
source code. So, it's well worth the effort. Really, Kate, it's worth the effort. So, you might,

07:05.920 --> 07:10.760
now after you ask yourself what is Shackle Owl, you might ask yourself, especially if you look at

07:10.760 --> 07:15.920
the spec, you're going to wonder why did we pick that. One thing it captures not only the syntax

07:15.920 --> 07:22.760
of the data, which all the schemas do well, you know, this is an integer, this is a string,

07:22.760 --> 07:29.360
it's got this pattern. It also captures the semantic behind it. So, it goes beyond what you can

07:29.360 --> 07:34.920
capture in a simple syntactic schema. And that is the additional information we pull out of the

07:34.960 --> 07:39.400
markdown files and we put it into the Shackle file. So, we can say things like, oh, you got a

07:39.400 --> 07:43.920
relationship between a file and a license. It can only be of this type and you have to have at least

07:43.920 --> 07:48.600
one of those. Whereas in a syntax, all you can really say is there's a relationship and it's got

07:48.600 --> 07:53.920
this cardinality and it's got this type. So, you can go beyond, you know, the specifications. And,

07:53.920 --> 07:58.640
of course, if you start with that, you can easily generate the simpler schemas, but you can't go

07:58.640 --> 08:04.360
from the simpler schemas to the more complex. So, that's why we picked Shackle. Now, the other reason

08:04.400 --> 08:18.200
we picked it is just about the reason we picked all the, well, there's a lot of, huh, it's coming,

08:18.200 --> 08:23.640
it's coming back. There's tooling for, there's libraries that support Shackle and most

08:23.640 --> 08:28.240
eco-language ecosystems like Python and Java, etc. Am I back yet?

08:28.240 --> 08:32.440
So, it's not coming back because we don't have slides that being captured on the stream and the

08:32.440 --> 08:37.240
HDMI is put through here. So, there's something going on with this machine. You need to go and talk

08:37.240 --> 08:44.160
downstairs. Stream is not available, is what they're saying. Oh, dear. Technical difficulties.

08:59.240 --> 09:16.760
So, let's, oh, but I keep, is it coming back? You want me to disconnect? Okay. Okay.

09:16.760 --> 09:31.360
X2.x, you know, if you cared about security, you cared about licensing, you cared about, whatever you

09:31.360 --> 09:35.640
cared about, you had to read the whole spec to find the little field that you're interested in,

09:35.640 --> 09:40.000
you know, in supporting. It's kind of hard to navigate that. And if you wanted to conform,

09:40.000 --> 09:44.680
you know, what is required, you know, it's like, you know, if you got a, if you're interested in

09:44.680 --> 09:47.880
security, you really want to make sure you have the integrity fields. If you're interested in

09:47.880 --> 09:51.480
licensing, you want to make sure you have the licensing fields. But, you know, what do you make

09:51.480 --> 09:57.360
required for the spec? So, we introduced profiles and we have what, six or seven profiles in total.

09:57.360 --> 10:02.360
And there's really three different aspects to a profile. The most important is the conformance

10:02.360 --> 10:07.000
requirements. And what that means for us tools developers, that's the most important. What

10:07.000 --> 10:12.040
that means is if you are a producer of a spec and you say, I conform to this profile, I'm, I'm

10:12.080 --> 10:16.600
meeting the minimum requirements. That's your promise to the consumer. So, you can say, I conform

10:16.600 --> 10:25.400
to licensing, security, and AI and data. But I don't conform to the new services profile. And

10:25.400 --> 10:31.080
that, that, and that's, you know, of course carried over in the, in the, in the data itself. It's

10:31.080 --> 10:35.760
also a namespace. And this is where the simplification comes in, is that you can kind of filter the

10:35.760 --> 10:40.920
spec on what you care about by using these namespace. Technically as well. So, there is a

10:40.960 --> 10:45.720
technical namespace that goes along with all the classes and properties. And you can filter on

10:45.720 --> 10:51.080
that. And within my code, I also use that to help me with some of the verification code that, that's

10:51.080 --> 10:56.000
there. And it's also the way we organize within SPDX. We have meetings that are organized by

10:56.000 --> 11:00.360
profiles. So, people of like-mind and like concerns get together and actually develop the

11:00.360 --> 11:07.040
spec. So, let's talk a little bit about some of the other structural changes. In SPDX2, we,

11:07.480 --> 11:13.120
everything was around a document and that was a file basically. And we had a mechanism for

11:13.120 --> 11:18.280
reliably linking documents together because you may get many types of S-bombs for many vendors. You

11:18.280 --> 11:22.160
may want to bring them together. You may want to compare them. And you may want to link them

11:22.160 --> 11:28.560
together. So, we had a mechanism to do that. In 3.0, we still have the ability, this I got to

11:28.560 --> 11:32.760
make this really clear because there's this rumor that SPDX documents are dead and 3.0 is not true.

11:32.760 --> 11:36.640
They're still there. And you can use them the same way that you've always used them. But you

11:36.680 --> 11:41.760
can also link directly from the elements. And an element is a package or a file or you know,

11:41.760 --> 11:46.600
something, you know, a unit of something you care about in SPDX. So, now you can go directly. And

11:46.600 --> 11:50.400
so, you can put these things out on a network without having to worry about the files that

11:50.400 --> 11:55.120
contain them. And so, think about like the World Wide Web, you know, where you have like files and

11:55.120 --> 11:59.720
images that are linked together in HTML. You can do that in SPDX documents in the future. So,

11:59.720 --> 12:06.160
it's a very, very flexible, powerful mechanism we're introducing. Relationships have changed. In

12:06.400 --> 12:11.880
SPDX 2, they were a property of the element. So, you have an element like a package and you say,

12:11.880 --> 12:16.200
it has a relationship to another element like a file and that would be a property. There's a

12:16.200 --> 12:20.960
problem with that when you go to this distributed environment because you have to have, you have

12:20.960 --> 12:26.400
to know about this in advance. You can't introduce a relationship after the fact because it's a

12:26.400 --> 12:32.600
property in the element itself. So, we moved the relationship outside. So, now you have a separate

12:32.640 --> 12:37.800
object which is the element that does a relationship from one element to the other. And we've put a

12:37.800 --> 12:42.000
bunch of properties in there that in a way kind of simplifies the relationships. So, rather than

12:42.000 --> 12:47.400
having hundreds of relationships, we can have dozens of relationships and a few properties within

12:47.400 --> 12:51.120
the relationships to take care of it. How am I doing on time, by the way?

12:51.120 --> 12:56.600
You are at, yeah, 17 minutes.

12:56.600 --> 13:01.920
Oh, perfect. Okay. Other, I want to make sure I go through these changes because I think this may

13:01.960 --> 13:07.320
be the most interesting part to you guys. The other, there's a few other changes. There's a

13:07.320 --> 13:13.560
better model for what we call entities. This is the person organization. In SPDX 2.x, they were

13:13.560 --> 13:18.040
just strings and you'd have to parse the string to figure out whether it's a person or an organization.

13:18.040 --> 13:23.080
We now have kind of like a whole object hierarchy that describes what these things are. It makes it

13:23.080 --> 13:29.720
a little bit easier for parsing. We renamed and removed a lot of confusing properties. Those of

13:29.760 --> 13:34.920
you who have built tooling for SPDX 2 will love this because people complained about these properties

13:34.920 --> 13:39.960
all the time. And we either renamed them to make them clear or just got rid of them. And, you know,

13:39.960 --> 13:44.320
for example, files analyzed. A lot of people don't like files analyzed. Functionality is still there,

13:44.320 --> 13:49.800
but it's just a lot clearer how to actually do those use cases. We've added some additional

13:49.800 --> 13:57.720
uses, useful classes and properties. So, for example, we elevated package URL from an external

13:57.720 --> 14:02.680
identifier to be in a property on package because a lot of people are using that directly for

14:02.680 --> 14:10.120
identifying the package metadata. And then we have some additional profile specific classes and

14:10.120 --> 14:14.360
properties, of course. And on this, I know you're not going to be able to type this in. Hopefully,

14:14.360 --> 14:20.760
you'll get a copy of these slides. There is a Google Doc that I put together. It's a living

14:20.760 --> 14:26.760
document, which means it's open for comment from any of you. You find something missing. Please

14:26.840 --> 14:32.040
comment on it. But this is kind of a guide to all the detailed changes. And I was writing that as

14:32.040 --> 14:36.760
I was doing this, and I know there's some folks that have done the same thing and contributed to

14:36.760 --> 14:41.880
this document that describes all the migration. It'll turn into a migration guide once we do the

14:41.880 --> 14:47.240
full release, but right now it's more of a living document. So, kind of stepping back at these changes,

14:47.240 --> 14:52.120
you know, what's kind of the big picture of this? You know, it'll be a lot more flexible with the

14:52.120 --> 14:57.640
profiles. There'll be a new relationship structure in addition to relationships. So, you need to

14:57.640 --> 15:01.960
annotations independent as well, so you can do more incremental changes to the S-bomb without

15:01.960 --> 15:07.960
having to go back and create a whole new big S-bomb. And then simpler profiles, simpler snippets,

15:07.960 --> 15:15.480
more use cases. And then, again, see the migration document for that. So, now I'm going to switch

15:15.480 --> 15:21.160
over to my personal experience. I was involved in writing this back, and now I'm going to tell you

15:21.160 --> 15:28.920
how fun it was to actually implement it. So, the Java libraries, first to give you context,

15:28.920 --> 15:35.240
I wanted to give you an overview of what the current SPDX 2.x library's architecture looks like.

15:36.040 --> 15:41.080
You know, it's what you'd expect. There's a model set of classes, and that match exactly the SPDX

15:41.080 --> 15:45.880
2.x model. The only change is really is I had to rename some of the things that conflicted with

15:45.880 --> 15:50.920
the Java language. So, Java doesn't like you to call a class package, for example. And then,

15:50.920 --> 15:55.400
there's a set of utility classes that has some useful functions like being able to do a comparison

15:55.400 --> 16:03.240
of license, little things like that. And because in the very first iteration of this, I started this

16:03.240 --> 16:08.840
like 10 years ago as a pretty printer, it was very monolithic, and I got a lot of feedback that,

16:08.840 --> 16:14.040
hey, you know, I don't want to have all these RDF library things in there, if all I want to do

16:14.040 --> 16:19.480
is generate JSON. So, we introduced a storage interface that lets you create a lot of different

16:19.480 --> 16:24.680
model stores. The model stores can represent a very specific serialization of a file, or it can

16:24.680 --> 16:30.760
also represent like a database or a triple store if you're into RDF, or the most common is just an

16:30.760 --> 16:36.840
N memory store for it. So, this allows you to separate these out into separate jar files. It

16:36.840 --> 16:41.000
does add a complexity because there's a storage interface in between that has to adhere so that

16:41.000 --> 16:45.720
we can separate these out into different things, but I think it does make it a lot cleaner.

16:46.840 --> 16:52.920
So, a couple of breaking changes that I noticed right off. I think one of the ones I did not

16:52.920 --> 16:59.480
expect, this change to the namespaces actually caused a change to the storage interface because I

16:59.480 --> 17:04.840
was just using the property names, and I knew that I could always map the property to the full

17:04.840 --> 17:09.400
URI of what the properties were, or the full string with the namespace because we had a clean

17:09.400 --> 17:14.200
mapping. I can't count on that anymore. So, I had to add one extra parameter, which means, oh my

17:14.200 --> 17:17.720
goodness, now I got to change all these different libraries to use that. Of course, I put in a

17:17.720 --> 17:22.840
compatibility library that made it a little bit easier, but that was a breaking change to all

17:22.840 --> 17:27.400
those things that are implementing the storage object, at the storage model below. The model

17:27.400 --> 17:33.880
itself created some breaking changes as you'd expect after going through what the changes are.

17:34.840 --> 17:41.160
There is, what I did is I took all of the spdx2.x code and moved that over to a compatibility

17:41.160 --> 17:50.120
library so that it's all still there. It is though in a different package in Java, so there is a

17:50.120 --> 17:55.960
small change to the imports, but it should work pretty much as is. The relationship and annotation

17:55.960 --> 18:01.400
structures that definitely impacted the Java code because it moves it out of properties and makes

18:01.480 --> 18:06.440
them a little bit more independent. I came up with a trick to help manage the consumers of my

18:06.440 --> 18:10.840
libraries, keep them from having breaking changes. I'll come to that in a couple minutes. That might

18:10.840 --> 18:17.880
be an interesting tip for some of you. The external document ref structure really changed. That was

18:17.880 --> 18:23.560
probably one of the more significant changes. We talked about the agents, the snippet simplifications,

18:23.560 --> 18:25.720
and then moving these properties to relationships.

18:28.280 --> 18:30.280
Sure.

18:31.480 --> 19:01.320
That layer will direct you to the compatible layer or to the new

19:01.400 --> 19:09.320
model layer. It basically minimizes the impact to the users of my library. That's this spdx

19:09.320 --> 19:15.480
model factory is what does the switching there. This is the little trick that I came up with

19:15.480 --> 19:20.200
for relationships. We used to have these as properties and now we moved them over to separate

19:20.200 --> 19:24.440
independent relationships. You can imagine what this will do to all the users of the library. It's

19:24.440 --> 19:29.720
like, oh, this isn't just like a change of coding or a change of names. I got to restructure my code.

19:29.880 --> 19:36.360
I came up with a way to make it look like a property inside the class. I have a special

19:36.360 --> 19:40.600
class that says, okay, this is a relationship, but it looks like a property. If you're interested

19:40.600 --> 19:45.400
in that technique, let me know. I can show you the code. It really wasn't that hard. It's a very

19:45.400 --> 19:51.320
generalized class that I can use for just about any kind of property. I think it's called

19:51.320 --> 19:54.360
relationship property or something like that. That makes it a little bit easier.

19:55.080 --> 20:02.760
The other thing I was focused on is reducing the errors. You remember in the, how am I doing?

20:02.760 --> 20:10.200
I'll see you in five minutes. Thank you. I saw you getting ready. You remember in the specs,

20:10.200 --> 20:15.640
we did a lot of things to reduce the translation errors down to the actual schema files. We're

20:15.640 --> 20:24.120
taking that further with the coding as well. We're from the OWL Shackle file. I'm generating the

20:24.200 --> 20:31.000
Java code. The Java library code, so now you got from the markdown file all the way through to the

20:31.000 --> 20:38.680
actual Java code, traceable, reproducible code to make sure it's all done right. I can't tell you

20:38.680 --> 20:43.880
how many errors I have personally made or I mistyped something or I didn't read it right,

20:43.880 --> 20:49.480
and it got implemented wrong in the Java library. I think the errors that I make now will be much

20:49.480 --> 20:53.240
bigger because it'll be in the code generator. It'll happen to everything. Sorry. That's a

20:53.240 --> 21:00.040
little bit of a joke, but no. It'll get rid of all those little errors. We'll also be generating,

21:00.040 --> 21:05.080
as I mentioned before, the schema files for those of you who would rather see things in JSON schema

21:05.080 --> 21:14.840
or XML schema. I also generate the verification code from the Shackle OWL files. If you're into the RDF,

21:14.840 --> 21:27.240
it complies with the Shackle OWL. Those are some of the techniques for reducing the errors.

21:27.240 --> 21:34.840
I think this is my last slide, the new architecture. One thing I didn't mention is this copy manager

21:34.840 --> 21:40.680
in between. It's a little bit of a detail, but it's kind of an important one, is that if you're

21:40.680 --> 21:47.480
migrating, if you've got two different SPDX documents with two different versions and you're

21:47.480 --> 21:52.280
referencing to each other, that copy manager will let you copy it over to the new version. That

21:52.280 --> 21:58.680
kind of does the upgrades. It'll also copy between the different types of model stores. It'll let

21:58.680 --> 22:06.680
you convert between tag value and JSON, whatever. Anyway, I think I might have a minute or two

22:06.680 --> 22:14.280
for questions. I got three minutes for questions. Did I go so fast? I lose all of you on that?

22:14.280 --> 22:16.680
That felt like I was speed presenting. Yes.

22:16.680 --> 22:24.680
I recognize that you get a lot of work about the specs so that you can see them easier. That's great work.

22:24.680 --> 22:32.680
But also, I would say we need to have a lot of different kind of examples. You know, you write your library,

22:32.680 --> 22:38.680
then you want to test it, and then you find out whether you really understood the specs the right way.

22:38.680 --> 22:42.680
Yes. Yes. And therefore, more examples of different types.

22:42.680 --> 22:50.680
Yes. I don't think I can repeat all of that, but I think the basic comment, and I think it's a really good one,

22:50.680 --> 22:56.680
is in addition to the spec, we need to have examples, you know, so that we can work off of those examples.

22:56.680 --> 23:04.680
And we do have an examples repo in SPDX today. We plan on, we're going to organize that in the future for 3.0 by profile.

23:04.680 --> 23:10.680
So you'll be, if you're interested in security, you can go down and look at, like, the security examples, be able to use those.

23:10.680 --> 23:12.680
Excellent point. Thank you. Yes.

23:12.680 --> 23:22.680
Now is current code ready to convert a file from SPDX2 to 3.0?

23:22.680 --> 23:28.680
Yeah, that's a really good question. So the question was, do we have code today that'll let you convert from 2 to 3?

23:28.680 --> 23:36.680
The Java code is not ready to be used yet, unfortunately. It compiles, but not quite ready. Yes, Dolph.

23:36.680 --> 23:44.680
Yeah, we have a project that can do that with the 3DUSRC of SPDX3.

23:44.680 --> 23:48.680
So Dolph mentioned there is, is that in the presentation later today?

23:48.680 --> 23:56.680
Yeah. Okay. So we hear about a tool that can do that later today. It's not the Java library. So it's coming though. It's not quite ready yet. Yes.

23:56.680 --> 23:58.680
SPDX3 light coming?

23:58.680 --> 24:11.680
SPDX3 light is coming. And that will be, that's one of our profiles. It's got, it's unique in that it skinnies it down, you know, rather than adding things to it, which other ones do. Yeah. Sorry. Yes.

24:11.680 --> 24:25.680
Talk about some of the relationship of SPDX to RDF. I was wondering if you'd come up against any requirements, things that RDF doesn't support, stuff that you feel like you need to push back up into RDF.

24:25.680 --> 24:37.680
Ah, that's a good question. The question is, is there anything that we ran into in the RDF world that we, that we couldn't satisfy by using like, like the RDF, maybe Shackle Owl specification?

24:37.680 --> 24:48.680
I'd have to think about, I have a feeling we have, but I can't think of an example right now. You know, I, I, I, I, let me think about it and then give back to you later. Yeah. Thank you. Yes.

24:48.680 --> 24:52.680
What's the view about converting SPDX3 to Cyclone DX and back and forth?

24:52.680 --> 24:53.680
Oh, yes.

24:53.680 --> 24:57.680
Because they've obviously got things like AI in their model 5. Right.

24:57.680 --> 24:59.680
5, etc. You've got one. Right.

24:59.680 --> 25:05.680
And security. So we're looking at compatibility because there's not people to be, what people to be flexible?

25:05.680 --> 25:21.680
Yes, we do. And I'm, I'm with you on that. So the question is, what about converting between Cyclone DX and SPDX? We actually had an effort going on in SPDX2 where we had people from Cyclone DX, myself included on the SPDX side collaborating and, and we were doing two things.

25:21.680 --> 25:32.680
We were, we were writing libraries to convert, you know, so kind of really testing it hands on. And, and then we were also working on the SPAC where we were like in 2.3.

25:32.680 --> 25:41.680
I actually put a number of things in per request of the Cyclone DX team to make it easier to convert. So we're doing both of those. Unfortunately, that collaboration stopped.

25:41.680 --> 25:58.680
I am looking for somebody from the Cyclone DX team to work with to do that in 3.0. So if you're on the Cyclone DX team or if any of you in the room are in Cyclone DX and are interested in, in collaborating with SPDX and make it easier for all of our users, let me know.

25:58.680 --> 26:00.680
I'd be happy to work with you. Thank you.

26:01.680 --> 26:02.680
Yeah.

26:15.680 --> 26:19.680
Okay. So I, I'm not sure I completely understand the, oh, time's up.

26:19.680 --> 26:20.680
Answer him.

26:20.680 --> 26:21.680
Yeah.

26:21.680 --> 26:25.680
Why don't you go ahead and shut me down and you can go ahead and close the screen and take that over. Yeah.

26:25.680 --> 26:26.680
Yeah.

26:26.680 --> 26:27.680
Just.

26:28.680 --> 26:30.680
So, sorry. So the, the decision about.

26:30.680 --> 26:33.680
These are committee that decide about the changes.

26:33.680 --> 26:45.680
Oh, how, okay. Like the governance of how the SPAC has made itself. Yeah. So we do have a formal governance process. We have a technical, we have kind of like a steering committee and then we have different work groups.

26:45.680 --> 26:56.680
The real work gets done in the profile work group. Most of it's in the core. There are team leads that are nominated and, you know, the steering committee, this whole process that does that.

26:56.680 --> 27:04.680
And then the way that we really try hard to make all the decisions consensus space and it's, it's based on contributions too.

27:04.680 --> 27:10.680
So if somebody says, hey, I want to do this, but they don't contribute anything. Yeah, we don't really listen.

27:10.680 --> 27:16.680
If they say, hey, I want to do this and here's a poll request. Here's the spec. Here's some tasks. You know, here's what you do to the schema to make it.

27:16.680 --> 27:18.680
Then it's like, oh yeah, come on in, you know, we'll work on it.

27:18.680 --> 27:23.680
And sometimes there's differences of opinion. We try to work together very rarely.

27:23.680 --> 27:30.680
The team leads will have to make a call and we try to do it based on the majority, but you know, it's rare when we do that.

27:30.680 --> 27:36.680
We think very carefully before we do that. Yeah. All right. Max, thank you.

