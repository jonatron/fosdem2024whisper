WEBVTT

00:00.000 --> 00:10.000
So, with that, we hand it over to our illustrious first speaker, Dalibor Topic.

00:10.000 --> 00:13.000
Yeah, hello, I'm Balkir for myself as well.

00:13.000 --> 00:17.000
Let's see, the microphone that works, works, yeah.

00:17.000 --> 00:22.000
So, my name is Dalibor Topic, I work at Oracle.

00:22.000 --> 00:25.000
And I don't need a mic.

00:25.000 --> 00:29.000
I'm Static-y. Oh, yeah, I'm like metal.

00:29.000 --> 00:34.000
Metal, I'm metal. Okay, better?

00:34.000 --> 00:38.000
No, that's just my voice.

00:38.000 --> 00:46.000
Right, so I work at Oracle as a product manager on OpenJDK.

00:46.000 --> 00:49.000
I also tend to wear many other hats in the OpenJDK community,

00:49.000 --> 00:52.000
like that of a JDK Updates maintainer.

00:52.000 --> 00:55.000
So, are they giving the presentation following right after this one

00:55.000 --> 01:00.000
on how the JDK Updates have evolved across the past decade?

01:00.000 --> 01:05.000
But for this one, let's get started in the interest of time.

01:05.000 --> 01:09.000
Four years ago, our story took a little turn.

01:09.000 --> 01:13.000
Mark Reinhold gave this talk, or version of that from four years ago,

01:13.000 --> 01:17.000
on the state of the OpenJDK in the free Java DevourMid foster.

01:17.000 --> 01:21.000
While Mark couldn't join us this week, he graciously offered me

01:21.000 --> 01:24.000
to actually present the talk as I would give it

01:24.000 --> 01:26.000
after four years later.

01:26.000 --> 01:31.000
So, my version has now to cover not just one year as the tradition demands,

01:31.000 --> 01:34.000
but four years of development of OpenJDK.

01:34.000 --> 01:38.000
For better or worse, I think for better, I don't get four times as much time.

01:38.000 --> 01:41.000
So, I just have 20 minutes, so it would be very compressed.

01:41.000 --> 01:46.000
And I leave the fun parts out for other people to cover in this room.

01:46.000 --> 01:51.000
But almost 34 years ago, the World Health Organization declared

01:51.000 --> 01:56.000
the novel coronavirus outbreak a public health emergency of international concern.

01:56.000 --> 01:58.000
Their highest level of alarm.

01:58.000 --> 02:01.000
And while this development, at least for me at the time,

02:01.000 --> 02:06.000
and probably to most of you might not have seen very concerning while we were here at Brussels,

02:06.000 --> 02:11.000
well, it turned out that in the following weeks and months and even years,

02:11.000 --> 02:15.000
we had a public and our response to it disrupted both the regular life

02:15.000 --> 02:18.000
and the supply chains.

02:18.000 --> 02:23.000
And for us, for the OpenJDK thing in particular,

02:23.000 --> 02:28.000
it came at an in-between moment because we're in the middle of making JDK 14.

02:28.000 --> 02:36.000
Back in September 2019, we had planned to release JDK 14 on March 17th of 2020.

02:36.000 --> 02:40.000
And so, boom, all of a sudden everything changes.

02:40.000 --> 02:45.000
Because we actually planned to have release cannabis in February and then release in March.

02:45.000 --> 02:50.000
And as you may well remember, March 2020 was quite something.

02:50.000 --> 02:55.000
Man, that was something. It was quite disruptive for many people in many ways.

02:55.000 --> 03:02.000
But what wasn't surprising was that we actually delivered JDK 14 as predicted in September right on time.

03:02.000 --> 03:08.000
Just as we planned on March 17th, just like every JDK release since,

03:08.000 --> 03:18.000
we had switched over to this new release cadence of having a release that's predictable and time-driven every six months.

03:18.000 --> 03:24.000
That switch was performed two years prior to that, back in 2018, with JDK 10.

03:24.000 --> 03:30.000
And then it led to much better results than the way the JDK development used to be

03:30.000 --> 03:34.000
prior to that with longer development cycles that are less predictable

03:34.000 --> 03:41.000
and tended to deliver less, let's say, reliable results in terms of actual release dates.

03:41.000 --> 03:47.000
And of course you can now say, well, sure, of course you did release on time

03:47.000 --> 03:53.000
because what was left to do was just to polish your release candidates to perfection, as you always do.

03:53.000 --> 03:57.000
How hard could it possibly be? Well, it's not so easy.

03:57.000 --> 04:01.000
So we actually, in our nine-month development cycle of the JDK releases,

04:01.000 --> 04:07.000
we leave three months to the polishing part to ramp down and actually fix the release down,

04:07.000 --> 04:13.000
whereas the first six months we devoted to developing features and all the new bug fixes that come in.

04:13.000 --> 04:20.000
And so we leave ourselves enough time to actually get to a really high degree of quality.

04:20.000 --> 04:24.000
So while there's probably a kernel of truth to saying there wasn't that much left to do,

04:24.000 --> 04:32.000
there is a lot more to it because as we look at how we delivered the rest of the remaining four years releases,

04:32.000 --> 04:40.000
they also all came in on time during the ups and downs of the pandemic and supply chains and what else was going on in the world.

04:40.000 --> 04:50.000
So there's actually quite more to it than just the fortunes favor of the bold or the brilliant or high-end putters.

04:50.000 --> 04:58.000
So as my colleague Brian Getz said in his keynote from last year,

04:58.000 --> 05:06.000
the bad old days, as we now call them, but they were the good old days back when we were in the middle of them,

05:06.000 --> 05:11.000
they had a very core-strained feature box release model.

05:11.000 --> 05:15.000
So it took us two years, two-four years between releases.

05:15.000 --> 05:24.000
And just this little fact tells you how flexible that was because that's the double the time sometimes, depending how bad things go.

05:24.000 --> 05:32.000
We had frequent delays. There used to be like a running joke sometimes in papers about trade releases.

05:32.000 --> 05:41.000
And we had no predictability. The release management process had to be very heavyweight to accumulate for that.

05:41.000 --> 05:51.000
And we had a lot of temptation because of that, the release is shipping every few years to push in changes that just had to be there.

05:51.000 --> 05:56.000
And so that lead to tweaking of the arms to get things in sometimes.

05:56.000 --> 06:02.000
And also because users wanted these features, not just in latest release, but on the releases they were using,

06:02.000 --> 06:07.000
to tweak the arms of the backport steams release managers to get them backported.

06:07.000 --> 06:14.000
So we had these huge releases that came out and kept getting major feature updates every six months,

06:14.000 --> 06:18.000
not just backfixes, but really big huge features like new garbage collectors and stuff.

06:18.000 --> 06:22.000
So that's a lot of work, but it wasn't really working too well for anybody.

06:22.000 --> 06:29.000
It wasn't working well for us because it had these massive overheads.

06:29.000 --> 06:36.000
It wasn't working too well for the developers and the community out there either because Java developers were getting frustrated

06:36.000 --> 06:43.000
by the pace of Java's development and by the time it took to go from one release to the next to get the major features,

06:43.000 --> 06:50.000
while all around them the world was exploding with excitement around groovy scala.

06:50.000 --> 06:54.000
All right, yeah. Pearl five, come on.

06:54.000 --> 06:59.000
Things happened back about ten years ago, so it was an exciting time for Java.

06:59.000 --> 07:09.000
And so the excessive backports also ended up being a problem for the backporting project because we ended up having to do a lot of work

07:09.000 --> 07:13.000
to get new features and to shuffle things around.

07:13.000 --> 07:20.000
Whereas with the new model we changed things a bit and decided to just focus on backporting what really matters,

07:20.000 --> 07:27.000
which is security fixes, grid fixes, and the rest will leave up to people who really want to do the work.

07:27.000 --> 07:36.000
So to do that we first inquired to see what actually we wanted, what we need for developers.

07:36.000 --> 07:38.000
They tend to want the latest and greatest features.

07:38.000 --> 07:43.000
They tend to want the language changes, the VM changes, the performance fixes, all the good stuff.

07:43.000 --> 07:50.000
Whereas our many Java users tend to be conservative business users.

07:50.000 --> 07:56.000
So they tend to favor and appreciate stability and security.

07:56.000 --> 08:07.000
And they tend to want to have their investment they've been to the platform two, three, five years ago pay off and keep paying off for a few more years as they had planned.

08:07.000 --> 08:16.000
And so it's hard to make these very different goals, hard to fulfill at the same time.

08:17.000 --> 08:23.000
So the old model basically didn't make either developers too happy or the enterprises too happy.

08:23.000 --> 08:32.000
The new model we adopted with these kids is a tip and tail model as George and Brian and others on our team like to call it.

08:32.000 --> 08:38.000
Where all the features that we develop are integrated on the tip of the development.

08:38.000 --> 08:44.000
So they're done where development happens, right, where the action is.

08:44.000 --> 08:49.000
And they're integrated only when they're ready and only when they're ready.

08:49.000 --> 08:55.000
So we resisted the temptation to pull something in just because it's got to get out there, man.

08:55.000 --> 09:02.000
We pull it only in when it's actually fully baked and we believe it's actually done and good enough.

09:02.000 --> 09:10.000
And to actually get to a point where it's good enough sooner, we introduced the concept of feature previews for example.

09:10.000 --> 09:17.000
Where a feature can then get gradually improved and refined to its actually fully part of the platform.

09:17.000 --> 09:24.000
And so that takes a lot of the pressure out from getting code and features into JDK.

09:24.000 --> 09:29.000
Because if you miss one train, there is another one coming six months afterwards.

09:29.000 --> 09:36.000
And if your feature isn't completely perfect, you want to have, use a feedback, you may get a preview, you get to use a preview, a preview.

09:36.000 --> 09:38.000
And you do this a couple of times if you have to.

09:38.000 --> 09:43.000
And this takes what used to be a singular point where you had to make decisions.

09:43.000 --> 09:46.000
Like this is where the release gets done.

09:46.000 --> 09:50.000
Break this away into actually a matrix across time.

09:50.000 --> 09:52.000
So you have plenty of time and space.

09:52.000 --> 09:58.000
You remove the overhead of managing the open source release part and can focus on development.

09:58.000 --> 10:01.000
And that's very important because that's where really the fun is.

10:02.000 --> 10:10.000
On the other hand, the tail part is that of course users really like and enjoy having stable Java releases to work with.

10:10.000 --> 10:17.000
Because one of the defining features of the platform is its stability, reliability and predictability.

10:17.000 --> 10:24.000
So we at Oracle offer commercial support for long term support releases.

10:24.000 --> 10:25.000
And we're not the only ones.

10:25.000 --> 10:27.000
So the many others in the community.

10:27.000 --> 10:40.000
And so this model basically allows both development to happen very quickly, but also allows commercial users, for example, to actually invest into the platform.

10:40.000 --> 10:45.000
And then get security updates and critical fixes and sometimes even more.

10:45.000 --> 10:50.000
But typically that's the focus of the platform.

10:50.000 --> 10:55.000
And when we did this six years ago, there was a lot of skepticism.

10:55.000 --> 11:06.000
Both internally, so at Oracle, also internally in the wider OpenJT community, because it sounded like a lot more work actually to release every six months.

11:06.000 --> 11:07.000
I mean, we knew how releases were.

11:07.000 --> 11:11.000
They were long and painful and never shipped on time.

11:11.000 --> 11:12.000
Right.

11:12.000 --> 11:15.000
So that was weird.

11:15.000 --> 11:20.000
For example, we feared at Oracle, we would end up having releases with nothing to do with the ship.

11:21.000 --> 11:25.000
Will we actually have marquee features every six months?

11:25.000 --> 11:26.000
Is that going to matter?

11:26.000 --> 11:28.000
Well, change changes hard.

11:28.000 --> 11:30.000
We fear change.

11:30.000 --> 11:32.000
But also in the broader ecosystem, people were skeptical.

11:32.000 --> 11:35.000
So you're doing a release every six months.

11:35.000 --> 11:37.000
I mean, are they going to be any good?

11:37.000 --> 11:42.000
Isn't Java 8 what everything everybody ever will need?

11:42.000 --> 11:44.000
Why do more Java releases at all?

11:44.000 --> 11:49.000
I mean, so isn't like, are we going to take over the world?

11:50.000 --> 11:52.000
Yeah, so that didn't quite happen.

11:52.000 --> 11:55.000
But nevertheless, so change is hard.

11:55.000 --> 12:00.000
And so people were really wondering about being overwhelmed and worried.

12:00.000 --> 12:06.000
And the one way how you actually fix this too, well, do the cultural change and show that it works.

12:06.000 --> 12:08.000
And so we had to change our mentality.

12:08.000 --> 12:16.000
We developed the JDK to switch our mindsets, to basically go away from the way things were done before,

12:16.000 --> 12:23.000
to learning to embrace this change and not to panic about missing a train.

12:23.000 --> 12:24.000
It's okay.

12:24.000 --> 12:25.000
There is an excellent.

12:25.000 --> 12:28.000
It's almost like the trains in Belgium, which seem to run fine,

12:28.000 --> 12:31.000
contrast to where I come from.

12:31.000 --> 12:33.000
There's always an excellent.

12:33.000 --> 12:38.000
We don't try to overdo the tail.

12:38.000 --> 12:42.000
We don't try to backport everything to the JDK updates project.

12:42.000 --> 12:45.000
We just backport what we believe needs to be backported.

12:45.000 --> 12:50.000
So just the specific fixes required for security and stability,

12:50.000 --> 12:55.000
maybe platform support, maybe every now and then there is something weird like new character sets

12:55.000 --> 12:58.000
or some data time updates that have to be done.

12:58.000 --> 13:00.000
But that's roughly it.

13:00.000 --> 13:07.000
We don't try to make Java 8 in open JDK be the same as Java 21 because it's not.

13:07.000 --> 13:08.000
It's not going to be.

13:08.000 --> 13:13.000
People who use Java 8 don't care about it being Java 21.

13:13.000 --> 13:18.000
And so this lets us, to philosophy, of breaking down this big, big feature,

13:18.000 --> 13:22.000
the small, tiny elements that can be delivered in six months increments

13:22.000 --> 13:29.000
and removes a lot of the release management process to a point where it's basically invisible.

13:29.000 --> 13:33.000
And things just flow along as they should be.

13:33.000 --> 13:37.000
And so this has worked out better than we hoped.

13:37.000 --> 13:40.000
The time for releases was slashed.

13:40.000 --> 13:43.000
The effort it took as well.

13:43.000 --> 13:48.000
The amount of work that had to be done on backports went significantly down as well.

13:48.000 --> 13:54.000
In particular, one thing that we embraced was the change of leadership in backports.

13:54.000 --> 14:00.000
Because back in the day, when it started doing JDK updates in 2011,

14:00.000 --> 14:06.000
we used to do those for many, many years with the Oracle Open JDK maintainer team.

14:06.000 --> 14:12.000
We delivered Java 6 updates for, I think, six years, Java 7 for five years.

14:12.000 --> 14:15.000
I think eight, also for four or five years, I'm not sure.

14:15.000 --> 14:19.000
And so once we move to this faster release cadence, we're clear to us,

14:19.000 --> 14:22.000
we can't just keep doing like five years of updates on every six months.

14:22.000 --> 14:25.000
That's just impossible. It makes no sense.

14:25.000 --> 14:29.000
Nobody's going to embrace every one of those all the time.

14:29.000 --> 14:36.000
So what we did instead was to move to a model of actually transitioning responsibility in the community for the updates.

14:36.000 --> 14:41.000
Where the Oracle maintainer team now takes care of the updates for the first six months.

14:41.000 --> 14:45.000
But then we passed on the responsibility of those in our community who are capable

14:45.000 --> 14:49.000
and willing of maintaining release further.

14:49.000 --> 14:53.000
Like Andrew over there did for eight and eleven.

14:53.000 --> 14:55.000
It still does.

14:55.000 --> 14:59.000
So if you want to hear painful stories asking later,

14:59.000 --> 15:04.000
and others like Severing will do for 21.

15:04.000 --> 15:12.000
And this is also a painful thing to do in the community because giving our responsibility requires, you know, courage.

15:12.000 --> 15:18.000
But we're fortunate enough to have been working as a community together for a long time now

15:18.000 --> 15:23.000
that we've built up the trust actually in processes to make this work well.

15:23.000 --> 15:25.000
And I think they do.

15:25.000 --> 15:30.000
It also lets us deliver on the Java itself in JDK itself more features faster, which is great.

15:30.000 --> 15:32.000
It makes developers happy.

15:32.000 --> 15:35.000
And this of course, it makes all our customers happy.

15:35.000 --> 15:40.000
JDK developers are happier because they have to spend so much time in their management.

15:40.000 --> 15:43.000
And so everybody benefits.

15:43.000 --> 15:45.000
And so we keep delivering features.

15:45.000 --> 15:49.000
In 21, as my colleague Aurelio Garcia de Ribeiro from Port of Management Team,

15:49.000 --> 15:54.000
says we have four buckets that the features happen into like language and libraries,

15:54.000 --> 15:57.000
performance and housekeeping and stuff.

15:57.000 --> 16:00.000
There is something for everyone, right?

16:00.000 --> 16:08.000
In the prior JDK release, there is even a bit more stuff that came in through this model.

16:08.000 --> 16:13.000
And if you compare with 11, there's actually a ton of stuff that happened in the past,

16:13.000 --> 16:19.000
in the past two LTS releases that is coming to the platform through this very, very quick development model.

16:19.000 --> 16:28.000
And all together, like, you know, the time between 11 and 21 isn't that much longer than like an old release would have been overall.

16:28.000 --> 16:36.000
So this model not just works well in delivering stuff, it delivers a mass of things.

16:36.000 --> 16:38.000
And it delivers so predictably and regularly.

16:38.000 --> 16:43.000
And that's what makes it great.

16:43.000 --> 16:47.000
Then another thing that's important, four years ago, when we were here,

16:47.000 --> 16:53.000
we had the open JDK Commitus Workshop in Brussels where we talked about our tooling.

16:53.000 --> 16:59.000
We had just been going through the progress to update our tooling for JDK development

16:59.000 --> 17:05.000
to move the social management from the material systems that we used and hosted over to GitHub.

17:05.000 --> 17:11.000
That's now Microsoft hosts and pretty much everybody uses.

17:11.000 --> 17:20.000
And that, of course, was also a change that required a bit of courage and also provided opportunity to define tooling that makes our jobs easier

17:20.000 --> 17:25.000
and that helps us manage the JDK coding changes coming in and keeps helping us.

17:25.000 --> 17:29.000
And we keep updating this tooling to help us with backpours and so on.

17:29.000 --> 17:32.000
And so this is a powerful thing.

17:32.000 --> 17:37.000
It's not just about the mindset, it's about embracing the tooling to actually change the things you do under the hood

17:37.000 --> 17:44.000
and to use the power of computers to make working on the computers easier.

17:44.000 --> 17:49.000
And so these days, Open JDK on GitHub is a pretty massive project.

17:49.000 --> 17:54.000
It has around, I think, 120 repositories, around 500 people participating.

17:54.000 --> 18:05.000
And most importantly, the past four years have been the four years with the most changes going into Open JDK ever in four-year terms,

18:05.000 --> 18:09.000
which is like one US presidency, just saying.

18:09.000 --> 18:12.000
So 2020, Trump was president, right?

18:12.000 --> 18:22.000
So it's also the change that led to pretty much most Open JDK contributors coming into the community

18:22.000 --> 18:29.000
because, of course, joining us through GitHub has been much easier than learning an unfamiliar code system

18:29.000 --> 18:36.000
and trying to work around the industries of a very different contribution path for most of the other open source projects.

18:36.000 --> 18:41.000
So that has helped us move Open JDK forward as fast as it was.

18:41.000 --> 18:49.000
So what's the actual change that happened in the past four years then overall?

18:50.000 --> 18:53.000
Well, we've got faster and better at delivering the JDK.

18:53.000 --> 19:07.000
Java has been back in 2020 before the pandemic, one of the top choices for developers for programming up there in the upper top right corner.

19:07.000 --> 19:12.000
And in the last survey from Red Monk for programming languages rankings,

19:12.000 --> 19:22.000
it has remained in the top right hand corner as one of the most popular choices for developers on GitHub and on Stack Overflow.

19:22.000 --> 19:29.000
I'm not so much so sure about Stack Overflow anymore because I think that's mostly a training site for generative AI these days.

19:29.000 --> 19:37.000
But, you know, the GitHub numbers I think are still fairly valid and the GitHub service also very out of cover.

19:37.000 --> 19:46.000
Java is very popular and frankly rightly so because we keep as a community making it better and moving forward.

19:46.000 --> 19:55.000
And just to, as a point of that, in our JDK release blocks that Sherat, one of my colleagues writes,

19:55.000 --> 20:04.000
we have this wonderful slides of the contributions into Open JDK tip from since JDK 11 to 21.

20:04.000 --> 20:07.000
So it's like 10 JDK releases, like five years development.

20:07.000 --> 20:13.000
And of course you can see there is a big red block of Oracle as Java stewards.

20:13.000 --> 20:16.000
We do a lot, we have to do a lot, right?

20:16.000 --> 20:22.000
But it's not just Oracle. There's a lot of other parties participating and moving Java forward together.

20:22.000 --> 20:30.000
And one aspect I really want to emphasize here is that this little blue block over there, that's the independent developers.

20:30.000 --> 20:36.000
That are not affiliated with Oracle, or Red Hat, or SAP.

20:36.000 --> 20:40.000
So those are people who don't work for any of these big companies.

20:40.000 --> 20:49.000
And they have, thanks to the move to GitHub, among other things, and now move so far forward in the contribution queue

20:49.000 --> 20:53.000
to actually make up, I think, the fourth largest block of contributors.

20:53.000 --> 20:58.000
And that's great. I mean, that tells you that we're doing something right in this community.

20:59.000 --> 21:01.000
So thank you to all of you who have actually contributed in the past.

21:01.000 --> 21:08.000
And hopefully we'll see a few of you join us and do interesting things in the next year.

21:08.000 --> 21:16.000
And speaking of interesting things, we have a bunch of projects going on in the community that are active, like Loom,

21:17.000 --> 21:25.000
with Ellen, talking about later, like ZGC, a garbage collector, Panama, Amber, for language changes,

21:25.000 --> 21:35.000
LIDEN, where we work on basically time shifting and time machines and other wonderful things for Java technology.

21:35.000 --> 21:45.000
The Valhalla to make the JVM much faster and simpler, and Babylon to make the Java more suitable for other weird deployment targets

21:45.000 --> 21:49.000
like GPUs. So we do a lot of weird things, fascinating things.

21:49.000 --> 21:55.000
And in particular, these are things where your feedback is very welcome, where your testing effort is very welcome,

21:55.000 --> 21:58.000
where your ideas are welcome. We can actually make a difference.

21:58.000 --> 22:04.000
It's much easier to make a difference than, say, if you were trying to contribute to a JDK Update project,

22:04.000 --> 22:08.000
which is a bit of a meat grinder. I'll tell you that in a few minutes and why it is.

22:09.000 --> 22:16.000
But nevertheless, this is where you can really do stuff and have fun doing some.

22:16.000 --> 22:24.000
And to talk about these projects, in this very dev room, we'll have today myself and Jonathan.

22:24.000 --> 22:27.000
Jonathan Dowland. Yeah.

22:27.000 --> 22:34.000
Over there, talking about JDK Updates at 11.05 and at 16.40.

22:34.000 --> 22:41.000
We'll have Roman Kenke over here talking about Lily Puth at 11.55.

22:41.000 --> 22:46.000
We'll have Maurizio Cimadabare talking about Project Panama.

22:46.000 --> 22:51.000
We'll have Alan Bateman talking about Project Loom.

22:51.000 --> 22:59.000
We'll have Phil, we just saw on the stage over there, talking about Project Wayfield along with Alexei and Niels.

22:59.000 --> 23:07.000
And we'll have Johannes over there talking about some of the work that's going on in the House spot on Save Points.

23:07.000 --> 23:13.000
So you have a chance to meet many of the people who work on the JDK here.

23:13.000 --> 23:17.000
If you haven't met him before, look around and ask around.

23:17.000 --> 23:22.000
You may be holding up your Chippewa review, as was in my case.

23:23.000 --> 23:26.000
Otherwise, enjoy the day, I would say.

23:26.000 --> 23:30.000
And thank you for coming and thank you for being a part of this community.

23:39.000 --> 23:45.000
So this gives us five minutes to shuffle rooms if you want to, and then we move on with the next one.

