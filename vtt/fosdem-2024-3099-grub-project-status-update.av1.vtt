WEBVTT

00:00.000 --> 00:17.280
Thank you guys.

00:17.280 --> 00:19.880
My name is Daniel Kippur.

00:19.880 --> 00:20.880
I work for RACL.

00:20.880 --> 00:26.840
I'm software developer and grabs upstream my tenure since 2005.

00:26.840 --> 00:27.840
I think it doesn't work.

00:27.840 --> 00:31.840
My only issue is only for recording.

00:31.840 --> 00:33.840
I have to speak louder.

00:33.840 --> 00:36.840
Please remind me about that.

00:36.840 --> 00:38.840
Thank you.

00:38.840 --> 00:45.840
I want to present what is happening in the project right now, where we are and other things.

00:45.840 --> 00:50.840
The plan for this presentation, I want to discuss what happened during the last two years.

00:50.840 --> 00:57.840
I want to dive a bit to the cover it to work, which he did during the last three years.

00:57.840 --> 01:02.840
Also, I will be discussing what is happening in the project right now.

01:02.840 --> 01:08.840
And also, I will show you some statistics for federal grabs upstream patches.

01:08.840 --> 01:13.840
So, let's start from the beginning, let's say.

01:13.840 --> 01:20.840
I suppose that it is not needed to remind what is grab is.

01:20.840 --> 01:26.840
In general, it is a bootloader, but we are not focusing on UFI income horizon to system D.

01:26.840 --> 01:33.840
We support all architectures and platforms, which are most of our architectures and platforms.

01:33.840 --> 01:36.840
I suppose there are some platforms which don't support architectures.

01:37.840 --> 01:48.840
But there are tons of architectures and platforms, and we try to give a user a lot of flexibility, what can be done, etc.

01:48.840 --> 02:01.840
So, the grapple is happened in the last December, and we provided support for new compilers, new bidinutils tools, and other stuff.

02:01.840 --> 02:08.840
We also finally did a unification on the UFI Linux kernel loader.

02:08.840 --> 02:16.840
Before that, every architectures had own implementation of EFI kernel loader.

02:16.840 --> 02:26.840
And additionally, to make the problem much more complicated, we had a completely different X86 architecture loader.

02:26.840 --> 02:36.840
This was terrible, and finally, thanks to many people, we were able to merge all these EFI bootloaders into one thing,

02:36.840 --> 02:39.840
which is common across all architectures.

02:39.840 --> 02:45.840
There are some minor differences which we had to leave, but unfortunately, they are minor,

02:45.840 --> 02:51.840
and I suppose that at some point we will remove them completely.

02:51.840 --> 03:02.840
We also, as I thought earlier during the Linux presentation, added initial support for bootloader interface,

03:02.840 --> 03:09.840
and I suppose that we will be implementing more specifications which were developed by SystemD guys.

03:09.840 --> 03:22.840
We also, during last development efforts, made some important changes to the Grapp runtime memory management.

03:22.840 --> 03:32.840
Previous implementation was very rigid, and it allocated memory from the firmware just at the initialization of the Grapp.

03:32.840 --> 03:39.840
So, it didn't allow us, for example, to run Ergon 2 KDF.

03:39.840 --> 03:54.840
So, we had to change this memory allocator implementation, and finally, Grapp is able to just allocate the memory from the UFI firmware just on the runtime.

03:54.840 --> 03:56.840
So, it is a very nice thing.

03:57.840 --> 04:06.840
We also added support for PCI and MMI or UARTs, which is, I think, very important if you are some problems,

04:06.840 --> 04:13.840
because you are able to print all debug messages directly to these UARTs.

04:13.840 --> 04:19.840
We added Sdl support, LongArts support, TPM driver fixes.

04:19.840 --> 04:32.840
In previous versions, we had problems with this driver, because when UFI failed, then TPM driver failed, then boot stopped.

04:32.840 --> 04:35.840
So, this was a problem. Currently, this is fixed.

04:35.840 --> 04:46.840
We also added debugging support improvements, improved test cases, improved documentation, and tons of other fixes.

04:47.840 --> 04:54.840
As I said at the beginning, I would like to dive into the coverity work, which we did.

04:54.840 --> 04:59.840
Finally, we were able to achieve our goal.

04:59.840 --> 05:04.840
Currently, we have zero outstanding defects in the coverity, which is, I think, nice.

05:04.840 --> 05:09.840
And this work was initiated by Andrei Bozhankov in 2013.

05:09.840 --> 05:19.840
Later, Vladimir Serbinian, who is also a graph-matterner joint, and together they continued this work until 2017.

05:19.840 --> 05:31.840
We started this work in 2020, when boot-hole security popped up, and it took us years to do analysis of all coverity issues, not solved earlier.

05:31.840 --> 05:36.840
So, finally, we fixed more than 600 issues reported by the coverity.

05:36.840 --> 05:46.840
Sorry, we did analyze more than 600 issues, and fixed more than 500 of them.

05:46.840 --> 05:52.840
About 100 of issues were false positives or something like that.

05:53.840 --> 06:00.840
After that, we ran a new coverity tool, which revealed additional four issues.

06:00.840 --> 06:05.840
Fortunately, they were not grave, and we fixed them quite quickly.

06:05.840 --> 06:09.840
So, all of these issues currently are fixed.

06:09.840 --> 06:14.840
At this point, in general, we do not accept any patches, which introduce coverity issues.

06:14.840 --> 06:17.840
So, this is not accepted at this point.

06:18.840 --> 06:23.840
We also employing fuzzing and other tools to find bugs in the graph code.

06:23.840 --> 06:28.840
And I would like to thank you all these people who are working on the coverity stuff.

06:28.840 --> 06:35.840
At the beginning, it was quite easy, because the reports which we were looking at were quite simple.

06:35.840 --> 06:43.840
But if we were diving deeper and deeper into other issues,

06:43.840 --> 06:51.840
it came out that the coverity reports are very confusing and difficult to fix, or even understand.

06:51.840 --> 07:05.840
So, this took a lot of time to do analysis, especially the final few issues.

07:05.840 --> 07:12.840
One issue which we analyzed with Vadimir was in the Grapp-Moller allocator.

07:13.840 --> 07:20.840
And even if we thought that we fixed the issue, the coverity was thinking that it is not fixed.

07:20.840 --> 07:30.840
We don't understand why, but we finally silenced forcibly coverity, because we were not able,

07:30.840 --> 07:39.840
even we contacted with the coverity company to get information why it works in that way.

07:39.840 --> 07:42.840
And we were not able to understand how this works.

07:42.840 --> 07:47.840
But as I said, in general, currently we have coverity issues reduced to zero,

07:47.840 --> 07:55.840
and we will not accept any patches which will introduce any coverity issues.

07:55.840 --> 07:58.840
So, what is happening right now in the Grapp project?

07:58.840 --> 08:08.840
As you may know, currently Microsoft requires that PE binaries has to have special properties.

08:08.840 --> 08:17.840
So, first of all, it is required that PE files must be aligned at the page size.

08:17.840 --> 08:28.840
And the more important thing is that you cannot combine a right attribute with executor output for the data section.

08:28.840 --> 08:39.840
So, it means we have a special code which properly aligns of this section of the shim,

08:39.840 --> 08:44.840
of the Grapp-Loder, of the kernel, and it requires a lot of work.

08:44.840 --> 08:48.840
Shim currently has support for an X.

08:48.840 --> 08:52.840
Currently we are working on support for an X.

08:52.840 --> 08:56.840
It was initially done by Red Hat.

08:56.840 --> 09:04.840
Currently work is taken over by Oracle and we are currently looking at this code.

09:04.840 --> 09:13.840
And I hope that shortly we will be able to post updated code for the upstream version on the Grapp mailing list.

09:13.840 --> 09:18.840
And I hope that it will be matched in the upcoming release.

09:18.840 --> 09:21.840
We are also working quite closely with the Tenchbot project.

09:21.840 --> 09:28.840
I do not want to dive in this topic because we have presentation at the end of this dev room.

09:28.840 --> 09:31.840
It will be made by Jack and Maci from 3MDep.

09:31.840 --> 09:36.840
So, they will provide more information about the Tenchbot project.

09:36.840 --> 09:44.840
Unfortunately, we have to update all embedded Lips.

09:44.840 --> 09:54.840
The most difficult problem at this point is the Jypri-Library which provides encryption primitives for the Grapp.

09:54.840 --> 09:57.840
Currently we are discussing various options.

09:57.840 --> 10:03.840
Also, we are considering moving from the Jypri-Lib-Jypri which is a huge thing.

10:03.840 --> 10:05.840
Thank you.

10:06.840 --> 10:16.840
And maybe not completely aligned with current Grapp needs.

10:16.840 --> 10:21.840
So, one guy with whom I am discussing the Grapp dev app,

10:21.840 --> 10:30.840
proposed that maybe we will move to something which is a simple library which is just to file a forget its name.

10:30.840 --> 10:35.840
It is on mailing list if you are interested in, which contains just two files.

10:35.840 --> 10:40.840
One C file which implements the cryptoprimitives and one header file.

10:40.840 --> 10:53.840
So, it will much, much more simplify the abandon this into the Grapp.

10:53.840 --> 11:06.840
And this way we will get Argon to KDF which allows us another thing in the Grapp

11:06.840 --> 11:15.840
which is automatic disk unlock with TPM2.

11:15.840 --> 11:27.840
The another issue which we have is that due to Horiex historic reasons we have distributions carrying tone of downstream patches.

11:27.840 --> 11:35.840
And this make Grapp upstream code more difficult to use in these distributions.

11:35.840 --> 11:42.840
I will discuss this later and I will show you some numbers to give you a clue what the size of problem is.

11:42.840 --> 11:46.840
We are also working on fix ups and clean ups for documentation.

11:46.840 --> 11:51.840
We are also looking for setting up CI infrastructure at this point.

11:51.840 --> 12:00.840
In general, I do all tests manually so this is not very convenient and I think that it shouldn't work in that way for projects like Grapp.

12:00.840 --> 12:12.840
We expect that the next code free will be around October 2024 and next Grapp will be close to November 2242.

12:12.840 --> 12:19.840
So, as I said, let's have a look at Fedora downstream Grapp patches.

12:19.840 --> 12:21.840
This is Rafa estimates.

12:21.840 --> 12:25.840
These statistics were prepared by Alec Brown, my colleague from Oracle.

12:26.840 --> 12:34.840
So, you have to take this number with grain of salt because we were just looking for at the names of the patches.

12:34.840 --> 12:46.840
So, if the names of the patches in the upstream were a bit different, for example, by dot or something like that, then we were not able to identify them.

12:46.840 --> 12:58.840
But this shows you that we have huge problems with the downstream patches and this is due to historic reasons.

12:58.840 --> 13:04.840
In general, at this point, we want to focus also on merging most of these downstream patches.

13:04.840 --> 13:08.840
I will show you more numbers which are more relevant, I think.

13:08.840 --> 13:11.840
Sorry, not this one.

13:11.840 --> 13:23.840
As you can see, Fedora 40 currently carries around more than 350 patches.

13:23.840 --> 13:38.840
Of course, there are some of them which were back ported to this release, but still we have more than 200 downstream patches, which, let's say, makes Grapp downstream maintenance very difficult

13:38.840 --> 13:43.840
and also provides some problems for Grapp upstream development.

13:43.840 --> 13:53.840
For example, some people come to us and ask about things which are specific to a given distro, but do not apply to Grapp upstream.

13:53.840 --> 13:55.840
So, this is a real problem.

13:55.840 --> 14:03.840
In general, we try to focus on this work in the following months.

14:03.840 --> 14:13.840
Alec Brown would be helping with this, but we are looking for more people who want to review these patches, who want to work on these patches.

14:13.840 --> 14:24.840
If you know a given area, you have experienced a given area and you are happy to help with that, that will be perfect.

14:24.840 --> 14:29.840
So, I think that's it from my side.

14:29.840 --> 14:31.840
Do you have any questions?

14:31.840 --> 14:33.840
Yes.

14:33.840 --> 14:35.840
Thank you.

14:35.840 --> 14:37.840
Go ahead.

14:37.840 --> 14:39.840
Thank you for the talk.

14:39.840 --> 14:42.840
Are there any plans to modernize the Multi-Boot 2 specification?

14:42.840 --> 14:53.840
Right now, most of the definitions there are only x86 and MIPS and are constrained to 32 bits, so you can't have modules above 4 gigabytes, you can't have entry points above 4 gigabytes.

14:53.840 --> 14:55.840
Which fields are there?

14:55.840 --> 14:57.840
How to date it?

14:57.840 --> 14:59.840
A bit.

14:59.840 --> 15:04.840
What is the process for getting the fixed?

15:04.840 --> 15:18.840
I'm not sure what is the idea behind using this protocol, but I'm not against using this protocol, but I would want to understand use cases, etc.

15:18.840 --> 15:26.840
If you want to improve this spec, just take the latest spec from the grab source code and work on it.

15:26.840 --> 15:31.840
I'm happy to review it, to discuss other things and solutions.

15:32.840 --> 15:42.840
I think that, especially on EFI world, currently we are deprecated using this kind of protocols.

15:42.840 --> 15:59.840
For example, we deprecated usage in the kernel, deprecated usage of Handover protocol, which was also artificially designed for EFI environment many, many, many years ago.

15:59.840 --> 16:05.840
I think that similar case is with Maltiboot 2, Maltiboot in general.

16:05.840 --> 16:21.840
And I think that on EFI platforms we should use EFI interfaces, as for example I suggested, but on non-EFI platform I think that it makes sense to consider something like Maltiboot 2.

16:21.840 --> 16:35.840
Of course, if it is properly improved, I think its design is quite generic and can allow us to use it on different architectures and platforms.

16:35.840 --> 16:43.840
But I think that we should not target this protocol to EFI environments, I think.

16:43.840 --> 16:44.840
This is my opinion.

16:44.840 --> 16:46.840
Does it reply your question?

16:46.840 --> 16:49.840
I can just send you some pictures for example for ARC.

16:49.840 --> 16:53.840
Oh sure, I'm happy to review them and discuss on my weakness.

16:53.840 --> 16:55.840
Go ahead.

16:55.840 --> 17:06.840
I'm a gen2 developer here and one of the biggest pain points historically was that your release case, you mentioned that the next release was Manfrouk Tova,

17:06.840 --> 17:15.840
which I hope that will actually ship them because historically some of these released it, it had to wait 2-3 years.

17:15.840 --> 17:21.840
Same problems with the work here, all these patches, and they give you simple patches.

17:21.840 --> 17:28.840
I think for the community and for downstreams, just getting more updates on how frequently you feel like is one of the biggest.

17:28.840 --> 17:37.840
So, the suggestion from the audience is that we should show them the cadence of the releases and speed up the review process.

17:37.840 --> 17:41.840
I completely agree.

17:41.840 --> 17:53.840
That is, as you saw, we are aiming at making a release at the end of this year, but my goal is that and from the talks with other folks,

17:53.840 --> 18:00.840
my goal is to make a release cadence around twice per year.

18:00.840 --> 18:01.840
This is my goal.

18:01.840 --> 18:05.840
But due to lack of resources, at this point it is quite difficult.

18:05.840 --> 18:10.840
So, we are looking for more help from the community in reviewing patches.

18:10.840 --> 18:20.840
Especially, I think that at this point one of the most important projects is forward-porting patches from the downstream as much as possible

18:20.840 --> 18:23.840
to reduce this backlog.

18:23.840 --> 18:31.840
And I think that it will help to review currently posted patches on the mailing list, etc.

18:31.840 --> 18:33.840
I hope that this surprised your questions.

18:34.840 --> 18:36.840
Thank you. Any questions? Go ahead.

18:39.840 --> 18:41.840
Yeah, yeah, I'm looking for you.

18:42.840 --> 18:54.840
From the stats that you showed with all the patches and all the releases, do you have any estimate on how much are bug fixes and how much are the file systems and how much is integration?

18:54.840 --> 19:06.840
The question is how the audience is referring to the list of the patches which are in downstream.

19:06.840 --> 19:15.840
And the question is how many of these patches are bug fixes for the sheen, for the EFI protocol and other stuff.

19:15.840 --> 19:18.840
As I said, this is only a rough estimate.

19:18.840 --> 19:24.840
We just did this work a few days ago, so we don't have these numbers.

19:24.840 --> 19:25.840
Alex started looking.

19:25.840 --> 19:35.840
After some discussion, we decided that we will be looking mostly at this point, mostly at the UFI code to identify which EFI code is.

19:36.840 --> 19:42.840
It doesn't need it, which code should be fixed and matched, etc.

19:42.840 --> 19:47.840
So if you need more information, if I have one, I can share with you.

19:48.840 --> 19:50.840
Thank you. Go ahead.

19:50.840 --> 19:52.840
A question about your statistic in the slide before that.

19:54.840 --> 19:55.840
Stefan?

19:55.840 --> 20:00.840
How does that add up to 222, 323? What's the total? What's missing?

20:00.840 --> 20:03.840
Could you repeat once again?

20:03.840 --> 20:08.840
If you take any line and write up the numbers, it doesn't come up to 460.

20:08.840 --> 20:10.840
22 patches?

20:10.840 --> 20:13.840
What's the total?

20:13.840 --> 20:20.840
It's the total patches were put on the given upstream version.

20:20.840 --> 20:25.840
So for example, let's go back to this one.

20:25.840 --> 20:46.840
The first number shows you how many matches were put on the graph 2.0 upstream.

20:46.840 --> 20:49.840
87 patches were backported.

20:49.840 --> 21:02.840
It means that if some patches were put into the master, into the graph 3, then Fedora started getting some patches from the upstream.

21:02.840 --> 21:08.840
So 87 means that these patches come from master graph.

21:08.840 --> 21:10.840
64 new patches.

21:10.840 --> 21:21.840
It means that there are new patches which didn't come into upstream and just live only in downstream Fedora.

21:21.840 --> 21:25.840
And as you can see, the number of patches is increasing.

21:25.840 --> 21:30.840
So this is a bit confusing.

21:30.840 --> 21:34.840
As I said, we were working during the last few days to just show you numbers.

21:34.840 --> 21:38.840
So there are no precise, we have to take them with grain or salt.

21:38.840 --> 21:43.840
Just wanted to show you the size of problems which we have at this point.

21:43.840 --> 21:50.840
One of these patches is bootloader spec support. Is there someone working on getting the upstream?

21:50.840 --> 21:55.840
Not yet, but if anybody wants to work...

21:55.840 --> 21:57.840
Oh, okay.

21:57.840 --> 22:10.840
The question is if somebody is looking at boot a spec support which is currently downstream and wants to upstream this code.

22:10.840 --> 22:19.840
Not yet. I haven't heard about this work, but if somebody wants to pick up this work, I will be happy to review this on my main list.

22:19.840 --> 22:24.840
So there are all things which are defined.

22:24.840 --> 22:32.840
Various boot protocols I think that can be implemented in the graph.

22:32.840 --> 22:35.840
And we are happy to review those.

22:35.840 --> 22:37.840
Does it apply because? Okay. Go ahead.

22:37.840 --> 22:42.840
So for the patches, a lot of Fedora patches are actually new features.

22:42.840 --> 22:44.840
Yeah, yeah, yeah.

22:44.840 --> 22:48.840
My question is about multi-boot support.

22:48.840 --> 22:49.840
Okay.

22:49.840 --> 22:56.840
So if multi-boot support is getting deprecated, what's the recommended way for booting Zen?

22:56.840 --> 23:12.840
Yes. The question is about multi-boot protocol and if the plans are to deprecate this protocol, how we boot the Zen?

23:12.840 --> 23:16.840
Which relies on this boot protocol? Yes.

23:16.840 --> 23:36.840
We should move to, in general, EFI protocols which are currently used and situation gets much worse there because there are some discussions about dropping support for Shimlog protocol because it makes some problems in some situations.

23:36.840 --> 23:52.840
In general, we will be moving from various kinds of strange of bootloaders on EFI platform to just start load image and start image protocol functions and they should be used.

23:52.840 --> 23:55.840
I communicated this to Zen community.

23:55.840 --> 23:57.840
They are aware of that.

23:57.840 --> 24:13.840
They were not happy with that but they told me that it is better that I told them about this problem now than later because they were considering working more on this multi-boot protocol to support Secuboot.

24:13.840 --> 24:16.840
Does it apply your question? Kind of.

24:16.840 --> 24:19.840
Okay. We can discuss this later as you wish.

24:19.840 --> 24:21.840
Okay. Next question.

24:22.840 --> 24:36.840
Is there a way that we can avoid using grub scripts and have more of the information that Hunter and Debian don't need to create these scripts?

24:36.840 --> 24:40.840
Could you speak louder because I have difficulties with hearing you.

24:40.840 --> 24:48.840
Is there a way for distributions to avoid needing to write grub scripts?

24:48.840 --> 24:54.840
Well, I think that we should repeat the question.

24:54.840 --> 25:02.840
So the question is it is possible to avoid the grub scripts in the distributions to make grub work.

25:02.840 --> 25:15.840
As I understand the question, I think that we should migrate to something different than grub scripts like a mechanism which are used in system D or something like that.

25:16.840 --> 25:18.840
But load aspect, exactly.

25:18.840 --> 25:26.840
So this is a potential way to use these scripts in the grub right now.

25:26.840 --> 25:28.840
So we are considering this.

25:28.840 --> 25:37.840
You heard the discussion on how that somebody will pick up this work and we will be able to match this support shortly in the grub.

25:37.840 --> 25:41.840
Okay. I think that was the last question.

25:41.840 --> 25:43.840
Thank you very much.

25:43.840 --> 25:45.840
Thank you.

