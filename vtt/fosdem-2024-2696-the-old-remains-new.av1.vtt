WEBVTT

00:00.000 --> 00:11.800
Okay, can you hear me back there? Okay, thank you. So, morning and thank you for coming,

00:11.800 --> 00:19.120
and really I'd like to start with some thanks for all the organization that goes into FOSDN.

00:19.120 --> 00:27.160
So I'm going to talk about a technology that goes back to the late 1960s and has essentially

00:27.160 --> 00:37.080
stayed current and continues to evolve to this day. So this is from my company, the obligatory

00:37.080 --> 00:44.600
marketing slide. I'm not going to go into it. So the first database was actually not a sequel

00:44.600 --> 00:51.240
database. It was something called IMS. It ran on the mainframe and it was put together to manage

00:51.240 --> 00:56.760
the bill of materials for the Saturn V rocket and the Apollo Moon program. And it was a key value

00:56.760 --> 01:02.080
database because the key value database is the most general type of database and it was programmed

01:02.080 --> 01:12.240
in IBM 360 machine language. And then there was Mumps, which is Massachusetts General Hospital

01:12.240 --> 01:19.400
Utility Multi-Programming System. So if you can see that, you know, without needing to breathe

01:19.480 --> 01:28.400
through the whole process, you can get a beer. But it came out of the Animal Science Lab and it was

01:28.400 --> 01:35.880
also a key value database. It ran on a PDP7, which also was the machine that the first UNIX ran on.

01:35.880 --> 01:42.760
So it's a good heritage that way. And it was a complete database machine. So you booted the

01:42.760 --> 01:47.040
machine, it ran Mumps. Mumps is the operating system. There wasn't a separate file system. It was

01:47.120 --> 01:55.480
the database. And the only way to exit Mumps was to shut down the machine. And the key value

01:55.480 --> 02:01.200
database is basically key value tuples. So essentially, if you think of a tuple, there's a

02:01.200 --> 02:09.080
hierarchical key and there is one single value. So in this case, you know, a key can be capital

02:09.120 --> 02:17.360
followed by a country followed by a city. And at least in Mumps, it's always sorted. So one of

02:17.360 --> 02:21.560
the sayings in the Mumps communities, Mumps means you never have to say you're sorting, because

02:21.560 --> 02:30.680
everything is always sorted. The database is also completely schemalist. So what that means is

02:30.680 --> 02:38.760
that you can mix, you know, the values and the keys can be numbers, they can be strings,

02:38.960 --> 02:44.000
they can be just binary blubs. And essentially, there's a default sorting order for every key,

02:44.000 --> 02:49.920
which is that the empty string collates first, and then canonical numbers collate after that. And

02:49.920 --> 02:55.560
then anything else is not a canonical number collates in byte order. And one of the things is

02:55.560 --> 03:01.280
that you can change this, you can customize it, but this is the default sorting order. And the

03:01.280 --> 03:07.320
first key, that's something that always has, there's some rules. It has to be alphanumeric,

03:07.360 --> 03:14.160
but other keys can be pretty much anything. And, you know, the schema is determined entirely by

03:14.160 --> 03:22.560
the application programmer and not by the database. And you can mix key sizes. So basically, you know,

03:22.560 --> 03:28.280
this is a little bit like playing poker on a boat and all wet cards are wild. So you can pretty

03:28.320 --> 03:39.160
much put any number or any string as any key except the first one. And, you know, there's this

03:39.160 --> 03:46.440
similarity to, it's a tree. So basically, you can take those key values and you can make them look

03:46.440 --> 03:52.920
like array references where the, in those keys, the first key is like a variable, the other keys

03:53.040 --> 03:59.160
are like subscripts. And then the value is the value. And this basically is a paradigm which is

03:59.160 --> 04:05.560
very familiar to programmers. Every programmer in the world knows how to program arrays. And this

04:05.560 --> 04:10.240
also looks like a tree. And the difference, you know, it's kind of like a JSON tree or an XML

04:10.240 --> 04:17.000
tree, but the difference between a Mumps tree and a JSON tree is that, is that in Mumps,

04:17.960 --> 04:23.040
you know, you can have a value at the root of a sub tree as well as the nodes of a sub tree

04:23.040 --> 04:32.240
which you can't do in JSON. And the concept is, you know, basically, one of the things about

04:32.240 --> 04:36.480
Mumps is they tried to keep things simple because it ran on a PDV7, which is not a very powerful

04:36.480 --> 04:43.600
computer, and, you know, four kilobytes of memory. So you have variables which are called local

04:43.640 --> 04:48.120
variables which are there only for the lifetime of the process. And then you have database

04:48.120 --> 04:52.760
accesses. So if you see the little carrot in front of the variable name, that makes it into a

04:52.760 --> 04:58.360
database access which is now shared across processes. It's persistent. Anything that doesn't have a

04:58.360 --> 05:02.480
carrot basically is private to the process and disappears at the end of the process lifetime.

05:02.480 --> 05:11.200
And the language standard was very simple. So the power was the language and the database were

05:11.240 --> 05:17.320
tightly bound. Remember, you booted the computer, you type anything that's a database access. And so

05:17.320 --> 05:23.200
there are only some simple commands, simple set of functions, and then there are, you know, what are

05:23.200 --> 05:27.360
called intrinsic special variables which are certain characteristics like, you know, you to set an

05:27.360 --> 05:33.600
error trap, you basically set a value to dollar e trap, and then that string gets executed. Now,

05:33.600 --> 05:39.400
one of the interesting things about the standard is that the standard recognizes that here's a

05:39.440 --> 05:45.640
standard. Here are all the things that implementations can do which may can be non standard. So now if

05:45.640 --> 05:52.040
you're writing code, you know exactly how to write code that is portable across implementations. Plus,

05:52.040 --> 05:57.440
you also know that if you want to port code, it tells you exactly what you need to look at. So

05:57.440 --> 06:02.480
anything that starts with a Z or anything that there are these job parameters and device parameters,

06:02.480 --> 06:08.520
those are the things you have to look at. Everything else is portable. So here's a real power.

06:09.480 --> 06:15.360
Any database update is just a, you know, just a variable access. And because of the fact that,

06:16.560 --> 06:21.240
you know, that the keys and values can be anything you can have. Like in this case, you can say

06:21.240 --> 06:25.200
customer one, two, three, four is martin with a king. And then you can add a subscript and say

06:25.200 --> 06:31.840
birthdays, given the birthday. And there's also database accesses like dollar order is the give

06:31.840 --> 06:37.400
me the next subscript at this level. You can also, you know, set a local variable like next

06:37.440 --> 06:42.160
customer to customer with account ID. And in this case, account ID is a local variable. So,

06:42.160 --> 06:48.480
so database accesses are nothing other than simple programming statements. So the, the seamless

06:48.480 --> 06:53.880
coupling between the simple language and a simple database is where the real power of, of bumps

06:53.880 --> 06:59.840
lies. And the other thing is it just sort of works without any fuss. You know, you just start

06:59.920 --> 07:08.640
using it and it works. So where are we today? So today, mumps is kind of an inside joke in the

07:08.640 --> 07:13.400
healthcare environment where it started. And if you can imagine the CIO of a bank going to the

07:13.400 --> 07:18.160
board of directors saying, we've chosen our future programming language on his mumps, it's kind of

07:18.160 --> 07:23.400
like having mustard stains in your tie when you're making a presentation. So it became an ISO

07:23.440 --> 07:30.080
standard and the ISO standard name is M. And today the world's largest real time core banking

07:30.080 --> 07:35.760
systems and medical record systems use m databases. So the largest bank here in the Benelux, actually

07:35.760 --> 07:41.760
their core system runs on an MMM database. And there is an electronic health record system,

07:41.760 --> 07:47.760
which the entire country of Jordan is using. So there also runs in an M database. And where the

07:47.800 --> 07:53.240
industry is, there's one major proprietary implementation. And there are two major related

07:53.240 --> 08:03.680
FOS implementations. One is GTM. I actually led GTM from 1995 to 2017 and was responsible for

08:03.680 --> 08:10.000
open sourcing it in 2001. Before that, it had a proprietary license. And then in 2017, I left

08:10.000 --> 08:17.440
and started, YottaDB is a downstream database to take it beyond the, where the original M and GTM

08:17.520 --> 08:25.000
were. So, where are we today also? The M language standard was abandoned by the major proprietary

08:25.000 --> 08:32.000
implementation, which kind of, I think in retrospect, was good. And the other thing is that, you

08:32.000 --> 08:38.000
know, with the M language, the language is kind of like a religion to a programmer, right? I'm happy

08:38.000 --> 08:42.960
to change my religion. I'm not changing my programming language, but you go first. Right. And

08:43.200 --> 08:50.160
the other thing is that C is going to become a lingua franca of computing. So when we started,

08:50.160 --> 08:55.880
YottaDB, our vision was to say, the database is more important than the language. Okay, the

08:55.880 --> 09:00.360
language is important, but the database is more important. And you need to have the seamless

09:00.360 --> 09:06.000
coupling between the language and the database. That is a very powerful concept. So we extended

09:06.000 --> 09:12.680
that to other languages. And what we did was we created, there's the core database. And what you

09:12.720 --> 09:19.560
see in orange is the original M language. We also created a C API. So you basically do a

09:19.560 --> 09:25.880
pound sign include, and then you have C functions. And then once you have C, then you have pretty

09:25.880 --> 09:31.120
much any other language because every language in the world knows how to call C. So we have APIs

09:31.120 --> 09:37.120
for a number of other languages. And by the way, since the key value paradigm is the simplest

09:37.640 --> 09:44.440
paradigm, we also have a SQL layer that goes on top of it. And you can map the key value to

09:44.440 --> 09:55.440
SQL tables. So that's what the C API looks like. And because of the fact that you could write APIs

09:55.440 --> 10:01.120
for other languages, Lua's and other minimalistic language. So this is what the Lua API looks

10:01.200 --> 10:07.240
like. And this, by the way, the Lua API was written by the University of Antwerp. So I'd like to

10:07.240 --> 10:17.640
say thanks to them. So this is what the Hello World in Lua looks like. And you're basically doing a

10:17.640 --> 10:23.640
database access. So you're setting a global variable called, called Hello, with a subscript

10:23.640 --> 10:30.840
lower and the value is Hello World. And so languages are just tools to manipulate the database. So

10:30.840 --> 10:36.680
these are the languages that we support. So at YataDB, everything we do is 100% free and open

10:36.680 --> 10:46.040
source, mostly a GP, a V3, a couple of things are Apache licensed. So these are the, a way you can

10:46.040 --> 10:51.560
go for more information. And one of the interesting things is people talk about Redis as a high

10:51.560 --> 10:57.520
performance key value database. So we actually created a container and you can, in that container,

10:57.560 --> 11:02.640
run YataDB and Redis side by side and you can make the comparison for yourself. So we actually

11:02.640 --> 11:09.440
significantly outperform Redis. And that's my name and contact information. Please, you know,

11:09.440 --> 11:16.840
email me at any time. And so any questions, comments, if you're throwing rotten tomatoes, I'll duck.

11:16.840 --> 11:22.560
Yes, sir.

11:22.560 --> 11:30.120
It seems to me from the first slide that M is decorative language, but the languages that you wrap

11:30.120 --> 11:36.920
around is like C, Python, Goza, imperative languages. How is this market works?

11:36.920 --> 11:43.400
There's nothing functional about this. You know, basically from the title of the dev room, it said

11:43.440 --> 11:46.280
minimalistic. So this is minimalistic rather than functional.

11:46.280 --> 11:59.360
So the question is, is M a declarative language? It's actually procedural language. And you don't

11:59.360 --> 12:04.760
really need to declare anything. Think of it as a, as a form of like almost like a shell script,

12:04.760 --> 12:06.280
except you're not calling for sieges.

12:06.280 --> 12:13.280
So,

12:13.280 --> 12:30.760
so when is the origin of the code base on which were the challenges for migrating to new hardware?

12:30.760 --> 12:40.320
So the question was, what are the challenges migrating to new hardware? And at least for

12:40.840 --> 12:45.040
the other dev, because that depends on the implementation. Obviously, if you're an implementation

12:45.040 --> 12:49.720
as just an interpreter, it's easier to migrate. In our case, it's a, it's a compiler. And one

12:49.720 --> 12:54.320
of the interesting things about the compiler, it actually generates indirect threaded code.

12:54.320 --> 12:59.520
And so essentially, we have to generate the, you know, create these virtual op, there's

12:59.520 --> 13:05.480
a virtual machine with a bunch of virtual op codes. And we basically have to create the,

13:05.480 --> 13:09.760
the op codes in that machine. We basically have to deal with the stack frame. So it's

13:09.760 --> 13:15.400
not a zero effort porting, but it's a relatively straightforward port. I will tell you that

13:15.400 --> 13:19.560
the hardest thing we've done is actually putting the Java, I mean, the go wrapper on top of

13:19.560 --> 13:25.400
the C API, because go thinks it controls the world. And that's offensive to those of us

13:25.400 --> 13:30.400
that think we control the world. So there was a little bit of cultural mismatch.

13:31.320 --> 13:40.160
How come you're the fastest? You have to ask the reddest people where it is slower than

13:40.160 --> 13:52.840
your TV. I think it's a bunch of things. I think it's the fact that, you know, because

13:52.840 --> 13:56.800
of the, of our heritage and the fact that we're used in these very large scale systems,

13:57.720 --> 14:03.480
there, you know, we're, we're obsessive about performance. And so the only thing that's

14:03.480 --> 14:06.560
more important than before, well, two things are more important in performance, functional

14:06.560 --> 14:13.840
correctness and security. So, I mean, and, and plus, you know, the court base actually

14:13.840 --> 14:21.320
went into production back in 1986. And it's had therefore a lot of time to evolve and

14:21.360 --> 14:28.640
mature. Okay, in that case, there are no other questions. Thank you very much. Where's the

14:28.640 --> 14:30.320
next speaker who can come up and set up?

