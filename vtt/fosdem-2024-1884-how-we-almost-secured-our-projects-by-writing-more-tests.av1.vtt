WEBVTT

00:00.000 --> 00:10.840
The careful eye might have noticed something in my schedule.

00:10.840 --> 00:15.520
I put a lot of similar subjects together and because Philip was actually replaced by the

00:15.520 --> 00:20.040
speaker, this would have been three hours filled with only tests.

00:20.040 --> 00:22.560
Glad we saw where I say it from that.

00:22.560 --> 00:27.400
But let's continue into this test thingy because tests are important and many people

00:27.400 --> 00:31.000
love them and many people hate them.

00:31.000 --> 00:35.840
So Alessio has got to take us away with security by testing.

00:35.840 --> 00:37.840
All right, applause.

00:37.840 --> 00:42.840
Hello, everybody.

00:42.840 --> 00:46.200
Welcome to my talk.

00:46.200 --> 00:50.960
I give you a little introduction about myself.

00:50.960 --> 00:53.640
So who am I?

00:53.640 --> 00:55.000
My name is Alessio Griggi.

00:55.000 --> 01:01.040
I'm a software engineer at Armo Security, the company behind QtScape.

01:01.040 --> 01:06.720
My full-time job actually is to be a cat food opener for my furry friend.

01:06.720 --> 01:11.120
But jokes apart, I'm passionate about reading and taking long walks.

01:11.120 --> 01:17.240
You can find me on GitHub and Twitter with this account and the following avatar.

01:17.240 --> 01:20.800
But let's start the talk.

01:20.800 --> 01:27.680
So I will give you some introduction, some easy concept that can help you to understand

01:27.680 --> 01:30.640
better the world talk.

01:30.640 --> 01:35.320
So first question is what is the code coverage?

01:35.320 --> 01:38.840
So code coverage is a metric that we can use.

01:38.840 --> 01:45.280
It's a percentage actually, as a metric, that we can use to understand how many of our source

01:45.280 --> 01:48.440
code is covered by tests.

01:48.440 --> 01:56.520
Really or better, mostly, it is used to write when we write a unit test, but not only for

01:56.520 --> 02:01.080
this kind of test.

02:01.080 --> 02:03.040
Let's go a bit more in depth.

02:03.040 --> 02:06.560
So code coverage related to Golang.

02:06.560 --> 02:11.760
So first time it was introduced in Go version 1.2.

02:11.760 --> 02:13.720
It was more or less 10 years ago.

02:13.720 --> 02:19.040
I guess it was April 2013, if I remember well.

02:19.040 --> 02:25.480
With support for the unit test in this specific article.

02:25.480 --> 02:28.720
But the story continued after more or less 10 years.

02:28.720 --> 02:37.000
So one year ago the community introduced in Go version 1.20 a new kind of support for

02:37.000 --> 02:38.000
tests.

02:38.000 --> 02:43.080
This time it was support for the integration test.

02:43.080 --> 02:53.800
So what happened since last year that we basically sensitively increased the percentage of the

02:53.800 --> 02:56.320
coverage in our project.

02:56.320 --> 03:02.280
Of course if we were already doing integration tests.

03:02.280 --> 03:07.560
And yeah, basically in these 10 years a lot of things changed.

03:07.560 --> 03:17.120
They also implemented some nice tool in order to check the coverage rendering the profiles

03:17.120 --> 03:21.400
with an HTML page that you can check on your browser.

03:21.400 --> 03:26.640
It's really nice also to use, really helpful.

03:26.640 --> 03:33.400
But let's see another concept that is important for this talk.

03:33.400 --> 03:34.920
What is a second profile?

03:34.920 --> 03:40.960
So first of all, second is a kernel feature.

03:40.960 --> 03:49.720
And it helps you to block certain syscalls during the execution of certain program.

03:49.720 --> 03:54.000
You can define second profile as a kind of rule.

03:54.000 --> 03:58.600
So you can list all the syscalls that you want to execute or you want to block during

03:58.600 --> 04:02.280
the execution of your program.

04:02.280 --> 04:04.120
And what else?

04:04.120 --> 04:08.280
It is extensively used in the Kubernetes ecosystem.

04:08.280 --> 04:18.320
Also in Docker you can attach this security profile when you run a specific pod or container.

04:18.320 --> 04:24.680
And the container will use this second profile in order to check if all the syscalls are

04:24.680 --> 04:28.880
enabled to run.

04:28.880 --> 04:36.840
And another important thing is that in Kubernetes if you enable the second default profile feature

04:36.840 --> 04:46.000
flag you can basically use by default the default profile that is a list of deprecated,

04:46.000 --> 04:57.800
really dangerous, let's say, syscalls that you should not use during your execution.

04:57.800 --> 05:04.640
So by default you can use this profile and be quite safe more or less.

05:04.640 --> 05:13.800
But it may be better if you create your own second profile for the project that you are

05:13.800 --> 05:15.160
implementing.

05:15.160 --> 05:25.400
So the main idea that I had was to generate a security profile during the test pipeline

05:25.400 --> 05:33.920
since it is probably the best environment when we, of course, if we write a lot of tests

05:33.920 --> 05:40.960
that can help you to run all the syscalls that are included in your project.

05:40.960 --> 05:46.920
So the test environment is probably the best candidate to use in order to extract all the

05:46.920 --> 05:50.920
syscalls that are going to be executed in your project.

05:50.920 --> 06:02.920
So the idea was to generate the second profile and in case you have your project that is

06:02.920 --> 06:09.880
based on Kubernetes, you are developing something related to Kubernetes, the way was to create

06:09.880 --> 06:17.840
an init container that can inject the second profile into the node and use the security

06:17.840 --> 06:24.280
context with the second profile localhost in order to attach this security profile that

06:24.280 --> 06:28.240
you just injected into the node.

06:28.240 --> 06:30.960
And that's one example.

06:30.960 --> 06:35.640
So you have the init container that's downloaded the second profile.

06:35.640 --> 06:42.720
In this case it was just a test but you can think to provide it as an artifact on GitHub

06:42.720 --> 06:45.480
or whatever you want.

06:45.480 --> 06:51.920
And the application container can use the second profile type localhost by referring

06:51.920 --> 06:55.960
to the second profile.

06:55.960 --> 06:58.640
Okay.

06:58.640 --> 07:01.600
This was the first part of the talk.

07:01.600 --> 07:06.520
But now let's see how I try to achieve this goal.

07:06.520 --> 07:12.200
I mean, how I try to extract the syscalls from the test.

07:12.200 --> 07:17.920
So in this case we are talking about integration test and unit test.

07:17.920 --> 07:24.320
In this case you can see a kind of execution path of your project.

07:24.320 --> 07:29.840
So if you run the project you are going to have this kind of tree.

07:29.840 --> 07:37.440
So with the code coverage you can understand which part of this tree it has been executed.

07:37.440 --> 07:43.840
So you can refer as a metric about your second profile in order to understand which part

07:43.840 --> 07:53.960
is missing and how much it could be readable since it's a metric that gives you a percentage.

07:53.960 --> 08:00.160
So first thing, extracting the syscalls from the integration test.

08:00.160 --> 08:03.280
So let's say it was the easiest part.

08:03.280 --> 08:09.760
So with the integration test you can build a binary, provide some script that basically

08:09.760 --> 08:13.880
checks for expected results.

08:13.880 --> 08:21.880
And when you run the binary that you built you can use one of the tracing tool, for example

08:21.880 --> 08:27.760
strace or perfer or whatever you prefer, in order to extract the syscalls during the

08:27.760 --> 08:32.640
execution of the binary during the test.

08:32.640 --> 08:40.440
So this was the first part but let's see the other one about extracting this information

08:40.440 --> 08:43.360
from the unit test.

08:43.360 --> 08:48.000
So first of all it was a bit more complicated and I'm going to explain why.

08:48.000 --> 08:59.680
So the reason is that GoTester actually compile and run the test all at once.

08:59.680 --> 09:09.360
So you cannot do strace GoTester because otherwise you are going to catch all the syscalls that

09:09.360 --> 09:16.000
are not related to the function that you want to trace because think that we are speaking

09:16.000 --> 09:17.520
about unit test.

09:17.520 --> 09:23.840
So we are testing only specific unit, only specific functions and you want to extract

09:23.840 --> 09:27.280
the syscalls that are executed during this function.

09:27.280 --> 09:35.080
So you cannot do strace GoTester first of all and even if we build the binary, the test

09:35.080 --> 09:45.520
binary for the test we cannot neither do strace dot slash test binary because the test binary

09:45.520 --> 09:53.880
could include some noise that could be related to for example let's suppose that you have

09:53.880 --> 10:04.880
some data file that you want to run against your function and you open this file and you

10:04.880 --> 10:09.360
take this data and you put this data inside your function.

10:09.360 --> 10:16.680
So when you do this open file you are going to catch with strace also this open.

10:16.680 --> 10:20.160
So it's not really suitable.

10:20.160 --> 10:30.040
So my personal solution, let's see another step, so more or less the solution could be

10:30.040 --> 10:33.400
split all the steps.

10:33.400 --> 10:38.320
First of all we can compile the binary without running it with the GoTester.

10:38.320 --> 10:45.560
So you can do gotest dash c followed by the package that you want to build and consequently

10:45.680 --> 10:54.440
you can from this binary extract the function name just by using obj dump followed by dash

10:54.440 --> 11:01.960
dash since so you can extract the entire symbol of the function that you want to trace.

11:01.960 --> 11:05.400
So at this point let's see my personal solution.

11:05.400 --> 11:11.760
I don't know if it's the better one but it's a solution.

11:11.760 --> 11:15.440
So this project is called ARPUN.

11:15.440 --> 11:22.840
You can find this project on my github and it makes use of an eBPF.

11:22.840 --> 11:31.360
I want to clarify that I'm not an eBPF expert but understanding the technology I try to

11:31.360 --> 11:35.600
use this technology to solve this issue.

11:35.600 --> 11:44.960
So the main idea was to define a trace point with eBPF that started its execution so it's

11:44.960 --> 11:48.640
tracing about the function.

11:48.640 --> 11:55.840
When a U-probe that was previously attached to the function basically emits an event.

11:55.840 --> 12:03.800
So the U-probe informs you that the function started the execution and another probe, the

12:03.800 --> 12:11.360
U-ret probe emits another event when the function finished the execution.

12:11.360 --> 12:17.360
Another important thing to know is that this project actually is a POC, it's not a production

12:17.360 --> 12:19.800
in a great project.

12:19.800 --> 12:28.800
It's based on Go.BPF that is a part of the Iovizer BCC project.

12:28.800 --> 12:33.840
So that's the main, how does it work actually.

12:33.840 --> 12:41.520
So you can put U-probe and the U-ret probe inside your health binary at the point of

12:41.520 --> 12:43.800
the function symbol.

12:43.800 --> 12:49.200
So in this case we have main dot do something that is our example function.

12:49.200 --> 12:55.280
And the U-probe and the U-ret probe will inform you when the function starts the execution

12:55.280 --> 12:57.480
and when it finished the execution.

12:57.480 --> 13:05.000
So in the meantime the trace point knows when to trace the function.

13:05.000 --> 13:15.240
And the trace point is going to trace the function with the C-center event.

13:15.240 --> 13:24.720
So it's going to trace all the C-scales that are executed during this time.

13:24.720 --> 13:28.360
So that's an example.

13:28.360 --> 13:34.480
In the right side there's a function that's some easy things.

13:34.480 --> 13:37.480
And in the left side you have the result.

13:37.480 --> 13:42.560
So you have the right, the open-et and the other C-scales and in the end you can see

13:42.560 --> 13:47.400
also the read.

13:47.400 --> 13:51.320
Okay so all these things are really nice.

13:51.320 --> 13:55.800
I was really happy to have achieved this result.

13:55.800 --> 14:00.400
But at some point I also realized that these things were not really working.

14:00.400 --> 14:03.360
I mean not every time.

14:03.360 --> 14:09.160
And I discovered after a while why this was not working.

14:09.160 --> 14:14.320
But first let's understand how the U-ret probe works.

14:14.320 --> 14:18.560
So because we have a problem with the U-ret probe in this case.

14:18.560 --> 14:24.600
So a U-ret probe basically overrides the return address of the probed function with

14:24.600 --> 14:26.240
an address to a trampoline.

14:26.240 --> 14:34.880
The trampoline basically jumps into another kind of function that in this case is our

14:34.880 --> 14:36.840
EBPF program.

14:36.840 --> 14:45.640
But since the GoStack dynamically changes during the time due to the GetBatch collector,

14:45.640 --> 14:52.880
when the trampoline function tries to return on the stack it is not able to do this.

14:52.880 --> 14:55.880
At least not all the time.

14:55.880 --> 15:05.280
Because the stack changed and the previous address is not more useful.

15:05.280 --> 15:16.280
So possible solution, likely for us the U-ret probes can be attached to a specific offset

15:16.280 --> 15:19.040
in the health binary.

15:19.040 --> 15:26.720
So we can basically simulate a U-ret probe that informs us when the function is finished

15:26.720 --> 15:33.240
by adding a list of U-probes on the ret instruction of the function.

15:33.240 --> 15:43.360
So if the function returns three times we should place a U-probe on these three ret instructions.

15:43.360 --> 15:55.840
So we can basically simulate the U-ret probe instead of using the U-ret probe.

15:55.840 --> 16:04.400
So future improvements, so when I realized that this solution could work I tried to check

16:04.400 --> 16:14.880
on the IOWI's or Go BPF library but it was impossible to attach the U-probes at certain

16:14.880 --> 16:16.280
offset.

16:16.280 --> 16:23.680
So it was my fault actually because this library is deprecated.

16:23.680 --> 16:29.280
So future improvements are to move to another library before.

16:29.280 --> 16:38.240
So we can use for example a BPF from Cilium or the one from Aqua Security and so on.

16:38.240 --> 16:47.800
So in this case we will be able to put the U-probes to specific offset and so put them

16:47.800 --> 16:53.080
into the ret instruction of the function.

16:53.080 --> 16:58.600
So here are some references that I found on internet that helped me to understand better

16:58.600 --> 17:03.840
what was the problem, how to solve this issue.

17:03.840 --> 17:10.320
Also some special thanks to some people that really helped me during this experiment.

17:10.320 --> 17:13.320
So thank you for your attention.

17:13.320 --> 17:32.640
Well I have your attention or sleeping depending.

17:32.640 --> 17:35.640
I have two announcements.

17:35.640 --> 17:39.520
One is read the wide board, not repeating this again, lightning talks, we still have available

17:39.520 --> 17:40.520
slots.

17:40.880 --> 17:45.080
And the second one is this room is not possible without volunteers.

17:45.080 --> 17:48.240
This is a 110% volunteer conference.

17:48.240 --> 17:51.120
I get no money, I even have to pay for my own dinner tonight.

17:51.120 --> 17:54.520
Oh no that's sponsored now, thank you.

17:54.520 --> 17:59.440
But I want to make a special shout out to my dear co-organizer Eva, a proud of her

17:59.440 --> 18:00.440
past.

18:00.440 --> 18:10.320
Eva is a student in computer science, more specifically in application development.

18:10.320 --> 18:15.320
If you have internship positions at your company, you can hire her for free.

