WEBVTT

00:00.000 --> 00:11.040
Next, we have the Jump Starter project with Miguel and Ricardo.

00:11.040 --> 00:16.920
This is going to be a rather interesting bit of open harbor for those of you who don't

00:16.920 --> 00:17.920
know.

00:17.920 --> 00:23.880
Miguel has a long time contributed to the KECAD project, so an alumnus if you will.

00:23.880 --> 00:24.880
So welcome.

00:24.880 --> 00:25.880
Thank you.

00:25.880 --> 00:26.880
Hello.

00:26.880 --> 00:27.880
Hello.

00:27.880 --> 00:28.880
Yep.

00:28.880 --> 00:32.800
Thank you very much for attending this session.

00:32.800 --> 00:34.600
My name is Ricardo Nariega.

00:34.600 --> 00:39.520
I work in the office of the CTO at Red Hat.

00:39.520 --> 00:41.520
And I'm Miguel.

00:41.520 --> 00:48.240
Yeah, I worked with him since one year and a half ago.

00:48.240 --> 00:51.040
And we are going to talk about the Jump Starter project.

00:51.040 --> 00:57.320
We will go through these slides and hopefully a live demo as well.

00:57.320 --> 01:01.280
So let me introduce you to PNAT.

01:01.280 --> 01:04.080
This is PNAT developer.

01:04.080 --> 01:10.920
PNAT works developing applications for embedded systems and edge computing use cases.

01:10.920 --> 01:17.600
And he uses all the more tools of development that we know.

01:17.600 --> 01:24.520
He develops locally in his laptop, pushing code to a give repository to have version

01:24.520 --> 01:25.820
control.

01:25.820 --> 01:34.180
He uses IDs, testing frameworks, virtualization containers.

01:34.180 --> 01:40.880
So basically all the other tools that we use for developing services in the cloud.

01:40.880 --> 01:47.900
The problem is that PNAT, after some hours of coding, he really needs to test a release

01:47.900 --> 01:55.500
candidate or some code that he thinks is ready to test in the real target platform.

01:55.500 --> 02:00.140
Let's say he uses an NVIDIA Jetson device, for example.

02:00.140 --> 02:06.420
The problem with this is that he needs to take the power adapter connected to the Jetson

02:06.420 --> 02:15.060
device to the plug, then an Ethernet cable maybe to get some connection, then an HDMI

02:15.060 --> 02:19.660
cable or a serial cable.

02:19.660 --> 02:27.500
Then at the end he goes, takes a USB stick, puts some operating system image in the USB,

02:27.500 --> 02:32.940
install it in the device, and at the end he needs to take the application to the device

02:32.940 --> 02:36.900
somehow via SSH or whatever.

02:36.900 --> 02:44.340
So by the end of the day, the poor PNAT is completely exhausted.

02:44.340 --> 02:49.860
And this is when we start to think, okay, we need to tackle this.

02:49.860 --> 02:53.220
We cannot afford every day doing the same thing.

02:53.220 --> 02:56.780
And this is where Jumpstart came to life.

02:56.780 --> 03:05.100
We see that developing applications for embedded devices comes with unique challenges.

03:05.100 --> 03:08.460
There's a huge lack of standardization.

03:08.460 --> 03:11.140
Every device is different.

03:11.140 --> 03:19.340
We see in big companies that enrolling these devices into CI systems is rare or sometimes

03:19.340 --> 03:21.300
is very expensive.

03:21.300 --> 03:26.420
We want to keep high quality in our code, in our applications.

03:26.420 --> 03:33.580
And testing, especially automated testing, is a key aspect of it.

03:33.580 --> 03:37.300
So we thought, okay, what are our testing goals?

03:37.300 --> 03:43.940
We would like to test our application in those target platforms at every pull request that

03:43.940 --> 03:49.060
we push into the repository or for every merge request.

03:49.060 --> 03:55.580
We would like to test a release candidate in all the models of the platform that we

03:55.580 --> 03:57.420
are going to run in production.

03:57.420 --> 04:02.700
Let's say a point of sales, I have five or ten different models, so I want to test my

04:02.700 --> 04:05.460
application in all of them.

04:05.460 --> 04:14.180
So we need some kind of automated testing and if possible, something that is hands-free,

04:14.180 --> 04:16.980
so no manual intervention.

04:16.980 --> 04:18.660
And this is why we created Jumpstart.

04:18.660 --> 04:27.500
It's not a device management system, it's basically a testing tool.

04:27.500 --> 04:28.500
So what is it?

04:28.500 --> 04:34.380
I know this is the open hardware room, but Jumpstart is basically a software project.

04:34.420 --> 04:40.780
It's written in Golan and it has the concept of devices, which are the devices under test,

04:40.780 --> 04:46.700
embedded systems that we want to test our software on, and the concept of driver.

04:46.700 --> 04:51.220
Driver basically exposes the capabilities of a hardware connector.

04:51.220 --> 04:58.140
We will explain more later, but a hardware connector is a piece of hardware that allows

04:58.140 --> 05:04.580
you to enroll these embedded systems into CI platforms.

05:04.580 --> 05:10.980
We have built a script language based in Yaml and allows you to automate some of the

05:10.980 --> 05:12.780
onboarding process.

05:12.780 --> 05:21.020
And Jumpstart allows you to remotely control these systems and it has the following functionality

05:21.020 --> 05:27.980
like power management, control signal management, storage, and console management.

05:27.980 --> 05:34.500
It works with the major CI platforms like GitLab runners, GitHub Actions, Jenkins, TecTon

05:34.500 --> 05:35.500
pipelines.

05:35.500 --> 05:40.620
We are developing as well a Kubernetes device plugin to be able to schedule these TecTon

05:40.620 --> 05:45.940
pipelines in the Kubernetes nodes.

05:45.940 --> 05:51.020
And at the bottom of the slide, you can see when you use the Jumpstart CLI how you can

05:51.020 --> 05:54.580
list the devices that are connected.

05:54.580 --> 06:01.740
So as an example of GitHub Actions, if you want to enroll your embedded devices into

06:01.740 --> 06:09.180
GitHub, you just need to run a self-hosted runner service per available device, per the

06:09.180 --> 06:11.260
device that you want to run.

06:11.260 --> 06:16.580
Then you can add a tag like Jumpstart.vrasperepy for.

06:16.580 --> 06:23.060
And whenever you want to run a job, you just select which tag or which platform you want

06:23.060 --> 06:27.740
to run it on and it should work.

06:27.740 --> 06:32.900
We have created a reference design for a driver, for this hardware connector that I mentioned

06:32.900 --> 06:33.900
before.

06:33.900 --> 06:34.900
We call it Datlink.

06:34.900 --> 06:38.500
And Miguel will explain more later.

06:38.500 --> 06:48.380
But if you see Datlink, you just need to connect it via USB to the GitHub runner and then create

06:48.380 --> 06:55.860
your workflow, your GitHub Actions workflow, and run it.

06:55.860 --> 06:59.820
This is an example of the GitHub Action workflow.

06:59.820 --> 07:09.540
For example, list a device, download an operating system image, prepare the image, mount it,

07:09.540 --> 07:13.780
change some configuration, inject some application and ready to use.

07:13.780 --> 07:22.180
And then we can use the scripting system language that we have created to automate the onboarding

07:22.180 --> 07:25.620
of the device.

07:25.620 --> 07:31.820
Just a disclaimer, if you use, for example, GitHub Actions, it's better to change the default

07:31.820 --> 07:39.740
settings because for first, Jumpstart requires full root access to the runner.

07:39.740 --> 07:51.300
So if someone has privileges to run, to push a PR, it can compromise the system.

07:51.300 --> 07:54.900
So this is how the script language looks like.

07:54.900 --> 08:00.260
You can put a name to the script, a selector for the target platform, and then a set of

08:00.260 --> 08:05.500
steps that would automate the onboarding.

08:05.500 --> 08:12.260
Power off on, write image to disk, and then we can control also the console.

08:12.260 --> 08:15.100
We'll see that in action later.

08:15.100 --> 08:25.980
So as I said, we have designed Jumpstart with modularity in mind, with a driver-based model.

08:25.980 --> 08:33.500
The Datlink is our reference design, but we have also developed other kind of hardware

08:33.500 --> 08:37.780
connectors just to show you how easy it could be.

08:37.780 --> 08:45.260
And if there are other hardware that you can use to enable this, please write the driver

08:45.260 --> 08:48.660
and you can leverage all the benefits from Jumpstart.

08:48.660 --> 08:50.940
So we have the Datlink driver.

08:50.940 --> 08:57.300
Driver B could be done the same with an SD card multiplexer, plus a smart plug, plus

08:57.300 --> 09:01.300
a serial cable.

09:01.300 --> 09:16.100
So, yes, as Ricardo explained, when we started the project, we didn't find a proper test

09:16.100 --> 09:18.100
harness.

09:18.100 --> 09:23.100
Along the way, we found some others, and we will be adding drivers for those.

09:23.100 --> 09:29.740
And if you have something and you want to add the drivers, I'm super happy to help.

09:29.740 --> 09:35.340
This is what, it's very obvious, at least now it's not pink, like in this morning we

09:35.340 --> 09:37.620
had an issue.

09:37.620 --> 09:48.300
So what our test harness is doing is switching a storage device between the testing host

09:48.300 --> 09:49.660
and the device.

09:49.660 --> 09:55.940
So you can access the storage device, the iOSV, from the testing host and write your image

09:55.940 --> 09:59.020
very, very, very fast.

09:59.020 --> 10:05.700
And then you can connect it back to your device and power it on, and then you can talk to

10:05.700 --> 10:09.660
the device via the console and we have some control pins.

10:09.660 --> 10:11.860
So far it's very basic control.

10:11.860 --> 10:14.620
There is no analog interfaces.

10:14.620 --> 10:17.820
But we have the next revisions.

10:17.820 --> 10:25.060
We have taken a lot of feedback to add extensibility to the platform.

10:25.060 --> 10:30.100
So yeah, this is how the version 1.1 looks.

10:30.100 --> 10:37.700
We did it in a mini ITX form factor, so you could put it in racks in a data center or

10:37.700 --> 10:44.300
in boxes, like in this case, the one we brought.

10:44.300 --> 10:48.060
You can control power via a barrel connector.

10:48.060 --> 10:54.820
So in the back plane, you have the inputs for power, and here down you have the outputs.

10:54.820 --> 10:58.660
You can put your storage device in here and you can mount your device under test on top

10:58.660 --> 11:01.980
if it fits.

11:01.980 --> 11:13.820
So you can control up to five amps, and you can provide the power via USB PD.

11:13.820 --> 11:21.740
Yeah, so we have, yeah, as I said, the USB storage multiplexing, and this is how it looks

11:21.740 --> 11:24.500
if you mount something on top.

11:24.500 --> 11:31.460
This is star 5 vision 2, and yeah, we are running some tests with that.

11:31.460 --> 11:36.900
And then, one of the best features of this is the speed.

11:36.900 --> 11:45.500
So you can get five gigabits per second, so you can go to a little bit of speed.

11:45.500 --> 11:49.220
And it makes it very interactive.

11:49.220 --> 11:53.580
When you are working, you get feedback very quickly on if things are working or not.

11:53.580 --> 11:57.740
So that's really nice.

11:57.740 --> 12:01.260
About the hardware, so the design is made with kick-up.

12:01.260 --> 12:06.060
You have the repository in here, and here the pollution of our prototypes.

12:06.060 --> 12:18.060
So we made 100 before, I mean, last summer, and yeah, it was around $80 per device, and

12:18.060 --> 12:22.940
we just made five, I think.

12:22.940 --> 12:31.500
Then we made 1.1, and we added some additional EMC filtering to the power.

12:31.500 --> 12:37.700
We moved the storage device inside because initially it was outside, and it was okay,

12:37.700 --> 12:38.820
yeah.

12:38.820 --> 12:43.980
And we added some connectors for the expansibility, so we have an SPI and H2C connector, so you

12:43.980 --> 12:49.500
need like a doter board to talk something specific to your device.

12:49.500 --> 12:52.900
You can do that.

12:53.660 --> 13:03.620
We have version 2.00, which we could not produce yet because of company policies.

13:03.620 --> 13:10.620
If I want to make an order to make the prototypes, it's going to be beyond the maximum without

13:10.620 --> 13:16.380
the purchase order, so I need to register the vendor and so on, and it's complicated, so

13:16.380 --> 13:17.860
eventually.

13:17.860 --> 13:23.900
But that one, instead of requiring two USB connections, which this one needs one for

13:23.900 --> 13:27.980
control and one for the storage, we'll only have one.

13:27.980 --> 13:29.980
I think I have a picture here, yes.

13:29.980 --> 13:37.660
So in this one, so the connection from the testing host comes here.

13:37.660 --> 13:44.660
It comes to this USB 3.1.5, and you can connect additional devices.

13:44.660 --> 13:50.140
Maybe you need to put a camera, or maybe you need to put a logic analyzer, or a Canvas

13:50.140 --> 13:55.820
adapter, so you can do it via USB, and with the software we could detect via the USB topology

13:55.820 --> 13:57.300
where those devices belong.

13:57.300 --> 14:05.580
So the idea is that you could have a testing host, but you can have 10 jump starters.

14:05.580 --> 14:09.460
That links, so we changed the name at some point to make it clear what the software and

14:09.460 --> 14:11.900
the hardware was.

14:11.900 --> 14:15.220
And yeah, we also added a connector for APX.

14:15.220 --> 14:22.980
Yeah, I will run a little bit more so I can make the demo.

14:22.980 --> 14:27.020
That link board has a controller chip, and the firmware is written in Rust.

14:27.020 --> 14:32.820
It has a nice console that you can talk to if you want to do it manually, but that's

14:32.820 --> 14:41.020
handled by the driver in Jump Starter.

14:41.340 --> 14:47.540
For people who make hardware with USB, this project is super interesting.

14:47.540 --> 14:52.260
You have it in almost every Linux distribution, and it allows you to update your firmware

14:52.260 --> 14:53.260
on the field.

14:53.260 --> 15:00.380
So you can publish your firmware to firmware update, and then you can, I mean, you create

15:00.380 --> 15:03.020
the descriptors, and so on.

15:03.020 --> 15:06.980
Fingert update in the Linux systems will realize that you have a device that is on

15:07.100 --> 15:11.700
the database of firmware, and you can get updates through the network.

15:11.700 --> 15:12.700
This is how it looks.

15:12.700 --> 15:19.420
Suddenly, I couldn't take one of Jump Starter, but this is how it looks, for example, if

15:19.420 --> 15:30.340
you're running on desktop, or if you do it on the console, you see something like this.

15:30.700 --> 15:39.380
So, yeah, we're releasing every version in GitHub with all the production files, so you

15:39.380 --> 15:44.260
can just download the production files and take them somewhere, and hopefully, I mean,

15:44.260 --> 15:49.060
probably you will need to adapt to the vendor, but you can get that.

15:49.060 --> 15:55.060
And, yeah, Cid asked me if I could talk about them.

15:55.060 --> 16:00.060
We are talking with them to see if they can pre-make an amount of devices and make them

16:00.100 --> 16:03.780
available in their co-create program.

16:03.780 --> 16:08.140
Normally that is meant for, I mean, if you are a creator and you want to make money on

16:08.140 --> 16:12.140
your device, there are other programs like this.

16:12.140 --> 16:20.340
They will handle the production, and you just take care about your design.

16:20.340 --> 16:28.700
But what we did in the meanwhile, I don't know if that will work or not, we just provided

16:28.820 --> 16:35.820
the links to the, how do they call it, the Fusion Gallery.

16:35.820 --> 16:40.100
So, when they made the prototypes, they give you a link that you can share and they will

16:40.100 --> 16:43.540
repeat the prototypes for others.

16:43.540 --> 16:49.820
And now, hopefully, small demo time.

16:49.940 --> 16:52.940
So, okay.

16:52.940 --> 16:59.940
So, this is, we prepare this demo repository that is actually connected to this.

17:00.180 --> 17:03.420
This is registered as a runner on that GitHub.

17:03.420 --> 17:07.620
I don't know, hopefully, it's connected, we'll see.

17:07.620 --> 17:12.300
And this is the device under test that we have.

17:12.300 --> 17:14.140
This is Raspberry Pi 4.

17:14.140 --> 17:21.140
And we are building an image and testing it on the device with two different distributions.

17:22.540 --> 17:26.820
So, yeah, this is some of the previous runs that all passed.

17:26.820 --> 17:31.820
We can look at them and we can see, for example, how do I see that?

17:31.820 --> 17:33.140
Checks.

17:33.140 --> 17:37.780
We can see that they were tested with Raspberry Unlight and Fedora Rock Height.

17:37.780 --> 17:43.580
So, in the process, it will download the latest version of the image, prepare the image and

17:43.620 --> 17:44.580
test it in the hardware.

17:44.580 --> 17:47.060
So, we go to one of those.

17:47.060 --> 17:49.540
You can see the steps of what happened.

17:49.540 --> 17:53.580
Okay, this one was a simpler test.

17:53.580 --> 17:57.100
Yeah, we can see previous runs.

17:57.100 --> 18:04.100
And we can see an example here of, okay, what happens if I break the construction of my

18:04.100 --> 18:04.700
image?

18:04.700 --> 18:10.300
In this case, we are testing a DPM module that is connected to the Raspberry Pi.

18:10.300 --> 18:17.300
So, if I remove the DTV overlay in the config for the Raspberry Pi, it should not work.

18:19.940 --> 18:26.940
So, when we go to the checks, we see, okay, Raspberry Unlight stopped working and we can

18:27.500 --> 18:33.500
see that it failed at the DPM interactions.

18:33.500 --> 18:39.500
We can see, yeah, when the image was being flashed, it was not working.

18:41.180 --> 18:42.820
Into the device.

18:42.820 --> 18:49.820
And I could show you if this is all working.

18:52.820 --> 18:58.740
Maybe I need to make a bigger font size.

18:58.740 --> 19:02.620
In this case, this is what the runner is calling.

19:02.620 --> 19:06.700
I can list the devices or I can run stuff on them.

19:06.700 --> 19:10.620
I can do things manually.

19:10.620 --> 19:12.700
For example, I can power on the device.

19:12.700 --> 19:17.020
Hopefully, I need to tell which device I want to power on.

19:17.020 --> 19:21.220
So you can, and if it's working, yeah, power on.

19:21.220 --> 19:25.700
You can power it off.

19:25.700 --> 19:30.300
You can request a console or you can run the scripts that we run in CI.

19:31.300 --> 19:37.300
For example, if I go with this other device, which is an SD wire, I don't know if any of

19:38.660 --> 19:42.140
you are familiar with this.

19:42.140 --> 19:47.700
It has an SD card and then a connector that looks like an SD card so you can plug it into

19:47.700 --> 19:50.700
a device that boots up the SD card.

19:50.700 --> 19:57.700
So if you connect these to the jump starter to the software, you can see that it's working.

20:00.300 --> 20:07.300
And I provide, it also needs like a serial console to talk to the device, otherwise it's

20:12.220 --> 20:15.220
going to complain.

20:15.220 --> 20:22.220
So if I list the devices, I should see, okay, I have the SD wire with this serial number.

20:23.500 --> 20:28.820
In this case, I cannot make all the associations with the tags and so on, which are stored

20:28.820 --> 20:30.020
in the hardware.

20:30.020 --> 20:36.540
So I have a config file that matches the serial number and then at this point I can just

20:36.540 --> 20:43.540
flash one or the other and it's set disk image.

20:45.140 --> 20:48.740
For example, if I set the Raspberry Pi 4.

20:48.740 --> 20:54.660
So this is the same process that you can do in the scripts, but you can also do it manually.

20:54.660 --> 20:57.020
For this, I need privileges.

20:57.020 --> 21:02.460
We want to split this part of the executable in a separate one only for that purpose with

21:02.460 --> 21:09.460
lots of filters to make sure that it will not break anybody's server.

21:09.460 --> 21:16.460
Yeah, this is the nicest part.

21:26.900 --> 21:29.900
How quickly those.

21:29.900 --> 21:36.900
Yeah, we need to be a little bit cautious with the data.

21:39.460 --> 21:44.340
Linux, because even if you request the system to eject the device, sometimes it tells you,

21:44.340 --> 21:51.340
okay, everything is all right, but the cache is still finishing in some part of the subsystem.

21:51.660 --> 21:54.660
And yeah, I think we're, okay.

21:54.660 --> 21:57.660
Thank you.

21:57.660 --> 22:00.660
Thank you.

22:00.660 --> 22:04.660
Thank you.

22:04.660 --> 22:05.660
Thank you.

22:05.660 --> 22:10.660
From the software side of things, have you looked into LabGrid?

22:10.660 --> 22:13.660
No, I have not.

22:13.660 --> 22:16.660
But, sorry.

22:16.660 --> 22:23.660
So yeah, the question is if I have looked at LabGrid and not, but I will.

22:26.660 --> 22:29.660
Yeah, because it does something also similar.

22:29.660 --> 22:32.660
Is it open source and open?

22:32.660 --> 22:39.660
Maybe we should work with them.

22:43.660 --> 22:45.660
Hi, thanks for the talk.

22:45.660 --> 22:48.660
I would have asked for LabGrid too, but maybe one other thing.

22:48.660 --> 22:54.660
Do you know about the automated testing conference call, the monthly one, that's coming out of the

22:54.660 --> 22:56.660
Elinux project?

22:56.660 --> 23:01.660
There are already record people there talking about the Coliseum stuff.

23:01.660 --> 23:04.660
Maybe that's interesting to share there too.

23:04.660 --> 23:07.660
Yeah, so what's the name of the?

23:07.660 --> 23:11.660
It's the automated testing conference call around the Elinux project.

23:11.660 --> 23:13.660
Yeah, I can come to the front end.

23:13.660 --> 23:14.660
Okay, yeah, thank you.

23:14.660 --> 23:16.660
That's great.

23:16.660 --> 23:18.660
Yeah, that happens sometimes.

23:18.660 --> 23:23.660
Big companies, you have people working on things from different places.

23:23.660 --> 23:25.660
Thanks for the talk.

23:25.660 --> 23:29.660
I wanted to ask how do you actually specify tests?

23:30.660 --> 23:33.660
How does the test work with this?

23:33.660 --> 23:35.660
Do you have the device?

23:35.660 --> 23:36.660
Yeah, so.

23:36.660 --> 23:37.660
Is that the YAML syntax thing?

23:37.660 --> 23:38.660
Yeah, exactly.

23:38.660 --> 23:40.660
That is the YAML syntax.

23:40.660 --> 23:42.660
So far, it's rather simple.

23:42.660 --> 23:48.660
So for example, if I go, and this is available on the repository, if I go here to the demo, and I go to the

23:48.660 --> 23:55.660
Raspberry Unlight, for example, you can see this test, TPM, or latest raw image.

23:55.660 --> 24:01.660
So we assume that the image is already built, and we just tested on the image.

24:01.660 --> 24:07.660
And it's just a series of steps so far, steps, interactions with the CDL console.

24:07.660 --> 24:10.660
So we expect something like that for control.

24:10.660 --> 24:17.660
And yeah, we want to add also integration maybe for other types of devices that are not Linux based,

24:17.660 --> 24:20.660
maybe within where you want to flash them.

24:20.660 --> 24:24.660
Something that I did not explain is that we also do power metering.

24:24.660 --> 24:29.660
So one of the things that we want to do is provide that report, maybe from this point to this point.

24:29.660 --> 24:33.660
Okay, how many millibars, what's our I consume?

24:33.660 --> 24:40.660
So you can check if your software is consuming more or less in your hardware.

24:40.660 --> 24:46.660
So really cool project.

24:46.660 --> 24:47.660
I'm really excited.

24:47.660 --> 24:51.660
So you said there's an external USB for connecting modules.

24:51.660 --> 24:56.660
So is that for so I can test something externally like, let's say a very simple system where I've got,

24:56.660 --> 25:03.660
I'm turning on a light switch, I can plug in something with a Luxe beta and check that the light actually came on rather than the board went,

25:03.660 --> 25:06.660
yeah, that came on and I have no idea.

25:06.660 --> 25:09.660
Yeah, yeah, that is the idea of the version to that.

25:09.660 --> 25:21.660
Yeah, you could connect anything and have a way to associate the device under test with those devices because you know where they are in the bus.

25:21.660 --> 25:28.660
My question is a similar question because there's, you know, literally thousands of pieces of various test equipment out there.

25:28.660 --> 25:36.660
Most of them these days probably run on either a network interface or a USB interface and they're like, yeah, they're classic.

25:36.660 --> 25:41.660
They've been translated from the old HP IB GP IB, skipping commands.

25:41.660 --> 25:51.660
But you know, things that are like really powerful test tools is, is there any plan to integrate be able to integrate stuff like that because maybe I have an analog board that's really highly precision.

25:51.660 --> 26:00.660
And I need like a really highly precise meter, you know, digital multimeter to measure that I'm not going to measure that with a simple weight bit a to D.

26:00.660 --> 26:04.660
Is there any any plans on being able to integrate stuff like that so you can.

26:04.660 --> 26:10.660
We want, I mean, we want to be able to enable that but every tool is different.

26:10.660 --> 26:13.660
So we want to make it as modular as possible.

26:13.660 --> 26:17.660
We haven't still thought exactly how to how to do that.

26:17.660 --> 26:26.660
But the first thing that I guess we need to figure out which which USB devices are related to that or maybe other config file in the system.

26:26.660 --> 26:32.660
So we have a lot of consistency saying, OK, this serial number has these two and these two and these two associated.

26:32.660 --> 26:45.660
And then when you call the software that talks to that tool at some point in your script, you can you can talk talk to that.

26:45.660 --> 26:53.660
There is even more interesting stuff like sometimes you need to test different parts of your system in parallel.

26:53.660 --> 26:57.660
Maybe it's not one hardware piece. You have them and they need to talk together.

26:57.660 --> 27:04.660
So at some point we want to be able to to run in parallel multiple devices and the rest.

27:04.660 --> 27:10.660
But yeah, let's see how far can can we get.

27:10.660 --> 27:13.660
OK, and thank you so much for your presentation.

27:13.660 --> 27:23.660
My question was around the jammer files and the specification about although it is not available now the canvas communications and the flex ray and other protocols.

27:23.660 --> 27:37.660
If do you plan or you have a roadmap in order to put it into your specification and the way of sending standard ones in order that OK, I want to get profit on my job and of the opens of the tool.

27:37.660 --> 27:45.660
But I want to create a new hardware, but I want to use the same protocols as yours in order to change for your second version that you are developing into one year.

27:45.660 --> 27:49.660
But I need to I don't know if you have planned into your role in order to something.

27:49.660 --> 27:58.660
It's not on the roadmap. But yeah, one of the things that is doing and probably one of the reasons why it's getting into the embedded space is automakers.

27:58.660 --> 28:08.660
And yeah, they I mean they use can buses or automotive other med.

28:08.660 --> 28:17.660
Yeah, so at some point, yeah, we will need to figure out how to do that is we haven't thought about it, but yeah.

28:17.660 --> 28:21.660
OK, thank you very much for the presentation.

28:21.660 --> 28:23.660
Thank you for having us.

28:28.660 --> 28:31.660
You

