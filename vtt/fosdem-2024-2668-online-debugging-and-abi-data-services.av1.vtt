WEBVTT

00:00.000 --> 00:08.720
Why are you all here?

00:08.720 --> 00:11.480
This is a boring topic.

00:12.680 --> 00:15.120
I was not expecting so many folks,

00:15.120 --> 00:16.440
but I'm glad to see you.

00:16.440 --> 00:17.620
My name is Frank Heigler,

00:17.620 --> 00:19.360
I'm a Red Hat engineer.

00:19.360 --> 00:22.080
I don't have a bio site because I'm not that interesting,

00:22.080 --> 00:25.740
but I've been in free software for a couple of decades,

00:25.740 --> 00:28.280
almost three, quite a while.

00:28.280 --> 00:31.960
So this talk is about debugging information and

00:31.960 --> 00:33.800
another type of information that we hope to

00:33.800 --> 00:37.360
popularize storing online for occasional uses.

00:37.360 --> 00:40.600
Now, many of you guys know debuggers already, all good.

00:40.600 --> 00:43.600
The other subject is a little bit more esoteric,

00:43.600 --> 00:45.560
but we can still talk about it.

00:45.560 --> 00:48.800
Do you know if Mike is coming in okay?

00:48.800 --> 00:50.960
The mic is just for the recording.

00:50.960 --> 00:55.920
I know. By the way,

00:55.920 --> 00:57.480
who's the next speaker after me?

00:57.480 --> 00:59.160
Is that person in the room?

00:59.160 --> 01:01.600
Good. I might be able to sell to you sometime.

01:01.600 --> 01:03.720
I'll keep this pretty short.

01:07.720 --> 01:12.200
Well, I offered you 10 bucks but too late now.

01:12.200 --> 01:15.520
So this is boring.

01:15.520 --> 01:16.880
How are we all right software?

01:16.880 --> 01:18.680
Binary has come out.

01:18.680 --> 01:22.960
Some packages up the binaries into distribution.

01:22.960 --> 01:24.440
Distribution goes out to people.

01:24.440 --> 01:25.840
People who run binaries,

01:25.840 --> 01:27.720
everything is happy ever after.

01:27.720 --> 01:30.360
That's all that ever happens.

01:30.360 --> 01:32.840
Right? Right?

01:36.440 --> 01:38.800
So debugging is near and dear to me.

01:38.800 --> 01:42.320
I worked on the GB debugger a little bit here and there,

01:42.320 --> 01:44.720
back in the prehistoric times,

01:44.720 --> 01:47.760
and I've worked on debugger like tools ever since.

01:47.760 --> 01:50.640
Despite all my efforts to try and make

01:50.640 --> 01:51.720
debuggers irrelevant,

01:51.720 --> 01:53.440
we still have bugs in our software and

01:53.440 --> 01:54.800
you still need to silly things.

01:55.000 --> 02:02.560
So unfortunately, here we are and debugging is not so easy.

02:02.560 --> 02:05.400
So I have two parts of my presentation.

02:05.400 --> 02:07.960
This first part is about debugging information that's online.

02:07.960 --> 02:09.960
The second part will be about something else that's online,

02:09.960 --> 02:11.040
that's tangential,

02:11.040 --> 02:13.640
but you'll see the connection pretty shortly.

02:13.640 --> 02:16.200
So many debuggers.

02:16.200 --> 02:18.080
You know how debugger,

02:18.080 --> 02:20.320
is everyone familiar with how

02:20.320 --> 02:22.360
debuggers work roughly speaking?

02:22.760 --> 02:24.680
Not you, Pedro.

02:24.680 --> 02:31.000
So one of the main challenges of debuggers is that it has to

02:31.000 --> 02:32.800
operate at the machine level,

02:32.800 --> 02:33.600
at the register level,

02:33.600 --> 02:35.920
at the memory bits and bytes level in order to understand

02:35.920 --> 02:38.080
the operation of the program you're trying to debug.

02:38.080 --> 02:42.840
And this is despite the compiler doing its darnedest

02:42.840 --> 02:46.320
to erase any remnant of how the original source code looked.

02:46.320 --> 02:52.120
It's trying to do its very best in nuking every unnecessary,

02:52.120 --> 02:53.360
very variable access,

02:53.360 --> 02:55.520
maybe tightening up the data structures,

02:55.520 --> 02:57.800
shuffling in and out of registers all the time

02:57.800 --> 02:59.240
just to make things go damn fast.

03:00.440 --> 03:02.240
Compilers are done that way.

03:02.240 --> 03:03.280
Well, I mean they're great,

03:03.280 --> 03:04.760
but if you need to debug,

03:04.760 --> 03:07.680
you need a sophisticated way of telling the debugger

03:07.680 --> 03:08.640
where to find all that stuff.

03:08.640 --> 03:11.640
So long introduction to that,

03:11.640 --> 03:14.640
but we need a good high quality debug info,

03:14.640 --> 03:17.960
which basically gives metadata about where the,

03:17.960 --> 03:21.560
every piece of the source level constructs are at runtime

03:21.560 --> 03:22.840
in the actual machine.

03:22.840 --> 03:25.280
So where, where to registers,

03:25.280 --> 03:26.240
which memory spots,

03:26.240 --> 03:29.280
how each complicated data structure laid out,

03:29.280 --> 03:33.280
all those things have to be saved by a compiler,

03:34.440 --> 03:35.720
put somewhere,

03:35.720 --> 03:38.120
and then made ultimately available to debugger.

03:39.880 --> 03:42.280
So does the word dwarf mean,

03:42.280 --> 03:43.640
you guys know what that stuff is?

03:43.640 --> 03:44.480
Yeah.

03:45.240 --> 03:46.920
So, okay.

03:49.080 --> 03:51.280
Can you give me a few adjectives about dwarf?

03:52.160 --> 03:53.000
From the heart.

03:54.560 --> 03:55.640
Okay.

03:55.640 --> 03:56.480
Say again.

03:57.640 --> 03:58.600
Did you say short?

03:58.600 --> 03:59.720
Liar.

03:59.720 --> 04:00.560
Liar.

04:03.920 --> 04:07.240
Yeah, so dwarf is a very compact,

04:07.240 --> 04:08.480
amazing little,

04:09.800 --> 04:11.640
most graph database kind of thing.

04:12.560 --> 04:14.120
It is absolutely nothing but,

04:14.120 --> 04:14.960
it is not short.

04:14.960 --> 04:19.480
It can be order of magnitude larger than the actual binary.

04:19.480 --> 04:21.000
And because it is that large,

04:22.040 --> 04:23.800
distributions then not to ship the thing,

04:23.800 --> 04:25.600
not to trip it to normal users because,

04:25.600 --> 04:26.920
you know, it's like,

04:26.920 --> 04:28.040
like I said here,

04:28.040 --> 04:29.240
users just run things, right?

04:29.240 --> 04:30.080
You never debug.

04:30.080 --> 04:32.800
So they don't get the debugging phone normally.

04:34.680 --> 04:36.640
But say you do run into a problem,

04:36.640 --> 04:37.480
you don't want to debug,

04:37.480 --> 04:40.200
well then you need this information, right?

04:40.200 --> 04:43.920
So either you can be the developer who already had this,

04:43.920 --> 04:47.480
or for the last 20-ish years,

04:47.480 --> 04:50.440
various distros made available,

04:50.440 --> 04:53.000
the original debug data that the compiler generated,

04:53.000 --> 04:54.440
but it's not installed.

04:54.440 --> 04:56.360
It's somewhere off in a separate repository

04:56.360 --> 04:58.400
you have to sometimes enable and change the route

04:58.400 --> 05:01.080
and download and if you're lucky,

05:01.080 --> 05:03.360
you get the corresponding debug data

05:03.360 --> 05:05.760
that for the binder that you're trying to work on.

05:07.840 --> 05:10.520
So the brand new 2019 thing,

05:10.520 --> 05:14.040
which I remember when my team talked about here,

05:14.040 --> 05:14.920
two years ago,

05:16.600 --> 05:17.680
when it was younger,

05:17.680 --> 05:19.200
is this gadget that we,

05:19.200 --> 05:22.080
a community built called Debug Info D,

05:22.080 --> 05:25.840
which automates the distribution of the Debug Info

05:25.840 --> 05:29.360
and other precious such things.

05:29.360 --> 05:32.680
And the whole idea is to make it as easy as possible

05:32.680 --> 05:35.800
for people, not just developers,

05:35.800 --> 05:39.000
but ordinary users to automatically,

05:39.000 --> 05:40.600
without special privilege,

05:40.600 --> 05:44.740
get all this stuff for as much of the system as possible,

05:45.680 --> 05:47.000
you know, without having to go into route,

05:47.000 --> 05:48.400
without having to do,

05:49.240 --> 05:51.280
you know, activate channel,

05:51.280 --> 05:53.200
rel-debug-blah blah blah blah.

05:54.280 --> 05:55.120
Okay.

05:55.960 --> 05:58.800
So that's our little baby there,

05:58.800 --> 06:01.560
the first URL points you toward a website

06:01.560 --> 06:03.480
that describes the current situation.

06:04.480 --> 06:07.360
As I said, the project is now getting to its third

06:07.360 --> 06:09.400
or fourth year, so it is,

06:09.400 --> 06:13.040
I cannot call it a prototype in any sort of honest way,

06:14.160 --> 06:16.520
but work is still ongoing quite a bit.

06:17.520 --> 06:20.680
When we built this, it's a small server,

06:20.680 --> 06:22.840
part of the ship with the AlfvTills tool set,

06:22.840 --> 06:27.320
which is related to Alf and Dwarf decoding

06:27.320 --> 06:28.360
and processing and such,

06:28.360 --> 06:29.840
and there are a lot of low level,

06:29.840 --> 06:31.920
machine level tools in there.

06:31.920 --> 06:35.040
So Debug Info D is shipped with AlfvTills

06:35.040 --> 06:39.320
and it's shipped on all the major distros that I know of.

06:40.320 --> 06:41.160
All right.

06:45.200 --> 06:46.760
It, I forgot to mention this,

06:46.760 --> 06:48.400
but I mean, all it is,

06:48.400 --> 06:53.200
is it allows a debugger type tool to request

06:53.200 --> 06:57.440
Debug Info as well as source code for any binary

06:57.440 --> 06:59.680
based on the Hexadecimal unique build ID

06:59.680 --> 07:00.960
that's inside binary.

07:00.960 --> 07:02.680
So this is a kind of a hash code

07:02.680 --> 07:05.520
that's been in binaries for almost 20 years,

07:05.520 --> 07:09.280
thanks to Roland McGrath and a bunch of other people

07:09.280 --> 07:11.960
who made it happen back way back in the early odds.

07:14.080 --> 07:15.200
So it's an HTTP server,

07:15.200 --> 07:17.040
it's just an ordinary boring HTTP server

07:17.040 --> 07:18.720
as far as the clients are concerned.

07:18.720 --> 07:21.280
It's very cashable, it's very lightweight,

07:21.280 --> 07:25.480
very, very simple, no like XML, API, blah, blah, blah.

07:25.480 --> 07:27.280
It's just HTTP.

07:30.360 --> 07:33.000
Because it is trying to be really simple,

07:34.000 --> 07:38.680
it, we found it over a course of a couple of months to year,

07:38.720 --> 07:41.560
most major debugging type tools grew

07:41.560 --> 07:43.560
capability to use this API,

07:43.560 --> 07:46.160
use this web of system to fetch this stuff.

07:46.160 --> 07:49.200
So obviously, GDB is one of them, it was one of the first,

07:50.480 --> 07:52.840
but system type is another tool of this kind,

07:52.840 --> 07:53.760
it's close to me.

07:55.240 --> 07:58.440
Practically all the debuggers and tracing tools

07:58.440 --> 08:03.080
and profiling tools we know of is able to do this now.

08:04.320 --> 08:08.120
So the clients are well dispersed in a source code system.

08:08.120 --> 08:10.720
The servers are also in really good shape.

08:10.720 --> 08:13.000
Over the last few years, the whole bunch of distros

08:13.000 --> 08:17.000
came online with running their own debugging for the server.

08:17.000 --> 08:18.560
So Fedora was one of the first,

08:19.640 --> 08:21.640
and Bacento is up there,

08:23.280 --> 08:26.640
Debbie and Ubuntu and other smaller distros,

08:26.640 --> 08:28.720
they're all running this server now,

08:28.720 --> 08:32.120
whereby their own distro is fully debuggable

08:32.120 --> 08:33.760
through this system.

08:36.000 --> 08:36.840
So that's cool.

08:39.120 --> 08:42.080
The, we're not quite finished with it.

08:43.920 --> 08:46.000
There's a piece of extension stuff

08:46.000 --> 08:47.680
that we're still working on of one of them

08:47.680 --> 08:51.560
is that's particularly cool is cryptographic signature

08:52.280 --> 08:54.440
preservation of individual files.

08:55.520 --> 08:56.520
As you may know,

08:58.360 --> 09:00.400
archives as a whole can be signed by distros

09:00.400 --> 09:02.520
and then a client can verify that the archives

09:02.520 --> 09:04.560
have been modified, and that's cool.

09:04.560 --> 09:06.200
But if you don't want to download the whole RPM

09:06.200 --> 09:10.560
because it's too large or for various reasons,

09:10.560 --> 09:12.800
you just want to extract the actual source file

09:12.800 --> 09:15.480
that you want or an actual little debug door file.

09:17.120 --> 09:18.520
You still want to be assured somehow

09:18.520 --> 09:22.480
that that file was what the initial distro packaged, right?

09:22.480 --> 09:23.840
You don't want to make sure it wasn't

09:23.840 --> 09:26.280
adulterated somewhere in the middle.

09:26.280 --> 09:27.840
It's kind of security critical.

09:29.000 --> 09:32.440
So we're bringing into this web protocol

09:32.440 --> 09:34.600
the propagation of the signatures

09:34.600 --> 09:36.240
that may have been applied by the distro

09:36.240 --> 09:37.800
at the build system level.

09:37.800 --> 09:41.560
And that's, it's not easy and not many distros

09:41.560 --> 09:43.960
do that level of signature stuff yet,

09:43.960 --> 09:46.400
but Fedora and very modern rail do,

09:46.400 --> 09:48.480
and we hope others come online too.

09:48.480 --> 09:50.320
But what's nice is that each individual file

09:50.320 --> 09:51.400
has its own crypto signature,

09:51.400 --> 09:53.480
which can pass it down through debugging for the,

09:53.480 --> 09:55.680
all the way to the clients.

09:55.680 --> 09:57.840
So they can be assured they get the correct

09:57.840 --> 10:00.120
100% grade A certified file.

10:02.400 --> 10:03.240
Alrighty.

10:05.160 --> 10:06.000
Psh.

10:08.760 --> 10:10.680
I couldn't bring myself to try a demo here.

10:10.680 --> 10:12.000
I was just too chicken, but,

10:13.320 --> 10:16.880
but the whole idea with this debugging for the clients stuff

10:16.880 --> 10:20.120
is that it is really automated and integrated

10:20.120 --> 10:22.080
and you don't have to do anything special.

10:22.080 --> 10:23.600
On the distros that this is enabled on,

10:23.600 --> 10:26.360
you just don't have to even do the first line.

10:26.360 --> 10:29.280
It'll be done for you in the ATC profile

10:29.280 --> 10:30.520
for all your shells.

10:30.520 --> 10:34.400
And you just run GDB on any random binary

10:34.400 --> 10:37.920
or your own binary and it'll pull in the debugging for

10:37.920 --> 10:40.080
for any shared libraries that you're using,

10:40.080 --> 10:42.160
any source files you're stepping into,

10:42.160 --> 10:45.800
it'll just pull each piece down one by one as necessary.

10:45.800 --> 10:49.600
And it's just, it becomes a non-problem.

10:49.600 --> 10:50.960
So there's almost nothing to see

10:50.960 --> 10:54.720
because it's just so smooth and automated.

10:54.720 --> 10:58.400
Parts of it can be slow for hilarious reasons,

10:58.400 --> 11:01.480
but I'll explain why if someone asks me that question.

11:02.320 --> 11:05.120
Anyway, it is nice.

11:05.120 --> 11:06.440
It is out there in many of the distros.

11:06.440 --> 11:10.640
I hope you guys enjoy it and I hope it makes your lives

11:10.640 --> 11:11.480
a little easier.

11:12.640 --> 11:14.640
That is the thing you ever encounter bugs.

11:16.760 --> 11:17.760
All right, all right, all right.

11:17.760 --> 11:20.860
So switching over to the other sort of health topic.

11:25.200 --> 11:28.400
All right, does everyone know what ABI means?

11:29.400 --> 11:32.600
Can there be someone person who does not know?

11:32.600 --> 11:34.680
So I can justify talking about it?

11:35.600 --> 11:37.320
No, thank you.

11:39.200 --> 11:40.280
I'll just be brief.

11:42.440 --> 11:43.280
As brief as possible.

11:43.280 --> 11:48.280
So it's interesting.

11:48.880 --> 11:52.240
There's a lot of interest, especially for ISVs

11:52.240 --> 11:54.560
who want to build a piece of software

11:54.560 --> 11:56.040
and then distribute it, let people run it

11:56.040 --> 11:57.360
on multiple distros.

11:58.560 --> 12:00.720
But even for normal projects who might want to build

12:00.720 --> 12:02.280
a binary of their own releases

12:02.280 --> 12:06.640
and then shift that to various other distributions.

12:06.640 --> 12:08.360
You got that?

12:08.360 --> 12:10.000
To shift it on various distributions

12:11.200 --> 12:14.160
so that it can be used on modified.

12:14.160 --> 12:16.680
Sometimes they've other problems like

12:16.680 --> 12:20.840
wanting to match different generations of shared libraries

12:20.840 --> 12:24.600
which might have had little evolutions of their own ABI

12:24.600 --> 12:26.280
whether a function signature got changed

12:26.280 --> 12:27.200
or type got changed.

12:27.600 --> 12:30.560
Something that's not the same at the binary level

12:30.560 --> 12:31.720
than it used to be.

12:31.720 --> 12:34.320
Which means that shared linking between them

12:34.320 --> 12:36.080
is no longer safe.

12:38.320 --> 12:40.720
Some projects, some shared library projects

12:40.720 --> 12:42.960
are exquisitely careful about this

12:42.960 --> 12:46.160
and they do incredible measures to prevent

12:46.160 --> 12:47.360
this kind of breakage.

12:47.360 --> 12:48.680
When they update their shared library

12:48.680 --> 12:52.840
it becomes backward compatible to decades ago

12:52.840 --> 12:53.880
by a lot of the works.

12:53.880 --> 12:56.240
Like Jalipsi is one of the best in this regard.

12:56.280 --> 12:59.560
But some libraries are less good at that.

13:00.680 --> 13:03.440
So if you want to write a binary

13:03.440 --> 13:06.560
that will work with multiple shared libraries

13:06.560 --> 13:09.720
you may need to either kind of ignore the problem

13:09.720 --> 13:11.280
hope it doesn't happen

13:11.280 --> 13:14.120
or you need to find a tool to check

13:14.120 --> 13:16.040
whether this will work with that.

13:17.360 --> 13:19.000
It is a bit esoteric.

13:19.000 --> 13:24.000
But there are lots of solutions

13:25.000 --> 13:26.840
or several solutions which try to work around

13:26.840 --> 13:29.400
this whole problem by just giving you, bundling you

13:29.400 --> 13:32.320
the one random version of a shared library

13:32.320 --> 13:34.800
from some random distro, package it together

13:34.800 --> 13:37.600
into a container image or a flat pack or whatever

13:37.600 --> 13:39.240
and just plop the whole thing on your system

13:39.240 --> 13:41.480
and then they've done the integration checking

13:41.480 --> 13:43.000
and then they know it'll work.

13:44.720 --> 13:45.920
It's legitimate.

13:45.920 --> 13:48.480
It's just it's very space obnoxious

13:48.480 --> 13:51.760
and some of them still kind of intermingle

13:51.760 --> 13:53.600
the bundle libraries and the host libraries

13:54.360 --> 13:55.760
and they kind of do version checking

13:55.760 --> 13:58.120
and they hope that the host's libgl

13:58.120 --> 14:01.080
will work with their version of libxt or whatever.

14:02.080 --> 14:04.080
So even this is a bit fuzzy.

14:05.280 --> 14:10.280
So anyway, what we're proposing is that projects

14:10.520 --> 14:14.160
that deal with multiple versions of shared libraries

14:14.160 --> 14:15.000
that they're concerned about

14:15.000 --> 14:17.760
compatibility checking for ABI's

14:17.760 --> 14:20.080
consider the gadget I'm going to talk about.

14:22.120 --> 14:23.480
Okay.

14:23.480 --> 14:24.800
You know, maybe we'll just skip this one.

14:24.800 --> 14:26.240
Everyone, but everyone knew.

14:27.760 --> 14:28.600
What's there's still a person

14:28.600 --> 14:30.200
who I didn't tell what the ABI was?

14:33.560 --> 14:36.240
It's just, it turns out to be exactly the same metadata

14:36.240 --> 14:39.520
the debugger uses to find variables at runtime.

14:39.520 --> 14:41.320
This is exactly the same data.

14:41.320 --> 14:43.600
It's just that it happens to be useful

14:43.600 --> 14:45.200
to examine even at compile time.

14:45.200 --> 14:47.960
So even with just the dead libraries on disk

14:51.000 --> 14:53.400
by parsing and processing the exact same debug

14:53.400 --> 14:56.040
info, you can tell whether that shared library

14:56.040 --> 14:58.440
has the same binary guarantees

14:59.400 --> 15:01.560
as a normal program might require.

15:03.360 --> 15:05.240
Sorry if I belabor the obvious guys.

15:07.480 --> 15:08.320
Okay.

15:10.840 --> 15:13.880
So our team at Red Hat, one of the tools they work on

15:13.880 --> 15:16.000
is this gadget called libabigale.

15:16.000 --> 15:20.360
I'm not sure who works on that, that guy there.

15:21.360 --> 15:22.200
Yeah.

15:23.200 --> 15:24.640
And it's awesome.

15:25.480 --> 15:28.000
It's a suite of tools, binary tools

15:28.000 --> 15:31.440
that compare shared libraries versus shared library

15:31.440 --> 15:34.440
by extracting their debugging info basically

15:34.440 --> 15:35.840
and just parsing it piece by piece,

15:35.840 --> 15:37.640
function by function, type by type,

15:37.640 --> 15:40.160
make sure they're all compatible with each other.

15:40.160 --> 15:42.680
It can also do match a binary to a variety

15:42.680 --> 15:45.240
of shared libraries and see whether there's still

15:45.240 --> 15:47.480
meet each other's needs.

15:47.480 --> 15:48.880
Like a good marriage, maybe.

15:50.720 --> 15:54.200
One thing that it's limited though is that to do this work,

15:54.200 --> 15:57.400
it needs to have all the files that you want to compare

15:57.400 --> 15:59.080
right there on your local disk.

15:59.080 --> 16:01.280
So if you want to compare your binary to a

16:02.040 --> 16:07.360
RAL6 version of libc or libxgl

16:07.360 --> 16:09.640
and you bunch a version, you need to somehow

16:09.640 --> 16:11.280
get hold of those files first

16:11.280 --> 16:15.160
and you can't really just do it otherwise.

16:15.160 --> 16:19.760
So our gadget, the new gadget we're adding to libabigale

16:20.160 --> 16:23.160
is a way of not requiring you to download

16:23.160 --> 16:25.200
all these shared libraries and all their corresponding

16:25.200 --> 16:28.360
debugging info for all these versions of distros

16:28.360 --> 16:30.080
that you might not even have or not even want.

16:30.080 --> 16:31.520
Just curious about.

16:33.680 --> 16:37.960
And a key to that is to realize that abigale also

16:37.960 --> 16:40.960
can take not just dwarf files, but also an XML

16:40.960 --> 16:42.600
representation of the dwarf.

16:42.600 --> 16:45.120
And XML is just conversion.

16:45.120 --> 16:47.840
It's a subset and conversion.

16:47.880 --> 16:50.160
So that's my four minute warning.

16:50.160 --> 16:51.160
We're doing okay.

16:53.200 --> 16:56.000
And because it's XML, it's large, but it's textual

16:56.000 --> 16:58.040
and it's compressible.

16:58.040 --> 17:00.760
And with the one track mind that I have,

17:03.240 --> 17:05.640
how can we store a large amount of XML

17:05.640 --> 17:10.240
for all these shared library data for a large distro?

17:10.240 --> 17:12.480
It's text, it's large, you want to share it.

17:13.400 --> 17:14.240
Well, how,

17:16.840 --> 17:18.400
oh, no, that's not the next time.

17:18.400 --> 17:20.800
I'm gonna leave that in mystery for 20 seconds.

17:20.800 --> 17:22.240
Oops, one moment.

17:26.000 --> 17:26.840
Two moments.

17:31.480 --> 17:33.560
It's pretty soft for it, don't worry, it's good.

17:33.560 --> 17:34.400
Ha ha ha.

17:43.480 --> 17:44.320
Okay.

17:47.040 --> 17:48.440
Yeah, we just skip over here.

17:48.440 --> 17:52.840
So writing a little tool is really just a thin wrapper

17:52.840 --> 17:55.040
around the existing, the abigale tooling

17:55.040 --> 17:58.160
to extract this XML version of the ABI.

17:58.160 --> 18:01.200
Jamitin, Git, because we love Git.

18:01.200 --> 18:04.120
It's a great way to store text files.

18:04.120 --> 18:05.440
And it's a great way to ship them,

18:05.440 --> 18:08.400
great way to compress the heck out of them

18:08.400 --> 18:10.960
and let them coexist in some nice way.

18:11.960 --> 18:16.960
So we can extract XML from a large corpus of files.

18:18.960 --> 18:21.560
We can give it a whole boatload of RPMs or Debian's

18:21.560 --> 18:23.360
or whatever, it will automatically extract

18:23.360 --> 18:24.720
all the shared libraries.

18:24.720 --> 18:26.160
It'll download all the debugging files

18:26.160 --> 18:30.320
and automatically via debugging 4D, if necessary.

18:30.320 --> 18:33.040
And it will generate a Git tree,

18:33.040 --> 18:36.000
which has all this XML stuff nicely structured

18:37.480 --> 18:40.080
that then can be used by the tool itself

18:40.360 --> 18:42.880
to later do a compatibility check.

18:44.120 --> 18:45.960
That way you don't have to install

18:46.800 --> 18:49.480
the foreign distributions anymore.

18:49.480 --> 18:52.000
Anyone can do you the honor or the favor

18:52.000 --> 18:54.960
of collecting this ABI XML stuff,

18:54.960 --> 18:59.400
sharing it in Git, put it up publicly,

18:59.400 --> 19:01.560
and then anyone who wants to compatibility check

19:01.560 --> 19:02.920
against that version of the OS

19:02.920 --> 19:04.880
that no longer has to worry about this.

19:04.880 --> 19:08.100
This is a crowdsourceable enterprise.

19:09.100 --> 19:13.100
So I tried this at home, no demo because no demo.

19:16.900 --> 19:20.540
But it is really not hard to use.

19:20.540 --> 19:22.300
All the prep work is just getting the software.

19:22.300 --> 19:26.100
But the thing you think is that the data is in,

19:26.100 --> 19:28.540
when one crowdsource version of data is now a couple

19:28.540 --> 19:31.340
of gigabytes, it has a big section of Rela8,

19:31.340 --> 19:32.900
all of Rela8 in there.

19:32.900 --> 19:36.260
As RBI stuff, a few other Ubuntu releases just randomly

19:36.260 --> 19:38.260
in there to plan to expand it,

19:38.260 --> 19:40.700
to have as many distros in there

19:40.700 --> 19:43.220
as people are willing to give us.

19:45.420 --> 19:50.060
To submit new information, it looks like these command lines,

19:50.060 --> 19:52.700
this is just to demonstrate you can build your own

19:52.700 --> 19:54.700
share library at your own institution

19:54.700 --> 19:56.580
and generate your own database.

19:56.580 --> 20:00.260
This version tells you that it can just mass import

20:00.260 --> 20:02.180
whole RPMs and they'll do the right thing,

20:02.180 --> 20:06.220
decompress and aggregate all the information.

20:06.220 --> 20:09.700
And at the top here is how you check a random binary

20:09.700 --> 20:12.140
against the entire set of shared libraries

20:12.140 --> 20:13.300
that that binary needs.

20:15.220 --> 20:17.580
There are a few bits of cleverness in there, small.

20:17.580 --> 20:20.620
It's not very clever, just a little clever.

20:20.620 --> 20:23.540
For example, as you know, libraries get updated every now

20:23.540 --> 20:25.660
and then we wanna make sure we can store more than one

20:25.660 --> 20:28.500
version of the same shared library in the database.

20:28.500 --> 20:31.780
There's not just one G-Lib C but 10 per update.

20:31.780 --> 20:33.340
So they all have to have a naming convention

20:33.340 --> 20:34.660
that lets them coexist.

20:34.660 --> 20:35.500
So we do that.

20:37.460 --> 20:38.580
But those are internal details.

20:38.580 --> 20:40.980
The basic thing is you can submit to the database

20:40.980 --> 20:43.700
this way and you can check with that

20:43.700 --> 20:46.180
and it tries to be that simple.

20:50.740 --> 20:53.460
And that's my conclusion page right there.

20:53.460 --> 20:56.940
That all the code is open source obviously

20:56.940 --> 21:01.700
and all the servers are extremely low tech on purpose.

21:01.700 --> 21:05.340
The first one is a very thin HTTP server

21:05.340 --> 21:07.500
and the second one is just literally a Git server

21:07.500 --> 21:09.820
that happens to have structured data inside it.

21:09.820 --> 21:13.100
So easy and even I can do it.

21:13.100 --> 21:15.180
Very, very straightforward, baby technology.

21:17.140 --> 21:19.140
And thank goodness, that's it.

21:21.140 --> 21:23.980
Can we have entertainment for questions?

21:23.980 --> 21:25.700
Yeah, we have minus five minutes.

21:25.700 --> 21:27.740
Minus five minutes, my God.

21:27.740 --> 21:30.100
Okay, any zero questions?

21:30.100 --> 21:42.420
Thank you.

