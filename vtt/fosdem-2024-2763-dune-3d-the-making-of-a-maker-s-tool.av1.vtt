WEBVTT

00:00.000 --> 00:07.440
Hi, I'm Lucas.

00:07.440 --> 00:14.280
So when I am not writing the CAD software of any kind, I usually do hardware projects,

00:14.280 --> 00:16.080
some of which I've shown here.

00:16.080 --> 00:18.440
As you may see, they're pretty much all the same thing.

00:18.440 --> 00:21.920
They are a circuit board in a 3D printed case.

00:21.920 --> 00:26.120
So for designing them, one needs basically two softwares.

00:26.120 --> 00:33.840
There's CAD software for the printed circuit board and software for the 3D printed case.

00:33.840 --> 00:39.280
What both of these things have in common, that CAD is pretty important there, since

00:39.280 --> 00:41.560
what you're drawing CAD is what you're going to get.

00:41.560 --> 00:45.480
So when you're doing, for example, woodwork or metalworking, if you need an extra hole,

00:45.480 --> 00:47.640
well, you just drill it.

00:47.640 --> 00:52.760
But that obviously doesn't work for PCBs or 3D printing.

00:52.760 --> 00:58.840
So yeah, it's pretty important to have a proper CAD software there for the first thing,

00:58.840 --> 01:00.000
for PCBs.

01:00.000 --> 01:05.440
I solved that issue for myself a couple of years ago by writing Horizon EDA, but that's

01:05.440 --> 01:08.440
not what I'm going to talk today.

01:08.440 --> 01:17.480
But for the 3D stuff, I found myself oscillating between FreeCAD and Solvespace, since both

01:18.160 --> 01:23.000
some things great, but neither of them covered everything I needed.

01:23.000 --> 01:25.200
So let me elaborate on that.

01:25.200 --> 01:31.720
So FreeCAD itself, pretty much all the features I needed, some of which are step important

01:31.720 --> 01:38.720
export and support for chanples and fillets to make the things look more prettier with

01:38.720 --> 01:46.720
a little effort, but it falls short by not, by the peculiarities of referencing stuff,

01:46.720 --> 01:54.040
the sketch of being modal and not being able to easily make constraints in 3D.

01:54.040 --> 01:59.440
For Solvespace, it's pretty much the other way around.

01:59.440 --> 02:04.840
It has significantly less features, but these features work really well and I found it really

02:04.840 --> 02:06.000
pleasant to use.

02:06.000 --> 02:12.480
So at first, it's dismissed it, and since it doesn't do step import and export, but

02:12.480 --> 02:14.040
everything else works really well.

02:14.040 --> 02:17.600
So is there anything that does all of that?

02:17.600 --> 02:23.480
Unfortunately, I didn't find anything, so I thought, well, it's not the first time I've

02:23.480 --> 02:28.440
written a CAD software, so maybe let's try writing a 3D CAD software.

02:28.440 --> 02:31.920
So after all, so what do we need to make a 3D CAD?

02:31.920 --> 02:34.240
So first of all, we need to show something to the user.

02:34.240 --> 02:41.240
For that, we need a 3D viewport with all of the usual stuff like shading, navigation,

02:41.240 --> 02:47.240
and selection, but fortunately, I already did more or less that for Horizon EDA, since

02:47.240 --> 02:54.360
Horizon EDA has a 3D preview, and it's basically all of the OpenGL boilerplate already done.

02:54.360 --> 02:56.520
So we have that.

02:56.520 --> 03:02.320
Next up, we need a geometry kernel that takes care of all of the Boolean operations and extrusion

03:02.320 --> 03:09.080
and stuff like that, and for that, there are some of you might know it, OpenCascade, also

03:09.080 --> 03:10.720
from the talk before.

03:10.720 --> 03:20.960
It has some words, but I had some experience with it from Horizon EDA, and it works okay.

03:20.960 --> 03:24.280
And it's also pretty much the only game in town if you want to have jump-fast forwards

03:24.280 --> 03:26.280
and proper interaction with stuff.

03:26.280 --> 03:30.240
So that one's there as well.

03:30.240 --> 03:36.680
And next up, we need a solver that takes care of solving all of the constraints and entities

03:36.680 --> 03:38.680
and stuff.

03:38.680 --> 03:43.000
And for that, there's also something that we can use, in particular, the solver from

03:43.000 --> 03:44.000
false space.

03:44.000 --> 03:48.560
The solver from false space is available as a library, but that's with a small asterisk.

03:48.560 --> 03:53.520
The library itself is a C wrapper around the C++ internal from false space, but the wrapper

03:53.520 --> 03:59.720
itself is pretty limited, so I ended up not using the wrapper and ended up using the internals

03:59.720 --> 04:04.240
from false space myself, and they are pretty easy to use, actually.

04:04.240 --> 04:06.240
So we have that one as well.

04:06.280 --> 04:10.560
And last but not least, we need a user interface of some sort with all of the boring stuff,

04:10.560 --> 04:16.760
like preferences dialog, way to select tools, the general tool handling, and all of those

04:16.760 --> 04:22.240
little, lot important stuff, such as the access lollipop that shows which access goes in which

04:22.240 --> 04:23.240
direction.

04:23.240 --> 04:27.520
But fortunately, I already had all of that in some way or another from Horizon EDA.

04:27.520 --> 04:31.560
It's a 2D CAD, but well, undo, redo, and stuff like that pretty much doesn't care if

04:31.560 --> 04:34.400
it's a 2D or 3D CAD.

04:34.400 --> 04:40.600
So yeah, then I realized, well, I had all of the building blocks to make a 3D CAD, so

04:40.600 --> 04:47.280
I started with it, and that was back in August last year, and now I'm here to talk to you

04:47.280 --> 04:50.200
about 3D, a parametric 3D CAD.

04:50.200 --> 05:01.120
So I said it took about six months to get from basically a blank window in GTK to where

05:01.120 --> 05:02.560
we are right now.

05:02.560 --> 05:12.080
As probably expected, it's written in C++20, and it's about 33,000 lines of code, and it

05:12.080 --> 05:16.440
uses the, you use GTKMM4 as a GUI toolkit.

05:16.440 --> 05:22.640
Using GTKMM3 would have probably been a slight bit faster, since I've already used that for

05:22.640 --> 05:26.920
Horizon EDA, so I would have been able to directly copy-paste code.

05:27.480 --> 05:34.360
But yeah, GTKMM4 was the last version at the time I started it, so I went with that,

05:34.360 --> 05:37.440
but that's probably a topic that I should write a book about, since there are quite

05:37.440 --> 05:42.480
a things that were a bit annoying about GTKMM4.

05:42.480 --> 05:48.960
And same as Horizon EDA, it uses UUIDs for everything, and uses JSON as a data storage

05:48.960 --> 05:49.960
format.

05:49.960 --> 05:54.880
So yeah, I pretty much reused all of the concepts that worked well in Horizon EDA for

05:54.880 --> 05:55.880
GTKMM4.

05:55.880 --> 06:06.480
And yeah, just a couple of days ago, I released version 1.0, and yeah, so it's already packaged

06:06.480 --> 06:14.600
for, in Fatpack, for the Windows folks, there's an MSI installer, and the good thing was,

06:14.600 --> 06:19.680
well, it wasn't the first time that I had to take care of all of the packaging, so the

06:19.680 --> 06:25.720
packaging stuff was pretty much just copy-paste from Horizon EDA again.

06:25.720 --> 06:27.080
So what does it do?

06:27.080 --> 06:33.200
It has a parametric to the sketcher, that has all of the usual stuff like lines, arcs,

06:33.200 --> 06:36.880
circles, and constraints to draw these lines and arcs.

06:36.880 --> 06:43.920
There's a convenient all-in-one tool that handles lines and arcs in one tool, so one

06:43.920 --> 06:49.120
can draw arbitrary outlines in one tool, and there are also some convenience tools for

06:49.120 --> 06:56.440
drawing an axis-aligned rectangle or regular polygons, as they're needed, for example,

06:56.440 --> 06:59.320
for hex nut inserts also.

06:59.320 --> 07:08.000
To make things 3D, there's extrude and lathe, so lathe is basically a 360-degree revolution,

07:08.000 --> 07:11.880
revolutions that are not 360 degrees aren't supported yet.

07:11.880 --> 07:22.760
And to repeat things, there's linear and polar array, and to combine multiple solids,

07:22.760 --> 07:28.200
there's the usual operations from open cascade, so union, difference, and intersection.

07:28.200 --> 07:34.720
So for that, I just basically had to expose to user what open cascade offers for to make

07:34.720 --> 07:35.960
an N in 3D.

07:35.960 --> 07:41.760
There are also constraints such as distance, angle, point-to-plane, or point-to-plane distance,

07:41.760 --> 07:47.840
or that's useful for example when you want to make a hole that stops at 3mm from the

07:47.840 --> 07:53.880
last edge, you can just use a point-to-plane distance of 3mm, and that's it.

07:53.880 --> 08:02.440
For the step import, I basically copy-pasted the code from Horizon EDA that turns the step

08:02.440 --> 08:09.240
model into a set of triangles, and I also reused the code for extracting the reference

08:09.240 --> 08:15.440
points since the idea is that you want to import your circuit board, and you want to

08:15.440 --> 08:20.840
add some reference points, and then you can reference these points in the geometry, for

08:20.840 --> 08:27.800
example if you want to fit your case around the circuit board or make cutouts for connectors.

08:28.800 --> 08:34.200
The last important point are fillets and chamfers.

08:34.200 --> 08:38.920
These are basically just calling the open cascade functions to add a chamfer or a filler

08:38.920 --> 08:44.680
to edge, but unfortunately the way it's implemented right now is subject to a topological naming

08:44.680 --> 08:51.520
problem since all of these edges are just referenced by index, so if one changes the

08:51.520 --> 08:56.600
geometry in a way that adds extra edges or so, it breaks, but well.

08:56.600 --> 09:02.480
I was used to that from FreeCAD, so it was okay.

09:02.480 --> 09:04.560
So how does it all fit together?

09:04.560 --> 09:10.760
So in the middle there's the thing for the document that consists of all of the introduced

09:10.760 --> 09:15.080
specific data structures like groups, entities, and constraints.

09:15.080 --> 09:20.120
These are then presented to the user with the renderer and canvas, where they are turned

09:20.120 --> 09:26.160
into primitives that I can render with OpenGL, and then the user uses the tools, same as

09:26.720 --> 09:33.720
in Horizon EDA, to interact with the document and to take care of the solid model.

09:33.720 --> 09:41.720
All of the entities get transformed into something that OpenCascade can understand, and then that's

09:41.720 --> 09:44.880
again triangulated and rendered.

09:44.880 --> 09:51.880
And to take care of solving the things, there's the interface to the solver in the space,

09:52.880 --> 09:57.880
solver in solve space, and app-rolly as to be expected.

09:57.880 --> 10:04.880
The hardest part of implementing all of this are these interfaces between OpenCascade and

10:05.640 --> 10:11.640
the solve space part, since that's where the impedance mismatches are, since I had

10:11.840 --> 10:17.840
my data model and the data model from OpenCascade or solve space, and it somehow had to fit

10:17.840 --> 10:20.040
together.

10:20.200 --> 10:23.200
So what's next?

10:23.200 --> 10:30.200
So there are some, of course I have got some plans, mostly some basic things like measurements,

10:30.200 --> 10:34.200
revolutions that are not 360 degrees, or stuff like copy-paste.

10:34.200 --> 10:41.200
But the big distinction between, from the project point of view, between doing 3D and

10:41.400 --> 10:48.400
Horizon EDA is that with Horizon EDA at least have the aspiration that one might eventually

10:49.320 --> 10:56.320
be able to do really big and complex parts, but I want UnityD to stay and to be and stay

10:57.280 --> 11:04.280
small and little easy to use CAD software that doesn't have the focus to cover everything

11:06.320 --> 11:06.840
and all.

11:06.840 --> 11:12.360
It should just be a tool to make simple 3D printed laser cut or CNC machined cases for

11:12.360 --> 11:17.040
PCBs, probably something else, but it already does pretty much everything I need for my

11:17.080 --> 11:24.080
use case, so it'll probably, mostly stay as is, with of course some bug fix and UI enhancements,

11:24.080 --> 11:30.080
but yeah, don't expect anything big to happen there in the future.

11:30.280 --> 11:37.280
And I think then we're already over with the presentation, and now for questions I think.

11:37.280 --> 11:44.280
So, questions?

11:49.640 --> 11:56.640
Thanks for the talk. Very impressive for this time scale. You were talking about having

11:56.640 --> 12:03.640
3D constraints, and then you just showed an extrusion size, but well that's something

12:04.080 --> 12:11.080
you can also do in FreeCAD, right? Do you have any other possibilities to do more complex

12:12.680 --> 12:14.080
constraints in 3D space?

12:14.080 --> 12:19.720
Yeah, sure. Okay, so the question was if there are any more complex constraints in 3D space,

12:19.720 --> 12:26.720
there are some, such as angled or point-to-point distances, or what one can also do since 2D

12:27.720 --> 12:33.720
and 3D can work together with a means of work planes. One could, for example, construct

12:34.520 --> 12:40.120
at a work plane in the same group as the extrusion that's perpendicular to the extrusion,

12:40.120 --> 12:44.640
then do whatever one needs there, and then constrain the extrusion to that. Or one can

12:44.640 --> 12:51.640
also constrain the extrusion to another sketch, so one can put the extrusion in a work plane

12:52.640 --> 12:57.160
and then do stuff there, so there really isn't, and then it's all protected into the work

12:57.160 --> 13:02.160
plane itself, so there really is no limit of what can do, but yeah, that's all the way

13:02.160 --> 13:09.160
that wall space works.

13:09.160 --> 13:16.160
Thank you for your talk and impressive effort. Do you think that CAD programs, CAD suites

13:21.600 --> 13:28.100
with this level of complexity could be a good stepping stone for beginners and maybe even

13:28.100 --> 13:35.100
children from very simple drag and drop programs like TinkerCAD towards something more parametric

13:35.820 --> 13:42.820
that they can manage to use when they start to grasp the basics of these kind of suites?

13:43.940 --> 13:50.940
So I think, yeah, it definitely has a learning curve since one needs to grasp the concept

13:53.700 --> 13:57.660
of constraints, degrees of freedom and such, but I think that's pretty much the same thing

13:57.660 --> 14:04.660
in every parametric CAD. So yeah, there are some idosyncrasies in terms of the user,

14:05.100 --> 14:12.100
the interface, and it's driven by a global menu that unfortunately has some discoverability

14:13.860 --> 14:20.860
issues, but yeah, I think it's something that one can also try with children, but yeah,

14:22.380 --> 14:29.380
I've never, I don't have any experience in that education space. Yeah.

14:29.380 --> 14:36.380
Great work indeed, especially for the time you spent on it. So in the beginning you

14:36.380 --> 14:43.140
showed these tables with check marks, but you didn't explicitly conclude that you had

14:43.140 --> 14:50.140
all the check marks for your software. Yeah, so let's go over it. So a step import, step

14:50.580 --> 14:57.580
import and export is pretty much done by OpenCascade. Since OpenCascade does the import, i.e. the

14:58.580 --> 15:03.580
triangulation and extracting reference points and export is just calling a couple of methods

15:03.580 --> 15:10.580
to take the topo ds shapes and write them to a step file, gemfas and fillets are just

15:10.740 --> 15:17.740
methods to call from OpenCascade, and all of the three bottom things are basically the

15:17.860 --> 15:23.700
same thing as in SolveSpace, since overall June 3D is pretty similar to SolveSpace in

15:23.740 --> 15:30.500
terms of overall operation. There are groups, constraints, entities, and if one knows and

15:30.500 --> 15:37.500
likes SolveSpace, they'll probably also like June 3D. Right, and another question, thanks.

15:39.500 --> 15:45.620
If you would have spent the same time in either SolveSpace or FreeCAD, could you have improved

15:45.620 --> 15:52.620
them to your needs? Yeah, but I was pretty sure that question will come up. So, let's

15:53.620 --> 15:57.900
go over it. I think FreeCAD, I've looked at the code sometimes and I've also find that

15:57.900 --> 16:02.260
there are really a lot of code, and I think especially changes like having a non-modal

16:02.260 --> 16:08.540
schedule would have probably been way more work, and with SolveSpace, they have their

16:08.540 --> 16:14.340
own geometry kernel for probably good reasons, and from a project conceptual point of view,

16:14.340 --> 16:20.420
I think OpenCascade and SolveSpace are pretty much diametrical. SolveSpace has really this

16:20.460 --> 16:25.460
nice self-contained thing without that big OpenCascade dependency hanging off the side.

16:25.460 --> 16:32.460
So, yeah, that's why I conclude, well, it's probably easier to write my own, and I also

16:32.580 --> 16:39.580
noticed that I really like writing CAD software. Okay, we have time for one more question.

16:51.420 --> 16:58.420
I use CAD software to create 3D models for on PCBs, to render on PCBs, and I felt that

17:01.260 --> 17:08.260
problems like SolveSpace are missing color support for faces. Does your Dune3D support

17:08.780 --> 17:15.780
this? Right now, it doesn't support colored faces. Yeah, I have to look into how to accomplish

17:15.780 --> 17:20.660
that with OpenCascade. These are always the topics that are a bit tedious, and yeah, well,

17:20.660 --> 17:25.940
it's OpenCascade, and as mentioned in the talk before, it has a rather cryptic API, but

17:25.940 --> 17:31.820
the good thing is there's FreeCAD, so FreeCAD is pretty much the best OpenCascade documentation

17:31.820 --> 17:37.820
there is. Okay, thank you. Okay, thank you very much, Lucas.

