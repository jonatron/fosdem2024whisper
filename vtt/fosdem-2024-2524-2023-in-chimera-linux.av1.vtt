WEBVTT

00:00.000 --> 00:11.600
Hello, everyone. I'm Daniel Kolesa. I'm the author and primarily developer of Kimmer

00:11.600 --> 00:18.080
Linux. First, in the first half of the talk, I will give you an overview of the project

00:18.080 --> 00:22.520
in case there's somebody there. There's probably many people here who haven't heard of it or

00:22.520 --> 00:28.200
don't know what it's about. And in the second part of the talk, I will sort of give you

00:28.200 --> 00:36.880
an update on what happened during last year. So first, what is Kimmer Linux? It's a general

00:36.880 --> 00:43.280
purpose Linux distribution primarily geared towards client computers such as desktops,

00:43.280 --> 00:48.840
but also others. It's built from scratch, not based on any other existing distribution

00:48.840 --> 00:55.800
with broad focus to it. And it's based on free BSD core tools, the muscle ellipsi and

00:55.800 --> 01:03.480
the LVM tool chain as its system compiler. It's hardened when it comes to tool chain

01:03.480 --> 01:09.600
security more than most distros and it's also very portable. Currently supporting official

01:09.600 --> 01:16.680
binary packages for five architectures, this includes R64, both big and little and in PPC64,

01:16.680 --> 01:25.560
Risk 5 and X86. It's based on binary packaging with APK tools, which is also known from Alpine

01:25.640 --> 01:30.840
Linux, but we use the next generation of APK tools, which is currently under development

01:30.840 --> 01:36.480
and not used by any other distro. It's a rolling release system, so packages are deployed

01:36.480 --> 01:43.160
continuously and there's no fixed releases anywhere. There's custom built source packaging

01:43.160 --> 01:50.080
infrastructure, which was written from scratch specifically for the distro. And it's generally

01:50.080 --> 01:54.920
meant to be lightweight and pragmatic, so not really focusing on one specific thing like

01:54.960 --> 02:00.600
many niche projects, but also overall they're still... I'm not really trying to make it to be

02:00.600 --> 02:08.120
like anything else. We also don't use system D, but we are trying to not to be militant about it

02:08.120 --> 02:16.800
because I kind of really hate doing that, so you won't find anything like that there. Why

02:16.800 --> 02:23.800
make this? Well, I want to make a well-rounded system I would personally enjoy using and also

02:23.840 --> 02:32.840
make proper use of LLVM's features, which they give us over GCC, for example, when it comes to

02:32.840 --> 02:39.120
security hardening. I'd like to improve software I'm unhappy with and overall focus on robustness

02:39.120 --> 02:46.680
and having a deterministic system which will always install the same way and work out of the

02:46.720 --> 02:56.720
box, but still being transparent and simple. And also good to default for things. As for some

02:56.720 --> 03:04.720
core principles of the system, I believe that some sort of technical purity is mostly

03:04.720 --> 03:12.280
counterproductive and makes things in general worse, so we try to not assume too much and sort of

03:12.320 --> 03:20.320
just make a flexible thing. I think that minimalism doesn't really mean anything by itself, so I

03:20.320 --> 03:26.200
try to focus on other things instead. I do believe that the system should be simple and it's better

03:26.200 --> 03:33.200
than being complex, but I also do believe that if complexity is necessary, then it's necessary.

03:33.200 --> 03:41.200
It's better than being complicated and requiring tons of setup. I think that development should be

03:41.240 --> 03:49.240
opinionated, but I also do think that dogmas are mostly bad and what we should actually focus on

03:49.240 --> 03:58.240
is a good software design. In general, we try to be inclusive, open and accessible. Also it's free

03:58.240 --> 04:05.240
software, so it's managed like free software. I think it's important to have fun when it comes to

04:05.280 --> 04:13.280
free software communities, so we try to basically make sure everything goes towards that. I don't

04:13.280 --> 04:21.280
know that mostly anything goes. Now let's get to the system design. I think it's good to always be

04:21.280 --> 04:29.280
strict by default. That is try to make sure that people always do the right thing, make sure that

04:29.320 --> 04:37.320
things are as strict as possible when it comes to, for example, when building software, having

04:37.320 --> 04:44.320
proper lint for everything, having sandboxing and so on. There should always be at least one good

04:44.320 --> 04:51.320
and obvious way to do things. I do believe that portability is extremely important as well as

04:51.320 --> 04:58.320
security and both of these should be preferred over having high benchmark numbers. I'd like to

04:58.360 --> 05:05.360
have self-sustaining tooling which can be retargeted to different environments so that when we need

05:05.360 --> 05:11.360
to switch to something else, it's actually easy to do and we do not get stuck with some

05:11.360 --> 05:20.360
weird old software. I do believe that the system should be atomic if possible when it comes to

05:20.400 --> 05:28.400
package transactions. To this end, I've been working on getting rid of things like post-installation

05:28.400 --> 05:37.400
hooks and so on instead making sure that as much of the transaction is atomic as possible so it

05:37.400 --> 05:46.400
doesn't get interrupted and could be rolled back. I'd like to encourage doing good and if something

05:46.440 --> 05:53.440
is written in a shell, it should usually not be written in a shell. I think there's always room

05:53.440 --> 05:59.440
for improvement and nothing is ever good enough. I also do believe that even though we are not

05:59.440 --> 06:07.440
using system D, it's not the devil so it's fine to get inspired if needed. Now let's get to

06:07.440 --> 06:12.440
packaging infrastructure. We have a custom system called C-Ports and it's implemented in

06:12.480 --> 06:21.480
Python. I started this in 2021 when I was still using Void Linux on my machines and basically

06:21.480 --> 06:28.480
I was unhappy with Xbpssrc being a massive pile of bash scripts. It had many drawbacks such as

06:28.480 --> 06:34.480
being slow, not having sufficient sandbox, being insecure so you couldn't really trust it to do

06:34.520 --> 06:43.520
some tasks. So I sort of redesigned the whole thing in hopefully a better way. It's sandboxed,

06:43.520 --> 06:52.520
it's very fast so you can introspect all the metadata and so on in real time. It's easy to

06:52.520 --> 06:58.520
use and it's optimized to minimize the amount of effort necessary for a small team to maintain

06:59.320 --> 07:06.320
things. So right now we have about 1600 packaging templates and we maintain them for all these

07:06.320 --> 07:15.320
architectures and there's only a few cometers. It's extremely important to actually have a tool

07:15.320 --> 07:23.320
link which will catch many different issues for you because otherwise it just becomes too much. So

07:23.400 --> 07:30.400
we have things like nightly update checks to stay on top of things and heavy linting for

07:30.400 --> 07:36.900
everything, heavy sandboxing, everything is containerized so all the software is built in a

07:36.900 --> 07:45.900
sandbox which has no network access, a read-only file system, sanitized defaults, deterministic

07:45.900 --> 07:51.400
installation of dependencies and so on. At the same time it makes it very easy to add new

07:51.440 --> 07:57.440
packages if necessary. Now let's take, this is how the C ports templates grew during last

08:01.240 --> 08:08.240
year. We started at around 800 and ended at some 1500. This is the comets, like overall

08:11.400 --> 08:18.400
comets in C ports. So we pretty much doubled everything during last year and this is how

08:18.760 --> 08:25.760
offers of templates or comets grew. So we went from around 10 to almost 50. Now let's get to

08:28.880 --> 08:35.880
the updates. During 2023 we released an alpha version which means the project is now ready

08:36.640 --> 08:42.320
to take on some users if they are feeling a little bit adventurous. The repositories are

08:42.400 --> 08:48.320
receiving major expansion constantly with new packages being added pretty much all the

08:48.320 --> 08:54.880
time. The system is usable as a daily driver with some precautions. I'm using it on many

08:54.880 --> 09:00.840
computers, many people are using it. There's still plenty more work to be done in all areas.

09:00.840 --> 09:05.840
Users are currently expected that if they are missing something in the repos they will add

09:05.880 --> 09:12.880
this and maintain it if possible. We have a lot of major software packages, a lot of it being

09:13.600 --> 09:19.600
done during last year including all the big web browsers like container infrastructure,

09:19.600 --> 09:26.600
office suite, Qt6, Java, different big programs. A lot of smaller programs which are still

09:27.000 --> 09:33.000
popular. We gained support for Flatpak which successfully supplements whatever is not

09:36.480 --> 09:42.480
packaged yet at least on the X86 architecture. We are still trying to make sure to package

09:42.480 --> 09:49.000
things if possible because it makes sure that people can actually run this software on all

09:49.000 --> 09:53.000
architecture supported by the distro which is not necessarily guaranteed when you are using

09:53.080 --> 10:00.080
Flatpak. There have been tool changes. We are now based on LVM 17. We default to no cement

10:00.580 --> 10:05.580
interposition. We default to initializing variables to zero. We have the new Lipsy++

10:09.080 --> 10:15.080
hardening flags enabled. We have expanded Fortify source. We also shrunk the executable size a

10:15.860 --> 10:21.860
bit thanks to linker changes. Also since last year there is finally proper infrastructure

10:24.580 --> 10:31.580
which includes build bot which automatically builds all packages as comments come in. Somebody

10:33.080 --> 10:39.120
merges a request or pushes to the repository. Build bot will pick it up. It will deploy the

10:39.120 --> 10:46.120
jobs to all the workers. The workers will build stuff and deploy it back to repos. It is pretty

10:46.120 --> 10:52.120
much real time with only the overhead of actually the build time. The infrastructure is very

10:55.060 --> 11:02.060
simple thanks to C build itself providing pretty much everything it needs to do. That means

11:02.140 --> 11:09.140
it can do all the bulk sorting and so on pretty much by default. Which means what build bot

11:09.700 --> 11:16.700
needs to do is suggest it receives comments. It checks which templates were, well it doesn't

11:17.340 --> 11:24.340
even do that actually. It just tells the worker find all packages which are not yet present

11:24.980 --> 11:31.980
on repos but are present in the C ports. Sort of diff it with the existing state. Then do the sort

11:34.220 --> 11:40.220
to make sure that the bulk is built in correct order. This includes transit if dependencies

11:41.180 --> 11:47.180
which are not even included in the transaction and so on. And things will just automatically

11:47.180 --> 11:53.180
get built and it happens in half a second. We also have a fancy package browser at this

11:53.620 --> 12:00.620
URL now. As for low level user line changes we have an initial API for our session tracker

12:00.820 --> 12:07.740
which has been created from scratch to properly support user services in the system. We utilize

12:07.740 --> 12:14.740
this heavily to, for example, sound server and session bus is run within as a user service

12:15.460 --> 12:20.940
so you no longer have the bus launch or the bus run session nonsense like you had on many

12:21.020 --> 12:26.100
legacy systems. Instead it's done in the same way as on system D systems where you have one

12:26.100 --> 12:31.580
session bus which is started when you log in and then it persists as long as something

12:31.580 --> 12:38.580
needs it. We have user line based on free BSD 14. We switched to system DUDEF in place

12:38.580 --> 12:43.780
of EUDEF because EUDEF has been going out of date and it's pretty much just worse in

12:43.780 --> 12:50.780
all aspects. We have adopted system DETMP files and CIS users in the core to manage all the

12:51.060 --> 12:58.060
temporary state and all the system users to make sure they can be recreated as necessary.

12:58.860 --> 13:05.380
We also have system D compatible support for BINFMT config files so emulators can be set

13:05.380 --> 13:10.460
up in a transparent way and when you install QMU user for an architecture it will install

13:10.460 --> 13:17.460
the configuration file properly reload and you will get your emulation. As for service

13:17.540 --> 13:22.700
management we are preparing for the adoption of debuff broker instead of classic debuff

13:22.700 --> 13:28.780
demon. This will mean fully service driven activation of debuff services which means

13:28.780 --> 13:35.780
nothing will, everything will be supervised, there will be no legacy spawn this demon and

13:35.780 --> 13:42.780
then don't care about it because that sucks. So for this we are currently working on Libdin

13:42.860 --> 13:49.220
CTL which will add an or which already adds an API to interact with DIN from C and as

13:49.220 --> 13:54.460
well as over debuff and we will have a debuff broker controller which will use this API

13:54.460 --> 14:01.460
to generate if needed ephemeral services you know or like if something already has a service

14:03.420 --> 14:10.260
and it will just use that instead of generating anything. As for service management we have

14:10.300 --> 14:17.300
new service targets for example for time thing so services which depend on NTP can use this

14:17.900 --> 14:23.140
or firewalls can make sure they start before other networking demon starts and so on. The

14:23.140 --> 14:30.140
whole early service package got a big overhaul so there's different new helpers for say SW

14:31.060 --> 14:37.740
clock which is used on systems with no real time clock in hardware for swaps with CTL

14:37.820 --> 14:43.620
and so on and so on so to reduce dependencies on other packages. We have improved support

14:43.620 --> 14:48.540
for read only root file system and it should pretty much just work out of the box these

14:48.540 --> 14:55.540
days as well as countless minor quality of life improvements. As for hardware support

14:56.740 --> 15:03.340
this is Kibara running on a Steam Deck OLED for example which works out of the box. We

15:03.380 --> 15:10.380
have LTS kernel 6.6 and stable kernel 6.7. We gain support for Raspberry Pi 5 which is

15:10.460 --> 15:17.460
in the same images as all the other Raspberry Pi so we support 3, 4, 5 in one image as was

15:18.500 --> 15:25.500
shown before Steam Deck support. We introduced support for Big End in PPC64 which runs on

15:25.500 --> 15:32.500
machines as old as PowerMax G5 so that's something people can experiment with. Also we have AMD

15:32.540 --> 15:39.540
CPU working on Ampere Ultra R64 machine-sided box which needed some cursed kernel patches

15:40.020 --> 15:47.020
which were only present in some trees so otherwise you get garbage in the screen which is currently

15:48.340 --> 15:55.340
happening on every other distribution. As for conclusion it's been a very nice productive

15:55.820 --> 16:02.820
year. There's probably going to be a beta release possibly in late spring or early summer.

16:04.140 --> 16:08.860
The upcoming focus is going to be on service management because there's still more things

16:08.860 --> 16:15.860
to improve in there. I'd like to introduce more support for advanced service management

16:16.420 --> 16:23.020
features including better support for capabilities, possibly some name spacing, possibly proper

16:23.100 --> 16:30.100
config file management. Also session tracking is going to be a major focus. I'd like to expand

16:30.780 --> 16:37.780
the turn style API so it can fully replace E-Logindy because E-Logindy has been hugely

16:38.420 --> 16:45.420
insufficient for us. The main issue with E-Logindy is basically with SystemD you have your Logindy

16:45.500 --> 16:52.100
which interacts with SystemD directly so it can spawn the user session and then do it

16:52.140 --> 16:56.580
and it can actually properly interact with E-Logindy. It's mostly geared towards systems

16:56.580 --> 17:03.580
which are legacy so they use legacy style service management with system services only and you

17:04.700 --> 17:11.200
have no way to properly track the lifetime of any E-Logindy session. This is bad for us

17:11.200 --> 17:18.200
because for example we want to be able to ensure that user services can linger beyond

17:19.080 --> 17:26.080
the scope of the user session but if we have E-Logindy managing the runtime directory then

17:26.800 --> 17:33.160
we cannot do that because E-Logindy has no way to tell it to do this so it's kind of bad

17:33.160 --> 17:37.660
and we really need the proper solution. We are already patching E-Logindy to enable some

17:37.660 --> 17:43.840
of these things but I'd like to not patch anything and just get rid of it entirely. Also as a

17:43.920 --> 17:49.920
part of service management focus I would like to introduce proper logging infrastructure

17:50.280 --> 17:57.280
which means something like a journal where you can actually log both legacy log stuff

17:58.040 --> 18:03.920
as well as STD out from different services, have a central daemon which will properly

18:03.920 --> 18:10.920
deal with things like log rotation and so on in a better way than we have now. I would

18:11.480 --> 18:17.980
also like to focus on package management. This will possibly include things like ZSTD

18:17.980 --> 18:24.980
support for package compression and many different enhancements made possibly optional packages.

18:26.680 --> 18:31.240
Right now we only have reverse optional packages which is nice but makes some things clunky

18:31.240 --> 18:38.240
at times and there's a huge amount of work to do but we're going to get to it eventually.

18:39.240 --> 18:45.240
Thank you for listening and now if you have any questions feel free to ask. I will try

18:45.960 --> 18:48.960
my best to answer them.

18:48.960 --> 18:51.960
Yeah?

18:51.960 --> 18:58.960
Thanks for the talk. There are many talks these days of maintainer burnout and you

19:01.680 --> 19:06.680
know the lack of financing in open source. How is Chimera doing at this point?

19:06.680 --> 19:08.680
Sorry can you repeat that?

19:08.680 --> 19:15.680
Is Chimera while financed and are you okay in terms of you know load? You don't suffer

19:16.200 --> 19:22.200
from, do you feel that you may suffer from maintainer burnout if the project grows in

19:22.200 --> 19:23.200
size?

19:23.200 --> 19:25.200
Are you asking about financing?

19:25.200 --> 19:28.200
Yes. Is Chimera okay at this point?

19:28.200 --> 19:35.200
Well currently there's no financing to speak of like it's entirely volunteer driven.

19:37.680 --> 19:44.680
There is five server for example for building these five packages sponsored by a community

19:44.720 --> 19:51.720
member. The X86 dedicated server used for building X86 packages is paid for by me.

19:53.080 --> 20:00.080
I also have my own hardware for PPC64LE. As for other builders for R64 and also for

20:00.880 --> 20:07.880
Big ND and PPC64. These are sponsored by Oregon State University as VMs in their open

20:08.960 --> 20:14.520
source lab so that's really nice of them. I do not really think it needs financing right

20:14.520 --> 20:21.520
now. We are managing quite okay I would say but in the long term sure maybe it's something

20:21.680 --> 20:24.680
to think about.

20:24.680 --> 20:31.680
Now here.

20:36.080 --> 20:39.080
You have the year wrong on your date on the slides.

20:39.080 --> 20:42.080
The year is wrong on the date on your slides.

20:42.080 --> 20:44.080
What?

20:44.080 --> 20:46.080
Oh.

20:46.080 --> 20:48.080
Yeah sure.

20:48.480 --> 20:50.480
Paying attention.

20:50.480 --> 20:57.480
I am curious if you could explain maybe a few words about things like turnstile and

21:02.000 --> 21:09.000
E-log in D and what you feel is significant that system D brings to session management

21:10.000 --> 21:17.000
that you want to reproduce that other system D free Linux's don't do?

21:18.400 --> 21:25.400
Sure. I can explain that. Basically what log in D does in its core is it tracks when

21:26.960 --> 21:33.960
users log in and when they log out so it can actually keep track of the session and other

21:34.040 --> 21:41.040
applications can check this data so they can inspect what sessions exist, what kind

21:42.400 --> 21:48.160
of session type it is, what kind of session class it is, what C group is associated with

21:48.160 --> 21:55.160
that, like what processes belong in a specific session and other applications can make use

21:56.560 --> 22:03.680
of this information. What it also does is manage seats which means it gives you secure

22:03.760 --> 22:10.760
access to devices. Basically since Linux devices do not really have a concept of having multiple

22:14.080 --> 22:21.080
users being connected to them, you can ask log in D for a file descriptor to a GPU device

22:21.400 --> 22:25.840
for instance and it will give you that and it will hold it in place so that nothing else

22:25.840 --> 22:31.080
can ask for it and also nothing else will have physical access to the device node so

22:31.080 --> 22:38.080
only log in D is permitted to give you file descriptors to the device. This is extremely

22:38.960 --> 22:45.960
important for Wayland Compositors for instance and E-log in D basically provides you this

22:46.120 --> 22:50.360
functionality but it doesn't provide you proper session tracking or anything at all and session

22:50.360 --> 22:57.360
tracking is also used by say Wayland Compositors or log in majors or lots of different things.

22:57.440 --> 23:04.440
For session for seats tracking there's a project called Lipset and it also ships with a demon

23:04.440 --> 23:10.000
called CDD which will give you this secure access to the devices but it does not give

23:10.000 --> 23:17.000
you the session tracking so basically turnstile is supposed to complement this and make one

23:18.280 --> 23:25.280
whole thing which will provide the same functionality and it does so in a way which is very important

23:27.760 --> 23:34.760
sort of vendor independent so in addition to having its own solution it will also be

23:36.400 --> 23:40.960
simplified API interface to log in D itself which means different software would be able

23:40.960 --> 23:46.960
to adapt to this API and have support for both log in D itself as well as turnstile

23:46.960 --> 23:53.560
the demon as well as potentially some third party solutions for example for BSD systems

23:53.560 --> 23:59.440
which currently has nothing for this and that's why their Wayland support is very limited

23:59.440 --> 24:00.440
for example.

24:00.440 --> 24:07.440
I think we could take one more, does anyone?

24:11.120 --> 24:17.120
So what is the state about software installer? Is this also planned for the BDG?

24:17.120 --> 24:18.120
State of what?

24:18.160 --> 24:24.160
Of a lacking installer system because of its copy pasting files now?

24:24.160 --> 24:29.880
Well as for installer the problem with installers is that they are very complicated to make

24:29.880 --> 24:34.600
which means it hasn't really been a focus for now instead the manual installation is

24:34.600 --> 24:38.640
extremely simple and you can do it in like three minutes but there is a plan to have

24:38.640 --> 24:45.000
an installer eventually it's just not something which has been you know focused for now because

24:45.080 --> 24:50.360
it's complicated and it's a big project on its own to do properly otherwise if you don't

24:50.360 --> 24:57.360
do that you will end up with bad installer which will have many issues and will be limited

24:58.080 --> 25:05.080
in use so it's better to properly think about it and do it right.

25:05.600 --> 25:11.240
And a quick second question will be like a rolling release strategy or will be like

25:11.240 --> 25:15.840
releases in sync with the BSD user land utilities?

25:15.840 --> 25:22.340
Well the distro itself is rolling release we do update to new the user land utilities

25:22.340 --> 25:29.340
are using free BSD releases currently at 14 and we do update to new releases as they

25:29.560 --> 25:36.560
come out so it does not really sync with free BSD current for example but other than occasional

25:37.240 --> 25:43.360
backpacks when something major happens and we want it earlier but in general we stay

25:43.360 --> 25:47.320
on top of free BSD releases and use that.

25:47.320 --> 25:51.960
Okay thank you.

25:51.960 --> 25:53.640
I think yes we are out of time so thank you Daniel.

25:53.640 --> 25:54.160
Okay thank you.

