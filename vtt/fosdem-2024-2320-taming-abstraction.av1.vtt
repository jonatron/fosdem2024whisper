WEBVTT

00:00.000 --> 00:05.000
Thank you very much.

00:05.000 --> 00:09.000
Thank you, yes.

00:09.000 --> 00:13.000
And apologies, as we say, for being the third British...

00:13.000 --> 00:18.000
Is this on? Can you hear me?

00:18.000 --> 00:23.000
We've got feedback just being louder to the back of the room.

00:23.000 --> 00:27.000
Okay, how's this?

00:27.000 --> 00:32.000
Okay, alright, I'll try and stay standing up.

00:32.000 --> 00:36.000
And apologies for being the third British speaker, as we said.

00:36.000 --> 00:40.000
Maybe I should start off with...

00:40.000 --> 00:45.000
But I am another British speaker, writing in American English.

00:45.000 --> 00:49.000
I won't say too much about that, so I may get into trouble at work.

00:49.000 --> 00:55.000
But also, carrying on the same theme, we use the same docs as code.

00:55.000 --> 01:01.000
I'm a writer at Couchbase. We're a large NoSQL database company.

01:01.000 --> 01:09.000
Other NoSQL databases are available, so I won't be talking too much about Couchbase purely.

01:09.000 --> 01:14.000
Going along with a lot of what's been said, we do that docs of code.

01:14.000 --> 01:20.000
We do the local linting and everything else and rendering.

01:20.000 --> 01:29.000
Although we're actually bumping up against a lot of limitations around the ideas of docs as code.

01:29.000 --> 01:39.000
We have problems where having a mixed code and docs repository is not necessarily the best answer.

01:39.000 --> 01:45.000
And we do have several dozen separate docs repositories for different products.

01:45.000 --> 01:49.000
We run up against all sorts of problems.

01:49.000 --> 01:55.000
But I'm just here to talk about one particular problem, which I've discovered,

01:55.000 --> 01:58.000
as I've been trying to rewrite a section of our documents.

01:58.000 --> 02:07.000
And that's this over-optimization problem that we sometimes have to make it easier

02:07.000 --> 02:14.000
to maintain docs across versions versus how do we make documentation

02:14.000 --> 02:20.000
less opaque in the source for new contributors.

02:20.000 --> 02:26.000
So I'm not sure how much of a widespread this problem is, how many people are working with scale,

02:26.000 --> 02:34.000
or even in the room how many people are writers versus doc ops versus engineers.

02:34.000 --> 02:40.000
But just to give an example, I mean, for me, how many of you are writers with an interest in doc ops

02:40.000 --> 02:44.000
rather than the other way around? Who's a writer primarily?

02:44.000 --> 02:51.000
So not so many writers. How many are doc ops who care a bit about writing?

02:51.000 --> 02:56.000
So more of an, and how many are just engineers who care about writing?

02:56.000 --> 03:02.000
So much more of you there. So this is interesting because in the first talk in this room,

03:02.000 --> 03:08.000
Lorna described herself as an engineer who has a writing problem.

03:08.000 --> 03:13.000
And a lot of what I'm going to talk about comes from this particular,

03:13.000 --> 03:19.000
sorry, I just had an about me thing. I found the older about.me website.

03:19.000 --> 03:24.000
It was just interesting because nobody uses these anymore and I lost the login 10 years ago.

03:24.000 --> 03:31.000
But there's not much to say about me other than I like plants, especially food plants.

03:31.000 --> 03:36.000
And if we do finish too early, Christoph and I can both answer questions

03:36.000 --> 03:43.000
on systems thinking applied to growing fruit and vegetables, but moving strictly on.

03:43.000 --> 03:49.000
So we're trying to read all that. There's far too many lines for a slide,

03:49.000 --> 03:55.000
but engineers do like to over-optimize. You know you do.

03:55.000 --> 04:00.000
If there's any sort of problem, you know, it's DIY.

04:00.000 --> 04:07.000
Do not repeat yourself and you want to get those optimizations in straight away.

04:07.000 --> 04:15.000
And so as I've been going through old bits of the document, sorry, that's not really very big.

04:15.000 --> 04:18.000
Let's I think I've got it bigger on the next one.

04:18.000 --> 04:29.000
Yeah, I found bits where one of the Java engineers had started once we had a Scala SD-Cache.

04:29.000 --> 04:38.000
Scala SD-Cache as well as a Java SD-Cache started to put things in to keep everything the same file in both,

04:38.000 --> 04:43.000
but just slightly changed to pull out information to tell you where they are.

04:43.000 --> 04:49.000
But there were only two different languages to do between out of 10 SD-Caches that we have.

04:49.000 --> 04:58.000
And the more of this sort of stuff you have, the more anybody wanting to do a quick edit on your docs

04:58.000 --> 05:04.000
who doesn't know all of the structure of your docs has to start digging and finding things.

05:04.000 --> 05:13.000
But this isn't too bad. And I should say as well before we go into deeper waters

05:13.000 --> 05:22.000
and there are some very deep waters in our docs of trails of abstraction which lead down a long, long way.

05:22.000 --> 05:31.000
But I understand why all the people who were involved did it and there were extremely good reasons at the time

05:31.000 --> 05:38.000
because we have too few people doing too much work like most places

05:38.000 --> 05:48.000
because everything moves so quickly in software and we always have more products with the same resources to deal with them.

05:48.000 --> 06:00.000
But I just want to take a quick example which started when I wanted to do a quick edit on our mobile product.

06:00.000 --> 06:07.000
We have an offline first mobile database which syncs with the main database

06:07.000 --> 06:13.000
and it's embedded with various languages depending on your mobile device

06:13.000 --> 06:19.000
or even Java desktop as well as Java on Android.

06:19.000 --> 06:29.000
And I couldn't see the bit of a page I needed to edit here because I couldn't work out what was going on.

06:29.000 --> 06:40.000
I could see I needed to start looking at various things which were being included like these include partials up there at line 8.

06:40.000 --> 06:45.000
And then there's the page context for Java adoc.

06:45.000 --> 06:48.000
So I looked for that.

06:48.000 --> 06:58.000
We're using Antora with ASCII doc and Antora has a structure where for each module you will have the pages,

06:58.000 --> 07:09.000
you will have partials which are being pulled in whether they're partials with attributes or partials with chunks of text that you're reusing.

07:09.000 --> 07:12.000
But these weren't in the partials module.

07:12.000 --> 07:18.000
If you look closely after the partial dollar string there's an underscore.

07:18.000 --> 07:27.000
There was already a separate underscore partials directory within pages as well as the partials directory which you'd expect to find.

07:27.000 --> 07:35.000
So following that down I found this.

07:35.000 --> 07:44.000
This was already including more partials so root pages, page context and so on.

07:44.000 --> 07:47.000
But there were some other strange things going on here.

07:47.000 --> 07:54.000
I'm not sure if you can see it, but I'm not sure if you can see it.

07:54.000 --> 07:58.000
I'm not sure if you can see it, but I'm not sure if you can see it.

07:58.000 --> 08:05.000
I'm not sure if you can see it, but I'm not sure if you can see it.

08:05.000 --> 08:10.000
I'm not sure if you can see it, but I'm not sure if you can see it.

08:11.000 --> 08:19.000
It made sense to them to put all this stuff in so that each time new versions came out,

08:19.000 --> 08:24.000
each time this stuff was reused in other language versions.

08:24.000 --> 08:29.000
It wouldn't break for them and they wouldn't have to do any extra work.

08:29.000 --> 08:36.000
But for someone trying to fix a quick bug already they're going down more layers, three layers.

08:36.000 --> 08:43.000
We get to that general page parameter after the Java one.

08:43.000 --> 08:58.000
And this one just followed on to another one which followed on to 223 lines of parameters.

08:59.000 --> 09:09.000
Now, at this point I had just given up on all hope of doing a quick fix in these docs

09:09.000 --> 09:16.000
and I don't expect anyone else will ever do a quick fix on them.

09:16.000 --> 09:25.000
And I know the people who are now maintaining the docs are changing this section to flatten this out.

09:25.000 --> 09:28.000
I don't like stop signs, they're a bit sort of warning-y.

09:28.000 --> 09:33.000
Let's have a clear calm sky to relax.

09:33.000 --> 09:46.000
So clearly you can over-optimize too far, but if you don't take shared cases

09:46.000 --> 09:54.000
and pull them together with shared files of text with useful parameters,

09:54.000 --> 10:01.000
you get to a point where you are repeating yourself way, way too much in docs.

10:01.000 --> 10:08.000
Especially so for example, our server SDKs we have ten different languages and counting.

10:08.000 --> 10:15.000
And there's a lot of common content if it's on something like field level encryption.

10:15.000 --> 10:22.000
Most of it's the same as just a very tiny code snippet needed to show the API.

10:22.000 --> 10:31.000
It's mostly talking about what you need to know, what the limitations are, how to implement it.

10:31.000 --> 10:37.000
So maybe we could start with just some simple things here.

10:37.000 --> 10:45.000
So a partial sphiyog with attributes to each module.

10:45.000 --> 10:55.000
Now, the thing is we're doing it this way in Antora and ASCII Doc.

10:55.000 --> 11:02.000
You have to include the partial sphiyog in each document file.

11:02.000 --> 11:05.000
So instead, there's a much better way of doing it.

11:05.000 --> 11:10.000
And that's just to stick it in the Antora YAML file at the base of each repo

11:10.000 --> 11:15.000
and just put all the attributes together.

11:15.000 --> 11:21.000
It's hidden from the new user to ASCII Doc because they don't know that this stuff is there

11:21.000 --> 11:25.000
so there's things you can do to point the way.

11:25.000 --> 11:35.000
But let's just pause and think about these dozen, well, eleven, their attributes.

11:35.000 --> 11:46.000
It's everything which would need to be changed from a change of a patch release

11:46.000 --> 11:51.000
or when this stuff is replicated to a new .minor.

11:51.000 --> 11:58.000
Or when we pull in a common file and we're talking about that SDK and doing it.

11:58.000 --> 12:00.000
And no more.

12:00.000 --> 12:08.000
So I think for what I'm doing at the moment, the balance is about right.

12:08.000 --> 12:14.000
But the reason I'm here talking now and it's interesting,

12:14.000 --> 12:18.000
Jack mentioned his talk with his first FOSDEM talk.

12:18.000 --> 12:24.000
This is my first FOSDEM talk but I last gave a talk on edible landscaping.

12:24.000 --> 12:31.000
I mentioned the gardening stuff before but the reason I'm here is not so much a talk

12:31.000 --> 12:41.000
as a set of open questions because we're all here with an interest in making maintainable docs.

12:41.000 --> 12:48.000
And so when we get to the end in a couple of slides, what I really want to know is

12:48.000 --> 12:51.000
how have you been able to find a balance?

12:51.000 --> 12:56.000
Is this something that you've come up against where you've got new contributors coming in

12:56.000 --> 13:03.000
to help with your documentation and you have to spend way too much time

13:03.000 --> 13:10.000
helping them understand what you're doing or do you not have enough contributors to make it worthwhile

13:10.000 --> 13:20.000
and given shortage of writing resources, it's always going to be better to slightly emphasize the optimizations.

13:21.000 --> 13:32.000
So that balance is really what I'm here for to find out because I don't know.

13:32.000 --> 13:37.000
What I've showed you before on that Scala one is about where I'm at

13:37.000 --> 13:43.000
but I'd like to know what other people think so please, over to you.

13:51.000 --> 13:57.000
Alright, this is always a dangerous format when you open it up.

13:57.000 --> 13:59.000
Yes.

14:01.000 --> 14:03.000
Who has this problem also?

14:05.000 --> 14:07.000
Who's running a project for this?

14:07.000 --> 14:09.000
Abstractions keeping in.

14:09.000 --> 14:18.000
As I say, we're right on the edge of Docs' code sort of breaking down under the strain of how much stuff we have going on.

14:18.000 --> 14:23.000
So maybe we are the only ones and other people will have this problem later.

14:23.000 --> 14:28.000
It reminds me of the problem of abstraction in code as well.

14:28.000 --> 14:31.000
I think the shape of the problem is very similar.

14:31.000 --> 14:36.000
So I think my answer, even though I don't write a lot of Docs, my answer would be the same.

14:36.000 --> 14:37.000
It depends.

14:37.000 --> 14:48.000
People that work with the system a lot and they are interested in all of the abstractions and it's necessary.

14:48.000 --> 14:51.000
Then you go more towards that side.

14:51.000 --> 14:59.000
If you have a lot of beginners or people that are less experienced with those kinds of abstractions, then you lean more towards that side.

14:59.000 --> 15:06.000
I don't necessarily see a big difference between abstractions and code versus in like, DocOps.

15:06.000 --> 15:08.000
Absolutely.

15:08.000 --> 15:16.000
So for anyone who didn't hear, there's very little difference between abstractions in code and in Docs.

15:16.000 --> 15:25.000
I'm glad to find people saying there are no clear answers because that means we still get paid for making decisions that LLMs couldn't do.

15:25.000 --> 15:26.000
Can I ask you a question?

15:26.000 --> 15:28.000
Is the couch-based Docs open?

15:28.000 --> 15:29.000
Yes.

15:29.000 --> 15:36.000
So almost all of our Docs are in open Docs reposing GitHub.

15:36.000 --> 15:41.000
Some of them are in Docs' code repose mixed with the code.

15:41.000 --> 15:54.000
And the one for our cloud as a service product, which necessarily has a closed repo for the control plane, we're in the process of pulling the Docs out of that.

15:54.000 --> 15:57.000
And how many external contributors?

15:57.000 --> 15:59.000
Contributions are there, generally speaking.

15:59.000 --> 16:07.000
I know that it's not that common for open source documentation to stop, but how many contributions do you get?

16:07.000 --> 16:08.000
Yeah.

16:08.000 --> 16:11.000
So we're an enterprise company.

16:11.000 --> 16:17.000
Almost all of our customers are large enterprises rather than small groups of developers.

16:17.000 --> 16:20.000
So that cuts it down even more.

16:20.000 --> 16:27.000
And yet we get some customers coming in, putting in pull requests.

16:27.000 --> 16:41.000
Whenever there's a project where people are encouraged to go off to GitHub and contribute to open source code, we tend to get our fair share of people adding in that as well.

16:41.000 --> 16:51.000
So sometimes we do see people coming in and missing how stuff is structured and doing a less helpful contribution, definitely.

16:51.000 --> 16:53.000
Do you have Docs for your Docs?

16:53.000 --> 16:56.000
Yes, but are they up to date?

16:56.000 --> 16:59.000
No, they are not up to date.

16:59.000 --> 17:10.000
I think when I was having this problem I know a lot of modern tooling, which we will be getting to in the next couple of talks, can make things overly complicated for people who just want to fix a typo.

17:10.000 --> 17:12.000
Yeah.

17:12.000 --> 17:14.000
You prefer some in your tip.

17:14.000 --> 17:26.000
We're on the other end of the spectrum where we're a small developer team with a lot of mechanical process engineers that we want them to write.

17:26.000 --> 17:34.000
And often they write things and they want to first each rate 15 times over before they publish and they never come to publishing.

17:34.000 --> 17:39.000
The most important thing is the lowest barrier to actually write something.

17:39.000 --> 17:53.000
So we tend to steer away as far as possible from this abstraction because we see that it's not difficult, but it's like that one tiny thing that maybe doesn't hesitate to actually do that something.

17:53.000 --> 17:57.000
Could Vale help you with removing abstractions?

17:58.000 --> 18:03.000
I don't know about that. We're already using Vale.

18:03.000 --> 18:15.000
I'm repeatedly told on all the faults I have by Vale and I'm getting hardened to it, but I do have a very thin skin.

18:15.000 --> 18:20.000
There's a connective question.

18:20.000 --> 18:25.000
Is this problem one person or is this a systemic problem?

18:25.000 --> 18:32.000
Because it might be that you have one person who's just really enamoured by abstractions, who just keeps adding abstractions.

18:32.000 --> 18:49.000
Well, I mean, these were engineers slash writers who A, loved these abstractions and B, really needed to do them because we just didn't have the number of people needed to deal with this.

18:49.000 --> 18:59.000
They've moved on and we've got new writers who don't have the same engineering background and we want more people getting involved in those mobile docs.

18:59.000 --> 19:03.000
So we are definitely moving away from that.

19:03.000 --> 19:09.000
But it's at balance. We're always going to need some abstractions to make it maintainable.

19:10.000 --> 19:23.000
So I'm rewriting our SDK docs for, well, for 11 SDKs because we've got another one going GA at the moment because our existing SDK docs are awful.

19:23.000 --> 19:25.000
And I know that because I wrote them six years ago.

19:26.000 --> 19:32.000
And, you know, I've always known them about it, but now I can see a way of making them good.

19:32.000 --> 19:45.000
And that includes also dealing with a lot of tech debt and the level of abstraction is about balancing out how to keep that tech debt lower as we go along as well.

19:46.000 --> 19:54.000
Yeah, so we're using a good base flow and we have our own local environments with reviewers and with other people.

19:54.000 --> 19:59.000
We would like to have some one click solution to just fix this comma separately.

19:59.000 --> 20:13.000
So we're doing some experiments with, yeah, hosted editors so that at least you can, although there might be that flash, although you might not be on the same full test, but you don't need to set up a whole system to do something with this.

20:14.000 --> 20:27.000
Absolutely. Yeah. So, so, I mean, you asked earlier about ad docs being open so you can click on edit this doc and it will open up the GitHub repo.

20:27.000 --> 20:33.000
And if you open up that one I showed at the beginning with with all that track, that's when you would be totally lost.

20:33.000 --> 20:34.000
Yeah. Yeah.

20:35.000 --> 20:40.000
I'm an increasing fan of tools like MDX, which is not down plus react components.

20:40.000 --> 20:43.000
And that's great fun in the browser, but terrible for editing.

20:43.000 --> 20:44.000
Yes.

20:44.000 --> 20:49.000
But it's cool. So you keep doing it.

20:49.000 --> 20:57.000
Any other questions, statements, experiences or we can refresh the room for a little bit longer before the next full.

20:58.000 --> 21:09.000
Oh, yes, I could just add that sometimes the abstractions are required because I work for a mechanical industry.

21:09.000 --> 21:15.000
So what happens there is that I use a very same component on different machines.

21:15.000 --> 21:26.000
So the obstruction that cases required because otherwise, I mean, you can't go too much in detail for that component because it could be leaving very different machines.

21:26.000 --> 21:44.000
So that's why in those cases abstraction is, yeah, you have to carefully write what you're writing because otherwise you risk to not being able to recycle that component that piece of writing that, you know, that fire.

21:44.000 --> 21:49.000
That's where I think I'm going to.

21:49.000 --> 21:50.000
There is an answer.

21:50.000 --> 21:52.000
Yeah, the room isn't there, but it's not open source.

21:52.000 --> 21:54.000
So I'm not talking about it.

21:54.000 --> 21:56.000
Well, the tool.

21:56.000 --> 21:59.000
The top of the source.

21:59.000 --> 22:01.000
The stuff that most people.

22:01.000 --> 22:03.000
Yeah, I see.

22:03.000 --> 22:05.000
But the core of the heart, you could be.

22:05.000 --> 22:07.000
I think you're open source.

22:07.000 --> 22:08.000
All right.

22:08.000 --> 22:09.000
Let's move it to that.

22:09.000 --> 22:22.000
By the way, I have one question for the people who created the problem with the many abstractions or the repeated abstractions.

22:22.000 --> 22:28.000
Do you have a way to help them face it?

22:28.000 --> 22:32.000
And maybe they come up with a solution or did you die?

22:32.000 --> 22:35.000
Oh, well, they left the company long ago.

22:35.000 --> 22:37.000
Yeah, very sensibly.

22:37.000 --> 22:38.000
Yeah, yeah.

22:38.000 --> 22:41.000
But thank you for helping me think out loud about our problem.

22:41.000 --> 22:46.000
And it's interesting to see that it's not yet shared in many places.

22:46.000 --> 22:48.000
But that's good because I do like a challenge.

22:48.000 --> 22:50.000
Sorry, one more.

22:50.000 --> 22:54.000
So we have quite a similar problem at my company.

22:54.000 --> 22:56.000
It's the inter-place.

22:56.000 --> 23:10.000
Because we have, let's say, one size fit or inter-place, that can be used in places where I do lane-eskiders, places where I do aqora, and then in places where I do different visual performance.

23:10.000 --> 23:16.000
We are waiting for a thousand of situations, and we have a lot of people there.

23:16.000 --> 23:28.000
And then it's not any additional problem because changing the top lane is a very difficult journey.

23:28.000 --> 23:32.000
We need to get with ten people and change the lane.

23:32.000 --> 23:37.000
So that's, in my company, that's the case.

23:37.000 --> 23:39.000
It's just changing that.

23:39.000 --> 23:45.000
Too much airport for inter-place.

23:45.000 --> 23:50.000
Yeah, those if-defs, they should definitely be the exception rather than the rule.

23:50.000 --> 23:57.000
They're necessary sometimes, but too many and you're lost.

23:57.000 --> 23:59.000
Okay, cool.

23:59.000 --> 24:04.000
I don't know what experience the innovation is using.

24:04.000 --> 24:10.000
It seems like that, traction should be like supporting the US operation concerns,

24:10.000 --> 24:17.000
bringing the documents where they want to just, like, induce a bounce.

24:17.000 --> 24:25.000
But it looked like it was something like real congratulations that you can ask to display something like what we did with Goji,

24:25.000 --> 24:34.000
and the structure of the installation, and what we construct and take like more depth for you in the end of the story.

24:34.000 --> 24:40.000
But here you need to have the knowledge of all the sub-cores, and if you do as well,

24:40.000 --> 24:47.000
from the power that you showed, it seems like it is your best knowledge of what happened to you,

24:47.000 --> 24:50.000
and what you think that happened to you.

24:50.000 --> 24:52.000
Yeah.

25:03.000 --> 25:09.000
Yeah, so I think one way around that limitation that I am putting into the sort of,

25:09.000 --> 25:18.000
I should have put it on a slide is that the new pages are going to have comments at the beginning pointing out everything that's connected,

25:18.000 --> 25:25.000
where the page is, where it's pulling from, and make it clear up front for editors.

25:25.000 --> 25:28.000
It says a note for editors and does that.

25:28.000 --> 25:41.000
I should have, I've got it open here, but I can't, for some reason, my screen mirroring is not the right sort of mirroring to Dragimax up there to show the thing.

25:41.000 --> 25:43.000
It's the most better time to say that.

25:43.000 --> 25:46.000
See Richard after the talk.

25:46.000 --> 25:48.000
Thank you.

