WEBVTT

00:00.000 --> 00:09.520
Perfect, I guess then let's start right a bit earlier, but then leaves potentially a

00:09.520 --> 00:10.720
few times for questions.

00:10.720 --> 00:12.800
Hi, my name is Benifuri.

00:12.800 --> 00:17.760
I work at the Confidential Computing Enabling Team at Intel.

00:17.760 --> 00:23.880
My main job is to, I can try, but I notice when I said there that it's not really loud,

00:23.880 --> 00:25.880
the speaker is not loud there.

00:25.880 --> 00:29.040
Okay, speak closer to the microphone, I will try.

00:29.040 --> 00:35.040
So yes, Intel Confidential Computing Enabling, right, we work together with academics, companies,

00:35.040 --> 00:39.840
partners, whoever wants to use our technology, we help them to do that, right, that's my

00:39.840 --> 00:40.840
job.

00:40.840 --> 00:46.240
Today, I will talk about Intel TDX, and I will, it's called Deep Dive, but I will start

00:46.240 --> 00:50.400
with an overview and then go deep in a few slides, right.

00:50.400 --> 00:54.000
So overview first, I don't want to speak too much about that, right, it was just done in

00:54.000 --> 00:56.520
the talk we just had.

00:56.520 --> 01:01.320
Without confidential computing, or if you don't use any protection mechanism, everything

01:01.320 --> 01:05.880
is in what we call the trust boundary, right, everything can access your confidential data.

01:05.880 --> 01:10.200
With our first technology, Intel S-Chicks was just mentioned, right, only the application

01:10.200 --> 01:15.560
with Intel TDX, the topic of today, a virtual machine is protected, right, everything of

01:15.560 --> 01:21.320
that was just mentioned, just want to mention it again, because like we have the options,

01:21.320 --> 01:24.560
right, use whatever you want.

01:24.560 --> 01:29.960
In general, you could say Intel S-Chicks is the more secure technology, Intel TDX the

01:29.960 --> 01:35.440
more usable technology, right, but that's up for debate if you want.

01:35.440 --> 01:40.000
Yeah, today we will concentrate on Intel TDX only.

01:40.000 --> 01:47.520
Here, you see an overview, like this is what a regular system looks like, right, we have

01:47.520 --> 01:52.800
the platform with cores, caches and so on, the memory and a regular hypervisor, a virtual

01:52.800 --> 01:55.080
machine monitor here.

01:55.080 --> 02:03.720
And with normal VMs, this hypervisor starts the virtual machines, right, and it is also,

02:03.720 --> 02:08.440
this hypervisor isolates the virtual machines from each other and isolates the virtual machines

02:08.440 --> 02:10.920
from the hypervisor itself.

02:10.920 --> 02:20.320
In the main memory, everything is plain text, right, so, which means that every person and

02:20.320 --> 02:26.280
every program with the necessary privileges can access the data, right, it's plain text.

02:26.280 --> 02:28.520
This is different with Intel TDX.

02:28.520 --> 02:33.880
With Intel TDX, we introduce what we call the Intel TDX module.

02:33.880 --> 02:39.800
The hypervisor has to be adjusted as well, it's now says here it's TDX enlightened, because

02:39.800 --> 02:45.920
the hypervisor is still responsible for resource management and hypervisor now needs to, instead

02:45.920 --> 02:50.800
of starting the virtual machines itself, it has to go to the TDX module and say here,

02:50.800 --> 02:54.720
please start your TDX protected virtual machines for me.

02:54.720 --> 03:00.080
And this is what the TDX module does, right, it starts to protect the virtual machines,

03:00.080 --> 03:02.920
which we call trust domains, right.

03:02.920 --> 03:08.160
Intel TDX stands for Intel Trust Domain Extensions, Intel TDX Protected Virtual Machines, we call

03:08.160 --> 03:10.680
them trust domains.

03:10.680 --> 03:16.840
Inside those trust domains or TDs, the guest OS running there has to be enlightened as well,

03:16.840 --> 03:23.000
right, it has to be at least to have some changes, because it has to handle now accesses

03:23.000 --> 03:27.880
to private memory and shared memory, it has to handle that, it also has to handle exceptions

03:27.880 --> 03:32.840
and it has to block certain calls that were possible before.

03:33.840 --> 03:40.800
Yes, the application inside the TD do not have to be adjusted, that's the main advantage

03:40.800 --> 03:44.440
of Intel TDX or comparable technologies.

03:44.440 --> 03:50.600
The main memory belonging to the TD is encrypted with an ephemeral key that is dedicated and

03:50.600 --> 03:54.480
hardware managed, right, as you see on the slide, it says encrypted with key one and

03:54.480 --> 04:00.520
key two, because every trust domain is encrypted with a different key.

04:00.520 --> 04:05.160
Inside the CPU, the data belonging to the TD is plain text, right, that's what confidential

04:05.160 --> 04:11.160
computing does, inside the CPU, data is plain text, but the CPU takes care that only the

04:11.160 --> 04:16.240
trust domain to which the data belongs has access to the data.

04:16.240 --> 04:20.240
Combining the main memory encryption and access control, Intel TDX enforces the isolation

04:20.240 --> 04:26.720
of the different TDs by using the Intel TDX module, on top of that, attestation proves

04:26.720 --> 04:31.880
that this is the case, right, what we will talk about attestation a bit later.

04:31.880 --> 04:38.560
This slide is about the Intel TDX enabling in Linux, it contains a lot of details, I

04:38.560 --> 04:43.840
don't want to go into every detail, I only want to highlight three things.

04:43.840 --> 04:49.880
First via VM isolation requires to enable a lot of parts of the software and Intel has

04:49.880 --> 04:56.640
done that, right, we have put the work in and basically everything is open source, right,

04:57.560 --> 05:02.000
and this is the, basically everything is open source, and even the ones in gray, they are

05:02.000 --> 05:07.440
only gray because they are a reference implementation, but also open source.

05:07.440 --> 05:13.160
And most of the pieces are already upstreamed, but not everything, right, that's the current

05:13.160 --> 05:18.360
situation of Intel TDX, but this will change soon, hopefully.

05:18.360 --> 05:23.160
One last slide of the overview is the availability of Intel TDX.

05:23.200 --> 05:29.000
Intel TDX was introduced at the beginning of 2023 with the fourth generation of Intel Xeon

05:29.000 --> 05:35.880
Scalables, but back then, only at four leading cloud service providers you see on the right.

05:35.880 --> 05:40.760
Everybody else buying these CPUs did not have Intel TDX enabled.

05:40.760 --> 05:48.360
Previous at that cloud service providers started already in Q1 2023, and general ability is

05:48.360 --> 05:52.440
supposed to be soon this year.

05:52.440 --> 05:57.520
Intel TDX became generally available with the fifth generation of Xeon Scalables, which

05:57.520 --> 06:03.120
was introduced at the end of last year in December, meaning if you now go to your favorite

06:03.120 --> 06:08.080
hardware vendor, you should be able to get such CPUs or at least soon.

06:08.080 --> 06:10.960
Good.

06:10.960 --> 06:14.920
Now to selected technical details of the technology.

06:15.920 --> 06:22.760
First, the CPU state is kept confidential by managing it in CPU protected memory, and

06:22.760 --> 06:26.000
that's the responsibility of the TDX module.

06:26.000 --> 06:32.600
For example, on a TDX exit, the CPU state is saved by the TDX module in a protected

06:32.600 --> 06:37.000
memory region, and this memory region is encrypted.

06:37.000 --> 06:43.120
And all memory confidentiality and integrity that's provided by Intel TDX is provided by

06:43.120 --> 06:52.000
what we call the TME IM key engine, the total memory encryption, integrity, multi key engine.

06:52.000 --> 06:57.400
And this is used to encrypt all the main memory belonging to a TD to prevent untrusted software

06:57.400 --> 07:00.440
or from observing the TD's memory.

07:00.440 --> 07:07.600
It uses AX XTS 128 bit, and each memory as mentioned before has its own keys.

07:07.600 --> 07:12.840
The memory integrity feature detects TD private memory corruption by software and direct

07:12.840 --> 07:16.400
memory access.

07:16.400 --> 07:22.440
The TDX module is responsible for managing all the keys, but to encrypt the different

07:22.440 --> 07:23.440
keys.

07:23.440 --> 07:27.520
But the TDX module itself still does not have access to the keys.

07:27.520 --> 07:36.440
This is done by the TME IMK hardware that manages the keys, and the TDX module only references

07:36.440 --> 07:37.440
key IDs.

07:38.400 --> 07:43.680
No access at any point to the keys that are actually used for the main memory encryption,

07:43.680 --> 07:45.920
not by any piece of software.

07:45.920 --> 07:52.320
I will skip remote attestation for now, because I will explain details later.

07:52.320 --> 07:55.880
But a bit about IO compatibility.

07:55.880 --> 08:00.880
By default, no direct connection to external devices is possible, because those external

08:00.880 --> 08:02.440
devices are untrusted.

08:03.160 --> 08:08.240
SQIO can be emulated by software, but this has performance overhead.

08:08.240 --> 08:13.120
At the end of the talk, I will talk a bit more about these aspects and how the situation

08:13.120 --> 08:20.400
should be changed or migrated in the future.

08:20.400 --> 08:26.840
With Intel TDX, performance monitoring and debug facilities run inside TTD.

08:26.840 --> 08:32.400
This is a difference compared to Intel SGX, because this means you can debug your application

08:33.360 --> 08:35.480
handling sensitive data.

08:35.480 --> 08:40.320
Because even during debugging, you are protected, you are inside the trust domain.

08:40.320 --> 08:44.760
Sure, the person that does the debugging now has access, but still the infrastructure

08:44.760 --> 08:49.040
provider doesn't see it.

08:49.040 --> 08:54.720
One final aspect here, the page table management happens inside the trust domain now to address

08:54.720 --> 08:55.720
remapping attacks.

08:55.720 --> 08:58.440
This was also different with SGX.

08:58.440 --> 09:04.480
It was responsibility of the operating system, which was untrusted.

09:04.480 --> 09:10.480
A few more details about the TDX module and what we call the secure arbitration mode.

09:10.480 --> 09:15.880
The TDX module is provided by Intel and the code is open source.

09:15.880 --> 09:20.480
Since only two weeks ago or something, it's on GitHub now.

09:20.480 --> 09:26.440
The seam loader verifies the signature of the Intel TDX module when the system boots and

09:26.440 --> 09:31.480
loads it into a special memory region, which we call the seam RR.

09:31.480 --> 09:37.320
Only software in the seam RR itself are able to access other memory in the seam RR.

09:37.320 --> 09:43.240
In fact, hindering everything but the TDX module from doing anything.

09:43.240 --> 09:48.720
All other software access and DMA access to this memory is completely blocked.

09:48.720 --> 09:56.320
The confidentiality and integrity of the seam RR is again protected with AES, XTS,

09:56.320 --> 09:57.320
128 bit.

09:57.320 --> 10:06.720
The Intel TDX module runs in what we call the secure arbitration mode or seam for short.

10:06.720 --> 10:11.280
To be more precise in the seam VMX route mode.

10:11.280 --> 10:14.960
The ISA was extended with introduction of Intel TDX.

10:14.960 --> 10:20.120
The ISA was extended by four instructions to enable the communication between the host,

10:20.120 --> 10:22.920
the hypervisor and the hardware.

10:22.920 --> 10:27.520
These four instructions are seam calls for interactions between the hypervisor and the

10:27.520 --> 10:28.520
TDX module.

10:28.520 --> 10:32.200
So, start the TD, stop the TD, things like that.

10:32.200 --> 10:36.560
Seam read to return the execution control back to the hypervisor.

10:36.560 --> 10:42.640
TD call from a call from the TD to the TDX module and seam ops for calls from the TDX

10:42.640 --> 10:45.360
module to the hardware.

10:45.360 --> 10:51.920
Certain security critical ISA instructions are denied in seam to provide the protection

10:51.920 --> 10:55.360
guarantees we want.

10:55.360 --> 10:59.360
Now to TDX remote attestation.

10:59.360 --> 11:04.840
The TDX remote attestation, you all know that, you all have heard of that in SGX or in other

11:04.840 --> 11:07.880
technologies, uses quotes.

11:07.880 --> 11:11.040
Quotes are created by hardware and the quotes are used to prove something.

11:11.040 --> 11:18.960
In this case, the TD can prove four different attributes, at least four attributes with this

11:18.960 --> 11:20.960
quote.

11:21.480 --> 11:25.520
The booted image is exactly as expected.

11:25.520 --> 11:29.360
During the loading of the image, it's measured, so it's hashed and this hash is stored in

11:29.360 --> 11:31.600
what we call the MRTD.

11:31.600 --> 11:34.160
This is part of the quote.

11:34.160 --> 11:39.360
Second, measurements created or extended during runtime.

11:39.360 --> 11:45.720
Intel TDX has what we call runtime measurement registers or RTMRs and they can be extended

11:45.720 --> 11:46.720
at runtime.

11:46.720 --> 11:49.080
It's not done automatically, it's a can.

11:49.200 --> 11:55.960
It's a subtle topic, if you're more interested in that, but that's what we have.

11:55.960 --> 12:01.440
Number three, the TD is executed on an Intel TDX enabled platform.

12:01.440 --> 12:05.760
It's obvious that that's important, so nobody should just be able to simulate that it's

12:05.760 --> 12:08.000
an Intel TDX hardware.

12:08.000 --> 12:12.240
Number four, the Intel TDX platform is fully patched.

12:12.240 --> 12:17.360
As you also know, I assume in the past, there were problems with the different technologies,

12:17.480 --> 12:23.600
loading Intel SX, but then we provide a patch and we have the ability to prove at what patch

12:23.600 --> 12:26.120
level your platform is.

12:26.120 --> 12:31.640
Then it's as it says here in the next line, whoever is dessert or a lying party can look

12:31.640 --> 12:36.400
at the quote and then decide if it trusts the TD or not.

12:36.400 --> 12:41.280
Some might decide even an older patch level is fine, some say only the newest one is fine,

12:41.280 --> 12:46.760
some say MRTDs has to be a certain aspect, RTMRs have to be or don't have to be used,

12:46.760 --> 12:48.160
all that's possible.

12:48.160 --> 12:55.320
A bit more about the process of remote attestation, which should look very, very familiar to people

12:55.320 --> 12:58.960
that have seen the SGX remote attestation.

12:58.960 --> 13:03.600
It all starts with a relying party triggering the trust domain of here, please prove to

13:03.600 --> 13:06.080
me the things I just mentioned.

13:06.080 --> 13:12.680
The TD will reach out to the TDX module and the TDX module will reach out to the hardware.

13:12.680 --> 13:18.640
The hardware will then generate what we call a TD report and this report contains the measurement

13:18.640 --> 13:24.200
I mentioned before, but it also has for example the security version number of the TDX module,

13:24.200 --> 13:28.520
the measurement of the TDX module and the measurements of the TD and all other aspects

13:28.520 --> 13:35.160
that are in the trusted computing base and it's signed by the hardware at this point.

13:35.160 --> 13:42.680
The TD report then is routed back to the TD, back to the hypervisor and then to what

13:42.680 --> 13:45.160
we call the TD quoting enclave.

13:45.160 --> 13:50.120
And as the name enclave already suggests, it's an Intel SGX enclave, right?

13:50.120 --> 13:55.640
So we use Intel SGX for remote attestation of TDX.

13:55.640 --> 14:01.280
The TD quoting enclave checks if the report was signed at the same platform and if that's

14:01.280 --> 14:04.880
the case, it will sign it with the attestation key.

14:04.880 --> 14:09.560
I will come, what this means in a second and why this matters.

14:09.560 --> 14:16.600
But then now we have a TD quote that's signed by the attestation key and this TD quote is

14:16.600 --> 14:22.960
passed back to the relying party who can do quote verification now.

14:22.960 --> 14:27.000
But the important question is what just happened, right?

14:27.000 --> 14:31.960
The TD quote was signed with an attestation key, what does it mean, why should we trust

14:31.960 --> 14:34.120
that, right?

14:34.120 --> 14:40.040
And a key piece I skipped before is that the TD quoting enclave has randomly generated

14:40.040 --> 14:43.600
the attestation key before the process even starts, right?

14:43.600 --> 14:47.640
Without Intel being involved at all, this happens on the platform.

14:47.640 --> 14:49.840
But that still doesn't help much.

14:49.840 --> 14:55.320
But what also happens on start, the so-called provisioning certification enclave that's

14:55.320 --> 15:00.520
also provided by Intel will do local attestation with the TD quoting enclave.

15:00.520 --> 15:02.960
It will see, yes, okay, we run both on the same machine.

15:02.960 --> 15:05.440
It's a TD quoting enclave that I expect.

15:05.440 --> 15:08.240
And it just provided me an attestation key.

15:08.240 --> 15:14.560
And then it will use the provisioning certification key to sign a certificate.

15:14.560 --> 15:20.240
So then we have, as is you on the right side, an attestation key certificate that's signed

15:20.240 --> 15:22.240
by the PCK key.

15:23.160 --> 15:26.560
But again, why does this matter, right?

15:26.560 --> 15:34.680
The important piece now is Intel is able to create PCK certificates that are then rooted

15:34.680 --> 15:36.640
in an Intel CA.

15:36.640 --> 15:39.480
And this ends the trust chain, right?

15:39.480 --> 15:45.320
So the attestation key generated on hardware, but it links back to an Intel CA.

15:45.320 --> 15:49.440
And during quote verification, whoever does it, wherever this is done, can reach out to

15:49.440 --> 15:54.240
what we call the provisioning certification service to get all the collateral that's needed

15:54.240 --> 15:57.480
to check this chain.

15:57.480 --> 15:59.640
That's the process of remote attestation.

15:59.640 --> 16:05.600
And as said before, Intel TDX attestation uses Intel SGX.

16:05.600 --> 16:11.440
All the sets of collateral we had before, PCK certificate, distribution, caching services,

16:11.440 --> 16:14.640
they supported Intel SGX in the Pado in the past only.

16:14.640 --> 16:17.040
Now they support both.

16:17.040 --> 16:21.880
And it also, this also means that as it's required to enable SGX on the machine when

16:21.880 --> 16:25.600
you want to use TDX.

16:25.600 --> 16:29.440
Just quickly, a few words about how you can do the verification, right?

16:29.440 --> 16:31.040
There are basically four options.

16:31.040 --> 16:34.320
You can use a service by the cloud service provider.

16:34.320 --> 16:38.240
You can use a service by the vendor of your application.

16:38.240 --> 16:43.800
You can use potentially the Intel trust authority like an independent software as a service

16:43.800 --> 16:48.720
offering by Intel to do the verification for you, to alleviate the process.

16:48.720 --> 16:54.760
Or you can build it your own with the open source Intel libraries we provide.

16:54.760 --> 17:01.720
A few pieces of differentiation between the services, if you want to have a separation

17:01.720 --> 17:06.440
of responsibility between the infrastructure provider and the verification party, then

17:06.440 --> 17:09.520
you should not use the cloud service provider, obviously.

17:09.520 --> 17:12.040
But in all the other cases, it's fine.

17:12.040 --> 17:16.480
If you want to have consistency, if you want to support SGX and TDX, then it's up to the

17:16.480 --> 17:22.040
cloud service provider and the application provider if they supported our variance, definitely

17:22.040 --> 17:23.840
supported.

17:23.840 --> 17:28.640
If you want to have consistencies across your applications, across the environment you have

17:28.640 --> 17:34.320
on-prem hybrid, whatever, then obviously cloud service providers cannot be used, the application

17:34.320 --> 17:39.800
vendor potentially, and the others will do it.

17:39.800 --> 17:45.840
From a development perspective, it's low in the first three cases and I would say medium

17:45.840 --> 17:48.960
in the last case.

17:48.960 --> 17:55.720
So quickly, very quickly, two upcoming features of Intel TDXO that we have at least a little

17:55.720 --> 17:58.880
bit time for Q&A.

17:58.880 --> 17:59.880
First TD migration.

17:59.880 --> 18:06.120
TD migration will allow to live migrate one TD from one platform to another.

18:06.120 --> 18:10.760
It uses a service TD called the migration TD to do that.

18:10.760 --> 18:13.440
All the data is obviously encrypted.

18:13.440 --> 18:16.640
Just skipping a few details now, everything is encrypted.

18:16.640 --> 18:19.960
Everything will go over step by step, a short break.

18:19.960 --> 18:24.160
One TD on the left side goes down, the one on the right side goes up, which guarantees

18:24.160 --> 18:27.040
that a TD lives only once at a time.

18:27.040 --> 18:31.320
You should not have two different TDs with the same content.

18:31.320 --> 18:34.520
And one last feature, Intel TDX Connect.

18:34.520 --> 18:36.360
I mentioned that before.

18:36.360 --> 18:42.760
So it's a bit problematic at the moment to connect trust domains with a device.

18:42.760 --> 18:48.160
It is possible, but what's needed at the moment is the trust domain, like everything

18:48.160 --> 18:50.880
in the private memory of the trust domain is encrypted.

18:50.880 --> 18:55.360
But it can't directly, so it can write to shared memory, right?

18:55.360 --> 18:57.560
That's what it can, but it can't, no.

18:57.560 --> 18:59.880
It can't directly write to device.

18:59.880 --> 19:04.480
What it only can do is put data on a shared memory and the device can take the data from

19:04.480 --> 19:05.480
a shared memory, right?

19:05.480 --> 19:07.320
What we call a bounce buffer.

19:07.320 --> 19:09.320
So this is a bit slow.

19:09.320 --> 19:11.720
Still, it can be done securely, right?

19:11.720 --> 19:18.080
If a secure session key is established between device and trust domain, the data can be encrypted,

19:18.080 --> 19:22.040
put there, read in the device, and it's encrypted.

19:22.040 --> 19:24.760
So even today, this solution is there.

19:24.760 --> 19:29.920
Like you can connect an Intel TDX trust domain to an NVIDIA GPU with their confidential computing

19:29.920 --> 19:32.800
technology, have it end to end secure.

19:32.800 --> 19:33.800
That's possible.

19:33.800 --> 19:39.320
But it's a bit slow, or it has a bit of overhead because of this bounce buffer stuff.

19:39.320 --> 19:42.800
And this will change when Intel TDX comes along.

19:42.800 --> 19:49.200
Because with Intel TDX Connect, the idea is that a trusted device is put in, let's say,

19:49.200 --> 19:51.320
the trust zone of a trust domain.

19:51.320 --> 19:55.680
They're able to write into each other's memory directly after they trust each other, which

19:55.680 --> 20:02.840
will make the whole thing more efficient and has low overhead.

20:02.840 --> 20:06.560
This is just nothing I mentioned today is any secret, right?

20:06.560 --> 20:09.480
All of that is open here on this page.

20:09.480 --> 20:10.880
We have documentations.

20:10.880 --> 20:11.880
Knock yourself out.

20:11.880 --> 20:16.680
It's like thousands of pages you can read in the PDFs to get all the details you want.

20:16.680 --> 20:22.160
If not, feel free to reach out to me at any point after this talk, at any point later.

20:22.160 --> 20:26.840
If you have interest in, for example, bare metal access to machine, I'm also your guy

20:26.840 --> 20:31.680
for whatever experiments at the University as an organization, whatever, right?

20:31.680 --> 20:34.520
Because at the Cloud Service providers, you normally don't get that, right?

20:34.520 --> 20:35.600
You get a trust domain.

20:35.600 --> 20:36.600
That's it.

20:36.600 --> 20:39.160
Might be enough in many cases, but not in all.

20:39.160 --> 20:43.200
So reach out to me and thank you for your attention.

20:43.200 --> 20:51.920
Can we repeat the questions?

20:51.920 --> 20:53.520
Yeah, so, yeah?

20:53.520 --> 21:11.280
I have to repeat the question.

21:11.280 --> 21:17.400
The question was, is it possible, or I rephrase, correct me if I'm doing a bad job there.

21:17.400 --> 21:20.480
You said, it's possible to run a legacy application in a trust domain.

21:20.480 --> 21:22.480
Yeah, that's what you said.

21:22.480 --> 21:30.840
The question is, how is the integrity of such classes being maintained considering the fact

21:30.840 --> 21:34.480
that this application is legacy doesn't?

21:34.480 --> 21:35.480
Okay, yeah.

21:35.480 --> 21:40.640
So the question was, again, in my words, how is the process then, how is this protected

21:40.640 --> 21:46.320
because the application wasn't written, right, for this environment?

21:46.320 --> 21:50.120
And the answer is, it depends, right?

21:50.120 --> 21:54.560
Meaning you have an in-memory only application, then you don't have to do anything, right?

21:54.560 --> 21:57.200
Because the main memory is encrypted and you're done.

21:57.200 --> 22:01.360
As soon as your application writes to disk, it's a different story, right?

22:01.360 --> 22:05.440
Because if you write to disk plain text data, then it's plain text and everybody will see

22:05.440 --> 22:06.560
it.

22:06.560 --> 22:11.200
One thing you can do is you can either your application encrypts data before, then it

22:11.200 --> 22:13.520
is a change to the application, right?

22:13.520 --> 22:18.440
Or another variant is you activate, for example, full disk encryption in your operating system.

22:18.440 --> 22:19.600
Then you have to manage the key, right?

22:19.600 --> 22:22.680
That's another question then, but that's what you can do.

22:22.680 --> 22:25.520
And exactly the same for network connections, right?

22:25.520 --> 22:28.880
If you, again, send plain text data out, yeah, plain text data is out.

22:28.880 --> 22:34.000
But if you use TLS, you can do it, you just put your TLS endpoint in the trust domain

22:34.000 --> 22:36.000
now and you're good.

22:36.000 --> 22:37.000
Yeah?

22:37.000 --> 22:39.000
Thank you for a very nice talk.

22:39.000 --> 22:46.000
So I had a question about the state software support.

22:46.000 --> 22:51.000
Thank you very much.

22:51.000 --> 22:55.760
So I had a question related to the sort of status on the software support on the guest

22:55.760 --> 22:56.760
side, right?

22:56.760 --> 23:03.080
So with some of these comparable technologies today, you still need kind of some components

23:03.080 --> 23:11.240
in the middle on the guest side, like basically like firmware inside the guest or like Paraviser

23:11.240 --> 23:16.760
functionality that hides some of this communication between the underlying layer.

23:16.760 --> 23:18.840
So how is it with TDX today?

23:18.840 --> 23:21.360
Can you take like a stock Linux kernel and run this?

23:21.360 --> 23:29.480
So you still need some components there which are not yet fully open source?

23:29.480 --> 23:33.560
So at the moment, as I said, briefly before not everything is upstreamed, right?

23:33.560 --> 23:37.560
So it's, I guess, like the basic enabling should be there middle of the year.

23:37.560 --> 23:40.360
So at the moment, it's not there fully.

23:40.360 --> 23:44.080
But what we have is what we call a TDX early preview.

23:44.080 --> 23:51.520
So we collaborate with three operate distribution vendors to provide specific distribution versions.

23:51.520 --> 23:54.640
And that's canonical, Red Hat and SUSE.

23:54.640 --> 23:56.440
And we have all this is online.

23:56.440 --> 24:00.800
You just go to GitHub and it's, I just did it yesterday night, right?

24:00.800 --> 24:06.120
It's really like you start up a Buntu 2310, for example, you clone their repository,

24:06.120 --> 24:08.160
click install, done.

24:08.160 --> 24:11.080
You go to the buyers and activate TDX.

24:11.080 --> 24:14.480
Then there have another script to create a guest image.

24:14.480 --> 24:18.160
I don't just take them like 15 minutes to create, but just of download and all of that

24:18.160 --> 24:19.160
stuff.

24:19.160 --> 24:21.800
You start your trust domain and you're done.

24:21.800 --> 24:23.800
So that's pretty easy already.

24:23.800 --> 24:30.160
Yeah, thank you for the talk.

24:30.160 --> 24:31.680
I have kind of an obvious question.

24:31.680 --> 24:36.600
Is there a latency cost within one trusted domain from memory access given that it's encrypted

24:36.600 --> 24:39.560
and so on?

24:39.560 --> 24:41.560
So performance you mean, right?

24:41.560 --> 24:42.560
Okay.

24:42.560 --> 24:44.360
Yes, obviously it has to be, right?

24:44.360 --> 24:47.120
Infection can't be for free.

24:47.120 --> 24:51.120
But how high the overhead is highly depends on your workload.

24:51.120 --> 24:55.240
If it's a processor only workload, it's basically free.

24:55.240 --> 24:58.320
I don't have concrete numbers, but let's say one, two percent, right?

24:58.320 --> 25:00.080
So really, really low.

25:00.080 --> 25:04.640
If it's really disk IO sensitive, it's a different question, right?

25:04.680 --> 25:08.120
Because of this balance buffer and all of that stuff.

25:08.120 --> 25:13.120
Again, don't nail me on it, but let's say like it might go to 10% or even more, right?

25:13.120 --> 25:15.880
It's really, really dependent on your workload.

25:15.880 --> 25:17.960
I guess I have to stop now, but you can just come to me later, right?

