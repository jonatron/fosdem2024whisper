WEBVTT

00:00.000 --> 00:11.160
Adding a user-sales management brokerage federation to the infrastructure with Keycloak.

00:11.160 --> 00:16.760
Keycloak has been mentioned now and then in the previous talk, it was great to hear.

00:16.760 --> 00:22.640
I'm Alexander Schwartz, I'm just Alex, I'm working at Red Hat for the Keycloak project

00:22.640 --> 00:26.560
full-time and I'm also a maintainer since last year.

00:26.560 --> 00:29.840
I've been using Keycloak for several years.

00:29.840 --> 00:35.240
When I was a back at IT consultant, we were building applications, we were using it as an identity

00:35.240 --> 00:41.120
next-to-management solution and back in the time, a lot of customers did not have Keycloak,

00:41.120 --> 00:46.560
so we brought an application in there and the custom-built one, we put Keycloak next to it

00:46.560 --> 00:51.760
to do the IAM stuff and over time, then we built our applications for them to customers.

00:51.760 --> 00:54.720
They already had Keycloak, so it was great.

00:54.720 --> 00:59.440
Two years ago, I joined Red Hat full-time working on Keycloak.

00:59.440 --> 01:01.760
What do I do at Keycloak?

01:01.760 --> 01:06.680
I'm doing a lot of performance testing, database stuff, also a bit of LDAP.

01:06.680 --> 01:13.440
Keycloak has so much to offer and when I was reading the corporate presentations,

01:13.440 --> 01:19.440
this was then stating about Federation LDAP and I thought, yeah, I could present you this slide today

01:19.440 --> 01:24.240
and this is what I will do, presenting what's already existing in Keycloak

01:24.240 --> 01:28.640
and also some of the things that will arrive in the next version of Keycloak,

01:28.640 --> 01:33.360
like the current version is 23 and the next version is Keycloak 24

01:33.360 --> 01:37.840
and you can already download the things that are shown today in the 90 build of Keycloak.

01:40.080 --> 01:46.400
Right, so yeah, and the agenda that I brought for today is more like a journey that I saw customers

01:47.200 --> 01:51.520
going through when they entering the identity and access management space.

01:51.520 --> 01:54.720
It's like day one is seeing a sign on a school, right?

01:54.720 --> 01:58.240
I need only one password to access all my services, so that's where it all starts.

02:00.240 --> 02:04.400
Day two is, yeah, well, I need to get a bit more flexible because I have maybe

02:05.440 --> 02:10.240
one directory with users, maybe multiple directories of users that I want to integrate,

02:10.240 --> 02:15.920
lots of applications and then day three, yeah, I want to eliminate a daily churn,

02:16.800 --> 02:22.640
like reset of passwords, user self-management and that's especially where the things come in

02:22.640 --> 02:30.320
that we have in Keycloak 24 around user self-registration and declarative user profiles,

02:30.320 --> 02:37.680
what we see there. So why is Singleton on cool? I said, well, users need to remember only one

02:37.680 --> 02:45.840
password, that's, yeah, and then they authenticate only one today. In the morning, usually when they

02:45.840 --> 02:51.760
get to work and then it's, depending on how you configure it, maybe more valid for 24 hours,

02:51.760 --> 02:56.320
for 10 hours, for eight hours, that's the policy of the company and then they can access all these

02:56.320 --> 03:03.040
applications over the day with the credentials they entered. And well, usually a password might

03:03.040 --> 03:09.840
not be enough, so you have a second factor, you have one-time tokens, you may have maybe a mobile

03:09.840 --> 03:16.560
app that generates these small codes, you have file keys, web auth and all that stuff, and maybe

03:16.560 --> 03:21.200
some applications need it, other applications don't need it when you access them, maybe you want to

03:21.200 --> 03:25.920
re-authenticate during the day when you access a special application, so all those things come with

03:26.000 --> 03:34.480
KeyClick. And well, not the last thing, but usually in the middle when you deploy KeyClick to

03:34.480 --> 03:40.320
your organization, you want to theme the front-end, right? It should look like at least the colors,

03:40.320 --> 03:47.920
maybe the logo of your organization, it's to make your users feel at home. It might seem like a small

03:47.920 --> 03:54.640
thing, but it really helps the exceptions of that in an organization. So I say, even if you're deploying

03:54.640 --> 03:59.920
a single application and need an identity nexus management for it, it makes sense to deploy

03:59.920 --> 04:07.040
KeyClick for that, because you then don't need to reinvent it yourself, right? And doing user

04:07.040 --> 04:15.760
management right with all the bells and whistles is not a nice thing. So how does KeyClick work in

04:15.760 --> 04:20.240
the end? Like you have a user with maybe a mobile device, maybe with a regular device, and they

04:20.320 --> 04:24.560
log in with KeyClick, so KeyClick presents a login screen, does the handling of all the second

04:24.560 --> 04:34.800
factors that you come about with, and then the user sends from their browser a token to the services

04:36.240 --> 04:41.680
in the cloud, whatever they are, and the application can then either check the token directly by

04:42.240 --> 04:50.480
inspecting the token's cryptographic signature and the timestamp, or it will send this token,

04:50.480 --> 04:55.280
for example, to KeyClick to figure out who's that user, I want to retrieve some additional

04:55.280 --> 05:02.160
information. This is possible. You might also use that token, I don't know, when you're integrating

05:02.240 --> 05:12.240
other authorization services that then return like OPA or something like this, where they come up with

05:13.280 --> 05:20.320
is this user allowed to access this service or not. So that's the basic setup, and KeyClick,

05:20.320 --> 05:25.200
you can deploy it as a single container connected to a bunch of databases that you

05:25.200 --> 05:32.480
can choose from, be it Postgres, MySQL, Maria, Oracle, MSSQL server, usually, well, as an admin,

05:32.480 --> 05:38.000
you don't, or even as a developer, you don't have a choice, like usually an organization has chosen

05:38.000 --> 05:43.280
a database, they know well how to do backups, how to restore, how to operate them, so we give

05:43.280 --> 05:47.280
you a choice which database to connect to, and then you have KeyClick either deployed as a single

05:48.000 --> 05:53.360
whatever binary container, or you deploy it using an operator with a high availability setup

05:53.840 --> 05:59.440
to the Kubernetes of your choice, to the bare metal of your choice, that's what you do and do.

05:59.440 --> 06:04.320
And well, this is what users then usually see when you don't customize a login stream,

06:04.320 --> 06:10.320
it's a username and password, right? And once I log in, let's see if the demo goes with me,

06:11.120 --> 06:16.880
so I'm logging in here, maybe it's expired, oh it hasn't expired yet, so I get an admin screen here,

06:16.880 --> 06:22.880
so where I can set up clients, basically clients or applications, and have client scopes,

06:23.760 --> 06:27.680
users groups, so all of this and rows somewhere as well, right?

06:29.520 --> 06:36.000
I can configure all these in a web UI and it will, in a very basic installation,

06:36.000 --> 06:40.000
will just start to be in the database of KeyClick, and it will then take care of all that.

06:40.400 --> 06:47.280
So, yeah, that's a simple start, you have your application, it's secured, it's all working well,

06:48.960 --> 06:56.720
but then, yeah, you usually don't start in the green field, that's very rare, so you need to

06:56.720 --> 07:01.360
become a bit more flexible in what you're doing and to integrate with all the existing stuff that's

07:01.360 --> 07:06.560
already in your organization. So for example, there might be one LDAP, there might be many

07:06.560 --> 07:12.000
LDAPs in your organization, I think it tends like whenever there's a merger there might be other

07:12.000 --> 07:16.640
LDAPs joining, other user factories joining that you want to integrate with and there's Kerberos,

07:18.080 --> 07:23.280
so people might be already authenticated on their machines, especially in corporate environments,

07:25.120 --> 07:31.520
there might be some service around in your organization or external to it, but it only

07:31.520 --> 07:36.240
talks summer and your applications want to talk open or disconnect, so it's great to put KeyClick

07:36.240 --> 07:43.680
there in between, there might be also other OpenID Connect things, but then why would you put OpenID

07:43.680 --> 07:50.480
with KeyClick in between? Yeah, well KeyClick can train it to summer or KeyClick can also

07:52.320 --> 07:56.720
give the right tokens to the right application because maybe your this one application is on a

07:56.720 --> 08:02.000
special diet to require that or the other attributes in the right tokens and KeyClick can do that in

08:02.000 --> 08:10.640
the way this application is then finally working. You can also create your own extensions to KeyClick,

08:11.520 --> 08:17.920
so for that you need to get familiarize yourself with a bit of Java and then you can integrate

08:17.920 --> 08:24.720
custom stores, you might have, well it's called legacy usually for a good reason because maybe

08:24.720 --> 08:30.400
the old systems, the customers are known to those systems, they make money, you can't shut them off

08:30.400 --> 08:37.280
and you want to integrate KeyClick with existing user stores, you can do that, you can then connect

08:37.280 --> 08:44.320
it to a database directly, call some rest services, wherever you get these information from and make

08:44.320 --> 08:50.560
it work and also we might hear later today about SCIM integration, all that is then possible by adding

08:50.560 --> 08:57.520
extensions to KeyClick on this area. So we use everything that is already there and integrate

08:57.520 --> 09:03.760
and connect with that, so that's very, I say, essential on your day two things when you say

09:03.760 --> 09:08.080
yes KeyClick is cool, single sign on works, but then you need to integrate with a lot of stuff

09:08.880 --> 09:13.280
and yeah, KeyClick hopefully makes that a lot simpler for you.

09:15.520 --> 09:22.480
All right, so that's, yeah, some diagrams around that, so identity brokering, Kerberos,

09:23.360 --> 09:29.600
Samo, OpenID Connect, you can connect to those and yeah, we can show that in the demo shortly,

09:29.600 --> 09:36.000
well the good thing about Kerberos is you don't have, your user might not see KeyClick at all,

09:37.280 --> 09:42.560
look, well the user tries to actually see the application, the application wants to get an

09:42.560 --> 09:48.960
OpenID Connect token or some Samo token, it forwards the browser to KeyClick, KeyClick will

09:49.840 --> 09:54.640
negotiate with the browser that the user already logged in using Kerberos and then

09:54.640 --> 10:00.000
will not even show the login screen but forward directly to the application back with the right

10:00.000 --> 10:06.240
token so the user can continue, so the user will never see the login screen, so there's Kerberos,

10:07.280 --> 10:12.160
but on the other hand if on that system the user is currently on, Kerberos is not configured

10:12.160 --> 10:16.560
correctly for whatever reason, it will fall back to a login screen and you can use the regular

10:16.560 --> 10:22.320
credentials and then what we see in a second maybe use that credentials and verify these credentials

10:22.320 --> 10:28.960
against an LDOT, so it's yeah, it's like Kerberos but without the Kerberos it works the same way

10:28.960 --> 10:35.920
with the same credentials in the end, we can get all these social logins integrated, so

10:37.040 --> 10:43.120
with those then the user usually has login screen where they pick the right social login provider,

10:43.200 --> 10:48.000
they want to use to authenticate, it might not be the right thing for corporate environments,

10:48.000 --> 10:52.480
but it might be the right thing when you are integrating, well your public

10:53.040 --> 10:57.120
facing website with users coming around that they want to integrate,

10:59.680 --> 11:06.320
yeah and Federation as I said OpenLDOT is their active directory, custom user stores,

11:07.040 --> 11:11.760
you can have none of those when you want to store things only in KeyClick database,

11:12.480 --> 11:17.840
you couldn't have one of those but you can actually have multiple of those as well, so

11:19.760 --> 11:25.280
I wish or I hope for you that you have a simple environment but on the end, on the other side

11:25.280 --> 11:30.560
you can't really choose when you are, I don't know, there's another merger coming around the corner

11:32.640 --> 11:39.440
and or yeah then you might have another directory to integrate or maybe a customer has some users

11:39.440 --> 11:44.720
they want to bring there and you want to integrate as well, so yeah looking at the demo,

11:45.680 --> 11:52.720
so you can identity providers that would be OpenLD Connect, all the social logins that you

11:52.720 --> 12:00.400
want to integrate with here, they're here either custom or predefined with some defaults or some

12:00.400 --> 12:07.600
sensible defaults, user Federation I already configured LDAP here, so LDAP telling you okay

12:07.600 --> 12:12.480
this is, yeah I'm running some patchy directory server here locally on my machine because it was

12:12.480 --> 12:19.040
simple to set up, the usual LDAP I'll say, I can choose if it's a read-only writable or

12:20.240 --> 12:27.360
synchronized, all these things are here and then yeah not all OpenLDOTs are, or sorry,

12:27.360 --> 12:33.280
no not all LDOTs are the same, they need some special configuration seen here,

12:37.600 --> 12:42.480
yeah and you can configure it that it matches the organization, there's usually also some

12:42.480 --> 12:47.840
methods so there are lots of attributes in LDAP that you want to leverage either to put them into

12:47.840 --> 12:53.120
the tokens, that you want to pass on to the applications or that you want to leverage and the

12:53.120 --> 12:58.080
user into endpoint where the application can then carry those if you don't want to put them in the

12:58.080 --> 13:06.160
token, so all these things can be configured here mapped on a per realm, per LDAP connection in the

13:06.640 --> 13:13.280
needed to work, eventually you can also configure it on which application should get what kind of

13:13.280 --> 13:18.400
attribute and what kind of token, yeah but then it's the real world catching up on this,

13:18.400 --> 13:24.160
the simply can make you set up the better you'll be off but on the other hand you need to make it

13:24.160 --> 13:31.280
working with the things you have and I, well we're hoping that we got Keeklog in a way that it's not

13:31.280 --> 13:42.000
standing in your way, so let's go on to day three, a limited turn, so all these repetitive tasks that

13:42.000 --> 13:47.840
you have to do every day when it comes to users, they're well annoying for admins and also annoying

13:47.840 --> 13:55.040
for users, ideally they want to do these things themselves, they don't want to be bound to some

13:55.040 --> 14:04.720
opening hours of IT or so some things, I've shown a minute as users required actions to

14:04.720 --> 14:09.600
basically you can as an admin choose, well as an admin you might have sent out an email please

14:09.600 --> 14:15.760
enable second factor and you sent another email saying please finally enable second factor for

14:15.760 --> 14:20.960
login and then you say well now's the time I go through maybe all of my users or some of my users

14:20.960 --> 14:28.080
let's, on the next login they need to must enable the second factor no matter what, so you can do

14:28.080 --> 14:33.120
that as an admin and you're done because no one will enter your system without a second factor enabled.

14:35.040 --> 14:40.800
Also password recovery, you can add a link to the login screen we will do in a second

14:41.440 --> 14:46.640
that you can do password recovery that you send out an email, click, the user can click on a link

14:46.640 --> 14:52.640
and you will, it works with an external with an external database of key cloak but it will also

14:52.640 --> 14:56.960
work when the user's on an LDAP, it would also work when the user's on an active directory,

14:57.600 --> 15:04.480
also well this kind of bits work when you're using the password recovery mechanisms of key cloak.

15:06.800 --> 15:11.920
Also well in a corporate environment you might not want to self register for people right,

15:11.920 --> 15:16.960
so they probably need to sign a paper contract first but then on the internet on the public

15:16.960 --> 15:21.840
facing side you want the people to self register, again this is something that comes with key cloak.

15:23.920 --> 15:29.520
Also once you're registered you want to maintain the data yourself as a user maybe update your

15:29.520 --> 15:36.080
mailing address, your blog, your social handles whatever all these things should be managed by

15:36.080 --> 15:41.120
the user themselves and key cloak allows you to do that and this is something that

15:41.120 --> 15:46.400
greatly improved over the last releases in key cloak 23, you can enable it as a preview feature

15:46.960 --> 15:53.680
and we are pretty sure that we will have that in the final release of key cloak 24 enabled by default

15:55.040 --> 15:59.360
so that you can really use that in a very good and configurable way.

16:00.000 --> 16:06.400
So yeah and it's great to resolve the need for either phone calls or tickets or chats in nowadays right.

16:08.400 --> 16:15.280
So let's go back to these required actions so there are lots of them so let's maybe have a look here.

16:16.480 --> 16:22.880
So in authentication for each realm I can really decide what I want people to be required when

16:22.880 --> 16:27.520
they log in or to be checked when they log in for example one-time passwords,

16:27.520 --> 16:32.560
maybe you want to have them confirm the terms and conditions, I need updating the password,

16:32.560 --> 16:38.160
update profile, verify email address that we sent out an email with a link people can click on it.

16:38.720 --> 16:46.880
So that's for public facing registration very useful. WebAlhtim is in there, people should be able

16:46.880 --> 16:52.560
to choose their locale, we want to verify them the profile and I can enable those and maybe

16:53.520 --> 17:03.600
also have maybe some policies when and why and then on the realm settings I can, well this is

17:03.600 --> 17:09.440
basically the tab called login which configures the login screen and I say okay from now on user

17:09.440 --> 17:15.440
registration should be enabled right. For good password flow yeah I want to have a link there

17:15.440 --> 17:22.000
where I want to allow that people can reset their passwords and once I do this I can just

17:22.080 --> 17:27.040
when I sign out here now these fields have appeared so for god password link is here

17:27.040 --> 17:32.480
and I'm asked for my username and email address and I have a register button where I can register

17:33.840 --> 17:39.600
with some fields that are here required and if I then log in again and we go for the

17:43.760 --> 17:50.720
user profile, yeah there we are. So this is the configuration where I can say

17:51.200 --> 17:59.520
these are the fields that exist that should exist for both the admin to be edited in the admin UI

18:00.560 --> 18:05.360
they should these are the fields that should exist on the user self registration form

18:05.360 --> 18:08.480
and those are also the fields that are available for user self management.

18:09.440 --> 18:14.720
So basically you can think of this as a form configurator and for each of these fields I can

18:14.720 --> 18:19.760
go in and say okay this is the name to be there's an attribute name like a technical name I can

18:19.760 --> 18:28.000
reference it by later a display name well this is an automatically localized name here but you can

18:28.000 --> 18:33.920
put a simple name in here as well I have attribute groups here so we can group things on the form

18:33.920 --> 18:40.800
for each field I can decide who can edit this either a user or an admin who can view this either

18:40.800 --> 18:46.480
the user or the admin and then can put lots of validations on top of each field about the length

18:46.480 --> 18:52.000
for the username it's the minimum length of three the maximum length of 255 characters for username

18:53.280 --> 19:01.120
I can there some prohibited characters so you should use regular keyboard characters for that

19:01.120 --> 19:06.640
we also don't want to have any homographs in here basically letters looking like real letters

19:06.640 --> 19:11.040
from a Latin alphabet for example but they're actually from a very different alphabet so you

19:11.040 --> 19:16.240
could have like a user registering with a username that looks like an already existing username it

19:16.240 --> 19:23.360
might need to lead to confusion so that's a really sensible good security by default so

19:24.000 --> 19:28.880
and I can add more things here I can also add annotation and saying how should this element

19:28.880 --> 19:36.960
be formatted should it be an input type should it be a helper below and below the input size the columns

19:37.360 --> 19:42.960
I can also reorder those so it's it's basically a form builder and the form builder will be

19:42.960 --> 19:51.760
consistent in all three places user self registration user admin form and or admin form for users and

19:52.400 --> 20:03.360
user self management right so when I go here for example the block so I can I can change it here

20:03.360 --> 20:09.200
with a different display name and once I go to as an let's do that as an admin to manage my own

20:09.200 --> 20:15.200
account then I would see here okay now it's renamed and another field here and I can then choose when

20:15.200 --> 20:21.520
is this shown is it shown is it mandatory on on first login is it maybe mandatory once a month

20:21.520 --> 20:28.720
like it can have maybe a scheduled process that inserts that actions on each login once a month

20:28.800 --> 20:34.960
and then I can see here all these things are then how I configure my login flow and have this

20:34.960 --> 20:44.480
information populated by my users so yeah we saw that we saw that as well right we have this recovery

20:48.080 --> 20:53.120
we have seen the configuration how we can configure those with validations and attributes and all

20:53.200 --> 20:59.120
necessary information and again the three areas where you have the admin we on the left in the

20:59.120 --> 21:04.000
middle the registration screen and on the right the personal information the users can self manage

21:04.640 --> 21:09.120
and all this information is either stored in key cloaks local database or if you then choose to

21:09.120 --> 21:14.320
store it in an external service like LDAP it will be stored in the external service of LDAP

21:14.400 --> 21:25.040
right so that's basically almost the end so while we saw day one singer sign on is cool and it makes

21:25.040 --> 21:30.800
a lot of sense to not reinvent yeah identity and access management even for a single application

21:31.360 --> 21:35.520
database you want to get more flexible and integrate with a lot of existing security

21:35.520 --> 21:42.480
infrastructure in your organization once you are a happy user of key cloak and then day three it

21:42.480 --> 21:47.200
allows you a lot of automation around users when you really want to scale especially when you if

21:47.200 --> 21:54.720
you want to scale with lots of users signing up on the internet and if they want to manage their

21:54.720 --> 22:00.080
stuff on their own and you don't want to get calls from them or emails and stuff

22:02.080 --> 22:08.000
so I brought some links so this is the key cloak homepage please pay the visit we have some docs

22:08.000 --> 22:13.440
on there how to install it the key cloak nightly release I linked it directly so and if you go

22:13.440 --> 22:18.480
there you can download the zip file if and extract it but there's also a docker registry

22:20.240 --> 22:25.600
on kio that you can yeah have a container built ready for that with a nightly release

22:26.800 --> 22:32.240
if you're on github please give us a store there's the key cloak book second edition that

22:32.240 --> 22:36.800
been published last year so if you've been using key clock maybe two or three years ago

22:37.520 --> 22:44.640
you might know that this was based on eap and wi-fi it was now moved to quarkus so some of the

22:44.640 --> 22:49.680
things changed so it might be good to look at this second edition something that is my of my very

22:49.680 --> 22:55.200
personal goals I want to start a key clock hour of code so to get more people into contributing

22:55.200 --> 22:59.440
so I'm planning for maybe once a month maybe every two weeks I think an online session

22:59.680 --> 23:07.520
um to get people familiarized with coding how we do how do we code in key cloak how do you maybe

23:07.520 --> 23:14.080
contribute documentation how do you um yeah how do things work around key cloak and at some point

23:14.080 --> 23:20.000
we also want to bring in community to also review issues helping with triaging those helping if

23:20.000 --> 23:25.200
another community member creates a pull request maybe it also the community joins in and helps

23:26.000 --> 23:31.120
and helps to get that to a material level that we can merge it in so that would get some

23:32.800 --> 23:39.360
some weight from the shoulders of the maintainers that would be great so that's my my thing for

23:39.360 --> 23:46.160
this year I want to try out yeah so that's me so I'm around for the rest of the day so meet me

23:46.160 --> 23:50.640
here meet me in a hallway I also have some stickers of key cloak some postcards if you

23:50.640 --> 23:56.880
want to sell key to your managers or friends or colleagues so send them a foster postcard with

23:56.880 --> 24:09.280
key to it thank you very much all right we might have like two questions or something yeah

24:09.840 --> 24:25.680
and what is the best way to configure key cloak declaratively so um usually want to use the UI to

24:25.680 --> 24:31.920
figure out what's there and how it works and then you can one way is to maybe export the full realm

24:31.920 --> 24:38.080
as a JSON and then re-import it so that's like the full export full import there's also the chance

24:38.160 --> 24:46.160
that you there's a terraform hopefully open tofu compatible key cloak provision mechanism as well

24:46.160 --> 24:54.640
and there's a rest interface so you might use a rest interface to yeah use this API to configure it

24:54.640 --> 24:58.160
and there's a command line interface as well but the command line interface is basically a

24:58.160 --> 25:03.680
wrapper around the rest interface so that you can yeah configure different settings of a given client

25:03.680 --> 25:08.080
or maybe override the client with a new config that kind of way but it then depends on how you

25:08.080 --> 25:16.560
want to do things if you have the chance to um I don't know delete it and re-import it might be

25:16.560 --> 25:23.120
very helpful for test environments or if you're more bound to um incremental like database scheme

25:23.120 --> 25:28.000
immigration style of things that you really want to things like one step at a time and always in

25:28.000 --> 25:33.920
that order and maybe open tofu would take some shortcuts that might not work but you want to

25:33.920 --> 25:38.640
have maybe some migration so it's depending on what you want to do but it's the good news is it's all

25:38.640 --> 25:49.360
automatable. Just one question how key cloak can be beneficial in Linux ecosystem? So how can key cloak

25:49.760 --> 25:59.760
be beneficial in a Linux ecosystem so like if you then logging into you say um with a SSH somewhere

25:59.760 --> 26:06.560
or I haven't seen it this way but it kind of connects very well if you have like for example

26:06.560 --> 26:12.560
Kerberos around so if you have Kerberos I have them on my machine as well when I'm in a corporate

26:12.560 --> 26:40.160
environment that key cloak can leverage that okay maybe then okay to repeat it for the video so

26:40.160 --> 26:48.240
there was a talk on 20 23 on FOSTEM on password list authentication on Linux here at FOSTEM right

26:51.520 --> 26:58.800
okay one note there's a redhead SSO Ansible Collection yeah okay okay yeah so there's also

26:58.800 --> 27:05.360
redhead SSO Ansible Collection that allows you to configure key cloak right yeah the old name well

27:06.320 --> 27:12.800
key cloak is the upstream project it's a CNCF project there's also redhead SSO like the thing that

27:12.800 --> 27:18.800
you get with a subscription from redhead where you find tools that work with that as well and from

27:20.320 --> 27:26.720
end of last year there's no longer redhead SSO but redhead build of key cloak so it's going to be

27:26.720 --> 27:31.360
easier to find in the future so whenever you need so for something for key cloak it will be both the

27:31.360 --> 27:37.680
upstream project and that what of redhead offers for a subscription okay I think this time is up

27:37.680 --> 27:41.360
thank you very much

