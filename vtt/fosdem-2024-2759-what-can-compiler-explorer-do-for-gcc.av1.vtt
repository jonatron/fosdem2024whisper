WEBVTT

00:00.000 --> 00:07.000
In parallel, let's get started here.

00:07.000 --> 00:10.000
Up next we have Mark Boudiaz, if I pronounce it.

00:10.000 --> 00:12.000
Yeah, that's mostly correct.

00:12.000 --> 00:13.000
Yeah, another time.

00:13.000 --> 00:16.000
Even for French people it's complicated.

00:16.000 --> 00:19.000
He also worked on the GCC RAS front end for a bit,

00:19.000 --> 00:23.000
and I think why are that got involved in the got called compiler explorer.

00:23.000 --> 00:28.000
And now he's telling us what the compiler explorer can do for GCC developers.

00:28.000 --> 00:30.000
Yeah, thank you.

00:30.000 --> 00:31.000
So my name is Mark.

00:31.000 --> 00:34.000
I'm a compiler engineer at Hidakor,

00:34.000 --> 00:39.000
and today we'll talk about compiler explorer in the context of GCC.

00:39.000 --> 00:41.000
So what's compiler explorer?

00:41.000 --> 00:45.000
So for people who may not know what the compiler explorer is,

00:45.000 --> 00:48.000
it's a website where you can enter a program in some language,

00:48.000 --> 00:50.000
for example C on the left,

00:50.000 --> 00:56.000
and you can pick one or more compilers and get the corresponding assembly.

00:56.000 --> 01:01.000
So that's the very basic usage.

01:01.000 --> 01:06.000
Compiler explorer was created mostly 10 years ago by Matt Godbold.

01:06.000 --> 01:09.000
So that's why you may know the website as Godbold,

01:09.000 --> 01:13.000
because he was hosting it on his own domain, and it stuck.

01:13.000 --> 01:16.000
So now people are referring it as Godbold.

01:16.000 --> 01:20.000
We are now a team of eight people.

01:20.000 --> 01:26.000
We host like 2,000 compilers, support more like 60 languages.

01:26.000 --> 01:30.000
We have around four million compilation jobs per week,

01:30.000 --> 01:33.000
and thanks to our sponsors and patreons and stuff like that,

01:33.000 --> 01:41.000
we are able to pay the bill every month of around $2,000.

01:41.000 --> 01:43.000
In the interest of time,

01:43.000 --> 01:48.000
I will only showcase a very small subset of what the website can do.

01:48.000 --> 01:52.000
If maybe you should go and check out by yourself and experiment and see

01:52.000 --> 01:56.000
if there's something that you can find useful on the website.

01:56.000 --> 02:02.000
And at the end, I will answer questions and maybe get feedback or future ideas.

02:02.000 --> 02:05.000
So basic use case.

02:05.000 --> 02:08.000
So I'll try with the live site if it works.

02:08.000 --> 02:10.000
It's not too slow.

02:10.000 --> 02:16.000
Okay. So let's say you have a CC file,

02:16.000 --> 02:20.000
then you can add a compiler like this.

02:20.000 --> 02:22.000
So by default, it's TCC.

02:22.000 --> 02:30.000
You can see that the assembly is color coded too much with the user source code on the left.

02:30.000 --> 02:34.000
You can also execute the code.

02:34.000 --> 02:41.000
So for example, here, you can see that the printf is displayed on the bottom.

02:41.000 --> 02:51.000
You can also ask to stop after the assembler and get instead the option view of the object file.

02:51.000 --> 02:55.000
So you can see here that you still have the relocation in the file.

02:55.000 --> 03:04.000
Or you can also ask for a full link for the program.

03:04.000 --> 03:10.000
Yeah, still. And you can see that the relocations are gone and it's resolved.

03:10.000 --> 03:16.000
The last thing that I wanted to show is that you can share this by clicking on share.

03:16.000 --> 03:18.000
You get a link.

03:18.000 --> 03:22.000
And if you send this link to someone and they open it,

03:22.000 --> 03:26.000
they will get the exact same setup and layout.

03:26.000 --> 03:33.000
So it's very useful to share some code, bugs and stuff like that.

03:33.000 --> 03:41.000
The next use case is if you need, for example, multiple files.

03:41.000 --> 03:47.000
So that's the case, for example, in Ada where you have to have different files for the package.

03:47.000 --> 03:57.000
For example, the full package is in the two files named foo.adb and ads.

03:57.000 --> 04:00.000
And we have a main unit called example.

04:00.000 --> 04:05.000
So this unit is using the foo package you can see here.

04:05.000 --> 04:12.000
And you should see I'm also using an input file called input.

04:12.000 --> 04:18.000
So you can also put like text file in it if you need that.

04:18.000 --> 04:22.000
And then you can add as before a compiler.

04:22.000 --> 04:29.000
So it's not compiling because I need Ada22 and you get the same features as before.

04:29.000 --> 04:32.000
So you can execute, get the object files.

04:32.000 --> 04:37.000
You can share the session. Everything works as before.

04:37.000 --> 04:40.000
So that's the very basic use cases.

04:40.000 --> 04:42.000
We support many more features.

04:42.000 --> 04:45.000
You can build your program using CMake.

04:45.000 --> 04:50.000
We have GPU support so you can execute code on actual GPUs.

04:50.000 --> 04:55.000
You can see both the target and the host view of the code.

04:55.000 --> 05:00.000
We have deep views for assembly so you can compare the output of different compilers

05:00.000 --> 05:03.000
or the same compilers with different options.

05:03.000 --> 05:07.000
We support libraries, environments.

05:07.000 --> 05:11.000
There is documentation for some ISA and many more.

05:11.000 --> 05:16.000
So please try it yourself and experiment.

05:17.000 --> 05:27.000
Now the first feature that can be useful for compiler development is the conformance view.

05:27.000 --> 05:34.000
So for example if you have a bug report, so in this case it's from the GCC bugzilla.

05:34.000 --> 05:37.000
It's an internal compiler error.

05:37.000 --> 05:46.000
You can use the conformance view to find when it started regressing.

05:46.000 --> 05:54.000
So you add a conformance view and from there you can add some compilers.

05:54.000 --> 06:00.000
So GCC, PX86, for example trunk.

06:00.000 --> 06:04.000
So you can see this is red so there's an error.

06:04.000 --> 06:10.000
If you hover on the right you can see the backtrace so it's an internal compiler error.

06:10.000 --> 06:16.000
So from there you can just duplicate and check with a different compiler.

06:16.000 --> 06:20.000
So GCC 13, so still failing.

06:20.000 --> 06:25.000
And you can do that for all the compilers.

06:25.000 --> 06:30.000
So I won't do this now because it's short of time.

06:30.000 --> 06:32.000
But...

06:39.000 --> 06:41.000
Okay.

06:44.000 --> 06:48.000
I will skip this one and just use...

06:48.000 --> 06:52.000
So this is local so there's only a subset of compilers but it's fast.

06:52.000 --> 07:00.000
And you can see that you see quickly where the problem started, so around the 13 release.

07:00.000 --> 07:07.000
And the nice part is if you want to modify the code and see if it changes anything,

07:07.000 --> 07:15.000
the view will update itself so you can play around and see if you can have better ideas or things like that.

07:15.000 --> 07:20.000
And again you can share the session and send it to anyone.

07:20.000 --> 07:27.000
Something I used during my day job where I need to test against different compilers or targets or language.

07:27.000 --> 07:36.000
I create empty templates meaning that I simply create the conformance view with the compilers.

07:36.000 --> 07:42.000
I'm interested in for the given target and the language and I leave the code mostly empty.

07:42.000 --> 07:47.000
And whenever I need to test something against C++ for x85 targets,

07:47.000 --> 07:50.000
I click the link, the share link.

07:50.000 --> 07:54.000
This opens up. I copy paste the code and I directly have the result.

07:54.000 --> 07:59.000
I don't have to add the compilers by hand every time.

07:59.000 --> 08:03.000
So that's it for the conformance view.

08:03.000 --> 08:09.000
Very recently, Jeremy in the team added the support for the GIMPAL.

08:09.000 --> 08:14.000
So it means that now you can use GIMPAL as any other language in the compiler explorer.

08:14.000 --> 08:17.000
So maybe that's useful for some of you.

08:17.000 --> 08:24.000
You can just copy paste and use any GCC starting from the nine release.

08:24.000 --> 08:32.000
We also have support for the dumps Dave and Jeremy talked about previously.

08:32.000 --> 08:37.000
So this is C.

08:37.000 --> 08:40.000
I can add the compiler.

08:40.000 --> 08:44.000
Then you can add GCC tree RTL.

08:44.000 --> 08:51.000
And from there, you have access to all the dumps that GCC emits.

08:51.000 --> 08:53.000
Like this.

08:53.000 --> 08:57.000
If you need, you can filter between the tree, IPR, RTL.

08:57.000 --> 09:02.000
And you have access to all the options that you would have from the command line.

09:02.000 --> 09:18.000
And again, if you change something like the optimization, the view should refresh itself.

09:18.000 --> 09:26.000
So believe me, it should work.

09:26.000 --> 09:31.000
And that's for the most used dumps.

09:31.000 --> 09:37.000
But if you have debug dumps from frontends, for example, I've added the one for the ADA.

09:37.000 --> 09:39.000
We cannot support you.

09:39.000 --> 09:40.000
Simply have to ask.

09:40.000 --> 09:44.000
And maybe we can guide you or we can do this ourselves.

09:44.000 --> 09:49.000
So just ask and we'll be happy to help.

09:50.000 --> 09:53.000
Something else we offer are the nightly compilers.

09:53.000 --> 09:58.000
For GCC, we build a subset of supported targets from the GCC master branch.

09:58.000 --> 10:01.000
We also build from different repositories.

10:01.000 --> 10:05.000
For example, the core ball or the Rust one for VikiTub.

10:05.000 --> 10:11.000
We can build the topic branches if you have some that you would like to see on the public website.

10:11.000 --> 10:16.000
Or we can build more complex stuff like the Rusty, Codgen GCC where you need to take Rusty,

10:16.000 --> 10:20.000
build GCC and stuff like that and package and publish it on the website.

10:20.000 --> 10:24.000
So again, ask and maybe we can help.

10:24.000 --> 10:30.000
We provide an API where you have access to the basic feature, mostly compile and execute.

10:30.000 --> 10:37.000
So you can use that from Shell Script to do tests or you can embed this in application, plug-in, IDE.

10:37.000 --> 10:44.000
For example, this is a screenshot from the tool I've done for work using...

10:44.000 --> 10:49.000
I can run against different compiler using filters from the command line so I find it very useful.

10:49.000 --> 10:53.000
So maybe this could be for some help for you.

10:55.000 --> 11:01.000
And the last thing I wanted to mention is how easy it is to create a local instance, private instance.

11:01.000 --> 11:08.000
It's mostly heat clone, make and it will do some NPM magic for you.

11:08.000 --> 11:12.000
And this will bind to local host so that's fine.

11:12.000 --> 11:22.000
You can use it yourself but if you want to do that for a team, multi-user, please, please, you need to take extra care

11:22.000 --> 11:25.000
because this is basically a remote execution as a service.

11:25.000 --> 11:32.000
So you are from the web browser asking people to enter code and click execute and do everything.

11:32.000 --> 11:38.000
So for yourself, easy, for multi-user, not so easy.

11:39.000 --> 11:47.000
And we have ideas of new features we would like to have in the context of GCC.

11:47.000 --> 11:53.000
For example, for Clang, we have a nice view where you have all the optimizer passes

11:53.000 --> 12:00.000
and you can see how each pass is modifying the IR and with a nice div view.

12:00.000 --> 12:03.000
So it would be nice to have the same thing for GCC.

12:03.000 --> 12:09.000
Maybe a better div view where you can do divs on the RTL directly.

12:09.000 --> 12:17.000
Someone has for more Windows Compiler so maybe you have other ideas.

12:17.000 --> 12:19.000
So this is the end.

12:19.000 --> 12:23.000
So again, that's only a very subset of features.

12:23.000 --> 12:26.000
So go and experiment by yourself.

12:26.000 --> 12:31.000
We accept any kind of contribution called feature request, anything.

12:32.000 --> 12:37.000
So thank you and I'll be happy to answer.

12:47.000 --> 12:48.000
So one question.

12:48.000 --> 12:49.000
So one question.

12:49.000 --> 12:50.000
There was one question.

12:50.000 --> 12:53.000
How do you manage security?

12:53.000 --> 12:55.000
I don't.

12:55.000 --> 13:06.000
We have people working on this, mostly Matt Partouf and Austin.

13:06.000 --> 13:09.000
They are doing very complex stuff.

13:09.000 --> 13:13.000
I don't understand because that's really not my domain.

13:13.000 --> 13:16.000
But everything is sandboxed.

13:16.000 --> 13:20.000
The nodes where you are executing are mostly empty.

13:20.000 --> 13:25.000
So even if you exit the sandbox, there's nothing to steal.

13:25.000 --> 13:29.000
And if you crash the machine, we just reboot a new one.

13:29.000 --> 13:33.000
So that's as far as I can give any details.

13:33.000 --> 13:36.000
But you can contact them directly.

13:36.000 --> 13:38.000
They'll be happy to answer that.

13:38.000 --> 13:39.000
Okay.

13:39.000 --> 13:40.000
Thank you.

13:50.000 --> 13:51.000
Thank you.

