WEBVTT

00:00.000 --> 00:13.320
There we go.

00:13.320 --> 00:14.480
I don't know about fun.

00:14.480 --> 00:15.480
We'll see.

00:15.480 --> 00:21.960
So thank you for the introduction.

00:21.960 --> 00:22.960
Hello, everyone.

00:22.960 --> 00:23.960
Nice to see you.

00:23.960 --> 00:29.360
Pretty happy that I can see so many Elixir developers on one place.

00:29.360 --> 00:37.000
I come from Croatia, where I think there is maybe 10 of us, and it's really hard to connect.

00:37.000 --> 00:42.040
So it's really nice to see that the community is growing worldwide.

00:42.040 --> 00:43.040
My name is Andre.

00:43.040 --> 00:44.920
I've been a developer for 11 years.

00:44.920 --> 00:50.080
I've been doing Elixir for the last three, two and a half-ish years.

00:50.080 --> 00:52.760
Previously, I've been a JavaScript developer.

00:52.760 --> 00:56.520
I decided that that's not going to fly anymore, that I need to have a life.

00:56.520 --> 01:00.160
So I switched to Elixir, and things have been going great.

01:00.160 --> 01:05.800
I'm a licensed accountant, building my own accounting software with Phoenix Liveview.

01:05.800 --> 01:06.800
It's going great.

01:06.800 --> 01:11.240
You should use it, Abandon React, use Liveview.

01:11.240 --> 01:12.240
It works for everything.

01:12.240 --> 01:16.640
I'm a vice president of the Croatian Association for Open Systems and Internet.

01:16.640 --> 01:19.320
I had to read that one out.

01:19.320 --> 01:23.160
We are very active in an open-source Croatian community.

01:23.160 --> 01:24.520
We organize an event.

01:24.520 --> 01:25.600
Please come talk to me after.

01:25.600 --> 01:26.600
I have some t-shirts.

01:26.600 --> 01:27.600
I have some stickers.

01:27.600 --> 01:33.120
And in the last slide, there is a coupon code for something percent off of the ticket.

01:33.120 --> 01:37.520
We're also going to try to have Sasha Urech this year there to come and talk.

01:37.520 --> 01:39.960
So if you want to mingle, please do come along.

01:39.960 --> 01:43.320
And I'm a member and the co-organizer of the conference.

01:43.320 --> 01:44.960
Let's start.

01:44.960 --> 01:47.760
So this is our plan today.

01:47.760 --> 01:49.600
We're going to go through the problem.

01:49.600 --> 01:52.560
As we're solving, we're going to fix it, and then we're going to talk why you should

01:52.560 --> 01:57.560
never do that things in Elixir or generally ever.

01:57.560 --> 01:59.320
So everything started.

01:59.320 --> 02:04.680
As things start, I was browsing Hacker News, and there were people doing a PP measuring

02:04.680 --> 02:09.920
context about their uptimes and who had the larger uptime.

02:09.920 --> 02:15.800
I update my servers, so I have a low uptime, but I wanted to be a part of that.

02:15.800 --> 02:16.800
And the idea was born.

02:16.800 --> 02:18.920
I want a fake uptime.

02:18.920 --> 02:19.920
How do you fake uptime?

02:19.920 --> 02:21.280
I didn't Google it.

02:21.720 --> 02:22.520
NTP server.

02:22.520 --> 02:27.600
I will just make the server ping for time, and every time it asks for time, I'll just

02:27.600 --> 02:34.080
downgrade the time, and hopefully it'll catch, and I will have a huge uptime.

02:34.080 --> 02:35.760
That's not how it works.

02:35.760 --> 02:38.560
You need to basically fake a kernel call.

02:38.560 --> 02:44.600
So maybe next year, I'm going to implement kernel modules in Elixir.

02:44.600 --> 02:45.600
It is possible, though.

02:45.600 --> 02:46.600
It is possible.

02:46.600 --> 02:48.120
I have a working proof of concept.

02:48.120 --> 02:51.880
You do, however, need a lower level language to call.

02:51.880 --> 02:54.760
I like solving these kinds of problems.

02:54.760 --> 02:56.760
So it's been super fun.

02:56.760 --> 03:01.400
Ever since I first applied at TopTel for a job, they gave me a task to implement the

03:01.400 --> 03:04.080
DNS server in JS.

03:04.080 --> 03:05.080
That's been super fun.

03:05.080 --> 03:08.520
So I wanted to see how it's done in Elixir.

03:08.520 --> 03:13.040
Spoiler alert, it's a lot easier and simpler and maintainable.

03:13.040 --> 03:15.760
And it's a cool topic to write about and talk about.

03:15.760 --> 03:17.760
This is a previous blog post.

03:17.760 --> 03:23.480
It's been featured in a couple of newsletters, which I'm still not sure why people like this,

03:23.480 --> 03:27.400
but maybe, hey, you share the same affinities as me.

03:27.400 --> 03:32.480
So the hardest thing was to discover the protocol.

03:32.480 --> 03:33.480
What's NTP?

03:33.480 --> 03:37.040
For those of you who might not know, it's a network time protocol.

03:37.040 --> 03:40.080
It is a terrible, oftenly abused protocol.

03:40.080 --> 03:42.600
Some of you might remember a couple of years back.

03:42.600 --> 03:46.480
It was used for a widespread DDoS attack.

03:46.480 --> 03:51.280
But it's one of the easiest ones to implement, so it turned out.

03:51.280 --> 03:54.920
So the first thing we need to do is we need to learn about the protocol.

03:54.920 --> 03:57.200
Now you can go and read RFC, but that's boring.

03:57.200 --> 04:01.440
I don't Google stuff, as it's obvious right now.

04:01.440 --> 04:06.760
So what I did, I just installed the TCP dump, NTP update in a virtual machine.

04:06.760 --> 04:11.680
I started up TCP dump and just updated the time.

04:11.760 --> 04:14.640
And I got the pick up file out.

04:14.640 --> 04:17.960
Now let's see how we read the pick up file.

04:17.960 --> 04:21.280
This is a very important part in implementing a protocol.

04:21.280 --> 04:22.920
So bear with me.

04:22.920 --> 04:25.080
This is how the packet looks like.

04:25.080 --> 04:29.200
If you love your life, unlike me, you'll probably use Wireshark.

04:29.200 --> 04:30.200
So it looks better.

04:30.200 --> 04:34.560
It's easier to browse, but this was also more fun.

04:34.560 --> 04:37.480
So let's get right into it.

04:37.480 --> 04:40.920
The first part, I've put up dots we should ignore it.

04:40.920 --> 04:43.640
That's the header of the UDP packet.

04:43.640 --> 04:46.080
This is something that's getting handled with us.

04:46.080 --> 04:52.240
If you remember the layers of TCP, the same thing applies to UDP as well.

04:52.240 --> 04:55.680
And the first parts are the hardware part, and then there is the network part.

04:55.680 --> 04:59.160
We can all ignore that, that will be handled for us by Elixir.

04:59.160 --> 05:01.920
So I just put dots in order not to confuse us.

05:03.120 --> 05:05.800
Everything else is super confusing anyways.

05:05.800 --> 05:09.160
So the first part, I'm just going to do this once.

05:09.200 --> 05:12.880
This is how you read the bytes.

05:12.880 --> 05:16.160
So this E3, you should convert to binary.

05:16.160 --> 05:18.600
And here we have something that we call flags.

05:18.600 --> 05:20.200
Here we have three flags.

05:20.200 --> 05:24.560
Those flags is something that you define as a protocol developer, or

05:24.560 --> 05:30.600
as whatever is the name of people defining protocols.

05:32.200 --> 05:35.000
So it's composed, this flag, this is three flags.

05:35.000 --> 05:37.480
So the first one is the leap here indicator.

05:37.480 --> 05:40.120
This is the NTP version and the packet mode.

05:40.120 --> 05:43.000
Now this packet mode is really important and you should remember that.

05:43.000 --> 05:45.520
So 011 is the client.

05:45.520 --> 05:48.200
So this is us asking for the time.

05:48.200 --> 05:50.640
And we will be making a server that responds.

05:50.640 --> 05:54.080
So you need to remember to flip this packet for shadowing.

05:55.880 --> 05:57.680
The next one is the clock stratum.

05:59.880 --> 06:02.000
Not important, we can ignore that.

06:02.000 --> 06:05.240
The pooling interval, this is how many packets will be sent,

06:06.240 --> 06:11.040
which is kind of telling that this kind of starts looking like a TCP,

06:11.040 --> 06:12.680
but whatever, you need to expect three.

06:13.960 --> 06:16.280
Not important, you can ignore that as well.

06:16.280 --> 06:18.320
And now we have a couple of flags.

06:18.320 --> 06:22.040
So we have the clock precision, the delay and dispersion.

06:22.040 --> 06:27.000
This is, since this is a VM, it doesn't look that all interesting.

06:27.000 --> 06:30.080
It's basically all zeros because it's lying about the time anyways.

06:30.080 --> 06:32.520
If you ran this on your computers and real laptops,

06:32.520 --> 06:34.840
you will see more details here.

06:36.240 --> 06:40.400
I've written some copious notes on that.

06:40.400 --> 06:45.800
So later go to this link and you will find a lot of links to the RFC and

06:45.800 --> 06:48.400
documentation if you really want to get into it.

06:50.640 --> 06:51.960
So let's continue.

06:51.960 --> 06:56.960
Now comes the more interesting parts, says he and there's all zeros.

06:56.960 --> 06:58.960
The first one is the reference ID.

06:58.960 --> 07:00.280
This is very important.

07:00.280 --> 07:03.120
This is how your server knows who asks for it.

07:03.120 --> 07:03.720
You can ignore it.

07:05.360 --> 07:07.640
The next part is the reference timestamp.

07:07.640 --> 07:12.320
So this is the timestamp we send to get actual time.

07:12.320 --> 07:13.320
Why it's zeros here?

07:13.320 --> 07:14.560
Because this is a client.

07:14.560 --> 07:17.440
The client does not need to tell the server it's time.

07:17.440 --> 07:20.440
You can however, the protocol allows it, but you don't need to.

07:21.600 --> 07:23.720
Next up is the origin timestamp.

07:23.720 --> 07:29.880
This is basically when the call was made or when the call was responded to.

07:29.880 --> 07:31.520
Again, you can send it as a client.

07:31.520 --> 07:33.880
You don't need to as a server, another story.

07:34.880 --> 07:36.960
The next part is the receive timestamp.

07:36.960 --> 07:38.760
This is actually when did we receive.

07:38.760 --> 07:44.120
This is very important for the server to send along because the client will

07:44.120 --> 07:48.920
then do some math between those three timestamps to get the actual timestamp.

07:50.440 --> 07:52.560
And this is the transmit timestamp.

07:52.560 --> 07:55.400
We need to return this as it is.

07:55.400 --> 07:59.600
Also foreshadowing, it took me way too much time to understand why I need to do this.

07:59.600 --> 08:01.600
It would be a lot easier if I read the RFC.

08:02.600 --> 08:05.000
Okay, so this was me at the point.

08:06.600 --> 08:10.880
After, this was after a couple of hours of things just not working, not understanding.

08:10.880 --> 08:12.560
I went through the documentation.

08:12.560 --> 08:17.400
Things started becoming a little more easier to understand.

08:18.600 --> 08:20.000
So let's get back to it.

08:21.040 --> 08:22.960
This is what we need.

08:22.960 --> 08:27.520
We need the reference ID and we need the transmit timestamp.

08:28.520 --> 08:32.520
Reference ID, again, repeating, this is very important to understand,

08:32.520 --> 08:37.280
is how we know to who to return the call to because you should keep some kind of

08:37.280 --> 08:39.680
a hash map or ETS tail or whatever.

08:40.680 --> 08:43.600
And the receive, the transmit timestamp you need to return.

08:43.600 --> 08:48.600
Otherwise, the client will return an error that it does not know how to calculate time

08:48.600 --> 08:50.920
because it diverged too much.

08:50.920 --> 08:52.440
So that's the main point.

08:53.720 --> 08:56.520
Okay, and this is where the fun part starts.

08:57.920 --> 09:03.800
If you ever did this with JavaScript, I should have included that slide.

09:03.800 --> 09:07.000
It's a lot of splitting on binary streams.

09:07.000 --> 09:09.000
It's extremely hard to read.

09:09.000 --> 09:12.400
And with Elixir, this is all that there is to it.

09:12.400 --> 09:14.920
So it's just pattern matching.

09:14.920 --> 09:17.080
And this was mind blowing to me.

09:17.080 --> 09:20.400
I know that Sasha has the whole chapter in his book about pattern matching on

09:20.400 --> 09:25.480
binary, I ignored it, I didn't kind of get it, but this is amazing.

09:25.480 --> 09:26.440
So what this does?

09:26.440 --> 09:28.080
I've decided to ignore the first part.

09:28.080 --> 09:30.080
Where is the mouse?

09:30.080 --> 09:31.480
I decided to ignore the first part.

09:31.480 --> 09:32.600
We don't need it.

09:32.600 --> 09:35.960
And I just ignore 12 bytes, right?

09:35.960 --> 09:39.360
Then we store the next four as the ID.

09:39.360 --> 09:42.520
Then we can ignore the rest 24.

09:42.520 --> 09:46.120
And then we just store the origin timestamp, the 8-1.

09:46.120 --> 09:47.320
That's all you need to do.

09:47.320 --> 09:50.960
When you receive a request, this is how you pattern match.

09:52.240 --> 09:54.920
Now imagine if you're developing your own protocol.

09:54.920 --> 09:59.960
This means that in a single line, you can basically parse the whole request that

09:59.960 --> 10:01.680
came to your server.

10:01.680 --> 10:02.240
Amazing.

10:02.240 --> 10:05.120
To me, this was mind blowing.

10:05.120 --> 10:06.680
I don't see too many mind blows.

10:06.680 --> 10:10.120
You either know this or don't think it's that interesting.

10:10.120 --> 10:10.680
But okay.

10:12.480 --> 10:18.520
So, and now we need to compile our response.

10:18.520 --> 10:22.000
We'll come to actual Elixir code in a second, don't worry.

10:22.960 --> 10:29.120
So, as you can see, we start with the receive timestamp as is.

10:29.120 --> 10:34.080
And now I've cheated here and you will see that I replied with the same two timestamps

10:34.080 --> 10:37.520
because I don't care about precision for this exercise.

10:37.520 --> 10:42.160
At this point, it was to me, it started becoming very obvious that whatever I returned,

10:42.160 --> 10:45.160
the uptime is not changing.

10:45.160 --> 10:50.760
So the level of this being fun started degrading rapidly.

10:50.760 --> 10:56.240
The only thing that was keeping me alive and to finish this little project was maybe I

10:56.240 --> 10:57.840
can get a blog post out of this.

10:57.840 --> 10:59.040
I don't know.

10:59.040 --> 11:00.640
Maybe some clout.

11:00.640 --> 11:03.280
So I stopped kind of caring.

11:03.280 --> 11:10.400
But yes, you should basically pull data from like a real clock source, like an atomic clock,

11:10.400 --> 11:15.320
a GPS clock, which is also kind of a fun thing to do because you can get an AliExpress

11:15.320 --> 11:21.560
those very cheap GPS USB modules, which are very easy to talk to and you can pull actual

11:21.560 --> 11:22.960
time from there.

11:22.960 --> 11:25.160
And it gives you the clock stratum.

11:25.160 --> 11:27.600
It gives you the precision and you can just dump it into it.

11:27.600 --> 11:35.840
So it is actually viable to create such a server in a language that I don't think it's

11:35.840 --> 11:36.840
best used for.

11:36.840 --> 11:38.240
But there we go.

11:38.240 --> 11:43.800
So we need to set again the reference, the origin and the receive timestamps now.

11:43.800 --> 11:49.640
The ID you will see later is basically the ID you respond with.

11:49.640 --> 11:58.440
Good practice started becoming just use your public IP as an ID because many NTP servers

11:58.440 --> 12:00.600
don't change their IPs at all.

12:00.600 --> 12:03.080
So it is a good idea to use it.

12:03.080 --> 12:04.800
It's not in the protocol, however.

12:04.800 --> 12:06.680
So you can do whatever you want.

12:06.680 --> 12:10.120
You can put Andre school there.

12:10.120 --> 12:15.600
And now let's create the actual UDP server in Elixir.

12:15.600 --> 12:18.680
By the way, it needs to run the port 123.

12:18.680 --> 12:19.880
I thought this was a joke.

12:19.880 --> 12:21.120
No, it's not.

12:21.120 --> 12:23.080
Pretty cool.

12:23.080 --> 12:28.240
So this can be done a lot better as I've learned later.

12:28.240 --> 12:32.200
But for posterity's sake, I decided to just continue on.

12:32.200 --> 12:36.920
If you use active false in this first line, you don't need to do a whole bunch of slides

12:36.920 --> 12:37.920
after.

12:38.040 --> 12:42.760
When I rewrote the slides after a meetup in Zagreb and I used active false, the whole

12:42.760 --> 12:45.560
presentation was kind of lacking for content.

12:45.560 --> 12:50.440
So I just left it in and decided, yes, we will do slides.

12:50.440 --> 12:51.440
And that's it.

12:51.440 --> 12:53.120
So let's use it.

12:53.120 --> 12:55.520
It's extremely simple to use.

12:55.520 --> 12:57.520
This will receive only one packet.

12:57.520 --> 13:01.560
If you put it active false, active true, it will receive many packets, whatever.

13:01.560 --> 13:06.320
So you need to open up a gen UDP server.

13:06.320 --> 13:07.920
You have the socket.

13:07.920 --> 13:13.760
What you then do is you can just pattern match on what you receive.

13:13.760 --> 13:16.920
We are mostly interested in the first part, like a real developer.

13:16.920 --> 13:20.000
I just ignore the errors and the closed states, whatever.

13:20.000 --> 13:21.880
Nobody cares about those anyways.

13:21.880 --> 13:25.840
And with the gen UDP send, you can send whatever.

13:25.840 --> 13:28.960
You can send strings even.

13:28.960 --> 13:29.960
That's it.

13:30.640 --> 13:34.520
This was also pretty mind blowing as an XJS developer.

13:34.520 --> 13:41.720
Just those condensed free lines in total is the whole UDP server.

13:41.720 --> 13:42.720
What?

13:42.720 --> 13:49.360
Just like a little side note, when I started learning Elixir, I was then, after JavaScript,

13:49.360 --> 13:54.440
I was a Python developer and a friend got me into learning Elixir.

13:54.440 --> 13:58.240
And one of my first revelations was, why was I writing so much code?

13:58.240 --> 13:59.840
I don't get it.

13:59.880 --> 14:04.640
So yes, this is all that there is to it.

14:04.640 --> 14:07.160
Let's create just like a simple server out of it.

14:07.160 --> 14:11.000
The first approach is, yes, let's just imitate something.

14:11.000 --> 14:13.400
So we have the init.

14:13.400 --> 14:16.240
And we'll just have a loop here.

14:16.240 --> 14:23.000
I forgot to call the actual loop, so don't forget to call the actual loop.

14:23.000 --> 14:28.160
So what this will do, just in a recursive fashion, every time it receives a packet, it

14:28.160 --> 14:29.760
will call itself again.

14:29.760 --> 14:30.760
That's it.

14:30.760 --> 14:37.600
To astound it a few here, this might look like a gen server, maybe.

14:37.600 --> 14:44.480
Yes, well, like everything in my life, I reinvented hot water, how we say in Croatian.

14:44.480 --> 14:47.720
So yes, let's make it into an actual gen server.

14:47.720 --> 14:48.840
So it's pretty simple.

14:48.840 --> 14:53.520
You can just use continue loop and have a handle continue.

14:53.520 --> 14:54.520
That's it.

14:54.520 --> 15:00.600
And don't forget to also include this part here, so you can actually start the gen server.

15:00.600 --> 15:06.840
In your supervision tree, in your application, for newbies in Elixir on the blog post, there

15:06.840 --> 15:16.080
is also a huge part how to start a new Elixir project that's not a Phoenix with the supervisor

15:16.080 --> 15:17.360
tree already set up.

15:17.360 --> 15:19.920
So you can go look at that.

15:19.920 --> 15:24.720
But if you have it set up, all you need to do is just include this child here and it'll

15:24.720 --> 15:29.280
get started and start working.

15:29.280 --> 15:32.960
And all that is super cool and fun, but where is the actual protocol?

15:32.960 --> 15:36.040
Where is the actual meat of the presentation?

15:36.040 --> 15:42.760
Well, it's also in the spirit of Elixir extremely simple.

15:42.760 --> 15:47.920
So we have one function here called generate NTP response.

15:47.920 --> 15:51.000
And you remember that pattern matching that I was raving on about?

15:51.000 --> 15:53.200
Well, I ignore everything, basically.

15:53.200 --> 15:58.240
I started and I just used the origin timestamp so I can do it in the function head as simple

15:58.240 --> 16:00.040
as this.

16:00.040 --> 16:05.880
We take the system time, which is the most precise way of getting time in the world.

16:05.880 --> 16:08.000
So everybody knows that.

16:08.000 --> 16:11.840
We store that as a receive timestamp.

16:11.840 --> 16:14.640
Doing a little bit of, thank you.

16:14.640 --> 16:15.640
I'll speed up.

16:15.960 --> 16:21.480
So I'm doing a little bit of code here to make it a bit more easier to read.

16:21.480 --> 16:22.480
Remember this sigil.

16:22.480 --> 16:25.480
If I'll have time, I'll show you how to implement your own sigils.

16:25.480 --> 16:27.800
Never do that again as well.

16:27.800 --> 16:29.840
But yes, this is way easier to read.

16:29.840 --> 16:31.880
So you just set up the header.

16:31.880 --> 16:33.680
Trust me, this is how you do it.

16:33.680 --> 16:35.480
Don't read too much into it.

16:35.480 --> 16:40.720
The ID is the private IP of that VM.

16:40.720 --> 16:43.280
And now comes the fun part.

16:43.280 --> 16:47.200
You can concatenate bit strings like anything else in the lixir.

16:47.200 --> 16:51.280
So this is how you do it.

16:51.280 --> 16:53.640
This NTP constant is really important.

16:53.640 --> 16:55.200
I have no idea what it is.

16:55.200 --> 16:56.680
I read the documentation.

16:56.680 --> 17:00.560
This is how you convert time vice versa.

17:00.560 --> 17:01.560
Why they need it?

17:01.560 --> 17:02.560
I don't understand.

17:02.560 --> 17:03.560
I'm very bad at math.

17:03.560 --> 17:06.400
So if somebody else knows it, please come and talk to me.

17:06.400 --> 17:07.900
Enlighten me.

17:07.900 --> 17:13.220
And again, you just compile the end result in a bit string.

17:13.220 --> 17:17.780
You return that instead of that hello world before that's it.

17:17.780 --> 17:21.140
So you can just generate NTP response from the request.

17:21.140 --> 17:22.540
You get the packet.

17:22.540 --> 17:24.300
You reply with it.

17:24.300 --> 17:25.300
Ta-da.

17:25.300 --> 17:26.860
There we go.

17:26.860 --> 17:29.300
All of this code, if you want to play around.

17:29.300 --> 17:34.380
And if you found mistakes, then you can go there and complain and do pull requests for

17:34.380 --> 17:36.220
a project that doesn't matter.

17:36.220 --> 17:41.220
But I would be more than happy to see what you guys think and what you feel about this.

17:41.220 --> 17:43.900
So come and see it.

17:43.900 --> 17:45.460
I still have a bit of more time.

17:45.460 --> 17:51.900
So let's implement the custom sigil and show how, again, how I should read more documentation.

17:51.900 --> 17:59.220
So let's create the sigil with tilde b, or whatever it was, quickly line b.

17:59.220 --> 18:00.940
It's pretty easy to do as well.

18:00.940 --> 18:02.740
You just create a module.

18:02.740 --> 18:07.300
You name it sigil and underscore and whatever letter you want that there to be.

18:07.300 --> 18:11.500
Now you can even do uppercase letter sites, I think, from the newest version of Elixir.

18:11.500 --> 18:14.140
And you can do even more letters than one.

18:14.140 --> 18:15.380
So that's cool.

18:15.380 --> 18:20.140
And you can just import it as is, and then it's available in that module.

18:20.140 --> 18:22.820
Now let's implement the actual parsing.

18:22.820 --> 18:24.500
So this is a string.

18:24.500 --> 18:27.780
And now here comes the me over complicating stuff.

18:27.780 --> 18:29.260
So I uppercase everything.

18:29.260 --> 18:30.980
I split everything.

18:30.980 --> 18:36.580
Then I do some mapping to get rid of multiple lines and whatever.

18:36.580 --> 18:40.380
And then reject empty spaces and then join everything.

18:40.380 --> 18:42.100
And I decode it.

18:42.100 --> 18:43.740
Well, I blame, blame, blame.

18:43.740 --> 18:47.140
You can just replace with a reg accent.

18:47.140 --> 18:48.260
Just decode it.

18:48.260 --> 18:50.300
But this looks way more fun anyways.

18:50.300 --> 18:53.140
Like everybody likes complications.

18:53.140 --> 18:54.940
So yes.

18:54.940 --> 18:56.140
That's it.

18:56.140 --> 19:00.380
A lot of the things I covered here I learned from this amazing book right over here from

19:00.380 --> 19:02.180
my friend Sasha Yurich.

19:02.180 --> 19:06.660
He gave us the 35% off code for the new version of the book.

19:06.660 --> 19:07.660
Go buy it.

19:07.660 --> 19:09.980
Even if you have the old versions support him.

19:09.980 --> 19:14.620
I think he is the foundation of learning Elixir in today's world.

19:14.620 --> 19:17.100
I've had so much fun with this book.

19:17.100 --> 19:19.180
Didn't reference it at all while I was doing this.

19:19.180 --> 19:21.420
I should have, but never mind.

19:21.420 --> 19:23.940
And also here is the coupon code 20% off.

19:23.940 --> 19:30.020
Here is the coupon code for the conference where we will try to also bring everybody

19:30.060 --> 19:31.740
who does Elixir there.

19:31.740 --> 19:35.940
So if you want to do, if you want to come over and hang out, or if you have open source

19:35.940 --> 19:39.060
projects in Elixir, do come talk about it with me.

19:39.060 --> 19:40.060
I have a Gantt T-shirt.

19:40.060 --> 19:41.540
I have some stickers here.

19:41.540 --> 19:43.220
Call for Spickle Flyers.

19:43.220 --> 19:44.220
And that's it.

19:44.220 --> 19:45.220
Thank you very much.

19:45.220 --> 19:46.220
You're welcome.

19:46.220 --> 19:53.220
Thank you.

19:53.220 --> 19:54.220
You're welcome.

