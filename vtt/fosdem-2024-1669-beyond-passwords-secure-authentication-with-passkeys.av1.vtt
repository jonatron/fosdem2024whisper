WEBVTT

00:00.000 --> 00:07.000
Alright, so I had a talk yesterday, you missed it.

00:07.000 --> 00:13.000
So today I'm going to talk not about Passball, the open source password manager, which we

00:13.000 --> 00:18.000
are building with my friend here, Kevin Clayton and Shmouty.

00:18.000 --> 00:24.000
I'm going to talk about Passkeys because I have the chance to participate and be a Fido

00:24.000 --> 00:31.000
Alliance member and sit and participate to the Plenary Conference and CPSIG.

00:31.000 --> 00:36.000
You will see Fido, they love acronyms, so it means Credential Provider Special Interest Group,

00:36.000 --> 00:39.000
so because we are a Credential Provider.

00:39.000 --> 00:45.000
So what is authentication, just so that everybody knows a little bit what we are going to talk about.

00:45.000 --> 00:49.000
Authentication is something you know, or something you have, or something that you are,

00:49.000 --> 00:51.000
like biometric, or something you do.

00:51.000 --> 00:54.000
You can even have like behavior based authentication.

00:54.000 --> 01:01.000
So authentication, these days generally a combination of one or two of these factors.

01:01.000 --> 01:05.000
You know about passwords and password based authentication have a lot of issues,

01:05.000 --> 01:09.000
so you have issues of the user selecting a weak password,

01:09.000 --> 01:17.000
or basically people being able to brute force, or like phishing is a big one,

01:17.000 --> 01:19.000
and you have all sorts of other issues.

01:19.000 --> 01:25.000
Generally you can implement content measure to make sure that basically your authentication is good enough,

01:25.000 --> 01:30.000
but phishing is the one that is really hard to solve because it depends on the user.

01:30.000 --> 01:36.000
So you can solve for example password strength selection by introducing a Credential Manager,

01:36.000 --> 01:41.000
and you can prevent a little bit of the phishing with a Credential Manager,

01:41.000 --> 01:44.000
but you still have some room there.

01:44.000 --> 01:49.000
So who has set up Pasky's as a user in the room?

01:49.000 --> 01:51.000
Well quite a bit of people.

01:51.000 --> 02:00.000
Who has as a developer implemented either Authenticator or like implemented Pasky's authentication on the website?

02:00.000 --> 02:02.000
Yeah, three people.

02:02.000 --> 02:06.000
So we can see here that it's still a new topic.

02:06.000 --> 02:08.000
So what is a Pasky?

02:08.000 --> 02:10.000
You will see that Pasky's mean different things for different people,

02:10.000 --> 02:14.000
so I'm going to try to give you like a 10,000 feet view of Pasky's,

02:14.000 --> 02:20.000
and not like go too deep into the protocols and the options for the protocol or particular implementations,

02:20.000 --> 02:23.000
but just give you like a high level view of the landscape,

02:23.000 --> 02:27.000
something that I would have like when I started working on this because it's like really tentacular

02:27.000 --> 02:30.000
and there's a lot of options and a lot of different views.

02:30.000 --> 02:33.000
So Pasky's the official definition is Pasky's a password replacement.

02:33.000 --> 02:40.000
There are public key, private key pairs that are used for authentication using cryptographic signatures.

02:40.000 --> 02:46.000
So basically you have like a site that gives you something to sign and you sign it and you prove that you're you using an Authenticator.

02:46.000 --> 02:49.000
Pasky's are user credentials that are discoverable,

02:49.000 --> 02:54.000
so it's possible for the browser to know if you have a Pasky for a given website for example.

02:54.000 --> 02:59.000
And because in the browser the JavaScript is served by a website,

02:59.000 --> 03:02.000
it means that the website can also discover whether you have credentials.

03:02.000 --> 03:09.000
So these Pasky's are stored within application or security keys and they may be synced across devices.

03:09.000 --> 03:14.000
So this is the new stuff we've seen in the previous talk that we were talking about device-bound Pasky's,

03:14.000 --> 03:20.000
the Pasky's that are sitting on devices, but they are now a new class of Pasky's that can be synced across devices.

03:20.000 --> 03:26.000
So you can see this is the lay of the land like depending on like who you ask about Pasky's,

03:26.000 --> 03:30.000
they will tell you maybe they are like thinking about device-bound Pasky's,

03:30.000 --> 03:34.000
so Pasky's that are on physical devices or if you ask Google and Apple,

03:34.000 --> 03:41.000
they will talk about sync Pasky's and sync Pasky's are basically keys that can be synced across multiple devices.

03:41.000 --> 03:47.000
So you can for example have them on your laptop and on your phone or you can basically transfer them

03:47.000 --> 03:53.000
or like do an attestation using your phone while you're trying to authenticate on your laptop.

03:53.000 --> 03:58.000
And these Pasky's are supposed to be exportable and transferable,

03:58.000 --> 04:02.000
but in practice they are only transferable within a given ecosystem.

04:02.000 --> 04:08.000
So for example Apple will not let you export Pasky's to Windows for example.

04:08.000 --> 04:13.000
So it's their advertiser's being like you know interoperable,

04:13.000 --> 04:16.000
but because they are not coming from the open source world like we do,

04:16.000 --> 04:19.000
interoperable for them means different things.

04:19.000 --> 04:26.000
So they are also another class of Pasky's which is called up level Pasky's

04:26.000 --> 04:33.000
which generally have lived with the device-bound Pasky's and meaning that they can be used for other things

04:33.000 --> 04:37.000
or you have like additional properties added to them so typically you'll see them in banks.

04:37.000 --> 04:43.000
So for example like a bank application will use Pasky's to sign transactions

04:43.000 --> 04:49.000
or they will use additional signals to unlock a Pasky's something that is not there with a classic authenticator.

04:49.000 --> 04:55.000
For example they will check like you know your location or like your working hours

04:55.000 --> 04:58.000
like you can do all sorts of different signals.

04:58.000 --> 05:03.000
And you can build a custom authenticator so like you can build like the UI that you want.

05:03.000 --> 05:12.000
You don't necessarily have to follow like the OS or like the physical device design.

05:12.000 --> 05:15.000
So there are a lot of different requirements.

05:15.000 --> 05:18.000
We've seen like basically Pasky's means a lot of things.

05:18.000 --> 05:22.000
So like on one side you have like people that are working on the enterprise level.

05:22.000 --> 05:27.000
So people that want hardware keys that are like very strong and you cannot export them.

05:27.000 --> 05:36.000
And on the other side you have Google and Amazon for example they don't really care that it's very,

05:36.000 --> 05:39.000
they want the friction less experience.

05:39.000 --> 05:45.000
So they are ready to trade a little bit of security for usability.

05:45.000 --> 05:50.000
So for example when you're doing a checkout using Amazon they want you to go as fast as possible

05:50.000 --> 05:52.000
through that checkout and pay.

05:52.000 --> 05:56.000
Even if there is a security issue they will be okay to give you back your money.

05:56.000 --> 06:00.000
But if you do that with a bank they are not like having the same mindset.

06:00.000 --> 06:05.000
So on one hand you would have like Pasky's that require certifications.

06:05.000 --> 06:10.000
The banks will check is it the authenticator that I gave you to authenticate.

06:10.000 --> 06:12.000
Is that really your personal device?

06:12.000 --> 06:18.000
And on the other side you basically have like a website like Google that just want to show

06:18.000 --> 06:22.000
like okay you authenticated with the UB key but they don't really care like which one it is.

06:22.000 --> 06:28.000
It's just to present you like okay you have these Pasky's and this is the kind of authenticator that you are using.

06:28.000 --> 06:33.000
And on the enterprise side they will issue for example for like super high security setup

06:33.000 --> 06:37.000
they will issue you like a security token that is just for you.

06:37.000 --> 06:42.000
So you can see that these are some privacy implications.

06:42.000 --> 06:50.000
So for example if everyone was using like a device that is unique for each of us and we log in on each website with this device

06:50.000 --> 06:54.000
you would be able to do cross domain tracking.

06:54.000 --> 06:57.000
So you would be able to see like okay this guy logged there and then he logged there.

06:57.000 --> 07:00.000
And this is a privacy issue obviously.

07:00.000 --> 07:02.000
So on this side you want privacy.

07:02.000 --> 07:07.000
On this side you want basically no privacy because you are in an enterprise setup.

07:07.000 --> 07:12.000
So all of these are like very complex requirements and they are all fitting in the same standard.

07:12.000 --> 07:16.000
So basically like it's a little bit complicated to know like what's going on.

07:16.000 --> 07:23.000
But the common denominator is phishing resistance the fact that the Pasky is domain bound.

07:23.000 --> 07:28.000
So like you have one Pasky for Gmail, one Pasky for AWS.

07:28.000 --> 07:32.000
But you don't reuse the same Pasky twice.

07:32.000 --> 07:35.000
And it's always supporting HTTPS.

07:35.000 --> 07:37.000
They made this choice which is very wise.

07:37.000 --> 07:39.000
It's like no support for HTTP.

07:39.000 --> 07:47.000
So the Fido2 project is a project that works with the Fido Alliance.

07:47.000 --> 07:56.000
Fido Alliance contain like Google, Amazon, Visa, but also like TALES, you know people doing like security devices.

07:56.000 --> 08:02.000
And on the other hand you have like the WebOtent protocol which is managed by the W3C.

08:02.000 --> 08:06.000
So you'll see like basically people working on the Fido Alliance are also part of W3C.

08:06.000 --> 08:11.000
It's the same people, you know for example the person at Google is the same on both projects.

08:11.000 --> 08:14.000
And together this is called the Fido2 project.

08:14.000 --> 08:18.000
So on one side you have W3C that manage the WebOtent protocol.

08:18.000 --> 08:24.000
And on the other side you have Fido Alliance which manage the Ctap which is credential.

08:24.000 --> 08:28.000
Sorry, client to authenticator protocol.

08:28.000 --> 08:32.000
So basically the relying party is the website you're trying to authenticate to.

08:32.000 --> 08:35.000
It uses WebOtent over HTTPS.

08:35.000 --> 08:39.000
Then you have the client which is basically your browser and the JavaScript application that is running in it.

08:39.000 --> 08:41.000
And you have the authenticator.

08:41.000 --> 08:44.000
So authenticator can be the OS platform.

08:44.000 --> 08:50.000
It can be like a device, can be like a UB key, can be anything that is basically Fido approved.

08:50.000 --> 08:54.000
And these days it can even be credential manager.

08:54.000 --> 08:59.000
So it can even be like Bitwarden or Dashlane or OnePassword.

08:59.000 --> 09:08.000
And the interface for client to authenticator is a bit more messy than WebOtent.

09:08.000 --> 09:15.000
Basically you have like it works with Bluetooth, it works with what I call, everybody calls monkey patching.

09:15.000 --> 09:22.000
So basically if you want to integrate in the browser in JavaScript and become an authenticator,

09:22.000 --> 09:29.000
for example as a password manager, you will just hijack the JavaScript API and replace them with what you want.

09:29.000 --> 09:31.000
So that technique is called monkey patching.

09:31.000 --> 09:37.000
It's the only way for a browser extension, for example, to act as an authenticator.

09:37.000 --> 09:52.000
But you have like also proprietary protocols, for example, like when the Google Chrome browser wants to use the Google authenticator,

09:52.000 --> 09:54.000
you know, you don't know what's happening underneath.

09:54.000 --> 09:56.000
They are using their own stuff.

09:56.000 --> 10:01.000
So I hope that's clear and gives you like a high level view of what we're talking about.

10:01.000 --> 10:03.000
So there are two ceremonies.

10:03.000 --> 10:07.000
There is the attestation ceremony, which is the registration.

10:07.000 --> 10:11.000
And there is the assertion ceremony, which is the login.

10:11.000 --> 10:13.000
So there are no other operations.

10:13.000 --> 10:20.000
So for example, you cannot list what are the pass keys available for a given relying party.

10:20.000 --> 10:22.000
You cannot delete pass keys.

10:22.000 --> 10:26.000
These are not part of the protocol and need to be implemented separately.

10:26.000 --> 10:30.000
Like it's not normative.

10:31.000 --> 10:35.000
So we will see that this goes some issues.

10:35.000 --> 10:42.000
So the attestation ceremony, you have the client, which basically post a username.

10:42.000 --> 10:46.000
So this part post a WebOtten attestation option is not normative.

10:46.000 --> 10:48.000
You can do whatever you like.

10:48.000 --> 10:53.000
As long as you send a username, basically the URL doesn't matter.

10:53.000 --> 10:58.000
So it's for the relying party to decide what is the language that it wants to use.

10:58.000 --> 11:00.000
What is the URL?

11:00.000 --> 11:07.000
So recently they introduced WebOtten.wellknown file that you can place on your web server

11:07.000 --> 11:11.000
to basically say like, OK, this is my attestation URL.

11:11.000 --> 11:16.000
Then the relying party reply with the public key credential creation option,

11:16.000 --> 11:21.000
which includes the RP, which basically the ID of the relying party,

11:21.000 --> 11:26.000
the challenge that the user need to sign, and some other options.

11:26.000 --> 11:30.000
Like for example, we've talked in the past, in the previous talk, people were saying,

11:30.000 --> 11:34.000
like, do you check for user presence?

11:34.000 --> 11:36.000
Do people have to enter a pin?

11:36.000 --> 11:39.000
This is basically the moment where the relying party can say like, OK,

11:39.000 --> 11:42.000
I want to use this algorithm and I want to check the user that way.

11:42.000 --> 11:44.000
I will require user presence.

11:44.000 --> 11:46.000
I will require you to do user verification.

11:46.000 --> 11:49.000
And then the client does basically what it wants.

11:49.000 --> 11:56.000
So from that, the client called the navigator credential API.

11:56.000 --> 11:59.000
There is not a WebOtten API.

11:59.000 --> 12:03.000
Basically, we use a JavaScript API, which is the credential API,

12:03.000 --> 12:10.000
which can be used for other things, but it's used mostly for the WebOtten protocol these days.

12:10.000 --> 12:14.000
And then we basically enter a setup protocol or something else.

12:14.000 --> 12:20.000
So either like a proprietary protocol, but here I put setup for, you know,

12:20.000 --> 12:23.000
like clarity because it's the one that is the most defined.

12:23.000 --> 12:27.000
So same, you will send some data about the RP and the user,

12:27.000 --> 12:31.000
and the authenticator will assert the parameters,

12:31.000 --> 12:34.000
see if the crypto operation is supported.

12:34.000 --> 12:37.000
So it's asking to use a particular type of key.

12:37.000 --> 12:39.000
Can I create such keys?

12:39.000 --> 12:41.000
Then collect the user gesture.

12:41.000 --> 12:45.000
So like either enter or enter the pin.

12:45.000 --> 12:48.000
And then generate the credential and generate the signature.

12:48.000 --> 12:52.000
It will return the attestation statement and the authenticator data.

12:52.000 --> 12:57.000
And the client will send this information over to the relying party.

12:57.000 --> 13:01.000
The relying party will assert if the key is valid

13:01.000 --> 13:03.000
and will check the signature.

13:03.000 --> 13:06.000
Is it valid for that particular key?

13:06.000 --> 13:08.000
And it will check if the RP ID is also matching.

13:08.000 --> 13:13.000
So that basically you don't have a client that use another request from another website.

13:13.000 --> 13:18.000
So we keep the property of having a domain bound process.

13:18.000 --> 13:21.000
So the assertion ceremony, I'm not going to detail it again,

13:21.000 --> 13:25.000
but it's pretty much the same thing except you're not like giving the new public key.

13:25.000 --> 13:30.000
You're just signing with a key that is already there on the authenticator.

13:30.000 --> 13:32.000
And then what about account recovery?

13:32.000 --> 13:37.000
So obviously if you lose your device or you lose your passkey,

13:37.000 --> 13:39.000
then what do you do?

13:39.000 --> 13:42.000
So there are two types of account recovery.

13:42.000 --> 13:45.000
There is account recovery for the RP.

13:45.000 --> 13:50.000
So basically the solution to passkey is more passkeys.

13:50.000 --> 13:53.000
So it's good if you have like device bound passkeys

13:53.000 --> 13:55.000
because then you need to buy more devices.

13:55.000 --> 13:58.000
It makes a lot of sense when you're selling devices.

13:58.000 --> 14:01.000
And you can also use passwords.

14:01.000 --> 14:06.000
So generally you have a website like Amazon that will let you have a password

14:06.000 --> 14:10.000
but they will propose you to have passkeys on top.

14:10.000 --> 14:12.000
So basically you will default to passkeys

14:12.000 --> 14:16.000
but you can still use your password for account recovery and magic link.

14:16.000 --> 14:21.000
So basically passkeys are as good as the account recovery mechanism.

14:21.000 --> 14:23.000
So we're kind of back to square one.

14:23.000 --> 14:26.000
Unless you get rid of these methods for account recovery,

14:26.000 --> 14:30.000
you're not like really changing your security posture in my opinion.

14:30.000 --> 14:34.000
And on the authenticator side, it's a little bit more complicated.

14:34.000 --> 14:37.000
So I think Apple recommend you to have several Apple devices.

14:37.000 --> 14:39.000
Makes sense.

14:39.000 --> 14:44.000
And then you can also set recovery contacts.

14:44.000 --> 14:47.000
And you have custom procedures.

14:47.000 --> 14:52.000
So I give you like for example what happens on iCloud if you lose all of your devices.

14:52.000 --> 14:56.000
And it's actually possible to do a recovery for my cloud using all your devices

14:56.000 --> 14:58.000
and it's quite smart.

14:58.000 --> 15:03.000
I'm going to say the problem with we have in open source world is we don't have such a service

15:03.000 --> 15:06.000
that is ubiquitous where people have an account.

15:06.000 --> 15:08.000
So for example if we are Ubuntu and Firefox,

15:08.000 --> 15:15.000
we don't have such infrastructure to exchange such a scroll mechanism.

15:15.000 --> 15:18.000
And that's going to be a challenge I think moving forward.

15:18.000 --> 15:22.000
So how does it look like from an authenticator point of view?

15:22.000 --> 15:25.000
It's a work in progress and there's a lot of change.

15:25.000 --> 15:29.000
So like maybe like by the time I put this slide together, it's already updated.

15:29.000 --> 15:33.000
So this is an example on macOS and Chrome.

15:33.000 --> 15:40.000
And so you will see on Chrome by default Chrome will prompt you to use,

15:40.000 --> 15:45.000
when you click continue it will use the Google Authenticator.

15:45.000 --> 15:48.000
So you have the impression that you're using the OS level authenticator

15:48.000 --> 15:53.000
but you're actually using Google Authenticator.

15:53.000 --> 15:58.000
That is leveraging the API of the OS to provide an experience.

15:58.000 --> 16:02.000
But it's not the Google Authenticator, it's not the Apple Authenticator.

16:02.000 --> 16:07.000
So you can see already it's already kind of sneaky because like if you're using Chrome,

16:07.000 --> 16:12.000
they will prompt you to use the Google Authenticator.

16:12.000 --> 16:14.000
But you have some other options.

16:14.000 --> 16:18.000
For example you can use the phone or a security key.

16:18.000 --> 16:22.000
So basically you see there is more clicks if you want to use something that is not Google.

16:22.000 --> 16:26.000
And then you will scan this or press your security key

16:26.000 --> 16:28.000
and you will have the same result.

16:28.000 --> 16:36.000
So if you can even do like two device ceremony

16:36.000 --> 16:40.000
where basically you scan this QR code and then you will unlock your phone

16:40.000 --> 16:46.000
and the signature will happen and will be exchanging through Bluetooth BLI.

16:46.000 --> 16:52.000
So there is no pairing with the laptop and the phone

16:52.000 --> 16:55.000
and you will be authenticated using that mechanism.

16:55.000 --> 17:00.000
So it's possible for example to use like an authenticator on Android phone

17:00.000 --> 17:05.000
to login on Windows device using this mechanism.

17:05.000 --> 17:12.000
So if you use Firefox, you will start directly using the Apple Authenticator.

17:12.000 --> 17:16.000
And it's the same if you're using Chrome, you'll see like basically if you use that option

17:16.000 --> 17:19.000
that was there on the previous screen, then you switch authenticator.

17:19.000 --> 17:25.000
And for me like I don't expect like people that are not like knowledgeable to understand what's going on.

17:25.000 --> 17:32.000
So and it's the same like depending on like the options that are provided by DRP

17:32.000 --> 17:36.000
you may have like different mileage and different user experience.

17:36.000 --> 17:41.000
So it will be quite confusing I think for the average user.

17:41.000 --> 17:46.000
So it's the same if you want to manage your pass keys, they are like buried.

17:46.000 --> 17:50.000
It's really hard to see like how many pass keys do you have and where they are registered.

17:50.000 --> 17:54.000
Same on iOS, if you want to manage your pass keys you need to go to passwords.

17:54.000 --> 17:59.000
So you need to click on the password to see that it's a pass key.

17:59.000 --> 18:06.000
So pass keys are like okay we've solved the password problem, we can all go home, right?

18:06.000 --> 18:10.000
Like that's it, mission accomplished as George would put it.

18:10.000 --> 18:13.000
But no we still have a lot of issues to solve.

18:13.000 --> 18:19.000
Like we have like the what happened when you lose devices, especially when you don't have like a sync fabric

18:19.000 --> 18:23.000
that is common to different authenticator.

18:23.000 --> 18:30.000
And there is no real work being done on pass key management and review as we have seen.

18:30.000 --> 18:37.000
So for example in the future we've seen with the previous talk with quantum computer coming soon.

18:37.000 --> 18:44.000
We will need to roll out new algorithm, maybe we will need to change algorithm faster than we had in the past.

18:44.000 --> 18:46.000
So we will need to revoke keys.

18:46.000 --> 18:50.000
So in order to revoke keys we will need to design experience where the user understand

18:50.000 --> 18:55.000
okay this key is using an old algorithm that is not supported, you need to create a new pass keys.

18:55.000 --> 19:01.000
So we will need to have a user experience to manage pass keys that is understandable for the average Joe

19:01.000 --> 19:04.000
which is we are very, very far from there.

19:04.000 --> 19:10.000
And it's the same like for developers, I think like for developers to understand all the different options

19:10.000 --> 19:13.000
and what they mean when you're implementing as a RP.

19:13.000 --> 19:19.000
It's quite tentacular and you for example you can't follow the implementation of Google

19:19.000 --> 19:23.000
because Google does not care about user enumeration

19:23.000 --> 19:28.000
because you can already send an email to a Gmail address and it will bounce.

19:28.000 --> 19:36.000
So you already have user enumeration in place so they basically don't implement best practices to prevent user enumeration.

19:36.000 --> 19:39.000
But for you, for your use case maybe it's important.

19:39.000 --> 19:44.000
So like you can't even follow like what the big players are doing, you will need to do your research and find out.

19:44.000 --> 19:49.000
And I think this can lead to some problems down the line and we will need to do a lot more of education

19:49.000 --> 19:52.000
on like what are the security problems around pass keys.

19:53.000 --> 19:57.000
There are some other issues as you've seen like the user experience is quite fragmented

19:57.000 --> 20:01.000
and it will not be the same on different OS and different authenticators.

20:01.000 --> 20:10.000
And there is an entry barrier for authenticators so like one of the few open source projects on the Fido Alliance project

20:10.000 --> 20:15.000
it costs around 50K a year to be in the room when these things are being normed

20:15.000 --> 20:19.000
and so it's basically like a pay to play initiative.

20:19.000 --> 20:27.000
And in my opinion for something that is supposed to replace password but so ubiquitous that's an issue.

20:27.000 --> 20:33.000
So we even have like I think Firefox have a seat at the Fido Alliance but they didn't have the staff last year to be there.

20:33.000 --> 20:36.000
So I think it's an issue.

20:36.000 --> 20:44.000
And there's a lot of proprietary protocol and monkey patching happening and like we need to do much more normalization

20:44.000 --> 20:53.000
and I invite you to get involved to be interested about this because if you don't act on it basically they will make the decisions for you.

20:53.000 --> 20:55.000
That's it.

21:05.000 --> 21:08.000
Do you have five minutes? Yes?

21:09.000 --> 21:11.000
All right. Yes?

21:12.000 --> 21:21.000
The complications that you just mentioned to implement that is also true for somebody let's say a software service that wants to offer pass keys to their users.

21:21.000 --> 21:22.000
Yes.

21:22.000 --> 21:24.000
Do they also have to deal with all this complexity?

21:24.000 --> 21:27.000
Is there maybe a simpler way?

21:27.000 --> 21:28.000
Yes.

21:28.000 --> 21:34.000
So do the RP have to do their homework to understand the issues around pass keys?

21:34.000 --> 21:35.000
Yes.

21:35.000 --> 21:40.000
And they are not like super easy to get.

21:40.000 --> 21:58.000
You know like for example if you let's say you're building like a service like that authenticate people using pass keys but it's like a globalized service for your enterprise and you're doing just one pass key authentication on that domain and then you're switching to another protocol.

21:58.000 --> 22:15.000
Maybe you're using an iFrame and in the case of pass keys you may have issues with UI redressal so you need to basically take care of these issues and these are like you need to read the specs and I think maybe there will be more education and more easy resources

22:15.000 --> 22:21.000
and I think we need like all tools like for developers and like not for them to trip their feet on.

22:21.000 --> 22:41.000
And same like what kind of algorithm you should support like we've seen there is a lot of legacy website like maybe like they start creating keys with a certain algorithm but two, three, four, five years down the line when quantum computing becomes like something that you have to do because the state is telling you you have to do it.

22:41.000 --> 22:45.000
Then you know what happened with these keys you know like.

22:46.000 --> 22:53.000
He said earlier that kind of the relying party can say the use of the present for example.

22:53.000 --> 22:58.000
So how does the relying party know that the client actually should that.

22:58.000 --> 23:01.000
So.

23:01.000 --> 23:08.000
How does the client ensure that the authenticator is doing what the RP is requesting.

23:09.000 --> 23:24.000
I think it depends on the option but most of the options are basically like for example the client can ignore that the user needs to be verified but with the data that will be sent back as part of the assertion you would have.

23:24.000 --> 23:26.000
Okay, what what did the authenticator do?

23:26.000 --> 23:28.000
Did he verify the user or not?

23:28.000 --> 23:31.000
So it will be the RP to verify.

23:31.000 --> 23:37.000
Say to the client I want the user to be verified and when he has the response to say did the user get verified?

23:37.000 --> 23:39.000
Yes or no.

23:39.000 --> 23:47.000
So you say I want this but you need to check if it actually happened when you get the final assertion.

23:47.000 --> 23:48.000
Makes sense?

23:48.000 --> 23:59.000
Yeah but you have a password manager so someone says please make sure that the user is present and you sign the challenge and say oh I didn't say the user is present but you actually like because you can do that.

23:59.000 --> 24:00.000
Yes.

24:00.000 --> 24:04.000
There's no way for the website to know that the password manager is present.

24:04.000 --> 24:08.000
Yeah that's where the Fido certification comes into play.

24:08.000 --> 24:19.000
But it's like nobody wants to be like you know caught off and like say like hey look there you know so it's also like a gentleman agreement that you're gonna respect and do.

24:19.000 --> 24:30.000
But I could I could suspect like that some you know people that are like do it yourself kind of thing they can make their own authenticator that does whatever they like.

24:30.000 --> 24:36.000
But for example a bank may refuse to use an authenticator that is not Fido certified.

24:36.000 --> 24:39.000
So you know depends also on the RP.

24:39.000 --> 24:45.000
Because you assert which service are you using for the station.

24:45.000 --> 24:47.000
When the.

24:47.000 --> 24:48.000
Well often.

24:48.000 --> 24:53.000
So on your response do you know who certified that.

24:53.000 --> 25:07.000
Yes so you have information so it's like in the response do you know do you have information about the author of the cater yes so you have information which is I level which is what they call the a a good which is basically a global you you ID.

25:07.000 --> 25:19.000
That says like you're using like a UB key five but you also have like older version of this way where you have like actual certificate and you have like a signature that you know like.

25:19.000 --> 25:27.000
So this is stored in the MDS of the Fido alliance so if you are like for example a bank and you want to make sure that.

25:27.000 --> 25:31.000
You know it's not somebody pretending to be a UB key.

25:31.000 --> 25:37.000
You can actually see the certificate the route certificate and check against that assertion.

25:37.000 --> 25:50.000
One minute that doesn't make sense so you have you have two level you are one which is like the user agent kind of thing that most are using but you have another one which is like more complex that involves like cryptographic and signatures.

25:51.000 --> 26:00.000
We've seen some examples with the ecosystem and what about the system.

26:00.000 --> 26:05.000
Is there anything like that piece for private.

26:06.000 --> 26:19.000
On the unique system basically like to my knowledge not much is happening I think there is a talk with a GNOME the GNOME team was going to present like what's what's happening on the Linux site but it's way behind in terms of like Microsoft.

26:20.000 --> 26:22.000
Hello Apple.

26:22.000 --> 26:25.000
Kitchen and Google.

26:25.000 --> 26:31.000
I've not seen an open source one like but you have like credentials manager like for example.

26:31.000 --> 26:40.000
Bitwarden or dash lane that are basically can bridge the gap in an ecosystem where there's no OS level support.

26:40.000 --> 26:42.000
Thank you very much.

26:49.000 --> 26:51.000
Thank you.

