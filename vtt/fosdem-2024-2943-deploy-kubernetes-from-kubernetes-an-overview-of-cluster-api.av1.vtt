WEBVTT

00:00.000 --> 00:02.000
You're famous.

00:02.000 --> 00:04.000
Yeah.

00:04.000 --> 00:06.000
That's it.

00:06.000 --> 00:08.000
Close the door behind you.

00:08.000 --> 00:10.000
Okay.

00:10.000 --> 00:12.000
Okay, let's go.

00:12.000 --> 00:14.000
I hope you hear me correctly.

00:14.000 --> 00:16.000
People in the side and in the room and people online.

00:16.000 --> 00:18.000
So, yeah, let's begin.

00:18.000 --> 00:20.000
Okay.

00:20.000 --> 00:22.000
Okay, let's go.

00:22.000 --> 00:24.000
I hope you hear me correctly.

00:24.000 --> 00:26.000
People in the side and in the room and people online.

00:26.000 --> 00:28.000
So, yeah, let's begin.

00:28.000 --> 00:30.000
Thanks for them for having me today

00:30.000 --> 00:32.000
and to talk about cluster API and Kubernetes.

00:32.000 --> 00:34.000
Thanks to you to come here.

00:34.000 --> 00:36.000
That's quite impressive to see the room being fully packed.

00:36.000 --> 00:38.000
Yeah, I hope you will learn things.

00:38.000 --> 00:40.000
I hope you will discover things.

00:40.000 --> 00:42.000
That's the most important.

00:42.000 --> 00:44.000
And you will get some stuff to continue to investigate at home.

00:44.000 --> 00:46.000
So, the goal of this talk

00:46.000 --> 00:48.000
is to give you a brief introduction to cluster API.

00:48.000 --> 00:50.000
To give you a brief introduction to cluster API.

00:50.000 --> 00:52.000
So, yeah, let's begin.

00:52.000 --> 00:54.000
Thanks for having me today

00:54.000 --> 00:56.000
and to talk about cluster API and Kubernetes.

00:56.000 --> 00:58.000
So, yeah, let's begin.

00:58.000 --> 01:00.000
I hope you have a great day.

01:00.000 --> 01:02.000
Thanks for having me.

01:02.000 --> 01:04.000
Thank you.

01:04.000 --> 01:06.000
Thank you.

01:06.000 --> 01:08.000
Thank you very much.

01:08.000 --> 01:10.000
Thank you.

01:10.000 --> 01:12.000
Thank you.

01:12.000 --> 01:14.000
Thank you.

01:14.000 --> 01:16.000
Thank you.

01:16.000 --> 01:18.000
Thank you.

01:18.000 --> 01:20.000
Thank you.

01:20.000 --> 01:22.000
Thank you.

01:22.000 --> 01:24.000
Thank you.

01:24.000 --> 01:26.000
Thanks for joining.

01:26.000 --> 01:28.000
Let me quickly introduce myself.

01:28.000 --> 01:30.000
I work as a flat car engineer

01:30.000 --> 01:32.000
inside Microsoft.

01:32.000 --> 01:34.000
Flat car is an operating system

01:34.000 --> 01:36.000
designed to run container workloads.

01:36.000 --> 01:38.000
If you want to learn more about flat car

01:38.000 --> 01:40.000
you can go at

01:40.000 --> 01:43.000
5.15

01:43.000 --> 01:45.000
see my teammate Thilo talk about flat car.

01:45.000 --> 01:47.000
It's a deep dive introduction.

01:47.000 --> 01:49.000
And it will give you the key elements about this operating system.

01:49.000 --> 01:51.000
But that's not the purpose of this today.

01:51.000 --> 01:53.000
Outside of work

01:53.000 --> 01:58.000
like SRE France, which is a DevOps association

01:58.000 --> 02:00.880
where we organize meetups and conferences in France

02:00.880 --> 02:04.560
and in Paris and in France.

02:04.560 --> 02:06.320
So if you want to talk in a meetup

02:06.320 --> 02:08.360
or if you're interested to organize something,

02:08.360 --> 02:09.200
let me know.

02:10.440 --> 02:12.920
Context, the context is Kubernetes.

02:12.920 --> 02:15.800
Kubernetes is quite the answer to everything today.

02:16.720 --> 02:20.680
So if you want to deploy something small, something big,

02:20.680 --> 02:25.480
there is likely a big chance that you're going to use Kubernetes.

02:25.480 --> 02:30.000
So to me, it becomes a great standard,

02:30.000 --> 02:31.520
I think we can say this term.

02:32.520 --> 02:34.360
So yeah, that's the cool thing with Kubernetes.

02:34.360 --> 02:38.920
You can deploy a small thing and big things and it works.

02:38.920 --> 02:41.280
And it works in the same way if it's a big thing

02:41.280 --> 02:43.040
or if it's small thing.

02:43.040 --> 02:45.400
Something to know about Kubernetes

02:45.400 --> 02:50.080
is that you have two aspects of this technology.

02:50.080 --> 02:51.720
You can consume Kubernetes,

02:51.720 --> 02:54.880
means you deploy your application on it and that's cool.

02:54.880 --> 02:58.800
And you have also to deploy and maintain the Kubernetes cluster.

02:58.800 --> 03:00.760
So you can do both if you want to.

03:00.760 --> 03:03.720
You can do only one aspect of the other.

03:03.720 --> 03:06.600
But today, let's focus on the deploy and maintain

03:06.600 --> 03:09.600
Kubernetes cluster and not how to use Kubernetes cluster.

03:12.840 --> 03:15.640
Two or three weeks ago, I was on Twitter

03:15.640 --> 03:19.320
checking some news, what's going on in the tech industry.

03:19.320 --> 03:26.080
And I've seen a tweet of a person I've met in different conferences.

03:26.080 --> 03:30.640
A tweet about, hey guys, what if I write a book

03:30.640 --> 03:34.280
to describe all the ways to deploy Kubernetes.

03:34.280 --> 03:38.840
So it was an idea like that and he got some traction in the end

03:38.840 --> 03:42.480
about this idea and he started to draft a list

03:42.480 --> 03:45.400
of all the ways to deploy Kubernetes.

03:45.400 --> 03:48.600
So the knee is at the first day of the currently.

03:48.600 --> 03:52.280
So if you want to talk with him about his book or if you want to invest

03:52.280 --> 03:54.560
in his book, it's a great opportunity to meet him.

03:54.560 --> 03:58.000
He has a talk in the Go Dev Room this afternoon.

03:58.000 --> 04:01.040
But we're not talking about Go, we talk about Kubernetes

04:01.040 --> 04:04.320
and the 50 shades of deploying Kubernetes.

04:04.320 --> 04:08.680
So you can use binaries, you can use managed services,

04:08.680 --> 04:13.560
you can use platform, you can use a bunch of ways to deploy Kubernetes.

04:13.560 --> 04:17.960
But today, let's have a look on the line 27 or 26,

04:17.960 --> 04:20.920
something like that, it's the cluster API.

04:20.920 --> 04:26.520
Cluster API, if I quote documentation, it's Kubernetes,

04:26.520 --> 04:30.640
a project focused on providing, you can read.

04:30.640 --> 04:34.480
The most important is the last line, the cluster API project,

04:34.480 --> 04:38.840
use Kubernetes types APIs and patterns to automate cluster life cycle.

04:38.840 --> 04:42.640
In other words, use Kubernetes to deploy Kubernetes.

04:42.640 --> 04:47.280
So that's the cool thing with Kubernetes is you can extend

04:47.280 --> 04:50.920
this technology using CRDs or custom resource definition.

04:50.920 --> 04:55.120
So you can extend the technology and you can leverage,

04:55.120 --> 04:58.040
you can benefit from the reconciliation loop, for example,

04:58.040 --> 05:01.760
the Kubernetes for what you want to do.

05:01.760 --> 05:05.600
It's already available for the basic usage of Kubernetes,

05:05.600 --> 05:09.640
but you have over projects like a cross plane that will leverage

05:09.640 --> 05:16.840
this way of managing the life cycle on the provider side.

05:16.880 --> 05:19.920
So cluster API is this kind of stuff.

05:19.920 --> 05:26.960
So if we take a look on really abstract way of how does it work,

05:26.960 --> 05:27.960
you have two clusters.

05:29.080 --> 05:34.960
On the left, it's the management cluster, this is the pilot of everything.

05:34.960 --> 05:37.800
This is where things happen.

05:37.800 --> 05:42.200
And you have the workload cluster, this is where you run to run your workload.

05:42.200 --> 05:48.200
So your website, your SaaS, whatever, it will run in the workload cluster.

05:48.200 --> 05:51.440
This is what you currently do if you do some Kubernetes cluster.

05:51.440 --> 05:54.080
But before that, we have the management cluster.

05:54.080 --> 05:56.320
So you're going to tell the management cluster,

05:56.320 --> 05:59.240
hey, I need a cluster in these providers,

05:59.240 --> 06:03.960
please deploy everything I need to have to run this Kubernetes cluster.

06:03.960 --> 06:08.400
Because to deploy a Kubernetes cluster, you need networks,

06:08.400 --> 06:09.680
you need security groups,

06:09.680 --> 06:12.400
you need a bunch of things to create on the provider.

06:12.400 --> 06:15.360
Well, the management cluster will take care of that,

06:15.360 --> 06:19.800
and it will deploy things for you, and you don't have to do anything.

06:19.800 --> 06:23.560
So that's the way to see things.

06:23.560 --> 06:29.320
And in this example, my management cluster is running with Kubernetes in Docker, kind.

06:29.320 --> 06:33.840
So this is pretty convenient because I can run my management cluster

06:33.840 --> 06:38.880
on my local laptop, on tiny resource thing,

06:38.880 --> 06:42.560
because I just need to deploy one single control plane.

06:42.560 --> 06:45.120
I don't need to have high availability and stuff like that.

06:45.120 --> 06:48.360
I just want to use the Kubernetes APIs.

06:48.360 --> 06:53.040
And the workload cluster in this case is running on OpenStack just for illustrating.

06:53.040 --> 06:58.000
So as long as you have a network connectivity between those two clusters,

06:58.000 --> 07:00.160
and you have credentials, of course, it will work.

07:00.160 --> 07:05.440
So and you can even decide to migrate the management cluster from one cluster to another,

07:05.440 --> 07:07.040
but that's something else.

07:07.120 --> 07:11.520
That's the key elements to understand and to know

07:11.520 --> 07:15.680
if you want to understand the concept of cluster API.

07:15.680 --> 07:21.080
So this is my kind cluster, so I just have one single control plane running.

07:21.080 --> 07:23.160
That's it. Nothing fancy, nothing to do.

07:23.160 --> 07:27.080
Just kind create cluster, and I have my management cluster.

07:27.080 --> 07:30.840
Nothing to install on it on top of this.

07:30.840 --> 07:33.120
Just a regular Kubernetes cluster.

07:33.120 --> 07:36.120
Really simple.

07:36.120 --> 07:41.840
Now, how can I create things on my cloud provider using cluster API?

07:41.840 --> 07:47.440
Well, for people that already knows Terraform, that already knows cross plane,

07:47.440 --> 07:50.760
all these kind of projects, you know that there is no secret.

07:50.760 --> 07:56.000
You need to know the APIs of the cloud provider to implement them,

07:56.000 --> 07:59.320
to consume them, and to create what we call a contract.

07:59.320 --> 08:04.600
So this is the border between the cluster API logos and the cloud providers.

08:04.600 --> 08:06.760
So you need to teach cluster API.

08:06.760 --> 08:11.800
Okay, so in cluster API, we say that a network, it's this thing.

08:11.800 --> 08:14.960
So a network on GCP will be this thing, on OpenStack,

08:14.960 --> 08:17.600
it will be this thing, and so forth, and so forth.

08:17.600 --> 08:21.680
So yeah, the idea is to teach cluster API how to manipulate and

08:21.680 --> 08:24.680
how to deploy resources on the cloud providers.

08:24.680 --> 08:28.760
And for this, we use what we call a cluster API providers.

08:28.760 --> 08:33.320
So on the Kubernetes SIGS sub project on GitHub repository,

08:33.320 --> 08:36.200
you can see all the various providers supported.

08:36.200 --> 08:40.440
So there is OpenStack, GCP, Public Cloud, on-premise.

08:40.440 --> 08:42.960
So it's a tinker bell on the upper right.

08:42.960 --> 08:46.280
So yeah, you have a bunch of providers and

08:46.280 --> 08:50.480
if you have some knowledge in Go programming,

08:50.480 --> 08:54.680
if you have some knowledge in API consumption and stuff like that,

08:54.680 --> 09:00.080
feel free to start to contribute on this provider because this is

09:00.080 --> 09:05.040
a cool way to start contributing to Kubernetes and Kubernetes ecosystem.

09:06.560 --> 09:09.800
So yeah, that's the idea under the hood, what's going on.

09:13.080 --> 09:15.760
And now I have my management cluster.

09:15.760 --> 09:21.200
I need to create my workload cluster configuration.

09:21.200 --> 09:24.800
So I just use the cluster CTL, cluster Cuddle,

09:24.800 --> 09:31.440
whatever you call it, command to generate this YAML configuration file.

09:31.440 --> 09:36.480
And I just provide a few key elements, the flavor, the Kubernetes version,

09:36.480 --> 09:41.400
how many control plane I want, how many workers I want.

09:41.400 --> 09:44.000
One interesting thing is the flavor.

09:44.000 --> 09:47.000
So cluster API relies on templates.

09:47.000 --> 09:51.720
So these templates are provided by the maintenance of the providers.

09:51.720 --> 09:57.320
So for example, the flat card template will deploy a workload cluster

09:57.320 --> 09:59.280
based on flat card images.

09:59.280 --> 10:03.080
You have some flavor, for example, on the open stack with load balancing,

10:03.080 --> 10:06.400
if you need some load balancing services and stuff like that.

10:06.400 --> 10:12.240
So flavor is a way to customize your deployment of your workload cluster.

10:12.240 --> 10:16.080
You will still have a workload cluster in the end, you get a Kubernetes cluster,

10:16.080 --> 10:19.320
that's fine, but you can decide to customize it.

10:19.320 --> 10:24.400
So this flavor, this variant, are tested using end-to-end testing.

10:24.400 --> 10:27.440
So each time there is a new release of the providers,

10:27.440 --> 10:33.200
you can be sure that it passed the CI, so you can safely update your configuration.

10:34.760 --> 10:40.920
Of course, for clarity, I didn't mention that you need to provide a few more

10:40.920 --> 10:44.800
environment variables to, for example, to provide the credentials.

10:44.800 --> 10:48.760
Of course, cluster API is going to create some things on GCP, on AWS,

10:48.760 --> 10:49.960
on the open stack, whatever.

10:49.960 --> 10:54.880
It needs to get access to this infrastructure, so it needs to get the credentials.

10:54.880 --> 10:58.520
So this is an example of things you can pass, but you can also define which

10:58.520 --> 11:02.920
instance size you want to use for your control plane,

11:02.920 --> 11:05.640
which instance size you want to use for your walkers.

11:05.640 --> 11:11.120
So this is the kind of elements that you need to configure previously calling this command.

11:11.120 --> 11:14.800
But yeah, just for demo purpose, I wanted to show you this command line,

11:14.800 --> 11:18.520
which is the bare minimum to generate the cluster configuration.

11:19.880 --> 11:24.720
And now we have the KAPI quick start.tml file.

11:24.720 --> 11:30.400
We can apply it like any over Kubernetes manifest file.

11:30.400 --> 11:36.960
So KAPI Ctl, KAPI Ctl, apply KAPI quick start.tml.

11:36.960 --> 11:41.840
And it will create, as usual, some resources on my management cluster.

11:41.840 --> 11:46.760
So we can see that there is the cluster definition,

11:46.760 --> 11:48.480
there's machine deployment.

11:48.480 --> 11:50.560
So this is something common to cluster API.

11:50.560 --> 11:56.240
Then we have the open stack specific part.

11:56.240 --> 11:59.440
And this from one provider to the other, of course,

11:59.440 --> 12:01.240
the output will be different.

12:01.240 --> 12:03.960
But that's the idea, you just apply this.

12:03.960 --> 12:07.240
So that's pretty convenient because you have a file.

12:07.240 --> 12:09.640
So you can use this file in a Git repository.

12:09.640 --> 12:11.280
You can use this file in a CI.

12:11.280 --> 12:13.680
You can use this file with whatever you want.

12:13.680 --> 12:17.760
So you have an infrastructure as code in term of cluster API.

12:19.560 --> 12:22.520
Now, if I check on the provider side,

12:22.520 --> 12:26.360
I have some resources that are going to be created by themselves.

12:26.360 --> 12:28.520
Not by themselves, by cluster API.

12:28.520 --> 12:30.840
But you can see that I have some instances.

12:30.840 --> 12:34.320
So I asked for one control plane and three worker nodes.

12:34.320 --> 12:39.040
So we can see that I have four instances between being created.

12:39.040 --> 12:41.880
I have a network, I have security groups,

12:41.880 --> 12:45.360
I have stuff, SSH keys.

12:45.360 --> 12:47.880
So this is for open stack, but once again,

12:47.880 --> 12:50.120
it's the same thing for every provider.

12:50.120 --> 12:52.880
But this is the cool thing about cluster API

12:52.880 --> 12:56.640
is that it does not just deploy a cluster.

12:56.640 --> 12:59.600
It deploys everything to create a cluster.

12:59.600 --> 13:03.600
It's instance, the security groups, the firewall rules,

13:03.600 --> 13:05.400
ingress, egress, whatever you need.

13:06.480 --> 13:08.800
So it works in this way.

13:09.760 --> 13:12.160
When everything is up and running,

13:12.160 --> 13:16.240
you will just get your configuration

13:16.240 --> 13:18.160
that you can inject into Qubectl

13:18.160 --> 13:20.840
and then you have a new cluster ready to be used.

13:21.880 --> 13:25.200
So that's it about open stack.

13:26.600 --> 13:31.520
Now, we can ask yourself what's under the hood

13:31.520 --> 13:33.680
on the operating system side.

13:34.480 --> 13:35.600
I'm a factor engineer.

13:35.600 --> 13:38.000
I work in the operating system field.

13:38.000 --> 13:41.280
So I'm curious to know what's power my nodes.

13:41.280 --> 13:45.840
So with Qubectl, we can inspect the nodes

13:45.840 --> 13:48.800
and see that for example, this one is running Flakar

13:49.720 --> 13:51.760
because I asked for Flakar variant,

13:51.760 --> 13:56.200
but for example, with Flakar, we do not ship QADM.

13:56.200 --> 13:57.800
We do not ship Qubelet service.

13:57.800 --> 13:59.440
We do not ship MISC files.

13:59.440 --> 14:04.240
So how my nodes can start acting like a Kubernetes node.

14:04.240 --> 14:05.720
How things can work.

14:05.720 --> 14:07.880
And on top of that, Flakar is immutable.

14:07.880 --> 14:09.000
There is no package manager.

14:09.000 --> 14:11.800
So there is no way cluster API is going to SSH into that node.

14:11.800 --> 14:14.480
It say, okay, APT install QADM.

14:14.480 --> 14:15.520
No, no, no.

14:15.520 --> 14:17.840
So what's the magic behind?

14:17.840 --> 14:22.000
It's another project called the Image Builder.

14:22.000 --> 14:25.040
So it's on the Kubernetes 6 GitHub repository.

14:25.040 --> 14:27.280
That is the Image Builder project.

14:27.280 --> 14:30.360
So the idea is to take an OS, for example, Ubuntu,

14:31.360 --> 14:33.560
to build it with Pacer.

14:33.560 --> 14:36.920
So nothing new under the sun.

14:36.960 --> 14:40.560
And to inject the QADM, the container runtime,

14:40.560 --> 14:44.800
the MISC files, whatever you need to power Kubernetes nodes.

14:44.800 --> 14:46.920
So it's a three step thing.

14:46.920 --> 14:49.440
You take your OS, you inject the Kubernetes components,

14:49.440 --> 14:53.920
and then you export this new image, this golden image,

14:53.920 --> 14:58.400
like we sometimes call, into your providers of your choice.

14:58.400 --> 15:00.280
Open stack, GCP, AWS.

15:01.400 --> 15:03.640
So you understand that something quite complicated

15:03.640 --> 15:06.200
because in order to use cluster API,

15:06.200 --> 15:08.120
you need to use this kind of image.

15:08.120 --> 15:10.840
So it means I can wait for someone

15:10.840 --> 15:12.720
from the community to build it.

15:12.720 --> 15:14.960
The build of the image is not an issue.

15:14.960 --> 15:16.160
Everyone can build image.

15:16.160 --> 15:18.000
It's more about the storage.

15:18.000 --> 15:20.040
Because storing an image, it's something,

15:20.040 --> 15:24.120
but when you have to store image for each Kubernetes version,

15:24.120 --> 15:27.480
so it's three main versions at each time.

15:27.480 --> 15:29.560
So three Kubernetes version,

15:29.560 --> 15:32.920
then I have to keep the image for each cloud provider

15:32.920 --> 15:35.000
I wanna use, and I have to keep an image

15:35.000 --> 15:37.680
for each different version of Ubuntu.

15:37.680 --> 15:39.760
It can be complicated to store everything

15:39.760 --> 15:44.240
and to have the time and the energy to build these images.

15:45.200 --> 15:49.400
But this is what we currently do with this provider.

15:49.400 --> 15:54.000
So that's, I will not say this is the way to do,

15:54.000 --> 15:56.280
but this is commonly done currently

15:56.280 --> 15:57.480
in the open source world.

15:58.960 --> 16:02.440
So we can think about something, an alternative.

16:02.440 --> 16:05.760
And the truth spirit to me of the open source world

16:05.760 --> 16:06.920
is to have alternative.

16:06.920 --> 16:10.040
So there is no one way or one other way to do things,

16:10.040 --> 16:11.240
there is alternative.

16:11.240 --> 16:14.160
Then you choose which one is the best for you.

16:14.160 --> 16:16.520
So an alternative would be, okay,

16:16.520 --> 16:18.360
I take a Linux based OS, for example,

16:18.360 --> 16:20.040
Ubuntu, Flat Car, whatever.

16:20.040 --> 16:22.720
It's already available on GCP.

16:22.720 --> 16:24.520
It's already available on AWS.

16:24.520 --> 16:27.480
It's already available on Digital Assign Azure.

16:27.480 --> 16:30.920
Because these cloud providers provide these images for you.

16:30.920 --> 16:34.320
So just the vanilla image, a fresh image

16:34.320 --> 16:35.800
is already available.

16:35.800 --> 16:39.240
So what if now we download the Kubernetes components

16:39.240 --> 16:41.640
during the boot of the image?

16:41.640 --> 16:43.680
And in the end, we have the same result.

16:43.680 --> 16:46.000
We have a Linux based OS with the Mixed file,

16:46.000 --> 16:50.000
with the QBGM, everything I need to power my nodes.

16:50.000 --> 16:52.280
So this is something we implemented

16:52.280 --> 16:54.800
on the open stack side.

16:55.680 --> 16:58.680
So you just need to use an over flavor.

16:58.720 --> 17:03.240
It's SystemD CZex, Flat Car dash CZex, sorry.

17:03.240 --> 17:06.240
And it leveraged this new feature of SystemD

17:06.240 --> 17:07.800
called SystemD CZex.

17:07.800 --> 17:10.080
Basically SystemD CZex, it's an image,

17:10.080 --> 17:13.280
raw, squash fs image that you're going to mount

17:13.280 --> 17:15.400
as an overlay on the Linux based system.

17:15.400 --> 17:18.000
And it will bring you new binary files,

17:18.000 --> 17:21.360
new configuration files into your system.

17:21.360 --> 17:23.480
So if you want to have a look to SystemD CZex,

17:23.480 --> 17:27.920
I really encourage you to check this new features

17:27.920 --> 17:30.920
from SystemD and this is what basically

17:30.920 --> 17:32.800
we're going to do with this flavor.

17:32.800 --> 17:35.680
It's during the boot, we're going to download

17:35.680 --> 17:38.800
QBGM SystemD CZex image and everything

17:38.800 --> 17:41.640
will be open running to power my node.

17:44.320 --> 17:47.680
One, just for example, if I SSH on the node,

17:47.680 --> 17:50.760
I can just run SystemD CZex list

17:50.760 --> 17:52.920
and it will give me the output

17:52.920 --> 17:56.360
of Kubernetes image being available.

17:56.360 --> 18:00.200
So what's, what it's cool with this approach

18:00.200 --> 18:02.560
is that you remove the strong bounding

18:02.560 --> 18:06.800
between the Kubernetes version and the image version.

18:06.800 --> 18:09.480
So if you want to update Kubernetes

18:09.480 --> 18:12.280
but you don't want to update your base.OS, you can.

18:12.280 --> 18:13.800
If you want to update your base.OS

18:13.800 --> 18:16.400
but you don't want to update Kubernetes, you can.

18:16.400 --> 18:18.880
Before that, you were supposed to build new images

18:18.880 --> 18:20.120
and stuff like that.

18:20.120 --> 18:22.920
And the cool thing is that SystemD CZex is,

18:22.920 --> 18:25.640
it works in the same way on AWS, on Azure,

18:26.120 --> 18:27.520
on premise, on whatever.

18:27.520 --> 18:30.280
So you have just one configuration

18:30.280 --> 18:32.080
for all the cloud provider.

18:32.080 --> 18:34.560
So that's something to keep in mind.

18:34.560 --> 18:37.280
And we discussed with cluster API folks

18:37.280 --> 18:41.360
to see what could be the new approach of this.

18:42.200 --> 18:45.400
We also attend some office hours of the cluster API

18:45.400 --> 18:48.200
or ecosystem to make some demo of this.

18:48.200 --> 18:50.040
But it's already available on OpenStack

18:50.040 --> 18:52.960
and we hope it will be available in the next,

18:52.960 --> 18:55.440
in the over providers.

18:56.640 --> 18:59.880
A few resources, if you want to continue,

18:59.880 --> 19:01.680
check this at home.

19:01.680 --> 19:04.320
You can have of course the cluster API website,

19:04.320 --> 19:05.320
the cluster API OpenStack.

19:05.320 --> 19:08.120
This is for the example I've shown,

19:08.120 --> 19:10.120
Flattar and SystemD CZex,

19:10.120 --> 19:12.920
which is the main outlook in the end of this talk,

19:12.920 --> 19:13.960
is SystemD CZex.

19:15.080 --> 19:17.320
But yeah, so to conclude,

19:17.320 --> 19:20.320
I would say this talk is to give you the key elements,

19:20.320 --> 19:22.720
what's going on in cluster API, how does it work,

19:22.720 --> 19:24.960
but also to give you an overview of

19:25.360 --> 19:27.040
what we currently working on

19:27.040 --> 19:29.880
on this aspect of cluster API.

19:30.960 --> 19:32.120
So yeah, thanks.

19:32.120 --> 19:35.200
And of course I forgot to add the QR code,

19:35.200 --> 19:40.200
but you can find them on the FOSDEM website.

19:40.520 --> 19:42.040
And yeah, thanks for your attention,

19:42.040 --> 19:43.040
if you have any questions.

19:43.040 --> 19:54.440
So if you have any questions, or maybe on the chat,

19:54.560 --> 19:55.720
if there is some.

19:55.720 --> 19:59.080
I didn't see anything, but we can start with you.

19:59.080 --> 20:01.080
Yeah, do we have a mic?

20:01.080 --> 20:02.120
No, you will pretty much.

20:02.120 --> 20:03.600
Okay, we repeat the question.

20:03.600 --> 20:06.240
Okay, I have a philosophical question

20:06.240 --> 20:08.920
about cluster API.

20:08.920 --> 20:13.520
What's the life cycle of Kubernetes cluster to you?

20:13.520 --> 20:15.360
It's long running, you upgraded,

20:15.360 --> 20:17.800
or for it just temporarily,

20:17.800 --> 20:20.560
you just replace with a new one.

20:20.560 --> 20:24.040
So the question is about the life cycle of the cluster.

20:24.040 --> 20:25.800
Do we need to replace each node

20:25.800 --> 20:27.360
when there is a new version?

20:27.360 --> 20:28.200
That's correct?

20:28.200 --> 20:30.920
Yeah, but what is the intended purpose?

20:30.920 --> 20:33.520
It's like long life cluster,

20:33.520 --> 20:35.840
so it's like just for short term.

20:35.840 --> 20:37.840
Well, the goal is to have, yeah, okay.

20:37.840 --> 20:40.440
So the question is, do we use cluster API

20:40.440 --> 20:44.000
to have long term usage or short term usage?

20:44.000 --> 20:46.320
I'd say that cluster API is in the philosophy

20:46.320 --> 20:48.200
of leveraging Kubernetes,

20:48.200 --> 20:51.800
which means using the reconciliation loop of Kubernetes.

20:51.800 --> 20:53.600
You can just things that by themselves

20:53.600 --> 20:56.240
and if there is, I don't know, a network,

20:56.240 --> 20:58.360
so instance that going down,

20:58.360 --> 21:01.360
it can be restarted by the management cluster

21:01.360 --> 21:03.480
that will take care of,

21:03.480 --> 21:07.120
there is a state and you still want to be in this state.

21:07.120 --> 21:09.280
Because with Terraform, for example,

21:09.280 --> 21:12.680
there is a state, of course, but it's not live.

21:12.680 --> 21:13.920
It's a static state.

21:13.920 --> 21:16.080
So if there is some things missing,

21:16.080 --> 21:17.360
you need to rerun, plan apply,

21:17.360 --> 21:19.280
to be sure that your things get back.

21:19.280 --> 21:21.360
So that's one of the difference.

21:22.360 --> 21:23.680
Yes, Mr.

21:23.680 --> 21:27.040
Why cluster CTL to generate a template

21:27.040 --> 21:30.200
instead of using Helm templating?

21:30.200 --> 21:31.760
That's a great question.

21:31.760 --> 21:33.480
That's a great question.

21:33.480 --> 21:36.680
As you can see, can you repeat?

21:36.680 --> 21:40.560
Yeah, so why use cluster CTL CLI tool

21:40.560 --> 21:43.600
instead of using Helm or customizer or stuff like that?

21:43.600 --> 21:45.720
So the idea of cluster CTL,

21:45.720 --> 21:49.200
it provides some sugar on top of the common generation.

21:49.200 --> 21:50.600
So you can manage your clusters.

21:50.640 --> 21:53.000
So that's one of the features.

21:53.000 --> 21:55.920
But you can also have variable injection.

21:55.920 --> 21:57.440
When you generate a template,

21:57.440 --> 22:01.600
it will check if there is some missing variables

22:01.600 --> 22:03.320
required by the providers.

22:03.320 --> 22:07.360
So I think you can perform the same thing with other tools,

22:07.360 --> 22:11.800
but cluster CTL is just handy and you have it in this way

22:11.800 --> 22:13.960
to just be sure that you don't miss

22:13.960 --> 22:17.120
an environment variable to configure your deployment.

22:17.120 --> 22:17.960
Yes?

22:17.960 --> 22:21.360
In terms of the overlay or the flat card,

22:21.360 --> 22:25.080
how hard or easy is it to build custom overlays?

22:25.080 --> 22:27.040
Say if you've got OEM integration,

22:27.040 --> 22:28.680
what's the tooling to support that?

22:28.680 --> 22:31.880
So the question is about the overlay

22:31.880 --> 22:33.240
and how to build these images.

22:33.240 --> 22:35.600
If I understand correctly, the system is CZX.

22:35.600 --> 22:37.080
So you don't have to build,

22:37.080 --> 22:39.440
because we provide them on...

22:39.440 --> 22:41.800
You've got to say you wrote custom security...

22:41.800 --> 22:43.560
Yeah, you can...

22:43.560 --> 22:46.320
We've all decided to fork the repository I mentioned,

22:46.360 --> 22:48.280
which is called FlatCard CZX bakery,

22:48.280 --> 22:49.760
where we provide these images.

22:49.760 --> 22:52.040
So you can fork and do your stuff

22:52.040 --> 22:53.600
and why not send a peer,

22:53.600 --> 22:55.800
if it's something relevant for the community.

22:55.800 --> 22:58.120
And it's just a matter of SquashFS.

22:58.120 --> 23:01.840
If you have SquashFS utility tools on your system,

23:01.840 --> 23:03.240
you can just build your images.

23:03.240 --> 23:05.080
Basically, everything will be in a directories,

23:05.080 --> 23:08.680
then you convert these directories to a SquashFS image.

23:09.920 --> 23:10.760
Yes?

23:10.760 --> 23:14.160
Does the machine deployment controller do any sort of like...

23:14.280 --> 23:16.040
If forcing reconciliation,

23:16.040 --> 23:19.240
so if you were to delete the instance in OpenStack,

23:19.240 --> 23:20.640
would it be created?

23:20.640 --> 23:23.560
Yeah, not immediately, but in a few seconds,

23:23.560 --> 23:24.880
few minutes after it, we say,

23:24.880 --> 23:28.040
okay, I have to get four machines, I have only three.

23:28.040 --> 23:29.280
One missing is a walker node,

23:29.280 --> 23:31.600
so I need to go to habit.

23:31.600 --> 23:33.000
So the question was about...

23:33.000 --> 23:38.000
The question was about if there is some instance

23:38.680 --> 23:42.160
that is, that disappear from the OpenStack

23:42.160 --> 23:44.320
or the provider's dashboard,

23:44.320 --> 23:47.800
does the management cluster restart the instance?

23:47.800 --> 23:48.640
Yes?

23:48.640 --> 23:49.840
As a Kubernetes admin,

23:49.840 --> 23:52.040
I really love to manage my Kubernetes classes

23:52.040 --> 23:53.200
with Kubernetes resources,

23:53.200 --> 23:55.160
but I always wanted to bootstrapping problems

23:55.160 --> 23:57.600
like how do I manage my management cluster?

23:57.600 --> 23:59.360
I mean, I had so many projects,

23:59.360 --> 24:01.360
but I'd love to use cluster API,

24:01.360 --> 24:02.760
and it never makes sense,

24:02.760 --> 24:04.720
because in the end, I end up using CubeSpray

24:04.720 --> 24:05.720
for the management cluster,

24:05.720 --> 24:07.400
and I can just add it using CubeSpray.

24:07.400 --> 24:10.440
Yeah, so I think the bootstrap issue,

24:10.440 --> 24:12.520
they got the same question.

24:12.520 --> 24:15.880
So the question is about how do you create

24:15.880 --> 24:18.240
the management cluster?

24:18.240 --> 24:21.880
So I think this logo is well representative of the issue.

24:21.880 --> 24:24.720
It's the torter, the torter that you stack,

24:24.720 --> 24:26.240
and in the end, there is no answer,

24:26.240 --> 24:27.320
because your management cluster,

24:27.320 --> 24:30.480
you can define to handle it with another management cluster.

24:30.480 --> 24:34.360
So you can change cluster API if you want to, why not?

24:34.360 --> 24:36.080
That's something you can consider.

24:36.080 --> 24:39.240
And on the new workload cluster,

24:39.240 --> 24:41.320
you can just say, okay, now it's a management cluster.

24:41.320 --> 24:43.880
So I'm going to deploy cluster API on the workload cluster.

24:43.880 --> 24:46.280
That, of course, is just theoretical.

24:46.280 --> 24:48.920
There is no practical way to do that,

24:48.920 --> 24:51.200
and it's not the point.

24:51.200 --> 24:52.320
But your management cluster,

24:52.320 --> 24:54.760
that's what I say, you can use really something simple.

24:54.760 --> 24:58.240
I think I see that there is this new Kubernetes tool

24:58.240 --> 24:59.560
that you can use.

24:59.560 --> 25:02.640
It's like deployment without Cubelet

25:02.640 --> 25:03.520
or something like that,

25:03.520 --> 25:06.880
so maybe, yes, because you just need the APIs

25:06.880 --> 25:08.520
in the end of the Kubernetes.

25:08.520 --> 25:12.760
And so why not try to come with something like that,

25:12.760 --> 25:16.600
to just deploy a set of API, and that's it.

25:16.600 --> 25:20.960
But you can, yeah, we can do things like that.

25:20.960 --> 25:23.800
You can decide to use kind, for example.

25:23.800 --> 25:26.040
That's the best way to deploy things

25:27.120 --> 25:28.320
for the management cluster.

25:30.720 --> 25:31.560
Time's up.

25:31.560 --> 25:32.400
Okay, thanks everyone.

25:32.400 --> 25:33.240
Have a great day.

25:33.240 --> 25:34.080
Thank you.

25:34.080 --> 25:34.920
Thank you very much.

25:34.920 --> 25:35.760
Thank you.

26:03.240 --> 26:04.080
Thank you.

26:33.240 --> 26:34.920
Thank you.

27:03.240 --> 27:04.080
Thank you.

27:33.240 --> 27:34.080
Thank you.

28:03.240 --> 28:04.080
Thank you.

28:33.240 --> 28:34.080
Thank you.

28:49.640 --> 28:50.480
Ooh.

28:54.480 --> 28:55.320
Is it all right?

28:55.320 --> 28:56.160
How's that?

28:57.400 --> 28:58.560
Cold share.

28:58.560 --> 28:59.400
It's all right.

28:59.400 --> 29:00.240
You gonna have it?

29:00.240 --> 29:01.080
Yeah.

29:03.240 --> 29:04.080
Oh, yeah.

29:11.080 --> 29:13.740
Do you also have to use to the...

29:16.320 --> 29:17.800
You'll see it, so.

29:33.240 --> 29:37.240
I think we're gonna have to do the...

29:37.240 --> 29:41.240
So...

29:41.240 --> 29:47.240
We can enable hotspot

29:47.240 --> 29:51.240
for the...

29:51.240 --> 29:55.240
I think we'll stop here.

29:55.240 --> 29:59.240
Yeah, let's go here.

29:59.240 --> 30:03.240
Do you have presentations?

30:03.240 --> 30:07.240
Yeah.

