WEBVTT

00:00.000 --> 00:12.560
All right, thank you all for coming. So next up we have a very exciting topic, 5G and

00:12.560 --> 00:20.120
Modem Manager. Have a round of applause for Alexander.

00:20.120 --> 00:24.160
So let's talk about Modem Manager. Let me know if you don't see me because I'm not sure

00:24.160 --> 00:31.160
if this is going to work very well. I read about me first. I think I'm going to keep it

00:31.160 --> 00:39.160
like this. I have been the Modem Manager, Maintainer and Developer for the past 12 years

00:39.160 --> 00:42.560
and I've also been involved in developing and maintaining the two libraries that we

00:42.560 --> 00:47.520
use to communicate with Modems, which are the QMI for the QMI protocol and the MBIM

00:47.520 --> 00:57.080
protocol. I'm not working at the Google Chrome OS team since two years ago. And this talk is going

00:57.080 --> 01:04.440
to be about not only how we're going to add 5G support properly in Modem Manager, hopefully,

01:04.440 --> 01:11.360
but also how we added 4G and which are the issues that we had when we added 4G and how we are

01:11.400 --> 01:18.880
going to overcome these same kind of issues when developing 5G support. So we will look

01:18.880 --> 01:26.400
at what went well and what didn't go that well with 4G support. So before I joined the

01:26.400 --> 01:31.120
Modem Manager project, there was already support for 4G in the sense that you could connect

01:31.120 --> 01:34.880
the Modem, it was using 4G and the Modem will tell you, hey, I'm using 4G and then we will

01:34.880 --> 01:39.840
expose it and that's about it. So we were treating 4G yesterday as a different mode,

01:40.560 --> 01:48.000
we had 2G, 3G and now we have 4G, nothing else. So when I joined the project, I started to review

01:48.720 --> 01:58.560
the 1.0 API suggestion that were in the main list and the major focus at that time was to support

01:58.560 --> 02:03.360
multi-mode devices. So at that time we had two separate families of Modems, we had 3G,

02:03.680 --> 02:09.600
3G-Bb-Modems, GSM, MGS, LTE, then you had another family which were 3G, VB2, you had CDMA, EVDO Modems

02:11.360 --> 02:20.480
for 2G and 3G. So 3G, VB2 had its own standard of 4G they digitized and then they started to use

02:20.480 --> 02:27.600
LTE as the standard 3G, VB2 Modems as well. So we had these strange 3G, VB2 and 3G, VB, Modems,

02:27.600 --> 02:35.000
multiple modems that had to be managed kind of in the same way, but it was very different in nature.

02:35.000 --> 02:42.320
Like 3GPP modems require a SIM card, 3GPP2 modems, most of them require to have some kind of activation with the network

02:42.320 --> 02:49.880
to bind your user account to the device itself, and it was a manual activation, automatic activation depending on the carrier.

02:49.880 --> 02:53.280
So there were many different things.

02:53.280 --> 03:03.920
And managing these new multi-modem devices, we thought this was the most important thing, but it wasn't, because 3GPP2 no longer exists.

03:03.920 --> 03:13.200
So can anyone tell me which main feature of 4G we missed? Because we didn't think of it.

03:13.200 --> 03:15.560
What's the mind here?

03:15.560 --> 03:16.360
No.

03:16.360 --> 03:21.680
Much more important than that. Actually related sometimes.

03:22.640 --> 03:31.720
So what we missed is the idea that when you attach to the network in 4G, you are actually creating a data network interface between the modem and the network,

03:31.720 --> 03:40.280
even if the host hasn't seen it yet. So you actually get an IP address, full data setup, communication between the modem and the network in the user plane,

03:40.280 --> 03:48.840
but the host knows nothing about that. And why did not we catch that? Because most operators didn't really care about that.

03:48.960 --> 03:54.400
They would allow you to send a blank APN during the touch, and then that was fine for them.

03:54.400 --> 03:59.040
They would tell you back, which is the APN that you are using. That was one approach.

03:59.040 --> 04:04.840
The other approach was that the settings used for data connection were actually going to be the same ones as used for attach.

04:04.840 --> 04:12.760
So you actually, when you kind of connect, you're actually configuring profile number one, which is the one used for attaching Qualcomm.

04:12.760 --> 04:15.880
There were lots of assumptions happening at the same time.

04:15.880 --> 04:21.040
There was also no consolidated approach to define these settings in non-protocols.

04:21.040 --> 04:25.920
The NBIM 1.0 spec did not have a way to specify attach settings.

04:25.920 --> 04:35.000
And many of the APIs that we developed at that time were based on looking at what NBIM capable modems were doing.

04:35.760 --> 04:42.000
So there's a use case where this does not work, which is when the settings are different.

04:42.000 --> 04:47.640
And so in 1.10, we added the support to explicitly specify attach settings.

04:47.640 --> 04:55.000
This is the case of Verizon, for example, where they have one specific attach APN and one specific date APN.

04:55.000 --> 05:00.560
So now we were able to say to the network, okay, we want these specific settings for registration,

05:00.560 --> 05:05.720
and then the network will tell us, then, yeah, you could have those, or you could have like a subset of those.

05:05.720 --> 05:10.480
You may ask for v4v6 and then only get back physics.

05:10.480 --> 05:13.600
So that's a very, very common thing that may happen.

05:13.600 --> 05:22.320
And this was added very late in 1.10, like many years after the 1.0 device API was introduced.

05:22.320 --> 05:26.480
Another thing that we missed in 1.0 was the support for profile management.

05:26.480 --> 05:31.280
So right now, up until that moment, the way you connect the modem,

05:31.280 --> 05:35.320
you specify all the settings that you want in the connection attempt.

05:35.320 --> 05:41.760
And in 1.18, we added the support to say, we already have a set of profiles,

05:41.760 --> 05:46.560
maybe even provided by the modem itself, because when you insert the sim card in the modem,

05:46.560 --> 05:50.520
the modem itself will build, not build,

05:50.520 --> 05:54.960
but with some carrier-specific settings, with some predefined profiles.

05:54.960 --> 05:56.520
This is very common in US carriers.

05:56.520 --> 06:03.920
So you insert the Verizon sim card, the modem boots, with already profiles defined as the way Verizon wants them.

06:03.920 --> 06:09.760
And then in that case, you can just say, connect profile three, and that's about it.

06:09.760 --> 06:11.240
So we did miss that.

06:11.240 --> 06:18.840
We missed some other things, which are maybe not as important as that one.

06:18.840 --> 06:20.160
Where did we do it?

06:20.800 --> 06:31.960
So the first API that we defined for 1.0 had multiple PDN connections in mind from the very beginning.

06:31.960 --> 06:36.400
Even if we did not support them in the same way as it's implemented now,

06:36.400 --> 06:40.960
at that time, we had modems that would expose two network interfaces at the same time,

06:40.960 --> 06:43.080
physical network interfaces that we could choose,

06:43.080 --> 06:49.000
okay, please connect this one to this APN, please connect this other one to this other APN.

06:49.000 --> 06:51.960
The multi-PDN support that we have right now is based on multiplexing,

06:51.960 --> 06:54.760
so we can have one single physical network interface,

06:54.760 --> 06:58.120
but then we can say, okay, I'm going to connect three different PDN connections,

06:58.120 --> 07:01.080
I'm going to create three different virtual network interfaces.

07:01.080 --> 07:08.400
And then the host can assign different data flows to each of these PDNs separately,

07:08.400 --> 07:10.480
because you have three different network interfaces,

07:10.480 --> 07:14.320
so you can do all the routing logic in the host itself.

07:14.320 --> 07:23.120
And this very same support was used to support Qualcomm SOC boards with the IPA driver, for example,

07:23.120 --> 07:26.480
which requires multiplexing by default.

07:29.080 --> 07:34.560
Now, where are we right now with the 5G support in Modem Manager?

07:34.560 --> 07:40.280
The picture is very similar as what we had before 1.0 for 4G.

07:40.320 --> 07:44.880
We just have the way to say that we are using 5G.

07:44.880 --> 07:51.240
We can say that we are using 5G SA networks if we only expose 5G access technology,

07:51.240 --> 07:54.240
but we also have the way to say that we are using NSA,

07:54.240 --> 08:04.600
so we are registered in 4G and we will use a 5G extra-barre when the bandwidth requirements happen.

08:04.600 --> 08:11.720
And that's about it. We don't have any other 5G-specific feature for now.

08:17.400 --> 08:18.720
What are we missing?

08:18.720 --> 08:25.440
So I'm not going to talk about 5G-specific features that apply, for example,

08:25.440 --> 08:29.480
in the radio interface because Modem Manager does not really care about any of those.

08:29.480 --> 08:36.120
We only want to be able to support things that the host is aware of,

08:36.120 --> 08:38.360
and that is completely hidden to the host.

08:38.360 --> 08:42.840
So one of the things that we are going to try to support is 5G Slicing,

08:42.840 --> 08:51.800
which is this important word that if you investigate about 5G, it's everywhere.

08:51.800 --> 08:57.240
So in 4G networks, there is no clear separation between different types of UEs.

08:57.320 --> 09:01.400
A UE is the combination of host and Modem.

09:03.080 --> 09:09.560
And so in 4G networks, you don't have any differentiation between different UEs.

09:09.560 --> 09:11.560
They are all treated in the same way.

09:11.560 --> 09:18.760
And in 5G, they do define specific types of UEs with different quality of service requirements.

09:18.760 --> 09:23.240
So you may have a UE that wants to have a bigger bandwidth.

09:23.240 --> 09:27.320
You may have a UE that wants to have an extreme low latency.

09:27.320 --> 09:33.560
You may have UEs that may send data to the network once a day or twice a day,

09:33.560 --> 09:37.640
but they need to be spread across a very big area.

09:37.640 --> 09:45.480
So in order to support all these different kinds of UEs, 5G introduces the concept of slicing.

09:45.480 --> 09:49.560
And so with the slicing, you have one single physical network,

09:49.560 --> 09:54.280
but then it can be logically divided into separate virtual networks.

09:56.120 --> 09:58.840
Each of them with its own quality of service requirements.

10:00.040 --> 10:03.560
And the separation, this is very important, goes up to the base station,

10:04.200 --> 10:06.680
which is something that 4G did not have.

10:06.680 --> 10:09.240
So imagine this UEs case.

10:09.240 --> 10:13.480
We have thousands of people here and for them, all of them with a phone,

10:13.480 --> 10:16.840
and all of them trying to get access to the network.

10:16.920 --> 10:22.520
There's congestion, there's a lot of radio interference between older devices.

10:22.520 --> 10:27.480
With 5G, what you gain is that you could have a phone using that slice

10:28.200 --> 10:32.200
that has a specific base station only for that slice.

10:32.200 --> 10:37.560
And so you get priority access to the network through this slice.

10:37.560 --> 10:40.280
And this may happen even with the same PDN.

10:40.280 --> 10:44.920
So you have one single APN that you want to connect to to the internet.

10:44.920 --> 10:50.520
You may have different paths from your host to connect to that same APN,

10:50.520 --> 10:53.560
based on the quality of service requirements that you have.

10:55.640 --> 10:59.400
Now 5G, as I said, is a logical partition of the physical network.

10:59.400 --> 11:06.040
And they are defined, they are specified or named by something called single NSS AI.

11:06.680 --> 11:09.160
It's a really bad name, I think.

11:10.120 --> 11:14.920
And so how are we going to support this in model manager?

11:14.920 --> 11:18.680
There are two main things that we need to support.

11:18.680 --> 11:23.320
One is during the registration, we want to specify which is the slice we want to connect to.

11:24.280 --> 11:27.160
At the time of registration, and we can't do that.

11:27.160 --> 11:30.840
And then you may ask for multiple slices, the network will give you back,

11:30.840 --> 11:34.920
okay, you are allowed to use this, you are not allowed to use this one,

11:34.920 --> 11:37.080
and you also have available this other one.

11:37.080 --> 11:40.600
So this is one simple way of binding, for example,

11:40.600 --> 11:46.040
all the traffic of the system to a single connection, to a single slice.

11:48.520 --> 11:50.360
This is the case that I told you before, single,

11:51.320 --> 11:54.600
this is a UI connected to two different slides separately,

11:55.400 --> 11:58.280
or both of them going to the same internet APN,

11:58.840 --> 12:04.600
and they use completely different virtual network connections in the operator side

12:04.600 --> 12:06.280
with different QoS settings.

12:07.160 --> 12:13.560
The complex way of using URSP rules is by using,

12:14.520 --> 12:18.520
the complex way of using five-year slices is by using URSP rules,

12:18.520 --> 12:25.320
in the way that the operator will tell you which is the way that you need to

12:26.040 --> 12:28.280
route the traffic through that network.

12:28.280 --> 12:32.280
So they will give you rules, the UI receives the rules,

12:33.000 --> 12:35.720
in this case the modem will push the rules to the host,

12:35.720 --> 12:41.000
and then the host needs to make all these separate traffic differentiation

12:41.000 --> 12:45.960
and move one data flow from one slice and one data flow for another slice.

12:47.080 --> 12:52.280
The UI should not be capable of deciding by itself which slice to use,

12:52.840 --> 12:55.880
so because this is mandated by the network,

12:55.880 --> 13:00.360
and so if you try to use a slice that you are not supposed to use, they may kick you out.

13:01.320 --> 13:07.720
So that's a way that the network has to control the access to the high privileged slices.

13:11.240 --> 13:16.040
Any modem manager that supports the slicing will look very much like a multi-PDN connection.

13:16.040 --> 13:20.520
We will have virtual network interfaces created for each slice, and that is about it.

13:20.840 --> 13:36.040
There are all the 5G features that we could consider, but I'm going to name them here only.

13:36.040 --> 13:40.920
So non-GPB access support that's basically accessing the operator network through Wi-Fi,

13:40.920 --> 13:44.120
for example, you can authenticate to the network through Wi-Fi,

13:45.080 --> 13:47.960
and then you also have non-IP based 5G connectivity.

13:51.000 --> 13:56.360
If you have a network connection between machines using different protocols,

13:56.360 --> 14:02.280
you could virtually create a 5G network connection between them without using the IP protocol.

14:06.040 --> 14:10.360
Now, how it's going to look like for the next 10 years?

14:13.000 --> 14:18.840
I think we need to focus on what went right and try to avoid the mistakes that we made

14:18.920 --> 14:31.800
in 1.0, but we also know the limitations because everything changes, and what is important now

14:31.800 --> 14:38.840
may not be important at all in 10 years. So the planning needs to be done carefully,

14:38.840 --> 14:45.560
and actually made it in a way that if in the future you need to change

14:45.560 --> 14:48.120
cores, then you can do it more or less easily.

14:50.520 --> 14:54.360
The first thing we should be doing is remove legacy features. A lot of the structure in the

14:54.360 --> 14:59.480
modern manager code base is based on this logic of having 3GPP devices as a separate

14:59.480 --> 15:08.280
type of devices. We can remove all that. Same for the ports, plain old telephony system,

15:08.280 --> 15:14.200
like these dial-up models. We said we would implement them 13 years ago, and we did not

15:14.200 --> 15:21.160
do anything. I think it's time to say that we're not going to do it. We had enough time to try to

15:21.160 --> 15:26.360
do it. And then obviously, all the plugins from modems that are very old, we can't remove them.

15:26.360 --> 15:35.240
There is no point in having them anymore. The focus should be on 4G and 5G modems,

15:36.200 --> 15:42.920
and on PCI and USB modems that expose the network interface. So we acknowledge that there are other

15:43.000 --> 15:48.200
types of modems, that is serial modems or USB modems that don't expose the network interface,

15:48.200 --> 15:55.000
and you can only do 80 plus PPP connections. Those would still be supported, but let's say

15:55.000 --> 16:01.240
like in live support only, like bare minimum data connections set up, and not thinking about

16:01.240 --> 16:07.160
adding many features to those as well. For example, not thinking about trying to add 5G

16:07.160 --> 16:10.840
S-Lacing in those devices. It wouldn't make much sense.

16:13.960 --> 16:19.960
We may want to have a new API. This API that we are using right now has been mostly untouched.

16:20.520 --> 16:25.000
We didn't break API into more than 12 years. I think it's time to do some some breakage.

16:27.080 --> 16:34.440
As I said before, remove interfaces that we don't want, and probably not the same process as we did

16:35.000 --> 16:43.640
for 1.0. In 1.0, we spent, I spent one year and a half with my branch, until it was mostly ready

16:43.640 --> 16:51.000
to be launched. I mean, I want to change that. That cannot happen again. I don't have as much

16:51.000 --> 16:56.840
time as I had that time. So the idea would be to do it progressively and start to add new APIs,

16:56.920 --> 17:04.680
at least the basic ones, and so on. We will have registration settings as a

17:04.680 --> 17:11.960
first-class citizen in the APIs. We no longer treat them as something automatic, which is what we do

17:11.960 --> 17:19.720
right now. We now want to configure 4G-attached LTE settings. We want to configure 5G registration

17:20.360 --> 17:26.760
slide settings and 7L-over common settings that you may have in the modern, like the manual

17:26.840 --> 17:33.080
versus automatic settings. All those should go in its own separate API with the idea that in the

17:33.080 --> 17:37.320
future we may have more. So it should be open to updates in the future.

17:39.320 --> 17:43.080
Regarding connection management, I think it's time to use profile-based

17:43.080 --> 17:48.200
connection management as default whenever possible. There are many reasons for this,

17:48.200 --> 17:52.520
especially when you use carrier settings, where the modern gives you all the settings that you

17:52.520 --> 17:57.720
need to use. There's no point in trying to add new settings on top of those when you already have them.

17:58.360 --> 18:04.200
So using profile management is the way to go there, and enable multiplexed connection by default.

18:04.200 --> 18:10.600
So as I said, the primary modems to use would be the ones that expose the network interface.

18:10.600 --> 18:14.760
All those allow you to do multiplexing. Most of them allow you to do multiplexing.

18:14.760 --> 18:16.120
So we should enable that by default.

18:16.840 --> 18:23.960
This is one of the main things that I would like to change as well. So right now when you have a

18:23.960 --> 18:30.760
modern detected by modern manager, and it happens to have voice support, even if you're in a laptop

18:30.760 --> 18:36.680
and does not have any audio connectivity, modern manager will try to configure voice-related

18:36.680 --> 18:42.280
stuff, call waiting status, all that. It doesn't make any sense to do that if you know that you're

18:42.360 --> 18:48.360
not going to use it. So let's move that to separate interfaces as they are right now,

18:48.360 --> 18:53.080
but as a way that you can actively enable that. And if there's any application with the intent of

18:53.080 --> 18:58.040
using voice capabilities, you can, hey, please, not a manager, enable voice capabilities in the

18:58.040 --> 19:03.240
modern. Then we will enable all the URCs, all the unsolicited message support, and everything

19:03.240 --> 19:07.000
that needs to be done to support voice, for example.

19:11.320 --> 19:19.160
Oh, no, that's another one. Yeah. This is extended to each list. So things that I would love to have,

19:19.160 --> 19:23.960
even if they are extremely difficult. So we have QMI proxy, NBIM proxy. Why not have an

19:23.960 --> 19:29.160
80 proxy? Other programs can use 80 commands through modern manager, through the proxy,

19:29.960 --> 19:35.720
to do other stuff that does not interfere with the modern manager own control.

19:36.920 --> 19:44.120
So if you could have that, it will allow many applications to use 80 commands as well. Then

19:44.120 --> 19:49.080
we could move our GNSS location out of modern manager completely as a separate team. There's

19:49.080 --> 19:57.240
no reason for modern manager to have all this support for configuring AGPS and injecting extra

19:57.240 --> 20:04.040
files to the GNSS module. We do that because the modern has that. But if we have the proxies in

20:04.040 --> 20:09.720
place, there would be no reason not to do it out of modern manager. And, yeah,

20:10.840 --> 20:15.880
draft maybe for binary parsing of messages and all that. That was something that was already

20:16.600 --> 20:20.840
investigated. And that is all I have to say.

20:29.240 --> 20:33.240
Thank you very much for this great talk. Do we have any questions in the audience?

20:35.560 --> 20:42.920
Yeah. Thanks for the good talk. I was wondering how do you test all this? So what is your CI?

20:43.880 --> 20:52.280
So in Chrome OS, we have a lot of automatic testing for the moderns that we use. So I do rely a lot

20:52.280 --> 20:59.080
about that. Like when I joined Google, I found that there were a lot of information metrics about

20:59.080 --> 21:06.200
crashes and things, back traces. I was like, I need to fix all this. But I do rely also on my own

21:07.080 --> 21:15.000
testing. I do have a home network, a home LTE network with SLSLT, open 5G, as I have my own SIM cards.

21:15.560 --> 21:19.080
And that allows me to do a lot of testing that otherwise I would not be able to do.

21:19.960 --> 21:24.360
Because all the slicing stuff that also is very core network dependent?

21:24.360 --> 21:31.480
Yes. So you might run into problems. Oh, yeah. I know many operators are doing pilots and

21:31.560 --> 21:36.040
like private pilots. I do some open ones. I think also in the US, T-Mobile is doing it.

21:36.920 --> 21:41.800
But for example, for a 5G slicing, I think that my home network is enough for this kind of testing.

21:43.080 --> 21:49.720
Thanks. Next question from the back.

21:49.720 --> 22:06.600
Hi. I'm debugging voice calls from my device. And from what the manager I see messages like gained,

22:06.600 --> 22:12.840
audio, lost audio. And I have no idea what happens after that. And whenever I try to...

22:12.840 --> 22:15.480
So how do you use 80 commands to control the modern?

22:16.440 --> 22:22.200
No, it does it by itself. When I'm trying to get to the bottom of what's going on in the code,

22:22.200 --> 22:26.520
I only see interfaces behind interfaces behind interfaces. But where can I find the actual

22:27.240 --> 22:30.920
code that makes the audio? Like where should I look? Is there a problem?

22:30.920 --> 22:36.920
So modern manager is only in charge of starting the code and hanging up the code. That's all

22:36.920 --> 22:45.080
accepting an incoming call. Nothing audio related. I mean, modern manager knows absolutely nothing.

22:45.480 --> 22:50.840
About the audio path. You know, who is responsible for getting the audio?

22:50.840 --> 22:55.720
It depends on the platform, of course. So if you're using Libre and Firephone or something like that,

22:55.720 --> 22:58.440
then you may need to talk to them. Thank you.

23:00.920 --> 23:07.320
Thanks. There was a question from the matrix apparently. I'm rushing to the matrix.

23:07.480 --> 23:15.560
So somebody's asking, can we anticipate 6G features such as sharing machine learning

23:15.560 --> 23:21.800
data for connection optimization? I have no idea about any of that. I'm still in 5G. Maybe in 10

23:21.800 --> 23:29.080
years we will talk about. Same talk for 6 years. You talked about REST for the protocol parsing

23:29.080 --> 23:33.720
and how there's already been experiments. And it's on your wish list. So I assume those experiments

23:33.720 --> 23:37.800
are somewhat successful. Can you talk any more about what those experiments are?

23:37.800 --> 23:43.320
So not much. I mean, it's useful. I think it's very useful. And I still keep finding bugs. For

23:43.320 --> 23:51.000
example, in the 3GPP PTU parsing, which we wrote 10 years ago. And there are still bugs there.

23:52.200 --> 23:57.720
Nasty memory related bugs. So REST is very promising in that regard.

23:58.600 --> 23:59.080
Cool. Thanks.

24:02.520 --> 24:04.120
One more question. And I'm back.

24:07.800 --> 24:13.800
Thanks for the talk. So the question regarding the AT proxy. With all the possible vendor

24:14.600 --> 24:20.440
crap, etc. So how do you plan to define if the comment is going to interfere with

24:20.440 --> 24:25.800
model manager or not? So is it going to be a low by default or is it going to be for be by default?

24:26.760 --> 24:35.080
So that's why we don't have a proxy yet. That's the main reason. Especially because

24:35.080 --> 24:41.480
model manager handles a lot of crap that manufacturers push in the AT port. So the idea would be to,

24:41.480 --> 24:45.880
in the same way that model manager disables a lot of URCs that knows that may happen,

24:45.880 --> 24:54.120
the proxy could do the same. And so we could still need to work with known URCs as they happen

24:54.120 --> 24:59.720
in the world. But I hope that manufacturers will start to use other things than AT at some point

25:00.280 --> 25:11.320
in 20 years. Give a round of applause for Alexander.

