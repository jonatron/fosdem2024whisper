WEBVTT

00:00.000 --> 00:09.080
Alright, let's get started.

00:09.080 --> 00:13.440
Is that, I am unmuted, yes.

00:13.440 --> 00:18.600
So yeah, this will be fairly quick, just an update on container D. You're either here

00:18.600 --> 00:22.920
because you're interested in container D or because it's too hard to change dev rooms

00:22.920 --> 00:27.520
and so you're just going to sit here and hear about container D. Hopefully you're somewhat

00:27.520 --> 00:28.520
interested.

00:28.520 --> 00:34.520
I was having a bit of phosom nostalgia like 2018, talking about just like the first year

00:34.520 --> 00:37.840
and a half of container D getting to 1.0.

00:37.840 --> 00:44.720
So now we're on the cusp of our 2-0 release, our first time having kind of a major version

00:44.720 --> 00:47.040
since we started the project.

00:47.040 --> 00:52.120
First just a few stats in case you're unaware.

00:52.120 --> 00:54.680
Container D adoption has been growing a lot.

00:54.680 --> 01:01.200
Some of that's probably due to the Docker shim deprecation in Kubernetes.

01:01.200 --> 01:05.520
This is from DataDogs, ANO report.

01:05.520 --> 01:08.280
The CNCF and Sysdig also put out reports.

01:08.280 --> 01:11.600
They all come out with different numbers so believe whichever one.

01:11.600 --> 01:15.560
This one was positive for container D so I used it.

01:15.560 --> 01:19.240
You can probably find another one.

01:19.680 --> 01:26.440
Maybe more importantly to the project are actual community growth so people actually

01:26.440 --> 01:31.600
contributing, getting involved in the project, becoming maintainers.

01:31.600 --> 01:35.200
This is a crazy eye chart from the CNCF.

01:35.200 --> 01:37.680
You can see Kubernetes way up there at the top.

01:37.680 --> 01:45.200
Again, there's some magic math being done here about how many PRs and issues are flowing

01:45.200 --> 01:46.320
through your project.

01:46.320 --> 01:52.800
How many people are contributing and it comes out to container D being in the top 15 or

01:52.800 --> 01:54.640
so projects.

01:54.640 --> 01:59.680
One of the cool things is that we've had a lot of, I think this captures like the last

01:59.680 --> 02:07.720
nine months, but new maintainers, reviewers, committers from many different companies,

02:07.720 --> 02:08.720
some independents.

02:08.720 --> 02:13.840
So that's awesome to see as well.

02:14.360 --> 02:22.440
The cloud providers you might be using use container D underneath their Kubernetes service

02:22.440 --> 02:26.200
and some other projects as well.

02:26.200 --> 02:32.160
The thing I wanted to focus on is one of the reasons I think container D continues to grow

02:32.160 --> 02:37.960
as a project is that we've built in extensibility in different directions.

02:37.960 --> 02:44.520
I'll talk about three main directions that container D is extensible or how you can build

02:44.520 --> 02:46.400
around it.

02:46.400 --> 02:52.280
One is on the client end and so one of the newest representatives of that is Nerd CTL

02:52.280 --> 02:56.880
written by one of our maintainers, Akahiro Sudha who you've probably heard of because

02:56.880 --> 03:01.800
he's written 100 different projects in the container space and anytime you use rootless

03:01.800 --> 03:07.760
containers it's probably because Akahiro started that work many years ago.

03:07.760 --> 03:15.080
The hero nerd CTL which gives you now kind of a Docker command line for container D.

03:15.080 --> 03:21.880
The other way that we're extensible is in snapshotters and those are, if you remember

03:21.880 --> 03:27.760
Docker's graph drivers, these are the way that your containers file system are actually

03:27.760 --> 03:32.840
stored and so overlay is obviously a very common one that many of the container runtimes

03:32.840 --> 03:36.000
use but we've actually made it.

03:36.000 --> 03:40.560
So we have built in ones which I'll talk about but we also, you're able to extend that with

03:40.560 --> 03:45.920
a remote snapshotter and that's an area where we see a lot of growth where people are writing

03:45.920 --> 03:52.080
their own snapshotters for their own unique use cases.

03:52.080 --> 03:58.180
Then sort of directly down from container D is this layer we call the shim layer that

03:58.180 --> 04:05.800
drives an actual OS level runtime and so obviously many of you have heard of Run C or C Run

04:06.600 --> 04:12.720
that's kind of the common Linux adapter if you will that drives the set of syscalls you

04:12.720 --> 04:20.040
need to name space your process but the container D shim API again is extensible and there's

04:20.040 --> 04:23.160
many different shims available and we'll talk through those.

04:23.160 --> 04:25.560
So these are kind of three directions.

04:25.560 --> 04:31.560
There's also some other pluggable interfaces that I don't have time to get into today but

04:31.560 --> 04:39.280
these are all ways that again as we go into 2.0 we continue to see people expanding container

04:39.280 --> 04:41.080
D in these directions.

04:41.080 --> 04:44.000
I'll spend the least amount of time on clients.

04:44.000 --> 04:49.760
We've had this sort of simple tool in the project since the beginning called CTR.

04:49.760 --> 04:55.120
It was never really meant to be a production client for container D but just an easy way

04:55.120 --> 05:01.480
to poke at the API, get a list of images, list of processes.

05:01.480 --> 05:08.600
Run CTL is much more recent and has its own set of maintainers who are marching along

05:08.600 --> 05:15.080
with new releases that are either bringing better alignment with the Docker command set

05:15.080 --> 05:21.720
so all the flags, all the features or adding features that they can reach because they're

05:21.720 --> 05:28.640
built directly on container D like some of the lazy loading snapshotters, image encryption,

05:28.640 --> 05:34.440
container image signing, all those are built in to nerd CTL.

05:34.440 --> 05:40.240
Cry CTL is from the Kubernetes community that drives the CRI API of which container D has

05:40.240 --> 05:45.920
an implementation obviously CRIO and others have implementations for that API and then

05:45.920 --> 05:51.040
of course the Docker project is also built on container D.

05:51.040 --> 05:57.920
There's some interesting developer platforms built around these clients.

05:57.920 --> 06:04.520
After desktop and CoLima allow you to drive the Docker engine or container D but we have

06:04.520 --> 06:10.640
a team at Amazon who built Finch that's just built on nerd CTL build kit and container

06:10.640 --> 06:17.080
D again that allows you to do macOS and I forgot to add Windows here because we just

06:17.080 --> 06:19.760
launched Windows this past week.

06:19.760 --> 06:26.480
But again these are ways that people are extending the capability by building new clients around

06:26.480 --> 06:30.800
container D. So the other area I mentioned was snapshotters.

06:30.800 --> 06:32.360
There's a bunch of built in ones.

06:32.360 --> 06:41.320
Many of you will recognize things like overlay and device mapper, butter FS but this plugability

06:41.320 --> 06:47.200
of having proxy plugins to a remote snapshot are so now two things you're not tied to container

06:47.200 --> 06:49.200
D's release life cycle.

06:49.200 --> 06:54.560
You don't have to get your snapshot or merged into the container D code base.

06:54.560 --> 07:01.120
You can write your own, you can run it as a separate process with a GRPC listener and

07:01.120 --> 07:10.560
container D will call you for the API of the snapshotter, prepare, diff, unpack and those

07:10.560 --> 07:14.480
operations that are required for the snapshotter.

07:14.480 --> 07:21.360
So there's three main ones that all three of these have now been donated into the container

07:21.360 --> 07:23.520
D GitHub organization.

07:23.520 --> 07:29.640
So they were started as external projects and they've now been donated.

07:29.640 --> 07:36.800
They're all related to lazy loading file system so if you've played around with being able

07:36.800 --> 07:41.840
to run a container but not having to pull the entire image, say it's a 10 gigabyte image

07:41.840 --> 07:49.120
with scientific data sets or some complicated ML model.

07:49.120 --> 07:54.840
These lazy loading snapshots will only pull the files that are needed to start the container

07:54.840 --> 08:00.960
and so Star GZ, overlay BD and NIDUS are all in that family and then there are two, there's

08:00.960 --> 08:08.520
Sochi that was built by one of our teams at Amazon that is seekable OCI so again a lazy

08:08.520 --> 08:15.480
loading snapshotter and that's open source but then GKE also has a feature called image

08:15.480 --> 08:21.840
streaming built around the same ideas of lazy loading but that's at least for my understanding

08:21.840 --> 08:24.400
that's not an open source project today.

08:24.400 --> 08:31.360
So again these are ways that people are extending container D by having their own snapshot technology

08:31.360 --> 08:34.320
and plugging that into container D.

08:34.320 --> 08:41.560
Allison mentioned shims so OCI runtimes, there's several options there.

08:41.560 --> 08:50.520
So we have run C built in, you can also use C run and we test that in our test suite for

08:50.520 --> 08:57.440
container D and there's also some experimental Rust and free BST runtimes but then again

08:57.440 --> 09:02.520
you can have your own shim outside of kind of the container D core project such as the

09:02.520 --> 09:09.120
one for Windows maintained by Microsoft, HCS shim.

09:09.160 --> 09:16.600
Run wasi is one of the more active projects in the container D, you have namespace where

09:16.600 --> 09:21.600
again this is a shim where you can drive container D to the same API and clients but actually

09:21.600 --> 09:29.680
run wasm workloads instead of running a traditional Linux container and again there's a micro

09:29.680 --> 09:38.840
VM based shims, trusted execution environment and Quasar I think is how you pronounce this

09:39.440 --> 09:45.160
shim that deals with a new feature of container D 2.0 called sandboxing which we'll talk about

09:45.160 --> 09:47.360
in a minute.

09:47.360 --> 09:53.440
So again those are just three ways that I think have benefited the sort of container D's growth

09:53.440 --> 09:59.560
of being able to plug in and enable features that don't have to be part of the main container

09:59.560 --> 10:06.000
D code base and allows people to sort of expand for their use cases that maybe we don't even

10:06.000 --> 10:07.480
know about.

10:07.480 --> 10:13.200
So this is kind of the picture of where we are currently in the container D life cycle,

10:13.200 --> 10:20.760
1.5 is now end of life, we created 1.6 as a long term support release that again until

10:20.760 --> 10:25.720
2.0 is released we don't have an official end date but it will at least go out another

10:25.720 --> 10:27.080
few years.

10:27.080 --> 10:37.280
1.7 is an active release cycle right now and then 2.0 should release in a month or two

10:37.280 --> 10:43.440
based on kind of our current set of betas and release candidates that we're in and so

10:43.440 --> 10:46.320
that's where we are as far as releases.

10:46.320 --> 10:54.840
I just mentioned this isn't new news but 1.6 is our first LTS release as it says here support

10:54.840 --> 11:02.920
at least until February 2025 and of course it's always a trick to try and maintain some

11:02.920 --> 11:09.360
integrity about how you get things into the LTS and one of the reasons that's tricky is

11:09.360 --> 11:15.280
that Kubernetes may add features in the CRI we need to implement that CRI endpoint so

11:15.280 --> 11:21.080
it sort of looks like a new feature and so we're having to try and do our best to make

11:21.080 --> 11:27.000
sure that we maintain compatibility with Kubernetes without sort of opening up 1.6 to a lot of

11:27.000 --> 11:33.480
new features so that it's a stable and mostly just back ports of fixes and obviously anything

11:33.480 --> 11:36.640
security related.

11:36.640 --> 11:42.480
So yeah so we have this idea that late this year we'll even make that back port criteria

11:42.480 --> 11:48.320
a little bit stricter so that people can rely on just a long stable release without a lot

11:48.320 --> 11:52.000
of changes to its feature set.

11:53.000 --> 12:00.400
1.7 therefore is the end of our 1.x release cycle and what you'll see here is that we

12:00.400 --> 12:06.880
basically merged a lot of new features in 1.7 before we released it that we marked them

12:06.880 --> 12:13.080
all experimental so that people could start to try and use them and then in 2.0 all those

12:13.080 --> 12:18.320
become supported features and so I already mentioned the sandbox service and the API

12:18.320 --> 12:27.120
around that again we had this extensibility at the shim layer but with micro VMs and other

12:27.120 --> 12:33.600
ideas about how you treat the sandbox and how you configure it several of our contributors

12:33.600 --> 12:39.320
came up with the sandbox service and there's a whole API around that you can read a lot

12:39.320 --> 12:46.400
more about it on our either via the PRs or the documentation that's been merged.

12:46.400 --> 12:52.760
It was a preview in 1.7 but it'll be automatically turned on in 2.0 so in 1.7 there was a split

12:52.760 --> 12:59.760
that we actually had two implementations of the CRI one based on the sandbox and one our

12:59.760 --> 13:07.480
legacy code so that'll go away in 2.0 where it will just have the default sandbox implementation.

13:07.480 --> 13:14.760
NRI is very interesting if you've ever played around with OCI hooks and the ability to you

13:14.760 --> 13:22.320
know modify the specs so say I want to insert a device before my container starts the node

13:22.320 --> 13:32.280
resource interface is the sort of our decided implementation for doing that safely and having

13:32.280 --> 13:40.320
a way to have NRI plug-ins that you can that the administrative your cluster can enable

13:40.360 --> 13:48.240
and give the proper permissions to so NRI was experimental in 1.7 again will be fully supported

13:48.240 --> 13:56.240
in 2.0 and then transfer service so if you think about commands like save or export an

13:56.240 --> 14:03.280
image pull an image push an image in all our previous releases of container D that was

14:03.280 --> 14:10.080
a client side API and so your container client was actually doing those registry interactions

14:10.120 --> 14:16.960
in 1.7 and then of course in 2.0 this is now a service within the demon and so for some

14:16.960 --> 14:22.120
some use cases that was very important that the demon handles credentials of the demon

14:22.120 --> 14:28.560
handles the network connectivity to registries and also gives us a lot more tools for plugability

14:28.560 --> 14:34.840
of sort of source and sync so say I'm trying to copy an image from one place to another

14:34.880 --> 14:42.560
the transfer service gives you all that in a configurable way we also added username

14:42.560 --> 14:47.760
space support which was a new feature coming down so container D core had username space

14:47.760 --> 14:56.320
support but the CRI kept the enabled username spaces and Kubernetes added new API to the

14:56.360 --> 15:04.360
CRI and so those are now plumb through and implemented and supported in container D and

15:04.360 --> 15:13.360
then we had a lightweight RPC mechanism for shims and we've now added full GRPC support

15:13.360 --> 15:20.240
which was important again for certain use cases that people wanted so as I said we're

15:20.280 --> 15:28.280
in the midst of like our 2.0 release plan right now we are just about to I guess I didn't

15:28.280 --> 15:31.880
move that line over far enough because it's February now and we're just about to put out

15:31.880 --> 15:38.320
our first release candidate so we're possibly a little bit delayed from our original thinking

15:38.320 --> 15:46.640
but again 2.0 will be final sometime this spring and like I said all these sort of new

15:46.680 --> 15:56.680
capabilities that were in 1.7 will be final and supported in container D 2.0 it was our

15:56.680 --> 16:02.680
first chance to finally deprecate so we've been insistent on keeping a very stable API

16:02.680 --> 16:08.720
so that you know people aren't surprised that the latest container D release removed something

16:08.720 --> 16:14.720
so you can see that over the years we've deprecated a lot of features or at least mark them deprecated

16:14.760 --> 16:21.760
2.0 will be the chance for us to finally remove those and provide recommendations. One of

16:22.560 --> 16:29.560
our contributors added a nice feature so you can actually turn on deprecation warnings

16:30.000 --> 16:40.000
and you can actually run container D 1.7 or even 1.6 LTS and get notified of all the features

16:40.080 --> 16:45.280
you're using they're deprecated to help you prepare for 2.0. One of the things we were

16:45.280 --> 16:52.280
going to remove was support for our oldest configuration version but then someone wrote

16:54.480 --> 17:00.520
a converter that automatically converts your configuration so we won't actually have to

17:00.520 --> 17:05.000
deprecate that in the sense that you're not going to have to rewrite your config unless

17:05.080 --> 17:12.080
you'd like to it'll do automatically for you. There's still a lot of things we'd like

17:13.480 --> 17:20.480
to do that we're still working on so I mentioned this new transfer service again the CRI is

17:21.160 --> 17:27.560
a plug in implementation within container D that uses container D's APIs to do the work

17:27.560 --> 17:32.960
so when the CRI says pull an image the CRI implementation calls into container D to do

17:33.000 --> 17:38.080
that so one of the things we're trying to migrate that to use the new transfer service

17:38.080 --> 17:45.080
so that's in development to allow plugability for shims themselves and then there's two

17:46.000 --> 17:53.000
there's two kind of API layer enhancements that we're thinking about if you think about

17:53.000 --> 17:59.520
Docker, Docker kind of gives you this higher level API again HTTP based if you ever have

17:59.560 --> 18:06.080
built a tool that uses the Docker API it's at least nice in that you can say run container

18:06.080 --> 18:11.560
and give it all the configuration information and it just does it and when people have come

18:11.560 --> 18:18.560
to container D they're like hey you don't have the Docker API what can I use that's similar

18:18.560 --> 18:23.360
to that and we really don't I have to create a task I have to create a container resource

18:23.440 --> 18:29.560
that I have to start the task and so we're thinking about really creating some of these

18:29.560 --> 18:34.680
abstractions so that when people move to container D they have a higher level image service and

18:34.680 --> 18:41.180
container service so those are things that if you have ideas if you have concepts we're

18:41.180 --> 18:46.840
open to them these aren't things that we've built yet but we're planning to as we go into

18:46.840 --> 18:53.840
the container D to the T to dot oh time frame if you're interested in contributing or getting

18:55.160 --> 19:01.660
involved there's a couple channels in the CNCF slack that we hang out in that we you

19:01.660 --> 19:08.660
know talk about new features or people ask us questions we do have a live community meeting

19:09.320 --> 19:16.320
on zoom twice a month the second and fourth Thursdays if it's bad for your time zone let

19:16.440 --> 19:23.440
us know obviously that's always a tricky thing to handle with time zones and again go to

19:26.960 --> 19:33.960
the repo open issues give us your ideas pull requests and that's all I have thank you

