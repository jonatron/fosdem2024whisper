WEBVTT

00:00.000 --> 00:08.000
Hi guys.

00:08.000 --> 00:10.560
So no demo for me.

00:10.560 --> 00:13.680
I'm just here for some food for thoughts.

00:13.680 --> 00:24.880
And I will talk as a social scientist about a specific case.

00:24.880 --> 00:29.960
What I want to do, I have very little time, so I will move very fast, is to make two things.

00:29.960 --> 00:33.840
First, a very, very short history of Jupyter's notebooks.

00:33.840 --> 00:40.280
And then, sort of a plea for better knowledge of the way scientific software are made and their history.

00:40.280 --> 00:44.520
Because I think it takes a lot in our area.

00:44.520 --> 00:49.400
The question is, and my starting point is, where are our stories of scientific software right now?

00:49.400 --> 00:54.360
I mean outside the specific events and globally in the main scientific area.

00:54.360 --> 00:58.760
Because software won't say a lot about these everywhere.

00:58.760 --> 01:01.880
And they ran from bespoke and code to international stars.

01:01.880 --> 01:09.800
So we are software's every-round research, but very little stories of how they have been made and how they evolved.

01:09.800 --> 01:13.960
And social sciences rarely looked at those software.

01:13.960 --> 01:20.120
And when they look at them, they show there are very specific dynamics going on.

01:20.120 --> 01:24.600
Research of software are open indeed. They are looking for uncertain ends.

01:24.680 --> 01:31.720
Researchers are usually known as specific developers, and there are very specific funding constraints on how software are developed.

01:31.720 --> 01:36.120
And these are specific consequences of the way those specific kinds of software evolved.

01:36.120 --> 01:38.120
The code can have some brittlessness.

01:38.120 --> 01:41.800
There is a lot of intertwinement with scientific activity.

01:41.800 --> 01:47.400
And it led some researchers to become specialized in software engineering and developing software.

01:47.400 --> 01:51.640
And it led to a lot of specific journalist of friend.

01:51.640 --> 01:56.200
We have seen one with J.F.E. Light just at the beginning of this day of the room.

01:56.200 --> 01:58.200
So I want to take a step back.

01:58.200 --> 02:01.000
And because there is a lot of open question about that.

02:01.000 --> 02:07.400
First, how can we tell the stories of our scientific software and how social sciences can tell stories of scientific software?

02:07.400 --> 02:11.320
Because there are different journeys, especially in open source.

02:11.320 --> 02:14.680
And there are different steps in the history of each scientific software.

02:15.000 --> 02:18.360
Sometimes it stops, sometimes it continues for years and years.

02:18.360 --> 02:24.200
And on a broader level, there is much intertwinement between open source and academia.

02:24.200 --> 02:27.960
And especially, what are the links between open source and science?

02:27.960 --> 02:32.760
And how the connection is made between academics and software engineers?

02:32.760 --> 02:37.400
And just to quote Christopher Calti in two bits about UNIX.

02:37.400 --> 02:43.240
In fact, the UNIX spread first to university, computer science departments, and not to business government or not government organizations.

02:43.320 --> 02:48.600
And then that it also became part of the co-pedetrical practices of generation of programmers, computer scientists.

02:48.600 --> 02:52.200
So there is something connected between open source and open science.

02:52.200 --> 02:59.160
And I want in my very little time, but I had to work with a specific case, which is the case of Jupiter's notebooks.

02:59.160 --> 03:06.600
And to say it in one sentence, innovation, it is an innovation going from research to become a worldwide infrastructure of data science.

03:06.680 --> 03:13.000
It was released, notebooks were released in 2011, 2012, and spread everywhere.

03:13.000 --> 03:17.080
And they won the ACM award in 2017.

03:17.080 --> 03:21.320
And it is the perfect viewpoint to see how a scientist of course emerged,

03:21.320 --> 03:26.360
how he progressively get more and more abstract from this starting point in the laboratory,

03:26.360 --> 03:28.920
and diffuse within and outside academia.

03:29.720 --> 03:35.240
If you want a long version French history, there is a paper in Al, but I will keep it very short.

03:36.120 --> 03:39.400
I'm not here to advocate about Jupiter notebooks.

03:39.400 --> 03:42.440
I use them, I love them, but I won't try to convince you.

03:42.440 --> 03:46.600
And I'm quite sure there is a lot of people against them around here.

03:46.600 --> 03:49.960
And if you are not against them, but you want to see why people are against them,

03:49.960 --> 03:52.520
just have a look to the dry-gross talk.

03:54.280 --> 03:58.680
But I'm making some sure that you know approximately what Jupiter's notebooks are,

03:58.680 --> 04:01.080
because I have no time to discuss about them now.

04:02.040 --> 04:04.840
What I just want to say is a very quick story.

04:04.840 --> 04:10.680
It is first a PhD student, then a specific script, which is a Python,

04:10.680 --> 04:15.160
then notebooks appeared, and finally we got Jupiter, as we know currently,

04:15.160 --> 04:20.200
which is basically an infrastructure for interactive data science with different kinds of languages.

04:20.200 --> 04:24.760
And you can see this evolution with the Python Dev mainly released,

04:24.760 --> 04:31.880
with the progressive emergence of notebooks around 2010, and the appearance of Jupiter.

04:31.880 --> 04:34.040
I just go back on those different steps.

04:35.240 --> 04:36.840
So let's dive in this history.

04:37.640 --> 04:42.520
The important part is to have the context of the early 20, or the term of the millennium.

04:43.080 --> 04:48.760
And we are at a moment where we had a lot of achievement with the free software movements

04:48.760 --> 04:50.520
and open source development.

04:50.520 --> 04:54.600
And there is around the laboratories, paradigm of literal programming,

04:54.760 --> 04:55.960
from the next move.

04:55.960 --> 05:02.040
And for people coming from computational science or mathematics,

05:02.040 --> 05:06.520
there are a lot of proprietary open software specialized for interactivity

05:06.520 --> 05:09.240
with programming like MAPL, Mathematica or MATLAB.

05:09.800 --> 05:14.680
And at this moment, there are also the beginning of the scientific Python community,

05:14.680 --> 05:20.120
which just is starting to develop with the first SciPy workshop organized in 2002,

05:21.080 --> 05:25.400
in 2002 in Austin, Texas, especially in the south.

05:25.400 --> 05:33.080
And in this context, Fernando Perez was at the beginnings of Python and then Jupiter,

05:33.720 --> 05:39.800
was a PhD student in his fourth year, tried to finish dissertation and wanted to move from

05:39.800 --> 05:46.200
proprietary software to open source and Python and need something more interactive to do his work.

05:46.680 --> 05:54.840
And the script which will become Python was a simple personal fix for the problem

05:54.840 --> 06:00.040
of his own workflow and was really grounded in his common sense as a researcher in physics

06:00.040 --> 06:02.120
and computational science.

06:02.120 --> 06:07.640
So he wanted something to make sense, programming with interactivity.

06:07.640 --> 06:13.320
And this was the idea, the value inside this moment that will unfold in a job.

06:14.280 --> 06:19.240
In this basic case, the SciPy community, so the scientific Python community was quite an

06:19.240 --> 06:24.760
amplifier and there was a very quick reception, and to the secret reception by this community

06:24.760 --> 06:31.160
and the company which backed SciPy and thought posted IPytranslations on their web page.

06:31.160 --> 06:35.640
And they get a lot of support from this community, think back and contributors,

06:35.640 --> 06:42.680
and quickly after this start, other contributors joined the projects, especially Brian Kanger,

06:42.760 --> 06:44.840
who jumped in 24.

06:46.360 --> 06:50.920
And they managed to secure financial possibility to continue and it was attained with

06:50.920 --> 06:57.960
post-doctoral grants that fellow Peerers get at Colorado Bolger and then thanks to the support

06:57.960 --> 07:02.840
of a team in Berkeley which joined in 2008.

07:04.040 --> 07:10.040
So the fact is, IPytern is something really well grounded in academia and SciPy community.

07:10.280 --> 07:15.720
If you look to the main contributor of IPytern, almost everyone was a PhD,

07:15.720 --> 07:22.280
some of them are in a position even later after the emergence of the software.

07:24.040 --> 07:30.760
And notebooks in this context were just a feature which appeared later of IPytern.

07:30.840 --> 07:40.120
And because 2004 and 2011, the project developed, a lot of support was given by the

07:40.120 --> 07:44.760
Python community and there is a lot of features and tried multiple times to add a

07:44.760 --> 07:48.120
notebook feature because it was something already here in other software.

07:48.120 --> 07:52.520
There are five missed attempts before they were able to make a first

07:52.520 --> 07:57.240
fabled version of notebooks because some technology, especially for browser, was not available.

07:57.240 --> 08:04.840
So in 2011, 2012, a new release of IPytern included IPytern notebooks.

08:04.840 --> 08:10.280
It was the beginning of the history of Jupyter and it works pretty well because it was really

08:10.280 --> 08:16.600
quickly adopted by the SciPy community while outside the first specialty frontiers of the

08:18.520 --> 08:26.760
developers of IPytern. And in 2021, Nature can say that IPytern notebooks are one of the

08:26.760 --> 08:31.960
ten codes that are making science, sort of a huge thing inside the SciPy community.

08:33.000 --> 08:38.200
But progressively, the notebooks became something more important and they led to

08:38.760 --> 08:44.520
abstraction of what a notebook is and the way researchers are using programming in their work.

08:44.520 --> 08:48.600
And there are two dynamics. The first, it was a movement of abstraction

08:50.040 --> 08:55.880
out of the Python community and on the other one, it was strengthening of the practices in the

08:55.880 --> 09:02.520
project of software engineering. And this allowed the project to make a split and to move

09:03.160 --> 09:10.440
from a very specific IPytern tool to something more general, more abstract, which became the

09:10.440 --> 09:15.000
Jupyter project and was backed with six million dollar grants of foundations that support open

09:15.000 --> 09:20.440
science. So it was a huge move because it led to refactoring the code, change the philosophy,

09:20.440 --> 09:25.080
reconstruct your latest with the whole project and there was a lot of money involved because it

09:25.080 --> 09:32.280
needed a lot of, you know, hiring of software engineering to do so. So at this point,

09:33.320 --> 09:39.000
Jupyter became something which escaped the academic world and had a worldwide option.

09:39.000 --> 09:44.200
Notebooks became standard of data science and they were integrated a lot of services like,

09:44.200 --> 09:48.920
you know, Google collab or use in third party, you know, tools already existing like the

09:48.920 --> 09:55.240
regular studio code. So it was, you know, a turning point in the way this initially

09:55.240 --> 10:01.960
scientific project became something way bigger than scientific community. And somehow I would stop

10:01.960 --> 10:08.280
here because it opened a lot of questions. Of course, for the research community, the question

10:08.280 --> 10:13.240
are what the current users of scientific, of competition on the books, what kind of work

10:13.240 --> 10:20.520
are they doing? How does it make the way we are programming change? But at this point, the question

10:20.520 --> 10:28.600
I want to carry here is does Jupyter project or software are still scientific software? And so

10:28.600 --> 10:34.360
how does something which was created inside within the scientific community is starting to

10:35.000 --> 10:41.640
get another dimension and to be something bigger or no more, you know, a research tool.

10:41.720 --> 10:48.520
So just to rub up because I am going to the end of this presentation, I want to stand for more

10:48.520 --> 10:54.280
historical documentation, not only documentation of code, but historical documentation of how

10:54.280 --> 11:02.600
those specific software genres are associated with scientific specialties, institutional background,

11:02.600 --> 11:10.280
funding possibility. And we need to take this specific dynamic seriously because of course,

11:11.240 --> 11:16.680
for competition on the books as we are trying to do with other colleagues in different projects,

11:16.680 --> 11:21.800
and there is a GitHub repo if you want to add some archive in the story, but also for all the other

11:21.800 --> 11:27.720
tools that are inside our laboratories, inside our daily routine of scientists, because they are a

11:27.720 --> 11:34.520
huge part of the way we are crafting knowledge and they don't have the same history than other

11:34.520 --> 11:39.960
more material, you know, artifacts and scientific instruments as the discops or

11:39.960 --> 11:43.960
particle accelerators. So it's my point, I finish here, thank you.

12:00.920 --> 12:01.720
Sorry for the speed.

12:05.320 --> 12:08.840
How can we define scientific software?

12:11.400 --> 12:12.200
Very neat question.

12:15.320 --> 12:22.520
Can I and how can we define what is scientific software? I think the only way I can answer that

12:22.520 --> 12:28.840
is that software crafted within the context of scientific research at some point and that

12:29.480 --> 12:35.480
builds not for making, you know, a complete tool but for answering specific research question at

12:35.480 --> 12:43.000
some point in the advancement of knowledge. And usually there is a national literature about

12:43.000 --> 12:47.800
the way that scientific software are really different like that don't take really seriously

12:47.800 --> 12:54.280
into account at least at the beginning, versioning, test units, they are quite

12:54.360 --> 12:59.480
squirming the good practices of software engineering. At least at the beginning and then if the

12:59.480 --> 13:07.320
software is still around a few years after and gain more users, it started to integrate those

13:07.320 --> 13:12.680
good practices. So somehow there are two universe but more organizational and social universe different

13:13.800 --> 13:16.840
and I would say scientific software defined by the

