WEBVTT

00:00.000 --> 00:15.600
All right then. Thank you. Thanks for the holler. All right. So I think I did. Yeah.

00:15.600 --> 00:24.160
Okay. Okay. So my name is Karen. I work for OSDL and I'm going to take a step back actually

00:24.160 --> 00:30.880
from everything we've been discussing here today about what capabilities S-bombs have and what

00:30.880 --> 00:36.800
they need, what more capabilities they have to have as well and how about tools to create them

00:38.000 --> 00:44.800
and go back to, well, I think what they were originally for, what we thought we originally

00:44.800 --> 00:49.760
should use them for with license compliance. And there we have a lot of stuff where we're still

00:49.760 --> 00:56.000
redoing the same work again and again and again because creating S-bombs doesn't work automatically,

00:56.640 --> 01:02.080
at least for most of the software that we're dealing with in embedded Linux systems. So there's

01:02.080 --> 01:09.520
still a lot of manual work required and that's where sharing and reusing work makes sense and

01:09.520 --> 01:14.480
this is where the OSDL project comes in. So I think this is fairly obvious. I don't need to go

01:15.040 --> 01:21.200
into this a lot why reusing makes sense. We don't want it to redo work that has been

01:21.200 --> 01:26.800
done before that is being done again and again and again. I mean, we'll still get these questions

01:28.400 --> 01:36.000
every day that why do I have to extract copyrights from Linux kernel source code. Someone must have

01:36.000 --> 01:43.840
done that already. Why can't we reuse that? And so why not do that and why hasn't it been done before

01:44.560 --> 01:52.000
exactly what can we do? So you know more or less compliance toolchain could look like this.

01:52.720 --> 01:59.760
We can't share work everywhere but we can share work where most manual effort is required with

01:59.760 --> 02:05.920
scanning and with curating data because as good as the scanners are that are out there, we've

02:05.920 --> 02:09.600
heard about scan code, we've heard a lot of tools ort, ort, ort, ort, ort, ort, ort, ort, ort, ort,

02:10.320 --> 02:14.000
ort, ort, ort, ort. So all of the scanners are all the tools that use the scanner materials,

02:14.000 --> 02:19.200
they're really good but there's still quite a lot of mistakes. So to actually do license

02:19.200 --> 02:26.160
compliance properly, we still need to do manual curation of the data. And this is where the

02:26.160 --> 02:31.520
Ocelot project comes in, you can find more information on the Ocelot website. The data

02:31.520 --> 02:38.560
itself is available on the open source compliance repository and the package analysis repository

02:38.560 --> 02:44.400
there, you actually find stuff that you can already use today.

02:44.400 --> 02:48.440
License copyright analysis results for various packages,

02:48.440 --> 02:52.040
mainly from embedded Linux systems.

02:52.040 --> 02:57.000
We have about 320 when I last checked.

02:57.000 --> 03:00.880
So different versions, of course, are 200 unique packages,

03:00.880 --> 03:06.520
more than 1.5 million files that have been manually curated.

03:06.640 --> 03:10.880
For each package, we have some metadata, so

03:10.880 --> 03:15.360
where the package comes from, a package URL to find where the package comes from,

03:15.360 --> 03:16.720
download location, and so on.

03:18.200 --> 03:19.840
Then there's the S-bombs in there.

03:19.840 --> 03:23.760
So the S-PDX S-bombs is what we're focusing on for

03:23.760 --> 03:30.520
license compliance in different formats as well with the license conclusions in

03:30.520 --> 03:32.400
there with the copyright notices.

03:32.400 --> 03:37.320
And I think that is probably some of the most valuable part of this with

03:37.320 --> 03:41.280
comments on why a particular decision was made.

03:41.280 --> 03:45.320
Because sometimes it's not clear, you can find information in a file.

03:45.320 --> 03:49.760
I don't know, you know how licensing information is noted in some files.

03:49.760 --> 03:53.680
It doesn't really follow any standards, especially in older software that's

03:53.680 --> 03:55.280
still being used.

03:55.280 --> 03:59.520
And then you have to make a decision, you have to do some kind of interpretation.

03:59.520 --> 04:05.200
And this is explained as well as part of the S-PDX files that are available there.

04:06.680 --> 04:10.720
Also, the S-PDX files themselves are explained because what we find,

04:10.720 --> 04:13.360
even though there is a standard, there is a specification,

04:13.360 --> 04:18.640
people still understand it differently.

04:18.640 --> 04:25.560
So someone might expect to get an S-bomb from their suppliers and

04:25.560 --> 04:30.560
they have a certain expectation on what a particular S-PDX file looks like.

04:30.560 --> 04:36.400
But they understand the different tags and they're differently than the customer.

04:36.400 --> 04:41.200
So we have a clear explanation of how we understand the S-PDX tags and

04:41.200 --> 04:46.280
of course we try to be as close to the specification as possible there.

04:46.280 --> 04:52.080
And then also for convenience, there is a disclosure document where if you find

04:52.080 --> 04:56.280
a particular package that are reusing in exactly that way unmodified and

04:56.280 --> 05:00.000
exactly that version you might for license compliance just use the finished

05:00.000 --> 05:03.520
disclosure document with all the license texts and copyrights and

05:03.520 --> 05:06.200
acknowledgments and so on, aggregate it.

05:07.280 --> 05:15.440
So of course it's not yet big enough to immediately license an entire system,

05:15.440 --> 05:18.560
but it is definitely a start.

05:18.560 --> 05:24.680
So as I said, the question why this hasn't been done before has been around

05:24.680 --> 05:29.240
for quite a few years and why hasn't it been done before?

05:29.240 --> 05:33.040
And I think two of the main reasons are liability and trust,

05:33.040 --> 05:36.480
which are more or less two sides of the same coin.

05:36.480 --> 05:41.360
So on the first hand, who was willing to supply such information,

05:41.360 --> 05:46.040
which is legally relevant if we're talking about license compliance or

05:46.040 --> 05:55.000
if legally relevant information where companies have gone to court over licenses.

05:55.000 --> 06:02.280
So who was willing to provide this and say, look, you can use this and

06:02.280 --> 06:09.040
we don't give you a guarantee but we did our best to make this documentation as

06:09.040 --> 06:13.280
sound as possible so that hopefully you won't be taken to court if you use it.

06:13.280 --> 06:17.840
And then on the other hand, you're a company and you're putting out products and

06:17.840 --> 06:21.400
you reuse legal information that you found somewhere on the internet.

06:21.400 --> 06:24.360
How can you trust this information?

06:24.360 --> 06:29.480
And these are the thoughts that we were thinking when starting this project.

06:29.480 --> 06:34.160
So how can we limit liability, first of all, for ourselves and

06:34.160 --> 06:37.560
for anyone who's contributing?

06:37.560 --> 06:40.240
And of course we asked some lawyers about that.

06:40.240 --> 06:44.440
And the idea was to license as liberally as possible.

06:44.440 --> 06:51.640
So we went with CC0, 1.0, that gives you as many rights as possible.

06:51.640 --> 06:54.120
And it works well for documents as well.

06:54.120 --> 07:00.240
In this case, gift regulation supply and liability applies only for

07:00.240 --> 07:06.040
willful intent and trust negligence, which we try to avoid.

07:07.120 --> 07:09.360
Also, I think the times have changed.

07:09.360 --> 07:14.720
So maybe ten years ago there was a lot of worry,

07:14.720 --> 07:20.920
especially from the US, that there's gonna be lawsuits in the open source area.

07:20.920 --> 07:25.080
But there haven't been any, not with providing legal information,

07:25.080 --> 07:28.800
with providing support with licensing, there haven't been any or

07:28.800 --> 07:31.840
none that have been known.

07:31.840 --> 07:34.280
And so I think people just got braver and said, okay,

07:34.280 --> 07:37.200
maybe now's the time that we can do this.

07:37.200 --> 07:39.560
And then on the other hand, we have trust.

07:39.560 --> 07:43.440
So how can you establish trust in the information?

07:43.440 --> 07:47.400
I think that's fairly straightforward is provide good quality.

07:47.400 --> 07:51.160
So do the curation conscientiously, diligently,

07:51.160 --> 07:55.080
only let people do it or let people contribute to actually know what they're

07:55.080 --> 07:58.760
doing, so train anyone who wants to contribute.

07:58.760 --> 08:03.160
I mean, it's a bit of a bigger hurdle for contribution, but

08:03.160 --> 08:06.480
it's really important as well to keep up the quality.

08:06.480 --> 08:11.000
The same goes with review, so the stuff is on GitHub, so

08:11.000 --> 08:15.520
we can use that for the review process.

08:15.520 --> 08:20.120
And yeah, we'll stand with it also,

08:20.120 --> 08:25.400
we'll stand with our name to make sure or to promise that we'll keep

08:25.400 --> 08:28.560
the quality as high as it started out with.

08:30.400 --> 08:31.760
Let's wait around.

08:31.760 --> 08:39.760
So what are the curation guidelines that we established to ensure this quality?

08:40.760 --> 08:45.160
Well, we're working with Phosology, I think that's just our preference.

08:45.160 --> 08:46.760
You can use any other tool as well.

08:48.120 --> 08:52.560
We're using ScanCode as well for scanning and integrated into Phosology.

08:53.760 --> 08:58.320
And we use the source code as upstream as possible.

08:58.320 --> 09:02.440
So for ideally directly from the project page, so

09:02.440 --> 09:07.160
to not go through any of the stages that we've seen on some slides before where

09:07.160 --> 09:09.480
stuff gets added from package managers.

09:09.480 --> 09:13.560
But we'll try to start as upstream as possible at the moment.

09:13.560 --> 09:17.560
And then I think the diffs that you get from what's added by package managers,

09:17.560 --> 09:20.520
this is something that can be included as well, but we're not there yet.

09:20.520 --> 09:25.120
So at the moment, we're still trying to go with the origin.

09:26.120 --> 09:30.360
And then curating the license, as I said, there's manual work in there.

09:30.360 --> 09:32.960
And I think that's the valuable stuff of this project.

09:32.960 --> 09:39.040
So license findings, copyright findings that the scanners have created are curated

09:39.040 --> 09:45.440
manually, of course, with all the help that Phosology can give with that.

09:46.720 --> 09:51.480
So with our curation guidelines, I don't have to check the time.

09:51.480 --> 09:54.800
I don't think I'm gonna go into too much details on that.

09:56.200 --> 09:58.680
I mean, if you have looked at the scanner findings,

09:58.680 --> 10:02.680
you know why there is some manual work required still.

10:02.680 --> 10:07.920
So with copyrights, it means mainly that stuff that was incorrectly identified as

10:07.920 --> 10:13.040
copyright is removed, stuff that is added to a copyright notice that's not really

10:13.040 --> 10:17.280
part of it, formatting signs, there's sometimes license notices,

10:18.000 --> 10:22.200
just part of code that is identified as part of the copyright notice is

10:22.200 --> 10:23.960
removed from the copyright notice.

10:25.320 --> 10:29.240
And then there might be references to external files as well,

10:29.240 --> 10:34.760
like copyright by the authors, project authors, C file authors.

10:34.760 --> 10:38.400
And then this information has to be added as well.

10:40.400 --> 10:44.920
With the licenses, again, reviews then on file level.

10:44.960 --> 10:50.480
So every file of the source code tree is inspected,

10:50.480 --> 10:54.960
if the scanner has found anything, or if it is mentioned in some kind of

10:56.440 --> 10:59.640
notice file or similar.

10:59.640 --> 11:05.200
And this is done in addition or

11:05.200 --> 11:11.000
even though if a package contains some kind of metadata on licensing.

11:11.000 --> 11:12.560
Because we've made the experience, and

11:13.200 --> 11:17.760
probably a lot of you have as well, that metadata just gets outdated or

11:17.760 --> 11:22.840
is incomplete and so can't really be trusted entirely.

11:24.520 --> 11:29.520
And I think that might also be one of the reasons I can imagine that

11:29.520 --> 11:31.760
this question might come up.

11:31.760 --> 11:35.000
So why do we keep all this information in a separate place?

11:35.000 --> 11:39.760
Why not upstream it into the upstream projects?

11:39.760 --> 11:45.160
And I think there is some reluctance in upstream projects to provide legally

11:45.160 --> 11:47.480
relevant information along with the source code.

11:47.480 --> 11:51.360
And also because then we would have, again, we would have the same problem

11:51.360 --> 11:54.400
that it just won't be updated.

11:54.400 --> 11:57.400
It's just how people are.

12:00.080 --> 12:07.440
And yeah, okay, so we check, we do curating on the file level.

12:07.440 --> 12:10.640
We confirm or correct scanner findings as you do.

12:10.640 --> 12:16.960
We add individual license texts as you have, especially with BSD licenses and so on.

12:16.960 --> 12:19.800
So this is also something that's not usually done by scanners.

12:21.320 --> 12:26.880
We only tag main licenses if there is a clear main license

12:26.880 --> 12:30.360
given in the root directory for a package to not

12:31.360 --> 12:36.760
mislead anyone that this might be the only license that's in there.

12:38.280 --> 12:43.120
And as I said before, the license comments, the license comments tags of

12:43.120 --> 12:49.440
the SPDX explains any license decisions, any curating decisions that are not

12:49.440 --> 12:51.680
obvious or that need some level of interpretation.

12:51.680 --> 12:52.720
Yes, please.

12:52.720 --> 12:55.880
What's your correction rate on average?

12:55.880 --> 12:57.600
Do you mean how many scanners are finding?

12:57.600 --> 13:00.000
How many do you find that you're like we have to step in?

13:00.000 --> 13:02.240
Well, that differs.

13:02.240 --> 13:03.240
Yeah, sorry.

13:03.240 --> 13:05.720
The question was what our correction rate is.

13:07.480 --> 13:09.680
Well, it differs heavily per package.

13:09.680 --> 13:14.000
So there's some packets that are really good order where, I don't know,

13:14.000 --> 13:14.760
I don't have a number.

13:14.760 --> 13:19.440
I would guess around 10% and there are packages in horrible shape where

13:19.440 --> 13:23.440
it's closer to 80% that needs manual work.

13:24.880 --> 13:25.380
Yes.

13:25.380 --> 13:30.980
So let's say I processed more than 3000 packages for sovereignty and

13:30.980 --> 13:37.460
I would agree but maybe 20% in general.

13:37.460 --> 13:42.620
Yeah, yeah, so that was just some agreement about the numbers with someone

13:42.620 --> 13:45.220
who clearly has more experience than me.

13:45.220 --> 13:47.220
I can't say I've done 3000.

13:47.220 --> 13:49.060
Yeah.

13:49.060 --> 13:50.740
That's because of the gray hair.

13:50.740 --> 13:57.420
Maybe you're just talking in detail about the clearing process at Siemens.

13:57.420 --> 14:04.500
Well, you might guess that there might be some connection there as well.

14:04.500 --> 14:05.020
Yeah.

14:07.020 --> 14:09.660
Okay, so what do these license comments look like?

14:09.660 --> 14:13.620
They also follow some kind of heuristic, so

14:13.620 --> 14:17.500
the usually says the information in the file is quotes,

14:17.500 --> 14:19.900
whatever the information in the file is.

14:19.900 --> 14:25.820
And then we give a reason for why we made whatever conclusion is concluded.

14:25.820 --> 14:28.620
Example, we don't have a version of a license given.

14:28.620 --> 14:30.340
We find this, this file is GPL.

14:31.620 --> 14:35.500
And then the license comment would be as no version of the GPL is given.

14:35.500 --> 14:38.420
GPL 1.0 or later is concluded.

14:38.420 --> 14:42.780
But we interpret and this is clearly is an interpretation.

14:42.780 --> 14:46.740
So this is a legal step that when we find this file is GPL,

14:46.740 --> 14:52.620
one could also say GPL the most, I think it still is the mostly used GPL,

14:52.620 --> 14:53.980
is still version two.

14:53.980 --> 14:58.060
So you could also go ahead and conclude, they probably mean version two,

14:58.060 --> 14:59.580
because it's the most heavily used.

14:59.580 --> 15:02.700
But our interpretation here is if they only say GPL,

15:02.700 --> 15:07.900
the author wanted to give us the option to choose whatever version of

15:07.900 --> 15:13.620
the GPL there is available, so version one or later is concluded.

15:13.620 --> 15:16.220
So this is something that is a step of interpretation,

15:16.220 --> 15:18.940
but that is explained in the data.

15:18.940 --> 15:23.100
Or for example, a URL is given instead of a license text.

15:23.100 --> 15:27.660
And then of course, the URL is checked, a date is given if anything was found more

15:27.660 --> 15:30.180
often than not the URL is dead as well.

15:30.180 --> 15:33.260
And then maybe additional research is required.

15:34.420 --> 15:38.700
And then of course, the information and the date is given as well when that was

15:38.700 --> 15:39.180
checked.

15:40.820 --> 15:42.420
So what are, yes?

15:43.380 --> 15:50.220
But in that last case, do you report it to the packet itself?

15:50.220 --> 15:51.180
Yes, yes.

15:51.180 --> 15:55.700
So in case we do find problematic things, we report them back.

15:57.100 --> 16:03.660
I mean, there are some licenses that have a URL in the license text that is dead.

16:03.660 --> 16:08.940
So I mean, and then people usually say this license is outdated, but

16:08.940 --> 16:12.260
it's still valid for some files that are out there and that are being used.

16:13.460 --> 16:18.340
So sometimes, yeah, there is, sometimes it's helpful and

16:18.340 --> 16:20.980
projects react, but sometimes there's not.

16:23.340 --> 16:26.940
But yeah, we try to, whenever possible, we try to report it back.

16:26.940 --> 16:29.420
That was also the question, sorry for not repeating it.

16:29.420 --> 16:34.660
The question was if we push it back into the projects, yes, we do our best to do so.

16:34.660 --> 16:36.940
And then going forward on what you need to comment.

16:36.940 --> 16:44.580
If the upstream doesn't take it, how much, what's the hit rate in terms of them ignoring it?

16:44.580 --> 16:48.740
So what, the question is what the hit rate is in terms of them ignoring it,

16:48.740 --> 16:49.860
it's not large.

16:49.860 --> 16:51.620
Mostly they do take it.

16:51.620 --> 16:56.340
So because most projects are interested in being license compliant as well or

16:56.340 --> 16:59.260
making it possible for users to be license compliant.

16:59.260 --> 17:00.460
Because that's what we're trying to do.

17:00.460 --> 17:04.380
We're trying to do what the project or the authors wanted us to do.

17:04.380 --> 17:08.580
We're trying to make it possible for users to be license compliant.

17:08.580 --> 17:13.580
So projects are usually keen to take, to take any or to help.

17:15.420 --> 17:17.780
So you asked about the rate before.

17:17.780 --> 17:21.900
I couldn't give you exact numbers, but I can give you some example of what kind of

17:21.900 --> 17:25.100
scanner findings we do have to correct.

17:25.100 --> 17:26.860
Well, I think they're fairly typical and

17:26.860 --> 17:28.980
if you've done any curation, you'll know most of them.

17:30.060 --> 17:32.500
So I'll go over them fairly quickly as well.

17:33.500 --> 17:38.500
So we have not a license or something has been found that just simply isn't a

17:38.500 --> 17:42.140
license but a bit of code or just whatever.

17:42.140 --> 17:44.740
So that's removed of course.

17:44.740 --> 17:48.300
It might be not the files license.

17:48.300 --> 17:53.580
So it might be some part, some information that's content of the file but

17:53.580 --> 17:54.820
isn't the files license.

17:54.820 --> 17:56.660
We have that in documentation quite a lot.

17:58.300 --> 17:59.540
Then license text.

17:59.700 --> 18:03.820
This is something that of course scanners get wrong and

18:03.820 --> 18:07.420
I don't think there's any way to fix it either.

18:07.420 --> 18:12.980
If you have a file, a license.text file that contains the license text,

18:12.980 --> 18:17.620
then of course the license of that file isn't the license text.

18:17.620 --> 18:20.860
Most licenses don't have a license themselves.

18:20.860 --> 18:23.100
But new licenses for example have a license.

18:24.180 --> 18:26.820
But this is something that's corrected as well then.

18:27.820 --> 18:31.100
With generic license text, I said that before.

18:31.100 --> 18:36.180
So individual texts, if that differ from the generic license text it is.

18:36.180 --> 18:40.740
Of course provided we have improvised,

18:40.740 --> 18:46.460
imprecise findings in particular those with respect to version of a license.

18:47.820 --> 18:52.660
Then dual licensing cases, especially if it's not a single.

18:52.660 --> 18:57.180
So an easy dual license where you have this or that license but

18:57.180 --> 19:02.900
you have this or that and a third license or this one license and

19:02.900 --> 19:04.820
the second or a third license.

19:04.820 --> 19:09.060
So these need some manual work as well.

19:10.180 --> 19:14.500
We have license exceptions that we handle a bit differently than

19:14.500 --> 19:19.500
Phosology does to bring it into one finding as well.

19:20.500 --> 19:23.300
But that's maybe particular to Phosology as well.

19:23.300 --> 19:26.580
We have external references that need to be checked.

19:26.580 --> 19:29.620
As I mentioned before, it might be URLs.

19:29.620 --> 19:33.500
It might also just be external references within the package though.

19:34.700 --> 19:39.780
And that also there's a lot of problems there because then you have

19:39.780 --> 19:43.740
files that are integrated from a different project and then in their file,

19:43.740 --> 19:46.540
they say look in the copyright file in the root directory.

19:46.540 --> 19:50.260
But they mean the root directory from where they're originally from.

19:50.260 --> 19:53.340
So then that information isn't true anymore and

19:53.340 --> 19:58.180
we'll need to do some research and then of course explain what research has been

19:58.180 --> 20:01.300
turned to find out where the file originally came from,

20:01.300 --> 20:03.220
what license it is referencing.

20:05.220 --> 20:09.020
Yeah, so that usually takes a bit of effort.

20:09.020 --> 20:11.900
And then we have global license assignment or

20:11.900 --> 20:17.060
partially global license assignment that we don't usually use.

20:17.060 --> 20:21.340
Again, from the same reasons I said before that meta information is usually wrong or

20:21.340 --> 20:25.060
that stuff is included from different projects.

20:25.060 --> 20:30.140
So if there's a read me file that says all files in this directory are licensed

20:30.140 --> 20:34.940
under the following license, we usually don't go with that information.

20:34.940 --> 20:38.060
Unless it says in a particular source code file,

20:38.060 --> 20:40.980
it says for license information, see read me file.

20:42.820 --> 20:47.060
So this is something that just I think comes from experience.

20:47.060 --> 20:47.700
Yes.

20:47.700 --> 20:51.420
There's a package manager field where there's a specific license field.

20:51.420 --> 20:55.300
That's filled out with the proper SPDX and the fire, do you apply that to the.

20:55.300 --> 20:56.420
Okay.

20:56.420 --> 21:01.140
The question was about package managers that have a license field or

21:01.140 --> 21:04.020
that have a tag for what license is.

21:04.220 --> 21:10.580
So at the moment that's not come up yet because we're on like fairly at the bottom

21:10.580 --> 21:13.900
were from come from Linux based embedded systems.

21:13.900 --> 21:19.900
So this would try and so far we haven't gone into much that is managed by

21:19.900 --> 21:21.060
any package managers.

21:23.060 --> 21:28.820
But the stuff that I have looked at it depends if that's the only information

21:28.820 --> 21:30.380
that's there will go with it.

21:30.380 --> 21:33.140
But there might be different information again in the source code.

21:33.140 --> 21:35.700
And if possible, we'll always go back to the source code.

21:35.700 --> 21:39.020
But we do give, so if we do have third party, or

21:39.020 --> 21:46.140
meta information, we also add that to the information in the package,

21:46.140 --> 21:49.740
license comment I think is where we add that kind of information.

21:49.740 --> 21:50.260
Yeah.

21:52.140 --> 21:53.140
I think there was another question.

21:53.140 --> 21:53.940
Yeah, it's fine.

21:53.940 --> 21:55.060
It's fine.

21:55.060 --> 21:56.060
Okay.

21:56.060 --> 21:57.060
Okay.

21:57.060 --> 21:58.060
Yes.

21:58.060 --> 22:03.060
So the project seems to be mostly organized for collaboration among humans.

22:03.060 --> 22:04.060
Yes.

22:04.060 --> 22:06.060
And not really consuming information about machines.

22:06.060 --> 22:08.060
For instance, there is no API for media.

22:08.060 --> 22:10.060
Yes, yes, there's a REST API.

22:10.060 --> 22:13.060
But for instance, package naming seems to be quite vague.

22:13.060 --> 22:16.060
So, so there are uppercase, lower case, and this is the.

22:16.060 --> 22:21.060
Well, we tried to go with the, yeah, yeah, you pointed out something.

22:21.060 --> 22:27.060
The question was about if the project is made for human consumption or

22:27.060 --> 22:30.060
machine consumption, automatic consumption.

22:30.060 --> 22:35.060
And I said that there is a REST API to call the files,

22:35.060 --> 22:39.060
which is not described in the repo, but on the Ocelot website.

22:39.060 --> 22:41.060
If you go to ocelot.org.

22:41.060 --> 22:46.060
And then the question was about the naming schemes, and we tried to be as close to

22:46.060 --> 22:48.060
the upstream naming as possible.

22:48.060 --> 22:50.060
But then again, they're not consistent usually.

22:50.060 --> 22:56.060
So, yeah, there is no, so we didn't make up our own schemes, but

22:56.060 --> 22:59.060
we tried to stay with the upstream and where there's inconsistencies.

22:59.060 --> 23:01.060
Well, we mirror that.

23:01.060 --> 23:02.060
Yeah, that's right.

23:02.060 --> 23:03.060
Do you know where is described API?

23:03.060 --> 23:05.060
Because even on the website, I cannot find it.

23:05.060 --> 23:10.060
On the ocelot.org, oh, I might be on tools actually, sorry.

23:10.060 --> 23:12.060
On the wiki, wiki.oscelot.org.

23:12.060 --> 23:13.060
Try that.

23:13.060 --> 23:14.060
Yeah.

23:14.060 --> 23:19.060
So, lately I found in some license listing that we were, someone who was using

23:19.060 --> 23:24.060
libvui.id and that was TPL listed only and that was taking licenses.

23:24.060 --> 23:29.060
And then the readme file which tells me, yeah, various source code in this license

23:29.060 --> 23:32.060
has different licenses.

23:32.060 --> 23:36.060
Various source code in this package has different licenses.

23:36.060 --> 23:42.060
So, and looking at the source code, we are presumably using the functions.

23:42.060 --> 23:45.060
It says, oh, it's not strictly TPL.

23:45.060 --> 23:50.060
So, not poison from a proprietary business point of view.

23:50.060 --> 23:57.060
And how do you express that kind of, I mean, we had the discussion before regarding

23:57.060 --> 24:01.060
vulnerabilities that you need to get back to function level.

24:01.060 --> 24:08.060
Do you foresee that necessity in your work also or do you strictly handle packages because?

24:08.060 --> 24:10.060
We handle files.

24:10.060 --> 24:16.060
So, the question was about, as I said before, with the meta information is imprecise, let's

24:16.060 --> 24:17.060
say.

24:17.060 --> 24:23.060
So, we go back to file, source code file level and what we find there, we believe.

24:23.060 --> 24:25.060
So, there might, you're right.

24:25.060 --> 24:31.060
You might, we might have to dig deeper but then it's over snippet matching and we, so

24:31.060 --> 24:37.060
we only assign something to a package if there is a clear main license but we also warn you

24:37.060 --> 24:41.060
can have this information and take it but don't take it as the only information that's

24:41.060 --> 24:42.060
there.

24:42.060 --> 24:44.060
Okay, there's more questions?

24:44.060 --> 24:45.060
Yes.

24:45.060 --> 24:46.060
Thank you.

24:46.060 --> 24:48.060
What you're doing, I think it's great.

24:48.060 --> 24:53.060
I was wondering about the upstreaming of the information that your gallery, first you said

24:53.060 --> 24:57.060
well, upstream is often not interested in it and then you made a statement like they really

24:57.060 --> 24:59.060
like to be licensed compliant.

24:59.060 --> 25:01.060
Did you, do you have statistics on that?

25:01.060 --> 25:06.060
Like what is your gut feeling about this because my personal experience coming from the videos

25:06.060 --> 25:10.060
and that you can list, many people have interest but they need help with it.

25:10.060 --> 25:15.060
I would say these two license compliance we needed to recover have to help them but you

25:15.060 --> 25:18.060
were having a great data set to help them actually.

25:18.060 --> 25:19.060
Yeah, yeah.

25:19.060 --> 25:25.060
So, well what our experience is that when, oh sorry, the repetition, the question was about

25:25.060 --> 25:33.060
upstreaming, what our experience was with upstreaming, if the, how the projects would react with that

25:33.060 --> 25:38.060
and you said your experience was that they're keen about license compliance and I, well yeah,

25:38.060 --> 25:45.060
most of them are, there's exceptions always and we have that as well with, like with concrete

25:45.060 --> 25:52.060
and particular cases when we say this file, we found this problem, can you, or can you fix it,

25:52.060 --> 25:54.060
can you clarify?

25:54.060 --> 26:01.060
Then they, most of them, very, really, very most of them are fine but, well I have to admit

26:01.060 --> 26:07.060
also we haven't tried with super many projects but if we say we have, we did a complete license

26:08.060 --> 26:14.060
analysis of your entire package for this and this version release, here's the SPDX file, then

26:14.060 --> 26:20.060
they're not as keen to, to, to provide that via their website because that is legally relevant

26:20.060 --> 26:25.060
information so that rather, I think we had one or two projects who were like, oh that's cool,

26:25.060 --> 26:30.060
we'll point to your site but we're not going to provide it through our stuff because there is

26:30.060 --> 26:34.060
interpretation in there, as I said before which we explained in the comments.

26:34.060 --> 26:38.060
There's some interpretation in there so there's some wiggling room and I don't know,

26:38.060 --> 26:41.060
maybe we could reach more with more effort.

26:42.060 --> 26:44.060
Okay.

26:44.060 --> 26:48.060
There's a few more questions, do we have another minute or time's up?

26:48.060 --> 26:57.060
Okay, so, well contact me anyway, I'll skip to the last slide so there's some, yep, sorry.

26:57.060 --> 27:01.060
No, that's good though, I prefer discussions.

27:01.060 --> 27:06.060
So contact me at info at auselaugh.org and we can, we can chat anyway.

27:06.060 --> 27:07.060
Okay.

27:07.060 --> 27:08.060
Thanks.

