WEBVTT

00:00.000 --> 00:13.600
All right. Let's get going. Our next speakers are Paul and Malte from Azure Systems and

00:13.600 --> 00:18.280
they're here to talk about remote attestation and reproducible builds.

00:18.280 --> 00:27.360
Yeah, thanks. And I will start with some motivation. First, the topic of the talk is reproducible

00:27.360 --> 00:34.640
builds for confidential computing and why we need it. So first, the motivation. Yeah,

00:34.640 --> 00:40.800
confidential computing. What is the situation with confidential computing? We have trust issues,

00:40.800 --> 00:49.280
especially when we're running in the public cloud. So yeah, first of all, we trust no one.

00:49.280 --> 00:55.920
Well, that's not entirely true. We need some hardware we would have trust. So we have some

00:55.920 --> 01:03.680
will have to trust the hardware manufacturer. And in all the other components that we are using,

01:03.680 --> 01:11.520
we have to establish trust before we can rely on them. And we're doing this using remote attestation.

01:11.520 --> 01:23.840
So a quick overview of a remote attestation based on the Rats RC. So here we have our three entities,

01:23.840 --> 01:30.120
the attestor, the verify and the relying party. And the goal of the remote attestation procedure

01:30.120 --> 01:38.000
is that relying party can place trust in the attestor system. So how are we doing this? Inside

01:38.000 --> 01:43.360
the attestor, there's a testing environment and the target environment. And the testing environment

01:43.360 --> 01:50.840
is doing measurement of the target environment. And then handing out some evidence that is

01:50.960 --> 01:58.320
verified by the verify. And the verify uses two kinds of resources to verify the evidence. First,

01:58.320 --> 02:05.640
the endorsement, which usually provides guarantees about the authenticity and integrity of the

02:05.640 --> 02:13.160
evidence. And then some reference values that are compared to the claims that are inside the

02:13.160 --> 02:21.080
evidence. And yeah, there were verify does verification and produces an attestation result.

02:21.080 --> 02:28.320
And that attestation result is consumed by the relying party. And using this attestation result,

02:28.320 --> 02:38.880
the relying party can place trust in the attestor system. So the aspect about this remote

02:38.920 --> 02:45.760
attestation procedure we want to talk about here are the reference values. So as I already said,

02:45.760 --> 02:53.680
we use the reference values to compare or to check the claims inside the evidence. And yeah,

02:53.680 --> 03:01.320
some of these reference values represent the code identity of what we are actually running

03:01.560 --> 03:12.440
inside of our TE. And often these values are hashes over what we are executing. And as we all

03:12.440 --> 03:20.360
may know, hashes are one way functions. So it is really difficult to go back from a hash to what

03:20.360 --> 03:28.480
was actually hashed. So many questions arise from this. Where do these hash values come from?

03:29.440 --> 03:38.200
Who produces them? So who's our reference value provider? What do these hashes stand for? And

03:38.200 --> 03:45.320
how can we establish trust into them? And often the answer is we just can't. And in this talk,

03:45.320 --> 03:49.920
we want to present a way how we can establish trust and meaning to those reference values.

03:50.880 --> 04:01.640
So why might this be a difficult task? So the main scenario we are talking about here is about

04:01.640 --> 04:15.280
CVMs. And these CVMs have quite large TCBs. So we need to cover all of our software component with

04:15.840 --> 04:23.280
these reference values. And yeah, there are quite a lot of components from where bootloader

04:23.280 --> 04:30.720
kernel user space. We all need that stuff. Yeah, can be quite a lot of lines of code,

04:30.720 --> 04:39.280
not always only some lines of code like in rushroom. But the more interesting question

04:39.280 --> 04:48.640
is who is part of our trusted computing base? So software vendors usually and usually also a lot.

04:48.640 --> 04:58.480
And there are different ways that we are including people into our trust base. So maybe the more

04:58.480 --> 05:07.120
simple one is that we can consume code from other people. So well, that's quite usual. It's also

05:07.120 --> 05:14.160
okay. We can order the code before we include it. And ideally, our language ecosystems provide us

05:14.160 --> 05:23.280
with some mechanism to pin the dependencies that we use by some hash or so. So that's okay.

05:25.360 --> 05:33.520
The second mechanism is more problematic. We could consume binary artifacts. And going back from

05:33.600 --> 05:42.640
a binary to source is expensive. And yeah, typically, this is when we install packages using a package

05:42.640 --> 05:50.160
manager, or if we use prebuilt VM images. And even if those binaries are signed, if we rely on the

05:50.160 --> 05:58.320
signature, we include the signer into our trust domain. And then there's the third case that is

05:58.320 --> 06:05.200
even worse. These are the situations where we cannot choose what we want to what is actually

06:05.200 --> 06:10.880
running inside of our TCP. So this is, for example, the case when we have like something

06:12.240 --> 06:19.920
hardware compatibility layer running below our guest OS in the CVM. Or if we are not able to

06:20.480 --> 06:23.120
run customer provided firmware in the public cloud.

06:27.360 --> 06:35.520
Okay, so talking a bit about the consequences here. Yeah, every software vendor we include on

06:35.520 --> 06:42.960
our trust boundary could potentially run an attack on us. For example, by delivering malicious

06:42.960 --> 06:48.720
reference values, so reference values for malicious binary. It's just really difficult to

06:48.720 --> 06:56.560
check for us what these values stand for. And in the end, we have no insights what is actually

06:56.560 --> 07:04.000
running in our system. So a simple solution could be we build everything from source, right?

07:04.000 --> 07:12.720
Source is good. So we can audit the source. But usually we are not the consumers of the things

07:12.720 --> 07:18.960
we built. So we're not the end users. And as a consequence, there's one remaining software

07:18.960 --> 07:27.280
vendor in the trust boundary. And that are we. So that's not good too. And the actual goal here is

07:27.280 --> 07:39.520
to provide a testable systems for the end user. And reproducible bugs can help us to do this.

07:40.240 --> 07:43.840
And much of it will continue to tell you about reproducible bugs.

07:46.320 --> 07:53.840
So thank you. So let's quickly talk about what reproducible builds actually are. So the basic

07:53.840 --> 08:02.080
idea is you have software development principles where third parties or anyone can take the same

08:02.080 --> 08:10.640
inputs and produce the same binary output. And this part of being independently verifiable

08:10.640 --> 08:17.600
is really important to us. And let's just take a small step back and look at our perspective.

08:18.400 --> 08:25.360
We are building a lot of software that is supposed to run inside of enclaves. For example, we're

08:25.360 --> 08:33.280
building a full Kubernetes distribution with OS images and containers. And we really want people

08:34.000 --> 08:43.440
not to have to just trust us because we are like reputable. We want people to take the stuff we

08:43.440 --> 08:52.720
build, look at the source code, verify it, rebuild the binaries. And only then, only if they can

08:52.720 --> 08:58.880
rebuild the same binaries, they can also just get to the same measurements and then they know that

08:58.880 --> 09:08.480
they can trust us. So in the perfect world, this is what we would like to have. We just take the

09:08.480 --> 09:16.720
source code, we put it into a function and we get out the reference values. But as you will see,

09:16.720 --> 09:28.160
this is sadly not the reality today. So looking at this more closely, you have the source code

09:28.720 --> 09:35.440
and then you have some kind of build process. And then what you get out is binary artifacts like the

09:35.440 --> 09:44.080
firmware, the kernel, anything that goes into the user space applications. And from these, you derive

09:44.160 --> 09:52.880
the hashes or other reference values used for remote attestation. And in reality, this is already

09:52.880 --> 10:00.640
where you start running into problems because the software itself is not open and you cannot rebuild

10:00.640 --> 10:10.320
it if the source code is not public, basically. So sometimes this is where you just have to stop.

10:11.280 --> 10:17.440
But then if you're lucky, the source code is actually available. But that's when you run into a

10:17.440 --> 10:24.320
whole different set of problems because if you want to build the same firmware and the same kernel

10:24.320 --> 10:30.480
and the same user space and everything else, you notice that if you build your software,

10:30.480 --> 10:37.760
it doesn't actually just depend on the source code. It actually also depends on timestamps and

10:37.840 --> 10:44.880
randomness and inputs that you didn't know you had. And also it depends on tools and specific

10:44.880 --> 10:51.840
versions of them. So let's say you actually managed to get all of this under control.

10:53.520 --> 11:00.880
Then you can still run into this situation where you get the same firmware and everything else,

11:00.880 --> 11:08.400
the whole stack, the whole TCB is the same. And you boot it in a trusted execution environment.

11:08.400 --> 11:14.000
And still the evidence that you extract is different. And this is often the case if you

11:14.800 --> 11:21.520
include anything in the measurement that is not part of the code, but it's actually dynamic,

11:21.520 --> 11:28.160
like a timestamp at boot or the instance ID of your virtual machine. And yeah, in this case,

11:28.160 --> 11:36.000
you have to do some run a policy engine on the other side, basically. Yeah, so this can be solved,

11:36.000 --> 11:44.800
but it's also really annoying. Next, we will quickly look at who's already doing good work

11:45.520 --> 11:54.640
in that field. So first is the AWS UEFI firmware. And this is used today to run

11:59.760 --> 12:07.840
AMD, SCV, SNP virtual machines. And it's really nice. It's just EDK2,

12:07.920 --> 12:14.400
OVMF firmware with some patches, but they also provide the full build system. So you can just

12:14.400 --> 12:20.720
download it and rebuild it from source and actually get to the same measurements. Yeah,

12:20.720 --> 12:27.920
another example is Constellation. This is our stuff that we built in there. We actually provide

12:28.720 --> 12:35.760
every container image, any tool, the whole operating system, anything can be rebuilt from

12:35.760 --> 12:44.560
source. And it's all reproducible. And yeah, then there's also the confidential containers,

12:46.640 --> 12:53.920
cloud API adapter, and there's the peer ports images. They now have an option to build

12:53.920 --> 13:03.600
images with MKOSI that are now also mostly reproducible. And we also have a GitHub repository

13:03.680 --> 13:11.360
where we basically just wrote on all of the steps that are needed to take a general purpose

13:12.080 --> 13:20.240
Linux distro and get also reproducible builds for that. And it's also documented and we show you

13:20.240 --> 13:26.240
all of the steps that we took. So you can play around with that, which I think is like a good

13:26.320 --> 13:32.720
starting point. So that's the repository if you want to have a look. Yeah.

13:35.760 --> 13:44.400
So now some concrete help if you actually want to do this. So this is for building OS images

13:44.400 --> 13:53.120
in particular. First of all, you need to pin your build tools. Basically, if you don't do that,

13:53.200 --> 13:58.720
tomorrow you will have a newer version of a tool and you will have a different result.

13:59.440 --> 14:06.400
And what we noticed is if we use something like NICS, we can pin all of the build dependencies

14:06.400 --> 14:13.840
in a very nice way. And also we were able to patch a lot of the tools in NICS. So they actually

14:13.840 --> 14:23.520
become reproducible. For example, we had a tool like MKFS for FAT partitions that was not

14:24.560 --> 14:28.400
reproducible. We could make sure that the version NICS was actually

14:31.440 --> 14:39.520
creating reproducible outputs. The second thing is about any things that you depend on. So that's

14:39.600 --> 14:44.880
libraries of your building software or binary packages if you have to include them in your image.

14:45.920 --> 14:51.520
First of all, you want to pin them. So you want to make sure that you know in advance the hashes

14:51.520 --> 14:59.520
of everything that will be a dependency. And then it's not done just during that. You also have to

14:59.520 --> 15:04.800
make sure that they are available in the future. So you have to archive them. You have to make them

15:04.800 --> 15:11.120
available. And you also need to have a mechanism then to actually operate your log files because

15:11.120 --> 15:15.600
if you just pin them, you will have a lot of security vulnerabilities in the future.

15:17.680 --> 15:24.160
Yeah. And then it goes on. You really want to build every piece of software in a sandbox because

15:24.160 --> 15:30.240
otherwise you don't actually know if your build is reproducible because it could depend on something

15:30.240 --> 15:38.000
that is not actually there in the future. So user build system that does this, there's MKOSI for

15:38.000 --> 15:44.720
building OS images. There's NICS and NICS OS, which are really great. And there's Bazel that also

15:44.720 --> 15:54.400
uses Sandbox. Yeah. It will eliminate a whole class of issues. And then you also really want to restrict

15:54.480 --> 16:02.080
build actions or install actions or any other kind of logic to only perform deterministic steps.

16:03.040 --> 16:11.440
For example, I think the Cocoa project was using HashiCorp Packer and that has the issue that it can

16:11.440 --> 16:19.360
run arbitrary steps, which means it could, for example, run up to get install. And then you

16:19.360 --> 16:25.200
basically have no idea what version of something will be installed. And the same applies to Docker

16:25.200 --> 16:36.720
files. So just use something that only does what you want. So this was our talk. There's some

16:37.360 --> 16:43.440
important things we want to give to you to think about, learn about reproducible builds.

16:43.840 --> 16:52.160
We want you to provide an open software stack for CC. And we want to enable the community to

16:53.520 --> 17:00.640
reproduce the reference values that we put out into the world so we can remove ourselves from the

17:00.640 --> 17:19.280
trust. So thank you. Thanks a lot. So I have a bit of a philosophical question. And that's related to

17:19.280 --> 17:26.160
sort of the sort of like the relationship between reproducible builds and build provenance. So we

17:26.160 --> 17:31.840
also had, like for the last time, there was last talk, there was a question about like S-bombs.

17:31.840 --> 17:38.080
And this is of course something that is of increased importance because of the focus we have on supply

17:38.080 --> 17:43.280
change security in general. And there is also people working on build provenance, right, where you

17:45.520 --> 17:51.040
have the build hermiticity and you have like a record of how software was built. And that also

17:51.040 --> 17:57.840
gives you like some guarantees of how you end up with a certain set of reference values,

17:58.560 --> 18:05.040
even if it's not fully reproducible, right? So, but you know, from the provenance,

18:06.640 --> 18:14.800
like what goes into this recipe. So do you have like any thoughts on like pros and cons or like

18:14.800 --> 18:23.760
reflections around these two related topics? Yes, definitely. So I think first of all, if you're

18:23.760 --> 18:29.360
able to have reproducible builds, you already basically have an S-bomb because it must be the

18:29.360 --> 18:35.520
source code and anything that's locked in there. So it's actually like already the S-bomb there.

18:35.520 --> 18:42.800
And then also, if you have an S-bomb, how do you trust the S-bomb? Because if someone just gives you

18:42.800 --> 18:51.920
the S-bomb and it's not signed, it could be fake. And if someone does create like a trustworthy S-bomb,

18:51.920 --> 18:59.200
it probably needs to be created in a confidential VM or something like that. So then you actually

18:59.200 --> 19:06.800
make the whole problem a lot more complicated. So if you can just use reproducible builds and then

19:06.800 --> 19:08.800
the problem is just fixed.

19:22.000 --> 19:28.240
So the question was about if this also solves the problem of pinning the toolchain.

19:37.520 --> 19:39.520
Yeah.

19:45.040 --> 19:52.240
Yes. So the question is about like if you can trust the toolchain that bootstraps the whole system.

19:52.240 --> 19:59.600
And yeah, I think you can bootstrap yourself from nothing. And I think also the NICS project

19:59.600 --> 20:02.240
has some kind of bootstrapping where they do exactly that.

20:06.800 --> 20:09.360
So that's it.

