WEBVTT

00:00.000 --> 00:09.000
We'll be starting our next talk here from Tawana Czelec.

00:09.000 --> 00:16.000
She lives in Amsterdam, but she's from Istanbul.

00:16.000 --> 00:20.000
She loves historical fiction and free diving.

00:20.000 --> 00:26.000
Surprisingly, she's dived 25 meters down to save her GoPro before,

00:26.000 --> 00:28.000
which we got a bunch of asses this year.

00:28.000 --> 00:30.000
This is pretty crazy.

00:30.000 --> 00:32.000
So thank you so much and take it away.

00:32.000 --> 00:38.000
Alright, thank you.

00:38.000 --> 00:41.000
I hope, let me know if I need to eat the mic.

00:41.000 --> 00:47.000
Alright, so this particular talk is a bit of an outlier to the talks I usually give

00:47.000 --> 00:52.000
because it's nearly fully a showcase of a very simple actually project

00:52.000 --> 00:56.000
that I built with some community members of Haystack

00:56.000 --> 01:01.000
and some functionalities of Haystack that made this project possible.

01:01.000 --> 01:06.000
And then I'll end up by showing a few other projects that we built together.

01:06.000 --> 01:09.000
And the way it usually goes with the Haystack community,

01:09.000 --> 01:13.000
so a quick side note, I work for Deepset,

01:13.000 --> 01:16.000
which is the company behind the open source project Haystack.

01:16.000 --> 01:22.000
And we have a Discord server, and from time to time, this is basically what happens.

01:22.000 --> 01:26.000
So this evening I say, I'm a bit bored, I want to do something,

01:26.000 --> 01:30.000
and I go and join a voice channel on our Discord,

01:30.000 --> 01:34.000
and there's one particular community member that I have to give a shout out to

01:34.000 --> 01:37.000
for this particular talk, Rec,

01:37.000 --> 01:41.000
because oftentimes Rec will then come up with a random idea,

01:41.000 --> 01:45.000
and either myself or the two of us will just share screens

01:45.000 --> 01:48.000
and do some pair coding, hack together something.

01:48.000 --> 01:54.000
And this particular project is exactly something that happened like this.

01:54.000 --> 01:59.000
I'm pretty sure a lot of you know this page, it's Hack and Use, there's a lot,

01:59.000 --> 02:01.000
it changes a lot.

02:01.000 --> 02:06.000
So the idea that Rec came up with was, well, why don't we build something

02:06.000 --> 02:12.000
very simple that gives you like a TLDR of the top K Hack and Use articles.

02:12.000 --> 02:15.000
So we built that, and then just recently,

02:15.000 --> 02:18.000
and when I say recently like two days ago,

02:18.000 --> 02:24.000
that became a hugging face space that you can actually get to at this QR code.

02:24.000 --> 02:31.000
And we've kind of vamped it up a bit, and we can now pick between two models.

02:31.000 --> 02:35.000
You can use MixTrail or an OpenAI GPT-4 model,

02:35.000 --> 02:40.000
and then provide a number of the top something,

02:40.000 --> 02:44.000
and I make it go up to five because no one's made of money,

02:44.000 --> 02:49.000
and you're going to be making APR calls to OpenAI possibly,

02:49.000 --> 02:53.000
so it goes up to five, and this is literally when I ran it yesterday,

02:53.000 --> 02:56.000
and the funny thing about this one was that at the time,

02:56.000 --> 02:59.000
the second top article was actually the FOSTA and Livestreams,

02:59.000 --> 03:04.000
but you get like a short summary of what the top three articles are at this point

03:04.000 --> 03:09.000
with a URL to get to the full article itself.

03:09.000 --> 03:13.000
So my whole talk is based on how this was made possible,

03:13.000 --> 03:17.000
how we actually built this project, and we built it with Haystack.

03:17.000 --> 03:21.000
Haystack is a fully open source, large language model framework.

03:21.000 --> 03:23.000
It's all written in Python.

03:23.000 --> 03:27.000
The main ideas behind Haystack is providing tooling for developers,

03:27.000 --> 03:31.000
so nothing is a plug-and-play really, you're building it all yourself,

03:31.000 --> 03:36.000
and the two main structures in Haystack that make it possible

03:36.000 --> 03:39.000
are called pipelines and components,

03:39.000 --> 03:44.000
and a pipeline is made up of a few components attached to each other

03:44.000 --> 03:48.000
where every component is forwarding some data to the next one.

03:48.000 --> 03:51.000
And I'm not going to get into what RAG is,

03:51.000 --> 03:53.000
I'm pretty sure a lot of you know what RAG is at this point,

03:53.000 --> 03:58.000
but a retrieval augmented generative pipeline might look a bit like this.

03:58.000 --> 04:04.000
You have a query, and then an embedder component is creating an embedding for that query,

04:04.000 --> 04:09.000
then a retriever component is retrieving the most relevant context

04:09.000 --> 04:11.000
for your LLM to actually use,

04:11.000 --> 04:16.000
and then it's forwarding that to what in Haystack world we call a prompt builder,

04:16.000 --> 04:20.000
so that context gets embedded into your prompt itself,

04:20.000 --> 04:23.000
and then you use the generator,

04:23.000 --> 04:28.000
and that can be any model, open source model of a hugging phase, or open AI, etc.

04:28.000 --> 04:30.000
And then you get an answer.

04:30.000 --> 04:37.000
This is a pipeline, but what a pipeline does is really dictated by what components it's comprised of.

04:37.000 --> 04:42.000
You might also create a pipeline that indexes documents.

04:42.000 --> 04:44.000
I'm not really going to get into this here,

04:44.000 --> 04:47.000
you're just basically fetching the contents of a URL,

04:47.000 --> 04:53.000
and then writing that into one of the available document stores that we have.

04:53.000 --> 04:59.000
But this is all made possible because of the structure called a component,

04:59.000 --> 05:03.000
and a component in Haystack is something that could have, for example,

05:03.000 --> 05:06.000
in this case it has two inputs and an output,

05:06.000 --> 05:10.000
but you don't necessarily have to have a defined output.

05:10.000 --> 05:16.000
Haystack doesn't really make assumptions as to what a component has to be.

05:16.000 --> 05:19.000
It can also be something that has two inputs, two outputs,

05:19.000 --> 05:23.000
and then the idea is you attach those components to each other,

05:23.000 --> 05:25.000
and you can be very, very specific here.

05:25.000 --> 05:33.000
You can be specific into saying, like, I want output one to be forwarded to input two of the next component.

05:33.000 --> 05:35.000
You can be very, very precise here.

05:35.000 --> 05:41.000
And maybe you can already start to see this starts to look quite like a graph.

05:41.000 --> 05:44.000
So how do we build these components?

05:44.000 --> 05:50.000
There's only a few requirements for something to be a component in Haystack world.

05:50.000 --> 05:56.000
We provide a bunch of ready-made components that, if you go to the Haystack documentation,

05:56.000 --> 06:03.000
you'll see a bunch of sections there, generators, converters, embedders, etc.

06:03.000 --> 06:08.000
These are all basically components that have been built exactly like this

06:08.000 --> 06:11.000
that we just provide in the package itself.

06:11.000 --> 06:13.000
But what you can do is build your own.

06:13.000 --> 06:16.000
And what you need to have is a class.

06:16.000 --> 06:22.000
So here I've just got a very, very well-named MyCustomComponent class.

06:22.000 --> 06:24.000
I need a run function.

06:24.000 --> 06:27.000
And the other thing you need are these decorators.

06:27.000 --> 06:31.000
So basically this is telling Haystack that this class is a component.

06:31.000 --> 06:34.000
And then the second one is around the run function.

06:34.000 --> 06:37.000
And this is actually used for pipeline validation down the line.

06:37.000 --> 06:44.000
But it's basically telling the Haystack pipeline what outputs it should expect from this component.

06:44.000 --> 06:51.000
In this scenario, I've got a MyCustomComponent that's expecting a query,

06:51.000 --> 06:56.000
which is supposed to be a string, and then it's returning documents.

06:56.000 --> 06:58.000
In this case, it's just hard-coded.

06:58.000 --> 07:00.000
It returns high and by.

07:00.000 --> 07:03.000
So we know that this, whatever query this gets,

07:03.000 --> 07:07.000
is going to be returning two documents, high and by.

07:07.000 --> 07:13.000
And this has then led to quite a bunch of components that don't actually,

07:13.000 --> 07:17.000
they're not served through the Haystack framework itself, not all of them are,

07:17.000 --> 07:20.000
but you can just install them as separate packages.

07:20.000 --> 07:24.000
And it's meant community members have just gone ahead and built components

07:24.000 --> 07:28.000
that they need for their very specific custom needs

07:28.000 --> 07:33.000
and made them available to the rest of the Haystack community.

07:33.000 --> 07:38.000
So let's come to our Hack and Use TLDR, if you will, project.

07:38.000 --> 07:44.000
The idea was that we wanted a component that would take top K,

07:44.000 --> 07:49.000
that could be a number, and it would return articles.

07:49.000 --> 07:54.000
And again, this is a colab that you can use, it should be running.

07:54.000 --> 07:58.000
And the way we did that was, this is very much pseudocode.

07:58.000 --> 08:01.000
Later, if we have time, I'm going to show you the actual code.

08:01.000 --> 08:06.000
But we built this component called Hack and Use Fetcher.

08:06.000 --> 08:11.000
It takes top K, it queries the Hack and Use API

08:11.000 --> 08:14.000
and gets the top whatever number we've decided.

08:14.000 --> 08:18.000
And the other thing I wanted to show here is, at the end,

08:18.000 --> 08:23.000
I don't know how well you can see it, but we've also added some meta information,

08:23.000 --> 08:27.000
because down the line, we can use meta information in our prompt,

08:27.000 --> 08:31.000
because you also get titles of the Hack and Use articles,

08:31.000 --> 08:35.000
you also get URLs, which is great for referencing down the line too.

08:35.000 --> 08:39.000
So we return full documents that have the content,

08:39.000 --> 08:44.000
the title, and the URLs of each Hack and Use articles that we fetched.

08:44.000 --> 08:48.000
And at the end of the day, we're going to be building a pipeline

08:48.000 --> 08:51.000
that looks like this, and everything you see in green

08:51.000 --> 08:53.000
is already provided with Haystack.

08:53.000 --> 08:57.000
So that came with pip install Haystack AI anyway.

08:57.000 --> 09:00.000
And the orange is what we've just built for ourselves,

09:00.000 --> 09:04.000
and it just slots into the rest of the Haystack pipeline ecosystem.

09:04.000 --> 09:11.000
And for this co-lab that I've shared with everyone here is,

09:11.000 --> 09:13.000
I've decided I'd just go ahead and use Mixstrahl,

09:13.000 --> 09:18.000
I've tried this with OpenAI models a lot, so why not try something new?

09:19.000 --> 09:25.000
And then the last thing I want to highlight about this particular pipeline

09:25.000 --> 09:27.000
is how the prompt is being built.

09:27.000 --> 09:31.000
So prompt templating happens in Haystack world

09:31.000 --> 09:35.000
by a component called the prompt builder.

09:35.000 --> 09:39.000
And templates use Ginger templating.

09:39.000 --> 09:42.000
And what's really important here is,

09:42.000 --> 09:46.000
okay, we have an instruction, you'll be provided with one or more

09:46.000 --> 09:49.000
hack and use articles, please provide summaries.

09:49.000 --> 09:55.000
But if you look at this close theme, we have actually a for loop.

09:55.000 --> 09:59.000
So this prompt builder automatically knows that it should be expecting

09:59.000 --> 10:03.000
an input called articles, and it can loop through those articles,

10:03.000 --> 10:08.000
and then it can access the contents of that article object

10:08.000 --> 10:11.000
individually in every step of that for loop.

10:11.000 --> 10:16.000
And that's how we're embedding URL here as well.

10:16.000 --> 10:18.000
And this is the final product.

10:18.000 --> 10:21.000
At the end of the day, we were able to build a pipeline where,

10:21.000 --> 10:24.000
given top three, we were able to run it,

10:24.000 --> 10:28.000
and we've got the TLDR summary and the URLs that you can find,

10:28.000 --> 10:34.000
the full articles of hack and use, current hack and use top articles.

10:34.000 --> 10:37.000
So with that, I want to show a few other projects

10:37.000 --> 10:41.000
that this custom component building functionality has enabled.

10:41.000 --> 10:44.000
The next one is slightly questionable.

10:44.000 --> 10:46.000
Please take it with a pinch of salt.

10:46.000 --> 10:50.000
I put it everywhere on that tugging face space too.

10:50.000 --> 10:55.000
And the idea came from, at the time, Twitter was very different.

10:55.000 --> 11:00.000
So the idea was, could we like build a Twitter fetcher that,

11:00.000 --> 11:03.000
given a username, could give you, this is really bad,

11:03.000 --> 11:06.000
could give you like a vibe check of the account,

11:06.000 --> 11:09.000
and we called it like, should I follow?

11:09.000 --> 11:13.000
And it gets like the last, I think, 40 posts of that user.

11:13.000 --> 11:15.000
Obviously after that, Twitter changed,

11:15.000 --> 11:18.000
so I went ahead and built a master on fetcher.

11:18.000 --> 11:22.000
You can also find that on the Haystack integrations page.

11:22.000 --> 11:27.000
And the best way I like showcasing this is actually using my boyfriend's

11:27.000 --> 11:31.000
master on account, because every time this tells me something a bit funny

11:31.000 --> 11:34.000
about his account, once it called him pessimistic,

11:34.000 --> 11:39.000
this time it called him sarcastic when discussing personal opinions.

11:39.000 --> 11:41.000
So that's also open.

11:41.000 --> 11:44.000
I think I linked to it in the notes as well,

11:44.000 --> 11:46.000
so you can go ahead and try that out.

11:46.000 --> 11:49.000
You just need to provide the full master on username.

11:49.000 --> 11:53.000
Without the at at the front, that's a bug I haven't fixed yet.

11:53.000 --> 11:55.000
Another thing that this enabled,

11:55.000 --> 12:00.000
actually not only used the Haystack custom component functionality,

12:00.000 --> 12:04.000
but also, I don't know if you remember when I showed the components earlier

12:04.000 --> 12:07.000
with the two outputs and the two inputs, et cetera,

12:07.000 --> 12:13.000
you can already start to imagine that you can actually have these pipelines loop too.

12:13.000 --> 12:18.000
So the idea was, what if we have some meeting notes,

12:18.000 --> 12:21.000
and we have our own GitHub repository,

12:21.000 --> 12:23.000
and anyone who's used GitHub repositories,

12:23.000 --> 12:26.000
you know that you can create those issue labels

12:26.000 --> 12:29.000
that are very specific to that GitHub repository.

12:29.000 --> 12:33.000
Could we build a system that, given meeting notes,

12:33.000 --> 12:39.000
generates a list of GitHub issues specifically for that repository

12:39.000 --> 12:41.000
that you're discussing in that meeting?

12:41.000 --> 12:46.000
And could we actually then use those generated structured outputs

12:46.000 --> 12:49.000
to query GitHub to actually create those issues?

12:49.000 --> 12:54.000
Now, this is great, and our experience has been that actually a lot of large language models

12:54.000 --> 12:57.000
are great at generating structured output,

12:58.000 --> 13:02.000
but not necessarily in the structure that you need.

13:02.000 --> 13:05.000
So it's going to be JSON, but is it going to abide by

13:05.000 --> 13:08.000
what you need that JSON object to look like?

13:08.000 --> 13:11.000
So the idea here was, okay,

13:11.000 --> 13:15.000
well, why don't we create an output validator component,

13:15.000 --> 13:18.000
and we use Pydantic for that.

13:18.000 --> 13:24.000
This is all based on a tutorial that's up on the Haystack website right now,

13:24.000 --> 13:29.000
and basically what we did for the GitHub demo was modify this tutorial just a bit.

13:29.000 --> 13:34.000
In the tutorial, we said that we provide a Pydantic model,

13:34.000 --> 13:38.000
and we said we need the output to be cities data,

13:38.000 --> 13:41.000
where in cities data you've got cities,

13:41.000 --> 13:45.000
and each city has a name, a country, and a population.

13:45.000 --> 13:48.000
And then we used a GPT model,

13:48.000 --> 13:52.000
and we saw that initially, for the first round,

13:52.000 --> 13:56.000
we did get structured output, but it's not valid JSON,

13:56.000 --> 14:00.000
or it doesn't abide by what we need that object to look like.

14:00.000 --> 14:04.000
So the idea is, what if we provide back to the LLM,

14:04.000 --> 14:07.000
the output that it just gave us,

14:07.000 --> 14:10.000
with an error message from Pydantic as to why it's wrong,

14:10.000 --> 14:14.000
why it doesn't abide by the Pydantic model we just provided.

14:15.000 --> 14:19.000
So the resulting pipeline looks a bit like this

14:19.000 --> 14:22.000
for our GitHub issues demo.

14:22.000 --> 14:27.000
We want to provide meeting notes, and we want to provide a schema.

14:27.000 --> 14:32.000
We give that to the prompt builder, the prompt builder exists in Haystack World.

14:32.000 --> 14:36.000
Then that whole prompt is given to a generator that generates...

14:36.000 --> 14:42.000
There's a one pass, like a first attempt at generating some structured output,

14:42.000 --> 14:46.000
which is then validated by our output validator,

14:46.000 --> 14:50.000
which doesn't exist in Haystack World, so this is a custom component.

14:50.000 --> 14:53.000
And either you're all good, done.

14:53.000 --> 14:57.000
But if it's not good, then we go back to the prompt builder

14:57.000 --> 15:02.000
with the invalid reply that was produced, plus the error messages.

15:02.000 --> 15:08.000
So for our use case, where you were trying to build this for Haystack,

15:08.000 --> 15:11.000
this is not accurate, by the way, our labels are not exactly that,

15:11.000 --> 15:13.000
but just for demonstration purposes,

15:13.000 --> 15:17.000
we went ahead and built a Pydantic model called issues,

15:17.000 --> 15:21.000
and we had to be very specific as to what our labels were,

15:21.000 --> 15:26.000
because you can't make a query with a new label that doesn't belong to that repository.

15:26.000 --> 15:30.000
And then we used our output validator.

15:30.000 --> 15:34.000
And then this is where things start to look a bit complicated,

15:34.000 --> 15:37.000
but the ginger templating is very useful here.

15:37.000 --> 15:41.000
Earlier, for the Hacker News articles, you saw a for loop.

15:41.000 --> 15:44.000
Instead here, we have an if statement.

15:44.000 --> 15:53.000
So if we have an error message and invalid replies coming in from any component in our pipeline,

15:53.000 --> 15:57.000
then this little section here, you already created the following output,

15:57.000 --> 16:02.000
yada yada, is appended to the full prompt.

16:02.000 --> 16:07.000
Again, at the end of the day, we ended up with a pipeline that looks a bit like this.

16:07.000 --> 16:11.000
So do I have time? I do have time, right?

16:11.000 --> 16:19.000
Four minutes. Okay, so the last thing I wanted to show is how these pipeline connections are actually defined in Haystack.

16:19.000 --> 16:22.000
Oh, great. Okay, I have plenty of time.

16:22.000 --> 16:25.000
All right, so ignore the corgis running around.

16:25.000 --> 16:29.000
Can everyone see this, or should I make this bigger?

16:29.000 --> 16:31.000
Okay.

16:38.000 --> 16:44.000
All right, so I told you that before the Hacker News Fetcher component was very much pseudocode,

16:44.000 --> 16:46.000
this is kind of boring.

16:46.000 --> 16:51.000
We're basically making requests to the API and getting the articles.

16:51.000 --> 16:56.000
Here, we're going to be using mixed trial through hugging face TGI.

16:56.000 --> 17:02.000
Hugging face TGI is free, but it is rate limited, and you need to provide an API key to use it.

17:02.000 --> 17:07.000
So you can go ahead and use this collab, but you do have to provide an API key.

17:07.000 --> 17:16.000
And then you see the prompt template you saw, and here's what's going on in the Haystack pipeline itself.

17:16.000 --> 17:18.000
We've got our prompt builder.

17:18.000 --> 17:23.000
We've got our LLM, so mixed trial via hugging face TGI.

17:23.000 --> 17:26.000
We just created the Hacker News Fetcher.

17:26.000 --> 17:30.000
What we do is simply add those to the Haystack pipeline.

17:31.000 --> 17:38.000
And then this is where Haystack can be quite verbose, but it can also mean that you can be very,

17:38.000 --> 17:42.000
you can create very custom pipelines, and it can get a bit crazy.

17:42.000 --> 17:46.000
You can have pipelines that branch out, loop back in, et cetera.

17:46.000 --> 17:56.000
We're being very specific that Hacker News Fetcher's articles output is being provided to prompt builder articles,

17:56.000 --> 17:59.000
which is going in here.

17:59.000 --> 18:08.000
And then finally, the only thing missing to actually run this is Hacker News Fetcher is the only component here

18:08.000 --> 18:10.000
that is missing an input.

18:10.000 --> 18:15.000
All of the rest have been provided inputs through the pipeline itself.

18:15.000 --> 18:22.000
So I can then define what the input of Hacker News Fetcher is when I do pipeline.run or pipe.run.

18:22.000 --> 18:27.000
And then, optionally, you can also give more inputs that are not necessary for the others,

18:27.000 --> 18:33.000
but for example, here, I'm using mixed-rull, and I wanted to up the created max tokens at the end,

18:33.000 --> 18:36.000
so I can also provide that at runtime.

18:36.000 --> 18:38.000
And that's it.

18:38.000 --> 18:40.000
Thank you very much.

18:40.000 --> 18:44.000
And you can also access the GitHub issues pipelines here,

18:44.000 --> 18:47.000
but I'm happy to take questions if there are any.

18:47.000 --> 18:52.000
Thank you very much.

18:52.000 --> 18:54.000
Thank you.

18:54.000 --> 19:02.000
Thank you.

19:02.000 --> 19:04.000
Hi.

19:04.000 --> 19:09.000
So in the Hacker News article summarizer,

19:09.000 --> 19:15.840
to the LLM, the URL, and asking it to both summarize the article and also just print

19:15.840 --> 19:21.640
back the URL. That appears to me a bit risky because it might change the URL. Do you consider

19:21.640 --> 19:26.120
it best practice to pass the URL through some other way, or do you find it fine to always

19:26.120 --> 19:34.600
ask the LLM to do that?

19:34.600 --> 19:39.480
I love this question because try that hugging face space, especially with mixed trial a

19:39.480 --> 19:47.520
few times and sometimes you just won't get the URL. Yes, and there are a few ways to make

19:47.520 --> 19:53.760
this a lot better because actually the Hack and Use Fetcher component itself earlier is

19:53.760 --> 19:59.840
just an API called Hack and Use and you have the URL there. So probably the best practice

19:59.840 --> 20:05.680
here would be to have the LLM only produce summaries and the other component provide

20:05.680 --> 20:13.600
an output of the URLs that was used to produce those summaries because yes, my experiences

20:13.600 --> 20:19.040
a lot of the OpenAI GPT models do a great job of following that instruction, reference

20:19.040 --> 20:26.080
this specific URL, but this is very much LLM based and how that large language model expects

20:26.080 --> 20:35.360
to be prompted. Not every instruction works the same way with every model. Any other questions?

20:35.360 --> 20:47.600
Oh, this one. Thanks for the presentation. I have a question on the prompt. I saw for

20:47.600 --> 21:03.920
an if, is it specific to Haystack or? Not at all. We use Ginger for the templating

21:03.920 --> 21:09.920
language. Actually, I will add a link to the Ginger documentation in the speaker notes

21:09.920 --> 21:16.880
of this slide deck that you'll find on FOSM2, but that's all Ginger syntax, which comes

21:16.880 --> 21:20.800
very handy because you get for loops, if loops, and you can actually start defining

21:20.800 --> 21:28.240
your own custom functions for that Ginger templating as well.

21:28.240 --> 21:39.280
All right. Give her a round of applause, please.

