WEBVTT

00:00.000 --> 00:07.400
I think are we good?

00:07.400 --> 00:15.120
Okay, so next up we have some product management coverage content by Loria.

00:15.120 --> 00:16.120
Hi.

00:16.120 --> 00:21.760
Yeah, so I've been a little bit of an AV disaster, so I'm going to have to look at my slides

00:21.760 --> 00:23.240
because I can't see them here.

00:23.240 --> 00:25.720
But here's the title of my talk today.

00:26.320 --> 00:31.480
My goal is to help you get more structure around your open source projects, hopefully

00:31.480 --> 00:34.240
save time and ideally do less.

00:34.240 --> 00:41.600
Okay, so about me, I'm an American living in Germany since 2015 and I mention this because

00:41.600 --> 00:48.040
I came to Germany with a very live to work mindset and now I have a very work to live

00:48.040 --> 00:49.040
mindset.

00:49.040 --> 00:53.440
And you're going to see that mindset shift in my talks, like the messaging I share with

00:53.440 --> 00:54.440
you.

00:54.920 --> 01:00.400
Among my many open source activities has been contributing to Kubernetes, particularly

01:00.400 --> 01:05.240
SIG release and also more recently the open SSS security scorecard project.

01:05.240 --> 01:10.000
I have this link here where I thought I'd highlight it because you can find a lot of

01:10.000 --> 01:12.040
management and leadership guidance there.

01:12.040 --> 01:17.280
It's a collection of resources, blog posts, videos, templates, things like this, including

01:17.280 --> 01:19.160
some things I'll show you today.

01:19.160 --> 01:21.040
I've worked in places.

01:21.040 --> 01:22.760
I'm not working now.

01:22.760 --> 01:25.720
My company shut down at the turn of the year.

01:25.720 --> 01:29.280
So if you like what I have to say and think I could be helpful to your organization, let's

01:29.280 --> 01:31.840
talk and there's my LinkedIn in the meantime.

01:31.840 --> 01:37.080
I'll cover basically two branches in this talk.

01:37.080 --> 01:40.960
First is some observations from my time in open source.

01:40.960 --> 01:46.960
I'll sprinkle some helpful hints and examples along the way and then I will focus on some

01:46.960 --> 01:52.080
tried and true traditional product management methods that work in a company setting.

01:52.080 --> 01:56.560
You've probably encountered them in your day jobs, but they also work in open source

01:56.560 --> 02:00.760
with a little bit of creativity.

02:00.760 --> 02:07.200
So some of those observations, I see contributors taking on so much work.

02:07.200 --> 02:13.400
Just lots of issues, many times even multiple leadership roles and it just seems like a sure

02:13.400 --> 02:16.040
far way to burn them.

02:16.040 --> 02:20.160
Because they're so overstretched, they don't have a lot of time to do a lot of research

02:20.160 --> 02:21.160
and gather data.

02:21.160 --> 02:27.040
Also, that's a skill set that not everybody has and not everybody needs to have.

02:27.040 --> 02:31.160
But the end result is often that a lot of development is based on assumptions instead

02:31.160 --> 02:33.160
of data.

02:33.160 --> 02:36.960
Another thing I've noticed is that what exists today in a project isn't well-defined or

02:36.960 --> 02:41.360
documented or mutually understood by the project team.

02:41.360 --> 02:46.840
This represents a pitfall because you maybe don't have the shared understanding of what

02:46.840 --> 02:50.280
your project is and does and should be.

02:50.280 --> 02:54.880
And lastly, there's often times of vague strategy or even none at all.

02:54.880 --> 02:59.880
I would say that the most acute manifestation of this issue is that there's often a boundary

02:59.880 --> 03:04.680
between what goes in a project and what stays out that is lacking.

03:04.680 --> 03:11.920
This can lead to a lot of work being done and that work just kind of expanding.

03:11.920 --> 03:17.080
So if you take away anything from me today, it would be this message which is I really

03:17.080 --> 03:20.320
encourage and invite you to do less if you can.

03:20.320 --> 03:23.960
I know your manager may not want you to do less.

03:23.960 --> 03:30.120
There's always very specific conditions around that relationship, speaking from experience.

03:30.120 --> 03:33.880
So I'm happy to talk to any of you after the talk if you would like to have a sound and

03:33.880 --> 03:38.080
pour like ways you can manage your manager's expectations around what you can do in open

03:38.080 --> 03:42.840
source with your limited time and availability.

03:42.840 --> 03:47.960
But if you are the pressure source telling yourself to do all of the things, then I invite

03:47.960 --> 03:52.640
you to ask yourself at first like, does anybody even want this?

03:52.640 --> 03:56.920
I mean, maybe they do, but maybe if you're the only person or you don't have a very

03:56.920 --> 04:02.760
clear sense of how many people might find value in your project, maybe stop and collect

04:02.760 --> 04:05.960
more data before you move on.

04:05.960 --> 04:08.240
Also keep your personal backlog light.

04:08.240 --> 04:12.960
I know some people really enjoy working with them, but they take on so much work that they

04:12.960 --> 04:16.400
end up becoming the blocker for other people to make progress.

04:16.400 --> 04:18.640
And you don't really want to do that, right?

04:18.640 --> 04:24.720
You don't want to impede your fellow project contributors' efforts because you're like

04:24.720 --> 04:27.560
the decision maker on 10 different things.

04:27.560 --> 04:30.720
So that leads to delegating.

04:30.720 --> 04:35.720
Delegating not just to reduce your workload, but also to empower others to gain skills

04:35.720 --> 04:36.960
that you have.

04:36.960 --> 04:40.960
And I know that's rather time consuming, but oftentimes what I've seen in open source

04:40.960 --> 04:46.320
is that a little bit of upfront onboarding and knowledge exchange saves everybody time

04:46.320 --> 04:53.040
in the later stages because you have multiple people who can work on something at once.

04:53.040 --> 04:57.080
And the last tip is something I've used over the years because I would just take on work

04:57.080 --> 04:58.080
too.

04:58.080 --> 05:00.200
I love it, like, let's be busy.

05:00.200 --> 05:04.040
And then I would find that the work that I took on actually involved a lot more than

05:04.040 --> 05:05.360
I bargained for.

05:05.360 --> 05:11.320
So I highly encourage you to unpack a task before you say yes to doing that task because

05:11.320 --> 05:16.600
you may find that it's going to take you a significant amount of time.

05:16.600 --> 05:18.160
Here's an example of that.

05:18.160 --> 05:25.600
So this is a project board that I created with collaborators from SIG Release and Kubernetes.

05:25.600 --> 05:29.480
The initial idea was to rewrite a tool from scratch.

05:29.480 --> 05:34.120
And I looked at that and thought I heard that and I was like, you know, we may not want

05:34.120 --> 05:37.240
to do that because that sounds really, really intensive.

05:37.240 --> 05:44.280
So what we did is over a couple of sessions we figured out some real things that we didn't

05:44.280 --> 05:50.160
know about this particular tool that we wanted to, you know, talking about rewriting.

05:50.160 --> 05:54.720
And what we had was a lot of questions, like what is it, what does it do, what do users

05:54.720 --> 05:55.720
want.

05:55.720 --> 05:58.720
So you may not see all this text, but just the TLDR for you.

05:58.720 --> 06:03.720
There's a lot of spikes in decision making and documentation, like proposals to write

06:03.800 --> 06:10.720
to get community feedback before even setting to write code.

06:10.720 --> 06:15.160
So this is what I mentioned earlier, like the assumptions that we often take into our

06:15.160 --> 06:16.680
development plans.

06:16.680 --> 06:19.800
We had a lot of assumptions that we just had to rewrite this tool because it's just too

06:19.800 --> 06:23.320
broken and, you know, we just do it over.

06:23.320 --> 06:26.160
That's often not the case.

06:26.160 --> 06:29.800
And so I just want to point out that I didn't come up with the idea of assumption-driven

06:29.800 --> 06:30.800
development.

06:30.880 --> 06:34.920
I found a term that someone else created, and in my search to find out exactly who, I came

06:34.920 --> 06:38.240
upon this blog post, which I found really interesting.

06:38.240 --> 06:44.280
It's a developer who basically described his own failure trajectory because he was operating

06:44.280 --> 06:46.360
with assumption-driven development.

06:46.360 --> 06:50.120
And what he did was he decided to just take on a lot of work on his own.

06:50.120 --> 06:52.320
He didn't talk to anybody around him.

06:52.320 --> 06:56.960
He also didn't understand what he was working with in that day, like the tooling and all

06:56.960 --> 07:04.680
of the different tooling relationships, and also the knock-on effects of making changes.

07:04.680 --> 07:08.800
And he kind of went in like, I'm going to do this, say, and like it's going to be done.

07:08.800 --> 07:10.400
And that also didn't turn out to be true.

07:10.400 --> 07:15.320
There was a lot more work involved that he had expected and planned for.

07:15.320 --> 07:19.840
So I thought it was a really great summary from the developer's perspective of why assumption-driven

07:19.840 --> 07:25.840
development is often not the best method to use.

07:25.840 --> 07:29.160
I'm going to give them a talk, and you can ask questions after.

07:29.160 --> 07:30.160
Thanks.

07:30.160 --> 07:36.160
So basically, what I'm suggesting here, like a way to conquer assumptions, is oftentimes

07:36.160 --> 07:38.320
just listening to your environment.

07:38.320 --> 07:40.800
And that starts with the people around you.

07:40.800 --> 07:45.880
So there's this thing called active listening, and I found a nice resource from the Center

07:45.880 --> 07:51.280
for Creative Leadership, and they give you some behaviors that you can adopt, or adopt

07:51.280 --> 07:57.600
rather, to start listening more actively to your colleagues or co-collaborators and

07:57.600 --> 08:00.280
others you work with.

08:00.280 --> 08:02.280
They say, first of all, pay attention.

08:02.280 --> 08:06.560
And we take this as a given, but in our world of smartphones and lots of distractions and

08:06.560 --> 08:10.960
multitasking, we often don't really fully pay attention to each other.

08:10.960 --> 08:15.920
And one way that we don't do this is that we sometimes can't wait to, we don't wait

08:15.920 --> 08:20.000
for the person to finish what they're saying, before we just like, oh, I want to get my point

08:20.000 --> 08:21.000
out.

08:21.000 --> 08:25.080
We have to go, and then we end up missing the latter half of the sentence, because we're

08:25.080 --> 08:29.440
too focused on our own sentence and what we want to say.

08:29.440 --> 08:31.520
So active listening means that you don't do that.

08:31.520 --> 08:34.640
You actually let somebody finish, and then you ask.

08:34.640 --> 08:40.600
And you also can do things like clarify what the person is telling you by asking them questions.

08:40.600 --> 08:42.560
Did I think, I think I heard you say this.

08:42.560 --> 08:43.560
Is that correct?

08:43.560 --> 08:47.240
Or can you tell me more about what you're trying to say to me?

08:47.240 --> 08:51.000
And then together, it starts to become a collaboration, because you're inviting them

08:51.000 --> 08:54.560
to also clarify their ideas for themselves.

08:54.560 --> 08:58.520
And you're also getting higher quality information, because A, you're taking it in, and you're

08:58.520 --> 09:06.760
also engaging with it in a team context to work out new ideas.

09:06.760 --> 09:10.480
In addition to listening to your colleagues and people around you, you should also listen

09:10.480 --> 09:11.480
to your code.

09:11.480 --> 09:16.320
So I mentioned a few slides ago about this idea to rewrite a tool from scratch.

09:16.320 --> 09:20.320
But if you don't really listen to your own code from the beginning, you may end up doing

09:20.320 --> 09:25.040
a lot of work that you could have avoided by just optimizing and selectively choosing

09:25.040 --> 09:26.720
what to work on.

09:26.720 --> 09:32.800
So having artifacts like docs and diagrams will help you to better reason about the work

09:32.800 --> 09:35.200
you truly should do.

09:35.200 --> 09:41.000
Optimize, find the points where you can make things better, and also plan accordingly.

09:42.000 --> 09:46.720
So here's another example from Sig Release where we applied this principle.

09:46.720 --> 09:47.720
We had this tool, right?

09:47.720 --> 09:49.360
And we were going to rewrite it.

09:49.360 --> 09:54.480
But I said, first of all, let's actually document the flow that the user follows to use this

09:54.480 --> 09:59.040
tool, achieve a job, go from point A to point B.

09:59.040 --> 10:05.440
And so an engineer in Sig Release did this, and then we gathered around as a group, around

10:05.440 --> 10:10.840
his workflow, and talked through every step, figuring out what was really hard, what was

10:10.880 --> 10:14.280
taking a lot of time, what wasn't working.

10:14.280 --> 10:18.600
And as you can see from the results, the first line there is the overall flow.

10:18.600 --> 10:23.400
And then I blew up this section toward the end, where you see a lot of anger, and then

10:23.400 --> 10:26.480
there's this little clock, which means it was really time consuming.

10:26.480 --> 10:32.400
And you could then see in the full landscape of this project's flow where the pain points

10:32.400 --> 10:33.400
truly were.

10:33.400 --> 10:39.040
And we were also able to use these posts to document exactly where the code existed that

10:39.080 --> 10:41.960
was executing these steps.

10:41.960 --> 10:47.560
And so what we walked away with was a much more focused plan for what we needed to do.

10:47.560 --> 10:53.120
And we can then start there and then decide after collecting a lot of information about

10:53.120 --> 10:56.960
these weaker points what we should do next.

10:56.960 --> 11:03.360
Maybe we rewrite parts of this instead of the whole thing.

11:03.360 --> 11:07.920
When you have a workflow like that in place, it really helps you to put, it puts you in

11:07.960 --> 11:10.000
better control of your project.

11:10.000 --> 11:13.080
Now if you have no projects, that's fine too.

11:13.080 --> 11:17.520
What we're going to cover next are some tools that you can apply as you start working on

11:17.520 --> 11:18.520
a new project.

11:18.520 --> 11:23.720
But you can also introduce these even if you have something that's several years old.

11:23.720 --> 11:24.720
It doesn't matter.

11:24.720 --> 11:32.040
It's never too late to understand your work and then organize yourself to do the highest

11:32.040 --> 11:35.040
value work in the future.

11:35.160 --> 11:41.760
So I'm going to cover having a strategy with a doc template, doing user research and surveys,

11:41.760 --> 11:46.600
including an example of a survey which is the NPS, making a roadmap and giving you a

11:46.600 --> 11:51.800
template you can use, and then prioritizing and refining your backlog with some methods

11:51.800 --> 11:56.080
and tools you can apply for those activities.

11:56.080 --> 12:01.920
So here's a strategy doc template that I just worked with the security scorecard team on

12:01.920 --> 12:03.440
to actually fill this out.

12:03.440 --> 12:06.160
And I know these little lines here are small and you can't see them.

12:06.160 --> 12:08.280
I'll get to that in the next slide.

12:08.280 --> 12:14.720
But it basically introduces the concepts of the 5Ws that journalists use typically to

12:14.720 --> 12:19.000
write a news story where they need to have the reader know the facts of the story right

12:19.000 --> 12:23.600
away and then if the reader wants more detailed information they can read on.

12:23.600 --> 12:27.200
But it answers who, what, when, where, and why as well as how.

12:27.200 --> 12:31.560
The goal here is that you have an asynchronous tool that you can use so you don't have to

12:31.560 --> 12:36.560
have a meeting around this, although I advise it because you'll find that more information

12:36.560 --> 12:40.160
comes out when you actually discuss your strategy.

12:40.160 --> 12:45.160
But you can at least start with a template like this and people then can contribute their

12:45.160 --> 12:47.040
comments and ideas to it.

12:47.040 --> 12:49.680
This is Miro by the way.

12:49.680 --> 12:54.040
When you actually have this template filled out and you've gone through it with your team

12:54.040 --> 12:59.760
then you can dump it into a doc, refine it a bit more and then publish it in your repository

12:59.880 --> 13:01.960
for the public to look at.

13:01.960 --> 13:07.440
And then of course you can continuously revise as your project develops and you discover

13:07.440 --> 13:10.440
new information.

13:10.440 --> 13:14.520
So those small questions in that template are here basically.

13:14.520 --> 13:18.880
Not all of them but some key questions that are quite useful for getting a sense of where

13:18.880 --> 13:20.920
you're going with your work.

13:20.920 --> 13:25.400
So who are the users as long as the contributors and the maintainers?

13:25.400 --> 13:26.400
But really who are the users?

13:26.520 --> 13:30.000
Who are the people deriving value from your project today?

13:30.000 --> 13:35.200
And who do you want to derive, who do you want to have value derived in the future?

13:35.200 --> 13:38.360
Like who should derive value in the future?

13:38.360 --> 13:40.840
What does your project do today?

13:40.840 --> 13:42.880
On the flip side what does it not do?

13:42.880 --> 13:47.240
I mentioned earlier that boundary about what goes in a project and what stays out.

13:47.240 --> 13:51.560
When you can clearly explain what a project is and what it is not and what it shouldn't

13:51.560 --> 13:56.680
be then you can get a clearer sense of where that boundary lies.

13:56.680 --> 14:01.720
You can also think here about what the UX is like and what quality concerns and constraints

14:01.720 --> 14:02.720
you have.

14:02.720 --> 14:07.080
It's really just like what is your project essentially?

14:07.080 --> 14:08.600
What is your project useful?

14:08.600 --> 14:13.880
So what are the conditions to trigger a user actively coming to you, you're solving their

14:13.880 --> 14:15.560
problem?

14:15.560 --> 14:20.280
Another way to look at when is like how long does a particular stage of your project's

14:20.320 --> 14:24.120
workflow take to be completed?

14:24.120 --> 14:27.080
Where does your project fit in the ecosystem?

14:27.080 --> 14:31.440
So I'm not going to go over the ins and outs of doing a competitor analysis here.

14:31.440 --> 14:34.880
There's lots of templates online that you can look at to do one.

14:34.880 --> 14:39.800
But I highly recommend it because when you take a look at other projects in the space

14:39.800 --> 14:46.800
that are doing similar, solving a similar problem, you can then assess the resources

14:46.800 --> 14:48.800
behind those projects.

14:48.840 --> 14:52.960
Maybe there are even products, so maybe there's like a company doing what you want to do.

14:52.960 --> 14:56.640
So they have a lot of money and they can work quickly and then you can consider like what

14:56.640 --> 15:00.880
you actually have in your time budget to actually pursue.

15:00.880 --> 15:06.080
You can also see what those projects and products strengths and weaknesses are and then use

15:06.080 --> 15:10.760
that information to distinguish and differentiate like what you want to provide.

15:10.760 --> 15:16.360
Maybe it's a niche that you want to really get a handle on and provide a really clear

15:16.400 --> 15:19.520
good solution for that no one else is providing.

15:19.520 --> 15:25.040
Maybe it's just because your project is community-based and other projects and products out there

15:25.040 --> 15:29.320
are like for money and so like you're going to be able to serve the community whereas

15:29.320 --> 15:31.800
those alternatives will not.

15:31.800 --> 15:38.200
So thinking about where your project fits in that landscape is really quite helpful.

15:38.200 --> 15:41.520
That leads into why your project exists in the first place.

15:41.520 --> 15:45.080
What value does it deliver?

15:45.120 --> 15:50.480
Then that puts you in the seat of the user who is actually trying to use your project

15:50.480 --> 15:53.920
and solve those problems they face.

15:53.920 --> 15:57.880
Another question I like to ask around why is the cost of delay.

15:57.880 --> 16:02.960
So if we don't develop this project now or if we don't iterate on it and provide these

16:02.960 --> 16:06.520
features of functionality, what bad things happen?

16:06.520 --> 16:08.720
What bad things happen to our goals?

16:08.720 --> 16:14.280
What bad things happen for users who continue facing this problem without any solution?

16:14.280 --> 16:16.640
What happens to innovation in general?

16:16.640 --> 16:21.920
There's really a lot of interesting conversations you can have around cost of delay.

16:21.920 --> 16:24.880
Then finally how does it work now?

16:24.880 --> 16:29.040
This question is also a really nice hook for you to think about the future and where you

16:29.040 --> 16:32.400
want to be in 12 months or 24 months with it.

16:32.400 --> 16:38.760
How do you want to build this to provide different features?

16:38.760 --> 16:41.360
Maybe redesign the architecture to be simpler.

16:41.360 --> 16:47.160
How do you want to be and how is a good frame for that?

16:47.160 --> 16:52.560
I pointed earlier, we're going to cover some more tools and methods.

16:52.560 --> 16:55.960
The next one is user research and surveys.

16:55.960 --> 17:01.680
Having as much data as you possibly can really pulls you out of your own biases and what

17:01.680 --> 17:05.840
the developer with the assumption driven development blog post was describing.

17:05.840 --> 17:09.040
I only listened to me and it didn't work.

17:09.120 --> 17:16.120
If you're listening to your prospective users, your current users, other project leaders,

17:16.120 --> 17:21.920
you start to get all these different perspectives that can ultimately help you develop the right

17:21.920 --> 17:25.880
most valuable thing and not develop a lot of other things that are going to take up

17:25.880 --> 17:32.320
a lot of effort but maybe won't have such a payoff for you or for anyone else.

17:32.320 --> 17:35.200
Surveys should be kept quick and easy.

17:35.200 --> 17:36.720
I tend to use Google forums.

17:36.800 --> 17:40.000
I mean, I know it's not open source but it works.

17:40.000 --> 17:44.640
I don't ask people to write a lot because you don't want to read at all.

17:44.640 --> 17:49.720
You probably don't have time to read lots and lots of survey responses.

17:49.720 --> 17:54.400
The survey respondents also probably don't have a lot of time to fill out lots of forms.

17:54.400 --> 18:02.080
Using check boxes, multiple choice, rating options from zero to five or whatever you

18:02.080 --> 18:05.040
want to set is your endpoints.

18:05.040 --> 18:09.760
You have numeric data that you can quickly turn into charts like this one which was from

18:09.760 --> 18:16.080
a Google survey and it's just easy to make a chart out of the results.

18:16.080 --> 18:20.240
Another thing I like to remind people of is Please Buy by GDPR.

18:20.240 --> 18:24.520
Be careful about how you're collecting the data of the people who are filling out your

18:24.520 --> 18:25.680
survey.

18:25.680 --> 18:31.920
Make sure they offer their consent before you offer them a chance to give them, to give

18:31.920 --> 18:37.320
consent for usage of your data before they move on.

18:37.320 --> 18:40.680
Another great way to collect user data is through discussions.

18:40.680 --> 18:46.760
Like on GitHub, you can post a question and see people respond to it.

18:46.760 --> 18:49.720
That can be a little more time consuming because you're going to have to read through all of

18:49.720 --> 18:51.120
those answers.

18:51.120 --> 18:55.680
But it can be quite useful too because you get broader context.

18:55.680 --> 18:59.320
If you're in a hurry and you just say, hey, community, I want to know if you want us to

18:59.320 --> 19:00.480
do this thing or not.

19:00.480 --> 19:04.560
You can send out an issue and have them give it a plus one or not.

19:04.560 --> 19:08.000
You can use emoticons, this like votes.

19:08.000 --> 19:12.640
There's other tools out there that product managers use all the time like AHA that offer

19:12.640 --> 19:16.720
this kind of voting functionality for feature ideas.

19:16.720 --> 19:21.800
And finally, interviews which are really can be quite time consuming.

19:21.800 --> 19:25.200
But if you have the time to do them, you can even just do a few.

19:25.200 --> 19:28.800
You can learn so much about your own project.

19:28.800 --> 19:33.120
You can sit and watch somebody try to use it and see where they get stuck, see what's

19:33.120 --> 19:39.200
confusing to them, and collect all of that data and think of ways to optimize and improve.

19:39.200 --> 19:41.320
Oh, I forgot.

19:41.320 --> 19:44.640
This is a really important point to ask them.

19:44.640 --> 19:49.720
With the results, a lot of times when people fill out surveys, it's numbers, so it's all

19:49.720 --> 19:50.720
scientific.

19:50.720 --> 19:56.720
But it often isn't because our users may be giving their feedback from a limited set

19:56.720 --> 20:00.800
of data points themselves because they may not be aware of all the alternatives, all

20:00.800 --> 20:02.880
the directions that your project can take.

20:02.880 --> 20:06.880
They may not have a full understanding of the functionality because they don't have

20:06.880 --> 20:09.200
time or maybe you didn't explain it well.

20:09.200 --> 20:14.360
So always be aware that just when somebody tells you what they want, they may not actually

20:14.360 --> 20:16.840
want that thing.

20:16.840 --> 20:21.400
That may be the best guess that they have that would solve their problem, but actually

20:21.400 --> 20:26.480
in the broader context of other types of users, it wouldn't solve the problem in the

20:26.480 --> 20:27.480
best way.

20:27.480 --> 20:35.080
So just keep that in mind that data can also be a little bit of a trap if not used carefully.

20:35.080 --> 20:38.800
I want to give this example of a survey that you can run very quickly.

20:38.800 --> 20:44.040
If you don't have time to set up a forum yourself, lots of questions, you can still

20:44.040 --> 20:46.600
do an NPS survey.

20:46.600 --> 20:50.760
This is used by lots of companies, but it's quite useful in our context because it just

20:50.760 --> 20:52.400
consists of two questions.

20:53.120 --> 20:57.560
Basically would you recommend my project in this case to a friend or colleague?

20:57.560 --> 21:01.240
And then can you please explain why you gave that score?

21:01.240 --> 21:03.200
So the number is very easy.

21:03.200 --> 21:07.680
You have to put it in some kind of NPS calculator, so I gave you a link to one.

21:07.680 --> 21:09.360
It's also the image source.

21:09.360 --> 21:12.560
You basically put in all that data and then you come up with your NPS.

21:12.560 --> 21:18.000
And then there's different analyses online for like what is a good score, usually it's

21:18.000 --> 21:19.000
20.

21:19.600 --> 21:22.000
When you're 50 to 80, you're doing really well.

21:22.000 --> 21:26.240
So that's from the way that the score is calculated.

21:26.240 --> 21:30.280
It's a pretty low overhead way to collect feedback.

21:30.280 --> 21:33.960
Are we on the right track or not?

21:33.960 --> 21:40.040
I mentioned also the next type of tool I want to show you and that's explained with this

21:40.040 --> 21:44.120
roadmap template which you can adapt to your own needs if you'd like.

21:44.120 --> 21:49.520
I cover some of the who, what, when, where, why questions that I covered with the strategy

21:49.520 --> 21:50.680
doc template.

21:50.680 --> 21:53.880
But the roadmap is more of the short term.

21:53.880 --> 21:57.400
What would you like to do in your next, say, three to six months?

21:57.400 --> 22:02.000
It's taking a slice of your strategy into getting you more focused around what you want

22:02.000 --> 22:05.200
to develop now.

22:05.200 --> 22:09.040
My strong recommendation is to keep it to a page or less so that people can actually

22:09.040 --> 22:10.360
remember it.

22:10.360 --> 22:17.600
Keep the number of deliverables and goals low, like one for three max, using a metric

22:17.600 --> 22:20.520
to justify why it's necessary.

22:20.520 --> 22:25.200
If you don't have a metric, like a baseline to say like we're doing this deliverable because

22:25.200 --> 22:31.360
X number of users want it, then you can also think about the metric that you want to apply

22:31.360 --> 22:37.600
to then be able to measure the success of your feature.

22:37.600 --> 22:42.160
I always like to include risks, like what is known, what is unknown in a roadmap, just

22:42.160 --> 22:47.640
so that with the unknowns you can plan that it might take away time from the future development.

22:47.640 --> 22:51.080
So it might be a bit of a distraction, but you at least are aware of it and you're going

22:51.080 --> 22:54.480
to have to work it out in the future as you go.

22:54.480 --> 22:55.480
And then technical goals.

22:55.480 --> 23:00.600
And this is like to make sure that quality, observability, testing doesn't fall by the

23:00.600 --> 23:01.600
wayside.

23:01.600 --> 23:06.200
I see this happening in a lot of projects and products as well where like all the stuff

23:06.200 --> 23:10.680
that actually makes the thing run gets pushed to the end and then the engineering team is

23:10.680 --> 23:15.920
stuck with a very patchy problematic system that they want to really fix, but nobody has

23:15.920 --> 23:21.400
a lot of time for them to do so.

23:21.400 --> 23:25.160
The next last couple of slides are just covering prioritization.

23:25.160 --> 23:31.560
So this is a matrix that I like to use because it allows teams to take a stack of issues

23:31.560 --> 23:34.400
and then plot them on this matrix.

23:34.400 --> 23:42.840
The matrix asks them to assess tasks, ideas based on the amount of effort along with the

23:42.840 --> 23:47.520
value that they expect to provide for the user once they do the thing.

23:47.520 --> 23:51.040
And then this allows the team to see like if they have a lot of things that are high

23:51.040 --> 23:56.520
value but also high effort, then they either need to maybe focus on one of those because

23:56.520 --> 24:02.880
they're not going to do like 10 high impact, high effort items at once or break them down

24:02.880 --> 24:07.640
into smaller bits so that they can then go into the do it now column which is really

24:07.640 --> 24:11.080
where your quick wins and your low hanging fruit should go.

24:11.080 --> 24:16.240
It's really important to plan for those quick wins to have them early on so that you can

24:16.240 --> 24:20.880
collect momentum and the team doesn't feel like they're just in some long slog that they're

24:20.880 --> 24:23.680
never going to see the results of their work.

24:23.680 --> 24:29.000
If you have quick turnaround for impact provided then that's nice because they can celebrate

24:29.000 --> 24:31.960
those wins early and keep going.

24:31.960 --> 24:37.080
There's also this nice, this is my favorite box, the don't do it box because that's where

24:37.080 --> 24:42.360
you just like close the issue and forget.

24:42.360 --> 24:44.360
Here's where I use this matrix in action.

24:44.360 --> 24:46.880
This is also a security scorecard recently.

24:46.880 --> 24:50.840
We haven't done this exercise yet but I'm really hoping we do it soon.

24:50.840 --> 24:56.800
This is basically all the bugs in the backlog and just putting them in specific buckets

24:56.800 --> 25:00.800
like some of them weren't bugs so that was just really categorizing what's a bug what

25:00.800 --> 25:01.800
isn't.

25:01.800 --> 25:07.120
Then the goal here is the team will plot the bugs on this graph and then we might find

25:07.120 --> 25:11.360
out that some of the bugs were solved, maybe some of them are relevant now but it's really

25:11.360 --> 25:15.520
to kick stuff out of the backlog and then just have the focus on what is really important,

25:15.520 --> 25:20.680
what's really valuable, what are people really being hurt by right now like we should fix

25:20.680 --> 25:22.480
right away.

25:22.480 --> 25:25.760
That's basically the steps for how you would apply such a matrix.

25:25.760 --> 25:28.800
I also encourage using a scoring model.

25:28.800 --> 25:33.800
There's a lot of different scoring models and you can find on Google or Ecosia, my favorite

25:33.800 --> 25:36.240
search engine personally is Ecosia.

25:36.240 --> 25:42.840
You can go in there and see what scoring models can do to help you assess things like reach,

25:42.840 --> 25:49.280
impact, excitement, effort and have a weighted scoring option so you can stack rank your

25:49.280 --> 25:55.240
backlog items and then do the top items first because you've decided through data and analysis

25:55.240 --> 25:58.480
that they're the most valuable ones.

25:58.480 --> 26:00.480
This is another template for your strategy.

26:00.480 --> 26:02.680
I just found this on Miro.

26:02.680 --> 26:08.440
It's by Lou Coleman and basically if you're rolling out an MVP for a new project for the

26:08.440 --> 26:14.240
first time, your center of focus is obviously the tree trunk so making the purpose of that

26:14.240 --> 26:21.240
really strong and solid and then over time you have more time to build on your tree trunk.

26:21.240 --> 26:27.480
This format allows you to plot your plans basically on different bands.

26:27.480 --> 26:32.400
So maybe the future band might be something that's high impact and high effort but it's

26:32.400 --> 26:36.880
just going to take a lot of time so you don't project that you're going to have it done

26:36.880 --> 26:37.880
right away.

26:37.880 --> 26:42.920
I just thought it was a nice visual I like trees too.

26:42.920 --> 26:46.400
Last slide is probably something that's very familiar to you.

26:46.400 --> 26:52.400
It's a standard campaign project board but this really helps with asynchronous collaboration

26:52.400 --> 26:56.760
because if you're running your board really well you'll only have high value work in it

26:56.760 --> 27:01.040
and then your contributors don't have to have a meeting to figure out what to do.

27:01.040 --> 27:06.320
They just pull off from the board knowing that you've clearly vetted your work through

27:06.320 --> 27:11.520
the tools that I've shown you so that they know that what they're going to deliver is

27:11.520 --> 27:14.760
ready to go and it's going to make a difference.

27:15.520 --> 27:17.880
My experience people are really motivated by purpose.

27:17.880 --> 27:20.080
They don't want to just do something for busy work.

27:20.080 --> 27:22.560
They actually want to know they're making a change.

27:22.560 --> 27:29.240
So with your really nicely refined backlog you can help your contributors along by giving

27:29.240 --> 27:31.040
them valuable work to do.

27:31.040 --> 27:35.840
I suggest making a triage work in group or having some mechanism in your team but just

27:35.840 --> 27:40.640
make sure that issues are triaged regularly so they don't pile up and that's a really

27:40.640 --> 27:44.280
good way to get non-code contributors involved as well.

27:44.280 --> 27:48.360
Making valuable high purpose work.

27:48.360 --> 27:52.440
Hopefully I have helped clear your path and helped you clarify your purpose.

27:52.440 --> 27:55.360
This is a nice trail in Amsterdam.

27:55.360 --> 28:03.160
It's quiet and friendly and inviting so hopefully that your open source development can achieve

28:03.160 --> 28:09.000
some similar aesthetics and that's it and that's the links to the resources that I've

28:09.000 --> 28:10.000
shared earlier.

28:14.280 --> 28:24.600
Not a question.

28:24.600 --> 28:30.160
So this goes back to the assumption driven development that made me wonder especially

28:30.160 --> 28:35.080
since you pointed out to stake the work first so you know what you're getting yourself into

28:35.080 --> 28:43.600
but if I do that, if I had done that then I would have never started any effort at any

28:43.600 --> 28:48.560
time because I would have been too intimidated had I known what I would have gotten myself

28:48.560 --> 28:49.560
into.

28:49.560 --> 28:54.600
So what do I do to still get stuff done?

28:54.600 --> 28:57.320
I think it depends on the number of factors.

28:57.320 --> 29:01.880
If you have a lot of time to build something out and really focus on it.

