WEBVTT

00:00.000 --> 00:19.000
Hello everyone. So this is a really tightly talked with a bit ambitious title about a

00:19.000 --> 00:28.840
site project of mine. I will explain a bit what site project is about, two parts of the

00:28.840 --> 00:37.640
title and explain what I plan to do with it later. So I made a toy programming language

00:37.640 --> 00:46.080
for fun, like yeah it's not really original but anyway. I was thinking of it for more than

00:46.080 --> 00:52.960
a year now and I have a lot of ideas about stuff to experiment and I start implementing a lot of

00:52.960 --> 01:01.200
parts of it but at the end I had no programming language at all. So I decided somehow to send

01:01.200 --> 01:09.320
a first-dem talk and to try to do a programming language usable by people. So here I am and I

01:09.320 --> 01:18.840
will, I publish online a version where I have a domain name and so this is something I tried to

01:18.840 --> 01:31.920
write a few past months that is mostly usable and I can explain why. So the idea is I made a

01:31.920 --> 01:39.200
really small programming language and by small I hope it's easy to learn. That helps you to catch a

01:39.200 --> 01:47.520
lot of bugs at build time, what most of programming language try to do and I make it kind of looks

01:47.640 --> 01:53.760
like JavaScript and target JavaScript because it's more easy to target JavaScript when you do a

01:53.760 --> 02:03.160
programming language that targets something else. So it's one of the motivations of it. And so maybe

02:03.160 --> 02:09.320
you know that GS is not the perfect programming language. There's a lot of flow. There is one I

02:09.320 --> 02:16.280
really hate which is shallow code by default which is you pass something to some place of your

02:16.520 --> 02:23.800
program and it's changed behind your back and you don't realize only really after about what's

02:23.800 --> 02:32.480
really happened and it's actually painful. There is really weird behavior with every operator that

02:32.480 --> 02:38.520
everyone know and talk about. It's not really big issue but still annoying when you try to use it

02:38.760 --> 02:46.960
and discover it at the last moment. And there is most painful things about there is a lot of things

02:46.960 --> 02:50.840
that should fail that does not really fail and rather return and define and you will really

02:50.840 --> 02:57.760
discover it really later in your program and there is a lot of work on JavaScript to make it a

02:57.760 --> 03:01.960
better language but the problem is you will still want JavaScript to work with all JavaScript

03:02.400 --> 03:09.400
code so there is a lot of duplication in the language like the same things two times but not

03:09.400 --> 03:17.080
exactly the same thing because we try to fix where we ever so this is really confusing I believe.

03:17.080 --> 03:25.200
And I think JavaScript is actually a good language to have another language

03:26.200 --> 03:34.200
transpiled or compiled because it can work anywhere. It's actually quite fast because there is a lot

03:34.200 --> 03:40.520
of engineer that worked into making JavaScript fast and that's true JavaScript is run fast

03:40.520 --> 03:47.280
on a lot of platform and still there are alternative run times that you have to make

03:47.280 --> 03:53.280
JavaScript easily embeddable in other program or use it for other usage on the web.

03:54.280 --> 04:00.720
And there is that thing that everyone knows about maybe which is WebAssembly which is the

04:00.720 --> 04:06.920
thing that your language should target if you want to go on the web and don't want to work

04:06.920 --> 04:17.480
write JavaScript and it's cool, it's fast, it's also cross-platform, it's even know as the

04:17.480 --> 04:25.800
fact that you don't really have to manage your memory by hand in WebAssembly because there are no

04:25.800 --> 04:34.960
GCs that let you say okay I create object and let's manage the memory like you would do in

04:34.960 --> 04:42.160
JavaScript so it's really nice to have a language that built to WebAssembly but there is still few

04:42.200 --> 04:47.880
reasons to prefer to target JavaScript than WebAssembly. The one is WebAssembly doesn't work

04:47.880 --> 04:54.960
on older browser, it's really nice to have a language when you can do all the hack of the earth

04:54.960 --> 05:01.240
because it's really expressive and you try to do a type project programming language,

05:01.240 --> 05:11.680
really nice to have all this expressive power. You can get more easy to work with any existing API

05:12.600 --> 05:17.440
which is something which is really painful to do in WebAssembly if you already tried WebAssembly you

05:17.440 --> 05:23.360
will be aware that it's really hard to interpret WebAssembly code with any other API because you

05:23.360 --> 05:29.760
have to do JavaScript glue code and this glue code is not really safe, it's really hard to maintain

05:29.760 --> 05:37.880
and this kind of stuff. Having a target language that is familiar and when you can run it into a

05:37.880 --> 05:44.960
step by step debugger if you find bugs in your compiler or I mean mine type project and also you

05:44.960 --> 05:52.840
can build a term JavaScript to see with something called Quick.js which is actually really cool and

05:52.840 --> 06:02.080
so if you have JavaScript you can have native target for free, native backend for free. Maybe you

06:02.120 --> 06:08.080
were aware there is a lot of language that already tried to target JavaScript, there's a few of them

06:08.080 --> 06:17.080
named here. The one in bold are actually functional language and the one in italic are the ones that

06:17.080 --> 06:25.400
try to kind of look like JavaScript and the only one in the list that's really used by a lot of

06:25.400 --> 06:30.280
people is TypeScript because that's the one language that accepts the ideas that most of people want

06:30.480 --> 06:38.920
to write JavaScript or keep using working on JavaScript code base so I don't know a lot of people

06:38.920 --> 06:45.840
that's doing per script for example that look like Askel or Elms that look like to Askel too and

06:45.840 --> 06:53.960
that don't look like at all like JavaScript. So what does that mean to make something smaller than

06:53.960 --> 06:58.400
JavaScript? It means that I have for example one kind of function which all functions are lambda

06:58.400 --> 07:03.880
and an image function, the arrow function. I have one kind of string in the literal not three and

07:03.880 --> 07:09.080
the ones that one support string interpolation like you do in JavaScript but all the strings

07:09.080 --> 07:15.360
support it so it's more easy. So all this kind of detail like you just take the minimum amount of

07:15.360 --> 07:22.920
feature you can implement and try to make a smaller JavaScript and there is kind of the

07:22.960 --> 07:29.640
thing that's normally a rather functional language but I kind of implement which is everything return

07:29.640 --> 07:35.920
a value so every expression you can put it into another expression because everything should return

07:35.920 --> 07:43.320
a value so for example I can assign the result of an if-else branching because the value of an

07:43.320 --> 07:49.200
if-else branching is a branch that was executed so you can just say that which makes sometimes the

07:49.200 --> 07:55.360
code more compact and easy and something you can do easily in JavaScript because you have to define

07:55.360 --> 08:01.640
variables with a default value, reassign the variable in the branch and scan stuff which is painful

08:01.640 --> 08:08.240
and I don't have an undefined and just have an empty object which is empty value like when you do

08:08.240 --> 08:13.320
something that does not return a value it returns an empty value which is the empty object or record

08:13.360 --> 08:23.560
anyway. I have some integration to make it easy to embed into JavaScript and this thing that is that

08:23.560 --> 08:33.200
sorry since every file is kind of an expression and every expression is a value every expression is

08:33.200 --> 08:38.520
convert to the equivalent JavaScript value so every expression could be compiled and using

08:38.560 --> 08:44.200
JavaScript for example I have a function which is compiled to the equivalent JavaScript function

08:44.200 --> 08:55.920
and those equivalent things you would expect the function to do and it's kind of expected and I want

08:55.920 --> 09:01.200
to speak a bit about some things that's often when you use a lot of programming language we take

09:02.160 --> 09:14.920
we start to feel like a lot of behavior are normal and logical but if we really think about it those

09:14.920 --> 09:20.120
behavior are not logical at all and for example there are so many different scope rules in JavaScript

09:20.120 --> 09:25.800
and many language that does at some point there's too many scope rules it's really counterintuitive

09:26.400 --> 09:32.680
for example this is legal in JavaScript you can use a function which is declared later in your

09:32.680 --> 09:39.480
program because function are top-level things that can be used anywhere in your programs or

09:39.480 --> 09:46.600
order don't count but if you do a lambda if you do an anonymous function it's blockscop so you

09:46.600 --> 09:53.720
can't use something before it's defined logical it's not the same mechanism but still we are two

09:53.760 --> 10:00.160
mechanisms it's a bit counterintuitive and if we are in object declaration of course you can't use

10:00.160 --> 10:06.280
an item of an object within an object because you have to wait for the object to be created fully

10:06.280 --> 10:12.400
and you can't call the object within the object because you have to wait the object to be to be

10:12.400 --> 10:18.280
declared you can do that it's obviously is legal it seems logical but if we look at function we

10:18.320 --> 10:25.600
can use function inside function of course and we can even use value that are declared after

10:25.600 --> 10:31.280
function even if function capture the definition site because we set the semantic of JavaScript

10:31.280 --> 10:38.400
because JavaScript without harvesting which is function are actually declared in top of your block

10:38.400 --> 10:46.400
but only assigned later so and it's also true for const on let keyword so this code will actually

10:46.440 --> 10:53.000
work and display a lot of emoji and at some point do a stack overflow of course but this is really

10:53.000 --> 10:58.240
counterintuitive that you can you can access a variable here define here it's working function

10:58.240 --> 11:03.200
it looks so a lot of different variable so I come with the idea of doing something really more

11:03.200 --> 11:09.560
simple which is let's merge the two concept of object and block and say just one thing which is

11:10.520 --> 11:18.360
a block could have side effect a block could have value redefined but a block will return the

11:18.360 --> 11:26.760
object of the element within it so we just have one kind of brackets that do the two things in one

11:26.760 --> 11:32.600
and are one scope rule which is always the same and you don't have to remind four five

11:32.600 --> 11:38.280
scoping different scoping rules there is that rules that works for everything it's more smaller

11:38.320 --> 11:45.320
language like you just have one block to have instruction and that is also the way to define

11:45.320 --> 11:54.120
objects so that kind of one main idea and so other idea it's be is pure and pure it's the world

11:54.120 --> 12:00.440
that is so much used for things so many different things that I will be to explain what I mean by

12:00.440 --> 12:08.920
that in this context of this talk I mean that when you define a variable and call something else

12:08.920 --> 12:17.720
you expect the variable to not have changed because you expect not to have shared mutability like

12:17.720 --> 12:25.640
the you don't expect to functions that implicitly change a value of your program you what you expect

12:25.800 --> 12:33.640
is to have kind of a guarantee with a value of what it it in B of having whatever you do with the

12:33.640 --> 12:43.000
value the value and change and this kind of invariant is kind of things you you you know you

12:43.000 --> 12:49.960
will always have it's really cool because it's a lot of stuff I will show later in the presentation

12:50.040 --> 12:58.120
but kind of kind of nice to know that to know to whatever I do if I don't reassign x explicitly

12:58.120 --> 13:03.800
it cannot be reassigned by another part of the program I can't do that if I want to reassign x I

13:03.800 --> 13:09.240
have to return it as a return value of a function it's the only way to reassign it it's to have it

13:09.240 --> 13:21.400
at return value not to pass it as implicitly like that so I have a kind of immutability by default

13:21.400 --> 13:28.680
so immutability kind of says that when you define a value keeps that value forever but you can

13:28.680 --> 13:34.200
redefine value which work bit like mutation and actually is implemented like mutation can

13:34.200 --> 13:40.280
redefine things and if you redefine something in a different scope it don't touch to the thing in

13:40.280 --> 13:47.480
the upper scope so if you redefine value in sub scope and later call to the value it's the

13:47.480 --> 13:55.960
previous value because you you want some modification to be local to don't propagate and that this idea

13:55.960 --> 14:02.040
of scoping which is always the same that's applied everywhere which is maybe a bit weird but actually

14:02.120 --> 14:12.600
really handy and so the interesting part is about how having a more constrained language makes

14:14.760 --> 14:20.280
allow the ability to spot more bugs and I speak a bit about the fact that tabscript

14:20.840 --> 14:26.120
sadly have exactly the same flows as JavaScript because it's a superset so for example charm

14:26.120 --> 14:33.320
immutability a 4x2 have right correct inference and correct typing here I have an example of bad

14:33.320 --> 14:42.200
inference in typescript which is I it's borrowed from the typescript tutorial I should have typescript

14:42.920 --> 14:49.640
understandings that's if I want something which is left of right and assign a variable

14:49.880 --> 15:00.120
right I should have the right thing but the thing is typescript decide to infer s as a string and not

15:00.120 --> 15:09.240
as a left or right and why typescript does that because here we have a let s equal right and not

15:09.240 --> 15:16.760
a cost s equal right if you change the let by the cost typescript will correctly infer but since

15:16.760 --> 15:23.240
there's shared immutability everywhere typescript can't really know or assume that the value of s

15:23.240 --> 15:29.800
will not be changed so it just say okay it will be a string even if you don't change it if you even

15:29.800 --> 15:36.440
if you use it right after say it's a string because it's mutable it can change so you don't know

15:37.800 --> 15:45.960
it's don't know so so that's kind of among situation where so typescript inference failed

15:45.960 --> 15:51.560
and if you have immutability you don't have this kind of error of course and there is also

15:52.600 --> 15:58.920
bad typing this code is a bit nasty but the idea if you expect something which is a string or a

15:58.920 --> 16:08.760
number and then you check it's a string and then you kind of calling some things that changing the

16:08.760 --> 16:15.400
value behind the back of typescript and typescript can detect that because typescript just choose to

16:15.960 --> 16:21.560
don't keep track of that and assume you don't do it even if you can do it so this code was compiled

16:23.080 --> 16:30.280
it will check with typescript strict typescript strict is hard to say we say there is no

16:30.280 --> 16:34.920
no error everything is fine but if you run it every of course at one time you say that's two

16:34.920 --> 16:41.560
uppercase is not a function which is annoying I would expect typescript to catch it but in

16:41.560 --> 16:47.000
a way I know typescript can't catch it because yeah it's really hard to keep track of every value

16:47.000 --> 16:59.560
and and types then can't do that easily so this question is no how I expect types to work in my

17:01.160 --> 17:08.360
minimal programming language I've not finished yet and there is an idea that's come from

17:09.320 --> 17:15.480
mostly really mathematical language which is called dependent type language which is the idea that

17:15.480 --> 17:23.800
types could be values that could be used like a value you can assign like for example here I just say

17:23.800 --> 17:29.080
types kind of a function they just say if something is true or false and if it's true

17:29.080 --> 17:35.720
it's type and if it falls it don't type it's really natural to understand but

17:36.680 --> 17:44.600
then I could use this in my code in to prefix value and say okay let's check if it's work and everything and

17:46.600 --> 17:52.040
and this is a really expressive way to say that something is a type because every function could

17:52.040 --> 18:00.120
be a type as soon as the function return true or false a boolean value this since there are

18:00.200 --> 18:07.560
functions function can be composed so you can for example do structural typing you can for

18:07.560 --> 18:12.760
example do union types the things you have in typescript you can do interchange type it's just

18:12.760 --> 18:20.760
way to say is it a thing and a thing and a thing or a thing is a thing is a thing and and just

18:20.760 --> 18:27.960
comparing value it's not that hard but the thing is you want to run all that computation at run at

18:27.960 --> 18:36.200
build time not at run time so you kind of all you you will you will succeed to do that what

18:36.200 --> 18:42.280
typically typescript type script can do and the thing is it's more easy because as we see before

18:43.720 --> 18:48.600
the execution flow of the language is more predictable there's no shown metability you

18:48.600 --> 18:52.440
don't know if a value can be shown by something else and there is a technique that's come from

18:52.440 --> 19:00.520
static analysis which is technique which is mostly used to prove that's a language that don't behave

19:00.520 --> 19:06.760
correctly still behave correctly this technique for example used to prove that the C program works as

19:06.760 --> 19:13.240
expected and in a C program you can do whatever you want so you kind of need a powerful technique

19:13.960 --> 19:18.600
so the idea of this technique is typing a program checking a program the build time check

19:18.600 --> 19:23.800
is really like running your program you run your program and you check if it failed or if it worked

19:23.800 --> 19:27.640
but running a program does not scale because if your program has an infinite loop your

19:28.200 --> 19:32.760
check at build time will be infinite or if you do an infinite recursion so you have to change a bit

19:32.760 --> 19:38.840
to be aware of your program you have to change a bit of if else work a function call work and you

19:38.840 --> 19:44.280
have to change a bit the standard library to to not do print not write file not read file and the

19:44.280 --> 19:50.360
idea if you change a bit seems to be fully determined for example random function rather than returning

19:50.360 --> 19:57.320
a random number return the range of possible numbers so you know your number will be between zero and

19:57.320 --> 20:04.200
five because it's expected to be between zero and five but you don't know what value you you you

20:04.200 --> 20:12.520
change value by kind of the what would be the expected value in this case this is really simple

20:12.520 --> 20:16.760
and powerful technique but that does not really scale well because if you have a really big program

20:16.760 --> 20:24.120
you kind of running a really big program at build time which is problematic and there's a solution

20:24.120 --> 20:35.320
to that later in this presentation and I have a little demo of this working yeah so here I have

20:35.960 --> 20:45.080
four file but only two of interest I have something in type script which is I have an array of four

20:45.080 --> 20:52.040
element I pop an element and try to access the previous last element and obviously it failed

20:54.200 --> 21:03.000
and I have the same thing in these that look kind of similar actually parentheses are optional

21:03.240 --> 21:11.000
but I put them because it's more looking like JavaScript yeah so two two can do the same thing so

21:11.720 --> 21:21.000
if I do it in in type script yeah take a while it's really small file but still type script yeah

21:21.880 --> 21:28.520
cool I have an old computer for type script defense and it compile no issue everything

21:28.520 --> 21:37.480
fine and if I run it obviously I got in the fine which is not what I I expect here but if I do it

21:38.680 --> 21:48.600
with my super cool side project toy compiler I have a really nice error that tell me a lot about

21:48.600 --> 21:56.440
what's it is happening here yeah so tell me what's the static value of the array what's

21:57.080 --> 22:04.680
happening where how yeah and I work mostly on that on having kind of user friendly error

22:05.560 --> 22:11.560
and tries next to make this thing scale well and have more expressivity to explain type so

22:12.200 --> 22:22.280
so that's the idea um yeah I'm I'm I'm near the end of the talk so I implement a lot of things

22:22.280 --> 22:29.160
like really funny scoping bugs I use three-seater for my grammar which is what use github for

22:31.320 --> 22:39.000
syntax creation and analysis of everything on github I have all the things we have in

22:39.000 --> 22:44.200
JavaScript like the spread operator or the structuring I have things that does not exist in

22:44.200 --> 22:49.560
JavaScript like implicit function argument, hyper-overloading and I have a small standard

22:49.560 --> 22:57.400
library where with everything you can expect to to write a program and and I have also a

22:57.400 --> 23:02.680
client as I just demonstrate that work without node in your class you don't even need to have

23:02.680 --> 23:09.560
JavaScript installed on your computer to make it work I have build targets so you can customize

23:09.560 --> 23:16.200
your JavaScript with different compile time variable and you can even use or define have

23:16.200 --> 23:23.480
build cache so when you you do yeah it's not a good example because the compilation fail anyway

23:24.120 --> 23:29.720
but if your compilation succeeds if you run it several times you just compile only the files

23:29.720 --> 23:37.320
that change not the new one I have syntax highlighting not the best but still and I have

23:37.320 --> 23:43.160
a lot of things left to do I don't have yet pattern matching I would like to have it for the presentation

23:43.160 --> 23:52.840
but I still don't have it so I try to do it soon because it's really nice to kind of destruct your

23:52.840 --> 24:02.440
things in function if parameter or yeah anyway so this case where my language looks really too

24:02.440 --> 24:07.720
functional like you don't really can't really do while loops you can have forage but you can't have

24:07.720 --> 24:15.000
while and because you need kind of mutability to be able to say okay do that until that thing

24:15.000 --> 24:25.080
it's no longer valid and and I'm kind of thinking about having a bit of mutability constraint because

24:25.080 --> 24:32.120
it solves this problem and there is subtyping because actually with types I as I show them I cannot

24:32.120 --> 24:42.600
say that's a type is of another type and it's not that art you but I didn't did it yet because I

24:42.600 --> 24:51.160
have keep track of all the type declare and can explain that later if there is question about it

24:52.360 --> 24:59.560
and and yeah and there is a lot of things to do and societal is a part-time project but maybe one

24:59.560 --> 25:05.080
day it will no longer be a part-time project it's really nice to have a language server protocol

25:05.080 --> 25:11.240
maybe you are aware of that debug adapter protocol too it's kind of the language was designed the

25:11.240 --> 25:19.400
first place to not compile to JavaScript but to compile to kind of so I made a read me you can

25:19.480 --> 25:31.240
try it if you want and that's basically the end of my talk thank you

25:35.160 --> 25:37.240
are there any questions

25:50.120 --> 26:00.360
yeah so the question was what's programming language parted part theme I use as inspiration

26:00.360 --> 26:06.120
was this just JavaScript or something else for example rest or functional programming and the

26:06.120 --> 26:13.880
answer is I work in for the asset for an ascal company so I am really a functional programmer

26:14.440 --> 26:22.200
indeed and before I was working with rest and I really love rest but I I kind of feeling that

26:22.200 --> 26:30.440
trust is not a language for anyone because rest ergonomic make it sometimes really painful to use

26:30.440 --> 26:38.120
for writing like most of the program tasks you you want to write in your daily program or life

26:38.680 --> 26:48.840
so my first motivation was to try modestly to do a better rest like a rest but that's with maybe

26:48.840 --> 26:58.120
more simple rules and more easy to use but still the same kind of guarantee but it's still the idea

26:58.120 --> 27:04.200
a bit behind this project but I I like what I said in the beginning of the talk I try to

27:04.920 --> 27:11.000
to I try to make something small and hackable in on which I can really experiment if my

27:11.000 --> 27:17.480
semantic work in my syntax is is an ambiguous this kind of stuff and it's more easy to have

27:19.880 --> 27:25.960
something small that work on which you can experiment and see if it's usable rather than

27:26.840 --> 27:31.880
it's a bigger goal I have I had in the beginning which was more inspired by

27:32.520 --> 27:37.960
yeah rest or functional programming overall yeah thanks for the question

27:51.240 --> 27:52.760
so uh one of the

27:55.960 --> 27:57.340
you

