WEBVTT

00:00.000 --> 00:13.680
We're here with Dennis Luxald to present annotated type hinge you can use at runtime.

00:13.680 --> 00:20.080
Dennis is a Python developer working for the label on post-gres infrastructure and automation.

00:20.080 --> 00:24.280
And he's been a long time free software hacker.

00:24.280 --> 00:27.880
Thank you very much for being here with us, Dennis.

00:27.880 --> 00:33.880
Thank you.

00:33.880 --> 00:37.880
Thank you. So annotated type hinge you can use at runtime.

00:37.880 --> 00:43.880
First of you want to learn me, I work at Delibos with a small French company doing post-gres service.

00:43.880 --> 00:50.880
And they are do database infrastructure automation and also trying to contribute to process ecosystem.

00:50.880 --> 00:55.880
Most notably recently the psychophagy database adapter in Python.

00:55.880 --> 01:00.880
And last but not least, Python project at SciPy or Macro.

01:00.880 --> 01:03.880
So why talking about annotated?

01:03.880 --> 01:08.880
Perhaps we have seen this kind of code in the wild recently or less recently.

01:08.880 --> 01:12.880
It's taken from Python documentation.

01:12.880 --> 01:18.880
Python is a well-known and famous nowadays data modeling and validation library in Python.

01:18.880 --> 01:24.880
And you can see from their documentation, especially recently since the version of library,

01:24.880 --> 01:31.880
that's this annotated pattern kind of spread everywhere in the library.

01:31.880 --> 01:39.880
Another example is here a code sample from Fast API, which is another famous library

01:39.880 --> 01:43.880
useful for doing web API in Python.

01:43.880 --> 01:47.880
And there is also this annotated pattern here.

01:47.880 --> 01:55.880
When I stumbled upon this last year when doing a migration to Python in V2,

01:55.880 --> 02:00.880
I was kind of disappointed because this syntax looks well in Python.

02:00.880 --> 02:04.880
It's verbose, it's not really usual in Python.

02:04.880 --> 02:07.880
So I wanted to talk about it and why.

02:07.880 --> 02:14.880
First, let's see how it works because it's not very intuitive to me.

02:14.880 --> 02:21.880
Then I wondered how can I use and define my annotation in order to use the annotated syntax

02:21.880 --> 02:27.880
using my annotation to when I would define not just the one that would be provided by the library

02:27.880 --> 02:30.880
and for which use cases.

02:30.880 --> 02:33.880
So the line of the talk is threefold.

02:33.880 --> 02:39.880
First I'll introduce typing.annotated, which is defined in a PEP, 593.

02:39.880 --> 02:46.880
And then we'll walk through a few of these cases involving data-centric models

02:46.880 --> 02:52.880
and doing validation, serialization, and user interface, all using annotated.

02:52.880 --> 03:00.880
And first and third I'll discuss what the adoption in the community and ecosystem of this annotated construct.

03:00.880 --> 03:05.880
So let's start with PEP 593.

03:06.880 --> 03:12.880
So when it is defined in the typing module, it's in the standard library,

03:12.880 --> 03:18.880
but in my opinion it's not really a typing similar to others.

03:18.880 --> 03:22.880
It's more like an annotation.

03:22.880 --> 03:30.880
Maybe more in the spirit of the initial idea of function annotation defined in a pre-old PEP now

03:30.880 --> 03:39.880
in which you can attach an annotation to an identifier using the colon symbol.

03:39.880 --> 03:49.880
And then it was used for typing, but really here we have the ability to annotate identifiers.

03:49.880 --> 03:59.880
Identifiers are for example class attributes, function parameters, or anything in the name space like a module or something.

04:00.880 --> 04:10.880
It's here since Python 3.9 or in typing instruction if you have a Python installation.

04:10.880 --> 04:15.880
And the PEP is named flexible function and variable annotations.

04:15.880 --> 04:17.880
What does it tell?

04:17.880 --> 04:25.880
It tells that you can annotate a variable named veer with the type int annotated,

04:25.880 --> 04:27.880
which takes at least two arguments.

04:27.880 --> 04:32.880
The first one is a valid type, could be a built-in type or custom type you define.

04:32.880 --> 04:36.880
And then it takes at least one metadata or annotation.

04:36.880 --> 04:44.880
I would use the metadata or annotation in an interchangeable manner in the following.

04:44.880 --> 04:49.880
And you need to pass only one annotation, but you can pass many of them.

04:49.880 --> 04:55.880
The key idea of this is that this metadata can be used for static analysis and also at runtime,

04:55.880 --> 04:58.880
which is pretty new in the typing ecosystem.

04:58.880 --> 05:06.880
And it opens for pretty interesting use case in my opinion, although syntax is a bit well.

05:06.880 --> 05:13.880
I think it's also interesting because it's designed to be composable, meaning I'm quoting the PEP here,

05:13.880 --> 05:18.880
but basically it means that when a tool analyses the code base,

05:18.880 --> 05:25.880
the data static analysis or at runtime, and it encounters an annotation it does not know,

05:25.880 --> 05:27.880
it should ignore it.

05:27.880 --> 05:34.880
And if it encounters an annotation it owns, typically because it defines it, it should handle it.

05:34.880 --> 05:39.880
So it means that if you use annotated to combine many annotations from different source,

05:39.880 --> 05:45.880
you can expect them to play well together.

05:45.880 --> 05:48.880
How to consume annotations?

05:48.880 --> 05:53.880
Because once you have defined annotated values you will need to consume them.

05:53.880 --> 06:00.880
In the typing module, still in the standard library, you have a couple of utility functions I will introduce here.

06:00.880 --> 06:08.880
The first one is getTypins, which can be used for any kind of object like a class,

06:08.880 --> 06:17.880
even an instance of a class or functions, any three terms, a mapping from attribute names to their typings.

06:17.880 --> 06:25.880
So if we have this point at a class with two attributes, the second one being annotated,

06:25.880 --> 06:31.880
we can see that the int value, which is dictionary, returns x and y,

06:31.880 --> 06:39.880
and x is simply the integer class, and y is the annotated construct.

06:39.880 --> 06:47.880
You can also use annotations and gender attributes, but getTypins is more powerful in general.

06:47.880 --> 06:51.880
From there, you need to inspect individual annotations,

06:51.880 --> 06:57.880
and you have two functions, you have getOrigin and getAx, still from the typing module.

06:57.880 --> 07:07.880
If you use getOrigin on the typings, it allows to discriminate between all the typing constructs that are in the typing module,

07:07.880 --> 07:12.880
and especially in the defying in your case, which one are annotated types.

07:12.880 --> 07:17.880
So you can compare these results with the ease operator, for instance.

07:17.880 --> 07:22.880
Then you can extract the arguments of the annotated value,

07:22.880 --> 07:32.880
which means here in our example, in our y example, getting the type and annotations as a list here.

07:32.880 --> 07:36.880
So that's how you consume annotation.

07:36.880 --> 07:42.880
And in general, thanks to the composability principle I exposed before,

07:42.880 --> 07:49.880
once you have extracted all the annotations, you would ignore the ones that you are not interested in.

07:49.880 --> 07:55.880
Here we only endow the label annotation which we own, and we ignore the others.

07:55.880 --> 08:01.880
So we typically check this with an instant check.

08:01.880 --> 08:06.880
To wrap this up, I'll introduce this simple helper.

08:06.880 --> 08:10.880
It's not full proof, but it works for our examples.

08:10.880 --> 08:20.880
Basically, it uses getTypings, getOrigin, and getArgs in order to work through the annotation of an object

08:20.880 --> 08:26.880
and find the one matching the specified type here.

08:26.880 --> 08:35.880
So we to illustrate it, if we use getAnnotation on the point class introduced before

08:35.880 --> 08:40.880
and trying to match the label annotation, we get these results.

08:40.880 --> 08:48.880
So the y attribute, the y name, the annotation, and the type bound to the attribute.

08:48.880 --> 08:52.880
So I'll reuse this function here later on.

08:52.880 --> 08:57.880
So that's all for the presentation of annotated from the PEP and how to consume them.

08:57.880 --> 09:06.880
I will now introduce some use cases in order to illustrate why you would want to use annotated or why not, maybe.

09:06.880 --> 09:11.880
I'll use this simple model which is a calendar event model.

09:11.880 --> 09:13.880
It uses pyidentic as a base model.

09:13.880 --> 09:20.880
So again, pyidentic is a famous library for doing data modeling and validation or stylization.

09:20.880 --> 09:23.880
It's similar in scope to data class.

09:23.880 --> 09:33.880
And here we have an event model with a few fields, a summary description, and two dates defining the duration of the event.

09:33.880 --> 09:35.880
And the following will do three things.

09:35.880 --> 09:39.880
The first one will do validation of the daytime fields.

09:39.880 --> 09:44.880
We'll do this using pyidentic built-ins annotation.

09:44.880 --> 09:47.880
So we'll see how to use third-party annotations.

09:47.880 --> 09:50.880
Then we'll do high-calendar stylization.

09:50.880 --> 09:55.880
High-calendar is a simple format for XMG calendar data, text format.

09:55.880 --> 10:02.880
But we'll see how to implement our own annotation in order to perform stylization.

10:02.880 --> 10:05.880
And the third one will be console rendering.

10:05.880 --> 10:11.880
We'll build some kind of user interface in the console in order to print and display calendar events.

10:11.880 --> 10:16.880
So again, this will illustrate how to define our own annotation.

10:16.880 --> 10:20.880
So starting with daytime validation.

10:20.880 --> 10:28.880
We define, we use here the built-in annotation from pyidentic.

10:28.880 --> 10:35.880
And namely, it's the aftervalidator, which is some kind of annotation factory,

10:35.880 --> 10:42.880
because it takes a function here tzware, which as its name suggests,

10:42.880 --> 10:47.880
would validate that the daytime value is not naive.

10:47.880 --> 10:52.880
Meaning it has a time zone defined.

10:52.880 --> 11:01.880
So here, you can simply define tzware type by combining the daytime field

11:01.880 --> 11:11.880
with the pyidentic shipped annotation construct and your own validation logic.

11:11.880 --> 11:16.880
Here, I'm defining an event with a naive time zone.

11:16.880 --> 11:20.880
And we can see that pyidentic produced a validation error,

11:20.880 --> 11:28.880
which under the hood is triggered by our value error with the expecting a tzware daytime message.

11:28.880 --> 11:31.880
So it works.

11:31.880 --> 11:37.880
As a side step, I would like to mention that before using annotated in pyidentic,

11:37.880 --> 11:41.880
in all the versions of pyidentic, the pattern for doing validation

11:41.880 --> 11:46.880
was through using class methods and decorators,

11:46.880 --> 11:49.880
namely the field validator decorator,

11:49.880 --> 11:55.880
in which you have to define custom method in your model classes,

11:55.880 --> 12:01.880
and you have to bind the attributes you want to validate to the method

12:01.880 --> 12:04.880
using the field validator decorator.

12:04.880 --> 12:09.880
So that's another way to define validation in pyidentic, not using the annotation.

12:09.880 --> 12:15.880
And why, in my opinion, the annotated pattern was adopted in pyidentic

12:15.880 --> 12:18.880
is for the following reason, I would say.

12:18.880 --> 12:24.880
Because the validation method, the class method is loosely bound to the attributes.

12:24.880 --> 12:30.880
You can see that there is no direct relationship between the start art and end art

12:30.880 --> 12:35.880
field definition and the validation, whereas in the previous example,

12:35.880 --> 12:43.880
with the annotation, you have inline combination of type and annotations.

12:43.880 --> 12:47.880
Then if you have different classes using the same validation

12:47.880 --> 12:52.880
because validating a non-native daytime is quite usual,

12:52.880 --> 12:57.880
you would have to repeat the method in all your model classes.

12:57.880 --> 13:02.880
And similar for all use cases, less like serialization.

13:02.880 --> 13:05.880
So that's why I think the annotated patterns

13:05.880 --> 13:09.880
has taken adoption in this kind of library.

13:13.880 --> 13:17.880
Here we simply introduce an alias, tzdatetime,

13:17.880 --> 13:23.880
which is the annotated daytime with or validator in order to make or code less variables.

13:23.880 --> 13:29.880
So that's one idea of annotated, despite being verbose, you can use aliases.

13:29.880 --> 13:35.880
And you can define your base model class just using the aliases.

13:37.880 --> 13:41.880
Next, next you see is ICANN under serialization.

13:41.880 --> 13:46.880
Here, obviously, I'm using, I'm adding another annotation.

13:46.880 --> 13:51.880
These annotations are defined in the ICANN module, which I will introduce later.

13:51.880 --> 13:54.880
And there are serializer instances.

13:54.880 --> 13:58.880
An ICANN under serialization just takes a label name,

13:58.880 --> 14:03.880
which would be used to serialize the data.

14:03.880 --> 14:06.880
So here you can see that we have combined different annotations

14:06.880 --> 14:09.880
in the same annotated construct,

14:09.880 --> 14:14.880
because here our tzdatetime is already in an annotated value

14:14.880 --> 14:19.880
and it's again wrapped in another annotated construct with another annotation.

14:19.880 --> 14:23.880
All this is flattened at runtime.

14:23.880 --> 14:28.880
In the ICANN module I mentioned earlier, we have this serializer class.

14:28.880 --> 14:31.880
Here it's a data class. We have the label field.

14:31.880 --> 14:34.880
And we have a simple serialization method,

14:34.880 --> 14:40.880
which does some transformation between the value, which would be the field value,

14:40.880 --> 14:42.880
and specify it.

14:42.880 --> 14:46.880
So if it's a date, we need to remove the time zone and change to ETC

14:46.880 --> 14:52.880
and use this kind of format.

14:52.880 --> 14:58.880
Then we use this function, which takes the object events,

14:58.880 --> 15:04.880
walks through the annotation using the get annotation function introduced later

15:04.880 --> 15:08.880
and it calls the serial's value.

15:08.880 --> 15:11.880
And we join the result using this.

15:11.880 --> 15:16.880
So an example here, we still define our event model.

15:16.880 --> 15:24.880
We get the date and we can print the serialization in the 9-calendar format.

15:24.880 --> 15:29.880
I'm going to work up to define and consume an annotation.

15:29.880 --> 15:33.880
The first thing you do is to define annotation, typically as classes,

15:33.880 --> 15:35.880
the data class is quite handy for this.

15:35.880 --> 15:42.880
You can define options and you would typically implement an underline method

15:42.880 --> 15:44.880
in order to process the value.

15:44.880 --> 15:48.880
Then you add and take your data type using annotated, obviously.

15:48.880 --> 15:51.880
And then you consume your object using the get annotation patterns

15:51.880 --> 15:56.880
I would annotate a bit earlier.

15:56.880 --> 16:01.880
The third use case, here we are stacking another layer of annotations

16:01.880 --> 16:04.880
from the UI module, the UI module I will introduce later.

16:04.880 --> 16:13.880
We are adding UI annotation in order to define all the fields of our event model

16:13.880 --> 16:16.880
will be serialized in the console.

16:16.880 --> 16:21.880
We have a text annotation, a margithon field for the description

16:21.880 --> 16:23.880
and we have data serializer for description.

16:23.880 --> 16:28.880
Here we will be using the rich library, which is a pretty nice library

16:28.880 --> 16:36.880
for doing console rendering and building terminal user interfaces.

16:36.880 --> 16:41.880
The widgets, which are the annotations we have used in the previous example

16:41.880 --> 16:47.880
are defined here using classes, following the pattern I introduced before.

16:47.880 --> 16:52.880
And they basically delegate to rich to do the rendering of a field

16:52.880 --> 16:59.880
and then do the running on the type of the field.

16:59.880 --> 17:06.880
Here it's another way to process the annotation instead of introducing a custom function

17:06.880 --> 17:08.880
for processing the object.

17:08.880 --> 17:13.880
We introduce a mixing class, which follows the rich protocol.

17:13.880 --> 17:15.880
It's defined in documentation.

17:15.880 --> 17:18.880
You need to define a Dunder rich console method.

17:18.880 --> 17:22.880
And there, again, we used our get annotation function

17:22.880 --> 17:26.880
looking for the widget class, widget annotations.

17:26.880 --> 17:32.880
And if we found some, we call the render method of our widgets, get the value

17:32.880 --> 17:37.880
and we need the text value.

17:37.880 --> 17:42.880
We use this as a mixing, so we extend our class events.

17:42.880 --> 17:47.880
If we take another example, we added a description with some margithon formats.

17:47.880 --> 17:49.880
The dates field here are the same.

17:49.880 --> 17:55.880
Simply, they will be colored depending on whether the events are started or not.

17:55.880 --> 17:59.880
So if you reach, print, or events, we get this.

17:59.880 --> 18:04.880
We can see that we have margithon interpreted things in the description

18:04.880 --> 18:08.880
and the start date is green.

18:08.880 --> 18:10.880
So that's all for use cases.

18:10.880 --> 18:15.880
I hope I've demonstrated why you would want to use annotated or why not, maybe.

18:15.880 --> 18:20.880
Then I will discuss about the adoption of this pattern in the ecosystem and community.

18:20.880 --> 18:24.880
First, we have adopters, like I mentioned before,

18:24.880 --> 18:27.880
by the antique, fast API, or typo.

18:27.880 --> 18:30.880
So you have this kind of code in the wild.

18:30.880 --> 18:39.880
And you might want to get used to this because I think it's here to stay in this library.

18:40.880 --> 18:45.880
I hope I've demystified the pattern so that you can understand what it does it mean

18:45.880 --> 18:50.880
to have this kind of code in the documentation and if you copy-paste it, for example.

18:50.880 --> 18:54.880
There's an interesting project in annotated type,

18:54.880 --> 19:00.880
which provides reusable constraint type to be used with annotated

19:00.880 --> 19:08.880
so that you don't have to define your quite classic annotation.

19:08.880 --> 19:12.880
It's also adopted in a SQL alchemy,

19:12.880 --> 19:21.880
although it's a bit more involved because you have to use the mapped type annotated file.

19:21.880 --> 19:28.880
And obviously, in a project with less coupling with the typing system, there is less enthusiasm.

19:28.880 --> 19:30.880
It's obvious.

19:30.880 --> 19:36.880
This brings me to some skepticism I've seen in the community.

19:36.880 --> 19:40.880
First of all, I've used in annotated is quite verbose.

19:40.880 --> 19:49.880
The symbol is already in uncultured and if you stack different kind of annotation in the same type,

19:49.880 --> 19:52.880
it's getting verbose so you have to take care about this.

19:52.880 --> 19:54.880
It's us, readability.

19:54.880 --> 20:00.880
Then it's kind of awkward because annotations are not necessarily typing,

20:00.880 --> 20:03.880
although most consumers do use typing information.

20:03.880 --> 20:08.880
But if you don't want to use typing, you cannot really use the annotation

20:08.880 --> 20:13.880
as provided by annotated at the moment.

20:13.880 --> 20:16.880
Also, consuming annotation is a bit tedious as we have seen.

20:16.880 --> 20:20.880
You have to write some bullet-plate code.

20:20.880 --> 20:21.880
And there is more coming.

20:21.880 --> 20:25.880
Here, there is a pep I would like to mention, 724.27,

20:25.880 --> 20:29.880
which would introduce a doc construct in the typing module,

20:29.880 --> 20:33.880
which would be used through document fields.

20:33.880 --> 20:39.880
So again, it's not typed, but it's in the typing module.

20:39.880 --> 20:45.880
So this brings us to the typing topic, which as you may know,

20:45.880 --> 20:55.880
in the Python community is quite divisive because there are some fans of the typing and some are not.

20:55.880 --> 21:01.880
And this, I think Python is growing with its features because they bring user value.

21:01.880 --> 21:08.880
The example I've shown in Fast API are a lot more expressive, in my opinion,

21:08.880 --> 21:12.880
than the one that you would typically use in other metaprogramming patterns,

21:12.880 --> 21:14.880
like decorators and so on.

21:14.880 --> 21:18.880
And if you want to deep dive more in this topic,

21:18.880 --> 21:23.880
I encourage you to read this LWNN article, which was published recently,

21:23.880 --> 21:33.880
and it provides quite a nice overview of the typing issue or topic in the ecosystem and community.

21:33.880 --> 21:35.880
Thank you for your attention.

21:35.880 --> 21:36.880
I'm done.

21:36.880 --> 21:42.880
And if you have some questions or some thoughts to share, but annotated, I'm happy to discuss.

21:42.880 --> 21:54.880
Thank you very much, Tennis. Do we have any questions?

21:54.880 --> 21:57.880
Let's see. Now is your chance to raise your hand.

21:57.880 --> 21:59.880
I can see one question there.

21:59.880 --> 22:11.880
Don't be shy. Raise high, please.

22:11.880 --> 22:12.880
Hello.

22:12.880 --> 22:14.880
Thanks for your talk. It was very cool.

22:14.880 --> 22:19.880
Could you go into a little bit more detail of how I could use annotated on my own class?

22:19.880 --> 22:22.880
Because like I saw it in Pydantic and I was like, oh, cool.

22:22.880 --> 22:26.880
But I didn't quite get how I could use that in my own...

22:26.880 --> 22:31.880
Sorry, can you repeat?

22:31.880 --> 22:36.880
No, okay. Could you tell me how I could use that annotated trick on my own class

22:36.880 --> 22:39.880
instead of it being like a Pydantic base model thing?

22:39.880 --> 22:52.880
Yeah, that's what I illustrated.

22:52.880 --> 22:59.880
So here you have this cellulizer, which is a class I just defined for the example.

22:59.880 --> 23:07.880
And then you annotate your attribute with your cellulizer instances.

23:07.880 --> 23:12.880
Here it takes an option, which is the label of the cellulization value.

23:12.880 --> 23:18.880
And then you need to write this kind of function in order to consume the annotation

23:18.880 --> 23:22.880
of the instance of your event class.

23:22.880 --> 23:27.880
Yeah, but the event was inheriting from base model, which was a Pydantic thing.

23:27.880 --> 23:29.880
So if I'm in my own project...

23:29.880 --> 23:31.880
You don't need to do this Pydantic for this.

23:31.880 --> 23:34.880
You can take a built-in class or a data class, or...

23:34.880 --> 23:36.880
It's not related to Pydantic.

23:36.880 --> 23:43.880
The Pydantic thing was just for the first example, validating the time.

23:43.880 --> 23:45.880
Apart from that, you don't need Pydantic at all.

23:45.880 --> 23:50.880
Okay, thank you very much.

23:50.880 --> 23:52.880
Thank you. Do we have any more questions?

23:52.880 --> 23:55.880
One more. One more.

23:55.880 --> 23:58.880
The session is still being recorded.

23:58.880 --> 24:01.880
So please be silent there.

24:02.880 --> 24:04.880
How can we reach you?

24:12.880 --> 24:14.880
I'm not sure if it's okay to ask that.

24:14.880 --> 24:18.880
Is it possible to use that in Django, REST, and WorkSphere Realizer?

24:18.880 --> 24:22.880
Have you tried or have you seen anyone try that using this one?

24:22.880 --> 24:24.880
Is it Django, REST, and WorkSphere Realizer?

24:24.880 --> 24:25.880
In Django?

24:25.880 --> 24:27.880
Yes, Django, REST, and WorkSphere Realizer.

24:27.880 --> 24:30.880
I don't know. I don't know Django, REST, and WorkSphere Realizer.

24:30.880 --> 24:35.880
In fact, you can use it as long as you define your own way of consuming the annotation.

24:35.880 --> 24:39.880
So if you want this kind of helper function, you can use it, definitely.

24:39.880 --> 24:40.880
Okay.

24:40.880 --> 24:43.880
It's not bound to a particular framework, in fact.

24:43.880 --> 24:45.880
It's in the standard pattern.

24:45.880 --> 24:47.880
Thank you very much.

24:47.880 --> 24:49.880
Another round of applause for Dennis.

