WEBVTT

00:00.000 --> 00:12.520
Okay, now we have David from the Alan Turing Institute who's going to tell us about RC

00:12.520 --> 00:13.520
tab.

00:13.520 --> 00:16.520
Thanks very much.

00:16.520 --> 00:19.440
Yeah, I'm David Llewellyn-Jones.

00:19.440 --> 00:24.640
I'm very happy to be here at the HPC, Big Data and Data Science Dev Room.

00:24.640 --> 00:29.440
I'm relatively new to the HPC area, so I'm still getting used to all of the terminology

00:29.440 --> 00:30.440
and everything involved.

00:30.440 --> 00:36.360
It's a very exciting area, so it's nice to be part of the community.

00:36.360 --> 00:40.960
So as it says, I'm from the Alan Turing Institute.

00:40.960 --> 00:47.440
That's the UK's National Institute of Data Science and AI, and I'll talk a little bit

00:47.440 --> 00:53.160
about what the Institute does and the relationship with RC tab.

00:53.160 --> 00:57.120
RC tab is a cloud management system that's been developed at the Institute.

00:57.560 --> 01:00.520
I'm going to talk a little bit about that, and then I'll also talk about the process

01:00.520 --> 01:06.120
that was gone through to turn it from an internal project into an open source project.

01:06.120 --> 01:10.040
I think there's some interesting things to be learned from that.

01:10.040 --> 01:16.840
So I'm part of the research computing platform teams at the Institute, and I work with various

01:16.840 --> 01:18.720
other people in the team.

01:18.720 --> 01:25.720
So Thomas Lasauskas, Instentson, SA Ben and Joe Palmer, alongside myself, are the current

01:25.720 --> 01:31.160
team, and I should say that all of the people in that list, apart from myself, are RC tab

01:31.160 --> 01:32.160
developers.

01:32.160 --> 01:33.520
I'm just an RC tab user.

01:33.520 --> 01:36.560
I use it in my day-to-day work.

01:36.560 --> 01:38.520
But there are some previous people on the team.

01:38.520 --> 01:45.600
Oscar, Giles and Pam Rochner were also developers of RC tab, so they also contributed to the

01:45.600 --> 01:51.360
work that I'm talking about here.

01:51.360 --> 01:56.560
So first of all, a little bit about the background to RC tab.

01:56.560 --> 01:59.400
So I'm part of the research computing team, as I mentioned.

01:59.400 --> 02:04.120
The research computing team essentially supports other researchers in the Institute doing research

02:04.120 --> 02:06.080
on compute systems.

02:06.080 --> 02:10.920
So that could be high-performance computing systems, or it could be cloud systems.

02:10.920 --> 02:16.640
The Institute itself doesn't run its own HPC clusters, but it does have relationships

02:16.640 --> 02:18.440
with a number of other clusters in the UK.

02:18.440 --> 02:24.120
So for example, it has relationships with Baskerville, with J2, with Archer 2 and with

02:24.120 --> 02:31.360
Dawn, which is the new Intel-based system, and who are here today, I guess, represented.

02:31.360 --> 02:33.040
Yeah, that's nice.

02:33.040 --> 02:37.320
So we basically are the interface to those other systems.

02:37.320 --> 02:42.160
And as well as those high-performance computing systems, we are also the interface to the

02:42.160 --> 02:46.360
Azure cloud that researchers are also keen to use as well.

02:46.480 --> 02:50.480
Not everything that our researchers want to do needs high-performance computing.

02:50.480 --> 02:51.760
They might want other sorts of systems.

02:51.760 --> 02:54.760
For example, they might just want to run a website, for example.

02:54.760 --> 02:57.800
And in that case, a high-performance computing system wouldn't be appropriate.

02:57.800 --> 03:04.320
Azure is something that would be more appropriate there.

03:04.320 --> 03:13.760
So yeah, the Alan Turing Institute itself is not that large, but we do have projects

03:13.760 --> 03:19.080
with over 400 researchers.

03:19.080 --> 03:21.920
So it is quite a large number of projects that we're managing.

03:21.920 --> 03:26.320
And so therefore, managing those cloud projects, the interface with the cloud, can be quite

03:26.320 --> 03:27.400
challenging.

03:31.120 --> 03:33.120
So why is the cloud useful in research?

03:33.120 --> 03:40.480
Well, researchers are very keen to use the flexibility of the cloud.

03:40.480 --> 03:44.600
They don't always need to use GPUs, but even when they do want to use GPUs, they might

03:44.600 --> 03:46.560
also want to do it on the cloud.

03:46.560 --> 03:52.320
A lot of the cloud providers are now moving into the same sort of area that the HPC systems

03:52.320 --> 03:53.640
are providing.

03:53.640 --> 03:57.280
The cloud provides a lot of flexibility.

03:57.280 --> 04:01.080
And in addition to that, it's also quite attractive for users that don't necessarily have a Linux

04:01.080 --> 04:07.000
background, that don't have a background of using a Qs, for example, to deploy their

04:07.000 --> 04:08.200
jobs.

04:08.240 --> 04:12.960
A lot of our users, a lot of our researchers are very keen to use cloud systems.

04:15.960 --> 04:17.920
However, there are downsides to that.

04:17.920 --> 04:23.640
And in particular, one of the problems that we find is that with cloud systems, the companies,

04:23.640 --> 04:29.200
Microsoft or Amazon or whoever is running the cloud service, aren't very keen to put

04:29.200 --> 04:33.920
restrictions on the costs that people can accumulate whilst using the cloud.

04:33.920 --> 04:37.080
So you can use cloud services and you can have them on your project and you can use

04:37.160 --> 04:38.600
them as much as you like.

04:38.600 --> 04:39.600
There won't be a cap.

04:39.600 --> 04:43.400
If you go over your funding limit that your project has assigned to you, you can just

04:43.400 --> 04:45.040
carry on using them.

04:45.040 --> 04:49.960
And actually preventing projects from going over their spending limits is a real challenge.

04:52.120 --> 04:56.200
So these clouds are very flexible, but they also provide a lot of scope to shoot yourself

04:56.200 --> 05:02.120
in the foot as a researcher using more resources than you should be able to use, than your

05:02.120 --> 05:04.160
project funding allows, for example.

05:04.520 --> 05:08.440
So there are certain ways you can manage that.

05:08.440 --> 05:13.360
You could, for example, assign a credit card to each of the projects, have a credit card

05:13.360 --> 05:16.920
associated with each of the projects that only has a certain amount of funding on it.

05:16.920 --> 05:21.160
And when that gets used up, then Microsoft will cut off your access to the service.

05:21.160 --> 05:26.360
But that's not really practical in a research institute that has tens, hundreds of projects.

05:26.360 --> 05:28.200
Managing that process is really hard.

05:28.200 --> 05:33.160
Azure and AWS will send you alerts when you get certain limits.

05:33.160 --> 05:35.880
They won't cut you off, but they will tell you when you get certain alerts.

05:35.880 --> 05:39.280
And so you could use that as a mechanism, for example, if you wanted to manage it in

05:39.280 --> 05:40.920
a sort of a manual way.

05:40.920 --> 05:44.560
But again, that's not really practical in a very large institute.

05:44.560 --> 05:51.600
So there really needs to be a way for project managers, people who are working, for example,

05:51.600 --> 05:55.320
in the research computing group, to manage those projects in an automated way.

05:55.320 --> 06:00.440
And that's essentially what our CTab is for.

06:00.440 --> 06:04.760
So I'll talk a little bit now about how Azure structures its resources.

06:04.760 --> 06:10.200
I'm sure many of you will be familiar with this, but in case you're not, Azure structures

06:10.200 --> 06:12.000
resources underneath subscriptions.

06:12.000 --> 06:17.840
And they're a natural way, essentially, to manage project access to Azure resources.

06:17.840 --> 06:24.240
So you can fire up virtual machines, you can fire up firewalls, you can fire up instances

06:24.240 --> 06:27.280
or other web services, for example.

06:27.280 --> 06:30.160
And they will all fall underneath a particular subscription.

06:30.160 --> 06:34.320
In addition to that, you can also put access control on those subscriptions.

06:34.320 --> 06:38.080
So only certain researchers would have access to those subscriptions, but once they've got

06:38.080 --> 06:42.560
access to the subscription, they can then fire up resources under those subscriptions.

06:42.560 --> 06:46.680
So they're a very natural way to manage projects, essentially.

06:46.680 --> 06:51.440
However, as I said, although you can put funding caps on these subscriptions, they won't get

06:51.440 --> 06:54.800
turned off when they reach their limit.

06:54.800 --> 07:00.120
So these are essentially the mechanisms that we use with our CTab to manage the subscription

07:00.240 --> 07:08.080
to manage the resources is via these subscription entities.

07:08.080 --> 07:14.400
So our CTab is a tool that has been developed in-house to essentially perform this process.

07:14.400 --> 07:17.760
So it tracks the spending that's happening on Azure for individual subscriptions, which

07:17.760 --> 07:20.240
are related to individual projects.

07:20.240 --> 07:24.080
It manages the budgets that are associated with them so that people can see how much

07:24.080 --> 07:27.680
they're using and they can track that resource usage.

07:27.720 --> 07:32.440
It will notify users of various points in the process of using that spending, but then

07:32.440 --> 07:37.160
crucially, which is the thing that we really need, it will also deactivate subscriptions

07:37.160 --> 07:39.480
when the money has been used up.

07:39.480 --> 07:44.960
So it will prevent researchers, it will prevent projects from going over their budget limits

07:44.960 --> 07:46.280
for their resources.

07:46.280 --> 07:48.880
And it will do this on a very large scale.

07:48.880 --> 07:56.840
So I'm going to talk a little bit about how it's structured.

07:56.840 --> 07:58.480
So this is the background to it.

07:58.480 --> 07:59.480
So it is open source.

07:59.480 --> 08:03.680
You can go to the GitHub repositories and get access to the code.

08:03.680 --> 08:05.320
You can deploy it yourself.

08:05.320 --> 08:08.800
And it is deployed itself on Azure, so it is an Azure service.

08:08.800 --> 08:11.480
It's split up into essentially four pieces.

08:11.480 --> 08:16.400
So there is the infrastructure repository that handles the deployment of the other services

08:16.400 --> 08:19.520
to the cloud, to the Azure instance.

08:19.520 --> 08:22.680
There's the CLI, the command line interface.

08:22.680 --> 08:26.080
The command line interface allows you to manage the subscriptions.

08:26.080 --> 08:31.240
So that is essentially the right access to the backend database that manages these things.

08:31.240 --> 08:35.200
Then we have functions, which I'll talk about a little bit more detail later, but the functions

08:35.200 --> 08:41.680
essentially are the cron-like jobs that run in the background, which manage access, which

08:41.680 --> 08:46.160
monitor resource usage, and also perform the job of turning off the resources.

08:46.160 --> 08:50.560
And then there is also an API that can be used to create a web interface for access to those

08:50.560 --> 08:52.160
resources as well.

08:52.160 --> 08:54.880
And the functions in the API are all deployed as Docker images.

08:54.880 --> 08:59.000
So if you wanted to use this yourself in your own organization, you could pull those

08:59.000 --> 09:01.200
images directly from Docker Hub and deploy them.

09:01.200 --> 09:07.440
And it's quite a straightforward process.

09:07.440 --> 09:12.400
And so until I search for it, I did not know what this image at the top meant, but that

09:12.400 --> 09:13.800
is a webhook image.

09:13.800 --> 09:16.800
All of these things are managed by GitHub webhooks essentially.

09:16.800 --> 09:20.240
So when we change the code, these things get deployed automatically to Azure.

09:20.240 --> 09:25.600
It's a very smooth process.

09:25.600 --> 09:29.360
So I'm going to show you now a little bit about how the interface looks.

09:29.360 --> 09:33.280
So this is the web interface that's provided by RCTAB.

09:33.280 --> 09:36.800
And you can see that there's essentially a list of subscriptions that you can see on

09:36.800 --> 09:38.760
the left-hand side.

09:38.760 --> 09:41.520
And each of those subscriptions has data associated with it.

09:41.520 --> 09:42.520
So it has the name.

09:42.520 --> 09:44.040
The name is pulled from Azure.

09:44.040 --> 09:48.840
The budget that's associated with it, which doesn't come from Azure, that is allocated

09:48.840 --> 09:51.240
by us using the command line interface.

09:51.240 --> 09:53.160
So we can allocate budget.

09:53.160 --> 09:55.640
And then the usage is monitored in the background.

09:55.640 --> 10:00.120
And when the remaining budget, which you can see on the far right-hand side, reaches zero,

10:00.120 --> 10:03.080
then the instance will be shut down.

10:03.080 --> 10:04.520
The subscriptions will be shut down.

10:04.520 --> 10:08.480
And all of the resources will essentially go into zero cost.

10:08.480 --> 10:11.880
And you can see that in this case here, there are a number of subscriptions that have reached

10:11.880 --> 10:12.880
zero.

10:12.880 --> 10:13.880
And they've been terminated.

10:13.880 --> 10:16.280
As you can see, they've got, I think it's a little skull and crossbones on the left-hand

10:16.280 --> 10:20.560
side to show that they've been terminated.

10:20.560 --> 10:21.720
And you can drill down into this.

10:21.720 --> 10:24.200
So you can select one of the subscriptions to find out more information.

10:24.200 --> 10:25.920
And then you get a page like this.

10:25.920 --> 10:29.600
And here, again, you can see not only the costs associated with it, but you can also

10:29.600 --> 10:32.840
associate costs with project funding and with a ticket.

10:32.840 --> 10:36.760
So we use a ticketing system so we can manage all of those things really, really cleanly

10:36.760 --> 10:38.480
and nicely.

10:38.480 --> 10:41.560
And it's not just us and the research compute team that have access to this.

10:41.560 --> 10:45.360
It's also the researchers themselves that have access to this interface.

10:45.360 --> 10:51.000
And because the access control list can be pulled from Azure into RCTAB, we can ensure

10:51.000 --> 10:54.960
that only the researchers that need access, sorry, only the researchers that have access

10:54.960 --> 10:59.400
to particular subscriptions can gain access to the information about those subscriptions.

10:59.400 --> 11:02.000
And I don't show it here, but you can drill down further.

11:02.000 --> 11:05.440
There are graphs that you can see about your usage and what your costs are and what your

11:05.440 --> 11:06.760
costs are likely to be as well.

11:06.760 --> 11:14.160
So it helps the researchers to manage their budgets that they have on Azure.

11:14.160 --> 11:15.160
So that's the web interface.

11:15.160 --> 11:17.320
The web interface is entirely read-only.

11:17.320 --> 11:19.360
So that's for looking at the information.

11:19.360 --> 11:22.880
You don't get the ability to change any of the information through this interface.

11:22.880 --> 11:27.240
If you want to change the information, you have to use the command line interface, which

11:27.240 --> 11:28.560
looks, some of it looks like this.

11:28.560 --> 11:30.240
It has quite a lot of functionality.

11:30.240 --> 11:34.400
This is the subscription functionality that I've just put the help up for here.

11:34.400 --> 11:39.000
And as you can see, I've also put a command on the bottom which shows how we allocate

11:39.000 --> 11:40.800
the additional budget.

11:40.800 --> 11:42.880
And this is essentially the tool that I'm using day to day.

11:42.880 --> 11:48.160
So I'm basically, when I get a ticket, I see how much funding is needed, is being allocated

11:48.160 --> 11:49.160
to a project.

11:49.160 --> 11:52.600
I check everything's okay, and then I run the command, and the command then allocates

11:52.600 --> 11:55.760
money to the project or removes money to the project.

11:55.760 --> 11:57.800
And we can also set end dates for projects as well.

11:57.800 --> 12:09.960
So the subscriptions would also get shut off if the end date is reached.

12:09.960 --> 12:13.000
So I'll just talk a little bit about how the functionality works in the background.

12:13.000 --> 12:14.000
It's a very high level.

12:14.000 --> 12:18.400
But you can see that we've got the websites, the CLI, that are both on the right-hand side

12:18.400 --> 12:20.480
there, the interfaces to the system.

12:20.480 --> 12:22.520
There is also email integration.

12:22.520 --> 12:27.840
So we use send grid, which is a third-party add-on to Azure to send out emails to users

12:27.840 --> 12:33.560
to tell them that their subscription has been terminated or that they're reaching nearing

12:33.560 --> 12:39.880
the end of their subscription, close to the termination period.

12:40.800 --> 12:42.960
And there's a database in the middle, which captures all the information, as you might

12:42.960 --> 12:43.960
expect.

12:43.960 --> 12:44.960
But then there are these three functions.

12:44.960 --> 12:48.360
So there's the status function, the usage function, and the controller function, which

12:48.360 --> 12:51.320
run their cron-like jobs that run in the background.

12:51.320 --> 12:53.000
So they actually run periodically.

12:53.000 --> 12:54.920
They run every hour, in fact.

12:54.920 --> 12:58.200
And the status function is monitoring the status of a subscription.

12:58.200 --> 13:02.400
It will send out emails to users to tell them that their subscription has been either activated

13:02.400 --> 13:04.960
or deactivated.

13:04.960 --> 13:09.400
The usage function measures the cost that has accumulated on a subscription.

13:09.400 --> 13:13.680
So again, it will also send out emails to users, but it then also feeds that information

13:13.680 --> 13:19.560
into the database, which is used by the controller function to ultimately shut down the subscription

13:19.560 --> 13:22.160
when the remaining usage has been used up.

13:22.160 --> 13:24.480
So all of these things are running in the background.

13:24.480 --> 13:28.200
And they're essentially providing the services that you might think that would be available

13:28.200 --> 13:34.280
on Azure already to do this, but I guess it's not in Microsoft's interest to do so.

13:35.280 --> 13:41.800
So we also have this group management structure that is used for this, as I mentioned.

13:41.800 --> 13:43.400
All of this is deployed to Azure.

13:43.400 --> 13:47.600
So the actual RCTAB infrastructure is deployed to Azure as well.

13:47.600 --> 13:52.640
And you have to manage this quite carefully in an institute like the Turing, because we

13:52.640 --> 13:54.200
have a lot of projects.

13:54.200 --> 13:59.240
Some of them have a lot of private data and those things, because in effect RCTAB has

13:59.280 --> 14:04.720
access to subscriptions, we have to make sure that those are not monitored by RCTAB.

14:04.720 --> 14:08.120
So we have a managed group that is for special case subscriptions that you can see on the

14:08.120 --> 14:12.200
far right hand side for you.

14:12.200 --> 14:15.120
And they are not managed by RCTAB.

14:15.120 --> 14:16.960
Even within RCTAB, we also have two groups.

14:16.960 --> 14:21.720
We have managed and not managed subscriptions, which are both monitored so that users can

14:21.720 --> 14:23.360
find out the information.

14:23.360 --> 14:26.280
But there are certain subscriptions that we don't want to shut down, even if they go

14:26.280 --> 14:27.280
over budget.

14:27.320 --> 14:29.520
One example of that is RCTAB itself.

14:29.520 --> 14:32.280
It's very important that RCTAB doesn't shut itself down.

14:32.280 --> 14:34.160
That would lead to bad consequences.

14:34.160 --> 14:36.800
So there are certain things that we don't want to shut down and we keep those separately

14:36.800 --> 14:37.800
as well.

14:37.800 --> 14:38.800
All right.

14:38.800 --> 14:45.800
I'll talk briefly now about the process of open sourcing.

14:47.040 --> 14:50.760
So originally RCTAB was an internal project.

14:50.760 --> 14:54.200
So we've been using it for, I guess, since 2020.

14:54.240 --> 14:57.440
So between 2020 and 2023, it was an internal project.

14:57.440 --> 14:59.120
It wasn't open source.

14:59.120 --> 15:04.800
It was essentially closed source in some private GitHub repositories.

15:04.800 --> 15:09.600
And it was switched to an open repository around April 2023.

15:09.600 --> 15:16.600
So it's now been available as open source for a little under a year.

15:16.600 --> 15:20.880
And the process of open sourcing was actually quite time consuming.

15:20.880 --> 15:23.320
So we had to go through full code audit.

15:23.360 --> 15:28.400
We wanted to remove, so again, I'm not a developer, so I was only adjacent to the process.

15:28.400 --> 15:32.680
But there was a lot of work that went into it, essentially making the code better, checking

15:32.680 --> 15:35.800
that there weren't secrets within the code, for example, which is one of the problems

15:35.800 --> 15:39.680
which happens when you've been running an internal project for a long time.

15:39.680 --> 15:43.320
And in fact, one of the motivations for keeping it closed source originally was to try and

15:43.320 --> 15:48.440
avoid any, reduce the risk essentially of potentially, if you push a secret to a repository,

15:48.440 --> 15:51.600
it might become exposed.

15:51.600 --> 15:57.080
So there was a lot of work using Gitleaks for checking for these secrets, Grep, also

15:57.080 --> 16:01.360
for the same reason, a lot of grepping to check for the stuff, and Vulture for unused

16:01.360 --> 16:02.360
code.

16:02.360 --> 16:07.040
And ultimately, I think, as it says there, 25% of the code was actually removed, 25% of

16:07.040 --> 16:08.200
it was refactored.

16:08.200 --> 16:10.680
It was quite a lot of work to do that.

16:10.680 --> 16:14.520
And there was a process of moving from one repository to another.

16:14.520 --> 16:20.480
And in fact, that meant running two deployments of RCTAB simultaneously for a period of time.

16:21.400 --> 16:30.640
The choice was used to use Pulumi as infrastructure as a code for deploying RCTAB.

16:30.640 --> 16:33.840
And that was also part of the open sourcing process, because there was a need to make

16:33.840 --> 16:38.000
the deployment a lot easier if other people were going to be able to use it.

16:38.000 --> 16:42.720
And Pulumi was chosen essentially because it's open source, because it's using Python,

16:42.720 --> 16:46.880
in contrast to examples like Terraform, which are closed source and which have their own

16:46.880 --> 16:50.320
declarative language, RCTAB itself is written in Python.

16:51.160 --> 16:53.360
Pulumi seemed like a natural choice.

16:53.360 --> 16:54.520
And it seems to work really well.

16:54.520 --> 17:00.920
So if you want to deploy RCTAB now, you literally just have to run Pulumi up, and it will deploy

17:00.920 --> 17:06.040
all of these things to Azure in a very sleek and streamlined process.

17:06.040 --> 17:13.120
So it actually works really nicely.

17:13.120 --> 17:18.280
So the Alan Turing Institute itself is, in theory, committed to open source code.

17:18.320 --> 17:22.400
One of the things that we champion that we promote is the idea that you should have reproducible

17:22.400 --> 17:27.200
research, and for that you have to have open source code in the main.

17:27.200 --> 17:30.840
So you'd reasonably ask the question, why wasn't it open source to begin with?

17:30.840 --> 17:32.960
Well, I already mentioned one of the reasons.

17:32.960 --> 17:34.480
It was to reduce risks initially.

17:34.480 --> 17:38.360
It was also because it was never really perceived as being something that would be needed by

17:38.360 --> 17:39.920
other organizations.

17:39.920 --> 17:43.440
But over time, it became clear that actually other organizations could also really benefit

17:43.440 --> 17:45.280
from that functionality.

17:45.280 --> 17:49.680
And finally, there was also the fact that this process of refactoring the code was something

17:49.680 --> 17:51.600
that was ongoing anyway.

17:51.600 --> 17:56.120
So actually converting it to open source was both a motivation for cleaning up the code,

17:56.120 --> 18:00.680
but also motivated by the fact that that was happening anyway.

18:00.680 --> 18:05.520
And ultimately, it reached a stage where it was generalizable enough and also potentially

18:05.520 --> 18:09.840
beneficial enough to other organizations that it seemed like the natural thing to do.

18:09.840 --> 18:15.240
But there wasn't really originally any good commercial reason for keeping it closed source.

18:15.240 --> 18:19.440
But in practice, that's probably something that should have been done from the start.

18:19.440 --> 18:21.800
All right.

18:21.800 --> 18:27.800
So in conclusion, well, managing costs on cloud platforms like Azure is difficult for

18:27.800 --> 18:31.360
large organizations that have a lot of projects.

18:31.360 --> 18:35.840
RCTAB provides now a very stable and battle-worn solution.

18:35.840 --> 18:38.560
We've been using it for three years with many different projects.

18:38.560 --> 18:40.960
It seems to work very well, at least for our needs.

18:40.960 --> 18:43.720
And we really expected that there would be something else out there that would do this

18:43.720 --> 18:44.720
job.

18:44.720 --> 18:46.840
It's not really the natural thing for people to want to do.

18:46.840 --> 18:51.240
But in practice, we just didn't find anything that fitted the bill.

18:51.240 --> 18:55.240
And then finally, this process of open sourcing, it was time-consuming, but ultimately, it

18:55.240 --> 18:59.160
felt like it was a very beneficial process to go through and the code has benefited

18:59.160 --> 19:00.320
as part of that.

19:00.320 --> 19:01.440
All right.

19:01.440 --> 19:05.120
Thanks very much for listening.

19:05.120 --> 19:08.240
Thanks, David.

19:08.240 --> 19:13.120
Do we have any questions?

19:13.120 --> 19:16.680
Hi.

19:16.680 --> 19:29.480
So when a project runs over the budget, you shut down the instances to reduce the cost

19:29.480 --> 19:30.680
to zero.

19:30.680 --> 19:36.720
Well, so the subscription is deactivated and the consequence is the same.

19:36.720 --> 19:37.720
Okay.

19:37.720 --> 19:41.680
And what happens with storage, for example, storage accounts like Azure Archive storage

19:42.240 --> 19:43.240
or like Blob storage?

19:43.240 --> 19:44.240
Yeah.

19:44.240 --> 19:50.040
So the storage is retained because that's generally very low cost.

19:50.040 --> 19:51.480
Okay.

19:51.480 --> 19:57.160
But they continue producing costs, right, if the storage is retained?

19:57.160 --> 20:00.920
So there is a small cost to that, yeah, exactly.

20:00.920 --> 20:04.800
Thanks.

20:04.800 --> 20:06.800
Any other questions?

20:06.800 --> 20:11.800
Hi, David.

20:11.800 --> 20:12.800
Hi.

20:12.800 --> 20:22.000
Just a question off the cuff.

20:22.000 --> 20:26.160
How tightly coupled are you to the Azure API?

20:26.160 --> 20:27.160
I'm so sorry.

20:27.160 --> 20:28.160
I couldn't hear properly.

20:28.160 --> 20:30.600
How tightly coupled is this code to the Azure API?

20:30.600 --> 20:33.360
So the question is how tightly coupled is it to the Azure API?

20:33.360 --> 20:34.360
Yeah.

20:34.360 --> 20:37.080
So that's a really good question.

20:37.080 --> 20:38.080
So at the moment...

20:38.080 --> 20:41.880
Can people be a bit quiet, please?

20:41.880 --> 20:49.720
So like I said, I'm not an RCTab developer, so take this with a level of uncertainty.

20:49.720 --> 20:54.160
My understanding is that conceptually, it's not strictly speaking tied, so the concepts

20:54.160 --> 20:59.040
will transfer over, but practically speaking, it makes heavy use of the Azure API.

20:59.040 --> 21:00.040
Yeah.

21:00.040 --> 21:03.720
So at the moment, it would be possible to convert it to something like AWS, say, but practically

21:03.720 --> 21:08.480
speaking, that's as I understand it, quite a lot of work at the present stage.

21:08.480 --> 21:09.480
Yeah.

21:09.480 --> 21:11.600
Are you using something else?

21:11.600 --> 21:19.040
Or do you think there's a practical benefit to that?

21:19.040 --> 21:21.040
Yeah.

21:21.040 --> 21:23.040
Yeah.

21:23.040 --> 21:25.040
Okay.

21:25.040 --> 21:28.040
Thanks.

21:28.040 --> 21:35.040
Thank you.

21:35.040 --> 21:41.160
Hey.

21:41.160 --> 21:44.520
So first I want to say thank you for the talk.

21:44.520 --> 21:49.040
It was kind of a little bit, I don't know, annoying that they were just coming in and

21:49.040 --> 21:50.040
just interrupting your talk.

21:50.040 --> 21:52.600
I find it was rude and I wanted to say that.

21:52.600 --> 21:57.720
And the other thing I want to say or ask is that, so you say it might be not in Microsoft

21:57.720 --> 22:05.080
best interest to have like a so delicate model of managing the cost for these kind of projects.

22:05.080 --> 22:07.560
I think that might be true.

22:07.560 --> 22:13.120
But I was wondering, you have a quite high complicated structure of like managing the

22:13.120 --> 22:14.120
budgets for projects.

22:14.120 --> 22:19.880
I think that's something, yeah, special I guess.

22:19.880 --> 22:20.880
Is it?

22:20.880 --> 22:25.960
So your question is, so you're saying that, yeah, my question is like, that it's an unusual

22:25.960 --> 22:26.960
situation.

22:26.960 --> 22:27.840
Yeah, exactly.

22:27.840 --> 22:32.120
Other universities might have the same thing, but not other places.

22:32.120 --> 22:33.120
Yeah.

22:33.120 --> 22:35.600
I mean, that's a really good, I think that's a good question.

22:35.600 --> 22:41.400
So we do have a lot of subscriptions, but I think we're probably not unique.

22:41.400 --> 22:42.400
So you mentioned universities.

22:42.400 --> 22:45.080
I think other universities will probably be in a similar situation.

22:45.080 --> 22:50.760
I think it's, and I guess it is also true that the nature of the projects we do are

22:50.760 --> 22:53.080
that they come with defined funding.

22:53.080 --> 22:55.320
So they can't, if they go over their budgets, that's a problem.

22:55.320 --> 22:58.440
And that may not be the case in a lot of other organizations.

22:58.440 --> 22:59.440
So you're right.

22:59.440 --> 23:01.840
I think it probably is a special case, but I'm sure there are, I would expect there

23:01.840 --> 23:04.960
to be other organizations that fall into this situation as well.

23:04.960 --> 23:05.960
Yeah.

23:05.960 --> 23:06.960
Okay.

23:06.960 --> 23:07.960
Thank you for answering.

23:07.960 --> 23:08.960
Yeah.

23:08.960 --> 23:21.040
Thanks very much for the question.

23:21.040 --> 23:25.280
Very quickly, the questioner said that it might not be in Microsoft's interest to help

23:25.280 --> 23:26.560
you limit your budget.

23:26.560 --> 23:32.240
That's, if you work for Amazon, you are actively rewarded to save your customers money.

23:32.240 --> 23:34.280
And I'm sure that's the same for Azure.

23:34.280 --> 23:37.640
They like to hang on to the customers and they can help you save your money.

23:37.640 --> 23:40.600
You are rewarded for that company.

23:40.600 --> 23:41.600
Okay.

23:41.600 --> 23:49.800
And I guess I do want to make clear that, yeah, Microsoft provides us a very good service,

23:49.800 --> 23:50.800
I have to say.

23:50.800 --> 23:56.840
I don't want to give the impression that I'm putting down Microsoft by saying that.

23:56.840 --> 24:00.520
I guess that was a mistake to suggest that.

24:00.520 --> 24:02.880
However, it does seem to be the case.

24:02.880 --> 24:06.440
I guess I should put it in a slightly different light.

24:06.440 --> 24:11.360
The nature of cloud is that people want access to the resources when they need them and they

24:11.360 --> 24:12.840
don't expect them to be shut down.

24:12.840 --> 24:15.720
That's not the nature of how people perceive the cloud, I guess.

24:15.720 --> 24:20.600
So in that sense, it's probably not in Microsoft's interests because that in some sense, to

24:20.600 --> 24:23.720
me, that feels like it's not the service that they're providing.

24:23.720 --> 24:27.880
They're providing access to resources and they almost make it feel like it's unlimited

24:27.880 --> 24:31.640
access to resources, even though obviously it's not in reality.

24:31.640 --> 24:37.080
But in practice, that's kind of the service they're offering.

24:37.080 --> 24:39.080
Is that, would you disagree?

24:39.080 --> 24:40.080
Sorry.

24:40.080 --> 24:41.080
Okay.

24:41.080 --> 24:42.080
Clear enough.

24:42.080 --> 24:43.080
Okay.

24:43.080 --> 24:48.120
I think we have to stop now.

24:48.120 --> 24:49.600
So let's thank David again.

