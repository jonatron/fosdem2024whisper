WEBVTT

00:00.000 --> 00:05.000
So let's start.

00:05.000 --> 00:09.000
So thank you for that.

00:09.000 --> 00:14.000
So you already know a bit about the TrendWolf project.

00:14.000 --> 00:21.000
So now we will take a look about another practical application of TrendWolf project as an anti-eveal

00:21.000 --> 00:25.000
solution in QPSOS.

00:25.000 --> 00:27.000
My name is Maciej.

00:27.000 --> 00:34.000
I am currently over seven years in FremDep, currently at the position of engineering manager.

00:34.000 --> 00:43.000
I open source enthusiast interested in bedlet systems contributing to various open source projects.

00:43.000 --> 00:54.000
As FremDep we are involved in various open source communities, mainly Corbuth, Yocto, but also others such as FWPD.

00:54.000 --> 00:59.000
We are also pop-and-power foundation members.

00:59.000 --> 01:09.000
We did some work on Raptor Talos 2 Power 9 platforms.

01:09.000 --> 01:16.000
So what we will talk about today, we had already some introduction about the TrendWolf in general.

01:16.000 --> 01:22.000
Now we will have some introduction about QPSOS anti-eveal made solution based on TrendWolf.

01:22.000 --> 01:26.000
What is its current state and what are the further plans.

01:26.000 --> 01:28.000
So pretty simple.

01:28.000 --> 01:31.000
Let's see.

01:31.000 --> 01:36.000
So we will not cover the whole progress.

01:36.000 --> 01:40.000
We have regularly updated on various conferences.

01:40.000 --> 01:46.000
We've given some status updates on last two QPSOS summits.

01:46.000 --> 01:52.000
So we will cover the progress since the last one, which was October last year.

01:52.000 --> 01:55.000
You have links if you want to watch the previous ones.

01:55.000 --> 01:57.000
Feel free to.

01:57.000 --> 02:06.000
So just a few words about what eveal made attack is and why we want to prevent that with TrendWolf.

02:06.000 --> 02:11.000
So eveal made attack is a one when you leave your device unattended.

02:11.000 --> 02:15.000
Someone has physical access to that and can tamper with that.

02:15.000 --> 02:23.000
And you, for instance, come back to your hotel room and you don't know whether your device was tampered with or not.

02:23.000 --> 02:28.000
Anti-eveal made solution aims to provide you with some tools to maybe not prevent

02:28.000 --> 02:31.000
because that would be quite difficult to prevent such attacks,

02:31.000 --> 02:42.000
but at least give you some information whether your device was tampered with by some external person or not.

02:42.000 --> 02:50.000
In terms of QPSOS, we have QPSOS anti-eveal made solution which was already there.

02:50.000 --> 02:54.000
It's a set of scripts.

02:54.000 --> 03:02.000
Right now we are improving extending attack based on TrendWolf to support

03:02.000 --> 03:07.000
broader variety of hardware, for instance, TPM 2.0.

03:07.000 --> 03:14.000
And it requires TPM, so it requires some piece of hardware and also it requires DRTM,

03:14.000 --> 03:20.000
which was mentioned before, so some silicon vendor feature

03:20.000 --> 03:26.000
either from Intel by AMD currently.

03:26.000 --> 03:28.000
So what's the current state?

03:28.000 --> 03:34.000
In short, we have released two milestones in the last month

03:34.000 --> 03:37.000
and we are just starting another one.

03:37.000 --> 03:42.000
If you want more details, there are links to GitHub milestones.

03:43.000 --> 03:47.000
These three were funded by the NLNet Foundation.

03:47.000 --> 03:53.000
So links are there and we will now briefly cover each of them.

03:53.000 --> 04:04.000
So the MySum number two, it was about QPSOS anti-eveal made solution on Intel boards with TPM 2.0

04:04.000 --> 04:09.000
because previously we had only some support for 1.2.

04:10.000 --> 04:17.000
As you saw before, there are many parts in TrendWolf project.

04:17.000 --> 04:21.000
In the previous presentation we saw a bit maybe different use case

04:21.000 --> 04:29.000
because we saw the one with Linux kernel, with QPSOS, we used Grub and then Zen hypervisor,

04:29.000 --> 04:33.000
and not Linux directly.

04:34.000 --> 04:42.000
So for each MySum, for each phase we have a set of GitHub actions

04:42.000 --> 04:48.000
releasing the packages so we can download them and install in the QPSOS installation.

04:48.000 --> 04:54.000
We also have blog post which describes how given MySum was verified

04:54.000 --> 04:57.000
so we can also reproduce that if you are brave enough.

04:58.000 --> 05:10.000
So as the project is ongoing progress, it takes already a few years in total, we can say.

05:10.000 --> 05:16.000
There are some changes in the upstream trend boot protocol,

05:16.000 --> 05:23.000
so the phase three was aiming to align with that with the TrendWolf anti-eveal made solution.

05:24.000 --> 05:29.000
So again we have a set of packages you may use and install,

05:29.000 --> 05:38.000
and we also have a nice blog post you can read to have some more insights on that one.

05:41.000 --> 05:45.000
So we are just starting phase four as said before.

05:45.000 --> 05:49.000
That one is about AMD platforms.

05:50.000 --> 05:55.000
We want to cover both TPM 1.2 and 2.0 solutions.

05:56.000 --> 05:59.000
We are still selecting hardware.

05:59.000 --> 06:05.000
Right now we think about ASUS KGP-D16, it's quite old already,

06:05.000 --> 06:09.000
but it allows us to verify both TPMs.

06:09.000 --> 06:15.000
It can also have open source firmware based on core boot.

06:16.000 --> 06:19.000
So that is one we might use here.

06:19.000 --> 06:22.000
Another one is some super micro board.

06:23.000 --> 06:29.000
There are some cubes for point two installation issues, we have some discussions open,

06:29.000 --> 06:33.000
so we are still considering that one.

06:33.000 --> 06:37.000
At least with the latest version there were some problems.

06:37.000 --> 06:40.000
What are the further plans?

06:41.000 --> 06:51.000
So after we finalized, or maybe not after, we are already scoping the phase five.

06:51.000 --> 06:55.000
Its goal is to bring UFI support as well,

06:55.000 --> 07:00.000
because so far all of the previous one were focused on the legacy boot only.

07:01.000 --> 07:09.000
For the phase five we want to support both Intel and AMD platforms with both TPM 1.2 and 2.0.

07:11.000 --> 07:20.000
So we are finalizing the scope to gather what needs to be done basically.

07:20.000 --> 07:24.000
We plan to publish that as another Github milestone,

07:24.000 --> 07:29.000
so if you are interested you can also follow that topic.

07:30.000 --> 07:39.000
Definitely the UFI one is interesting, because nowadays it's the most common one for many boards.

07:39.000 --> 07:47.000
So it opens up a wider, higher variety in terms of what we can actually test,

07:47.000 --> 07:50.000
on which boards we can use that solution.

07:54.000 --> 07:59.000
Another thing about our roadmap is further improvements of testing and documentation.

07:59.000 --> 08:04.000
As you saw the project consists of multiple moving parts.

08:04.000 --> 08:11.000
We have Zen, we have Grab, we have anti-vmage scripts.

08:13.000 --> 08:19.000
Installation, even though we have some CI, we have some packages, CubeStyle packages being built,

08:19.000 --> 08:25.000
it's still a tedious task to do it manually to test recent changes.

08:25.000 --> 08:30.000
So we are aiming to automate that as much as possible.

08:31.000 --> 08:40.000
In the last status we shown some progress in that area, but it was only on QMU to have some automated installation

08:40.000 --> 08:49.000
of the anti-vmage solution. Right now we are pursuing to move that forward,

08:49.000 --> 08:57.000
so we can also use that on real hardware units, not only on emulation targets.

09:00.000 --> 09:09.000
And also it would be nice to automatically pick up packages from GitHub actions with rightest changes

09:09.000 --> 09:12.000
to see what's the result is.

09:16.000 --> 09:24.000
Another one we are interested in is upstreaming AMD Linux patches.

09:24.000 --> 09:33.000
Maybe it's not directly related to the CubeStyle's anti-vmage solution, but to trend-root it is.

09:33.000 --> 09:41.000
So Jack said about the Intel upstreaming effort, which is a very demanding task.

09:41.000 --> 09:45.000
As we see it's version number 7 and counting.

09:45.000 --> 09:53.000
We've secured an internet grant for AMD equivalent of that port, so we could be able to help here.

09:53.000 --> 09:58.000
So we need to sync up on the latest changes with Oracle.

09:58.000 --> 10:11.000
Ideally the Intel patches are merged so we can have easier time posting another set of patches for trend-root to the Linux kernel mailing list.

10:12.000 --> 10:27.000
Another area we are interested in is as we are developing the Shara open source firmware for some of the platforms.

10:27.000 --> 10:40.000
So we have control over the firmware part and we can make sure that all of the properties required to actually use the trend-root

10:40.000 --> 10:43.000
can be properly configured.

10:43.000 --> 10:49.000
And if there are bugs we can at least try to fix them.

10:49.000 --> 10:58.000
So that would be very nice to have trend-root running with Cubes and perhaps also without Cubes

10:58.000 --> 11:02.000
on different hardware targets supported by the Shara.

11:02.000 --> 11:06.000
We already do use some of that.

11:06.000 --> 11:14.000
For instance on the Dell OptiPlex one of the other series we use that's one for testing for the current phases.

11:14.000 --> 11:25.000
So we use Corbett firmware with CBIOS as a reg AC solution to test what we currently have.

11:25.000 --> 11:34.000
But we aim to also once the Phase 5 is completed with the UFI support,

11:34.000 --> 11:41.000
support perhaps the Navacast and Laptos which are already certified in Cubes OS as well.

11:42.000 --> 11:52.000
Another idea since that the testing is mostly done by us at that point.

11:52.000 --> 11:59.000
We could use maybe some help if there are some folks interested in that.

11:59.000 --> 12:09.000
We know actually we know there are because we have already some reports but it's not that easy to jump into that.

12:10.000 --> 12:16.000
So we're considering also to make it a bit simpler.

12:16.000 --> 12:24.000
Maybe set up currently you can already download packages from GitHub Actions from GitHub releases

12:24.000 --> 12:35.000
but maybe we can set up a package repository with trend-root packages with trend-root patches.

12:35.000 --> 12:41.000
So you can more easily install them and try them out if you are interested.

12:41.000 --> 12:48.000
If that sounds interesting you can feel free to join Matrix Channel let us know so we can try.

12:48.000 --> 12:55.000
We can gather some attention and see what can be done here.

12:55.000 --> 13:00.000
So that was it. Any questions?

13:06.000 --> 13:08.000
Sure.

13:08.000 --> 13:10.000
I have a question.

13:10.000 --> 13:17.000
As I saw you are strongly insisting on still implementing support for TPM 1.2.

13:17.000 --> 13:22.000
I wanted to understand why do you want to support such hardware

13:22.000 --> 13:28.000
and do you have any hardware which supports DRTM and TPM 1.2?

13:28.000 --> 13:30.000
Very insisting.

13:30.000 --> 13:38.000
So the question is why do we still support TPM 1.2 and do we have hardware supporting that?

13:38.000 --> 13:42.000
Yes, we started with TPM 1.2.

13:42.000 --> 13:51.000
So for instance the stations showed here they have TPM 1.2.

13:51.000 --> 13:54.000
TPM 1.2 these are like...

13:54.000 --> 13:56.000
Yes.

13:56.000 --> 14:05.000
But they can run coreboot, they are really open source because they can have even more initialization

14:05.000 --> 14:09.000
natively in coreboot without FSB, correct?

14:09.000 --> 14:16.000
So they are quite similar for TPM PADS EX230.

14:16.000 --> 14:19.000
So TPM 1.2.

14:19.000 --> 14:22.000
When they were produced?

14:22.000 --> 14:29.000
Quite a while ago but this is the last one that you can have fully open.

14:29.000 --> 14:32.000
Ah, okay, right coreboot and FSB.

14:32.000 --> 14:39.000
Yes, you can have a mini open source and ME discarded as much as possible.

14:39.000 --> 14:45.000
So they are popular among those people which are here on the first day.

14:45.000 --> 14:53.000
So some old plant-based signal support, they fire some of the back-up to the mic.

14:53.000 --> 14:55.000
Of course.

14:55.000 --> 14:58.000
I understand.

14:58.000 --> 15:00.000
Yes, okay.

15:00.000 --> 15:02.000
How's the U?

15:02.000 --> 15:04.000
We were anyway.

15:04.000 --> 15:06.000
I have to test the U5 1.4 TPM 1.2.

15:06.000 --> 15:08.000
Yeah, I know.

15:09.000 --> 15:11.000
And...

15:17.000 --> 15:19.000
Two questions.

15:19.000 --> 15:26.000
One, you mentioned you fetch in your CI packages from GitHub actions.

15:26.000 --> 15:28.000
How you do that?

15:28.000 --> 15:34.000
Because GitHub does a lot of fetching artifacts with authentication.

15:34.000 --> 15:38.000
Yes, not... I mean we don't use that currently.

15:38.000 --> 15:44.000
Oh sorry, the question was how do we fetch packages from GitHub actions?

15:44.000 --> 15:47.000
We do not yet, so...

15:47.000 --> 15:49.000
Yeah, I'm aware of that problem.

15:49.000 --> 15:54.000
You can fetch from releases but not from the jobs directly.

15:54.000 --> 15:57.000
Yes, that's a problem with GitHub actions.

15:57.000 --> 16:01.000
We like GitHub CI for this reason also.

16:01.000 --> 16:08.000
And the other question for UFI support, what to do about runtime services?

16:08.000 --> 16:11.000
Oh, sorry.

16:11.000 --> 16:13.000
Sorry.

16:13.000 --> 16:21.000
I guess the question was about what to do about runtime services and I guess it's still a little bit discussed.

16:21.000 --> 16:23.000
Or is that?

16:23.000 --> 16:26.000
Yeah, there are some ideas to virtualize that.

16:26.000 --> 16:28.000
Can you do that?

16:28.000 --> 16:31.000
Yeah, is there a proof of concept from non-enables?

16:31.000 --> 16:37.000
Yeah, another hypervisor do the same thing actually where they do runtime services in virtual environments.

16:37.000 --> 16:39.000
So it's a common concept.

16:39.000 --> 16:41.000
Yeah, yeah.

16:41.000 --> 16:43.000
So you essentially isolate that through...

16:43.000 --> 16:46.000
Yeah, that would be nice.

16:46.000 --> 16:48.000
If that works?

16:48.000 --> 16:51.000
As far as all is started, when the fumes start and then the hypervisor...

16:51.000 --> 16:53.000
Something like that.

16:53.000 --> 16:55.000
There is write up.

16:55.000 --> 16:57.000
Okay.

16:57.000 --> 16:59.000
Can you show me?

16:59.000 --> 17:01.000
Sure.

17:01.000 --> 17:03.000
Anything else?

17:03.000 --> 17:06.000
This is the most recent publication on a non-enable blog.

17:06.000 --> 17:13.000
Oh, so a colleague wrote a KVM hypervisor where he puts like EDK2 in that environment.

17:13.000 --> 17:15.000
Yes, yes, yes.

17:15.000 --> 17:17.000
What was that?

17:17.000 --> 17:24.000
So he puts in the go KVM runs the EDK2 UFI in this environment.

17:24.000 --> 17:26.000
What was the blog?

17:26.000 --> 17:28.000
But this is about...

17:28.000 --> 17:33.000
9 elements, 9 ESAC blog and the last post I guess is about that.

17:33.000 --> 17:38.000
This sounds like running virtual firmware and not calling...

17:38.000 --> 17:46.000
But that's part of this concept because this concept is like very long time, I guess like this, like we're going in that direction.

17:46.000 --> 17:48.000
I mean, just the single things.

17:48.000 --> 17:50.000
Yeah, I know.

17:50.000 --> 17:52.000
Setting UFI variables.

17:52.000 --> 17:54.000
You have to convince someone to contribute that.

17:54.000 --> 17:56.000
There is another thing, capsules.

18:00.000 --> 18:02.000
Thank you.

18:02.000 --> 18:04.000
And you mentioned capsules.

18:04.000 --> 18:06.000
Yes, capsules.

18:06.000 --> 18:08.000
What are your calorie goals for that?

18:08.000 --> 18:10.000
That's okay.

18:10.000 --> 18:12.000
Always use some vulnerable pieces.

18:12.000 --> 18:14.000
Yeah, for the better ways.

18:14.000 --> 18:18.000
You know, I can set boot next to something and then reboot to capsule.

18:18.000 --> 18:20.000
That's okay.

18:20.000 --> 18:22.000
You still need to reboot to...

18:22.000 --> 18:24.000
Yeah, like you may have it.

18:24.000 --> 18:26.000
So one reboot more.

18:26.000 --> 18:32.000
So you have at least two because if you want to reboot to the UFI, this is...

18:32.000 --> 18:34.000
No, that's broken.

18:34.000 --> 18:36.000
On most implementations.

18:36.000 --> 18:38.000
Yeah, yeah.

18:38.000 --> 18:40.000
Did you try it on the shadow?

18:42.000 --> 18:44.000
I think yes.

18:44.000 --> 18:46.000
And there is no bug about that.

18:46.000 --> 18:48.000
I don't know.

18:48.000 --> 18:50.000
Are you sure?

18:50.000 --> 18:52.000
It's a bug about that.

18:52.000 --> 18:54.000
Two minutes.

18:54.000 --> 18:56.000
If this is so new that I don't know, I can...

18:56.000 --> 18:58.000
I have last status...

18:58.000 --> 19:00.000
Last status was Friday.

19:00.000 --> 19:02.000
So you have access to the variables.

19:04.000 --> 19:06.000
I need to start, I think.

19:06.000 --> 19:12.000
It is not because you have to set variables to boot next to something.

19:12.000 --> 19:14.000
Yeah, that's okay.

19:14.000 --> 19:16.000
Potentially you can do a capsule.

19:18.000 --> 19:20.000
And you can reboot via ACPI or something.

19:20.000 --> 19:22.000
Yeah, exactly.

19:22.000 --> 19:24.000
That works.

19:24.000 --> 19:26.000
I think Windows do reboot via...

19:26.000 --> 19:28.000
You have Wi-Fi?

19:28.000 --> 19:30.000
Exactly.

19:30.000 --> 19:32.000
ACPI.

19:32.000 --> 19:34.000
I'm not sure.

19:34.000 --> 19:36.000
It's a sort of graphic level bug.

19:36.000 --> 19:38.000
It's my sort of...

19:38.000 --> 19:44.000
My experience is that there are several firmwares that have broken the UFI reboot.

19:44.000 --> 19:46.000
So we default to ACPI.

19:46.000 --> 19:48.000
Yeah, okay.

19:48.000 --> 19:50.000
Another question?

19:50.000 --> 19:52.000
We have time for one more.

19:56.000 --> 19:58.000
Okay, thank you.

19:58.000 --> 20:00.000
APPLAUSE

20:00.000 --> 20:02.000
Oh, yeah.

