WEBVTT

00:00.000 --> 00:05.000
So guys, I will start now the presentation.

00:08.760 --> 00:10.120
My name is Sikert Pedrosa,

00:10.120 --> 00:13.020
and I'm a senior software engineer at Red Hat.

00:13.020 --> 00:16.920
Well, today Erwin was supposed to come here

00:16.920 --> 00:20.560
and present something about garage door opening

00:20.560 --> 00:24.200
with pass keys, but apparently there's some time of curse

00:24.200 --> 00:27.100
because, well, he couldn't come.

00:27.100 --> 00:29.560
And I will present a topic that I was supposed

00:29.560 --> 00:32.600
to be presenting last year about pass keys also.

00:32.600 --> 00:35.260
So I will show you today the final results

00:35.260 --> 00:38.220
because last year, Alexander, who is there,

00:38.220 --> 00:41.220
kindly volunteered to present my talk,

00:41.220 --> 00:46.220
and now I will do a kind of learning talk very fast

00:46.540 --> 00:49.640
about the problem and the solution that we gave.

00:50.920 --> 00:52.840
So introduction.

00:52.840 --> 00:56.300
As you may be all aware, in January 2022,

00:56.300 --> 00:58.960
the US government released a memorandum

00:58.960 --> 01:03.960
where they constrained their agencies

01:05.920 --> 01:09.320
and their, the companies working from them

01:09.320 --> 01:10.920
to use telotrast architecture.

01:11.840 --> 01:15.720
So if we focus just on the topics about user authentication

01:15.720 --> 01:20.120
and authorization, we'll see that the memorandum

01:20.120 --> 01:22.840
speaks about centrally managed users,

01:22.840 --> 01:25.320
and more specifically about using

01:25.320 --> 01:27.880
multifactor authentication and passwords.

01:27.880 --> 01:30.560
On top of that, it explains that they should use

01:30.560 --> 01:33.640
single sign-on as much as possible,

01:33.640 --> 01:38.640
and they mentioned two specific protocols to achieve this.

01:38.760 --> 01:41.680
One of them is PIF, or smart cards,

01:41.680 --> 01:43.160
and the other one is Fido2.

01:44.600 --> 01:47.560
So let's speak about Fido2 a little bit,

01:47.560 --> 01:52.360
why users should be aware of this authentication method

01:52.360 --> 01:54.080
and why it's important for them.

01:54.080 --> 01:55.800
First of all, because it's passwordless,

01:55.800 --> 01:58.560
so you don't need to remember lots of passwords.

01:59.600 --> 02:04.600
You also don't need to, sorry.

02:06.160 --> 02:09.700
So you don't need to be aware when there's some type of leak

02:09.700 --> 02:13.360
in one webpage or some service that you are using,

02:13.360 --> 02:18.360
because the private key resides in this token that is here,

02:19.440 --> 02:20.640
and it never leaves it.

02:20.640 --> 02:24.400
So you will not have any problem with data reaches

02:24.400 --> 02:26.560
or any other kind of problem.

02:26.560 --> 02:29.080
On top of that, it enables a strong authentication

02:29.080 --> 02:31.480
by providing multifactor authentication.

02:31.480 --> 02:34.600
So the keys that I'm using, they usually ask for the pin,

02:34.600 --> 02:38.480
but you also have some others that ask for some fingerprint

02:38.480 --> 02:41.160
or some other kind of biometric reading.

02:42.880 --> 02:45.280
So the design is quite simple.

02:45.280 --> 02:48.280
So we have a user with Fido2 key,

02:48.280 --> 02:50.860
it goes to some computer, connects is there,

02:50.860 --> 02:55.100
and using SSSD, they will contact the ADM server

02:55.100 --> 02:57.700
and authenticate there and get a Kerberos ticket

02:57.700 --> 02:59.140
to do the single sign-on.

03:00.660 --> 03:03.260
So in this case, we are speaking out IDM server

03:03.260 --> 03:05.980
because the best integration is achieved with it

03:05.980 --> 03:07.600
because we will get the Kerberos ticket.

03:07.600 --> 03:10.020
If you are using some other type of a lab server,

03:10.020 --> 03:11.700
you will be able to authenticate,

03:11.700 --> 03:13.820
but you won't get the Kerberos ticket.

03:16.060 --> 03:18.820
So if you want to know more details,

03:18.860 --> 03:21.780
the first link is the talk that I was speaking about before

03:21.780 --> 03:25.500
that was given by Alexander here at Fosben last year.

03:25.500 --> 03:30.300
Second one happened last year also at Defcon in June,

03:30.300 --> 03:33.860
I think, if I remember correctly, it was me giving it

03:33.860 --> 03:37.260
and you will have some progress in that area.

03:39.380 --> 03:42.980
So now it's time for the demo or the demo Gorgon, who knows,

03:42.980 --> 03:47.260
because I never was able to do this demo lively.

03:49.380 --> 03:51.300
Yeah, you know, it's like that.

03:51.300 --> 03:56.300
So first of all, I'm authenticated in a SSSD client

03:58.780 --> 04:00.820
and we also have an APA server.

04:00.820 --> 04:02.800
So I will add a new user,

04:04.700 --> 04:06.020
which will be called Icar.

04:10.380 --> 04:14.300
And here, the important point is that you need to set

04:14.300 --> 04:16.780
the authentication type to Paskey.

04:16.780 --> 04:17.620
Sorry.

04:19.420 --> 04:23.020
So the first part, I guess you are aware of it,

04:23.020 --> 04:25.860
if you are IPA users, but the second one is kind of

04:25.860 --> 04:27.000
the new thing.

04:28.380 --> 04:30.260
So I will create a user like that.

04:30.260 --> 04:31.860
Okay, it already exists.

04:31.860 --> 04:33.180
So let's try another one.

04:40.300 --> 04:41.540
So that's my sister.

04:44.020 --> 04:45.460
So this is your trust.

04:46.420 --> 04:50.660
So we have created the user and now we need to register

04:50.660 --> 04:51.940
the Paskey for this user.

05:00.180 --> 05:02.580
Okay, yes, with that, I will present there.

05:04.620 --> 05:05.460
Just again.

05:07.780 --> 05:12.220
I guess I don't, oh yeah, I forgot the name.

05:13.220 --> 05:15.340
Now I need to enter the pin.

05:17.740 --> 05:21.100
And now, well, I need to touch the device.

05:21.100 --> 05:25.140
The device is already blinking, so it's kind of obvious.

05:25.140 --> 05:29.220
And you see there down below the Paskey mapping data.

05:29.220 --> 05:30.420
I will show it to you.

05:30.420 --> 05:35.420
Well, I will clear the screen and show this user.

05:37.660 --> 05:40.220
So we have user I know.

05:40.220 --> 05:42.300
And here we have the Paskey mapping data.

05:44.420 --> 05:46.180
So now I will change users because you know,

05:46.180 --> 05:48.860
if you are root, you can authenticate as any user.

05:51.580 --> 05:55.180
And I will try to authenticate as user I know.

05:58.340 --> 05:59.780
Okay, I need to set.

06:02.420 --> 06:04.540
Okay, first of all, you need to insert the Paskey

06:04.540 --> 06:06.460
and this presenter.

06:06.460 --> 06:10.460
You are prompted for the pin that you need to input.

06:11.340 --> 06:13.740
And finally, you don't see it on the screen,

06:13.740 --> 06:17.060
but the LED is blinking here on the Fido 2 device

06:17.060 --> 06:18.700
and I need to touch it.

06:18.700 --> 06:19.820
Okay, perfect.

06:19.820 --> 06:20.660
So we are here.

06:22.220 --> 06:26.180
We are using I know and as we are using a free IP server,

06:26.180 --> 06:27.780
if I saw it, okay.

06:28.940 --> 06:30.660
We have here a server ticket.

06:30.660 --> 06:33.660
So that at this point, we would be able to authenticate

06:33.660 --> 06:36.180
to any other service or application

06:36.180 --> 06:38.540
that is enrolled to this server.

06:39.420 --> 06:43.860
One thing to notice here is that,

06:43.860 --> 06:47.860
well, the key needs to be physically connected

06:47.860 --> 06:51.180
to the device where you are trying to authenticate.

06:51.180 --> 06:53.740
Okay, you cannot do it remotely with SSH

06:53.740 --> 06:54.980
or something like that.

06:54.980 --> 06:56.340
This is important because, well,

06:56.340 --> 06:58.620
I heard some people asking me this question

06:58.620 --> 07:01.100
and well, currently it's not possible at least

07:01.100 --> 07:03.420
to do the remote authentication.

07:04.660 --> 07:09.660
Okay, so some conclusions.

07:10.180 --> 07:13.500
Availability of this feature.

07:14.420 --> 07:17.380
First one is SSSD 2.9.4.

07:17.380 --> 07:21.940
You can try with the 9.2.9.0, but it has some bugs,

07:21.940 --> 07:24.460
so I would recommend you to go to this one.

07:24.460 --> 07:28.100
We also have free IPA for .11.0.

07:28.100 --> 07:31.260
And if we are speaking about specific distributions

07:31.260 --> 07:35.180
that have this software, you can use Fedora 39

07:35.180 --> 07:36.580
or CentOS Stream9.

07:40.420 --> 07:42.260
Some reference links.

07:42.260 --> 07:46.420
So we brought three design pages, two for SSSD

07:46.420 --> 07:47.580
and one for free IPA.

07:47.580 --> 07:51.860
The first one for SSSD is about doing the local authentication

07:51.860 --> 07:54.660
and the second one is about doing the Kerbalos integration.

07:55.860 --> 07:58.420
And if you would like to test this feature on your own,

07:58.420 --> 08:00.260
I brought a Fedora Magazine article

08:00.300 --> 08:03.700
that was kindly translated by a Chinese reader.

08:03.700 --> 08:08.700
So you have there the demo and how to work with it.

08:08.900 --> 08:11.660
If you don't want to mess up with your production environment

08:11.660 --> 08:15.460
for some reason, you can use SSSD CI containers.

08:15.460 --> 08:19.260
This project is, well, it provides a set of containers

08:19.260 --> 08:24.260
that you can use to test SSSD IPA lab and things like that.

08:25.060 --> 08:26.940
The only, you will find these instructions

08:26.940 --> 08:28.580
in the GitHub page.

08:28.580 --> 08:31.100
The only thing that changes is that you need to run,

08:31.100 --> 08:34.180
well, you need to connect the Fido2 key first

08:34.180 --> 08:37.780
and then you need to run MakeupPasky instead of Makeup

08:37.780 --> 08:40.900
so that you can redirect the Fido2 device to the containers.

08:42.580 --> 08:44.220
Okay, so that was all.

08:44.220 --> 08:47.060
I think we have some time for questions, right, Tvenho?

08:47.060 --> 08:48.660
Yes, we have four minutes.

08:49.660 --> 08:50.800
Thank you.

08:50.800 --> 08:51.660
Thank you.

08:51.660 --> 08:52.500
Thank you.

08:59.080 --> 09:02.300
So the system didn't ask you to touch your device,

09:02.300 --> 09:05.780
is that some limits or was that just an implement?

09:05.780 --> 09:08.500
No, it's a feature in reality

09:08.500 --> 09:11.620
because you can have the Fido2 device connected

09:11.620 --> 09:12.500
and some applications

09:12.500 --> 09:16.020
or some malicious actor could try to sneak in

09:16.020 --> 09:17.900
your device is already connected,

09:17.900 --> 09:21.900
they could use it to perform the authentication.

09:21.900 --> 09:23.700
So if you press it,

09:23.700 --> 09:25.980
you demonstrate that it's actually you who is

09:25.980 --> 09:29.100
trying to authenticate in this device.

09:29.100 --> 09:31.100
Thank you.

09:31.100 --> 09:37.420
Can you speak louder?

09:37.420 --> 09:42.020
You indicated it will not work remote at the moment.

09:42.020 --> 09:44.900
However, would this possibly work

09:44.900 --> 09:48.620
with USB redirection, for instance, it's a fix.

09:48.620 --> 09:51.060
Yeah. So the question is,

09:51.060 --> 09:54.540
would this work with USB redirection?

09:54.540 --> 09:55.620
The answer is yes.

09:55.620 --> 09:58.220
Yeah, we would be able to do that.

09:58.740 --> 10:00.740
Question here?

10:00.740 --> 10:06.580
If we lose this key, what happens?

10:06.580 --> 10:09.940
Okay. So somebody asked a good question here,

10:09.940 --> 10:12.380
ask what happens if you lose your key?

10:12.380 --> 10:13.460
You are doomed.

10:13.460 --> 10:16.700
So my recommendation is to have at least

10:16.700 --> 10:18.460
another authentication method,

10:18.460 --> 10:21.300
or you could have two keys.

10:21.300 --> 10:22.460
That's what I have.

10:22.460 --> 10:24.820
So I have one here and I have another one at home.

10:24.820 --> 10:26.220
If I lose one, okay,

10:26.220 --> 10:28.100
I won't be able to do this demonstration here

10:28.100 --> 10:29.340
or to authenticate somewhere,

10:29.340 --> 10:30.540
but when I arrive home,

10:30.540 --> 10:32.580
I have it there and I can use it to authenticate.

10:32.580 --> 10:35.140
We cannot store somewhere the algorithms.

10:35.140 --> 10:37.620
No. No, the private key.

10:37.620 --> 10:40.700
So this uses public key algorithms,

10:40.700 --> 10:42.300
and the private key resides in the key,

10:42.300 --> 10:43.780
and as long as I know,

10:43.780 --> 10:48.340
you cannot keep it out.

10:48.340 --> 10:51.340
Yeah. So.

10:51.340 --> 10:54.300
Do you have any plans to support

10:54.300 --> 10:58.260
built-in platform authenticators like Windows Hello?

10:59.660 --> 11:03.180
So yeah. So the question is,

11:03.180 --> 11:06.500
if we have any plans to

11:06.500 --> 11:09.780
integrate Windows Solo, you said, right?

11:09.780 --> 11:13.380
No. The hardware now has the FIDO key in it.

11:13.380 --> 11:16.380
Yes. You don't need a USB to extend the hardware.

11:16.380 --> 11:19.180
Every piece of hardware now has FIDO built in.

11:19.180 --> 11:21.940
Can we just use the platform authenticator?

11:21.940 --> 11:24.700
Not yet. I will answer you.

11:24.700 --> 11:25.580
Okay. Yeah.

11:25.580 --> 11:26.700
Yeah.

11:26.700 --> 11:31.420
Not yet. What this project supports is big FIDO 2.

11:31.420 --> 11:37.020
So any effort to extend it to support a platform authenticator

11:37.020 --> 11:40.220
should be against big FIDO 2 project.

11:40.220 --> 11:42.300
And then we will inherit that one.

11:42.300 --> 11:46.180
So the question was whether we

11:46.180 --> 11:48.100
are supporting platform authentications,

11:48.100 --> 11:49.220
and the answer is no.

11:49.220 --> 11:51.340
We don't have those plans yet.

11:51.340 --> 11:54.540
So Tveniu, how much time do you have?

11:54.540 --> 11:57.700
I think yes. We have room for one more person.

11:57.700 --> 11:59.100
Okay. Yeah.

11:59.100 --> 12:01.260
So.

12:01.260 --> 12:04.100
How do you solve the pin code?

12:04.260 --> 12:10.260
Like, which action do you use to install the pin code?

12:10.260 --> 12:14.900
And do you have any pin code policy?

12:14.900 --> 12:21.140
Okay. So the question is which is the cryptographic algorithm

12:21.140 --> 12:22.700
that we use to store the pin.

12:22.700 --> 12:24.140
And the answer is I don't know.

12:24.140 --> 12:26.500
This is embedded in the FIDO 2 key.

12:26.500 --> 12:29.500
So in reality, we ask for the pin,

12:29.500 --> 12:32.380
and we realize this information to the FIDO 2 key.

12:32.500 --> 12:37.260
And it's them, the FIDO 2 key, who does all the decryption,

12:37.260 --> 12:41.220
and who, well, it signs an attestation that it's you

12:41.220 --> 12:44.420
who are doing the request and send this to the server.

12:44.420 --> 12:47.540
It's PQCSD2.

12:47.540 --> 12:48.420
Sorry, can you repeat?

12:48.420 --> 12:56.220
It's PQCSD2 normally like a key derivative algorithm

12:56.220 --> 12:58.860
which you use for the project.

12:58.860 --> 12:59.740
Thank you.

12:59.780 --> 13:00.220
All right, all right.

13:00.220 --> 13:00.980
Okay.

