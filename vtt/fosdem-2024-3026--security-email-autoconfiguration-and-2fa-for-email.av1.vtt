WEBVTT

00:00.000 --> 00:08.200
So, hi. I'm Ben Bocz.

00:08.200 --> 00:11.480
I've been working for 25 years on the Thunderbird project,

00:11.480 --> 00:13.760
pretty exactly by now.

00:13.760 --> 00:18.060
I was a member of the Thunderbird Council,

00:18.060 --> 00:19.640
the Leadership Committee,

00:19.640 --> 00:21.360
but I'm speaking here for

00:21.360 --> 00:24.040
myself and not for the Thunderbird project.

00:24.040 --> 00:27.000
I've been for a long time consultant

00:27.400 --> 00:32.960
and helping many companies use Mozilla products in code and their products.

00:32.960 --> 00:35.320
And most of the point of this talk,

00:35.320 --> 00:38.360
I've been involved in four different OAuth implementations,

00:38.360 --> 00:40.640
specifically for mail clients.

00:40.640 --> 00:44.520
One was for the largest German Internet provider,

00:44.520 --> 00:47.840
two of products of my own company,

00:47.840 --> 00:52.400
and I was a reviewer of the OAuth 2 implementation in Thunderbird.

00:52.680 --> 00:54.960
I've been implementing the IMAP,

00:54.960 --> 00:59.120
POP3 and SMTP authentication logic in Thunderbird,

00:59.120 --> 01:01.320
meaning server capabilities,

01:01.320 --> 01:07.040
authentication methods, password prompt, and so on.

01:07.040 --> 01:10.480
And the account creation dialog,

01:10.480 --> 01:16.040
including the auto-configuration and the protocol on that.

01:16.040 --> 01:18.080
So, about auto-configuration.

01:18.080 --> 01:19.960
So, this talk has two parts.

01:19.960 --> 01:22.040
First, I'm talking about auto-configuration,

01:22.040 --> 01:24.640
and then multi-factor authentication and email.

01:24.640 --> 01:28.640
Auto-configuration. Auto-config is a protocol

01:28.640 --> 01:31.480
which allows the user,

01:31.480 --> 01:33.400
if he sets up an email client,

01:33.400 --> 01:37.400
to only enter the email address and the password,

01:37.400 --> 01:40.840
and completely automatically set up the email account.

01:40.840 --> 01:42.880
He doesn't have to enter anything else,

01:42.880 --> 01:44.560
just email address and password.

01:44.560 --> 01:48.320
And we find out the configuration completely automatically from that.

01:48.720 --> 01:51.040
The user doesn't have to enter any host name,

01:51.040 --> 01:54.160
authentication method, cram five, whatever.

01:56.960 --> 01:58.480
How do we do that?

01:58.480 --> 02:01.240
The email address is ben at example.com.

02:01.240 --> 02:04.080
So, example.com is the email provider.

02:04.080 --> 02:08.000
So, we just take example.com and get the contact from that.

02:08.000 --> 02:09.840
Email is supposed to be federated,

02:09.840 --> 02:12.720
so we ask directly the email provider,

02:12.720 --> 02:14.600
do you have a configuration for us?

02:14.600 --> 02:16.200
So, that's a well-known URL,

02:16.280 --> 02:21.080
auto-config.domain.well-known.something.

02:21.080 --> 02:23.400
And we ask, is there a config there?

02:23.400 --> 02:25.360
And it's simply a static file.

02:25.360 --> 02:29.240
So, you can just create the static file once manually.

02:29.240 --> 02:32.680
You put it on your web server at the specific location,

02:32.680 --> 02:35.520
and all you need is a web server.

02:35.520 --> 02:38.680
You don't need any other server-side software for this.

02:39.840 --> 02:42.320
But of course, not all ISPs in the world

02:42.320 --> 02:43.640
are going to support that.

02:43.640 --> 02:45.680
Google, Microsoft, Yahoo, et cetera,

02:45.680 --> 02:47.440
they don't have this config.

02:47.440 --> 02:50.640
So, as a fallback, we have a database.

02:50.640 --> 02:54.560
This database contains pretty much all ISPs in the world.

02:55.800 --> 02:58.640
I had to go and search the configuration

02:58.640 --> 03:02.600
for every ISP manually in the support documents,

03:02.600 --> 03:04.440
put it in machine readable format,

03:04.440 --> 03:07.920
when possible, test it, and put it in a database.

03:07.920 --> 03:10.920
Other people helped, of course, with that.

03:10.920 --> 03:13.640
So, the result is, in this database,

03:13.640 --> 03:17.760
you find the configuration for almost all ISPs in the world.

03:17.760 --> 03:22.760
If the ISP has more than 0.1% market share,

03:23.640 --> 03:24.960
it's most likely in there.

03:27.040 --> 03:31.080
But, that still doesn't cover corporate domains,

03:31.080 --> 03:34.040
company domains, custom domains.

03:34.040 --> 03:37.120
So, my example.com is not covered by this.

03:37.120 --> 03:39.320
So, what we do is a MX lookup.

03:39.320 --> 03:42.000
So, we make a, what is the MX, for example.com,

03:42.000 --> 03:46.040
and we find, oh, it's MX.dreamhouse.com.

03:46.040 --> 03:48.240
So, we look up the configuration for DreamHouse,

03:48.240 --> 03:50.800
or Office 365, and we got the config this way.

03:52.840 --> 03:56.720
This protocol is an internet draft right now.

03:58.000 --> 04:00.280
The goal is to make this an internet standard.

04:01.480 --> 04:02.680
There is a draft for it.

04:02.680 --> 04:04.280
You find this on this URL here.

04:05.400 --> 04:08.880
And, if you follow, if you, an e-machline,

04:08.880 --> 04:11.840
implements this protocol, and you follow this protocol

04:11.840 --> 04:16.640
as it's written down there, you can set up more than 80%

04:16.640 --> 04:18.720
of the email addresses fully automatically.

04:18.720 --> 04:22.160
So, more than 80% of your users don't have to do anything else

04:22.160 --> 04:24.800
than just use an email address and password.

04:27.320 --> 04:28.680
How does it look like?

04:28.680 --> 04:30.120
This is how it looks like.

04:30.120 --> 04:31.840
And, the first reaction I will get is,

04:31.840 --> 04:34.800
oh, yeah, except, whoa.

04:34.800 --> 04:37.040
Today, I would use JSON, of course,

04:37.040 --> 04:38.880
that was 15 years ago.

04:38.880 --> 04:41.040
Was a good choice at the time.

04:41.040 --> 04:42.720
It still has some advantages.

04:42.720 --> 04:44.280
But, this is roughly how it looks like.

04:44.280 --> 04:45.560
We're going to look at the details.

04:45.560 --> 04:48.600
So, it starts with the email provider.

04:48.600 --> 04:49.680
This is the domain.

04:52.200 --> 04:54.040
Here, it's on Microsoft.com, but normally,

04:54.040 --> 04:56.440
that would be the part after the email address.

04:56.440 --> 04:58.440
And, you can have multiple of those,

04:59.280 --> 05:01.320
depending on how many domains are hosted

05:01.320 --> 05:02.480
by this email provider.

05:02.480 --> 05:04.000
So, if I hear who it's all the country,

05:04.000 --> 05:09.200
you're who.de, you're who.fr, you're who.ite.com, et cetera.

05:09.200 --> 05:12.640
And, the MX servers are also in here.

05:12.640 --> 05:14.200
So, if you make a look up,

05:14.200 --> 05:16.360
we take the domain part of this,

05:17.280 --> 05:20.320
of this, of the MX server,

05:20.320 --> 05:22.400
and we put it in here as well.

05:22.400 --> 05:24.920
And, this is how we can find the configuration.

05:24.920 --> 05:27.640
So, in the database, it's going to map that

05:27.640 --> 05:29.000
in the other way around.

05:29.000 --> 05:30.760
So, there's going to be an entry for this and this,

05:30.760 --> 05:32.280
and we can easily look that up.

05:32.280 --> 05:36.160
And, even on the server, this is a static file

05:36.160 --> 05:38.160
on the server, so it's really fast.

05:38.160 --> 05:40.080
There's also the display name here.

05:40.080 --> 05:42.440
There's a long and short version, you don't see that here.

05:42.440 --> 05:44.400
It's completely optional, but as a client,

05:44.400 --> 05:47.160
you want to use the name of the provider

05:47.160 --> 05:49.600
as a count name, for example, you can use that.

05:51.120 --> 05:53.440
This is how the config looks like.

05:53.440 --> 05:54.720
The incoming server here.

05:55.680 --> 05:58.800
We implement, we specify four different types.

05:58.800 --> 06:02.200
This IMAP, pop three, JMAB,

06:02.200 --> 06:04.640
on special request from Fastmail,

06:04.640 --> 06:07.240
yeah, JMAB, and exchange.

06:08.920 --> 06:11.400
And, you can have multiple,

06:13.600 --> 06:16.200
you can have multiple of these incoming servers.

06:17.280 --> 06:21.120
And, they are ordered by preference.

06:22.200 --> 06:24.800
So, all other things being equal.

06:24.800 --> 06:27.240
The client is supposed to take the first configuration

06:27.240 --> 06:30.280
in the file, but the client has the choice

06:30.280 --> 06:31.440
to use another one.

06:31.440 --> 06:34.360
So, for example, in Thunderbird, if the configuration shows

06:34.360 --> 06:37.040
that there's both an IMAP and a pop three

06:37.040 --> 06:40.000
configuration in there, Thunderbird gives a choice

06:40.000 --> 06:41.720
to the user, what do you want?

06:41.720 --> 06:44.200
IMAP, pop three, there's trade-offs,

06:44.200 --> 06:45.280
and the user can make the choice,

06:45.280 --> 06:47.080
and the client is going to take then, for example,

06:47.080 --> 06:51.160
the first pop three configuration listed in this file.

06:51.160 --> 06:55.960
Funny fact, half of the Thunderbird users

06:55.960 --> 06:57.840
have a pop three account configured.

06:58.840 --> 07:00.200
Of course, there's more IMAP accounts,

07:00.200 --> 07:01.840
but still half have a pop three account.

07:01.840 --> 07:03.360
I was really surprised about that.

07:03.360 --> 07:04.680
It's really popular.

07:04.680 --> 07:07.440
I thought nobody uses that anymore, but it's popular.

07:08.640 --> 07:10.240
There's exchange servers, and of course,

07:10.240 --> 07:13.120
you have the SMTP server as outgoing server as well,

07:13.120 --> 07:15.520
and the structure looks pretty much the same.

07:15.520 --> 07:17.680
You have twice the authentication here.

07:19.520 --> 07:21.120
All of them have to work.

07:21.120 --> 07:24.080
This is not the same as the IMAP capabilities

07:24.080 --> 07:25.840
where the server just lists something

07:25.840 --> 07:27.360
and it might not even work.

07:28.480 --> 07:29.440
These both work.

07:29.440 --> 07:31.920
It's just, does the client support OAuth?

07:31.920 --> 07:34.080
If yes, he's supposed to use this.

07:34.080 --> 07:35.880
If the client doesn't support OAuth,

07:35.880 --> 07:39.040
it can go on to the next one that it does support.

07:39.040 --> 07:43.160
And there's the format of the username in there.

07:43.160 --> 07:46.400
It could be Ben, it could be ben at example.com.

07:46.400 --> 07:49.000
It could be Ben backslash example,

07:49.000 --> 07:51.920
like the Windows domains that is in here.

07:54.040 --> 07:55.920
Oh, and by the way, in the database,

07:55.920 --> 07:59.200
we always prefer as TLS, overstar TLS.

08:00.160 --> 08:05.160
And if there's a plain text configuration

08:06.160 --> 08:07.280
and an SSL configuration,

08:07.280 --> 08:09.600
we don't bother listing the plain text configuration.

08:09.600 --> 08:13.120
And there were situations where Yahoo or others said,

08:13.120 --> 08:15.000
no, we don't want you to list the SSL

08:15.000 --> 08:16.040
only for paid customers.

08:16.040 --> 08:17.160
We said, we don't care.

08:17.160 --> 08:18.560
If there's an SSL configuration,

08:18.560 --> 08:20.280
and it works, we put it in there.

08:20.280 --> 08:22.720
And this is the way Thunderbird protected the users

08:22.720 --> 08:25.240
years before other clients did,

08:25.240 --> 08:26.840
because we knew these configurations

08:26.840 --> 08:28.560
and the ISP didn't advertise it.

08:29.600 --> 08:31.560
You can also capture address book

08:31.560 --> 08:33.320
and calendar sync and file share.

08:35.600 --> 08:37.440
Thunderbird doesn't implement that by this possible.

08:37.440 --> 08:39.560
So you just enter email address and password,

08:39.560 --> 08:40.800
and boom, you have it all set up.

08:40.800 --> 08:43.840
Email address, calendar sync, file share,

08:44.760 --> 08:47.000
contact sync is all in advance.

08:51.080 --> 08:54.740
Ah, so like I said, there's a specification out there.

08:56.920 --> 08:58.920
I would appreciate your support.

08:58.920 --> 09:01.680
It's like verbally your support,

09:01.680 --> 09:04.760
expressing support in the right forums

09:04.760 --> 09:07.360
so that this moves forward to stand,

09:07.360 --> 09:10.320
actually moves forward to the standardization.

09:10.320 --> 09:12.600
And if you're writing an email client,

09:12.600 --> 09:14.240
please support the specification.

09:14.240 --> 09:15.280
It's really helpful.

09:15.280 --> 09:17.480
And of course, if you have an email service,

09:17.480 --> 09:20.240
it's always appreciated if you support that as well.

09:21.600 --> 09:25.320
All right, second topic.

09:26.320 --> 09:28.680
This is a less happy topic,

09:28.680 --> 09:30.640
multi-factor authentication and email.

09:31.440 --> 09:33.040
We all want that.

09:33.040 --> 09:34.800
The ISPs want that.

09:34.800 --> 09:36.720
We want that.

09:36.720 --> 09:38.880
Unfortunately, not that easy.

09:40.520 --> 09:43.800
Right now, the situation is that only if you're Google,

09:43.800 --> 09:46.640
Microsoft, or Yahoo, you can do OAuth.

09:46.640 --> 09:48.160
The rest pretty much can.

09:48.160 --> 09:49.600
There's a few smaller ones,

09:49.600 --> 09:52.800
but if you're not part of the select few,

09:52.800 --> 09:54.840
which is hard-coded in Thunderbird,

09:55.000 --> 09:57.320
or the email client, you can do it

09:57.320 --> 09:58.680
because the client doesn't have any way

09:58.680 --> 10:00.960
to can discover the OAuth server.

10:00.960 --> 10:02.360
So which options do we have?

10:02.360 --> 10:05.360
We can use OAuth as it is specified right now,

10:07.240 --> 10:09.560
or rather not specified right now.

10:10.560 --> 10:14.000
We can, I'm making a proposal for M-Auth,

10:14.000 --> 10:16.800
but I'm dubbing M-Auth or more,

10:16.800 --> 10:18.080
OAuth for mail.

10:18.080 --> 10:20.560
It's OAuth, but we nail it down further.

10:20.560 --> 10:23.000
The things that OAuth doesn't specify,

10:23.000 --> 10:25.280
we mail them down and specify them for mail

10:25.280 --> 10:27.480
so that it works well.

10:27.480 --> 10:29.040
Third option is PASCIs.

10:31.000 --> 10:32.440
Could you please, thank you.

10:32.440 --> 10:33.280
Okay.

10:40.000 --> 10:40.840
Thank you.

10:41.840 --> 10:46.280
So OAuth was originally designed clearly for websites.

10:46.280 --> 10:49.200
Like Zoom wants to authenticate with Google,

10:49.200 --> 10:50.640
and they have a relationship,

10:50.640 --> 10:52.640
and this is what the spec is written in mind.

10:52.640 --> 10:54.520
It clearly shows because if you're trying

10:54.520 --> 10:56.200
to implement for mail clients,

10:56.200 --> 10:58.840
you run into all sorts of problems.

10:58.840 --> 11:01.200
Most of the problems are related to the fact that,

11:01.200 --> 11:03.120
oh, OAuth is not really a specification,

11:03.120 --> 11:04.760
it's more like a framework.

11:04.760 --> 11:08.640
It says if you wanna do that, you would do it this way,

11:08.640 --> 11:09.920
but it's up to you.

11:09.920 --> 11:11.920
The server decides about everything,

11:11.920 --> 11:14.480
it can do something, it might not do it.

11:14.480 --> 11:17.080
There's no way to know whether it's going to do it or not.

11:18.080 --> 11:23.080
That's for its real problems for the implementation,

11:23.440 --> 11:27.400
because as a client, I cannot rely on anything at all.

11:27.400 --> 11:30.640
Everything is optional, I don't know what's going on.

11:30.640 --> 11:32.480
Even for the same server implementation,

11:32.480 --> 11:35.000
it all depends on the configuration,

11:35.000 --> 11:40.000
and that specific AP, EISP, whatever they have put in there,

11:40.200 --> 11:41.480
this is what works and what doesn't,

11:41.480 --> 11:44.160
and I cannot rely on anything in my code.

11:44.160 --> 11:48.840
Problem is that users always blame the client,

11:48.840 --> 11:50.360
no matter what the reason is.

11:50.360 --> 11:54.040
So in my company, we're offering a little email add-on,

11:54.040 --> 11:55.800
and in support we get this all the time.

11:55.800 --> 11:56.640
The user says,

11:56.640 --> 11:59.240
and my email doesn't work anymore,

11:59.240 --> 12:01.720
it worked yesterday, it doesn't work today.

12:03.440 --> 12:07.000
So there was no software update since yesterday and today.

12:08.920 --> 12:10.320
What could it possibly be?

12:10.320 --> 12:12.880
Of course, it has to be that the administrator

12:12.880 --> 12:17.120
changed the authentication server, the page something,

12:17.120 --> 12:20.720
it's something changed at the company, his own company,

12:20.720 --> 12:23.960
and there's no way for us to know,

12:23.960 --> 12:26.880
there's no way we can fix that, there's nothing for us to do.

12:26.880 --> 12:29.640
We cannot even test it because we don't have a login

12:29.640 --> 12:32.200
for that company, there's nothing we can do.

12:32.200 --> 12:35.400
But we can't, the customer doesn't understand that.

12:35.400 --> 12:37.360
He says, hey, but it works in this client,

12:37.360 --> 12:42.080
it works this, I want you to work here, you are broken, bye-bye.

12:42.080 --> 12:44.960
And I lost this customer, I lost,

12:44.960 --> 12:47.720
we lost so many customers because things don't work

12:47.720 --> 12:51.240
at the OAuth level, and there's nothing we can do about it.

12:53.200 --> 12:54.560
One of the big troubles,

12:56.040 --> 12:58.600
one of the big troubles is expiry.

12:58.600 --> 13:01.880
None of this expiry stuff, like OAuth is all about expiry

13:01.880 --> 13:04.920
and refresh, this is pretty much all that OAuth does,

13:04.920 --> 13:06.960
and none of that is specified.

13:06.960 --> 13:08.640
There's a lot how it should work,

13:08.640 --> 13:12.480
how it almost always works, but it's always optional.

13:12.480 --> 13:15.760
So the expiry, I have no idea, is it 12 months,

13:15.760 --> 13:18.240
or is it five minutes?

13:18.240 --> 13:20.320
I have no idea, and it makes a big difference

13:20.320 --> 13:22.800
how I implement my client, but that user has to log in

13:22.800 --> 13:24.880
every 12 months or every five minutes.

13:24.880 --> 13:28.480
I have to structure my code accordingly, my UI accordingly.

13:28.480 --> 13:31.120
But when I write this, I have no idea what's going to happen

13:31.120 --> 13:33.040
because it's all configurable.

13:33.040 --> 13:35.440
Same with the refresh token.

13:35.440 --> 13:38.400
Usually I'm getting a refresh token, but it's optional.

13:39.720 --> 13:42.480
So what I'm proposing with M-Auth,

13:42.480 --> 13:43.800
that we nail this down.

13:43.800 --> 13:45.800
So if you're going to expire that,

13:45.800 --> 13:47.520
please tell us when it expires.

13:47.520 --> 13:51.040
Again, it's in the spec, so that I have a chance

13:51.040 --> 13:52.840
to refresh before it expires.

13:52.840 --> 13:56.680
So please send this expiry time.

13:56.680 --> 13:58.920
Please send the refresh token.

13:58.920 --> 14:01.280
Most servers do that, but it's optional.

14:01.280 --> 14:03.320
We would nail this down saying it has to,

14:03.320 --> 14:06.800
if you use this for mail, if you want to use this for mail,

14:06.800 --> 14:08.400
you have to send a refresh token.

14:08.400 --> 14:10.680
You have to actually refresh the refresh token,

14:10.680 --> 14:12.560
so if the user continuously checks mail,

14:12.560 --> 14:14.400
it is not going to expire.

14:14.400 --> 14:17.120
All these little details are not specified in O-Auth,

14:17.120 --> 14:19.160
and we would need to nail them down for mail

14:19.160 --> 14:20.960
to work properly and reliably.

14:24.520 --> 14:26.800
And on the server side,

14:26.800 --> 14:28.800
this is just a matter of configuration.

14:28.800 --> 14:30.920
Like, we don't need to write any new software,

14:30.920 --> 14:33.880
it's just a question, how does the ISP configure that?

14:33.880 --> 14:35.240
So all we would have to say, like,

14:35.240 --> 14:37.800
if the ISP, if you want to use O-Auth for mail,

14:37.800 --> 14:40.800
you have to configure it in this way for it to work.

14:40.800 --> 14:43.680
And for us, this configuration is a question

14:43.680 --> 14:44.960
of working or not working,

14:44.960 --> 14:46.440
because the users are going to complain

14:46.440 --> 14:47.920
if they have to log in all the time

14:47.920 --> 14:49.600
and not going to use our product.

14:52.520 --> 14:54.040
I'm going to skip over error handling.

14:54.040 --> 14:56.200
There isn't pretty much no error codes,

14:56.200 --> 14:57.840
like all the guys have access denied.

14:57.840 --> 14:59.840
I don't know whether the password failed

14:59.840 --> 15:01.000
or the user canceled.

15:01.000 --> 15:02.320
I don't know how to react to that.

15:02.320 --> 15:04.920
Should I show the prompt again or not?

15:04.920 --> 15:07.440
We need to have some proper error code.

15:07.440 --> 15:12.440
And client registration is my biggest worry.

15:12.600 --> 15:15.520
The O-Auth specification requires

15:16.960 --> 15:20.160
that the client sends a client ID.

15:20.160 --> 15:22.400
And then the specification, it says,

15:22.400 --> 15:24.320
the way the client registration works

15:24.320 --> 15:26.520
is outside the realm of the spec.

15:26.520 --> 15:28.880
It's explicitly not specified.

15:29.760 --> 15:34.560
And even worse, this ITFRC specifically states,

15:34.560 --> 15:37.520
you may have to sign a contract

15:38.840 --> 15:40.960
in order to get a client registration.

15:42.040 --> 15:44.200
You may have to sign a contract.

15:44.200 --> 15:45.600
What does that mean?

15:45.600 --> 15:48.720
Right now, I have to sign a contract with Google

15:48.720 --> 15:51.480
and with Microsoft in order for my email client to work

15:51.480 --> 15:52.480
with O-Auth.

15:52.480 --> 15:54.400
That's the situation right now.

15:54.400 --> 15:56.800
That is a problem even right now

15:56.840 --> 15:58.960
between the big ISPs

15:58.960 --> 16:01.440
because they're not always at peace with each other

16:01.440 --> 16:03.360
and they can block each other this way.

16:03.360 --> 16:04.960
That's the problem right now.

16:04.960 --> 16:07.720
Even worse, for me as a little guy,

16:07.720 --> 16:10.440
I have absolutely zero chance standing up to Google

16:10.440 --> 16:11.320
with this contract.

16:11.320 --> 16:14.040
Like, if I want to offer an email client,

16:14.040 --> 16:15.120
I have to sign this.

16:15.120 --> 16:16.480
I don't have a choice.

16:16.480 --> 16:20.840
So Google can force legal conditions on me,

16:20.840 --> 16:24.080
contracts on me, and put in there whatever they want,

16:24.080 --> 16:25.400
I will have to sign that.

16:26.400 --> 16:29.920
That is a legal nightmare.

16:31.400 --> 16:33.400
A huge liability.

16:33.400 --> 16:38.080
So if this was an IETF spec for mail,

16:38.080 --> 16:40.560
I don't think this is fine between websites.

16:40.560 --> 16:42.480
Like if Zoom wants to authenticate to Google,

16:42.480 --> 16:43.840
they can make contracts.

16:43.840 --> 16:46.280
But for a client's service protocol,

16:46.280 --> 16:48.720
I don't think that would ever pass IETF standards

16:48.720 --> 16:52.440
because it's pretty much by definition not open.

16:52.440 --> 16:55.120
This is actually worse than patents

16:55.120 --> 16:56.800
because of the pattern I might ignore.

16:56.800 --> 16:59.320
A pattern, it might not apply to me.

16:59.320 --> 17:00.920
A pattern might not be valid.

17:00.920 --> 17:03.760
But this is a contract between me and the party

17:03.760 --> 17:05.000
and it's definitely valid.

17:06.320 --> 17:07.560
This is much worse.

17:10.680 --> 17:14.520
So there's one proposal in the room

17:14.520 --> 17:17.000
to use dynamic client registration.

17:17.000 --> 17:21.880
There is a specification which is dynamic client registration.

17:21.880 --> 17:24.800
So the ISP can offer to any client,

17:24.800 --> 17:27.200
any every instance would just connect,

17:27.200 --> 17:30.200
give me a client ID and the ISP would return with a client ID.

17:31.920 --> 17:35.480
Apart from the fact that it makes the whole system useless,

17:35.480 --> 17:37.360
I don't know of any implementation of that.

17:37.360 --> 17:39.000
Like there is a spec for this,

17:39.000 --> 17:42.480
but I've never seen any client implementing that.

17:42.480 --> 17:45.840
I've never seen any server implementing that.

17:45.840 --> 17:48.560
I've never heard of anybody who has ever seen

17:48.560 --> 17:50.400
any implementation ever.

17:52.400 --> 17:54.120
So there is a spec for that,

17:55.400 --> 17:57.880
but we would have to write the server, the software.

17:57.880 --> 17:59.600
We need to write a server software.

17:59.600 --> 18:01.920
It needs to scale for two big ISPs.

18:01.920 --> 18:04.400
We need to write all the client software.

18:04.400 --> 18:08.080
And once we've done that, we've added complexity,

18:08.080 --> 18:10.840
but the whole thing is pretty pointless

18:10.840 --> 18:13.480
because the client registration doesn't actually do anything

18:13.480 --> 18:14.320
security-wise.

18:14.320 --> 18:17.440
I could just open up outload.exe to find the client ID

18:17.440 --> 18:20.240
and secret and theoretically just use that.

18:20.240 --> 18:23.280
So security-wise is snake oil

18:23.280 --> 18:25.480
and it doesn't serve any purpose.

18:25.480 --> 18:28.960
So if I want to know what the client name is

18:28.960 --> 18:32.720
for whatever debugging or help purposes,

18:32.720 --> 18:35.040
I can just look at the user agent

18:35.040 --> 18:38.440
because all this HTTP, I look at the user agent string

18:38.440 --> 18:39.920
and if we put a proper value in there,

18:39.920 --> 18:41.040
I know what the client is,

18:41.040 --> 18:42.840
but I get around all these legal things.

18:42.840 --> 18:45.640
So as far as I end up C,

18:45.640 --> 18:47.640
the only advantage of the client registration

18:47.640 --> 18:49.520
is to force a contract on,

18:49.520 --> 18:51.520
which is exactly what we don't want.

18:51.520 --> 18:54.000
So there's a simple solution to that.

18:54.000 --> 18:56.000
We don't need any new software,

18:56.000 --> 18:58.640
very simple, in this MOR thing,

18:58.640 --> 19:03.560
we just specify the client ID is going to be mail, M-A-I-L.

19:03.560 --> 19:04.400
Problem solved.

19:05.440 --> 19:06.840
Hard-coded string.

19:06.840 --> 19:08.920
And you don't need any new software for that.

19:08.920 --> 19:11.600
The ISP just needs to configure that client ID

19:11.600 --> 19:12.640
in their software.

19:12.640 --> 19:14.000
If they want my clients to connect,

19:14.000 --> 19:16.440
they have to configure this ID, problem solved.

19:17.440 --> 19:20.440
That's what I'm proposing for M-Auth as a solution to this.

19:24.440 --> 19:26.440
There's another big problem with O-Auth.

19:26.440 --> 19:29.440
It inherently depends on a web browser.

19:29.440 --> 19:32.440
So I want to implement an email client.

19:32.440 --> 19:35.440
I already have to deal with HTML email,

19:35.440 --> 19:38.440
but there I don't want JavaScript,

19:38.440 --> 19:40.440
I don't want cookies, I don't want video,

19:40.440 --> 19:43.440
I don't want any of that when I render HTML emails.

19:44.440 --> 19:47.440
When I want to do O-Auth, I have to have all of that.

19:47.440 --> 19:49.440
O-Auth won't work if I don't have JavaScript.

19:49.440 --> 19:51.440
It won't work if I don't have cookies,

19:51.440 --> 19:53.440
and the cookies need to be persistent.

19:53.440 --> 19:55.440
It has to be a full web browser.

19:55.440 --> 19:58.440
So I'm probably going to use WebView or something,

19:58.440 --> 20:01.440
but then it's going to depend on the Android version

20:01.440 --> 20:05.440
that the user has, which WebView version he has.

20:05.440 --> 20:07.440
So that's going to be a support nightmare.

20:07.440 --> 20:11.440
I need a specific API.

20:13.440 --> 20:17.440
Because I need to track when this login sequence

20:17.440 --> 20:19.440
finished, which Ureli is on.

20:19.440 --> 20:21.440
So now he's done now, he's locked in now.

20:21.440 --> 20:24.440
I need a specific API for this embedding web browser.

20:24.440 --> 20:28.440
That's an extra API, which most embedding APIs don't have.

20:28.440 --> 20:30.440
It's an extra complexity.

20:30.440 --> 20:32.440
It's already difficult.

20:32.440 --> 20:34.440
I don't know how many client,

20:34.440 --> 20:37.440
email client implementers are in the room.

20:37.440 --> 20:40.440
I don't know how you feel about putting an email client

20:40.440 --> 20:42.440
on a web browser, mandatory in your email client.

20:42.440 --> 20:45.440
I don't know how you feel about that.

20:45.440 --> 20:48.440
But that's the situation right now.

20:48.440 --> 20:50.440
There's another option.

20:50.440 --> 20:52.440
I can just launch a system browser.

20:52.440 --> 20:54.440
So I'll launch a URL, go to the system browser.

20:54.440 --> 20:57.440
That's actually what Google wants.

20:57.440 --> 21:00.440
Problem there is I interrupted the flow.

21:00.440 --> 21:01.440
That's a problem.

21:01.440 --> 21:04.440
The user left my email program at this point.

21:04.440 --> 21:06.440
He was in the middle of setting up the email address,

21:06.440 --> 21:08.440
and now he's in the browser and he finds the news

21:08.440 --> 21:10.440
and he starts reading the news and cat pictures,

21:10.440 --> 21:12.440
and I lost it.

21:12.440 --> 21:14.440
Maybe he's going to come back.

21:14.440 --> 21:17.440
I don't know that the flow is interrupted.

21:17.440 --> 21:21.440
And in order to know when the user finished,

21:21.440 --> 21:25.440
I need to redirect to HTTP local host.

21:25.440 --> 21:28.440
That's a web server that I have to implement in my email client.

21:28.440 --> 21:30.440
So I have the choice now.

21:30.440 --> 21:34.440
I can either implement a web browser or a web server

21:34.440 --> 21:36.440
in my email client.

21:36.440 --> 21:39.440
I don't have those two choices.

21:39.440 --> 21:43.440
I don't like either of those.

21:43.440 --> 21:47.440
So that's where we are.

21:47.440 --> 21:51.440
You could argue that we have to implement OAuth anyway,

21:51.440 --> 21:54.440
because we're dependent on OAuth for Google,

21:54.440 --> 21:57.440
for Microsoft, and for Yahoo, which is true.

21:57.440 --> 21:59.440
However, the problem right now is still contained.

21:59.440 --> 22:02.440
It's really these few three things that are where

22:02.440 --> 22:05.440
really needed for all the others that don't need it.

22:05.440 --> 22:08.440
My hope is that we can contain it there.

22:08.440 --> 22:13.440
If we open up the floodgates and open it up to all the ISPs,

22:13.440 --> 22:16.440
we have a legacy that we will never get rid of.

22:16.440 --> 22:19.440
You heard the talks about IMAP, which legacy that is.

22:19.440 --> 22:22.440
If you implemented email, you probably had your hat scratched

22:22.440 --> 22:24.440
for one reason or another.

22:24.440 --> 22:27.440
There was a reason 30 years ago why they did it this way.

22:27.440 --> 22:31.440
I don't want to be the guy who puts OAuth in email

22:31.440 --> 22:33.440
and creates legacy that people have to deal with

22:33.440 --> 22:35.440
20 years from now on.

22:35.440 --> 22:37.440
I don't want to be the guy.

22:37.440 --> 22:44.440
This is why I don't feel at ease with putting OAuth into email.

22:44.440 --> 22:48.440
There's another option.

22:48.440 --> 22:51.440
It's called PASCIs.

22:51.440 --> 22:54.440
We talked about MAUTH.

22:54.440 --> 22:55.440
PASCIs.

22:55.440 --> 22:58.440
PASCIs are the new cool thing.

22:58.440 --> 23:01.440
Google, Apple, Microsoft are fully behind that.

23:02.440 --> 23:04.440
They implemented that in record speed.

23:04.440 --> 23:06.440
It's supposed to be super secure.

23:06.440 --> 23:09.440
You can bind this to biometrics of your phone.

23:09.440 --> 23:13.440
You don't need this code, two-factor thing, code thing.

23:13.440 --> 23:15.440
It's still secure.

23:15.440 --> 23:19.440
The big ISPs really, really want this.

23:19.440 --> 23:20.440
They're really behind this.

23:20.440 --> 23:23.440
This is a big advantage because maybe we can contain

23:23.440 --> 23:27.440
the OAuth problem and migrate users to PASCIs in this way.

23:27.440 --> 23:35.440
We could also allow that for all other ISPs as well.

23:35.440 --> 23:38.440
The other advantage is it's a very simple protocol.

23:38.440 --> 23:42.440
It's a challenge response protocol, which means the server

23:42.440 --> 23:45.440
is sending some kind of information, some blob,

23:45.440 --> 23:48.440
some JSON or string, sending it to the eMac line.

23:48.440 --> 23:52.440
The eMac line is sending this to an operating system API.

23:52.440 --> 23:54.440
The operating system is popping up a dialog.

23:54.440 --> 23:57.440
Do you want to log into this and this website

23:57.440 --> 23:58.440
or this and this domain?

23:58.440 --> 24:01.440
The user can approve or disapprove.

24:01.440 --> 24:05.440
He might have to use Face ID or thumbprint,

24:05.440 --> 24:07.440
depending on the settings.

24:07.440 --> 24:12.440
There we have the two-factor authentication with biometrics.

24:12.440 --> 24:14.440
It's secure.

24:14.440 --> 24:17.440
Then the operating system generates another information.

24:17.440 --> 24:20.440
We send it back to the server and the server says,

24:20.440 --> 24:23.440
okay, so it's a simple, we just pass on information

24:23.440 --> 24:24.440
back and forth.

24:24.440 --> 24:26.440
It's very simple on the protocol level.

24:26.440 --> 24:30.440
I don't need a web browser and it doesn't have all of these

24:30.440 --> 24:33.440
issues that I just mentioned with OAuth.

24:33.440 --> 24:37.440
So I don't know too much about PASCIs,

24:37.440 --> 24:40.440
but my gut feeling tells me this is the better way forward

24:40.440 --> 24:44.440
and something that is much more easy to support in the future.

24:44.440 --> 24:46.440
This is an open question.

24:46.440 --> 24:49.440
If you know something of how this would work with PASCIs

24:49.440 --> 24:52.440
and have proposals or want to get involved in that,

24:52.440 --> 24:54.440
it's an open question right now.

24:54.440 --> 24:57.440
Let's discuss this.

24:57.440 --> 25:00.440
So, questions?

25:00.440 --> 25:02.440
Thank you.

