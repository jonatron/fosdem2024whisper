WEBVTT

00:00.000 --> 00:08.860
Good afternoon everyone.

00:08.860 --> 00:21.420
having a moment of pleasure in

00:21.420 --> 00:25.420
I will begin.

00:25.420 --> 00:30.820
You're in green.

00:30.820 --> 00:31.980
I'm on green, yes.

00:31.980 --> 00:34.540
Okay. Hello everybody.

00:34.540 --> 00:36.500
My name is George Goussius.

00:36.500 --> 00:38.740
I'm head of research at Tendall Labs,

00:38.740 --> 00:40.820
and part-time associate professor

00:40.820 --> 00:44.900
at the Delfi University of Technology in a nearby country here.

00:44.900 --> 00:47.260
Let me say a few things about myself.

00:47.260 --> 00:50.540
Since it's customary here to introduce the speaker.

00:50.540 --> 00:55.860
So I have been on this particular field of S-bombs,

00:55.860 --> 00:57.940
and dependency analysis, and so on.

00:57.940 --> 01:02.180
As a researcher, since 2015 more or less.

01:02.180 --> 01:06.940
So I have seen all the failures coming up in real time,

01:06.940 --> 01:09.820
like left pad, then solar weeds, and then so on.

01:09.820 --> 01:15.220
In 2020, we had organized the dependency management room,

01:15.220 --> 01:16.900
which was a pre-care thorough,

01:16.900 --> 01:21.060
perhaps it was slightly conflicting with this particular room,

01:21.060 --> 01:24.380
where we introduced the Fasten project,

01:24.380 --> 01:28.980
which was one of the first projects that basically did

01:28.980 --> 01:33.700
the reachability-based analysis of S-bombs and software dependencies.

01:33.700 --> 01:36.060
This project, one thing led to another,

01:36.060 --> 01:38.740
and this project basically became a startup,

01:38.740 --> 01:41.300
perhaps now it's a scale-up, we can call it,

01:41.300 --> 01:43.500
which is called Ender Labs.

01:43.500 --> 01:45.500
It is based in the Bay Area.

01:45.500 --> 01:51.180
We are basically providing solutions in the space of

01:51.180 --> 01:53.660
software composition analysis.

01:53.660 --> 01:58.420
Plus plus. We will see what the plus plus is today.

01:58.620 --> 02:03.060
Well, by describing my history so far,

02:03.060 --> 02:06.100
you might have understood that I'm of a certain age.

02:06.100 --> 02:09.860
Parts of this being of a certain age,

02:09.860 --> 02:12.500
is that I have a teenage daughter,

02:12.820 --> 02:15.900
that actually is into pop music,

02:15.900 --> 02:18.300
and lately, I came up,

02:18.300 --> 02:19.860
she came up actually with this song,

02:19.860 --> 02:21.740
which I really, really like because it describes

02:21.740 --> 02:24.500
the problem that I'm going to talk about

02:24.500 --> 02:28.180
in almost in excruciating detail, I would say.

02:28.180 --> 02:30.380
Let's read a bit the lyrics.

02:30.380 --> 02:32.220
So like ships in the night,

02:32.220 --> 02:35.100
you keep passing me by,

02:35.100 --> 02:36.620
just wasting time,

02:36.620 --> 02:39.460
wasting time trying to prove who's right.

02:39.460 --> 02:41.740
If it all goes crashing into the sea,

02:41.740 --> 02:44.740
it's just you and me trying to find the light.

02:44.740 --> 02:48.780
What are the ships? Any guesses?

02:51.220 --> 02:53.620
Let me help you a bit.

02:54.420 --> 02:56.900
There are two ships.

02:56.900 --> 02:59.700
One is the Package Manager,

02:59.700 --> 03:04.780
where the developer declares their intended differences,

03:04.780 --> 03:06.700
and the other ship is

03:06.700 --> 03:08.940
the compiler and the order and time of the language,

03:08.940 --> 03:12.180
depending on whether you're using Python or C or so on,

03:12.180 --> 03:14.820
which has its own view of dependencies.

03:14.820 --> 03:18.540
Right? Which ship is right?

03:18.860 --> 03:20.940
Who says both?

03:20.940 --> 03:24.220
Let's see. One vote for both, but who?

03:24.220 --> 03:26.820
It depends. Okay. All right.

03:26.820 --> 03:32.420
Who says that the compiler is right, is always right?

03:32.420 --> 03:33.620
Yes.

03:33.620 --> 03:37.420
Is it ground truth though?

03:37.420 --> 03:40.180
They're both wrong all the time.

03:40.820 --> 03:43.540
The compiler is ground truth.

03:43.540 --> 03:44.860
It can be ground truth,

03:44.860 --> 03:47.700
but what about when you load code dynamically?

03:47.700 --> 03:48.740
It's runtime.

03:48.740 --> 03:50.260
Okay.

03:50.260 --> 03:51.940
Yeah, that's the issue.

03:51.940 --> 03:54.780
So the developer over describes

03:54.780 --> 03:58.140
the dependencies for testing coverage and contract validation.

03:58.140 --> 04:00.260
Horrible things happen because you build too much code,

04:00.260 --> 04:02.100
bring it all in later on and things go even further.

04:02.100 --> 04:03.580
Fantastic. Yes, exactly.

04:03.580 --> 04:05.940
Yes. This is where I was trying to get to things.

04:05.940 --> 04:08.380
Maybe you have to repeat all that.

04:08.380 --> 04:12.420
Okay. I mean, it will come through the presentation.

04:12.420 --> 04:15.660
So traditional dependency management and

04:15.660 --> 04:17.620
software composition analysis works.

04:17.620 --> 04:19.900
I mean, we're in the S-bomb room,

04:19.900 --> 04:22.300
we guess everybody knows how it works.

04:22.300 --> 04:23.940
So we start a new project,

04:23.940 --> 04:26.820
we create a Package Manager manifest,

04:26.820 --> 04:29.860
requirements TXT, POM XML, what not,

04:29.860 --> 04:33.260
Gradle, whatever tool we're using.

04:33.260 --> 04:35.820
Well, the build system and the Package Manager,

04:35.820 --> 04:40.300
when we're trying to build a download stuff from the Internet,

04:40.300 --> 04:42.100
side parenthesis here,

04:42.100 --> 04:43.580
how can we trust our data on

04:43.580 --> 04:45.700
just random stuff we download from the Internet?

04:45.700 --> 04:48.620
That's a different question, close parenthesis.

04:48.620 --> 04:51.840
The Package Manager copies all the files in

04:51.840 --> 04:53.780
a directory and then the compiler starts using

04:53.780 --> 04:58.660
those dependencies in order to compile or run the project.

04:58.660 --> 05:02.500
This is what we know.

05:02.500 --> 05:09.580
But if we think a bit from a higher level point of view,

05:09.580 --> 05:11.500
we get more or less to this.

05:11.500 --> 05:16.020
So the developer declares their intent in a manifest file.

05:16.020 --> 05:18.380
So that's the requirements TXT file.

05:18.380 --> 05:21.740
A Package Manager does the dependency resolution,

05:21.740 --> 05:24.220
we get the dependencies onto our system,

05:24.220 --> 05:25.660
we have a compiler.

05:25.660 --> 05:29.500
Now, the developer themselves also write source code.

05:29.500 --> 05:32.060
The source code might or might be using

05:32.060 --> 05:33.580
some of the dependencies,

05:33.580 --> 05:36.820
might be declaring dependencies that they are not using,

05:36.820 --> 05:39.620
might be actually depending on

05:39.620 --> 05:43.020
dependencies that are transitive that other dependencies bring in.

05:43.020 --> 05:45.620
All right. All those nice things that make

05:45.620 --> 05:47.900
software composition analysis in a way that most of

05:47.900 --> 05:51.620
the tools are doing this at this point.

05:52.140 --> 05:56.460
Well, I wouldn't say wrong, but perhaps incomplete.

05:56.460 --> 06:00.340
Okay. The output is always a program,

06:00.340 --> 06:03.980
and the program is the source of truth of everything.

06:03.980 --> 06:08.820
So what I want to advocate here is that when we're

06:08.820 --> 06:10.380
doing software composition analysis,

06:10.380 --> 06:15.220
there is a lot of stuff that we don't really identify.

06:15.220 --> 06:18.940
Can you guess where the stuff comes from?

06:18.940 --> 06:22.580
Always. So for example,

06:22.580 --> 06:24.700
I write a Python program and I have

06:24.700 --> 06:28.020
some kind of packets that I have installed throughout get.

06:28.060 --> 06:34.860
What else? A copy and code into my repository.

06:34.860 --> 06:36.620
That's a dependency, right?

06:36.620 --> 06:40.340
But I don't maintain it somehow. What else?

06:40.340 --> 06:43.460
All of those fancy shift left dev tools.

06:43.460 --> 06:46.300
Shift left dev tools. Okay. So how?

06:46.300 --> 06:49.260
Right. They're pulling things in there.

06:49.260 --> 06:50.940
They're updating and flagging,

06:50.940 --> 06:52.860
and sometimes automatically changing.

06:52.860 --> 06:56.020
Okay. Yes. There are some tools that are indeed pulling in.

06:56.020 --> 06:59.140
Bazel, for example, but Bazel also depends on

06:59.140 --> 07:02.100
the versions that you provide to it.

07:02.100 --> 07:04.660
How else can I have, let's say,

07:04.660 --> 07:07.340
dependencies on code on my program? Yes.

07:07.340 --> 07:09.460
One-time library from your compiler.

07:09.460 --> 07:14.260
Fantastic. Yes. Lib C. This is a dependency.

07:14.260 --> 07:16.420
Okay. This gets installed, for example,

07:16.420 --> 07:18.420
from the operating system,

07:18.420 --> 07:20.340
but sometimes when you, for example,

07:20.340 --> 07:22.420
do some kind of JNI calls through Java,

07:22.420 --> 07:25.700
you depend on Lib C. Okay.

07:25.740 --> 07:32.100
Various ways. So things also tend to become out of sync.

07:32.100 --> 07:36.060
So developers import new dependencies.

07:36.060 --> 07:39.060
The dependencies are in the environment.

07:39.060 --> 07:43.980
In some cases, dependencies can be declared in a testing scope,

07:43.980 --> 07:46.780
but we're still using them into production

07:46.780 --> 07:51.060
for misconfiguration reasons or for any other reason.

07:51.060 --> 07:54.540
In some cases, dependencies are removed from the code,

07:54.540 --> 07:56.020
but not for the package manifest.

07:56.020 --> 07:58.980
So we have an extra dependency that we somehow need to maintain,

07:58.980 --> 08:01.820
but we're not using it,

08:01.820 --> 08:04.340
so it's basically redundant.

08:04.540 --> 08:07.500
Then we have Python.

08:07.500 --> 08:10.260
This is the average Python repository,

08:10.260 --> 08:14.460
especially if you're dealing with machine learning and AI stuff.

08:14.460 --> 08:17.580
You have requirements to use the file or a poetry file,

08:17.580 --> 08:20.460
and then we have a list of instructions that looks like this.

08:20.460 --> 08:23.140
That tells you please install TensorFlow at this version.

08:23.340 --> 08:25.020
Please install NAMPi at this version,

08:25.020 --> 08:27.820
but with this patch for this particular GPU,

08:27.820 --> 08:30.460
because otherwise the thing is going to be dog slow.

08:30.460 --> 08:33.620
Okay. So how can we actually maintain this?

08:33.620 --> 08:36.380
How can we discover first those dependencies?

08:36.380 --> 08:37.820
How can we maintain this?

08:37.820 --> 08:40.940
Let's take a look actually at this particular project.

08:40.940 --> 08:43.820
So this is from OpenAI.

08:44.180 --> 08:46.020
It's called baseline.

08:46.020 --> 08:49.020
It's pretty old, as you can see from the

08:49.380 --> 08:52.940
time stamps over there,

08:52.940 --> 08:56.340
but still it has exactly this problem.

08:56.340 --> 08:59.460
So it tells you to create a virtual environment,

08:59.460 --> 09:01.980
and then it tells you that you need to install TensorFlow

09:01.980 --> 09:05.620
between 1.4 or 1.15 by hand.

09:05.620 --> 09:08.940
It's not part of the requirements CXT file for some reason.

09:08.940 --> 09:11.580
Using our tooling,

09:11.580 --> 09:16.660
I have run an initial scan of this project

09:16.860 --> 09:19.820
without considering what I call phantom dependencies.

09:19.820 --> 09:21.300
All right.

09:21.300 --> 09:26.060
What you would see here is more or less the same thing

09:26.060 --> 09:28.460
that most SCA tools would give you.

09:28.460 --> 09:30.540
It's all the files that are in requirements

09:30.540 --> 09:32.660
CXT plus their transitive dependencies.

09:32.660 --> 09:34.580
Okay. So we have some direct dependencies,

09:34.580 --> 09:36.980
and then we have some transitive dependence over here.

09:36.980 --> 09:39.980
That's it. Is that it though?

09:39.980 --> 09:42.780
Well, we will see at the end of this presentation,

09:42.780 --> 09:47.340
but first I would need to run a full scan of the project.

09:47.340 --> 09:51.180
So by also enabling phantom dependencies,

09:51.180 --> 09:55.020
I will have leaving running in the background.

09:55.020 --> 10:00.860
Yes. I mean, the idea here is not to see this.

10:01.340 --> 10:06.060
But what I want to show is basically that the thing actually works.

10:06.060 --> 10:07.980
So it's not a vaporware.

10:07.980 --> 10:11.660
All right. So what are phantom dependencies?

10:11.660 --> 10:14.620
Basically, phantom dependencies is the thing that we have discussed.

10:14.620 --> 10:18.020
It is dependencies that are provided by the system,

10:18.020 --> 10:20.860
and they're assumed to be working basically,

10:20.860 --> 10:24.580
to be available somehow in the runtime of the project,

10:24.580 --> 10:28.740
can come from various locations,

10:28.740 --> 10:30.900
some of which we have already described.

10:30.900 --> 10:33.460
If you think this is just a problem with Python,

10:33.460 --> 10:35.300
it's not just a problem with Python.

10:35.300 --> 10:37.260
It's problem with NPM as well,

10:37.260 --> 10:40.020
with Java, if you have plugins with,

10:40.020 --> 10:41.900
even with native environments.

10:41.900 --> 10:46.300
All right. We discussed this.

10:46.300 --> 10:49.860
As I said, what I consider the sips in the night,

10:49.860 --> 10:51.540
according to the original talk,

10:51.540 --> 10:52.940
is basically the two things,

10:52.940 --> 10:56.620
the Package Manager and the compiler in the runtime view.

10:56.620 --> 10:59.580
The Package Manager usually sees way more dependencies

10:59.580 --> 11:07.060
than the actual runtime or the compiler uses,

11:07.060 --> 11:08.700
because there are a lot of

11:08.700 --> 11:10.540
transitive dependencies for which we don't have

11:10.540 --> 11:12.260
any reachability path to them.

11:12.260 --> 11:13.820
So when we start from the client,

11:13.820 --> 11:16.980
there is no path, calling path from the client into

11:16.980 --> 11:21.180
the actual transitive dependency.

11:21.180 --> 11:25.580
So usually what we have found also in the company is that,

11:25.580 --> 11:27.540
from all the source code that is being

11:27.540 --> 11:30.100
imported into a repository,

11:30.100 --> 11:31.900
which is around 80 percent of the code

11:31.900 --> 11:34.620
that on an average repository is imported,

11:34.620 --> 11:38.260
around 15 to 30 percent is actually

11:38.300 --> 11:42.580
being used. So there's a lot of codes that we import.

11:42.580 --> 11:46.340
It perhaps forms an attack surface that's never been used.

11:46.340 --> 11:49.180
It would be very nice to clean this up.

11:49.180 --> 11:53.300
Yes. One way to do that is with

11:53.300 --> 11:54.780
reachability but that's not my talk.

11:54.780 --> 11:55.860
That's another talk.

11:55.860 --> 12:01.860
Okay. So how can we identify

12:01.860 --> 12:06.740
a fun dependencies and do this type of cleanup?

12:06.740 --> 12:09.660
We need to do program analysis.

12:09.660 --> 12:13.180
Any idea what program analysis is?

12:13.180 --> 12:16.380
Yes? Some people might have seen that.

12:16.380 --> 12:18.020
It is. No, it's not parsing.

12:18.020 --> 12:20.980
It's not parsing. It's like one component of program analysis.

12:20.980 --> 12:25.220
The first step in the whole program analysis chain.

12:25.220 --> 12:29.660
Sorry?

12:29.660 --> 12:31.900
I disagree with your first bullet.

12:31.900 --> 12:34.820
The source of truth is the source code?

12:34.820 --> 12:36.100
Yes. It is not?

12:36.100 --> 12:38.020
Could it be part of us,

12:38.020 --> 12:40.020
C programming project or

12:40.020 --> 12:42.980
the biggest thing in JavaScript to pull in dynamic code or

12:42.980 --> 12:45.700
anything written in list for code and data of the same?

12:45.700 --> 12:48.620
So I love the optimism of

12:48.620 --> 12:50.420
the source code understand with dependency graph.

12:50.420 --> 12:52.260
It's actually the binary.

12:52.260 --> 12:53.980
Could be true. Yes.

12:53.980 --> 12:55.300
For languages that have binaries,

12:55.300 --> 12:57.220
for languages that have source code,

12:57.220 --> 12:58.700
that are source code executable,

12:58.700 --> 13:01.260
the source code is the truth. Right?

13:01.260 --> 13:01.780
No?

13:01.780 --> 13:03.300
I agree with nature of source code and data,

13:03.300 --> 13:04.820
especially when we move into data.

13:04.820 --> 13:09.020
When we're talking about why are we doing the program analysis,

13:09.020 --> 13:12.220
we try to understand what we're bringing into the net.

13:12.220 --> 13:15.060
So let's stop now and then we have to get back.

13:15.060 --> 13:19.060
Yes. I agree and disagree.

13:19.060 --> 13:23.060
We need to start with program analysis,

13:23.060 --> 13:26.460
and program analysis starts necessarily on the source code.

13:26.460 --> 13:30.780
So perhaps this formulation here is not precise,

13:30.780 --> 13:34.780
but it is something we can work on hopefully.

13:35.780 --> 13:39.500
So why do we need proper program analysis?

13:39.500 --> 13:41.820
I mean, somebody could say, well, yes.

13:41.820 --> 13:46.180
If I track all the imports in my Python code,

13:46.180 --> 13:48.660
it will be easy to identify all the libraries.

13:48.660 --> 13:50.540
So it's easy. I'm just going to write

13:50.540 --> 13:56.180
a Perl script or Python script those days to take

13:56.180 --> 14:00.780
the imports and try to find what libraries have those imports.

14:00.780 --> 14:04.760
This is perhaps hopefully comprehensive,

14:04.760 --> 14:06.920
way of doing importing in Python.

14:06.920 --> 14:10.000
You can import a module, a function from a module,

14:10.000 --> 14:11.660
all functions in a module,

14:11.660 --> 14:14.480
and alias a module to a different name,

14:14.480 --> 14:17.080
a packets, static import,

14:17.080 --> 14:19.880
a relative import in the source code,

14:19.880 --> 14:21.720
using the import leap,

14:21.720 --> 14:25.720
in which case you can also rename the import leap.

14:25.720 --> 14:28.840
So you can alias basically the import leap and that you need

14:28.840 --> 14:31.860
to de-alias it in order to be able to track this,

14:31.860 --> 14:36.240
and you can even basically do an evil, an import code.

14:36.240 --> 14:38.860
Good luck doing that with a Python script.

14:38.860 --> 14:39.860
So we need-

14:39.860 --> 14:42.220
No, the code may be inside it.

14:42.220 --> 14:44.780
Exactly. That's my next point.

14:44.780 --> 14:46.660
Sorry.

14:46.660 --> 14:51.220
Exactly. All those things can be in a conditional statement.

14:51.220 --> 14:54.740
You can have a try import for otherwise import bar,

14:54.740 --> 14:59.100
or you can do a new condition on some variable,

14:59.100 --> 15:01.580
and then import the custom library.

15:02.580 --> 15:05.500
Those are the reasons for why we need

15:05.500 --> 15:07.820
a proper program analysis to do that.

15:07.820 --> 15:15.260
Okay. So the steps that we have taken to solve this problem,

15:15.260 --> 15:20.900
first of all, we need to start with the source code.

15:20.900 --> 15:24.900
Okay. We start, let's say, with the client code,

15:25.220 --> 15:28.060
and for each file in the client code,

15:28.060 --> 15:31.260
we follow all the imports.

15:31.620 --> 15:33.500
How can we follow all the imports?

15:33.500 --> 15:37.100
We first need to have analyzed the program,

15:37.100 --> 15:40.100
the client code, and the virtual environment,

15:40.100 --> 15:45.820
and the site packages that come with the operating system.

15:45.820 --> 15:50.900
Basically, all locations from which Python can tell you

15:50.900 --> 15:52.420
where it can find code.

15:52.420 --> 15:54.540
So if you open the Python interpreter and you

15:54.540 --> 15:57.780
configure it with a particular virtual environment,

15:57.780 --> 15:59.580
for example, you can ask it,

15:59.580 --> 16:01.300
please give me all locations where I can find

16:01.300 --> 16:03.620
code for this particular execution.

16:03.620 --> 16:05.940
Okay. So we start with that.

16:05.940 --> 16:10.460
After we have analyzed the map everything,

16:10.460 --> 16:12.940
we can start then from the client code

16:12.940 --> 16:15.460
and do case by case import analysis.

16:15.460 --> 16:17.420
So I import this particular library,

16:17.420 --> 16:20.940
I go into the file that is into the module basically,

16:20.940 --> 16:24.460
that creates this particular library,

16:24.460 --> 16:27.540
look at it, see its imports,

16:27.540 --> 16:29.100
and go, let's say,

16:29.100 --> 16:33.700
transitively until the whole thing has been exhausted.

16:33.700 --> 16:36.700
This is being done for a bunch of

16:36.700 --> 16:39.580
when they're doing the bills for resolving dependencies.

16:39.580 --> 16:41.180
Did you leverage that code?

16:41.180 --> 16:41.900
No.

16:41.900 --> 16:43.700
Okay.

16:44.300 --> 16:47.420
Repeat the question for the audience, sorry.

16:47.420 --> 16:54.020
The question was that this analysis has been done before,

16:54.020 --> 16:55.380
did we reuse the analysis?

16:55.380 --> 16:56.420
The answer was no.

16:56.420 --> 16:57.420
Thanks.

17:02.300 --> 17:06.940
Okay. Now how to do program analysis in Python?

17:06.940 --> 17:09.500
As I said, you need to have resolved

17:09.500 --> 17:11.580
past everything to begin with,

17:11.580 --> 17:13.420
resolve the types for everything.

17:13.420 --> 17:15.140
If you have type information,

17:15.140 --> 17:17.660
it's way more precise because you can track

17:17.660 --> 17:21.140
basically specific function calls onto types.

17:21.420 --> 17:28.300
Then you can also take into account one of

17:28.300 --> 17:32.820
the existing static type checkers,

17:32.820 --> 17:34.340
like mypy or pywrite,

17:34.340 --> 17:36.260
we're using pywrite for that matter,

17:36.260 --> 17:43.020
to basically parse the code and do all the resolution.

17:43.260 --> 17:47.700
Okay. So it's not extremely hard to do,

17:47.700 --> 17:50.900
but you need to be aware that it needs to be done.

17:51.900 --> 17:54.620
I will show you the results,

17:54.620 --> 17:56.860
hopefully of the scan.

17:56.860 --> 17:59.860
Yes, the scan has finished just in time.

17:59.860 --> 18:03.260
As you can see before, we had 11 differences.

18:03.260 --> 18:07.580
Now by doing this fandom dependency discovery,

18:07.580 --> 18:10.020
we have found 51.

18:10.820 --> 18:17.060
According to our findings tooling here,

18:17.060 --> 18:20.740
what we can see is that in one of those differences,

18:21.380 --> 18:24.820
we found an actual vulnerability.

18:24.820 --> 18:28.220
It's of course in setup tools,

18:28.220 --> 18:30.260
so it's not necessarily something that can be

18:30.260 --> 18:32.140
actively exploited,

18:32.140 --> 18:33.540
but it can be exploited while

18:33.540 --> 18:36.260
the packets has been installing.

18:36.260 --> 18:39.300
So what we have found is that there is

18:39.300 --> 18:42.180
this vulnerability and this is a call chain,

18:42.180 --> 18:44.580
let's say, but goes from the client source code

18:44.580 --> 18:47.740
into the vulnerable code.

18:47.780 --> 18:51.020
If I didn't do this analysis,

18:51.020 --> 18:55.700
I wouldn't be able to track this or do anything with this.

18:55.700 --> 18:59.580
I mean, this would be information that I wouldn't know.

18:59.580 --> 19:03.820
Of course, this is a trivial example that we're using for demos.

19:03.820 --> 19:06.420
We have found actual vulnerabilities when

19:06.420 --> 19:09.900
running this analysis from clients that I cannot disclose.

19:09.900 --> 19:13.900
But this at least to me gives an indication of

19:13.900 --> 19:16.260
how this fandom dependency problem can be

19:16.260 --> 19:20.620
tracked and solved hopefully with program analysis.

19:23.820 --> 19:27.300
After that, everybody wins.

19:27.300 --> 19:32.300
Developers can know what is vulnerable to their code.

19:32.300 --> 19:34.620
They can accurately map and create

19:34.620 --> 19:38.340
accurate S-bombs on what their application is consuming.

19:38.340 --> 19:42.100
CISOs can be aware that their vulnerabilities there

19:42.100 --> 19:46.020
that otherwise they might not have been aware of.

19:46.380 --> 19:51.020
So everybody wins. That's it. Thank you.

19:51.020 --> 19:52.020
Thank you.

19:52.020 --> 19:56.020
Yes.

19:56.020 --> 20:01.020
Yes. I'm going to go first.

20:01.020 --> 20:05.020
So yeah, great insights on Python and I'm a Python developer.

20:05.020 --> 20:09.020
So I know at least about the majority of these things.

20:09.020 --> 20:11.020
But the tricky thing is,

20:11.020 --> 20:15.020
I mean here you are talking to the people who are interested in S-bombs.

20:15.020 --> 20:17.020
How do we spread the information?

20:17.020 --> 20:21.020
How do we get all the open source communities to know about all these issues?

20:21.020 --> 20:25.020
How do we make them publishing their S-bombs?

20:25.020 --> 20:33.020
This is, your stuff is important but making all the communities aware of this is more important.

20:33.020 --> 20:38.020
Yes. This is part of why we're giving these talks so that we make the community.

20:38.020 --> 20:39.020
Yes. Excuse me.

20:39.020 --> 20:44.020
So the question is how can we make the communities aware of the problems that

20:44.020 --> 20:50.020
I have been describing and my answer to that is this is part of this effort.

20:50.020 --> 20:54.020
We're trying to make the communities aware that those problems exist.

20:54.020 --> 21:00.020
The tooling that I have described, it might sound, let's say, extremely complicated and whatnot.

21:00.020 --> 21:04.020
But if you're using, I can actually show you it running.

21:04.020 --> 21:08.020
So it is, I have it here.

21:08.020 --> 21:12.020
So this is our basically analysis tool.

21:12.020 --> 21:20.020
This is closed source at the moment but it can easily be re-implemented, I think.

21:20.020 --> 21:27.020
If you ask me, I can re-implemented it in like a couple of days but perhaps somebody else could re-implemented it a bit faster.

21:27.020 --> 21:35.020
As you can see, it just goes over, transitively, over all the code that is available to this particular project.

21:35.020 --> 21:37.020
Yes. No, there was a question.

21:37.020 --> 21:39.020
You've answered the question because I said, is this open source?

21:39.020 --> 21:41.020
No, it's not open source. Sorry.

21:41.020 --> 21:45.020
What you've done actually is a great benefit to the whole of the open source community.

21:45.020 --> 21:50.020
So if you maybe could describe the architecture you've drawn and the algorithm,

21:50.020 --> 21:53.020
then we're sure the community will then jump on and do the different projects.

21:53.020 --> 21:57.020
So is that something you could share with the community?

21:57.020 --> 22:00.020
We need to think about that, yes.

22:00.020 --> 22:03.020
I mean, the question again was whether this is open source.

22:03.020 --> 22:06.020
The answer is we need to think about this as a company.

22:07.020 --> 22:11.020
Yeah, I don't know is the answer. Yes.

22:11.020 --> 22:19.020
Are you scanning for Python binary dependencies as well because TensorFlow, for example, includes FFMPEG?

22:19.020 --> 22:28.020
So this requires, I mean, the question is whether we are actually considering the binary dependencies into Python packages in the wheels, for example.

22:28.020 --> 22:31.020
The answer is not but not yet.

22:32.020 --> 22:36.020
So we are trying to get into cross-language analysis.

22:36.020 --> 22:44.020
This assumes modeling basically of the interface between Python and the native library.

22:44.020 --> 22:47.020
We're getting there.

22:56.020 --> 22:58.020
Yes.

22:59.020 --> 23:06.020
We're doing static, the question is again, we're doing static analysis and static analysis has false positives.

23:06.020 --> 23:08.020
How can we prevent those false positives?

23:08.020 --> 23:18.020
In this particular case, this analysis that we do doesn't have false positives because it is basically only considering imports.

23:18.020 --> 23:23.020
False positives and static analysis come from the fact that, for example, you have a virtual dispatch call site.

23:23.020 --> 23:27.020
You might be linking to multiple implementations of particular interface, for example.

23:27.020 --> 23:31.020
In which case, you might be basically over-linking.

23:31.020 --> 23:34.020
We're not doing this at all here.

23:34.020 --> 23:35.020
Sorry?

23:35.020 --> 23:36.020
Where do we have false negatives too?

23:36.020 --> 23:41.020
False negatives, we cannot have false negatives here because we are considering the source code as ground truth,

23:41.020 --> 23:48.020
which means that we don't basically everything that is in the source code will be parsed and reported.

23:48.020 --> 23:50.020
Except for eval.

23:50.020 --> 23:51.020
Sorry?

23:52.020 --> 23:54.020
Except for eval.

23:56.020 --> 23:58.020
Except for eval.

24:02.020 --> 24:04.020
Eval is eval, yes.

24:07.020 --> 24:08.020
Right.

24:08.020 --> 24:10.020
Final question?

24:10.020 --> 24:14.020
Interesting, some method that tracks the imports.

24:14.020 --> 24:22.020
Well, what if there is an imported module that one function is using but is not reachable from the main code?

24:22.020 --> 24:24.020
It's kind of...

24:24.020 --> 24:28.020
If you're analyzing an imported module, it's not being called.

24:28.020 --> 24:31.020
I don't see what the problem is.

24:31.020 --> 24:33.020
As you mentioned, there are false positives.

24:33.020 --> 24:40.020
But if there is a file which is not imported and it's by a function, it's not being called.

24:40.020 --> 24:44.020
Yes, we will still analyze it because it has an import.

24:44.020 --> 24:46.020
It's not being called, right?

24:46.020 --> 24:48.020
We have some helper problems.

24:48.020 --> 24:51.020
It's never being called.

24:51.020 --> 24:55.020
It will be checked as a risk and it's a risk.

24:55.020 --> 24:58.020
If it's not being called...

24:58.020 --> 24:59.020
So, sorry.

24:59.020 --> 25:01.020
Excuse me, Alex.

25:01.020 --> 25:05.020
So the question is what will happen if I understand correctly?

25:05.020 --> 25:11.020
If we have a file that has an import in a function that's never been called.

25:11.020 --> 25:17.020
Yes, we will not analyze this because first we consider the call graph of the whole thing.

25:20.020 --> 25:22.020
Thank you again, Jordan.

25:35.020 --> 25:38.020
Thank you.

