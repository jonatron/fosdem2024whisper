WEBVTT

00:00.000 --> 00:07.000
So, we can start with the next presentation.

00:07.000 --> 00:09.000
Right pronunciation.

00:09.000 --> 00:11.000
That's right.

00:11.000 --> 00:18.000
We will talk about the rough libraries, public transport, so the stage is yours.

00:18.000 --> 00:25.000
Yeah, hello. Thank you. And I want to thank you, the people before, because Transmodel

00:25.000 --> 00:32.000
helped a lot to make like a nice model of how transit should be called, what's the stop

00:32.000 --> 00:38.000
point, stop area, a trip. So, if you ever work with public transit, read the Transmodel model.

00:38.000 --> 00:44.000
It helps a lot just to make things clear. And also, OpenTrip planner works quite well.

00:44.000 --> 00:49.000
We've been experimenting recently using it in whole France, so it's a bit bigger than Norway,

00:50.000 --> 00:56.000
and it seems to be working, so they do some nice things when we have to talk afterwards.

00:56.000 --> 01:03.000
So, I'm talking about the very other extreme end of public transit data. So, some very small tools

01:03.000 --> 01:10.000
and libraries to manipulate this data. And it's in Rust, because, well, if you're handling

01:10.000 --> 01:18.000
a few gigabytes of data and want real-time data, Rust might be an option, and that's what we've done.

01:18.000 --> 01:27.000
And, yeah. So, we are a very open and informal organization. So, in GitHub, it's Rust Transit,

01:27.000 --> 01:34.000
and we want to make some lot of small breaks just to get started using public transit data,

01:34.000 --> 01:41.000
and then you can do whatever you want to do. So, it's not very formal. We have no status,

01:41.000 --> 01:46.000
nothing, and it's just focused on implementing things. So, gradually adding more implementation

01:46.000 --> 01:52.000
and getting more things working. And this presentation is kind of a call saying,

01:52.000 --> 01:58.000
we're looking for some projects to add to it and maintain us, and maybe some people will say,

01:58.000 --> 02:03.000
okay, I have this very specific need, come and see us and let's talk.

02:03.000 --> 02:09.000
Right now, it's mostly, but that only maintained by voluntary in a cooperative where I work,

02:09.000 --> 02:15.000
which is called Coup de l'Hon libertÃ©, and there's a colleague over there who can also answer your questions.

02:17.000 --> 02:25.000
So, the first one is GTFS structures. So, the most important part, the biggest one,

02:25.000 --> 02:29.000
so I will be spending a lot of time on it, and the other breaks are a bit smaller.

02:29.000 --> 02:40.000
So, GTFS, I was told before, is the fact of the standard used to publish static transit data.

02:40.000 --> 02:47.000
So, what time will the bus run next week? And at what stops it will stop and so on.

02:47.000 --> 02:55.000
So, we started initially for our own project as defining the types in Rust, so the structs and so on.

02:55.000 --> 03:02.000
And for those who do work with Rust, it's basically just baking third serialization and serialization annotations.

03:02.000 --> 03:07.000
And with the time going on, we added some sugar, like reading directly from an URL,

03:07.000 --> 03:13.000
which was a common need because, let's say, no way publish it on this website,

03:13.000 --> 03:16.000
and we just downloaded and have the data immediately.

03:16.000 --> 03:20.000
We started making some integrity checks because it's just plain CSV files,

03:20.000 --> 03:26.000
so identifiers might not reference data that doesn't exist, so we added those checks.

03:26.000 --> 03:32.000
And we tried to make it easier to access the data from one object to another.

03:33.000 --> 03:40.000
I want to mention one alternative, which is Transit Model, which is made by a French company

03:40.000 --> 03:46.000
who is now called HOD, which was used to be called Kizio Digital and which was used to be called CanalTP,

03:46.000 --> 03:50.000
depending how old you are in the transit world.

03:50.000 --> 03:56.000
It's an AGPL, so it's a library, as AGPL, so it might be a problem.

03:57.000 --> 04:03.000
It does much more things like file conversion, is able to convert GTFS to netx and other way around.

04:03.000 --> 04:09.000
It has very nice query functions, like tell me all the lines that go through this point.

04:09.000 --> 04:15.000
But it's a bit more complex to use. It's mostly done for the own tools, so it's not always very documented

04:15.000 --> 04:18.000
and you have to read to know how it works to get it working.

04:18.000 --> 04:23.000
And in a perfect world, it would be based on GTF structures.

04:24.000 --> 04:29.000
So we start discussing with them, but it break too many little things on their end

04:29.000 --> 04:35.000
and they didn't want to bother, just say, it's work for us, don't bother with it.

04:38.000 --> 04:47.000
So some user examples are TrontoValidator, which is done for the French National Access Point,

04:47.000 --> 04:57.000
what they were talking before. So the transport.data.gov.fr has a validator that checks that every GTFS file is valid.

04:57.000 --> 05:04.000
It doesn't have buses that go over the speed of light, sorry, and things like that.

05:04.000 --> 05:08.000
So it's based on GTFS structures.

05:10.000 --> 05:14.000
It has also some own tool with the GTFS to geogesan.

05:14.000 --> 05:21.000
Some people just didn't care about the timetable, so they take a file of timetables and just extract the topology of the network.

05:21.000 --> 05:28.000
And another project is Ketrin Maps, which is kind of a big student project in American California, I think, from a university,

05:28.000 --> 05:33.000
which are trying to make a whole system and they're contributing a lot.

05:33.000 --> 05:42.000
So it's a very small vanity metric. We have like 15 contributors, which is a lot and small for a project that's not really publicized.

05:43.000 --> 05:47.000
And we have regular people just happen to use it and make some contribution.

05:47.000 --> 05:51.000
So it's living on a small pace, but it works.

05:55.000 --> 06:00.000
So we had, what was also to say is quite performant.

06:00.000 --> 06:05.000
We tried to find the biggest GTFS that is there on the wild and apparently is the German one.

06:05.000 --> 06:12.000
So there are 600,000 stop points in Germany, at least in the GTFS files.

06:12.000 --> 06:14.000
There are one million trips.

06:14.000 --> 06:19.000
A trip is a bus doing his route, and if the bus runs 10 times a day, it's 10 trips.

06:20.000 --> 06:22.000
32,000 stop points.

06:23.000 --> 06:30.000
So it's quite a big file and just to get everything read from the GTFS file to everything in memory,

06:30.000 --> 06:34.000
it takes about 16 seconds on this laptop, whatever it means.

06:35.000 --> 06:37.000
It takes about 5 gigabit of RAM.

06:37.000 --> 06:46.000
It means you can handle the whole data of Germany on your laptop or on a reasonable, affordable server.

06:46.000 --> 06:48.000
It's also quite robust.

06:48.000 --> 06:58.000
As I said, every file in transport data GovFR, which is a national access point, is passed using GTFS structures.

06:58.000 --> 07:05.000
It has data that comes from a lot of different editors and vendors, which are present all around the world.

07:05.000 --> 07:12.000
So we kind of work through all the quirks of all the weird things that people do.

07:12.000 --> 07:15.000
Like in GTFS, you're allowed not to put the trading commas.

07:15.000 --> 07:20.000
So if you have 10 columns in the CSV file and have data just in the first two columns,

07:20.000 --> 07:23.000
you can just put one comma and leave everything empty at the end.

07:23.000 --> 07:26.000
It's all the kind of things you went through.

07:29.000 --> 07:34.000
And I'm using this as a side note, as I have an audience that might be interested.

07:34.000 --> 07:36.000
Oh, sorry.

07:37.000 --> 07:41.000
The GTFS file was created as a dump of a database.

07:41.000 --> 07:49.000
Just dump all the tables, put the CSV file, bundle them in the zip file, which is a horrible thing to do.

07:49.000 --> 07:54.000
It's nice to exchange with your colleague as a one-off time, but not to make a standard.

07:55.000 --> 08:01.000
So in the future, if you ever work with this kind of things, don't make zips of CSV files, please.

08:01.000 --> 08:05.000
Let's use, for example, a SQLite database.

08:05.000 --> 08:09.000
You can have a schema, so you'll be sure that the data will be respect,

08:09.000 --> 08:12.000
and into there will be an integer, a Boolean will be a Boolean, and so on.

08:12.000 --> 08:16.000
You have foreign keys, so you won't have wrong references.

08:16.000 --> 08:18.000
You have typed columns.

08:18.000 --> 08:23.000
You have indexes, so you open the file and you can have fast queries immediately for free.

08:23.000 --> 08:25.000
You have a crying languages integrated.

08:25.000 --> 08:26.000
You just download, open it.

08:26.000 --> 08:28.000
You can already make some statistics.

08:28.000 --> 08:30.000
And you have kind of fun things.

08:30.000 --> 08:33.000
You can put everything on an S3 server and make HTTP range requests.

08:33.000 --> 08:38.000
You don't even have to download the whole gigabyte of file, just 10 megs, and you have all the data you need.

08:38.000 --> 08:41.000
So, yeah, this was a thing.

08:41.000 --> 08:46.000
Think about how you materialize your data at the end, because people will use it,

08:46.000 --> 08:51.000
and it will bring a lot of pain if you don't think about the serialization of your data.

08:53.000 --> 09:01.000
Okay, that's done about GTS structure, which was clearly the biggest part, and now some smaller projects.

09:01.000 --> 09:07.000
One crate, so crate is a package in the Rust world, is Serialite.

09:07.000 --> 09:14.000
So, as you told before, Serialite is a standard, it's a norm in Europe for real-time data,

09:14.000 --> 09:21.000
and Serialite is kind of a more simpler version to use.

09:21.000 --> 09:26.000
I think it's open to heated debates if it should exist or not.

09:26.000 --> 09:33.000
So, Serialite was mostly used as a SOAP interface, so over XML,

09:33.000 --> 09:39.000
and Serialite is the same data, but serialized as JSON and served over REST.

09:39.000 --> 09:49.000
And we used it initially to convert from GTS-RT, so the real-time GTS data to CRI,

09:49.000 --> 09:56.000
for the French National Access Point, to be able to expose the data in the European standard.

09:56.000 --> 10:03.000
And I also worked this small toy project where I read all the French, sorry, not French Parisian,

10:03.000 --> 10:08.000
big Paris area, Ilde-France data, to have some dashboards about real-time of this top

10:08.000 --> 10:11.000
or this metro line on real-time.

10:11.000 --> 10:14.000
So, it works also quite well with some big data.

10:14.000 --> 10:19.000
I mean, Ilde-France is twice as big as Norway, so it works.

10:19.000 --> 10:25.000
I mean, the standards are well done, and we get things working.

10:25.000 --> 10:32.000
Another one, which started really as a toy project, is Wesson for Routing.

10:33.000 --> 10:38.000
When people see OpenStreetMaps, they say, oh, nice, a road network.

10:38.000 --> 10:43.000
Let's implement some Dijkstra algorithm on it, because I want to play around with it.

10:43.000 --> 10:50.000
And if you go into the OpenStreetMap format, you see that it was meant for mapping and not for routing.

10:50.000 --> 10:57.000
And the most simple example is a way, it can be a road that goes around 100 kilometers,

10:57.000 --> 11:01.000
and it doesn't stop at every intersection.

11:01.000 --> 11:05.000
So, if you want to do some routing with that, that's a very bad graph.

11:05.000 --> 11:12.000
So, the idea of this small tool is to cut the graph into a topology,

11:12.000 --> 11:17.000
as we learned as a student, to make some routing algorithm.

11:17.000 --> 11:21.000
So, initially, I made it just for this toy project, was all the roads from,

11:21.000 --> 11:26.000
it's like a tree spanning here from Tokyo to every corner of Japan,

11:26.000 --> 11:31.000
and making this kind of tree-like structure, so it was nothing useful.

11:34.000 --> 11:39.000
So, it's meant to toy around, like the project I told you.

11:39.000 --> 11:44.000
If you want to just try some algorithm because you're a student

11:44.000 --> 11:48.000
and you want to implement on real-world data, it's very nice.

11:48.000 --> 11:52.000
It used also for WessonD.

11:52.000 --> 11:59.000
I think there will be some presentation afterwards, which is the open-source railway designer.

11:59.000 --> 12:02.000
Sorry.

12:02.000 --> 12:05.000
I'm not worried just I'm new.

12:05.000 --> 12:10.000
Yeah, I'm bad with acronyms.

12:10.000 --> 12:15.000
And we want to do the same with railway, and with railway,

12:15.000 --> 12:19.000
there was no tool to do it.

12:19.000 --> 12:26.000
But be aware, don't use it if you want real-life routing on roads for pedestrian for cars.

12:26.000 --> 12:31.000
There are much more better tools and there are tons of constraints

12:31.000 --> 12:36.000
that's not able to handle, like a turn left, a slow as a turn right, and things like that.

12:36.000 --> 12:42.000
So, use OSM for routing for turning around for very specific needs or for learning,

12:42.000 --> 12:45.000
but don't use it for real-life routing algorithm,

12:45.000 --> 12:50.000
and use those very nice open-source tools that exist.

12:50.000 --> 12:55.000
And that's pretty much.

12:55.000 --> 12:57.000
So, thank you.

12:57.000 --> 13:05.000
If you want to say that we're working, everybody wants to work with Rust and transit data.

13:05.000 --> 13:10.000
So, we're quite open. I hope we're friendly.

13:10.000 --> 13:20.000
So, don't hesitate to contact us and let's slowly grow the space of Toolbox for your needs.

13:41.000 --> 13:47.000
I saw a Chinese screenshot of the departure port.

13:47.000 --> 13:51.000
Are you planning on also integrated outside of Europe?

13:51.000 --> 13:58.000
Well, this was just a creative comment from Wikimedia picture.

13:58.000 --> 14:03.000
In series, we are not specific to any region.

14:03.000 --> 14:07.000
I mean, GTFS and Siri might be used anywhere.

14:08.000 --> 14:14.000
While GTFS is quite used all over the world, and they take more European,

14:14.000 --> 14:20.000
I think Siri has gained some traction around the world because it's more usable than the GTFS RT part,

14:20.000 --> 14:25.000
which is very focused, very big infrastructures and not always used.

14:25.000 --> 14:28.000
So, maybe it's possible.

14:28.000 --> 14:38.000
More like an information, you might be happy that Siri Lite has been fully approved.

14:38.000 --> 14:44.000
So, it's not kind of like a French version of Siri on the side,

14:44.000 --> 14:49.000
because Interforce Mobility asked for it.

14:49.000 --> 14:51.000
Okay. Thank you.

14:51.000 --> 14:54.000
That's a nice approach about all this transport.

14:54.000 --> 14:58.000
It's like making words vocabulary and being agreed on what this word means.

14:58.000 --> 15:02.000
It makes it easier to cross boundaries or formats and things like that.

15:02.000 --> 15:07.000
But it's always a bit tricky, but nice to hear.

15:07.000 --> 15:11.000
How far away is Rust in the transit industry?

15:11.000 --> 15:15.000
Like, there's another project, the transit model. Is that also Rust-based?

15:15.000 --> 15:17.000
Yeah, Transponder is Rust-based, yes.

15:17.000 --> 15:22.000
And it's used for...

15:22.000 --> 15:32.000
Huff makes a routing algorithm, which is called Devisia, which is heavily used in France.

15:32.000 --> 15:36.000
So, which is written mostly in Rust nowadays.

15:36.000 --> 15:42.000
It started as C++, well, it started as Delphi, but that's a long time ago.

15:42.000 --> 15:50.000
So, it's actually used, yes.

15:50.000 --> 15:52.000
Okay, thank you very much.

15:52.000 --> 15:54.000
Thank you very much.

16:12.000 --> 16:17.000
Thank you.

