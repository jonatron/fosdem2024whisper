WEBVTT

00:00.000 --> 00:17.000
So like the 13 instances of this bedroom and by this I am over to our particular class.

00:17.000 --> 00:20.000
Can you hear me?

00:20.000 --> 00:26.000
Can you hear me?

00:26.000 --> 00:29.000
Okay.

00:29.000 --> 00:35.000
Hi everyone and thanks for being here. It's great to be able to speak here.

00:35.000 --> 00:49.000
So I'm Alex and this is my presentation on some very high level and pretty speculative ideas I've had for how we could use microcranels in like to do different systems and to host websites.

00:49.000 --> 00:58.000
So I'm part of an association which is called Duffler and if it works at Duffler we have some infrastructure which looks like this.

00:58.000 --> 01:03.000
So we have some very low powered computers like this one which are hosted at home.

01:03.000 --> 01:08.000
So at home of course we have possible issues like power going down or internet being cut.

01:08.000 --> 01:11.000
So we have some machines at different locations in Belgium and France.

01:11.000 --> 01:20.000
And the idea is okay we have this infrastructure which is like pretty fragile but maybe we can just put all these notes together and build this system.

01:20.000 --> 01:22.000
And this is actually what the Duffler infrastructure is doing.

01:22.000 --> 01:30.000
We have email, we have websites, we have instant messaging and a few other things running on these very basic machines.

01:30.000 --> 01:36.000
So currently our infrastructure looks something like this.

01:36.000 --> 01:45.000
So the idea is not to spend too much time to enter into the details of this but basically on the right end here we have the actual applications that we're interested in running.

01:45.000 --> 01:53.000
So for instance we have an element for chat, we have Jitsi for video conferencing, Crippad, other things.

01:53.000 --> 01:58.000
And to run all these applications we need this whole huge stack currently.

01:58.000 --> 02:04.000
So it's based on a Linux OS and MixOS for declarative configuration.

02:04.000 --> 02:09.000
And then we have this platform stack here which is based on an orchestrator which is called Nomad which we use.

02:09.000 --> 02:14.000
It's a bit like Kubernetes but a bit simpler and I'd say probably easier to use.

02:14.000 --> 02:17.000
But still we have all these different components which are basically...

02:34.000 --> 02:39.000
... storage systems.

02:39.000 --> 02:41.000
GARZ is one that I'm building myself.

02:41.000 --> 02:45.000
And we basically pull these...

02:58.000 --> 02:59.000
... software.

02:59.000 --> 03:06.000
And if we look more closely in what's happening on a single node, actually it's kind of a huge mess.

03:06.000 --> 03:11.000
So like this is the operating system running on one of these...

03:29.000 --> 03:32.000
Here we have all these management tools.

04:00.000 --> 04:03.000
Things that are...

04:14.000 --> 04:18.000
So yeah, from a conceptual point of view, this really systems like...

04:18.000 --> 04:23.000
... to enter into too much detail.

04:23.000 --> 04:30.000
Let's say for instance we have here internet traffic coming to our server to request some information.

04:30.000 --> 04:35.000
It's going to traverse a reverse proxy which is going to do TLS encapsulation.

04:35.000 --> 04:43.000
Then it's going to go through an HTTP link to the actual backend which is going to talk to with specialized protocols to the storage layer.

04:43.000 --> 04:50.000
And basically we can describe all of these things with boxes and arrows connecting these boxes.

04:50.000 --> 04:59.000
So the idea is that actually this model of boxes and arrows is the model of micro kernels.

04:59.000 --> 05:04.000
Boxes are...

05:13.000 --> 05:16.000
...

05:16.000 --> 05:19.000
...

05:37.000 --> 05:42.000
... memory between different processes sharing the CPU time.

05:42.000 --> 05:45.000
And also controlling hardware access.

05:45.000 --> 05:49.000
So this is like fundamental thing that only the kernel can do.

05:49.000 --> 05:54.000
Separate the resources of the computer at the CPU level between different things that are going on.

05:54.000 --> 06:02.000
And then the micro kernel will also provide some IPC mechanisms like message passing or shared memory.

06:02.000 --> 06:06.000
So...

06:06.000 --> 06:10.000
...

06:10.000 --> 06:14.000
...

06:14.000 --> 06:18.000
...

06:18.000 --> 06:22.000
...

06:22.000 --> 06:26.000
...

06:26.000 --> 06:30.000
...

06:30.000 --> 06:35.000
...

06:35.000 --> 06:40.000
...

06:40.000 --> 06:45.000
...

06:45.000 --> 06:50.000
...

06:50.000 --> 06:55.000
...

06:55.000 --> 07:00.000
...

07:00.000 --> 07:05.000
...

07:05.000 --> 07:10.000
...

07:10.000 --> 07:15.000
...

07:15.000 --> 07:20.000
...

07:20.000 --> 07:25.000
...

07:25.000 --> 07:30.000
...

07:30.000 --> 07:35.000
...

07:35.000 --> 07:40.000
...

07:40.000 --> 07:45.000
...

07:45.000 --> 07:50.000
...

07:50.000 --> 07:55.000
...

07:55.000 --> 08:00.000
...

08:00.000 --> 08:05.000
...

08:05.000 --> 08:10.000
...

08:10.000 --> 08:15.000
...

08:15.000 --> 08:20.000
...

08:20.000 --> 08:25.000
...

08:25.000 --> 08:30.000
...

08:30.000 --> 08:35.000
...

08:35.000 --> 08:40.000
...

08:40.000 --> 08:45.000
...

08:45.000 --> 08:48.000
...

08:48.000 --> 08:51.000
...

08:51.000 --> 08:55.000
...

08:55.000 --> 09:00.000
...

09:00.000 --> 09:05.000
...

09:05.000 --> 09:10.000
...

09:10.000 --> 09:15.000
...

09:15.000 --> 09:20.000
...

09:20.000 --> 09:25.000
...

09:25.000 --> 09:30.000
...

09:30.000 --> 09:35.000
...

09:35.000 --> 09:38.000
...

09:38.000 --> 09:43.000
...

09:43.000 --> 09:48.000
...

09:48.000 --> 09:52.000
...

09:52.000 --> 09:57.000
...

09:57.000 --> 10:02.000
...

10:02.000 --> 10:07.000
...

10:07.000 --> 10:12.000
...

10:12.000 --> 10:17.000
...

10:17.000 --> 10:22.000
...

10:22.000 --> 10:27.000
...

10:27.000 --> 10:30.000
...

10:30.000 --> 10:33.000
...

10:33.000 --> 10:37.000
...

10:37.000 --> 10:41.000
...

10:41.000 --> 10:45.000
...

10:45.000 --> 10:50.000
...

10:50.000 --> 10:55.000
...

10:55.000 --> 10:58.000
...

10:58.000 --> 11:03.000
...

11:03.000 --> 11:07.000
...

11:07.000 --> 11:11.000
...

11:11.000 --> 11:16.000
...

11:16.000 --> 11:21.000
...

11:21.000 --> 11:26.000
...

11:26.000 --> 11:31.000
...

11:31.000 --> 11:36.000
...

11:36.000 --> 11:41.000
...

11:41.000 --> 11:46.000
...

11:46.000 --> 11:51.000
...

11:51.000 --> 11:56.000
...

11:56.000 --> 12:01.000
...

12:01.000 --> 12:06.000
...

12:06.000 --> 12:11.000
...

12:11.000 --> 12:15.000
...

12:15.000 --> 12:20.000
...

12:20.000 --> 12:23.000
...

12:23.000 --> 12:27.000
...

12:27.000 --> 12:31.000
...

12:31.000 --> 12:35.000
...

12:35.000 --> 12:39.000
...

12:39.000 --> 12:43.000
...

12:43.000 --> 12:47.000
...

12:47.000 --> 12:51.000
...

12:51.000 --> 12:55.000
...

12:55.000 --> 12:58.000
...

12:58.000 --> 13:01.000
...

13:01.000 --> 13:05.000
...

13:05.000 --> 13:08.000
...

13:08.000 --> 13:13.000
...

13:13.000 --> 13:16.000
...

13:16.000 --> 13:19.000
...

13:19.000 --> 13:22.000
...

13:22.000 --> 13:27.000
...

13:27.000 --> 13:32.000
...

13:32.000 --> 13:37.000
...

13:37.000 --> 13:41.000
...

13:41.000 --> 13:44.000
...

13:44.000 --> 13:48.000
...

13:48.000 --> 13:53.000
...

13:53.000 --> 13:58.000
...

13:58.000 --> 14:01.000
...

14:01.000 --> 14:05.000
...

14:05.000 --> 14:09.000
...

14:09.000 --> 14:13.000
...

14:13.000 --> 14:16.000
...

14:16.000 --> 14:19.000
...

14:19.000 --> 14:23.000
...

14:23.000 --> 14:26.000
...

14:26.000 --> 14:29.000
...

14:29.000 --> 14:32.000
...

14:32.000 --> 14:36.000
...

14:36.000 --> 14:37.000
...

14:38.000 --> 14:40.000
...

14:40.000 --> 14:43.000
...

14:43.000 --> 14:54.240
I've made things and connecting things very explicitly only when they.

15:13.000 --> 15:37.000
So this diagram is like what's running on one node, but maybe we can include some form of network transparency to make this more into a distributed.

15:43.000 --> 15:45.000
You

16:13.000 --> 16:37.000
There would be some impact on performance and we also need to be quite careful about that.

16:43.000 --> 17:09.000
Okay, so it's still time for some questions, comments, whatever.

17:09.000 --> 17:22.000
Okay, I might have one question. So the use case should be always the God, the thing that dictates what how the architecture should really look like.

17:22.000 --> 17:33.000
So what do you have in mind in this area, something like safety critical or security critical or really just some average information system?

17:33.000 --> 17:47.000
Yeah, we're doing the association with the facts. I mean security is important because we're handling personal data of people, but I wouldn't say it's a security critical infrastructure per se.

17:47.000 --> 18:01.000
But of course, like, yeah, one of the advantages of such an architecture is like security is easier to like build in a robust way because we have much more control.

18:01.000 --> 18:18.000
Okay, thanks. So so quite natural follow up question. We probably have seen it in this discussion here. So how do you persuade the average guy to buy him? How do you persuade a very guy to stop using their Linux distribution and start using your architecture?

18:18.000 --> 18:32.000
I think this is going to be a very long, long work before we can get to that point. But the hope is that this system is both more robust and easier to use because we like we can get rid of some complexity probably.

18:32.000 --> 18:45.000
And and we can have some. So if we get to a point where there's good tooling around this, and whereas there's a lot of examples which are already already running and it's easy to get your own started, then I think we can really have something that attracts people.

18:45.000 --> 18:48.000
But yeah, of course, it's a long road before we can get to there.

18:49.000 --> 18:52.000
Thank you. Any more questions or comments?

18:56.000 --> 18:58.000
I don't see anything. So thanks for the talk.

