WEBVTT

00:00.000 --> 00:02.000
to introduce the speaker.

00:03.000 --> 00:05.000
Thank you.

00:07.000 --> 00:10.000
Hi, folks. Good afternoon. Welcome to the evening sessions.

00:10.000 --> 00:13.000
I'm going to turn it over to our next speaker, Franzy, to

00:13.000 --> 00:16.000
introduce his set. Just a couple of housekeeping rules if you

00:16.000 --> 00:19.000
could make sure phones, et cetera, are on silent. When you're

00:19.000 --> 00:22.000
taking a seat, they can be loud. Make sure that you do them

00:22.000 --> 00:26.000
gently and try and keep the talking to a minimum. Thank you.

00:26.000 --> 00:30.000
Hello, everyone. I'm Franzy Szek. I'm a product owner of the

00:30.000 --> 00:34.000
packet project. I will use this project as an example during

00:34.000 --> 00:39.000
the talk. Thanks, everyone, for coming. And I would like to

00:39.000 --> 00:44.000
also view things from you so don't sneak out with the doors

00:44.000 --> 00:50.000
behind. When I was thinking about this talk, I was thinking

00:50.000 --> 00:55.000
that if people come here, they already maybe had issues like

00:55.000 --> 01:00.000
me and already were thinking about it. So let's use their

01:00.000 --> 01:05.000
ideas as well and don't just talk for half of an hour and let

01:05.000 --> 01:12.000
them show and share. So I would like you to connect to this

01:12.000 --> 01:20.000
URL or just use menti.com and use this number to just connect

01:20.000 --> 01:24.000
to the slides so you can also provide some feedback for me or

01:24.000 --> 01:29.000
others. I hope it will not break the Wi-Fi or disappear or

01:29.000 --> 01:33.000
something, so we'll see how it goes. And this is an example

01:33.000 --> 01:37.000
question. Thank you for putting the answers there. That's not

01:37.000 --> 01:45.000
only to test it, but also so we know what are you coming from

01:45.000 --> 01:52.000
or what are the, what is your background? So let's give you a

01:52.000 --> 02:03.000
couple of more seconds. Wow, so many, so many. Okay. Yeah, and

02:03.000 --> 02:07.000
also a positive thing is that if you don't see the slides

02:07.000 --> 02:11.000
correctly, you can watch them on the screen and, yeah, sorry

02:11.000 --> 02:16.000
those who wanted to just fix some bugs in the meantime or check

02:16.000 --> 02:20.000
the next session so you need to use the phone or laptop for this.

02:20.000 --> 02:27.000
So sorry about that. Okay, so we'll move on. In the title, there

02:27.000 --> 02:33.000
was two times mentioned stream, but what do I mean by that?

02:33.000 --> 02:39.000
And it's what I mean by that is a stream of code or the program

02:39.000 --> 02:43.000
that comes from up, from the developers, down, down, down to

02:43.000 --> 02:51.000
the users. So that's the stream I have in mind. And you can have

02:51.000 --> 02:56.000
various pieces on the way and anything what goes up to the

02:56.000 --> 03:01.000
developer is an upstream. What goes down to the user is downstream.

03:01.000 --> 03:06.000
So for example, Fedora is a downstream when looking from the

03:06.000 --> 03:10.000
developer point of view or from GitHub, GitHub, but it can be

03:10.000 --> 03:16.000
also an upstream for CentoStream for rel. CentoStream is a downstream

03:16.000 --> 03:21.000
of Fedora but upstream of rel. So depends always from what

03:21.000 --> 03:28.000
place we are looking from. For this talk, when I mentioned upstream,

03:28.000 --> 03:34.000
I mean a Gitforge development, the GitHub, GitLab. By downstream,

03:34.000 --> 03:39.000
I mean some Linux distribution, for example Fedora in my case. I

03:39.000 --> 03:44.000
tried to use upstream developers and downstream maintainers to make it

03:44.000 --> 03:52.000
really clear, but just so you know. So just to check, try to show

03:52.000 --> 03:58.000
others where do you belong? Are you more a maintainer downstream guy

03:58.000 --> 04:03.000
or are you more an upstream developer, maybe curious how you can

04:04.000 --> 04:10.000
get to the distribution. So let's show others how we stand here

04:10.000 --> 04:22.000
and what I'm talking to. So mostly maintainers and if you are both upstream

04:22.000 --> 04:28.000
developer and downstream maintainer, you are somehow in the middle.

04:29.000 --> 04:38.000
Okay, so it's not moving much, so I'll continue. Okay, so let's

04:38.000 --> 04:43.000
back to the package project I mentioned in the title slide. Something

04:43.000 --> 04:51.000
around five years ago with few people around. We were thinking that

04:51.000 --> 04:57.000
we will create a new project and as a goal, we said, hey, let's make

04:57.000 --> 05:02.000
upstream and downstream closer together. So let's provide some downstream

05:02.000 --> 05:08.000
feedback to the development and also for downstream maintainers, let's

05:08.000 --> 05:13.000
provide them some connection to the upstream. For example, when they

05:13.000 --> 05:19.000
release new code in upstream, so let's get it automatically to downstream.

05:19.000 --> 05:25.000
And it was like, yeah, that will be awesome, everyone will be happy.

05:25.000 --> 05:33.000
So we started work on that and few months ago, yeah, we came to the

05:33.000 --> 05:36.000
upstream developers and said, yeah, we have this federal integration for

05:36.000 --> 05:41.000
your project and it's really easy and you will have like new functionality

05:41.000 --> 05:47.000
for your project and can be sure that your code will run.

05:47.000 --> 05:52.000
The feedback wasn't so positive and we were really surprised because, yeah,

05:52.000 --> 05:59.000
we are trying to help you. So what do you think why developers might care

05:59.000 --> 06:05.000
about downstream? Why they might even bother why they shouldn't just live

06:05.000 --> 06:10.000
on GitHub, GitHub website and live their awesome life and don't care about

06:10.000 --> 06:20.000
any distribution at all. So, yeah, hard question. I hope you are typing.

06:20.000 --> 06:26.000
Yeah, availability, software option. Wow, wow, so, for me, articles, okay, yeah,

06:26.000 --> 06:33.000
many, many reasons. Yeah, without distribution, they might have no users.

06:33.000 --> 06:41.000
Yeah, a lot of obvious things. Just to note, after the session, I'll share

06:41.000 --> 06:46.000
the results with you so maybe I'll also set up some blog posts but you will

06:46.000 --> 06:52.000
have it attached and, yeah, wow, so many things. It looks like it makes sense

06:52.000 --> 07:00.000
to care about downstream. So just a couple more seconds. Yeah, people,

07:00.000 --> 07:13.000
shitty tools, yeah, revenue maybe also. Yeah, sometimes there is a middleman

07:13.000 --> 07:17.000
that you don't need to tackle the video users. Sometimes you just don't want

07:17.000 --> 07:24.000
users maybe. Okay, so let's move on. So, we asked maintenance.

07:24.000 --> 07:29.000
Hey, maintenance, we have this nice service for you that will automatically

07:29.000 --> 07:35.000
send your upstream releases to your service. Always. We were very positive

07:35.000 --> 07:43.000
that we helped people. I don't care if they produce new code. It's definitely

07:43.000 --> 07:52.000
a new box and more work for me. So, I'm not sure if I want this service.

07:52.000 --> 07:57.000
So, same question. Why do you think maintenance should care about upstream?

07:57.000 --> 08:04.000
Why there should not be just the upstream that don't produce anything and I can

08:04.000 --> 08:12.000
happily leave just rebuild my package every half a year or so when there is a

08:12.000 --> 08:21.000
new version of the Linux distribution and live in peace. Yeah, users want new

08:21.000 --> 08:31.000
releases, yeah. New features that's related. Missing updates. Similar stuff,

08:31.000 --> 08:40.000
similar stuff. Yeah, bug fixes. Yeah. Writing the code is hard and I really

08:40.000 --> 08:46.000
don't want to do that and all the patching, yeah. Can you be a maintenance

08:46.000 --> 08:51.000
upstim? Looks like not, but yeah, there are a lot of maintenance with dead

08:51.000 --> 09:01.000
upstream. But availability, security fixes, stability. So, yeah, we have at

09:01.000 --> 09:06.000
least 17 reasons why to do that. So, I think it makes sense to care about

09:06.000 --> 09:12.000
upstream. Yeah, if there is no upstream project, then there is no downstream

09:12.000 --> 09:22.000
project. So, that makes sense. Okay. So, we really wanted to help people and

09:22.000 --> 09:29.000
it was quite a surprise that we were honest on that and that was our goal to

09:29.000 --> 09:35.000
bring upstream and downstream closer together. There was nothing hidden, just

09:35.000 --> 09:46.000
a really clear goal to help people. So, on the way, after these feedbacks, we

09:46.000 --> 09:50.000
also get some positive ones and also there were people that were both upstream

09:50.000 --> 09:56.000
and downstream and after all we get some users and also users that provided some

09:56.000 --> 10:05.000
feedback and after like these, somehow 40 years, I can say that we are saving

10:05.000 --> 10:14.000
some time people and helping them and there are also great people that uses

10:14.000 --> 10:20.000
our project. So, it looks like it makes some sense. But it wasn't easy and we are

10:20.000 --> 10:24.000
not done definitely and we've collected various feedback and complaints on the

10:24.000 --> 10:31.000
way. So, let's pick few typical sentences that we've heard during those years

10:31.000 --> 10:40.000
and let's take a look what we can do to help in those situations. So, the first one,

10:40.000 --> 10:45.000
when things go wrong, I don't want to look into the logs. I don't understand the

10:45.000 --> 10:53.000
downstream logs. There is some build failure and I don't understand it. So, what

10:53.000 --> 10:58.000
would you do in this situation? You are providing a build system integration or

10:58.000 --> 11:05.000
maybe like you are running RPM builds for the upstream pull requests or testing

11:05.000 --> 11:12.000
on Ubuntu or anything like that. Just the downstream feedback for any upstream

11:12.000 --> 11:20.000
change and people don't want to tackle with the downstream logs. What, when things

11:20.000 --> 11:29.000
go wrong? What would you do? How to help with that? Yeah, reliable mechanism for

11:29.000 --> 11:39.000
filling bugs. Yeah, definitely. If the problem is like a packaging problem,

11:39.000 --> 11:48.000
anything else what we can do? Okay, so it would be transparent. So, if we need to

11:48.000 --> 11:58.000
give the logs, so let's let them suffer as well. Yes, I should have 20 relevant logs

11:58.000 --> 12:09.000
to find the one relevant. Yeah, so help with some home combing those. Cool logging libraries.

12:09.000 --> 12:20.000
I'm still missing some crucial. Yeah, you can snap or flat peg, yes. But you can get

12:20.000 --> 12:27.000
like a failure from creating the snap. So, it's, we can treat like snap or flat peg like

12:27.000 --> 12:40.000
this and another distribution maybe if either of the ends but still. Yeah. Okay, I hope

12:40.000 --> 12:53.000
that's my job. Okay, I'm still missing one crucial. Like the obvious one. You know that

12:53.000 --> 13:05.000
is not possible. Probably that's why the response is not here. So, better logs. Yeah, it's usually

13:05.000 --> 13:11.000
not so easily possible. Sometimes yes, sometimes we can do something about it but with these

13:11.000 --> 13:20.000
systems, if you've been on the talk like the Dant had an hour ago about all the federal

13:20.000 --> 13:25.000
systems we had in place, yeah, we are trying to integrate with all of them and you, for

13:25.000 --> 13:31.000
example, copper had multiple logs and all the systems have different logs. So, and they

13:31.000 --> 13:38.000
use more or other tools. So, this is layered and we don't have power on all the logs. But

13:38.000 --> 13:45.000
maybe we can, as someone mentioned correctly, we can be good in the aggregation or some

13:45.000 --> 13:54.000
visualization or we can use AI. Okay, just kidding but a few colleagues and me are actually

13:54.000 --> 14:01.000
working on something like that. They are trying to collect various logs with the failures and

14:01.000 --> 14:08.000
trying to get like human input what's going on here and how to fix that. So, if you are

14:08.000 --> 14:17.000
interested in that, check this out. I really hope this will happen and will produce some

14:17.000 --> 14:25.000
really nice data set that can help us to provide some really nice way how to not tackle with

14:25.000 --> 14:32.000
hundreds of lines of logs that I don't need to tackle. So, that's just in the beginning but

14:32.000 --> 14:41.000
I'm really looking forward to that. Next thing would help us is provide nice notifications

14:41.000 --> 14:52.000
and also connect by that, I mean connect people that can help. And it relates also to the last point

14:52.000 --> 15:00.000
that we need to set really clear expectations. Who is responsible for what? Who should take a look?

15:00.000 --> 15:07.000
Yes, sometimes it's not clear, sometimes it can be really valid back in the code that is

15:07.000 --> 15:14.000
sketched quite soon and that's really nice but sometimes it can be downstream issue and

15:14.000 --> 15:21.000
sometimes it's something in the middle and so it's really nice when we are introducing these

15:21.000 --> 15:29.000
two to make clear expectations. Who will, which like maybe also time-based and with the notifications

15:29.000 --> 15:40.000
we can maybe ping people that can help. Okay, so just a single distribution. Why can't you support

15:40.000 --> 15:48.000
all of them? So, what would you do? Yeah, there are people from various distributions so that's

15:48.000 --> 15:55.000
maybe common that if you want to introduce some CI or anything that, yeah, but if I enable this

15:55.000 --> 16:06.000
for Fedora, I want also the BN, SUSE and everything. Can we help somehow? What would you do? Yeah, we can

16:06.000 --> 16:16.000
use build systems that support multiple targets like copper or OBS and these. Yeah, snap, flatback, yeah,

16:16.000 --> 16:25.000
we can like switch the distribution but when we discuss in the very beginning, we might want to

16:25.000 --> 16:36.000
care still in those distributions that we maybe work on. Yes, some distributions, yeah, a lot of

16:36.000 --> 16:48.000
distributions are really, really different and it's hard to somehow compare or maybe some obstruction. Yeah,

16:48.000 --> 16:57.000
I'm lost in all the good suggestions. I'll read them probably later. So, yeah, it's probably not

16:57.000 --> 17:09.000
possible, definitely not all. There are a lot of distributions but as someone suggested, we can maybe try, maybe

17:09.000 --> 17:20.000
we can also have open source that someone can contribute, maybe some architecture that can maybe combine

17:20.000 --> 17:29.000
various backends so we can maybe share. If you have an open source, so for example, then we'll come from SUSE

17:29.000 --> 17:39.000
and say, hey, let's support impact it also OBS and we can maybe collaborate so that's also possible. The tricky one

17:39.000 --> 17:46.000
is we are used to do distro specific terms and we need to be really careful about those because when we mention

17:46.000 --> 17:58.000
various scratch builds and patches, metadata, bugs, and all the weird terminology, it might be really, it also might be a

17:58.000 --> 18:07.000
reason why they are scared and developers don't want to hear about those. So, describe those terms and be careful

18:07.000 --> 18:19.000
and also you can hide those somehow so we don't need to speak about co-properties but we can maybe mention RPM builds and these things.

18:19.000 --> 18:33.000
So, yeah, what helps us is also we are supporting various functionality types and what helps is to provide easy and reliable testing

18:33.000 --> 18:46.000
like infrastructure or so if they can rely on that and they can run their test code or run their tests on this reliable infrastructure

18:46.000 --> 18:55.000
we are using for example testing bar project for that so we don't need to do that ourselves. And easy on boarding, I'll probably mention that

18:55.000 --> 19:05.000
multiple times but it's crucial because if they hid like the very first problem during the way and yeah with those distribution things

19:05.000 --> 19:16.000
it's not easy and we've spoiled it multiple times but it's important. Yes, sorry, I don't want to have more files in the repository.

19:16.000 --> 19:33.000
So, CI system that's generated maybe for any upstream CI so yet another config file. Don't be lazy, yeah.

19:33.000 --> 19:45.000
Yeah, there are thousands of files in the repository and you don't like yet another one or next to. Yeah.

19:45.000 --> 20:05.000
A few interesting things. Anything interesting? You see, okay, so yeah, we can put more complaints. Yeah, yeah.

20:06.000 --> 20:22.000
Very interesting things. Yes, I'll probably move on and read those later. It's interesting but so yeah, we might want to stick with the one line if possible, one file if possible

20:22.000 --> 20:38.000
because if it is possible but still better one file than multiple files and also not sure why but people rather put a shell script into the JSON or YAML instead of providing a shell script

20:38.000 --> 20:50.000
and specify a name of this shell script in the YAML file so we can help them do that. Yeah, if there is more content we can maybe let them link it.

20:50.000 --> 21:03.000
We can also enable some custom locations, custom name of or some sub directory so they can maybe hide it a bit and also for example Zoo project uses global configuration

21:03.000 --> 21:14.000
if people really don't want to put anything to their git repository just provide a separate git repository they can create a pull request and enable this.

21:14.000 --> 21:27.000
It's tricky from the developer point of view like how to do that, how all the messaging should work but yeah. Yeah, I have my own automation works well.

21:27.000 --> 21:36.000
So, I have my script or anything and I'm happy with it.

21:39.000 --> 21:41.000
How to live?

21:41.000 --> 21:46.000
Yeah.

21:46.000 --> 21:52.000
Yeah.

21:52.000 --> 21:56.000
Use on Civo. Yeah.

21:56.000 --> 22:01.000
Okay. Good for you.

22:01.000 --> 22:05.000
Yeah, standard protocols.

22:05.000 --> 22:07.000
I'll move on.

22:07.000 --> 22:18.000
So, this is a generic when we want someone to start using something else even like with the comparable tools we need some killer feature.

22:18.000 --> 22:29.000
We don't, having just the same feature set is not enough. They need to have clear motivation to have something extra when they move.

22:30.000 --> 22:45.000
Easy onboarding. I've mentioned that this is crucial. We are for example trying to do some online workshop with the gutter platform and various funny stuff to help them.

22:45.000 --> 22:57.000
Also, and that can be the killer feature if things break. The people or the users does not need to take a look and fix that and then that can save a lot of time.

22:57.000 --> 23:07.000
So, with the maintenance of this automation and we can save them a lot of time and we need to clearly communicate this but we need to also do that.

23:07.000 --> 23:11.000
So, if things break we should take a look and just ignore it.

23:11.000 --> 23:26.000
And work on the right things. So, listen to the community, listen to the people and try to like don't just assume that you are doing the right features but just ask and get something there.

23:26.000 --> 23:34.000
Yeah, your automation can break some rules for example packaging rules. How do you tackle these things?

23:34.000 --> 23:55.000
And yes, sometimes when those packaging guidelines were created the automation wasn't such a thing or maybe when they have written that they expected that humans will interact with the packages and maybe standardization,

23:55.000 --> 24:08.000
who's rules, yeah. Yeah, we can also tweak the rules. It's not set in stone so we can maybe discuss. Yeah.

24:08.000 --> 24:24.000
I trust the both modern and human. Yeah, that's a positive thing on the automation that yeah, it usually does not do like the human like things and be kind and that's I really like.

24:24.000 --> 24:46.000
So yeah, be open for suggestion, communicate, don't ignore the issues. Just talk and see what others think about that because sometimes it can be like really valuable feedback and maybe people already have a suggestion how to fix that or how you should behave.

24:46.000 --> 25:07.000
Yeah, sometimes you can also let the user decide for example we've talked about an issue if we should upload some archives to the cache if we should do that before it's merged into federal this gate and we were not sure we someone wants the automation someone.

25:08.000 --> 25:34.000
Yeah, someone wants just the security so let them decide. Yeah, and for us it helped that we are trying as much as possible to have the provisions as a regular user so we are not kind of special in any way with one slide exception to get less permissions that we need but otherwise we are trying.

25:35.000 --> 25:37.000
Yeah, so.

25:39.000 --> 25:46.000
Similar to the previous one. You can continue with the voting but I'll skip to two points I had.

25:47.000 --> 25:55.000
Yeah, when people think that they you behave differently we can provide some config options but usually bait.

25:56.000 --> 26:09.000
There can maybe be maybe people will realize that they don't need it but maybe they will be a new user that will have similar config option or similar feature request so you can maybe combine it for us.

26:09.000 --> 26:25.000
For us user defined actions helped a lot because we've done everyone has a different workflow and it was really hard to do securely and well but this was for us a huge and other.

26:25.000 --> 26:40.000
Yeah, and respond to the first issue and questions crucial even if it is like a little you weeks thingy that you are showing how you how you treat your users.

26:40.000 --> 26:54.000
So that's all from me. This is the project page for Stornon account and if we have maybe two minutes for question if you have any but maybe you can ask the audience.

26:55.000 --> 27:01.000
We don't have. Okay, so sorry about that but I think you've shared your opinion on that. So thanks a lot everyone.

27:10.000 --> 27:11.000
Thank you.

