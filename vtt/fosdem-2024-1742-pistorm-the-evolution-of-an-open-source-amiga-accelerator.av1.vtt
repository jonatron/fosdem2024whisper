WEBVTT

00:00.000 --> 00:05.000
Okay, we are right on time.

00:05.000 --> 00:07.000
Many thanks.

00:07.000 --> 00:10.000
So Andrew with the Pistole.

00:10.000 --> 00:11.000
Hello everyone.

00:11.000 --> 00:18.000
I was stupid enough to do this from an Amiga 1200,

00:18.000 --> 00:21.000
which is great because I don't have a screen in front of me,

00:21.000 --> 00:25.000
so I'm going to try and see what I'm doing whilst I'm doing it.

00:25.000 --> 00:27.000
But it'll make sense later.

00:27.000 --> 00:30.000
So I'm here to talk about Pistole.

00:30.000 --> 00:32.000
My name is Andrew Hutchings,

00:32.000 --> 00:34.000
I'm also a learner at Linux Jedi.

00:34.000 --> 00:41.000
During the day, I worked for a non-profit called the MariaDB Foundation.

00:41.000 --> 00:46.000
And by night, I restore Commodore Amiga's,

00:46.000 --> 00:49.000
Acorn computers, I design upgrades for them,

00:49.000 --> 00:51.000
and I'm part of the Pistole community

00:51.000 --> 00:53.000
and a whole bunch of other things.

00:53.000 --> 00:57.000
I've also written for PixelAdex to go by that,

00:57.000 --> 01:00.000
because the next issue's got a big article by me in it.

01:00.000 --> 01:02.000
And I'm also going to plug...

01:02.000 --> 01:05.000
The aperture there was made by Stu Cambridge,

01:05.000 --> 01:08.000
who from Sensible Soccer fame,

01:08.000 --> 01:12.000
he did cannon fodder and all of that lot.

01:12.000 --> 01:19.000
And you can get him to do Doodles of You just like that from his site.

01:19.000 --> 01:21.000
What's it called now? Design Droid.

01:21.000 --> 01:25.000
He doesn't know I'm plugging it, but I love his work.

01:25.000 --> 01:27.000
So anyway, about Pistole,

01:27.000 --> 01:31.000
it was a project created by a guy called Claude Schwartz.

01:31.000 --> 01:37.000
And if you've ever tried to use or upgrade Commodore Amiga today,

01:37.000 --> 01:43.000
you need a processor like a 68030 or a 68060.

01:43.000 --> 01:46.000
If you want a 68060 with a board and RAM and everything like that,

01:46.000 --> 01:48.000
you need to sell a kidney, basically.

01:48.000 --> 01:51.000
They are really rare, really expensive nowadays.

01:51.000 --> 01:55.000
So the idea was to create a very fast budget accelerator.

01:55.000 --> 01:59.000
And you can get a lot of compute resources from something called a Raspberry Pi,

01:59.000 --> 02:01.000
which you probably all know about.

02:01.000 --> 02:08.000
So what this essentially does is it emulates the 68000 processor

02:08.000 --> 02:12.000
on a Raspberry Pi running Linux originally,

02:12.000 --> 02:14.000
but the rest of the Amiga motherboard was used.

02:14.000 --> 02:17.000
And then it adds things such as RTG.

02:17.000 --> 02:22.000
Now, RTG stands for Retargetable Graphics.

02:22.000 --> 02:27.000
And essentially, that means it's like a second graphics card for your Amiga.

02:27.000 --> 02:31.000
So this is what I'm actually projecting from right now, is the RTG from my Amiga.

02:31.000 --> 02:33.000
It has the native Amiga.

02:33.000 --> 02:35.000
If I tried to run an old Amiga game on it,

02:35.000 --> 02:37.000
you wouldn't see it on the screen right now,

02:37.000 --> 02:39.000
because I haven't got the output for it.

02:39.000 --> 02:41.000
I'm going to talk about that a little bit later.

02:41.000 --> 02:43.000
It adds virtual scuzzies.

02:43.000 --> 02:50.000
So the SD card on there is basically a driver for the Pi,

02:50.000 --> 02:54.000
as the Pi Storm, to talk directly to the Raspberry Pi's SD card.

02:54.000 --> 02:56.000
So it's rather than being emulated,

02:56.000 --> 02:58.000
it's almost like a direct driver in a way.

02:58.000 --> 03:00.000
And it also adds RAM.

03:00.000 --> 03:02.000
So I've got a Raspberry Pi 4 in here.

03:02.000 --> 03:07.000
So nearly 2 gig of RAM added to what is normally a 2Mega system.

03:07.000 --> 03:09.000
So a little bit of a boost.

03:09.000 --> 03:11.000
And everything is open source.

03:11.000 --> 03:13.000
The boards are open hardware and stuff.

03:13.000 --> 03:18.000
What we used to do is a group buy where you could come along

03:18.000 --> 03:21.000
and say, I want to buy one of these,

03:21.000 --> 03:26.000
and we'd all go to JLCPCB, buy loads of boards together,

03:26.000 --> 03:28.000
and you just have to solder on the headers,

03:28.000 --> 03:30.000
which were great until the chip shortage,

03:30.000 --> 03:32.000
and then that kind of died off completely.

03:32.000 --> 03:36.000
But back then, I said you can pay more than 20 bucks for a Pi Storm.

03:36.000 --> 03:41.000
So about 18 pounds, it's probably about 20 odd US dollars, whatever.

03:41.000 --> 03:43.000
So it was really, really cheap.

03:43.000 --> 03:45.000
You just need a Raspberry Pi.

03:47.000 --> 03:49.000
So this is what the first one looked like.

03:49.000 --> 03:53.000
Now, you can see there's quite a few chips to it

03:53.000 --> 03:57.000
on top of what is normally a Pi GPIO there.

03:57.000 --> 04:03.000
So essentially the problem we have is the Pi GPIO is 40 pins,

04:03.000 --> 04:07.000
but you only get about 26 GPIO lines from that.

04:07.000 --> 04:12.000
And the Amiga, 16-bit Amiga has 16-bit data bus,

04:12.000 --> 04:14.000
and then a 24-bit address bus,

04:14.000 --> 04:16.000
and then control lines on top of that.

04:16.000 --> 04:19.000
It's a lot more than you have IO lines.

04:19.000 --> 04:23.000
So what we've got here is a CPLD chip,

04:23.000 --> 04:26.000
a programmable logic chip essentially.

04:26.000 --> 04:31.000
And we have in there basically this 6,000-8,000 state machine.

04:31.000 --> 04:36.000
And that does all sorts of multiplexing communications to the Pi.

04:36.000 --> 04:40.000
And then we have some buffers basically

04:40.000 --> 04:42.000
because the voltage-total translation is needed

04:42.000 --> 04:46.000
between the CPLD and the Raspberry Pi,

04:46.000 --> 04:49.000
and then the external IO logic.

04:49.000 --> 04:52.000
So it was nice and simple boards.

04:52.000 --> 04:55.000
We could get JLCPCB to build all these originally

04:55.000 --> 04:57.000
until the CPLD kind of ran out of stock,

04:57.000 --> 05:00.000
and then that became difficult.

05:01.000 --> 05:05.000
And the logic that we wrote for the CPLD

05:05.000 --> 05:08.000
is enough to run it for an Amiga,

05:08.000 --> 05:11.000
but it doesn't include some of the state control lines

05:11.000 --> 05:13.000
that other systems use

05:13.000 --> 05:16.000
because we were targeting an Amiga 500 at the time.

05:16.000 --> 05:18.000
So this supports a 500.

05:18.000 --> 05:24.000
It supports most of an Amiga 2000, the 1000, and the CDTB.

05:24.000 --> 05:25.000
And then...

05:25.000 --> 05:27.000
Oh, doing this on my clicker,

05:27.000 --> 05:30.000
clicker and of course, I've got my clicker connected.

05:30.000 --> 05:33.000
So it used to Raspberry Pi 3A originally.

05:33.000 --> 05:36.000
You could have used the Raspberry Pi 3B,

05:36.000 --> 05:38.000
but you'd have to raise the header a bit

05:38.000 --> 05:41.000
because otherwise your Ethernet board smash into the board.

05:41.000 --> 05:43.000
And that's not good.

05:43.000 --> 05:47.000
You can take off the ports on the 3B if you don't want them,

05:47.000 --> 05:49.000
or you can extend the header.

05:49.000 --> 05:52.000
Also, Pi 0 2W will work.

05:52.000 --> 05:55.000
If you don't know, Pi 0 2W is basically a Pi 3,

05:55.000 --> 05:58.000
but in a much more compressed format.

05:58.000 --> 06:02.000
We ran Mishashi 6800...

06:02.000 --> 06:04.000
I hope I'm pronouncing it right.

06:04.000 --> 06:07.000
6800 CPU emulator, which...

06:07.000 --> 06:09.000
It was good.

06:09.000 --> 06:12.000
It's a pretty good 6800 emulator,

06:12.000 --> 06:15.000
and then there's some kind of glue code to make it work,

06:15.000 --> 06:18.000
but it was basically an off-the-shelf emulator.

06:18.000 --> 06:21.000
And most of that software was done by a guy called Bjorn.

06:21.000 --> 06:23.000
He's not part of the project anymore,

06:23.000 --> 06:26.000
but he's got a lot of great early work on it.

06:26.000 --> 06:29.000
Again, I'm clicking on my clicker.

06:29.000 --> 06:32.000
So, performance-wise, you can see here...

06:32.000 --> 06:35.000
This is what's called SysInfo.

06:35.000 --> 06:39.000
It's kind of a stock benchmarking software for an Amiga.

06:39.000 --> 06:44.000
And an Amiga 600, which is same as an Amiga 500, roughly.

06:44.000 --> 06:49.000
The original Pi Storm ran about 23 times faster,

06:49.000 --> 06:52.000
which is pretty good acceleration.

06:52.000 --> 06:58.000
You're getting even faster than what was called 6800, 25 MHz.

06:58.000 --> 07:02.000
So you're getting about 50 MHz, 030 processor,

07:02.000 --> 07:05.000
kind of speed out of it, which is pretty good performance

07:05.000 --> 07:09.000
for something that costs a lot less than even the CPU for an 030.

07:11.000 --> 07:13.000
How I got into Pi Storm?

07:13.000 --> 07:16.000
I was designing some new hardware for a Commodore Amiga,

07:16.000 --> 07:20.000
and the other advantage of having Mishashi on Pi Storm

07:20.000 --> 07:22.000
is the fact that you can, on the fly,

07:22.000 --> 07:24.000
change the entire configuration of the Amiga.

07:24.000 --> 07:27.000
I want a different OS ROM to boot into,

07:27.000 --> 07:30.000
different RAM configuration, different hardware configurations.

07:30.000 --> 07:32.000
All that can be changed on the fly.

07:32.000 --> 07:36.000
I started providing patches, helped build a community.

07:36.000 --> 07:39.000
This was probably in September.

07:39.000 --> 07:44.000
We had 7,000 members on Discord and 3,000 on Facebook.

07:44.000 --> 07:47.000
So it's grown to a pretty big community.

07:50.000 --> 07:53.000
Things I've done, I'm going to skip over this,

07:53.000 --> 07:57.000
but I did a lot of the early work regarding bug fixing

07:57.000 --> 08:03.000
and things like that for the original Mishashi Pi Storm.

08:04.000 --> 08:09.000
Then we released a version for the Amiga 600 and Amiga 2000.

08:09.000 --> 08:12.000
They are essentially basically the same thing,

08:12.000 --> 08:14.000
but Amiga 2000 has a coprocessor slot,

08:14.000 --> 08:17.000
so it's much easier to just debug it in the slot.

08:17.000 --> 08:20.000
At Amiga 600, you have to do this hacky thing

08:20.000 --> 08:23.000
where it sits on top of the PLCC CPU,

08:23.000 --> 08:27.000
and then there's a little kind of thing in there

08:27.000 --> 08:29.000
to tell that CPU to go to sleep,

08:29.000 --> 08:33.000
and then that basically is identical after that.

08:35.000 --> 08:38.000
So EMU68 came along.

08:38.000 --> 08:44.000
EMU68 is a bare metal emulator for Raspberry Pi,

08:44.000 --> 08:48.000
for the 6800, so it's much, much faster.

08:48.000 --> 08:50.000
You don't have to boot into Linux anymore.

08:50.000 --> 08:52.000
This is what this boot is from.

08:52.000 --> 08:55.000
It became an option for Pi Storm in 2021,

08:55.000 --> 08:57.000
and now it's pretty much de facto standard,

08:57.000 --> 09:02.000
and it uses JIT-based emulation instead of table-based.

09:02.000 --> 09:05.000
So performance-wise, it got a bit faster.

09:05.000 --> 09:11.000
1,490 times faster, and this is just on the Amiga 500.

09:12.000 --> 09:14.000
Then the Pi Storm 32 came along.

09:14.000 --> 09:16.000
This project was scrapped.

09:16.000 --> 09:19.000
So essentially, it's the same kind of thing,

09:19.000 --> 09:21.000
but for the 32-bit Amigas like this one.

09:21.000 --> 09:25.000
But it became very hard to build,

09:25.000 --> 09:28.000
and it required a Pi CM4, which is a Pi without all the ports

09:28.000 --> 09:29.000
and everything.

09:29.000 --> 09:31.000
You just got these big connectors on the bottom,

09:31.000 --> 09:34.000
and it became difficult and expensive to build,

09:34.000 --> 09:35.000
so we gave up on that,

09:35.000 --> 09:38.000
and instead built the Pi Storm 32 Lite,

09:38.000 --> 09:42.000
which is Lite because it doesn't have all the ports on it.

09:42.000 --> 09:44.000
But basically, it's the same kind of thing.

09:44.000 --> 09:48.000
And we have a nice big FPGA on there instead of CPLD.

09:48.000 --> 09:51.000
FPGA, just much more logic,

09:51.000 --> 09:55.000
but you have to kind of flash it every time you turn it on.

09:57.000 --> 10:02.000
And that was basically the start of what became the 8-200.

10:02.000 --> 10:05.000
This is kind of the peak of Pi Storm right now.

10:06.000 --> 10:08.000
We released that about a year ago,

10:08.000 --> 10:11.000
and it's still going strong.

10:11.000 --> 10:15.000
Performance-wise, we're now talking 3,052 times faster

10:15.000 --> 10:19.000
than an Amiga 500, which is not too bad.

10:19.000 --> 10:21.000
Even the Amiga 1200, which this is,

10:21.000 --> 10:24.000
it's 1,326 times faster.

10:24.000 --> 10:26.000
And you can get faster still if you overclock it.

10:26.000 --> 10:28.000
I'm not going to overclock mine.

10:28.000 --> 10:30.000
I've got a little fan running underneath it as it is.

10:31.000 --> 10:36.000
And inside this Amiga, you can see this is what mine looks like inside.

10:36.000 --> 10:39.000
So you've got the Pi Storm in here.

10:39.000 --> 10:43.000
And then I've got a little cable running out of the HDMI port to the back,

10:43.000 --> 10:46.000
and that's what's running as projector right now.

10:46.000 --> 10:49.000
And then I 3D printed a kind of assembly with a fan in the net

10:49.000 --> 10:51.000
just to keep everything nice and cool.

10:51.000 --> 10:53.000
Demo time.

10:53.000 --> 10:58.000
So, John Clarmac said the Amiga is not powerful enough to run do.

10:58.000 --> 11:01.000
At the time, to be fair, he was right.

11:01.000 --> 11:04.000
The de facto Amiga at the time was kind of Amiga 500,

11:04.000 --> 11:06.000
my Amiga 600.

11:06.000 --> 11:08.000
If you wanted one that could run do,

11:08.000 --> 11:10.000
it would cost you thousands and thousands,

11:10.000 --> 11:12.000
much more than the PC would at the time.

11:12.000 --> 11:14.000
But today...

11:14.000 --> 11:16.000
It's later we were running do.

11:16.000 --> 11:17.000
Yes.

11:17.000 --> 11:20.000
But I can do a bit better.

11:20.000 --> 11:22.000
AmiQuake.

11:25.000 --> 11:27.000
And I haven't got sound hooked up, unfortunately,

11:27.000 --> 11:30.000
but what I can do...

11:30.000 --> 11:33.000
Time demo, demo one.

11:34.000 --> 11:37.000
It's slow, I know.

11:37.000 --> 11:40.000
So we just got to wait for all this demo to finish

11:40.000 --> 11:43.000
just to get a nice kind of benchmark out of it.

11:43.000 --> 11:45.000
And there we go.

11:45.000 --> 11:48.000
So we get 93 frames a second out of Quake

11:48.000 --> 11:50.000
through the RTG.

11:50.000 --> 11:53.000
If I run this through the AGA graphic, the built-in graphics instead,

11:53.000 --> 11:56.000
we still get about 45 frames a second.

11:56.000 --> 12:00.000
So it's a bit faster than native,

12:00.000 --> 12:04.000
which would be a few frames a second at best.

12:06.000 --> 12:08.000
Oh, there it goes, that window.

12:08.000 --> 12:10.000
So...

12:11.000 --> 12:14.000
If I use...

12:14.000 --> 12:16.000
CandlebyeStorm modified chip RAM.

12:16.000 --> 12:18.000
So chip RAM is chip set RAM.

12:18.000 --> 12:20.000
It's the RAM that the entire chip set...

12:20.000 --> 12:22.000
Can the Amiga talks to each other with?

12:22.000 --> 12:25.000
So you've got like the audio chip, the graphics chip, etc.

12:26.000 --> 12:31.000
That is capped at 2 megabytes by design, by Commodore.

12:31.000 --> 12:35.000
They were trying to move it to 8 meg for the Amiga 4000,

12:35.000 --> 12:37.000
but it never really hit there.

12:37.000 --> 12:39.000
No, it can't because we don't modify the chip set.

12:39.000 --> 12:41.000
We don't override the chip set,

12:41.000 --> 12:44.000
so we can't increase the RAM that the chip set uses.

12:44.000 --> 12:47.000
So whilst we have 2 gig of fast RAM,

12:47.000 --> 12:49.000
we don't have any chip RAM.

12:49.000 --> 12:52.000
Can you emulate a power PC?

12:52.000 --> 12:55.000
Probably you can, but it's going to be a lot of work,

12:55.000 --> 12:56.000
and we don't want to do it.

12:56.000 --> 12:59.000
So if anyone wants to put a PC emulator in there,

12:59.000 --> 13:01.000
it will probably work.

13:01.000 --> 13:05.000
Can you use PySom in other 6,000-8,000-based machines?

13:05.000 --> 13:07.000
Yes.

13:07.000 --> 13:10.000
So someone's done a port,

13:10.000 --> 13:13.000
I forget the name, they've done a port for the Atari,

13:13.000 --> 13:16.000
which basically had to pretty much rewrite the firmware

13:16.000 --> 13:19.000
to make it work because Atari actually uses all the 6,000-8,000,

13:19.000 --> 13:21.000
instead of the hacky thing Amiga did.

13:21.000 --> 13:24.000
I love Amiga, but Atari did that bit a bit better.

13:24.000 --> 13:26.000
And similar problems with the Apple.

13:26.000 --> 13:29.000
So there are projects where they're trying to get this running.

13:29.000 --> 13:31.000
It's not going...

13:31.000 --> 13:35.000
It's not all the way there yet, but they're working on it.

13:35.000 --> 13:39.000
CD32, sorry, 3,000, 4,000 versions.

13:39.000 --> 13:42.000
In theory, the one in this machine should work on CD32,

13:42.000 --> 13:44.000
but it doesn't, and we don't know why yet.

13:44.000 --> 13:47.000
We haven't had time to figure it out.

13:47.000 --> 13:50.000
It shouldn't take much modification to make it work.

13:50.000 --> 13:53.000
4,000, 4,000 versions are going to require a lot more bus arbitration work,

13:53.000 --> 13:55.000
so it's just time to do that.

13:55.000 --> 13:57.000
And then the really cool thing we're working on right now

13:57.000 --> 14:01.000
is Amiga Native Video Injection Device,

14:01.000 --> 14:03.000
which we haven't got a name for yet,

14:03.000 --> 14:06.000
but essentially what it does is it captures the...

14:06.000 --> 14:09.000
It sits in various places in Amiga, depending on the model,

14:09.000 --> 14:12.000
captures the digital video before it gets converted to analog,

14:12.000 --> 14:14.000
pipes it through the camera port in the Pi,

14:14.000 --> 14:17.000
and then you can have both native video and the RTG video

14:17.000 --> 14:20.000
through the HDMI on the Pi.

14:22.000 --> 14:24.000
So, if you want to sponsor the Pi Storm development,

14:24.000 --> 14:29.000
Claude has a donate button on his Pi Storm 32 Like GitHub page.

14:29.000 --> 14:31.000
I'm just checking it out.

14:31.000 --> 14:34.000
Mikal, who develops the EMU68 project,

14:34.000 --> 14:37.000
has a Patreon to sponsor the development of it.

14:37.000 --> 14:39.000
And if you have any questions at all about the project,

14:39.000 --> 14:41.000
feel free to come to me.

14:41.000 --> 14:43.000
I'm the Linux Jedi everywhere, pretty much,

14:43.000 --> 14:45.000
and I'll be happy to answer them.

14:45.000 --> 14:47.000
And that is it.

14:53.000 --> 14:55.000
So we have time for questions.

14:55.000 --> 14:57.000
Any questions?

15:03.000 --> 15:05.000
Thanks a lot for your talk.

15:05.000 --> 15:07.000
So according to the SIS info output,

15:07.000 --> 15:11.000
it's not emulating a plain 68000,

15:11.000 --> 15:14.000
but a 030 or 60 or 040?

15:14.000 --> 15:20.000
So, Mishashi, you can choose which one you want to emulate.

15:20.000 --> 15:23.000
The 020 and 030 were the most stable doing that.

15:23.000 --> 15:28.000
For EMU68, it currently pretends it's an 040,

15:28.000 --> 15:31.000
but will support the instructions set for 060.

15:31.000 --> 15:33.000
Okay, so that's only about the instructions,

15:33.000 --> 15:35.000
and it does not emulate the MMU, I guess.

15:35.000 --> 15:37.000
Yeah, it's just saying, hey, I'm an 040,

15:37.000 --> 15:39.000
but it doesn't really matter.

15:39.000 --> 15:42.000
It will run 060 code, fine.

15:45.000 --> 15:47.000
Hi.

15:53.000 --> 15:57.000
I'm actually Debian's M68K maintainer,

15:57.000 --> 16:02.000
and I'm wondering if there's plans to add MMU support,

16:02.000 --> 16:04.000
so you can go to the Linux kernel.

16:04.000 --> 16:07.000
Other plans for the MMU?

16:07.000 --> 16:09.000
That is a good question.

16:09.000 --> 16:11.000
Mishashi, no, we did have it to begin with,

16:11.000 --> 16:13.000
and it was broken.

16:13.000 --> 16:15.000
So we didn't.

16:15.000 --> 16:19.000
EMU68, I believe, somewhat supports MMU,

16:19.000 --> 16:21.000
but needs some work to support it properly.

16:21.000 --> 16:23.000
It's at the moment a direct one.

16:23.000 --> 16:26.000
It's basically given a block of RAM in the pie,

16:26.000 --> 16:28.000
and just said, yeah, just use that.

16:28.000 --> 16:30.000
So we could probably emulate MMU.

16:30.000 --> 16:32.000
That's too much trouble there.

16:34.000 --> 16:36.000
Thank you for your talk.

16:36.000 --> 16:38.000
Just a quick question about the MMU68 variant.

16:38.000 --> 16:40.000
Yep.

16:40.000 --> 16:44.000
Does you need to maintain a second OS on the SD card

16:44.000 --> 16:47.000
without, or is it effectively a persistent thing once it's on?

16:47.000 --> 16:50.000
No, it's a system that boots on by itself completely.

16:50.000 --> 16:52.000
There's a whole set of tools

16:52.000 --> 16:55.000
that are out through Pi Foundation to create your own bare metal OS,

16:55.000 --> 16:58.000
essentially, so it's an OS in its own right.

16:58.000 --> 17:01.000
The downside to that is every part of hardware,

17:01.000 --> 17:03.000
we have to write new drivers from scratch

17:03.000 --> 17:05.000
to be able to talk to the hardware,

17:05.000 --> 17:08.000
which is why if you want to use Ethernet or Wi-Fi or anything like that,

17:08.000 --> 17:11.000
it becomes a much harder task for us to do that on MMU68,

17:11.000 --> 17:13.000
and that isn't there yet.

17:18.000 --> 17:20.000
So there's no USB host support.

17:20.000 --> 17:21.000
You can't use USB keyboard.

17:21.000 --> 17:22.000
I'm sorry, sir, again?

17:22.000 --> 17:24.000
There's no USB host support for the Pi.

17:24.000 --> 17:26.000
Not on MMU68, no.

17:26.000 --> 17:27.000
Right.

17:27.000 --> 17:29.000
There is a mishashi that will actually support

17:29.000 --> 17:33.000
keyboard and mouse through Pi's USB, yeah.

17:34.000 --> 17:37.000
Still time for one or two quick questions?

17:37.000 --> 17:39.000
Yeah, one in the back.

17:45.000 --> 17:46.000
Hi, quick one, I think.

17:46.000 --> 17:48.000
Did you have to do anything special

17:48.000 --> 17:50.000
to cope with the bring up time for the Pi,

17:50.000 --> 17:53.000
because it's a lot slower than the CPU?

17:53.000 --> 17:56.000
That's a really good question, the bring up time for the Pi.

17:56.000 --> 18:00.000
So the CPLD versions hold down the reset,

18:00.000 --> 18:01.000
until the Pi's booted.

18:01.000 --> 18:03.000
So basically the machine's basically,

18:03.000 --> 18:05.000
I'm resetting constantly, kind of thing.

18:05.000 --> 18:08.000
The version in this, the Pi's on 32,

18:08.000 --> 18:11.000
it will boot the native CPU first,

18:11.000 --> 18:13.000
because the FPGA hasn't been flashed.

18:13.000 --> 18:17.000
Once the FPGA is flashed, then the reset gets held down.

18:17.000 --> 18:19.000
And it's a very short time.

18:19.000 --> 18:22.000
You're talking like two or three seconds.

18:23.000 --> 18:25.000
Still time for one question?

18:25.000 --> 18:27.000
That will be the last one.

18:27.000 --> 18:30.000
So I guess the problem with the CPLD version is that

18:30.000 --> 18:33.000
AMD has announced that they're going to stop making those.

18:33.000 --> 18:35.000
So AMD, old as iLinks, do you use it?

18:35.000 --> 18:37.000
Yes, but iLinks is AMD, right?

18:37.000 --> 18:38.000
Yeah, no, we're not using...

18:38.000 --> 18:40.000
They announced like the last Pi's or something from now.

18:40.000 --> 18:42.000
We're not using iLinks ones, so I...

18:42.000 --> 18:43.000
Ah!

18:43.000 --> 18:44.000
No, so we're using...

18:44.000 --> 18:46.000
Yeah, I think we're using...

18:46.000 --> 18:47.000
Yeah, I think we're using...

18:47.000 --> 18:48.000
Yeah, I think we're using...

18:48.000 --> 18:49.000
Yeah, I think we're using...

18:49.000 --> 18:50.000
Yeah, I think we're using...

18:50.000 --> 18:52.000
No, so we're using...

18:52.000 --> 18:55.000
The CPLD is Oterra Max...

18:55.000 --> 18:57.000
Max2, yeah.

18:57.000 --> 18:58.000
Also as Intel.

18:58.000 --> 19:02.000
And then the FPGA is Trian...

19:02.000 --> 19:04.000
Maybe...

19:04.000 --> 19:06.000
Ethnics, Ethnics Trian.

19:06.000 --> 19:07.000
Ah, okay, maybe...

19:07.000 --> 19:09.000
I thought it was iLinks in the first picture, but maybe that's wrong.

19:09.000 --> 19:10.000
Yeah.

19:10.000 --> 19:11.000
Or maybe that's a prototype.

19:11.000 --> 19:13.000
The other projects I maintain, yes, they are all screwed

19:13.000 --> 19:15.000
in regards to iLinks, but...

19:17.000 --> 19:18.000
Good, that's it.

19:18.000 --> 19:20.000
Many, many thanks, Andrew.

19:20.000 --> 19:22.000
No problem, thank you very much.

