WEBVTT

00:00.000 --> 00:12.440
Okay, if I can ask for your attention, we have another talk coming up.

00:12.440 --> 00:18.080
It's by Razvan, who is somebody who also does not need a lot of introduction.

00:18.080 --> 00:21.040
He's the unfun terrible of Unicornals.

00:21.040 --> 00:26.200
And his talk is about the fact that Unicornals are here.

00:26.200 --> 00:27.200
The stage is yours.

00:27.200 --> 00:31.280
All righty, thank you so much.

00:31.280 --> 00:32.280
Hi everyone, I'm Razvan.

00:32.280 --> 00:33.680
I'm from the Unicraft Projects.

00:33.680 --> 00:37.960
We were also part of FOSDEM last year.

00:37.960 --> 00:40.720
Our Unicornal projects are now part of what we call Unicornal Alliance.

00:40.720 --> 00:47.720
So Andrea, Valdez, Jonathan, Martin, and the others are kind of in this umbrella term.

00:47.720 --> 00:51.200
So my talk is going to be about Unicornals finally being here.

00:51.200 --> 00:54.120
I saw you saw a bit of highlights from Andrea, given her talks.

00:54.120 --> 00:57.080
You're going to see more about that here.

00:57.080 --> 00:58.080
Let's get started.

00:58.080 --> 01:00.400
So I'm talking about application workflows.

01:00.400 --> 01:06.640
Typically we think about, let's call them consumers and producers of software, right?

01:06.640 --> 01:10.280
The first workflow is for people producing software.

01:10.280 --> 01:13.240
The second one is for people using software.

01:13.240 --> 01:20.320
If I were to make an analogy to Andrea's presentation, what she was talking about was actually users

01:20.320 --> 01:23.240
that, I mean people that produce software.

01:23.240 --> 01:26.400
People that produce software don't care about the underlying things.

01:26.400 --> 01:30.360
They don't care about operating system specifics, about how they just want it to work.

01:30.360 --> 01:31.840
Well, so do we.

01:31.840 --> 01:34.440
Users as well, right?

01:34.440 --> 01:38.080
There are, imagine that what you do is you're going to build the application, get the package,

01:38.080 --> 01:43.480
push it, or then you do something like app install or that pulls it and unpacks it.

01:43.480 --> 01:46.120
You have typically a pack, a software package.

01:46.120 --> 01:49.080
If you imagine a dev or RPM, that's kind of it.

01:49.080 --> 01:54.520
However, this has glitches and anyone who has done some sort of development work or even

01:54.520 --> 01:57.480
worse, sorry, Gaby, about that doing DevOps work.

01:57.480 --> 02:02.040
Yeah, there are nasty jobs out there, even nastier than current development.

02:02.040 --> 02:04.240
You're going to bump into issues.

02:04.240 --> 02:06.800
Issues such as that runs there, that doesn't run over here.

02:06.800 --> 02:09.440
I'm using that, you're using Fedora.

02:09.440 --> 02:12.480
You don't have those packages being compiled.

02:12.480 --> 02:14.520
Dependency cell, I can't tell you about that.

02:14.520 --> 02:20.800
Anyone with their right mind had to deal with OpenSS cell and OpenSS cell 1.03.03.1.

02:20.800 --> 02:23.440
All those versions knows about that.

02:23.440 --> 02:26.240
Also when you run a piece of software, that's generally not isolated.

02:26.240 --> 02:30.160
If there's a glitch with that, that will affect others, supply, software, chain attacks,

02:30.160 --> 02:31.160
all those items.

02:31.160 --> 02:33.000
What do we do about that?

02:33.000 --> 02:39.000
Well, generally what people have been doing nowadays is using VMs and containers.

02:39.000 --> 02:41.640
These are trying to tackle those issues.

02:41.640 --> 02:46.320
You want to have containers and VMs because you're going to be able to run them everywhere.

02:46.320 --> 02:50.560
If you're using Docker, even if it's behind the scenes using Hyperview or something, you're

02:50.560 --> 02:57.200
going to be able to run that particular image on Windows, on Mac, on different Windows,

02:57.200 --> 03:00.040
on different Linux distros, sorry for that, all of those items.

03:00.040 --> 03:01.160
There are no dependency issues.

03:01.160 --> 03:05.280
You have your VM configuration, vagrant file, profile, you name it.

03:05.280 --> 03:06.840
You're going to know that's going to work.

03:06.840 --> 03:13.160
I'm not going to lie, I need this particular version of Node or out of the 10,000 millions

03:13.160 --> 03:19.680
or gazillions libraries that Node has, I need to have the proper version.

03:20.040 --> 03:21.800
You just grab that and it works.

03:21.800 --> 03:26.680
Also, they provide isolation, which is very important to make sure they are only using

03:26.680 --> 03:31.680
what you require that may also impact the memory footprint and they're isolated from

03:31.680 --> 03:32.680
each other.

03:32.680 --> 03:37.800
Of course, each of these two approaches has their issues.

03:37.800 --> 03:38.800
Let's talk about VMs.

03:38.800 --> 03:42.320
VMs have very good two items.

03:42.320 --> 03:48.960
They're also mentioned, I'm going to measure next then because of the frequent mentioning,

03:48.960 --> 03:52.520
about resource control, this is a very important feature of VMs.

03:52.520 --> 03:57.560
You are able to allocate CPUs, memory, hard disk, you name it.

03:57.560 --> 03:59.320
Also, you have good isolation.

03:59.320 --> 04:05.080
For sure, there are attacks out there, hypervisor attacks, VM escapes, but they're not so common

04:05.080 --> 04:06.680
as container escapes.

04:06.680 --> 04:09.280
However, they have overhead.

04:09.280 --> 04:12.400
You need a lot of time to start the VM, boot it up.

04:12.400 --> 04:14.480
We talked about cold boots.

04:14.480 --> 04:18.880
You have large memory size and it's also quite difficult to create recipes.

04:19.800 --> 04:21.840
Particularly when you compare it to container size.

04:21.840 --> 04:25.480
We have vagrant files, but even with that, it's not that easy.

04:25.480 --> 04:28.400
On the other hand, we have containers.

04:28.400 --> 04:32.840
Containers tend to compensate the disadvantage of virtual machines.

04:32.840 --> 04:35.160
We have recipes, we have Docker files.

04:35.160 --> 04:36.160
Everything is there.

04:36.160 --> 04:38.560
You just grab it, it runs everywhere.

04:38.560 --> 04:43.160
You have registries of application, Docker Hub, Google Container Registry.

04:43.160 --> 04:46.360
You just do a Docker pull, something, it works.

04:46.360 --> 04:49.880
You have a run, you pass the name, it works.

04:49.880 --> 04:52.520
You have tooling with Docker, with Podman.

04:52.520 --> 04:53.520
You have good performance.

04:53.520 --> 04:57.080
You don't have that much overhead as you have with VMs.

04:57.080 --> 05:00.920
Also, Dandrea showed what comparisons between unicunnels and containers.

05:00.920 --> 05:02.920
But there are isolation issues.

05:02.920 --> 05:05.320
There are a bunch of container-based attacks out there.

05:05.320 --> 05:07.680
You don't have, you are sharing the same kernel.

05:07.680 --> 05:13.240
If the kernel gets screwed, then that's over.

05:13.240 --> 05:14.840
And you have imperfect disk-on-conference control.

05:14.840 --> 05:21.240
We know we have C-groups, but it's not that level you have with virtual machines for sure.

05:21.240 --> 05:23.640
So what we want is we want a blend of those.

05:23.640 --> 05:28.920
And that blend is getting good isolation, good research control, recipes, registries.

05:28.920 --> 05:29.920
We want tooling.

05:29.920 --> 05:31.240
We got good performance.

05:31.240 --> 05:35.760
That means that in the end, if I'm an application developer, I want all of this.

05:35.760 --> 05:39.120
I want you to deploy my application and then users are going to just benefit.

05:39.120 --> 05:44.320
They're going to be able to run quick, fast-booting, good, well-deserved, well-deserved, well-deserved,

05:44.680 --> 05:51.080
well-isolated, high-performance, pre-built application packages.

05:51.080 --> 05:57.640
And in our opinion, that solution is using unicunnels that has this combination of items here.

05:57.640 --> 06:01.560
So this is, sorry, this is a VM to continue to unicunnel.

06:01.560 --> 06:03.480
So kind of blend of this.

06:03.480 --> 06:07.480
My talk is mostly focused on unicraft, as I mentioned, part of unicunnel lives.

06:07.480 --> 06:10.560
So basically what we wanted is this.

06:10.560 --> 06:16.640
Let's just take a tour of the items I just mentioned here as we want and see how we can achieve it.

06:16.640 --> 06:21.920
So because unicunnels are virtual machines, the advantages of virtual machines,

06:21.920 --> 06:25.400
meaning good isolation and good research control, are here.

06:25.400 --> 06:26.880
Right, so you have this.

06:26.880 --> 06:30.080
Also, we want to have recipes.

06:30.080 --> 06:32.680
Bobby's mentioned about bunny files.

06:32.680 --> 06:36.400
We are using, when you're using unicraft, we are using docker files.

06:36.400 --> 06:41.880
We're using something that's called a craft file that has kind of this level of recipe.

06:41.880 --> 06:47.720
Three set ingredients and steps to undertake to make this happen.

06:47.720 --> 06:49.840
We have a registry of pre-built applications.

06:49.840 --> 06:52.960
Just go there, you're going to use craft run, craft pull.

06:52.960 --> 06:53.680
It will just work.

06:53.680 --> 06:54.600
You're going to see the demo.

06:56.200 --> 06:57.600
We have tooling.

06:57.600 --> 06:59.400
It, bunny is not yet implemented.

06:59.400 --> 07:00.320
However, it craft it.

07:00.320 --> 07:01.040
Craft it works.

07:01.040 --> 07:02.160
It's there, it's running.

07:02.160 --> 07:04.760
You're going to see it for your own.

07:04.760 --> 07:06.840
Right, and we have good performance.

07:06.840 --> 07:09.720
That comes from the inherent design of unicunnels.

07:09.720 --> 07:14.640
You don't have the main separation, but also it's because the way unicraft has been designed.

07:14.640 --> 07:16.520
We aim to have extreme performance.

07:16.520 --> 07:20.720
That was the kind of the rationale behind my question to Andre and

07:20.720 --> 07:24.200
Vali regarding the optimization with unicunnels.

07:24.200 --> 07:30.920
Because the way unicraft is being created is highly configurable, highly customizable.

07:30.920 --> 07:36.280
We can specialize it for every particular load to get the best performance we can.

07:36.280 --> 07:39.200
That means allocator schedulers, you name it.

07:39.200 --> 07:44.800
Right, so why am I saying unicunnels are here?

07:44.800 --> 07:50.160
If it asked me this one year ago when we had the talk in Fosden, I couldn't have said that.

07:50.160 --> 07:52.000
But now I can.

07:52.000 --> 07:53.480
We have a catalog of applications ready.

07:53.480 --> 07:55.840
We have profkit well prepared.

07:55.840 --> 08:02.800
There's also on the commercials at the platform that provides commercial support for this.

08:02.800 --> 08:03.960
You can see it happen.

08:03.960 --> 08:05.640
What did you have before?

08:05.640 --> 08:07.640
And you're going to see the demo.

08:07.640 --> 08:08.800
We had to configure the kernel.

08:08.800 --> 08:10.720
Go to a lot of different steps.

08:10.720 --> 08:17.640
It actually, because I tend to like to do things, but like everyone, I don't get to do them.

08:17.640 --> 08:23.240
I spent an inordinate amount of time last night, Martin knows, because I sent his slides quite late at 2 a.m.,

08:23.240 --> 08:26.520
something like this, which is 3 a.m. in Romania.

08:26.520 --> 08:33.040
And I spent, I think, three hours recalling how do I build from scratch and GNEX.

08:33.040 --> 08:38.040
I cursed Simone a little because there was a recent change with the way we are mounting file systems.

08:38.040 --> 08:42.880
I had to squeeze a lot of items, but I managed to do it and it's now prerecorded.

08:42.880 --> 08:44.360
You're going to see it as well.

08:44.360 --> 08:47.520
But you have to go to a lot of steps here, configuration, build steps.

08:47.800 --> 08:55.800
It's an awful, awful, painstaking time that I, as an app developer, not as a kernel developer, shouldn't look into.

08:55.800 --> 08:59.800
I have to have, you're going to see a huge QMU command line.

08:59.800 --> 09:03.800
I didn't do a demo because I don't want to scare you and ruin your dreams.

09:03.800 --> 09:09.800
But if you go to a firecracker, you have a huge JSON file, you have to write the command line for it.

09:09.800 --> 09:13.800
Once again, really nasty if you're just an application developer.

09:14.080 --> 09:17.080
The application has to be porting on your craft that takes time.

09:17.080 --> 09:21.080
I mean, on any unique kernel, actually, you have to link it properly, it takes time.

09:21.080 --> 09:23.080
What do you have now?

09:23.080 --> 09:25.080
We have a set of pre-built kernels.

09:25.080 --> 09:27.080
You just do craft pooling works.

09:27.080 --> 09:28.080
That's it.

09:28.080 --> 09:29.080
I have an application.

09:29.080 --> 09:31.080
I write a small Docker file.

09:31.080 --> 09:32.080
I have my Python application.

09:32.080 --> 09:34.080
I use craft running just for you.

09:34.080 --> 09:36.080
You're going to see it.

09:36.080 --> 09:38.080
There's a single command build.

09:38.080 --> 09:40.080
Actually, there is a single one.

09:40.080 --> 09:43.080
For running, there are two of them because I'm using a bridge interface.

09:43.360 --> 09:45.360
I have to use two commands.

09:45.360 --> 09:47.360
I have to use one command to create the bridge interface.

09:47.360 --> 09:49.360
Maybe in the future, we're going to do it with one command.

09:49.360 --> 09:51.360
But one command is to create the bridge interface.

09:51.360 --> 09:53.360
The other command is to run the unique kernel.

09:53.360 --> 09:59.360
On top of that, and this is something that Simone, three talks from now, I mean, 6 p.m.,

09:59.360 --> 10:04.360
is going to show the internals of running native Linux applications.

10:04.360 --> 10:12.360
We are basically getting pre-building applications already out there in Docker Hub, and we're running them.

10:12.640 --> 10:15.640
So there's no need actually for you to do anything.

10:15.640 --> 10:17.640
You just grab them and you run them.

10:17.640 --> 10:19.640
It's that easy.

10:19.640 --> 10:21.640
That being said, let me show you the demos.

10:21.640 --> 10:23.640
That was the kind of the deletree part.

10:23.640 --> 10:25.640
Let's look at the demos.

10:25.640 --> 10:29.640
For starters, I'm going to show you the demo of the before part.

10:29.640 --> 10:33.640
This is the way it happened before, the way we were building and running kernels before.

10:33.640 --> 10:37.640
It's kind of a three-minute one, so let's just take a quick look.

10:37.640 --> 10:39.640
I'm starting a T-max screen.

10:39.640 --> 10:41.640
This is a native one.

10:41.920 --> 10:46.920
I'm doing configuration now, and just take a look at what I do.

10:46.920 --> 10:48.920
I select the platform.

10:48.920 --> 10:50.920
I'm selecting the library.

10:50.920 --> 10:52.920
There's a huge palette of them.

10:52.920 --> 10:54.920
I'm going to engine X.

10:54.920 --> 10:56.920
I'm using a main function.

10:56.920 --> 10:58.920
I'm going to VFS score.

10:58.920 --> 11:00.920
I'm selecting a pile file system and embed the initial grand disk.

11:00.920 --> 11:02.920
You don't know what to do, but that's how complicated it was.

11:02.920 --> 11:08.920
Going back, I need to use a new version that Simone introduced.

11:08.920 --> 11:10.920
I'm going to dev.

11:10.920 --> 11:12.920
I have to mount dev.

11:12.920 --> 11:14.920
Save. This is the configuration.

11:14.920 --> 11:16.920
I have to know all the steps.

11:16.920 --> 11:18.920
I have those steps.

11:18.920 --> 11:22.920
What I'm trying to do, I need to create the initial grand disk.

11:22.920 --> 11:24.920
There's a command that I need to create.

11:24.920 --> 11:26.920
There's a makeMKCpIO command.

11:26.920 --> 11:32.920
I'm packing the file system inside the initial grand disk.

11:32.920 --> 11:34.920
That's packed. I'm now building it.

11:34.920 --> 11:36.920
It's going to take about one minute to build.

11:36.920 --> 11:38.920
They're just going to look a bit about that.

11:38.920 --> 11:42.920
All of these items, of course, can be automated in some source,

11:42.920 --> 11:44.920
but you have to know them.

11:44.920 --> 11:46.920
Every time I was testing,

11:46.920 --> 11:48.920
I was trying to build something,

11:48.920 --> 11:50.920
I get this option.

11:50.920 --> 11:54.920
I'm doing a lot of community interaction.

11:54.920 --> 12:02.920
It's painful to see people constantly bumping into the same kind of issues.

12:02.920 --> 12:04.920
Are you sure you're using staging?

12:04.920 --> 12:06.920
Are you sure you're mounting 9PFS?

12:06.920 --> 12:08.920
Did you select that particular weird,

12:08.920 --> 12:10.920
maybe you don't think that option there?

12:10.920 --> 12:16.920
These items were things that people were constantly bumping into.

12:16.920 --> 12:18.920
Now, this is now going to get built.

12:18.920 --> 12:20.920
It's the final linking step.

12:20.920 --> 12:26.920
And in the end, we're going to end up with the final kernel image.

12:26.920 --> 12:30.920
I'm now adding an interesting command to create the final link.

12:30.920 --> 12:34.920
It's an interesting command to create the bridge interface.

12:34.920 --> 12:38.920
And now I have even a larger command.

12:38.920 --> 12:40.920
I know, baby, it's amazing.

12:40.920 --> 12:42.920
And it's going to run.

12:42.920 --> 12:44.920
I'm opening a second console.

12:44.920 --> 12:46.920
It's running, so it's okay.

12:46.920 --> 12:50.920
But you can imagine how much time and effort

12:50.920 --> 12:54.920
you can see that the huge command there for Kimu was to make this happen.

12:54.920 --> 12:56.920
So this was the before part.

12:56.920 --> 12:59.920
This was the thing that I would say unicunals are not there.

12:59.920 --> 13:04.920
However, let's look at something else.

13:04.920 --> 13:07.920
So what I'm now doing is I'm using craft.

13:07.920 --> 13:09.920
There are two commands.

13:09.920 --> 13:13.920
I'm using a bridge interface just to make it more realistic.

13:13.920 --> 13:17.920
So I'm using a bridge interface.

13:17.920 --> 13:23.920
And now I'm running on that bridge interface.

13:23.920 --> 13:27.920
I'm running the same engine X image that's now pre-packaged, pre-built,

13:27.920 --> 13:39.920
pre-deployed inside the registry.

13:39.920 --> 13:41.920
It started.

13:41.920 --> 13:43.920
I'm going to query.

13:43.920 --> 13:45.920
It's start behind the scenes.

13:45.920 --> 13:47.920
I'm going to query it.

13:47.920 --> 13:49.920
That's it.

13:49.920 --> 13:53.920
So I can now just say, okay, that's the VM.

13:53.920 --> 13:54.920
It started.

13:54.920 --> 13:57.920
If I want to not use it anymore, I can simply remove it.

13:57.920 --> 14:00.920
And that's it.

14:00.920 --> 14:03.920
It's just on screen, right?

14:03.920 --> 14:04.920
That's what happened.

14:04.920 --> 14:05.920
Let's look at something else.

14:05.920 --> 14:08.920
Let's look at what we do with Python.

14:08.920 --> 14:10.920
Let me say, I think this could be it.

14:10.920 --> 14:11.920
Let me see if this is it.

14:11.920 --> 14:12.920
No, this is not it.

14:12.920 --> 14:13.920
Sorry.

14:13.920 --> 14:15.920
How do I close this?

14:15.920 --> 14:16.920
Q.

14:16.920 --> 14:17.920
Okay.

14:17.920 --> 14:20.920
I think it's this one.

14:20.920 --> 14:21.920
Yeah.

14:21.920 --> 14:23.920
So Python is also there.

14:23.920 --> 14:24.920
Once again, two commands.

14:24.920 --> 14:32.920
One command to create the bridge interface.

14:32.920 --> 14:34.920
And one command to run it.

14:34.920 --> 14:38.920
So I'm using craft run minus, minus net or for the network interface.

14:38.920 --> 14:40.920
Yeah, a bit more memory because it's Python.

14:40.920 --> 14:41.920
It could be worse.

14:41.920 --> 14:43.920
It could be it could be node.

14:43.920 --> 14:44.920
Yeah.

14:44.920 --> 14:47.920
Oh, they'll go there.

14:47.920 --> 14:48.920
Okay.

14:48.920 --> 14:49.920
So I'm using Python.

14:49.920 --> 14:52.920
I'm using the latest version.

14:52.920 --> 14:56.920
It's pulling it from our registry.

14:56.920 --> 14:57.920
And it's already there.

14:57.920 --> 14:59.920
I'm just curling it.

14:59.920 --> 15:02.920
It's port 8080.

15:02.920 --> 15:04.920
And it's running.

15:04.920 --> 15:08.920
Of course, now the similar using craft PS to make sure I have the virtual machine and

15:08.920 --> 15:10.920
I'm now able to remove it.

15:10.920 --> 15:15.920
And that's going to be it.

15:15.920 --> 15:16.920
Right.

15:16.920 --> 15:17.920
Once again, two commands.

15:17.920 --> 15:18.920
One for the network.

15:18.920 --> 15:22.920
The other for starting this.

15:22.920 --> 15:23.920
How can I make this so?

15:23.920 --> 15:24.920
Okay.

15:24.920 --> 15:26.920
You saw someone starting Python.

15:26.920 --> 15:27.920
How can I do it myself?

15:27.920 --> 15:28.920
Well, I have this here.

15:28.920 --> 15:30.920
I have another server.

15:30.920 --> 15:32.920
I have some craft file.

15:32.920 --> 15:36.920
If you see here, there's a different Docker.

15:36.920 --> 15:38.920
I'm using this command.

15:38.920 --> 15:40.920
I'm saying, let's create the network.

15:40.920 --> 15:41.920
Right.

15:41.920 --> 15:43.920
And I'm going to just copy the new server.

15:43.920 --> 15:45.920
So this is the way I'm customizing the build.

15:45.920 --> 15:48.920
It's similar to the new file system.

15:48.920 --> 15:50.920
This is the new file system.

15:50.920 --> 15:52.920
And now I'm going to run this.

15:52.920 --> 15:58.920
I need to have that export because we're using build kit from Docker behind the scenes.

15:58.920 --> 15:59.920
Right.

15:59.920 --> 16:03.920
And now it's going to grab that image.

16:03.920 --> 16:04.920
It's going to grab it.

16:04.920 --> 16:05.920
That's the kernel.

16:05.920 --> 16:07.920
It's going to copy the Docker file.

16:07.920 --> 16:09.920
It's now building the Docker file.

16:09.920 --> 16:10.920
It's from scratch.

16:10.920 --> 16:12.920
It's just copying that information.

16:12.920 --> 16:15.920
Similar to what you do in a Linux environment.

16:15.920 --> 16:18.920
And I'm running.

16:18.920 --> 16:19.920
And that's it.

16:19.920 --> 16:22.920
And it works.

16:22.920 --> 16:23.920
Right.

16:23.920 --> 16:24.920
So it's now saying buy world.

16:24.920 --> 16:27.920
And finally, let me show you something a bit more complicated.

16:27.920 --> 16:28.920
Let's run flash with Python.

16:28.920 --> 16:29.920
Right.

16:29.920 --> 16:31.920
So let's do it.

16:31.920 --> 16:34.920
I have a simple flash server.

16:34.920 --> 16:38.920
I have the Docker file, which says, okay, you need to...

16:38.920 --> 16:40.920
This is similar to having a Docker installment.

16:40.920 --> 16:41.920
Right.

16:41.920 --> 16:44.920
So I have the Docker file from Python, install the requirements.

16:44.920 --> 16:48.920
Then you're going to copy the implementation on it together with the libraries.

16:48.920 --> 16:50.920
And that's it.

16:50.920 --> 16:51.920
So I have the server.

16:51.920 --> 16:54.920
I have a Docker file similar to the Docker environment.

16:54.920 --> 17:01.920
And I'm saying, hey, grab the Python image, grab the Python kernel, run this from the Docker

17:01.920 --> 17:02.920
file, and then copy the...

17:02.920 --> 17:04.920
And then execute the...

17:04.920 --> 17:05.920
My server here.

17:05.920 --> 17:06.920
Right.

17:06.920 --> 17:10.920
I'm doing this to craft this build kit export from Docker.

17:10.920 --> 17:11.920
And I'm running it.

17:11.920 --> 17:14.920
And this will end up pulling the image.

17:14.920 --> 17:15.920
So you can check this out.

17:15.920 --> 17:19.920
It's going to pull the Python image, pulling.

17:19.920 --> 17:26.920
It's going to build now via Docker, via build kit the flash item.

17:26.920 --> 17:30.920
And now it's running it.

17:30.920 --> 17:35.920
And I'm just going to just curl the virtual machine.

17:35.920 --> 17:38.920
And everything is there.

17:38.920 --> 17:40.920
Hello from Flask.

17:40.920 --> 17:41.920
Right.

17:41.920 --> 17:44.920
All of this is now possible.

17:44.920 --> 17:47.920
You have the image, node, Python, whatever you want.

17:47.920 --> 17:48.920
You have your application.

17:48.920 --> 17:50.920
Do a Docker file for it.

17:50.920 --> 17:53.920
Use Croft on it just works.

17:53.920 --> 17:57.920
So these were all the items that you saw earlier.

17:57.920 --> 18:00.920
All of these you can check in our catalog.

18:00.920 --> 18:01.920
There is an...

18:01.920 --> 18:02.920
We call it the community catalog.

18:02.920 --> 18:07.920
There is also on the company side of Croft, there's a kind of a more commercial version

18:07.920 --> 18:08.920
of Croft.

18:08.920 --> 18:11.920
There are guides that we just published that are available showing you how you can use

18:11.920 --> 18:14.920
the catalog or add images to the catalog.

18:14.920 --> 18:16.920
And you can simply take care of this.

18:16.920 --> 18:19.920
Just run on command or to command and it works.

18:19.920 --> 18:20.920
Unicolas are here.

18:20.920 --> 18:23.920
All of those items are now in check.

18:23.920 --> 18:27.920
And together with optimizations such as those mentioned by Andrea and Vali,

18:27.920 --> 18:31.920
we are able to truly make use of cloud-based deployments.

18:31.920 --> 18:35.920
There are some other resources, catalog guides, see us on GitHub.

18:35.920 --> 18:38.920
If you're wanting to sit on a commercial side of things, as Maloga says,

18:38.920 --> 18:43.920
there is a platform using Croft Cloud, you can visit that and find more information.

18:43.920 --> 18:44.920
That's it.

18:44.920 --> 18:45.920
Thank you so much.

18:45.920 --> 18:52.920
Thank you.

18:52.920 --> 18:53.920
Thank you.

18:53.920 --> 18:58.920
We have time for one or two quick questions.

18:58.920 --> 19:00.920
Oh, God.

19:00.920 --> 19:10.920
You have to get the mic for the stream.

19:10.920 --> 19:15.920
So you mentioned that Docker isolation, sometimes the resource control, sometimes is it enough?

19:15.920 --> 19:18.920
Can you name some cases where it's not enough?

19:18.920 --> 19:19.920
Not necessarily.

19:19.920 --> 19:21.920
I'm not saying it's not enough.

19:21.920 --> 19:25.920
It's that the VM is, I would say, a better one.

19:25.920 --> 19:32.920
Because when you do a VM, you actually are able to provide different volume.

19:32.920 --> 19:40.920
And I think that also, CPU isolation, I'm not sure if, I don't know much about C group.

19:40.920 --> 19:45.920
It's kind of, I know VM resource control is better.

19:45.920 --> 19:49.920
I'm not saying it's for all these cases.

19:49.920 --> 19:52.920
I'm sure there are cases where Docker containers may be enough,

19:52.920 --> 19:56.920
but maybe there are cases where you want to have VM-based isolation.

19:56.920 --> 19:58.920
And Unicron will provide that.

19:58.920 --> 20:00.920
Final question?

20:00.920 --> 20:02.920
Yeah.

20:02.920 --> 20:04.920
Oh.

20:04.920 --> 20:06.920
Maybe pass it on.

20:06.920 --> 20:08.920
Maybe be asked.

20:08.920 --> 20:09.920
Maybe just ask.

20:09.920 --> 20:10.920
Maybe just, I'm going to repeat the question.

20:10.920 --> 20:11.920
Yeah.

20:11.920 --> 20:12.920
Yeah.

20:12.920 --> 20:18.920
So is that like an underlying kind of road time that would manage these VMs

20:18.920 --> 20:21.920
and how much your container, do you need a doctor to do this?

20:21.920 --> 20:25.920
Would there be a similar kind of Unicron or do you need a problem?

20:25.920 --> 20:26.920
Yeah.

20:26.920 --> 20:27.920
Yeah.

20:27.920 --> 20:30.920
There is actually, I'm not the person to answer that.

20:30.920 --> 20:32.920
It's Alex, he's kind of a tooling guy.

20:32.920 --> 20:34.920
But there is work being done towards that.

20:34.920 --> 20:43.920
There was something that was at some point called RunU for Run Unicron.

20:43.920 --> 20:48.920
And I don't know, actually the Nubificus guys have something that's called UK Run.

20:48.920 --> 20:50.920
So there's work being done for that.

20:50.920 --> 20:54.920
That's planned for Kubernetes integration if it's not already there.

20:54.920 --> 20:56.920
So that's already ongoing.

20:56.920 --> 21:01.920
If it's not yet public, it's because we have focus on getting items going first.

21:01.920 --> 21:10.920
But integration and tooling on all those container-based ecosystem is high priority on the tooling side.

21:10.920 --> 21:14.920
Yeah, yeah, for sure.

21:14.920 --> 21:18.920
It's on the menu.

21:18.920 --> 21:20.920
Thank you, Rosvan.

21:20.920 --> 21:21.920
Thank you.

21:21.920 --> 21:22.920
Time's up.

21:22.920 --> 21:23.920
Thanks for everything.

21:23.920 --> 21:24.920
For anything we can talk in the breaks.

21:24.920 --> 21:25.920
Thanks.

21:25.920 --> 21:26.920
Thanks.

