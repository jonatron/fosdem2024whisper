WEBVTT

00:00.000 --> 00:11.520
So there may or may not be time for questions. There's a lot of detail. This is a 60 minute

00:11.520 --> 00:20.520
talk compressed down to hopefully 22ish minutes. So we will see how we go. But yeah, I'm here

00:20.520 --> 00:24.880
to talk about the technical details of interoperability. I'm also Travis. If you don't know me, I'm

00:24.880 --> 00:28.680
the director for standards development at matrix.org. I'm also on the spec core team.

00:28.680 --> 00:35.600
I run T2Bot and I work at element for trust and safety. I have a few jobs. But good news,

00:35.600 --> 00:40.520
there's already more that we can talk about. So Matthew had the talk this morning. If you

00:40.520 --> 00:46.800
haven't seen that or seen the recap of it about 10 minutes ago, covers DMA and the timelines

00:46.800 --> 00:52.600
in a lot more detail. To recap though, the DMA requires gatekeepers or large messaging

00:52.600 --> 00:57.680
providers to open up their APIs and their systems for interoperability. Encryption must be

00:57.680 --> 01:03.640
maintained between those providers. So you cannot break encryption for the sake of interoperating.

01:03.640 --> 01:07.680
You have to maintain it. These messengers have three options. You can become multi-headed

01:07.680 --> 01:12.240
similar to Beeper Mini where you have all the networks available in your one client.

01:12.240 --> 01:15.960
And you just kind of switch between them. You can create a bridge app where the user

01:15.960 --> 01:20.440
downloads a third thing and then you bridge locally on the device. That works. It's not

01:20.440 --> 01:26.840
great. Or you can speak a common protocol. We've been doing that for the last year.

01:27.840 --> 01:35.160
Probably longer. And oh yeah, they have to do this all by March 7th this year. So with

01:35.160 --> 01:39.960
that in mind, there are many projects involved as well. There is the more instant messaging,

01:39.960 --> 01:45.000
interoperability working group or MIMI at the IETF. They are trying to specify a standard

01:45.000 --> 01:51.360
that does this stuff. We are very frequent there. We are a direct contributor to this.

01:51.360 --> 01:56.820
I have written a MIMI protocol document in association with a few other people on the

01:56.820 --> 02:02.460
design team to try and simplify a lot of the components, particularly what linearized matrix

02:02.460 --> 02:08.020
is. Also, linearized matrix was originally created as this simplified version of matrix

02:08.020 --> 02:15.780
because it turns out that you don't necessarily need a ton of the fully compatible DAG stuff

02:15.780 --> 02:22.300
or even messaging history for interoperability. A lot of the existing providers just kind of

02:22.380 --> 02:27.580
want to throw messages around the place. They don't necessarily want to just kind of keep

02:27.580 --> 02:31.900
these things around. Obviously, of course, we have matrix. Hopefully, everybody here is familiar

02:31.900 --> 02:38.420
with that. But it is the decentralized and fully featured version of an interoperable protocol.

02:40.420 --> 02:46.500
What parts of interoperability do we have to worry about? A few. There is encryption. This

02:46.500 --> 02:50.580
kind of fits into a weird L shape. You have content format within that. But the encryption,

02:50.780 --> 02:54.380
we have to make sure that all the messages are secure. We have to make sure that everything is

02:54.380 --> 02:59.180
the same. Of course, we have to make sure that it is consistent across the providers. The content

02:59.180 --> 03:04.460
format, what do messages actually look like? We have to make sure that that is the same because

03:04.460 --> 03:09.340
the servers can't help us here. The clients have to agree on this. That is more of a challenge.

03:09.340 --> 03:14.900
We also need an authorization policy so people can be banned because they need to. Then we also

03:15.020 --> 03:21.220
have messages that people might not be allowed to send in certain rooms. Of course, we also have

03:21.220 --> 03:27.940
transport. The transport is just how the servers communicate because we have a room model that

03:27.940 --> 03:33.580
looks something like this. The room model is a combination of the encryption authorization

03:33.580 --> 03:40.380
policy and transport. We also have a definition of membership or participation, a little bit more

03:40.460 --> 03:46.220
on that in a minute. And also how the messages are found out themselves. In the very simplest

03:46.220 --> 03:50.460
scenario, we have clients talking to servers, servers talking to each other, and encrypted

03:50.460 --> 03:55.860
messages flowing between clients effectively. It gets more complicated when you add a third server,

03:55.860 --> 04:02.700
so we will do that later. Some of these problems are easier than others. Namely, transport. Super

04:02.780 --> 04:10.780
easy to solve. Pretty much everybody uses some form of HTTPS. Mimi wants to use MTLS. Linearized

04:10.780 --> 04:15.700
Matrix uses the same system that Matrix already does where you have a signed or a signing key that

04:15.700 --> 04:22.260
kind of gets thrown around a bit. It is unclear what the actual format over HTTP would be. Matrix

04:22.260 --> 04:28.540
uses JSON. Mimi wants to use some form of binary. Unclear what that actually is. We are also

04:28.580 --> 04:33.540
considering a binary event format specifically for this kind of thing. Protobuf and Seabor are

04:33.540 --> 04:41.220
kind of on the top. But to be determined, clients would not be expected to consume that binary

04:41.220 --> 04:48.540
format yet. I should probably just add that in. But yeah, we will end up using some sort of binary

04:48.540 --> 04:54.140
over HTTPS mechanism authorization exactly to be determined later. The other easy thing is

04:54.140 --> 04:58.220
authorization policy. Mimi does not define one. We have been working without one. We have just

04:58.300 --> 05:04.340
been assuming that people are able to send messages. Matrix obviously has one. Role-based access

05:04.340 --> 05:11.700
control is super popular amongst a lot of these discussions. There is those two MSCs there.

05:11.700 --> 05:19.340
4056 covers the decentralization part of RBAC. Then you also have 2812 where it basically

05:19.340 --> 05:26.500
rolls as state events. It is an early form of RBAC. Linearized Matrix uses the existing

05:27.260 --> 05:32.300
authorization rules. Matrix authorization rules clearly already work. People have been using them

05:32.300 --> 05:37.980
for almost a decade now. They should be fined. We will figure out what Mimi ends up with

05:37.980 --> 05:44.940
eventually, hopefully. The harder parts are encryption. Most messaging providers use lib

05:44.940 --> 05:51.580
signal or something that is a double ratchet. We also have a double ratchet-like implementation

05:51.620 --> 06:01.060
called OM. It was not previously interoperable with lib signal up until about 2 a.m. tonight. We

06:01.060 --> 06:05.580
now have inter-OM, which has that X3DH support as well as some of the other delts you need to be

06:05.580 --> 06:10.780
able to support that sort of interoperability. Megalom is what we use in group chats to try and

06:10.780 --> 06:16.700
alleviate the load. Otherwise, with OM, you have to send a number of events for the number of devices

06:16.780 --> 06:22.260
in the room, which obviously causes problems when you have multiple devices per user or multiple

06:22.260 --> 06:31.060
users in a room. Matrix HQ would be a nightmare. The double ratchet does rely on existing

06:31.060 --> 06:37.860
infrastructure in order to send keys. It has no concept of membership. It does not know who to

06:37.860 --> 06:43.740
send the keys to on its own. You have to tell it who to encrypt to and then also send those keys

06:43.820 --> 06:49.500
yourself. Some messaging providers, namely Google, have announced that they will be using MLS. We

06:49.500 --> 06:56.060
also obviously want to use MLS. REMLST.com is where we're tracking that progress. MLS does have

06:56.060 --> 07:01.860
a concept of built-in membership, so it does know who it needs to send messages to. It obviously

07:01.860 --> 07:09.980
doesn't send the messages itself, but more on that in a second, namely this slide. RFC 942.0,

07:10.060 --> 07:16.620
that is where the IETF has specified this. I have a really awful crash course guide because I am not

07:16.620 --> 07:25.820
a cryptographer, but there it is. But yeah, there is a binary tree, so you have a root key and you

07:25.820 --> 07:35.740
have multiple nodes underneath that. With that concept, you end up with a concept of membership

07:35.820 --> 07:43.980
where only users or members that have certain keys can see other keys. That is how you get to

07:43.980 --> 07:50.700
know who to send the keys to, particularly the decryption keys. Mimi has refused to implement

07:50.700 --> 07:56.220
any other encryption other than MLS. They are obviously considering it as part of double

07:56.220 --> 08:03.580
ratchet because we do need an onramp. But with the IETF, they tend to get a little bit stuck in

08:03.980 --> 08:11.820
the RFCs. We are also considering MLS, obviously, and so we want to extend it. Decentralized

08:11.820 --> 08:19.660
environments, namely matrix, will have to use DMLS or similar. Membership. As part of the

08:19.660 --> 08:24.620
discussions with Mimi, we have been having some arguments, we will say, about what it actually

08:24.620 --> 08:32.220
means to define membership. We have decided that users join rooms and clients encrypt messages.

08:34.540 --> 08:40.940
Both MLS and double ratchet deal with clients. When a user joins the room, all of their clients

08:40.940 --> 08:48.860
join as well. This is hopefully not a novel thing that is here, but it is written in stone now.

08:50.460 --> 08:56.780
So we need to synchronize these two concepts. We call users to have a participation state or

08:57.260 --> 09:03.340
exist on a participation list. And then clients have membership. So users, participation,

09:03.340 --> 09:08.220
clients, membership. We also have to make sure that these are atomic operations because otherwise

09:08.220 --> 09:13.260
somebody joins the crypto state, but they are not part of the actual user state. That causes issues.

09:15.500 --> 09:21.500
So Mimi has started proposing a bunch of MLS extensions to persist application

09:21.500 --> 09:26.380
state within an MLS group. Because MLS has those extensions that you can just store arbitrary

09:26.380 --> 09:33.980
things, making the blob even larger so you must store it in the media repo. These are new as of

09:33.980 --> 09:40.780
like a week and a half ago, but it is called AppSync. It is a generic mechanism. Conveniently,

09:40.780 --> 09:47.180
it would basically be mapped to state events in matrix. So you can just add arbitrary information

09:47.180 --> 09:53.180
to the group, namely with a key and some sort of content. And then there are some operations

09:53.180 --> 10:02.780
that apply where you can add, remove, update, that sort of stuff. But yeah, it is visible to servers,

10:02.780 --> 10:09.180
but servers can't see the actual encrypted messages part of MLS. They can just see that

10:09.180 --> 10:12.860
state changes are happening and potentially what's inside those state changes, which is why they

10:12.860 --> 10:18.620
would map to state events in matrix. Double ratchet and participation is a bit harder.

10:19.180 --> 10:25.740
Because double ratchet, again, doesn't have a concept of membership. It's not terribly difficult

10:25.740 --> 10:32.940
to map these. It's a little complicated sometimes. So there's a couple of MSCs there that list this

10:32.940 --> 10:42.300
sort of information, namely the crypto IDs Matthew was just talking about. And then yeah, we translate

10:42.380 --> 10:50.300
these concepts to Mroom member state events as well as device lists on matrix. But regardless of

10:50.300 --> 10:56.140
the protocol, we want to make sure that people currently on double ratchet have a way up to MLS.

10:57.500 --> 11:03.260
So it's a natural evolution of the application rather than forcing somebody to effectively fork

11:03.260 --> 11:10.380
their own client, which brings us a little bit into content format. So clients need to end up

11:10.460 --> 11:15.260
encrypting and decrypting the same thing. Otherwise, there's going to be issues. Because

11:15.820 --> 11:19.100
if you send a text message to somebody and they just don't know what to expect,

11:20.060 --> 11:24.620
then there's not going to see anything. So we need some form of extensibility because

11:25.180 --> 11:29.660
messaging also has a ton of features. And it's constantly evolving. Servers can't help with

11:29.660 --> 11:35.020
this because it's already encrypted. And of course, it should be as small as possible. It

11:35.020 --> 11:42.220
should require minimal processing power because not every client is a laptop. Or sometimes the

11:42.220 --> 11:49.900
laptop is a bit slow. So Mimi has worked on their own TLS encoded multi part MIME format. It looks

11:49.900 --> 11:57.100
a lot like multi part email. It's not the greatest, but it is a notional format while we try and work

11:57.100 --> 12:02.300
out the exact things. But matrix already has events and you can already define your own custom event

12:02.300 --> 12:12.540
types. And you can already add arbitrary content. But what if we made that way more extensible?

12:12.540 --> 12:19.340
So we introduce extensible events or MSC 1767. We use content blocks to persist information inside

12:19.340 --> 12:26.620
of an event. We specify the course blocks there. And then we also try to make sure that the

12:27.580 --> 12:34.060
client can render arbitrary event types that they don't know about. So we lose a little bit of

12:34.060 --> 12:39.660
richness in the sense that if a client does encounter an unknown event, that they have to

12:39.660 --> 12:44.140
figure out how to render that. And it might not render in the same way for everybody, but at

12:44.140 --> 12:49.100
least render the same information for everybody. And that's the critical part. So an extensible

12:49.100 --> 12:54.940
event looks a little bit like this. This is just a basic text message saying hello world. So if

12:54.940 --> 12:59.820
your client supports HTML, it picks the HTML format. If it doesn't support HTML, supports the

12:59.820 --> 13:05.820
basic format. But critically, you have a type of m dot message and you have a content block of m dot

13:05.820 --> 13:12.940
text. So if we add a little bit more richness to that and create a fake schema for polls that

13:12.940 --> 13:18.380
definitely doesn't exist, please see the MSC for a real schema. You have an unknown event type for

13:18.380 --> 13:23.820
some clients, namely org matrix poll start. So you still have that text content block. And then

13:23.820 --> 13:27.580
you also have this poll content block, which gives you a little bit more information about how to

13:27.580 --> 13:33.340
render these events. So if your client knows what that event type is, I can go into the content,

13:33.340 --> 13:38.620
pull out the org matrix poll content block, render that in its UI, and then the client can

13:38.620 --> 13:44.940
interact with it normally. Otherwise, you end up with just the text and it is suitably okay. It's

13:44.940 --> 13:53.580
not great. But you still have the same information from the poll. And so yeah, currently extensible

13:53.580 --> 13:59.820
events are JSON. But again, you could make this a binary format in the future. More events get

13:59.820 --> 14:04.060
rendered by more clients, which is great. You can create more custom event types. You can do all

14:04.060 --> 14:10.060
sorts of fun stuff to be determined exactly what all of this looks like. We're still in the process

14:10.060 --> 14:18.940
of specifying all of the pieces, particularly the core content blocks, and also a registry so you

14:18.940 --> 14:24.780
can actually implement a client that understands all of these things. So a little bit on room models.

14:25.660 --> 14:30.060
The Mimi room model looks like this. So when you add the third server, there's obviously a little

14:30.060 --> 14:37.260
bit more complexity. Mimi primarily uses a hub and spoke fan out. So you have one central server

14:37.260 --> 14:43.660
per conversation, not for the entire global network, that is responsible for distributing

14:43.660 --> 14:49.580
messages. So server B and C try to avoid talking to each other if they absolutely can. And they

14:49.580 --> 14:53.980
talk through server A instead. So server A is responsible for sequencing, which is important

14:53.980 --> 15:01.180
for MLS. It has those characteristics in play. And then yeah, the follower servers, as they're

15:01.180 --> 15:05.820
called, go through that. And encrypted messages still flow between the clients as normal. The servers

15:05.820 --> 15:10.220
can't see those messages. So then we have the question of what does linearized matrix look like?

15:10.860 --> 15:16.620
It's exactly the same thing, just different objects, which is particularly interesting when it comes

15:16.620 --> 15:25.340
to the fact that it was rejected. Because it uses just regular matrix events. It's the same room

15:25.340 --> 15:29.660
state. It's the same matrix event stuff. It's a stripped down version of the server to server

15:29.660 --> 15:35.420
API because you don't need all the DAG resolution stuff if you don't have a DAG. Also, your DAG

15:35.420 --> 15:40.300
is now a linked list. So you don't have any state resolution to do. You have the same authorization

15:40.300 --> 15:45.900
rules. You can use the same extensible algorithms for encryption. You can use MLS, double ratchet,

15:45.900 --> 15:50.780
your own thing if you're insane enough to do that. And then you have all of the same capabilities of

15:50.780 --> 15:57.260
matrix. And you have the history and all of that. But critically, you can support having a DAG capable

15:57.260 --> 16:05.740
server in the room. You don't need to give up your decentralization. You can end up with a hub

16:05.740 --> 16:14.460
server that basically acts as that linearization algorithm or does linearization algorithm. And

16:14.460 --> 16:21.420
it also still persists the events, still distributes them. So when you get into decentralization,

16:21.420 --> 16:27.900
namely how matrix works, you use a DAG. You have full mesh fan out where each server contacts

16:27.900 --> 16:33.660
every other server instead of going through a central hub. Conflicts of the DAG are used or

16:33.660 --> 16:37.660
done through state resolution. So if two people try to do the same thing, somebody has to win.

16:39.100 --> 16:45.020
And the good news is state resolution can also be used to linearize the DAG. So through use of a

16:45.020 --> 16:51.260
protocol converter, which may or may not be a dual stack server, you can then bring these centralized

16:51.260 --> 16:59.100
systems, even linearized matrix into matrix to just further route them. So protocol conversion,

17:00.140 --> 17:07.340
they aren't bridges. Bridges somewhat necessar- they're necessarily break the encryption because

17:07.340 --> 17:13.580
when you're converting to signal to matrix prior to our existing or to our new interoperability

17:13.580 --> 17:19.180
capabilities, you end up decrypting the network on both sides of the bridge and re-encrypting. So

17:19.180 --> 17:23.820
you're only really encrypting to the bridge and not beyond it. So protocol converter doesn't

17:23.820 --> 17:29.660
decrypt messages. It just converts the envelope format to another format. So that way you can

17:30.860 --> 17:35.420
just keep sending your messages. This may also include translating some of the concepts. For

17:35.420 --> 17:39.980
matrix, we have two device events, some other protocols, namely Mimi, just send everything

17:39.980 --> 17:46.860
over what they call events. So we would have to translate those concepts into the appropriate

17:46.860 --> 17:52.060
matrix APIs. Again, you can make this either with an app service or as a dual stack home server.

17:52.780 --> 17:57.260
So instead of having a multi-head messenger, you have a multi-head server. And then, yeah,

17:57.260 --> 18:03.500
use msc3983 or 3984 to bridge the particular crypto concepts if your server doesn't necessarily

18:03.500 --> 18:10.620
support those key formats. So this is what it looks like. You may have recognized it. I stole

18:10.620 --> 18:18.060
it from Matthew's slides. So if you have a gatekeeper on the left there, you can do a protocol

18:18.060 --> 18:23.500
conversion. And that might be attached to a single server. It runs through matrix. And then you run

18:23.500 --> 18:28.700
another protocol conversion to bring it into linearized matrix or Mimi, where you have that

18:28.700 --> 18:33.100
hub and spoke, namely that the bottom two servers there aren't talking to each other directly.

18:33.820 --> 18:41.100
So those two nodes might be the same physical server, just running dual stack and not doing

18:41.100 --> 18:47.820
protocol conversion. But that's all right. So there are a few missing pieces. We haven't talked

18:47.820 --> 18:52.060
about anything to do with identity. How do you convert a phone number or a name or an email

18:52.060 --> 18:57.260
address into something routable? Who knows? That needs to be defined. We currently have identity

18:57.260 --> 19:01.420
servers in matrix. They're a bit centralized. We're hoping that somebody in Mimi can actually

19:01.420 --> 19:07.660
solve this problem for us. We also have an interesting idea around consent. Presumably,

19:07.660 --> 19:12.700
you don't want to receive spam. So how do you make sure that the person that is messaging you

19:12.700 --> 19:19.260
is allowed to message you? We also have anti-abuse. How do you report these messages over federations

19:19.260 --> 19:24.780
or over servers? How do you make sure that the servers can implement their own anti-abuse measures

19:25.260 --> 19:33.740
using whatever identifiers they can? Mimi also is not necessarily defined the exact identifiers

19:33.740 --> 19:38.780
that they want to use. Matrix already has user IDs, room IDs, aliases, that sort of stuff. But

19:40.220 --> 19:48.540
who knows? Maybe something different would work. So room metadata. Again, where does the

19:48.540 --> 19:54.220
room name go? Who knows? We'll have to figure that out. Matrix state events would probably be fine.

19:54.300 --> 19:58.140
Same thing with ordering. MLS requires ordering. There's a discussion around whether or not the

19:58.140 --> 20:04.300
clients also need that ordering. So what's next? We have no idea. As Matthew has mentioned, again,

20:04.300 --> 20:10.300
I'm just stealing from his slides. So linearized matrix will probably get updated as an MSC

20:10.300 --> 20:16.380
because currently the MSC is one version behind from the IETF draft. And the gatekeepers will

20:16.380 --> 20:21.180
have to publish their plans by March 7th. We'll see what happens there. The protocol converter

20:21.180 --> 20:27.100
concept will continue to be refined, of course. Mimi will also make some form of progress,

20:27.100 --> 20:32.220
hopefully get refined as well. And yeah, funding the foundation is the best way to make this work.

20:32.220 --> 20:46.060
So, questions. Yes.

20:46.620 --> 20:52.380
What are the stakeholders in the Mimi and why are so different stakeholders, like,

20:52.380 --> 20:55.660
not using the matrix approach? And what are the different interests here?

20:56.780 --> 21:03.180
Yeah, so the question is what are the different stakeholders and why are we going after

21:03.180 --> 21:09.980
certain approaches, I believe. So there are several players in the Mimi space. So we have

21:10.060 --> 21:17.980
obviously ourselves. We also have wire. There's Google and I'm forgetting all of the other ones,

21:17.980 --> 21:28.220
but there's... Yeah, Cisco, Wicker, Phoenix, and a few others. There's a few hundred people in

21:28.220 --> 21:33.660
the Mimi working group. You can see their company association as part of the membership list.

21:34.940 --> 21:39.420
I would suggest going there. As for the different approaches, everybody wants

21:39.500 --> 21:45.820
everybody to use their thing. We're no exception. We just think that ours is better.

21:48.780 --> 21:56.220
But yeah, we've been doing this for a while. Matrix was originally built as an interoperable

21:56.220 --> 22:03.580
protocol. And here we are with a legal requirement to have interoperability. So, surely Matrix is

22:03.580 --> 22:06.140
designed for that, is kind of our thought.

22:06.860 --> 22:17.020
We used to rely heavily on canonical JSON to maintain the

22:17.020 --> 22:26.700
technicality of the company. How does that translate to the Mimi particular and get the

22:27.820 --> 22:34.220
intracorrel? Yeah, so the question is how... Like we've previously relied on canonical JSON.

22:34.220 --> 22:39.820
How does that translate to Mimi and just general approaches with interoperability? So,

22:40.620 --> 22:46.940
canonical JSON has all sorts of interesting issues with it. What happens if you have multiple

22:46.940 --> 22:53.340
keys? What happens if the keys use a weird former of UTF-8? That sort of stuff. It's a very complicated

22:53.340 --> 22:59.100
set of rules that can realistically never be fully defined. So with a binary format, namely,

22:59.100 --> 23:03.580
that's what Mimi's interested in, you don't necessarily need a canonicalization,

23:03.580 --> 23:10.140
because if you keep the signature for the event next to the event, rather than in the event,

23:10.140 --> 23:16.060
like we currently have in Matrix, you are able to just sign the series of bytes. And the bytes

23:16.060 --> 23:23.180
can be in whatever order. You can deserialize them, see them more easily, and then check the signature

23:23.180 --> 23:30.700
much faster. So that's kind of where the Mimi direction is going, is we want to avoid a canonicalization

23:30.780 --> 23:37.980
algorithm, but we do need the more specific standard for what's contained in those bytes.

23:38.940 --> 23:42.780
This is something to be supported either throughout the chain,

23:53.180 --> 24:01.980
yes, we are going to be pushing more towards keeping the, instead of trying to make everybody use

24:01.980 --> 24:07.100
the existing matrix thing, I would suggest that matrix kind of adopt more of that binary event

24:07.180 --> 24:10.540
signing instead. Yes.

24:10.540 --> 24:12.860
You had a slide with things you didn't talk about?

24:12.860 --> 24:13.100
Yes.

24:15.100 --> 24:20.940
In many places, primarily in the Mimi working group, that's where a lot of these conversations

24:20.940 --> 24:25.660
are happening, as well as on the design team for Mimi. But if you are interested in them,

24:25.660 --> 24:33.740
or you have ideas, feel free to pop by the Matrix spec room on Matrix, and we'll be happy to engage.

24:33.740 --> 24:36.620
Do I have time for one more question? All right.

24:51.500 --> 24:59.100
Yes. All right. So how do we avoid, basically if you have two protocol converters,

24:59.100 --> 25:03.180
say they're both talking to the same network, how do you avoid message duplication?

25:06.300 --> 25:13.020
Good question. We'll have to experiment with it. We will be trying to

25:13.980 --> 25:19.820
figure out exactly what that looks like. We kind of have to wait until March 7th to see

25:20.700 --> 25:27.740
what the actual gatekeepers, namely WhatsApp and Facebook Messenger, have to offer for that

25:27.740 --> 25:36.860
certain capability. Thank you, Travis. Thank you.

