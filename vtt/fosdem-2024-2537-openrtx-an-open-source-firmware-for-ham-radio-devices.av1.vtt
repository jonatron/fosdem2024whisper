WEBVTT

00:00.000 --> 00:13.960
Hi, welcome everyone and a small technical problem, I almost lost my voice when standing

00:13.960 --> 00:15.440
at the ham radio booth.

00:15.440 --> 00:19.280
So you know my voice is not very good today.

00:19.280 --> 00:25.200
Anyway, I'm going to talk about the OpenRTX project which is an open source firmware for

00:25.200 --> 00:27.200
ham radio devices.

00:27.200 --> 00:34.760
We will see it's not only an open source firmware, it's also a little more.

00:34.760 --> 00:36.520
First of all, who am I?

00:36.520 --> 00:44.600
Also known as Redman on the various communication channels, Matrix and Discord and so on.

00:44.600 --> 00:47.360
I come from Milan, Italy.

00:47.360 --> 00:56.280
I'm a ham radio operator since 2017 as India Uniform 2 kilo Whisky Oscar.

00:56.280 --> 01:05.600
I do not do so much ham radio activity but like on air, I do it on hardware and on code.

01:05.600 --> 01:13.000
I'm a firmware developer by profession and for I work in motorsport industry.

01:13.000 --> 01:21.440
I'm co-founder and developer of OpenRTX and also member of the M17 team since 2021.

01:21.440 --> 01:30.600
So OpenRTX, it's as I say, an open source firmware for ham radio devices which is by

01:30.600 --> 01:38.760
design modular which means that you can, it's designed to allow you to easily add or remove

01:38.760 --> 01:42.320
components.

01:42.320 --> 01:48.360
It's designed to be easily portable to new devices.

01:48.360 --> 01:54.280
You want to have it on whatever radio or whatever device you prefer.

01:54.280 --> 02:01.600
You can almost take it and implement a couple of files and have it up and running on your

02:01.600 --> 02:03.240
new device.

02:03.240 --> 02:11.120
And finally, it's easily extendable to new protocols which means that we try to standardize

02:11.120 --> 02:17.480
the interface between the firmware core and the protocols so that you can implement your

02:17.480 --> 02:24.640
own protocol in the firmware without too much pain.

02:24.640 --> 02:32.920
Finally, it's currently supporting only FM and M17 even though it has been developed

02:32.920 --> 02:35.800
primarily on DMR devices.

02:35.800 --> 02:41.200
I will tell you why it does not support DMR now.

02:41.200 --> 02:47.080
And finally, not written here, licensed under GPLV3.

02:47.080 --> 02:49.200
So a bit of timeline.

02:49.200 --> 02:57.000
The project started in March 2020 and it started because of COVID.

02:57.000 --> 03:04.360
It started because me and Nicola, the uniform 2 kilo indian November were at home basically

03:04.360 --> 03:05.920
with nothing to do.

03:05.920 --> 03:14.520
We decided to try porting the OpenGD77 project to the Taitira MD380 which at the time was

03:14.520 --> 03:23.800
known also and it's still known also because of the work done by Trevis Goodspeed on MD380

03:23.800 --> 03:24.800
tools.

03:24.800 --> 03:31.800
He did a lot of reverse engineering, modding and work on the original firmware.

03:31.800 --> 03:38.960
Then in September 2020 after a bit of work already we already brought up the radio driver,

03:38.960 --> 03:42.360
the display and a bunch of stuff.

03:42.360 --> 03:51.120
We realized that the OpenGD77 firmware was too much connected with the structure of the

03:51.120 --> 03:52.120
radio.

03:52.120 --> 04:00.120
So we decided to, okay, let's take everything, restart from scratch, design things from top

04:00.120 --> 04:04.040
to bottom instead of adapting the firmware to the hardware.

04:04.040 --> 04:10.120
So yeah, we abandoned the original idea of the porting and we can say it's the official

04:10.120 --> 04:17.840
beginning of OpenRTX because we created a separated repo with the OpenRTX name before

04:17.840 --> 04:23.080
it was known as, it started as OpenDMR.

04:23.080 --> 04:34.960
Only 2021, so like four months later we had the first release, V0.1 with working FM, transmission

04:34.960 --> 04:39.960
reception MD380.

04:39.960 --> 04:46.840
Also one month later we joined the M17 team and we started doing some experimentation about

04:46.840 --> 04:51.560
transmitting M17 with the MD380.

04:51.560 --> 05:04.760
A bit of time after we brought up the support for GD77, MDM18, M1, MD380 plus a lot of work

05:04.760 --> 05:13.760
in the middle and finally in May 2022 we released the V0.3.3 version which has full support

05:13.760 --> 05:16.040
for M17 voice transmission.

05:16.040 --> 05:22.480
But now basically since that version you can take radio and flash the firmware and you

05:22.480 --> 05:29.080
can use it for M17.

05:29.080 --> 05:38.040
Then November 2022 we had a huge contribution from a home radio operator from Australia

05:38.040 --> 05:45.600
which implemented the voice prompts for vision impaired operators for extended accessibility

05:46.600 --> 05:55.360
and in the end October 2023 we wrote a BSP for the Lilligo TTWR Plus which is a small device

05:55.360 --> 06:03.880
you can buy easily and play with with ESP32 and radio module and various technical improvements

06:03.880 --> 06:11.160
in the middle, restructurations, every 10,000, M17, MD later on.

06:11.160 --> 06:15.040
A lot of stuff and yeah more to come.

06:15.080 --> 06:18.440
So the supported devices are those.

06:18.440 --> 06:22.960
We saw them in also in the timeline.

06:22.960 --> 06:31.840
We have the two Taitira, Retivis radios, MD380 single band, the other one is dual band,

06:31.840 --> 06:38.560
single band is UHF or VHF and the other is VHF and UHF.

06:38.560 --> 06:42.160
They both do FM and M17.

06:42.160 --> 06:53.720
GD77 and DM1801 they do only FM, they are DMR radios, they cannot do M17 for technical

06:53.720 --> 06:54.720
reasons.

06:54.720 --> 07:02.640
I will give you a bit more details about M17 implementation later and I will tell you why

07:02.640 --> 07:06.320
those radios cannot support M17.

07:06.360 --> 07:16.960
We have the M17, MD17 and then finally the Lilligo radio which now does only FM in the

07:16.960 --> 07:24.760
future is going to be, is going to also support M17.

07:24.760 --> 07:31.040
The hardware is good, it's just a matter of writing drivers which is not an easy task

07:31.040 --> 07:32.040
always.

07:32.280 --> 07:38.160
So the internal structure is of the firmware is this one.

07:38.160 --> 07:44.680
There is at the bottom there is an interface with the operating system which can be either

07:44.680 --> 07:46.360
real time or not.

07:46.360 --> 07:52.440
It's preferred to have a real time operating system on the radios because you have to do

07:52.440 --> 08:00.520
protocols and protocols have timings and so you know you cannot just have like normal

08:00.520 --> 08:01.720
scheduling.

08:01.720 --> 08:09.920
Then we have our hardware interface API which is a set of other files which define the functions

08:09.920 --> 08:16.040
used for keyboard and display and so on.

08:16.040 --> 08:21.800
In the middle which is the code which is common between all the devices.

08:21.800 --> 08:25.320
I called it the core part.

08:25.320 --> 08:32.600
It has a small graphics library written by us.

08:32.600 --> 08:40.360
We thought about using LVGL but it was a little bit too heavy because one of the objectives

08:40.360 --> 08:45.000
is to keep the code size as small as possible.

08:45.000 --> 08:50.240
So LVGL was a little too big at least for some devices.

08:50.680 --> 08:55.160
There is GPS for the radios who have the GPS.

08:55.160 --> 08:57.120
There are voice prompts.

08:57.120 --> 09:04.080
All the system to have save, restore of user settings and default settings and settings

09:04.080 --> 09:05.080
management.

09:05.080 --> 09:11.880
There is the code plug system which allows you to have a list of channels and contacts

09:11.880 --> 09:16.800
and stuff like that and saved in the radio.

09:17.360 --> 09:28.000
Also the audio management subsystem which is a mechanism we set up to make easy the

09:28.000 --> 09:30.360
management of audio connections.

09:30.360 --> 09:38.280
You can, we have those concept of audio path and audio stream so that you can easily open

09:38.280 --> 09:44.560
a path from source to destination and the audio management system is responsible for

09:44.600 --> 09:50.480
actually talking to the hardware and making the various connections and managing the possible

09:50.480 --> 09:53.600
conflicts between those paths.

09:53.600 --> 10:00.000
Because if you open a path towards a device which is already busy, either your path has

10:00.000 --> 10:06.680
an higher priority and you go over or you get rejected but you need code to manage this.

10:06.680 --> 10:13.520
Then there is the UI which is the part for keyboard UI basically.

10:13.520 --> 10:21.160
And then the operating modes now is FMM 17 but yeah, more to come and we have some ideas

10:21.160 --> 10:26.360
of what we are going to implement in the future.

10:26.360 --> 10:34.080
So yeah, regarding the interface with the operating system, all the code uses the standard

10:34.080 --> 10:42.720
POSIX API which means that any POSIX compliant operating system is good.

10:42.720 --> 10:49.720
For example, we already run the firmware also you can compile and run it natively on Linux

10:49.720 --> 10:55.720
which is very good for debugging when for example you are developing UI or other parts

10:55.720 --> 11:01.000
instead of compile, flash, test, debug, modify and go on.

11:01.000 --> 11:09.000
You can run it on Linux so yeah, any POSIX compliant operating system is good.

11:09.000 --> 11:16.880
All the remaining pieces use the standard C library so you need operating system which

11:16.880 --> 11:26.800
supports them and yeah, if possible use real-time operating system on embedded devices.

11:26.800 --> 11:38.120
The other interface is as I said, we have API function for display, keyboard, audio connections,

11:39.120 --> 11:47.640
management of the radio section and for the non-volatile memory plus like general purpose

11:47.640 --> 11:57.400
platform API which is used for device initialization and to manage all the other things which do

11:57.400 --> 12:04.960
not fall in the other categories like the LEDs, calibration data, hardware information

12:04.960 --> 12:09.960
data, so on and so forth.

12:09.960 --> 12:18.960
Yeah, and also the code is made such that you can share an implementation between devices

12:18.960 --> 12:26.960
as long as there are similarities between the hardware of the various targets for example

12:26.960 --> 12:30.960
in the MD series radios.

12:30.960 --> 12:33.960
The display is always the same, is always connected there.

12:33.960 --> 12:41.960
We wrote the display driver once and we compile it for every target.

12:41.960 --> 12:53.960
As regards the user interface, currently we have standard let's say GUI which is the

12:53.960 --> 13:03.960
GUI you can find on the all the handled devices plus a dedicated GUI for the module 17 just

13:03.960 --> 13:10.960
because the module 17 does not need all the elements of the standard radios and also it

13:10.960 --> 13:17.960
requires some dedicated entries in the menus for example for calibration of levels and

13:17.960 --> 13:19.960
so on.

13:19.960 --> 13:31.960
So given that module 17 is not completely radio we decided to make a dedicated GUI only for

13:31.960 --> 13:39.960
it but this also means that if you want you can also write your own GUI from scratch or

13:39.960 --> 13:46.960
you can also run everything in address mode without the GUI.

13:46.960 --> 13:55.960
Yeah, we have also future plans of making the GUI scriptable or expandable with modules

13:55.960 --> 14:03.960
such that you can for example implement your own module like satellite tracking module.

14:03.960 --> 14:12.960
You can just, we expose, we give a standard interface to interconnect with the rest of the GUI

14:12.960 --> 14:19.960
and then you can just write your code using that interface plus the graphics functions

14:19.960 --> 14:25.960
and that's it. You can add whatever you want.

14:25.960 --> 14:37.960
For the operating modes we are using C++ and yeah, I didn't say that all the code is written in C

14:38.960 --> 14:50.960
plus some pieces in C++. We use the C++ for the operating modes, simple C++ luckily just

14:50.960 --> 14:57.960
because it was a bit more handy to use C++ to do that part.

14:57.960 --> 15:05.960
We define a generic operating mode class which has a bunch of functions to enable, disable,

15:05.960 --> 15:10.960
to have periodic update if you have to check, squelch, make computations, whatever and the

15:10.960 --> 15:18.960
function return in the squelch status which then gets queried by the GUI and so on.

15:18.960 --> 15:25.960
So, yeah, to define your own operating mode you just have to subclass the operating mode class

15:25.960 --> 15:34.960
and then implement the interface functions and integrate it into the list of operating modes

15:34.960 --> 15:37.960
and you are done.

15:37.960 --> 15:45.960
And yes, there is still some work to do on the operating modes because for example now there is

15:45.960 --> 15:52.960
not a clear way to for example set some configuration data of a specific operating mode.

15:53.960 --> 16:04.960
For example, M17, yeah, now this code is a little hacked in order to allow the user to set easily the

16:04.960 --> 16:08.960
source call sign, destination call sign and stuff like that.

16:09.960 --> 16:24.960
So, as regards M17 in particular, as I said before, we started the work on MD380, then we extended to the

16:24.960 --> 16:27.960
MDUV380.

16:27.960 --> 16:34.960
By the way, we started on the MD380 because luckily we had the schematic of the radio.

16:35.960 --> 16:46.960
So, we were able to see if there were actually possibility from the hardware to implement this.

16:46.960 --> 16:55.960
Everything is managing inside the microcontroller and also, and this is why the other radios cannot do M17,

16:55.960 --> 16:58.960
is that the hardware must have the following connections.

16:58.960 --> 17:01.960
Everything is done inside the microcontroller.

17:01.960 --> 17:07.960
The microcontroller has to sample the microphone for audio encoding.

17:07.960 --> 17:17.960
It has to sample the demodulated audio from the radio stage because we do all the 4FSK modulation in software

17:17.960 --> 17:18.960
in code.

17:18.960 --> 17:25.960
So, we have to sample the raw data with 24 kilohertz and the connection must have the enough bandwidth in order to

17:26.960 --> 17:28.960
not distort the signal.

17:28.960 --> 17:39.960
And like, so to say, outbound we have to be able to send raw data, raw demodulated speech to the speaker

17:39.960 --> 17:48.960
in form of analog signal and also send the basement off to the radio frequency stage for modulation.

17:49.960 --> 17:53.960
And yeah, we need those connections.

17:53.960 --> 18:03.960
The GD77 locks the, for sure, the ref stage to the MCU.

18:03.960 --> 18:11.960
MCU to speaker, I'd probably, it's okay and the MCU to ref stage also.

18:11.960 --> 18:14.960
So, it cannot send and receive basement.

18:14.960 --> 18:22.960
The microcontroller cannot send and receive basement to the ref stage and you cannot go on air this way.

18:22.960 --> 18:32.960
And current problems we have, yeah, you have to mod the hardware of the radio if you want to have M17 on it.

18:33.960 --> 18:46.960
Quite a limitation because, yeah, you know, you have to have a bit of practice with soldering of SMD.

18:46.960 --> 18:56.960
There are guides on the website, but yeah, you still have to do that or have someone which is a couple of doing that.

18:57.960 --> 19:16.960
Given that we are doing everything in the MCU, the MCU has to be powerful enough, which means now M38 has 168 MHz CPU, Cortex M4, which is powerful enough.

19:17.960 --> 19:24.960
The point is that for M17 you have to send a frame every 20 milliseconds.

19:24.960 --> 19:32.960
So, you have to do everything in 20 milliseconds, audio encoding, baseband and so on.

19:32.960 --> 19:37.960
If your MCU is not quick enough, you cannot do that.

19:37.960 --> 19:40.960
And finally, yeah, quite a problem.

19:40.960 --> 19:57.960
Codec 2 is using floating point math, which means that if your MCU does not have hardware acceleration for it or it does not have enough clock frequency, you are busted.

19:57.960 --> 20:04.960
Because you are not able to stay within the timings of the protocol.

20:07.960 --> 20:24.960
As regards the codeplug, when we started, initially we thought about parsing and keeping the original codeplug format of the radio manufacturer.

20:24.960 --> 20:39.960
But we decided not to do so because otherwise we would have to manage a shitload of codeplug formats with various versions.

20:39.960 --> 20:40.960
A mess, basically.

20:40.960 --> 20:46.960
So, we decided to, okay, let's write and specify our own format.

20:46.960 --> 20:53.960
So, we tried to make something which is open free, of course, which supports common ham radio needs.

20:53.960 --> 20:58.960
Direct communications, repeaters, hotspots, whatever.

20:58.960 --> 21:03.960
And also portable across devices.

21:03.960 --> 21:14.960
These both for end users, you have your codeplug file and you can move it around openRTX devices because the structure is the same.

21:14.960 --> 21:16.960
So, they speak the same language.

21:16.960 --> 21:26.960
And also for developers, you can take the reference implementation and use it in your own project if you want.

21:26.960 --> 21:28.960
It's currently working progress.

21:28.960 --> 21:32.960
There is a request for comment open on GitHub.

21:32.960 --> 21:36.960
Please take a look at it, comment, help us.

21:36.960 --> 21:45.960
We need a bit of feedback from ham radio operators on how this has to be structured.

21:46.960 --> 21:47.960
Technical details.

21:47.960 --> 21:56.960
It is a binary format, which means that you can either write it row mode to the non volatile memory or inside files.

21:56.960 --> 22:00.960
And it's also compact because, yeah, it's binary.

22:00.960 --> 22:05.960
Up to 65K channels.

22:05.960 --> 22:08.960
So, a lot of space.

22:08.960 --> 22:16.960
And this currently supporting FM, DMR for like historical reasons because we worked on DMR radios.

22:16.960 --> 22:20.960
And yeah, I'm 17, but more to come.

22:20.960 --> 22:23.960
It's something you can extend.

22:23.960 --> 22:28.960
It's already designed to have more than those operating modes.

22:28.960 --> 22:33.960
And also it may become a separate entity from the firmware.

22:34.960 --> 22:43.960
Just because we want to make it something which can be used by hopefully also radio manufacturers.

22:43.960 --> 22:59.960
I hope at some point in the history to have it become like reference standard for exchange of codeplug data because now each codeplug is specific to the radio.

22:59.960 --> 23:11.960
There are softwares which allow to convert code plugs, but yeah, it's not as easy as taking one file and flashing it into different devices.

23:11.960 --> 23:17.960
So summing up what's next on the other side codeplug.

23:17.960 --> 23:21.960
We have it's the next in the row.

23:21.960 --> 23:25.960
Schedule for we are working on this.

23:25.960 --> 23:28.960
In these days.

23:28.960 --> 23:43.960
This is a bit more internal to the firmware and event exchange system so that you can register to events or send events which can make the development a bit more easy.

23:43.960 --> 23:47.960
Also, APRS support because why not.

23:47.960 --> 23:59.960
And more to come probably we have to integrate because it has been done before GPS tracking.

23:59.960 --> 24:06.960
I want to have something for meteorological zones radio zones the modulator for those.

24:06.960 --> 24:09.960
And then we will see.

24:09.960 --> 24:15.960
No DMR in the end because we still have the problem that.

24:15.960 --> 24:18.960
Audio codec is patented.

24:18.960 --> 24:25.960
And yeah, how do you include the patented binary blob in your work without.

24:25.960 --> 24:31.960
Risking of being sued for patented infringement.

24:31.960 --> 24:32.960
I don't know.

24:32.960 --> 24:36.960
It's open problem. We have to find a way to solve it.

24:36.960 --> 24:42.960
And yeah, this is the main reason why there is no DMR on it.

24:42.960 --> 24:46.960
The point is the maries open states public specification.

24:46.960 --> 24:47.960
It's a.

24:47.960 --> 24:54.960
Etsy standard but yeah, the problem is the codec for the short.

24:54.960 --> 24:58.960
And hardware side which wins hardware support.

24:58.960 --> 25:02.960
Open HD.

25:02.960 --> 25:07.960
Bow fang DM 1701 which is another radio which can do.

25:07.960 --> 25:09.960
I'm 17.

25:09.960 --> 25:11.960
This quite a dream.

25:11.960 --> 25:15.960
Yeah, is a series of radios.

25:15.960 --> 25:20.960
Difficult because of the microcontroller they have.

25:20.960 --> 25:24.960
All the microcontroller for automotive from 2008.

25:24.960 --> 25:26.960
Big Indian no debugger.

25:26.960 --> 25:28.960
No the compiler.

25:28.960 --> 25:30.960
It's a mess.

25:30.960 --> 25:33.960
But you know why not.

25:33.960 --> 25:36.960
And also yeah more to come.

25:36.960 --> 25:37.960
So that's it.

25:37.960 --> 25:39.960
Happy hacking.

25:39.960 --> 25:51.960
Okay.

25:51.960 --> 25:53.960
Yeah.

25:53.960 --> 25:57.960
Yeah.

25:57.960 --> 26:04.960
Yeah.

26:04.960 --> 26:08.960
The ones not doing 17 you said.

26:08.960 --> 26:14.960
Yeah.

26:14.960 --> 26:17.960
What okay.

26:17.960 --> 26:19.960
About the ratio.

26:19.960 --> 26:20.960
Yeah.

26:20.960 --> 26:22.960
Yeah.

26:22.960 --> 26:30.960
So question is what about the devices which do not have the they are which now do not have the hardware connection.

26:30.960 --> 26:33.960
What if they had the hardware connections.

26:33.960 --> 26:42.960
Well, they would do M 17 is once you have the hardware connections.

26:42.960 --> 26:48.960
Then it becomes just a matter of writing the drivers and you have M 17 support.

26:48.960 --> 26:54.960
So it's on on this.

26:54.960 --> 26:58.960
Thanks again.

27:03.960 --> 27:06.960
Yeah.

