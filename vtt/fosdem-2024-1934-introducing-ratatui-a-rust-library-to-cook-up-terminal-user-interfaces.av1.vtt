WEBVTT

00:00.000 --> 00:14.840
So now we have Orhan who's going to tell us about Ratatouille, Terminal UI.

00:14.840 --> 00:16.320
Hello.

00:16.320 --> 00:20.920
Okay, it's working.

00:20.920 --> 00:26.720
Welcome everyone and thank you for being here for my talk and coming to this presentation.

00:26.720 --> 00:31.840
Before starting out, we are already starting out a bit late, but I would like to ask you

00:31.840 --> 00:33.440
some questions.

00:33.440 --> 00:37.560
First of all, how many of you know what a terminal user interface is?

00:37.560 --> 00:39.680
Can I see hands please?

00:39.680 --> 00:40.880
That's great.

00:40.880 --> 00:45.640
And how many of you built terminal user interfaces before?

00:45.640 --> 00:48.280
Anything just in the terminal interface?

00:48.280 --> 00:49.280
Cool.

00:49.280 --> 00:51.280
The whole audience.

00:51.280 --> 00:52.480
That's great.

00:52.480 --> 00:56.680
I am Orhan Parmax's and today in a few minutes we're going to explore.

00:56.680 --> 01:03.040
The fascinating world of terminal user interfaces and see how we can build terminal user interfaces

01:03.040 --> 01:06.920
in Rust with a library called Ratatouille.

01:06.920 --> 01:12.480
I'm an open source developer and you can find me on GitHub with the handle Orhan, which is also my name.

01:12.480 --> 01:16.080
And I built the following projects and you might know me from Gitcliff.

01:16.080 --> 01:25.160
It's a change of generator tool and I mostly work with command line tools using Rust and I pretty much live in the terminal, I would say.

01:25.280 --> 01:36.000
And that's why in my free time I package some Rust tools for some Linux distributions, mainly Arch Linux and Alpine Linux.

01:36.000 --> 01:42.600
So let's learn a bit more about terminals, right, before jumping into the user interfaces.

01:42.600 --> 01:45.760
What is a terminal and how does it work?

01:45.760 --> 01:49.480
I want to show you some terminal pictures.

01:49.480 --> 01:54.120
Well, this is not looking like the typical terminal that we use these days.

01:54.160 --> 02:00.040
This is IBM 2741 and this is one of the early user terminals that we had back in the day.

02:00.040 --> 02:03.640
And this was used for something called telegraphy.

02:03.640 --> 02:06.760
It's like a long distance transmission of messages.

02:06.760 --> 02:11.240
And this is also called a teleprinter or a teletypewriter.

02:11.240 --> 02:13.400
Shortly we call this TTY.

02:13.400 --> 02:18.000
Let's keep them in mind because it will come important later in the slides.

02:18.000 --> 02:20.720
Next we have VT100.

02:20.720 --> 02:22.800
Now we have video.

02:22.800 --> 02:31.920
We have a video display unit and we display some information on a screen rather than printing text on to a paper.

02:31.920 --> 02:33.160
That's cool.

02:33.160 --> 02:39.040
And VT100 was one of the widely used terminals back then.

02:39.040 --> 02:41.200
And maybe there are people in the audience who use this.

02:41.200 --> 02:44.160
I would highly respect that actually.

02:44.160 --> 02:47.200
Next we have a text terminal or just a terminal.

02:47.200 --> 02:49.960
Sometimes we call it a text console.

02:50.000 --> 02:54.000
And it's a cellular computer interface for text entry and display.

02:54.000 --> 03:02.480
And in the screenshot you can see now of him my preferred text editor and I'm editing some package file.

03:02.480 --> 03:11.160
And yeah, this is how we like we can just imagine terminals these days because there's some text input.

03:11.160 --> 03:14.440
Then we process something we see the output there.

03:14.440 --> 03:19.880
And just to summarize things a bit more, we can say that we can just, you know, have this diagram here.

03:19.920 --> 03:25.000
It's a POSIX schema of C standards like streams.

03:25.000 --> 03:28.000
And you can see here there is a text terminal.

03:28.000 --> 03:30.120
We get the input from a keyboard.

03:30.120 --> 03:31.480
We process it.

03:31.480 --> 03:38.480
Then we display something on a display or screen with a STDR or STDR.

03:38.480 --> 03:40.160
Well, this looks pretty simple, right?

03:40.160 --> 03:43.760
But under the hood things are a bit more complicated.

03:43.760 --> 03:46.320
There's a nice blog post about how terminals work.

03:46.320 --> 03:50.240
And if you want to like learn more about these, you can go check it.

03:50.240 --> 03:53.960
They definitely check it out and learn more about it.

03:53.960 --> 04:07.440
But just to give you a couple of ideas here, I want to point out TTY, which I mentioned in the first slides and also PTY.

04:08.440 --> 04:13.440
TTY here is used for like a serial interface to a computer.

04:13.440 --> 04:22.440
Whereas PTY is an emulated TTY, which enables us to emulate multiple terminal interfaces to a computer.

04:22.440 --> 04:24.440
Well, you might ask, what does that mean?

04:24.440 --> 04:27.440
I'll give you a very simple example.

04:27.440 --> 04:31.440
Let's say you want to have like multiple terminal emulators open, right?

04:31.440 --> 04:33.440
You want to have them side by side.

04:33.440 --> 04:36.440
You want to have like multiple sessions.

04:36.440 --> 04:40.440
In that case, you will have multiple PTYs basically.

04:40.440 --> 04:45.440
So let's keep that in mind and move on.

04:45.440 --> 04:53.440
If you want to see the current TTY that you are on for some specific terminal, you can run TTY command.

04:53.440 --> 04:56.440
And you can see here I am on the fifth TTY here.

04:56.440 --> 05:02.440
And also you can see the same from the PS output as well.

05:02.440 --> 05:07.440
So these things we can access from Linux and get some information about.

05:07.440 --> 05:14.440
Just to wrap things up, terminal is a physical device with a keyboard and a screen connected to a computer.

05:14.440 --> 05:27.440
TTY is, it was used for a device, like for type messages, but now we use it for a term which describes an interface to a computer.

05:27.440 --> 05:31.440
PTY is an emulated TTY.

05:31.440 --> 05:35.440
That's cool. But we only talked about text for now.

05:35.440 --> 05:39.440
Like we want to have some text on our terminals, right?

05:39.440 --> 05:48.440
Well, in reality, we want to have more things like colors and like styling and then like cursor controls and everything.

05:48.440 --> 05:49.440
How do we do that?

05:49.440 --> 05:53.440
Like we don't want to just have text and we cannot really leave it this.

05:53.440 --> 05:58.440
So let's say we want to have this exact text in our terminal.

05:58.440 --> 06:00.440
What do we do?

06:00.440 --> 06:08.440
We do this. This is very gibberish looking at first glance, but there's actually some magic going on here.

06:08.440 --> 06:16.440
And VT100, the second terminal image that I showed, was one of the terminals which was able to do this.

06:16.440 --> 06:19.440
We call this NC escape sequences.

06:19.440 --> 06:21.440
Here are two examples.

06:21.440 --> 06:29.440
First we have this example where we set the foreground color of some text and then we can also set the background color.

06:29.440 --> 06:37.440
We can also do more stuff such as control and cursor, setting the graphics mode, like the screen mode and stuff.

06:37.440 --> 06:45.440
And something that I want to also point out is that NC escape codes works like a session.

06:45.440 --> 06:46.440
So what does that mean?

06:46.440 --> 06:52.440
You set something, some terminal attribute that is set for the remaining session of the terminal.

06:52.440 --> 06:59.440
So if you set your foreground color to white, the text, the remaining output will be white.

06:59.440 --> 07:01.440
If you do something, then it will just stay.

07:01.440 --> 07:04.440
So terminal simply has a state.

07:04.440 --> 07:11.440
To get more information about the terminal state on Linux, you can use this STTY command.

07:11.440 --> 07:18.440
And here I just get the state, set something, and then I can just revert to the original state of the terminal.

07:18.440 --> 07:24.440
And then if you mess up your terminal output, you can just use the reset command, reset the defaults.

07:24.440 --> 07:31.440
Okay, now we know what a terminal is, how to control it in a very basic way.

07:31.440 --> 07:34.440
Now we are ready to talk about terminal user interfaces.

07:34.440 --> 07:42.440
In the realm of terminal user interfaces, we use NC escape codes a lot to control the terminal.

07:42.440 --> 07:51.440
And also we want to output some styled text to it and then have some mouse controls,

07:51.440 --> 07:57.440
read input handle events, and we basically build our loop around this and form a UI.

07:57.440 --> 07:59.440
Let's look at some examples.

07:59.440 --> 08:04.440
We talk about too much about terminal user interfaces, but how does that look, right?

08:04.440 --> 08:07.440
Well, we have H-top here.

08:07.440 --> 08:11.440
Pretty much sure everyone, most of you know this tool.

08:11.440 --> 08:13.440
It's an interactive process viewer.

08:13.440 --> 08:15.440
You can see the running processes.

08:15.440 --> 08:24.440
And it's a good example of a tree, actually, because we have some gauge and some list and then some style text going on here.

08:24.440 --> 08:31.440
What you can also see from this screenshot is that we need to get a bit creative when it comes to building terminal user interfaces,

08:31.440 --> 08:37.440
because we don't have the typical building blocks for having some UI.

08:37.440 --> 08:39.440
We need to use symbols for blocks.

08:39.440 --> 08:46.440
We need to have these pipe characters to form some kind of a UI.

08:46.440 --> 08:53.440
So that's one of the good examples of a tree, I would say.

08:53.440 --> 08:56.440
There are also a lot of use cases of trees.

08:56.440 --> 09:05.440
H-top is a system administration tool, but we can also have text editors, file managers, miscellaneous stuff, multimedia, even games,

09:05.440 --> 09:08.440
which I will talk about today, and even more stuff.

09:08.440 --> 09:12.440
So they are good for productivity and efficiency.

09:12.440 --> 09:17.440
One might argue that what's the difference between this and this, right?

09:17.440 --> 09:24.440
This is a file explorer, which runs on a GUI, and this is another file explorer, which is on terminal.

09:24.440 --> 09:27.440
Well, you can pretty much do the same thing in both of them.

09:27.440 --> 09:30.440
Like, what's the difference apart from the light team?

09:31.440 --> 09:38.440
Well, at the end of the day, you can choose whatever you want, but they both have some advantages,

09:38.440 --> 09:43.440
and it's good to consider the advantages of Tweet when it comes to working with terminals,

09:43.440 --> 09:48.440
and if you want to have some efficiency in your workflow.

09:48.440 --> 09:51.440
I want to go over them briefly.

09:51.440 --> 09:54.440
First of all, Tweet's are very resource efficient.

09:54.440 --> 09:59.440
They consume fever system resources, and they are very suitable for resource constraint

09:59.440 --> 10:05.440
environments, and you can navigate faster in Tweet's because you're on a terminal,

10:05.440 --> 10:09.440
and you have some shortcuts and command inputs.

10:09.440 --> 10:17.440
And if you like, let's say you want to connect to a server, right, for BISSH,

10:17.440 --> 10:24.440
and you don't have X11 or Wayland in the server, you just have ATTY, basically.

10:24.440 --> 10:28.440
In that case, Tweet's are good because they have text-only displays.

10:28.440 --> 10:40.440
You don't have to have a display server running, so you can simply SSH into that server and run some Tweet,

10:40.440 --> 10:47.440
and that's why they can be accessed with an over-end network connection as well.

10:47.440 --> 10:53.440
When it comes to Glees, they are also pretty advantages in some cases.

10:53.440 --> 11:02.440
If you want to have a very user-friendly interface, Glees are good because they have an intuitive interface for new or casual users.

11:02.440 --> 11:10.440
They have user interaction enhancing features such as drag and drop, and there's something called what you see is what you get,

11:10.440 --> 11:16.440
which means that in Glees, you have more immediate and visual representation of your changes,

11:16.440 --> 11:22.440
which is also good for new users or someone who is not really into computers, I would say.

11:22.440 --> 11:31.440
I asked the RataTweet community and also in my socials, what's your top picks when it comes to Tweet applications,

11:31.440 --> 11:35.440
and these are the answers that I got. We have a couple of text-adders here.

11:35.440 --> 11:39.440
We have some development tools, also some cool stuff such as Atwin.

11:39.440 --> 11:43.440
We have the maintainer here. Shout out to her.

11:43.440 --> 11:48.440
We have some process management stuff as well.

11:48.440 --> 11:53.440
People like Tweet, and I would like to ask you a question here as well.

11:53.440 --> 11:58.440
What's your favorite Tweet? Do anyone want to say?

11:58.440 --> 11:59.440
B-top.

11:59.440 --> 12:01.440
B-top. Good one.

12:01.440 --> 12:02.440
What else?

12:02.440 --> 12:04.440
F-C-F on the one hand.

12:04.440 --> 12:06.440
F-C-F. Cool one.

12:06.440 --> 12:08.440
Last one.

12:08.440 --> 12:10.440
Alex.

12:10.440 --> 12:11.440
Alex.

12:11.440 --> 12:12.440
Yeah.

12:12.440 --> 12:13.440
Three years ago.

12:13.440 --> 12:14.440
Yeah.

12:15.440 --> 12:22.440
So, yeah, Tweets are very popular when it comes to development utilities, I would say.

12:22.440 --> 12:24.440
So, yeah.

12:24.440 --> 12:34.440
Next, I want to pay tribute here and mention some of the legendary legacy software that helped us come this far when it comes to building Tweets.

12:34.440 --> 12:37.440
Starting off with the MS-DOS editor.

12:37.440 --> 12:40.440
I see some smiles.

12:40.440 --> 12:43.440
The OGEdit.com.

12:43.440 --> 12:47.440
In 90s, these type of stuff were very popular.

12:47.440 --> 12:51.440
And I especially like the aesthetics of this because you have some drop shadows there.

12:51.440 --> 12:57.440
It looks very bad, but also really good.

12:57.440 --> 12:58.440
So, yeah.

12:58.440 --> 13:05.440
You have colors and mouse support and everything, so truly a masterpiece.

13:05.440 --> 13:07.440
We have Borland Turbo C++.

13:07.440 --> 13:10.440
This was very powerful back in the day.

13:10.440 --> 13:19.440
And this was very language specific, but it's really, it's a really nice example of a Tweet that were used in the old days.

13:19.440 --> 13:21.440
I mean, heck, we even have syntax silencing in there.

13:21.440 --> 13:23.440
So, shout out to them.

13:23.440 --> 13:25.440
I'll skip the slide.

13:25.440 --> 13:29.440
Yeah.

13:29.440 --> 13:35.440
We have Midnight Commander and Orthodox File Manager.

13:35.440 --> 13:43.440
There are also a lot of other File Manager Tweets as well, but I picked Midnight Commander here because it's widely known.

13:43.440 --> 13:44.440
It has a wiki page.

13:44.440 --> 13:48.440
That's actually the reason why I picked it.

13:48.440 --> 13:51.440
This is one of my favorite IRC clients.

13:51.440 --> 13:55.440
And I honestly added this slide because I like the visuals and the aesthetics.

13:55.440 --> 13:56.440
So, yeah.

13:56.440 --> 14:00.440
Well, they all look very, very old, right?

14:00.440 --> 14:02.440
And they're all stuff.

14:02.440 --> 14:05.440
Every desktop and laptop runs on a graphical OS these days.

14:05.440 --> 14:08.440
So, should we still care about Tweets?

14:08.440 --> 14:15.440
Well, another example that I will give here is that it's about reduced resource consumption.

14:15.440 --> 14:18.440
We don't have bloat in Tweets, basically.

14:18.440 --> 14:20.440
Turbo C++ was 9 megabytes.

14:20.440 --> 14:22.440
Helix is 16 megabytes.

14:22.440 --> 14:24.440
And VS Code is 350 megabytes.

14:24.440 --> 14:26.440
So, you make them out.

14:26.440 --> 14:31.440
And yeah, VS Code will eat your computer for lunch due to electron rip.

14:32.440 --> 14:36.440
Okay, let's talk about how to build those magnificent apps.

14:36.440 --> 14:42.440
And let's talk about the other Tweet libraries before moving on to Rust.

14:42.440 --> 14:44.440
We have N Curses here.

14:44.440 --> 14:49.440
N Curses is one of the most popular Tweet libraries and most known ones.

14:49.440 --> 14:52.440
And it's for C.

14:52.440 --> 14:56.440
And you can just build Tweets using this.

14:56.440 --> 14:59.440
I want to point out one thing here.

14:59.440 --> 15:03.440
This refresh call is actually a performance trick.

15:03.440 --> 15:11.440
So, if you want to have some performance benefits, you don't call this refresh

15:11.440 --> 15:14.440
because your updates won't be rendered.

15:14.440 --> 15:21.440
So, until you call refresh, your UI changes will pan for a moment.

15:21.440 --> 15:25.440
So, we have these small tricks when it comes to building Tweets.

15:25.440 --> 15:31.440
And these stuff actually improves performance and offers great flexibility.

15:31.440 --> 15:33.440
You have CDK.

15:33.440 --> 15:39.440
The reason why this exists is because N Curses, doing stuff in N Curses is pretty difficult.

15:39.440 --> 15:48.440
And if you want to like complex UI, then it's really not possible and very difficult to have it in N Curses.

15:48.440 --> 15:51.440
So, people created Curses development kits.

15:51.440 --> 15:57.440
And this provides some widgets, such as dialogues and calendars and whatnot.

15:57.440 --> 16:01.440
And Curses versus CDK will come later as an important point.

16:01.440 --> 16:04.440
So, let's keep that in mind.

16:04.440 --> 16:11.440
If you run the N Curses code that I showed you, you will get this text on your terminal.

16:11.440 --> 16:12.440
And this is very boring.

16:12.440 --> 16:15.440
So, we can take things upon us.

16:15.440 --> 16:18.440
This is dialogue, a very small command line utility on Linux.

16:18.440 --> 16:20.440
And you can show dialogues like this.

16:20.440 --> 16:24.440
I added this because it can be counted as a Tweet as well.

16:24.440 --> 16:27.440
You have drop shadows, you have this thing.

16:27.440 --> 16:31.440
And yeah, let's press enter to this and take things upon us.

16:31.440 --> 16:33.440
We have Textualize in our hands.

16:33.440 --> 16:35.440
It's a Python framework for building Tweets.

16:35.440 --> 16:37.440
We have the tool Dolphi here.

16:37.440 --> 16:40.440
It's a Tweet for monitoring MySQL in real time.

16:40.440 --> 16:41.440
It's pretty cool.

16:41.440 --> 16:44.440
And Textualize can also run in browser.

16:44.440 --> 16:49.440
We have Bubble Tea, a Go framework based on the Elm architecture.

16:50.440 --> 16:51.440
And now, Go is mentioned.

16:51.440 --> 16:54.440
Let's talk about Rust, right?

16:54.440 --> 16:58.440
The moment that everyone was waiting for.

16:58.440 --> 17:03.440
In Rust, we have Twee RS, created by Florian in 2016.

17:03.440 --> 17:06.440
And it was maintained till 2022.

17:06.440 --> 17:14.440
And this library is one of the most used libraries in the Rust ecosystem.

17:14.440 --> 17:17.440
And then it was unmaintained after some point.

17:17.440 --> 17:20.440
And in 2023, we created a community around it.

17:20.440 --> 17:24.440
We forked the project and we rebranded it as Rata Twee.

17:24.440 --> 17:29.440
And now, Rata Twee is the most used Twee framework in Rust.

17:29.440 --> 17:33.440
And you can have these complex stuff in Rata Twee as well.

17:33.440 --> 17:35.440
And I will briefly mention this.

17:35.440 --> 17:40.440
And I will give you a demo of how to build apps in Rata Twee.

17:41.440 --> 17:45.440
Just to give you a bit more about the history of the project.

17:45.440 --> 17:51.440
First, there was a discussion about the maintenance of Twee RS.

17:51.440 --> 17:55.440
Then in the discussion, it was not really leading anywhere.

17:55.440 --> 18:00.440
So me and a couple of other interested people, we created this course server.

18:00.440 --> 18:04.440
We talked about the possibility of forking the project.

18:04.440 --> 18:06.440
And we let the maintainer know about this.

18:06.440 --> 18:10.440
And we forked the project under the name of Twee RS Revival.

18:10.440 --> 18:12.440
We had some meetings at the time.

18:12.440 --> 18:17.440
And then after some point, the maintainer was not really able to respond to us.

18:17.440 --> 18:20.440
He was probably too busy.

18:20.440 --> 18:26.440
And then we started to create some merchants and continue development.

18:26.440 --> 18:31.440
Someone came up with the coolest name ever, Rata Twee.

18:31.440 --> 18:38.440
Someone made the logo, which I have stickers for here, if you want to have it after the talk, for sure.

18:38.440 --> 18:41.440
And then we created some releases.

18:41.440 --> 18:49.440
And after some point, Florian archived the two RS repository and just redirected people to us.

18:49.440 --> 18:54.440
And that's when Rata Twee became the official successor.

18:54.440 --> 18:58.440
And today, actually yesterday, we just created a new release.

18:58.440 --> 19:01.440
Pretty cool stuff. Definitely check that out.

19:01.440 --> 19:07.440
And I also wrote a couple of blog posts about the history of Rata Twee.

19:07.440 --> 19:10.440
So you can read them on my blog.

19:10.440 --> 19:13.440
When it comes to building Twee, we have a lot of options.

19:13.440 --> 19:15.440
We have textualized, we have bubble tea.

19:15.440 --> 19:18.440
But why Rust is very important for us?

19:18.440 --> 19:21.440
I want to briefly mention a couple of points.

19:21.440 --> 19:23.440
First, memory safety.

19:23.440 --> 19:26.440
I'm pretty sure everyone is like familiar with this.

19:26.440 --> 19:29.440
But Rust's ownership system ensures memory safety.

19:29.440 --> 19:36.440
And it also eliminates security issues related to memory issues.

19:36.440 --> 19:41.440
And we have a very performant language in our hands.

19:41.440 --> 19:43.440
We have zero cost abstractions.

19:43.440 --> 19:49.440
And all the controls, they allow you for us to build highly performant tweets.

19:49.440 --> 19:52.440
And yeah, cost platform support is great.

19:52.440 --> 19:57.440
We have great portability features when it comes to doing stuff in Rust.

19:57.440 --> 20:02.440
Unless the cargo is just great, and we have a growing ecosystem of Twee libraries.

20:02.440 --> 20:10.440
So if you want to have widgets that are not supported, not in the Rata Twee organization,

20:10.440 --> 20:17.440
people create very cool third-party widgets that you can just use in your Twee apps.

20:17.440 --> 20:20.440
Here's a demo of Rata Twee.

20:20.440 --> 20:26.440
I'll give you a water break. We'll give you a wash this.

20:26.440 --> 20:28.440
This was made for the Thousand Comet.

20:28.440 --> 20:32.440
We just made this for celebrating.

20:32.440 --> 20:42.440
And here you can see pixels are moved around to create this fade-away effect.

20:42.440 --> 20:47.440
Rata Twee is very lightweight, customizable, flexible, and it has a very cool name.

20:48.440 --> 20:56.440
So it is pretty much designed for developers and enthusiasts who want a lightweight alternative to graphical user interfaces.

20:56.440 --> 21:03.440
And if you want to have an app deployed in constrained environments, like a server with limited resources, Rata Twee is for you.

21:03.440 --> 21:11.440
And if you want to have full control over the terminal and have more customized and tailored experience,

21:11.440 --> 21:14.440
definitely consider choosing Rata Twee.

21:14.440 --> 21:19.440
And if you just appreciate the retro aesthetic of the terminal and the cool name, go for it.

21:19.440 --> 21:24.440
If you remember the endcurses versus CDK example that I gave,

21:24.440 --> 21:30.440
here you can see terminal is handled by endcurses and CDK is rendering the UI.

21:30.440 --> 21:35.440
In the case of Rata Twee, terminal can be handled with a couple of backends.

21:35.440 --> 21:37.440
You can choose between those options.

21:37.440 --> 21:46.440
And Rata Twee is actually responsible for rendering some widgets, such as these ones, like block, tabs, and list.

21:46.440 --> 21:52.440
And when it comes to these backends, we have three options.

21:52.440 --> 21:55.440
We do not really dictate which one you choose.

21:55.440 --> 21:58.440
They are all, at the end of the day, they just handle the terminal.

21:58.440 --> 22:01.440
But cross-term is one of the popular options.

22:01.440 --> 22:12.440
It's a purest terminal manipulation library, and it supports all of the platforms, basically.

22:12.440 --> 22:17.440
Here's a cool diagram about which back-end you can choose.

22:17.440 --> 22:20.440
Like I said, it does not really influence your...

22:20.440 --> 22:26.440
If you go with like termists instead of cross-term, it does not really have an influence on your project structure,

22:26.440 --> 22:30.440
because the core functionalities of the terminal handling stays the same.

22:30.440 --> 22:33.440
Here comes the exciting part.

22:33.440 --> 22:38.440
I will show you how to build a Twee with using Rata Twee very quickly.

22:38.440 --> 22:46.440
We have a lot of tutorials on our website, so if you go to RataTwee.rs, you can find a JSON Editor application tutorial.

22:46.440 --> 22:53.440
We have a counter-app and a bunch of other cool documentation about Twees and specifically Rata Twee.

22:53.440 --> 22:56.440
So definitely go check that out if you're interested.

22:56.440 --> 22:59.440
First, we start with creating a new project.

22:59.440 --> 23:03.440
First, you need to check your Rust version.

23:03.440 --> 23:07.440
Then in the project structure, you can see...

23:07.440 --> 23:11.440
It's a very simple project, but I will just give a brief introduction.

23:11.440 --> 23:18.440
CargoTomel is where you have your dependencies, and under SRC main, that's where you'll have your code.

23:18.440 --> 23:25.440
Next, we can use the CargoAdd command to add Rata Twee and your preferred back-end to our project.

23:25.440 --> 23:32.440
In our case, I run the CargoAdd, RataTwee and CrossTerm, and you can see in CargoTomel, we have the dependencies added.

23:32.440 --> 23:37.440
The versions might vary based on the time that you're watching this presentation.

23:37.440 --> 23:42.440
Next, we can go ahead and add some imports to our main file.

23:42.440 --> 23:49.440
From CrossTerm, I imported some terminal handling types and methods and types and traits.

23:49.440 --> 23:54.440
From RataTwee, I imported some widgets and also Prelude.

23:54.440 --> 24:03.440
Prelude is a module which re-exports the most used types and traits and really simplifies the imports in our case.

24:03.440 --> 24:11.440
Before going into rendering anything, we need to actually set up the terminal and restore it.

24:11.440 --> 24:19.440
In this code, you can see I entered something called an alternate screen and enabled something called raw mode.

24:19.440 --> 24:23.440
The alternate screen is something like a new buffer in your terminal.

24:23.440 --> 24:30.440
If you run your Twee app, you want to switch to a new screen and have a clear page where you can render stuff.

24:30.440 --> 24:36.440
In the raw mode, we also call this cooked mode. In this mode, you basically cook.

24:36.440 --> 24:41.440
You just switch to it just to have more like the full control over the terminal.

24:41.440 --> 24:46.440
In this mode, the I.O. is turned off and you just have to handle your stuff yourself.

24:46.440 --> 24:56.440
Before exiting, when you exit, you have to restore the terminal because you don't want to mess up your output.

24:56.440 --> 25:05.440
In this GIF, you can see that first I will run some Twee with alternate screen.

25:05.440 --> 25:11.440
The text is printed there. When I quit, this cursor is back to where it's at.

25:11.440 --> 25:25.440
If I run the same demo without alternate screen, you will see that the whole Twee is printed to a terminal as is without switching to a new buffer.

25:25.440 --> 25:41.440
The cursor is shifted down. Alternate screen helps us to have a clear slate when you want to render some widgets.

25:41.440 --> 25:47.440
The most important part when it comes to building Twees is the render loop.

25:47.440 --> 25:56.440
First, you need to draw the UI. In this case, you can use the terminal's draw method, which takes a frame.

25:56.440 --> 26:04.440
It's a closure and it renders the entire screen. Here, I just have this paragraph widget and I render some text.

26:04.440 --> 26:09.440
Next, I need to handle some events. In this case, I am pulling some events from cross-term.

26:09.440 --> 26:20.440
If Q is pressed, I just break from the loop. The reason why we have 16 milliseconds here is that 16 milliseconds is roughly 60 FPS.

26:20.440 --> 26:29.440
We have to wait a bit just to make sure that UI remains responsive regardless of whether we have new event spending.

26:29.440 --> 26:35.440
This is the full code. This might look a lot for just the Hello World application.

26:35.440 --> 26:48.440
We are aiming to simplify this further. If you run it, you will simply see a Hello World Twee. That's how you build Twees.

26:48.440 --> 26:59.440
You might ask what happens in case of errors. In case of errors, you might guess that the restore stuff that we added,

26:59.440 --> 27:04.440
the leave and alternate screen won't be called. You will pretty much mess up your terminal output.

27:04.440 --> 27:09.440
In that case, you can use some panic hooks. We have a couple of tutorials on how to do them.

27:09.440 --> 27:14.440
Here, I have the code for setting up a panic hook using better panic crate.

27:14.440 --> 27:22.440
When you panic, like when you just unwrap something, for example, this will be called and you will restore your terminal.

27:22.440 --> 27:30.440
We have a couple of concepts. I will briefly talk about them just to further improve our understanding of how the Twee works.

27:30.440 --> 27:35.440
We have an area. The coordinate system runs from left to right and top to bottom.

27:35.440 --> 27:41.440
We have the origin on the top left. XY coordinates are represented by U16s.

27:41.440 --> 27:45.440
In this area, you just basically say that you want to render something in that area.

27:45.440 --> 27:52.440
In this example, we render a text and we manually calculate the area to render within.

27:52.440 --> 28:06.440
We have a layout and layouts used for, if you want, for example, split your area into two like this and have rendered different things on these different areas,

28:06.440 --> 28:11.440
you can do that. You can also have nested layouts and such as well.

28:12.440 --> 28:19.440
You might have seen the constraints in the last slide.

28:19.440 --> 28:25.440
Constraints helps us to have better control in the layouts.

28:25.440 --> 28:31.440
For example, in this example, I want to create an area of 10 characters.

28:31.440 --> 28:35.440
Then I want the next area to be 70% of the remaining.

28:35.440 --> 28:45.440
The last one will be the remaining area, but just not bigger than five characters.

28:45.440 --> 28:54.440
We have a good flex demo we recently added to our repo for demonstrating how to use those constraints.

28:54.440 --> 29:00.440
In the world of UI development, there are two concepts when it comes to rendering.

29:00.440 --> 29:08.440
The first one is retain mode rendering where you have your widgets and states and you just update states to render something.

29:08.440 --> 29:15.440
We have immediate mode rendering which we don't have states and we just redraw everything on every frame.

29:15.440 --> 29:18.440
Not to the user's immediate mode rendering approach.

29:18.440 --> 29:26.440
You can see here that in every loop, in every draw call in this closure, everything is rendered.

29:26.440 --> 29:31.440
This sounds like a bad thing, but it's actually a good thing because it gives us some flexibility.

29:31.440 --> 29:37.440
For example, your UI logic becomes a direct reflection of your application state.

29:37.440 --> 29:43.440
Also, if you want to hide a widget, then you just don't render it based on some condition.

29:43.440 --> 29:46.440
It has those advantages.

29:46.440 --> 29:52.440
Lastly, there are several patterns that you can use with your three applications.

29:52.440 --> 29:56.440
I briefly mentioned the Elm architecture.

29:56.440 --> 30:04.440
We have another actually, who library for building tweets using Elm architecture.

30:04.440 --> 30:11.440
It's basically something like you define your models, handle updates and render the view.

30:11.440 --> 30:13.440
We have a component architecture.

30:13.440 --> 30:15.440
There are two good Rust projects.

30:15.440 --> 30:20.440
You can check them out if you want to learn more about how they structure their project.

30:20.440 --> 30:25.440
Also, we have a template repository which we have a component architecture template as well.

30:25.440 --> 30:27.440
I will briefly mention that now.

30:27.440 --> 30:30.440
You have a flux design pattern.

30:30.440 --> 30:33.440
We can also use this flux architecture in our apps.

30:33.440 --> 30:40.440
We have another cool Rust project which uses this architecture.

30:40.440 --> 30:48.440
The templates that we have, you can just use Cargo generate to clone, choose between these templates

30:48.440 --> 30:51.440
and bootstrap a 3rd to 3 application very quickly.

30:51.440 --> 31:00.440
You can install Cargo generate and run this command to have a prompt where it asks you some questions like your project name, etc.

31:00.440 --> 31:04.440
You can have one of these templates, like simple async or component.

31:04.440 --> 31:12.440
It's a good way to start out with having another three projects, I would say.

31:12.440 --> 31:14.440
Lastly, showcase.

31:14.440 --> 31:17.440
Let's have a look at what people have built with 3rd to 3.

31:18.440 --> 31:21.440
I will show off some widgets first.

31:21.440 --> 31:28.440
We have paragraph, we have a block, we have calendar, we have chart, we have a table.

31:28.440 --> 31:30.440
Those are the maintainers, by the way.

31:30.440 --> 31:32.440
We have a bar chart.

31:32.440 --> 31:36.440
If you want to have more stuff, we have some third-party widgets.

31:36.440 --> 31:43.440
We have a retotree image widget where you can just use to render some images on the terminal.

31:43.440 --> 31:46.440
There's also a couple of other ways for rendering images.

31:46.440 --> 31:50.440
In this case, someone actually shared the snippet on a Discord.

31:50.440 --> 31:54.440
They used the colored pixels to show some image.

31:54.440 --> 31:56.440
This is also possible, very bad code, by the way.

31:56.440 --> 32:01.440
Anyways, here's an album cover of Kendrick Lamar.

32:01.440 --> 32:04.440
We have a pseudo-terminal widget, 3-term.

32:04.440 --> 32:09.440
If you're building some text editor and have some integrated terminal, this is for you.

32:09.440 --> 32:11.440
We have other stuff as well.

32:11.440 --> 32:13.440
Go check them out for sure.

32:14.440 --> 32:16.440
These are the stuff that people built.

32:16.440 --> 32:18.440
We have Pokedex here.

32:18.440 --> 32:20.440
It's a Pokedex Tui.

32:20.440 --> 32:24.440
You can just browse, pokemons, show off to your coworkers.

32:24.440 --> 32:27.440
Yes, it's pretty cool.

32:27.440 --> 32:31.440
This is something that I discovered yesterday, actually.

32:31.440 --> 32:37.440
Someone built a full-fledged game in retotui, and you can just have this, play this in your terminal.

32:37.440 --> 32:41.440
It's about space pirates playing basketball across the galaxy.

32:42.440 --> 32:46.440
You just choose some planet when you start the game.

32:46.440 --> 32:51.440
You build your character, like the skin, whatever.

32:51.440 --> 32:56.440
You select your spaceship, and this is the main menu.

32:56.440 --> 32:59.440
You can just take a look at stuff.

32:59.440 --> 33:01.440
I haven't played it, sorry.

33:01.440 --> 33:03.440
It's pretty cool.

33:03.440 --> 33:05.440
We have Outtwin, pretty cool project.

33:05.440 --> 33:08.440
It replaces your existing shell history with Scala Database,

33:08.440 --> 33:12.440
and a bunch of other cool features, shout out to them.

33:12.440 --> 33:16.440
Lastly, this is one of my favorite full-stack projects.

33:16.440 --> 33:22.440
This is a website which was built with retotui, with U framework,

33:22.440 --> 33:25.440
and it provides two aesthetic in the browser.

33:25.440 --> 33:29.440
The backend uses Axum and REST API, and it's just a Mongo database.

33:29.440 --> 33:33.440
You can go to this blog to read more about how this blog was built, actually,

33:33.440 --> 33:35.440
so definitely check it out.

33:35.440 --> 33:40.440
We have other cool stuff at Altsum Retotui repository.

33:40.440 --> 33:44.440
You can go check those cool stuff as well.

33:44.440 --> 33:47.440
I'm running out of time, so I have to run a bit.

33:47.440 --> 33:50.440
The feature, what we are going to do with Retotui,

33:50.440 --> 33:54.440
we are improving upon feedback, so definitely let us know

33:54.440 --> 33:57.440
if you have some feedback, if you tried Retotui,

33:57.440 --> 33:59.440
and if you think something sucks or anything.

33:59.440 --> 34:01.440
Just let us know.

34:01.440 --> 34:04.440
If you don't think anything sucks, then consider sponsoring us.

34:04.440 --> 34:08.440
Meeting this call will allow us to work Retotui on more,

34:08.440 --> 34:11.440
maybe part-time or full-time one day.

34:11.440 --> 34:15.440
Thanks goes to all these wonderful people who contribute to Retotui,

34:15.440 --> 34:19.440
and we have a lot of contributors, and those are some stats.

34:19.440 --> 34:25.440
We are just happy to have you as well, if you want to join our Discord

34:25.440 --> 34:29.440
as questions or if you are interested in contributing, go for it.

34:29.440 --> 34:33.440
Thanks to our team, which are building Retotui right now,

34:33.440 --> 34:37.440
and thanks to Florian for creating 2RS in the first place,

34:37.440 --> 34:39.440
which make all of this possible.

34:39.440 --> 34:42.440
And lastly, if you like my open source efforts,

34:42.440 --> 34:45.440
and my projects or anything, blog posts,

34:45.440 --> 34:47.440
consider sponsoring me.

34:47.440 --> 34:50.440
Let's hit that goal. Let's go.

34:50.440 --> 34:54.440
Thank you for your time and attention, and I hope you enjoyed.

35:03.440 --> 35:06.440
you

