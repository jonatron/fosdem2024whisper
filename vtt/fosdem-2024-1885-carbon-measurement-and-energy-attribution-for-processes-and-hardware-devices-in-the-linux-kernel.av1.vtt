WEBVTT

00:00.000 --> 00:11.400
All right, everyone. I hope the mic is working. It's great to be here. This is my first fast

00:11.400 --> 00:18.000
time, by the way. And I'm very happy to talk to you all about current measurement and energy

00:18.000 --> 00:24.140
attribution for processes and hardware devices in Linux. My name's Aditya, but you can call

00:24.140 --> 00:29.420
me Adi. That's the first three letters. I'm a grad student. And yeah, that's my contact.

00:29.420 --> 00:35.840
I'm always very happy to talk to people during, before, and after my talk. Please reach out.

00:35.840 --> 00:40.640
Please. I would love to hear from you. So a bit of background. I'm a graduate student

00:40.640 --> 00:47.820
at ETHEHA Zirik in Switzerland. And I do research at the intersection of computer architecture

00:47.820 --> 00:55.100
and operating systems. I love this stuff very much. Great. What do we want to talk about?

00:55.100 --> 00:59.480
Let's get a bit of a brief background to bring everyone on the same page. Now, when we talk

00:59.480 --> 01:03.980
about energy sources and computing systems, you can have a bunch of options. You can have

01:03.980 --> 01:10.340
direct inputs from DC, from USB. You can have battery power systems. And if you're really

01:10.340 --> 01:17.140
exotic, you can even have energy harvesting devices. Okay? Now, we want to use the maximum.

01:17.140 --> 01:22.540
No, I'm sorry. We want to use the minimum amount of energy to perform our task. Why do

01:22.540 --> 01:28.500
we want to use the minimum amount of energy? Because energy consumption correlates with

01:28.500 --> 01:35.580
battery capacity. And battery capacity is a major, a significant design constraint for

01:35.580 --> 01:41.980
your consumers. Okay? All of us have cell phones. We have the recent buzz around Apple

01:41.980 --> 01:48.860
Vision Pro, AR devices. These devices are significantly restricted by the amount of

01:48.860 --> 01:54.740
battery capacity. So we want to minimize the energy that we use to get the job done.

01:54.740 --> 02:03.060
Okay? Now, what is the problem here? What do we want to solve? Let's flesh it out. Energy

02:03.060 --> 02:12.940
consumption is defined as power times latency. Power is determined by your hardware. Okay?

02:12.940 --> 02:19.860
Latency is determined by your software. Okay? Now, how do we measure this? How do we get

02:19.860 --> 02:25.780
this data? Programmers often measure latency using well-established tools. I'm guessing

02:25.780 --> 02:31.380
many of you would be familiar with Linux Perf, or you would have timed your own software

02:31.380 --> 02:37.020
using wall clock time using CPU clock cycles, right? Now, these are well-established metrics

02:37.020 --> 02:44.540
and well-established tools to quantify your latency. What if I ask you, do you know of

02:44.540 --> 02:50.060
any tools to calculate your application's energy? What comes to your mind when I pose

02:50.060 --> 02:55.820
this question to you? How would you calculate your application's energy consumption? You

02:55.820 --> 03:01.220
would say, okay, Ali, I know. This is very simple, right? Energy is power times latency,

03:01.220 --> 03:06.980
right? We just talked about this. I'll get the power from the CPU. My CPU has this magical

03:06.980 --> 03:13.140
interface called Rappel, which stands for running average power limit. I'm going to

03:13.140 --> 03:19.700
get the value and they, oh, voila, my CPU says 15 watts right now. Great. Then I'll time

03:19.700 --> 03:26.820
my application and my application turns out to be, let's say, five milliseconds. Okay?

03:26.820 --> 03:33.660
And we put these values into this formula and great, we have 75 mJ of energy consumption.

03:33.660 --> 03:40.580
Stop done. Let's go home. Unfortunately, this is too simplistic. Let's try to dive into

03:40.580 --> 03:45.420
what we missed here. This does not reflect the ground reality, okay? And now I'm going

03:45.420 --> 03:52.820
to deconstruct what happened here and what we missed. The first step, we saw the power

03:52.820 --> 03:59.620
was 15 watts. And unfortunately, this model assumes a linear power draw over time. That

03:59.620 --> 04:05.240
is not the case. If you actually look at the system, this is what it looks like. You

04:05.240 --> 04:10.460
have these values and you have these peaks. And if you measure your power at the wrong

04:10.460 --> 04:15.800
time, you will end up with a significantly different number than what you should have.

04:15.800 --> 04:22.220
On the x-axis, you have time value. On the y-axis, you have the power for CPU. And power

04:22.220 --> 04:29.580
consumption is not linear. So this assumption that we have a linear power draw is incorrect.

04:30.540 --> 04:36.420
Second, we got the power value from Rappel. Remember running average power limit? It turns

04:36.420 --> 04:43.100
out that Rappel is only available on Intel or sometimes on AMD. ARM, for example, has

04:43.100 --> 04:49.340
a very, very different interface to report power. So I would love to share a story. I

04:49.340 --> 04:54.140
was doing energy profiling on a server-class system back in university and I said, oh,

04:54.140 --> 04:58.940
I've built this great infrastructure on my Intel platform, right? Let me just use it

04:58.980 --> 05:05.180
to run on ARM and see what happens. And the moment I ran it on ARM, Linux Perf said, I'm

05:05.180 --> 05:09.580
sorry, I don't recognize the CPU. I can't give you any numbers. And it just crashed,

05:09.580 --> 05:15.420
okay? So all of these interfaces are really different and you need a significant amount

05:15.420 --> 05:20.420
of engineering to make sense of it across different platforms. Second limitation is that

05:20.420 --> 05:25.500
we do not have uniform interfaces or the formats to measure power reliably.

05:26.500 --> 05:32.500
All right. Let's try to go deeper. Let's try to get more into the closer to the ground

05:32.700 --> 05:39.700
truth. Our model got the power value from the CPU. What about the other devices? I'm right

05:41.300 --> 05:48.300
now broadcasting from this device and oh my God. I'm sorry for this.

05:56.260 --> 06:01.260
I hope not. Give me a sec.

06:09.260 --> 06:16.260
Beautiful. Beautiful. Okay, okay. So back to the presentation. We were talking about

06:16.260 --> 06:20.780
the impact of devices like the screen, the memory, the network cards, right? We don't

06:20.820 --> 06:27.180
know how to quantify them. So we did a lot of experiments and it turns out that these

06:27.180 --> 06:33.780
devices very often dominate your power consumption and our findings are also correlated from

06:33.780 --> 06:37.500
some similar observations at Google. So what Google did was they were trying to optimize

06:37.500 --> 06:42.460
their data centers and did a huge amount of profiling on their server class CPUs. Server

06:42.460 --> 06:47.980
class CPUs are the heaviest CPUs that you can get in the market. And it turns out that

06:48.060 --> 06:55.060
they observed that DRAM is dominating their power because DRAM is burning power all the

06:55.140 --> 07:01.300
time. CPU turns on and off, but the DRAM you cannot turn off. Remember, it is volatile.

07:01.300 --> 07:08.300
So you need to break out of this mindset that CPU is the end all be all. Okay. So let me

07:08.860 --> 07:15.860
try to summarize everything. We are inaccurately calculating only a fraction of the system's

07:16.100 --> 07:23.180
actual energy consumption. Okay. And I would love to put this in a take of a code for you.

07:23.180 --> 07:28.540
This is not from me, but I like this very much. We cannot improve what we cannot measure.

07:28.540 --> 07:33.780
So we first need to understand how to measure energy correctly. And that's what my project

07:33.780 --> 07:40.340
is all about. That's what I love to do. What is the goal of what I'm trying to do here?

07:40.340 --> 07:46.900
My goal is to develop a framework to accurately and reliably measure the energy consumption

07:46.900 --> 07:53.900
of processes in the kernel. All right. All of us can get this data. What is the use for

07:54.300 --> 08:01.300
this? Because data without use is it does not get used. Okay. Once we have this data,

08:01.300 --> 08:06.740
we want to report it to the end users in an easy to understand format. Right. End users

08:06.780 --> 08:10.660
should be able to make sense of the number. Right. What does this number mean for me?

08:10.660 --> 08:15.460
We wanted to report it to the programmers which improve their action ability, which enable

08:15.460 --> 08:21.540
them to move their code up and down to change their code to move the numbers. Right. And

08:21.540 --> 08:26.640
we want to report it to system designers to enable them to iterate much faster over low

08:26.640 --> 08:33.140
energy designs over low carbon designs. Okay. So let's try to dive deeper. What do we mean

08:33.140 --> 08:39.980
by a framework? What are we trying to do? Let's flesh it out. A framework comprises models

08:39.980 --> 08:46.980
and tools. Let's break down these two words. A power model is how we think about a device.

08:46.980 --> 08:52.780
When I say that I want to measure power, a power model is the mental model that I have

08:52.780 --> 08:59.020
that I will use to get the value. Okay. And it turns out that these power models are often

08:59.060 --> 09:03.820
very poorly understood for a number of devices. For example, DRAM power models are often not

09:03.820 --> 09:09.100
available to the public. They're not available to academia. They're, let's say, a proprietary

09:09.100 --> 09:16.100
trade secret. Don't quote me on that. And okay, once we have these power models, we can build

09:16.260 --> 09:21.660
tools which accurately calculate power based on these models. A tool that I would like

09:21.660 --> 09:26.500
to mention would be the NVIDIA SMI utility. It allows you to calculate the power of a

09:26.500 --> 09:33.500
GPU using this tool. It's a good tool. And okay, so let's pull it all in. What I would

09:38.100 --> 09:44.180
like you to take away is that we need accurate models, first and foremost accurate models,

09:44.180 --> 09:49.420
and second, reliable tools to calculate the energy consumption correctly. So we defined

09:49.420 --> 09:54.740
our problem and we defined our goal post where we want to go. And now let's see how are we

09:54.740 --> 10:01.740
going to get from point A to point B. Great. So before I dive into what is the mechanism,

10:02.780 --> 10:08.580
I would like to bring to knowledge what has been done before. All of us have been here

10:08.580 --> 10:12.660
for the entire day, right? We love energy and we love efficiency. If this is such an

10:12.660 --> 10:16.860
important problem, why didn't people solve it before? People did. People did try to solve

10:16.860 --> 10:20.860
it before and I'm going to describe to you right now what they did before and why that

10:20.860 --> 10:26.180
is insufficient, why we need to do better. Okay, on the screen you can see a screenshot

10:26.180 --> 10:31.980
from a tool from Intel that is known as PowerTop. And you can see the first column here which

10:31.980 --> 10:36.860
reports power estimate. And on the right side you have the description of the particular

10:36.860 --> 10:43.860
device, interrupt, process for which this power estimate is calculated. Now, what are

10:44.860 --> 10:51.860
the challenges? Well, first of all, I believe in energy. It turns out that power is a discrete

10:54.780 --> 10:58.460
time event. What do we mean by discrete time event? Let's try to break this down. If you

10:58.460 --> 11:04.900
have a graph, a power is a single point on that graph. Energy is the area under that

11:04.900 --> 11:09.420
graph, okay? We want to calculate energy because energy is what correlates to your battery

11:09.620 --> 11:14.620
drain. Your battery supplies you energy. Power is just one particular instance in that time.

11:14.620 --> 11:21.620
Second, PowerTop has a vendor-specific implementation. I hope that is clear. Third, what is the actionability?

11:24.500 --> 11:28.820
So I just showed you this data. I just showed you the screenshot. It says, oh, my display

11:28.820 --> 11:35.820
backlight is taking 350 milliwatts. Great. This particular process is consuming 292 milliwatts.

11:35.820 --> 11:41.860
Okay, fine. The question that comes to mind is what is the use for me? What is the actionability

11:41.860 --> 11:48.460
for the programmer for this data? How does the programmer change the code to move this

11:48.460 --> 11:54.300
number? And I don't know. How do I fix that? How do I fix something that I don't know how

11:54.300 --> 12:01.300
to fix? And that is a gap that I would like to bridge, right? So let me dive into the

12:01.860 --> 12:07.700
guts of the system. This is a system design. On the screen you can see an elementary flow

12:07.700 --> 12:13.820
chart which summarizes the system at a very high level. And this is a regression-based

12:13.820 --> 12:19.540
system. A regression-based system has two inputs. You have the parameters and you have

12:19.540 --> 12:26.540
the inputs to the parameters. First, we calculate the parameters and then we calculate the inputs

12:27.180 --> 12:34.180
to the parameters. Great, we have time. I will go into details now. Please bear with

12:35.940 --> 12:41.980
me. Okay, let's first look into the parameters. How do we determine the regression model's

12:41.980 --> 12:48.980
parameters? There's an algorithm for this. First of all, we turn off everything. We turn

12:49.660 --> 12:56.660
off everything that we can turn off in the system. We measure the baseline draw. This

12:57.580 --> 13:03.300
is what we refer to as the minimizing the system load. Then we pick each device one

13:03.300 --> 13:10.300
by one. We isolate the impact of the device on the baseline load. And we measure the

13:10.460 --> 13:17.380
drain over multiple times. So we turn on a single time. Let's say that I turn off everything

13:17.380 --> 13:21.700
and then I turn on just the screen. Okay? And I measure the difference between these

13:21.700 --> 13:28.700
two values. The difference is the impact of the screen on my baseline. And then I also

13:30.140 --> 13:37.140
do one thing. I sweep the screen. So I change the brightness of the screen from minimum

13:37.380 --> 13:42.060
to the maximum because obviously the minimum brightness is going to have different power

13:42.060 --> 13:45.940
than the maximum brightness, right? I hope this makes sense to me. Are you guys still

13:45.940 --> 13:52.060
with me? Okay, so this was just an example. But what we're trying to do is we're trying

13:52.060 --> 13:59.060
to quantify the impact of each device on the baseline. Now, I would love to give a metaphor

13:59.220 --> 14:06.220
to help explain this better. Imagine that you have a water tank. And in this water tank

14:07.220 --> 14:13.220
there's one single input and there are 10,000 tiny outputs. And the problem that you're

14:13.580 --> 14:20.580
trying to solve is what is the rate for each of the output pipes? You cannot measure it

14:22.780 --> 14:27.140
directly. So you have these 10,000 outputs which go on their own anytime. They can go

14:27.140 --> 14:31.660
off and you don't have levers to control them. What you're trying to figure out is what is

14:31.660 --> 14:35.540
the drain rate for each of the output pipes? That is essentially the problem that you're

14:35.540 --> 14:41.380
trying to solve. So what you do is you turn off all the outputs, okay? You turn off all

14:41.380 --> 14:48.380
the outputs and you turn on one single output and then you see the difference in the tank

14:48.620 --> 14:55.620
level before and after turning it off, okay? And that is essentially what we call as an

14:56.020 --> 15:02.180
isolation or well in academic terms it's also sometimes known as an ablation study. But

15:02.180 --> 15:08.820
we try to isolate the device and measure the impact. Next, we repeat this process for all

15:08.820 --> 15:15.820
the pipes in the system and we try to get a reasonable estimate of what is the impact

15:15.820 --> 15:22.340
of each pipe. Great. So that was the first step, the device-specific measurements. The

15:22.340 --> 15:28.340
second step would be the kernel process accounting step. This would be the inputs to the regression

15:28.340 --> 15:34.700
model. So we have the parameters that we got from this step and now we need the inputs.

15:34.700 --> 15:41.700
Now how do we determine these inputs? Sorry, did I hear a question? Okay, great. Right,

15:42.540 --> 15:46.980
how do we determine the inputs? What we do is we isolate the impact of each process.

15:46.980 --> 15:53.980
So we identify how much time the process used for the CPU. We identify how much was the

15:53.980 --> 16:00.980
network activity, the screen wakeups, file handles, memory usage and we put all of these

16:02.100 --> 16:09.100
numbers together into the model. And this is what gives us a predicted energy consumption

16:09.540 --> 16:16.540
value for that process. Okay, so what are the challenges? This seems very simple. This

16:17.540 --> 16:22.700
seems, okay, you've done this work but what did you not tell us? Here comes the part that

16:22.700 --> 16:29.700
I did not tell you. First part, estimated value. This is not the reality. It is really

16:30.380 --> 16:35.860
hard to find out the reality. And there's a very famous line in machine learning community.

16:35.860 --> 16:41.300
It's known as all models are wrong but some are useful. So my goal here is to build a

16:41.300 --> 16:46.820
useful model that I hope is less wrong. I would love to make it perfect but unfortunately

16:46.860 --> 16:53.020
we cannot make it perfect. But yes, I would love to make a useful model first. Second,

16:53.020 --> 16:59.780
there's a bit of a cash 22 situation here if you observe that. What is the cash 22?

16:59.780 --> 17:04.380
I am running a measurement process. There's a process that is doing measurement on my

17:04.380 --> 17:11.380
system. Okay, that is also going to create a load. So there's going to be a skew in the

17:12.260 --> 17:19.260
values that I get because of my measurement. Okay, and the more accurate I want it to be,

17:21.300 --> 17:28.140
the more skew it is going to create. So we want to understand what is the right amount

17:28.140 --> 17:35.140
of accuracy that we can use to also be useful while also minimizing the bias. So this is

17:35.380 --> 17:42.380
very challenging, right? Because this is different for every system. And that's a problem that

17:43.380 --> 17:50.380
I'm almost struggling to solve. I would love to get your inputs if you have. Great, next

17:50.380 --> 17:56.060
challenge. There are millions of devices out there and these millions of devices have billions

17:56.060 --> 18:02.500
of ICs inside them. Very often we don't even have the data sheets for these ICs to correlate

18:02.500 --> 18:07.700
the values that we see. The estimates that we get can range across two to three orders

18:07.700 --> 18:12.500
of magnitude. One device can say, oh, I use one microjoule and the second one can say,

18:12.500 --> 18:16.540
oh, I use 10 milliwatts and those numbers don't make sense. Those numbers really blow

18:16.540 --> 18:23.540
you away. So how do we maintain our sanity in the face of the variance that we see here?

18:25.740 --> 18:31.140
And one more challenge would be that, assume that you can say, oh, let the users supply

18:31.220 --> 18:37.620
this data, let me get the data and then build a centralized farm of this data and then try

18:37.620 --> 18:44.620
to make sense of it. Should the users share this data? Would the users share their device

18:45.540 --> 18:50.860
users' data to you and allow you to put it on a centralized server? Who will own that

18:50.860 --> 18:57.860
data? Because there's enormous value in it. So this is, I would love to get your inputs

18:58.020 --> 19:05.020
on. One more challenge here would be the validation. So we got a value that we estimated. How do

19:09.020 --> 19:15.340
we make sure this value is as close as possible to the ground truth? In an ideal world, I

19:15.340 --> 19:20.380
would have infinite money and I would go to every computer in this world and take a probe

19:20.380 --> 19:27.180
and put it next to their CPU and say, oh, this says 17.5 watts and my tool says 17.5

19:27.180 --> 19:33.300
watts. Great job. Let's go. I cannot do that because I don't have that much time. Okay,

19:33.300 --> 19:40.300
so we want to minimize the difference from the ground truth and what we see in the tool.

19:43.060 --> 19:49.060
There's a significant challenge in making sure that what we see is what is the reality.

19:49.060 --> 19:54.660
Right? Remember, there's accuracy and there's precision and there's correctness. And all

19:54.680 --> 20:01.680
of these trifecta come together and make this a very difficult tool to get right. But still,

20:02.540 --> 20:08.460
I believe it's going to be great. I'm very happy to work on it. Great. So once we have

20:08.460 --> 20:14.300
the energy consumption, how do we link it to the carbon emissions? We just saw that

20:14.300 --> 20:21.300
we can calculate energy consumption using power time flatancy. The carbon footprint

20:21.300 --> 20:26.460
can be calculated by multiplying this number by the composition of the energy. Where did

20:26.460 --> 20:32.340
the energy come from that you used to power the device that you were running? And this

20:32.340 --> 20:37.740
composition depends on multiple factors. It can include the geography. It can include

20:37.740 --> 20:43.980
the time of availability. It can include the cost of generation of that energy. Right?

20:43.980 --> 20:48.700
So fortunately, there are good tools and libraries out there which can simplify this problem for

20:48.700 --> 20:54.660
you. So energy composition is, let's say, something that I believe people will solve

20:54.660 --> 21:01.660
faster than I can solve this one. That is why I would love to focus on this one. Great.

21:02.500 --> 21:07.500
All done. Let's get back to the good stuff. How is this going to look like? How is this

21:07.500 --> 21:13.780
going to make your life better? If you're an end user, I would love to ship to you an

21:13.780 --> 21:20.780
application like this, an application which tells you how much energy your inkscape usage

21:21.540 --> 21:28.340
consumed, how much energy your screen was dissipating. So as an end user, you can remember to turn

21:28.340 --> 21:32.620
off inkscape when you're not using it. Or you can figure out, oh, I need to deliver a

21:32.620 --> 21:37.900
presentation to so many people in five minutes. I'd better save my battery. Otherwise, I'll

21:37.900 --> 21:43.380
be in deep trouble. So it's for those use cases when you want to maximize your battery

21:43.380 --> 21:50.380
life as an end user. As a programmer, if you want to expose an API that enables programmers

21:51.820 --> 21:58.260
to take action, if you want to indicate the devices and the code regions which consume

21:58.260 --> 22:03.260
the maximum amount of power in the code and enable the programmers to change it, to modify

22:03.260 --> 22:10.260
it, to fix it. So actionability is the primary concern for programmers. In an ideal world,

22:11.100 --> 22:16.900
I would love to have direct suggestions in the IDE that tell the programmer, oh, this

22:16.900 --> 22:23.500
code is not, this code is going to burn this much carbon. You'd better change it. And for

22:23.500 --> 22:27.900
the system designers, what we want to do is we want to enable them to iterate our designs

22:27.900 --> 22:33.860
faster. We want them to enable this, we want them, we want to enable system designers to

22:33.860 --> 22:39.900
discover designs which are really low on energy, which are really high on performance, which

22:39.940 --> 22:44.940
are really high on carbon efficiency. So there's typically a design space that designers explore.

22:44.940 --> 22:49.620
And we want to enable them to explore the design space faster. That would be the end

22:49.620 --> 22:56.620
goal from this tool. Great. So what is the takeaway from this talk? If there's two things

22:58.300 --> 23:04.060
that I would love for you to take away, that if you forget everything else, okay, just

23:04.060 --> 23:08.940
remember these two things and I'd be very happy. First, we cannot improve what we cannot

23:08.980 --> 23:15.980
measure. We must measure correctly, okay, to improve things. And second, we need to break

23:16.140 --> 23:22.420
out of the CPU mindset, okay, non-CPU system components can dominate your power. Please

23:22.420 --> 23:26.340
remember that. Please remember these two things. And the next time I see you, please come say

23:26.340 --> 23:33.260
hi and I'll, I'll buy you lunch. Okay. Great. Thank you very much for listening to me. It's

23:33.260 --> 23:40.260
great to be here. It's great to talk to you. Please be in touch. Please reach out and oh,

23:43.540 --> 23:47.860
boy, we're out of time, but I'm very, very happy to get your questions. Come talk to

23:47.860 --> 23:48.860
me.

23:48.860 --> 23:52.180
There's still like two minutes for questions. So if there are any questions, please.

23:52.180 --> 23:53.180
Go for it.

23:53.180 --> 23:55.180
There's one in the back. Yes.

23:55.180 --> 23:56.180
So.

23:56.300 --> 24:03.300
So hello and thank you for this presentation. I hope you're not going to hate me for this

24:06.060 --> 24:11.780
question because I'm a primary infrastructure guy. And one thing I was always concerned

24:11.780 --> 24:18.780
about is redundancy, like a scale twice. So if one dies, is this part of your thinking

24:18.780 --> 24:19.780
and scope?

24:20.380 --> 24:27.380
Or does the question make sense?

24:27.380 --> 24:34.380
I'm really sorry. I don't fully understand what you mean by redundancy.

24:49.780 --> 24:56.780
I mean, sure, I understand, but redundancy is trying to solve the problem of fault tolerance.

24:56.780 --> 25:03.780
Okay. It's not trying to solve the problem of efficiency. I'm trying to solve the problem

25:19.380 --> 25:26.380
of efficiency. So redundancy is an orthogonal concern to mine. Does that, does that mean

25:27.620 --> 25:31.120
it makes sense? Yeah. Thank you. But thank you for the question. I really appreciate

25:31.120 --> 25:35.500
questions. Yes.

25:35.500 --> 25:42.500
Did you try to monitor the hover head of monitoring the energy consumption? Yes, that's a great

25:43.500 --> 25:49.100
question. No, we did not. On one side, I'm afraid it's going to be huge. On one side,

25:49.100 --> 25:56.100
I don't know. It's like an infinite recursion, you know, like how can I measure the impact

25:56.380 --> 26:01.660
of my tool itself? Like the tool is what measures the impact. But how do I measure the impact

26:01.660 --> 26:08.660
of the tool? I don't know. I hope, I hope that, I would love to believe that. That's

26:09.940 --> 26:16.940
what I, yes, that's what I want to believe. Yes, please. Thank you very much. It was great

26:17.260 --> 26:17.740
to be here.

26:26.100 --> 26:33.100
Thank you.

