WEBVTT

00:00.000 --> 00:09.800
This is the Kernel Dev Room, just a reminder from time to time.

00:09.800 --> 00:14.720
Ready for our next talk, Renzo and Luca are going to talk about LibVPol, create synthetic

00:14.720 --> 00:16.760
events for poll select and friends.

00:16.760 --> 00:23.520
Hello, I'm Luca Bassi, I'm a student from University of Bologna and today with Professor

00:23.520 --> 00:32.440
Renzo Davoli from University of Bologna we will present the LibVPol library.

00:32.440 --> 00:39.920
Many programs use the poll and select system calls to wait for events triggered by file

00:39.920 --> 00:41.920
descriptor of events.

00:41.920 --> 00:51.040
So you can write a library to be like a natural stack or device and you can implement your

00:51.040 --> 01:00.880
drop-in replacement function of a system call and use some dynamic library magic to

01:00.880 --> 01:09.120
rename the verb t's system call request to their virtual implementation.

01:09.120 --> 01:18.600
t seems all good but there is a big caveat that this approach doesn't allow to mix the

01:18.600 --> 01:29.000
normal file descriptor using the real file descriptor with the library one to use in the

01:29.000 --> 01:36.000
same select and poll and similar system calls.

01:36.000 --> 01:43.040
So Professor Renzo Davoli developed the LibVPol library that is a library that permits to

01:43.040 --> 01:50.920
define file descriptor whose IO events can be generated at user level.

01:50.920 --> 01:58.880
This permits to generate synthetic events for the standard Linux poll select, poll select,

01:58.880 --> 02:07.160
etc. system calls and with this library it's possible to mix the real file descriptor with

02:07.160 --> 02:17.400
the ones provided by libraries as a parameter of the poll select, etc. system calls.

02:17.400 --> 02:23.400
The API of LibVPol is very simple, it's three methods.

02:23.400 --> 02:33.320
Vupol create to create Vupol file descriptor, Vupol CTL to change the set of pending events

02:33.320 --> 02:43.240
reported by the Vupol file descriptor and Vupol close to close the file descriptor.

02:43.240 --> 02:50.040
To work with the LibVPol library needs kernel support for a complete implementation of this

02:50.040 --> 02:51.600
feature.

02:51.600 --> 03:01.140
There is two possible support to LibVPol, a kernel patch extending the eventfd system

03:01.140 --> 03:10.220
call and a kernel model that implement a virtual device, exponent dev slash vupol.

03:10.220 --> 03:19.660
The library also provides a fallback implementation but is feature limited and for full support

03:19.660 --> 03:43.860
they need a patched kernel or the kernel model implementing the virtual devices.

03:43.860 --> 03:50.460
So we had a problem, the problem was to mix a real file descriptor and a file descriptor

03:50.460 --> 03:59.180
code file descriptor created by library implementing stacks, implementing virtual devices.

03:59.180 --> 04:07.180
We decided to do the nice API for the library but unfortunately it is impossible to have

04:07.180 --> 04:13.020
this implementation complete without having a kernel support.

04:13.020 --> 04:20.860
The first idea was to extend the feature of eventfd.

04:20.860 --> 04:27.660
In fact if you try to code a library like that and you look around the system code and

04:27.660 --> 04:36.620
you step into the manual of eventfd the title set create a file descriptor for event notification.

04:36.620 --> 04:37.620
That's it.

04:37.620 --> 04:45.620
But unfortunately it is not providing ways to create, to set arbitrarily, pull in, pull

04:45.620 --> 04:47.540
out, pull out.

04:47.540 --> 04:58.220
That's just some way to synchronize processes using counters.

04:58.220 --> 05:04.780
So it was chosen because of the finish of the feature.

05:04.780 --> 05:14.700
The kernel patch adds to eventfd a third semantics because eventfd has already two semantics,

05:14.700 --> 05:21.860
the normal semantics and the semaphore semantics that is able to implement a service like the

05:21.860 --> 05:27.100
standard semaphores up, down, and down in the kernel.

05:27.100 --> 05:38.060
We had a third way, a third way, a third semantics, a loophole.

05:38.060 --> 05:40.380
There should be another way to implement it.

05:40.380 --> 05:50.180
So following the standard naming of system codes we have a loophole create, loophole,

05:50.180 --> 05:52.180
control and so on.

05:52.180 --> 06:00.100
It would be possible to create, to propose the adding of two different system codes,

06:00.100 --> 06:04.460
loophole fd create and loophole fd control.

06:04.460 --> 06:14.860
But the idea is that we feel that eventfd is the most clear and straightforward way

06:14.860 --> 06:18.660
to implement this feature.

06:18.660 --> 06:30.740
So out of these extension words we can create the eventfd with the new flag saying we want

06:30.740 --> 06:34.940
the semantics of the pole.

06:34.940 --> 06:44.460
Then following the semantics of eventfd we have read and write, read, return the current

06:44.460 --> 06:47.740
stage of rendering.

06:47.740 --> 06:55.900
We use the 64-bit buffer of eventfd as a bitmap of a set.

06:55.900 --> 07:08.460
Write is used to change the set of events for the file descriptor.

07:08.460 --> 07:18.780
For example you can add the pole in and pole pre using these system codes.

07:18.780 --> 07:36.860
So the operation flag add mod del is specified by setting the mod request bits.

07:36.860 --> 07:49.020
We had a problem, we had a proposal of solution but we needed to have it working quite fast,

07:49.020 --> 07:50.020
quite good.

07:50.020 --> 07:53.540
We needed it for our process.

07:53.540 --> 08:02.300
So we proposed, we developed another way to have the same service to implement this service

08:02.300 --> 08:04.660
as a virtual device.

08:04.660 --> 08:07.740
So we have implemented it.

08:07.740 --> 08:25.860
If you download, if you install the LibrePole package from Debian Ubuntu you get this module

08:25.860 --> 08:31.100
and this module is installed using decay MS.

08:31.100 --> 08:42.660
So you can have the service by adding the package after the kernel module.

08:42.660 --> 08:54.620
Here the implementation, so we use the LibrePole, the user-level library tries one after the

08:54.620 --> 08:55.620
other.

08:55.620 --> 09:01.420
If there is eventfd patch it uses eventfd patch.

09:01.420 --> 09:08.300
Otherwise if there is the LibrePole device it uses the Ubipole device.

09:08.300 --> 09:14.300
At the last resort it uses an emulation.

09:14.300 --> 09:21.180
For the device it is possible to open the device and the generation of events is performed

09:21.180 --> 09:30.700
by IO control like it's usual for devices.

09:30.700 --> 09:32.700
Examples.

09:32.700 --> 09:34.580
We work in Internet of Threats.

09:34.580 --> 09:42.820
The idea of giving each process the ability to have their own stack inside the process

09:42.820 --> 09:52.100
itself so that this process can be a network node by itself.

09:52.100 --> 10:02.540
People Peacock's Net is a library which implements a user-level network implementation.

10:02.540 --> 10:06.540
Peacock's Net is based off Peacot TCP.

10:06.540 --> 10:20.780
There is Peacot TCP plus a glue layer that creates the abstraction of a library-based

10:20.780 --> 10:23.780
network stack.

10:23.780 --> 10:32.860
We have added LibrePole, we use LibrePole in Peacock's Net so that you can write programs

10:32.860 --> 10:40.260
like a terminal emulator which has a main event loop waiting for standard input to send

10:40.260 --> 10:47.380
data on the socket and to wait for the socket to send to write on the terminal output.

10:47.380 --> 11:04.820
So it wouldn't be possible using other stuff or tricky solution based on unisockets or

11:04.820 --> 11:15.180
bytes to synchronize but it would be just on purpose for this.

11:15.300 --> 11:24.540
Instead of using LibrePole and extension of the kernel or the device gives a general

11:24.540 --> 11:36.940
purpose solution so that we are working to port even LWP as a user-level stack implementation

11:37.100 --> 11:45.100
so that we can mix and create applications that can use different stack implementations.

11:45.100 --> 11:54.380
Maybe we can create gateways between network streams coming from different network implementations.

11:55.340 --> 12:06.740
So to summarize we had a problem to have a file descriptor, real file descriptor and

12:06.740 --> 12:13.940
virtual file descriptor working together in PulseSelector, E-Pole and whatever POLU you

12:13.940 --> 12:15.500
can invent in the future.

12:16.500 --> 12:23.500
Providing POLIN POLAR POPLE and all the POLU events you can create in the future.

12:23.500 --> 12:44.180
We have proposed a library giving a nice and easily straightforward interface and we have

12:44.940 --> 12:56.820
implemented the proposed implementation and implemented a proposal to be accepted in the kernel.

12:56.820 --> 13:08.860
A device driver and an extension to say existing system code. If you want obviously all the

13:08.940 --> 13:13.740
source code is publicly available on GitHub.

13:15.340 --> 13:19.060
Okay, I think that's all of the questions.

13:38.860 --> 13:54.860
I wasn't sure if there were any slides but does this need each individual event loop library to add support for this?

13:54.860 --> 14:02.860
Or can you use this with existing event loop libraries like for example SystemD has an event loop library

14:02.860 --> 14:07.380
but we need to add explicit support to be able to use V-Pole file descriptors?

14:07.380 --> 14:12.380
Or can you plug this in without needing to modify existing event loop libraries to use it?

14:26.380 --> 14:33.380
So you create a V-Pole file descriptor and you want to use it with an event loop.

14:34.380 --> 14:37.380
Does the event loop need to do anything special?

14:37.380 --> 14:40.380
No, absolutely. That's the point.

14:40.380 --> 14:47.380
Instead of creating something special to use the POL selector, you use this method.

14:47.380 --> 14:59.380
You use the standard, clean syntax of the selector POL or whatever event you're waiting for.

15:00.380 --> 15:04.380
System code you won't not use. That's the point.

15:04.380 --> 15:12.380
So instead of creating unpublished solutions for the use of that application,

15:12.380 --> 15:17.380
this is a general purpose solution for all applications needing to work with select POL.

15:17.380 --> 15:27.380
Because you can add extra services to provide the same semantics, the same method to unblock,

15:27.380 --> 15:32.380
to signal, and for this system codes.

15:35.380 --> 15:37.380
Maybe one more question.

15:37.380 --> 15:38.380
Please.

15:38.380 --> 15:40.380
Is there any...

15:40.380 --> 15:44.380
There's also the new interface in the Linux kernel as IOU ring.

15:44.380 --> 15:50.380
Is there anything needed to make this work with IOU ring as well?

15:50.380 --> 15:53.380
Or I'm not sure if you've looked at that.

15:53.380 --> 15:55.380
I'm not sure.

15:55.380 --> 16:03.380
So I'll check and please send the mail or send feedback.

16:05.380 --> 16:11.380
I probably missed this, but why didn't you, for example, consider proposing a new E-POL extension?

16:11.380 --> 16:14.380
Like a new E-POL system call, for example?

16:18.380 --> 16:22.380
It's not an extension for E-POL.

16:22.380 --> 16:26.380
I use the standard E-POL like POL or the other.

16:26.380 --> 16:33.380
It's a way to signal to POL or E-POL that's never occurred.

16:34.380 --> 16:44.380
A common solution for this is to create, for example, a pipe and waiting for a red event on a pipe.

16:44.380 --> 16:50.380
And you know that if you receive a red event on a pipe, it means that something has happened.

16:51.380 --> 17:04.380
Instead of having this, you can use, you can write a flight description behaving like an event driver,

17:04.380 --> 17:08.380
so that you can port your code as is.

17:08.380 --> 17:14.380
Because if the driver would have to send POL and VAL,

17:15.380 --> 17:23.380
you can synthesize POL and VAL and your E-POL or POL can work in the standard way.

17:23.380 --> 17:32.380
With that extra code, it's just to simulate something because it's not possible to do what LibbyPOL does.

17:44.380 --> 17:54.380
Another question.

17:54.380 --> 18:01.380
As I understand it correctly, it simulates somehow the source of events somehow.

18:01.380 --> 18:03.380
But how does it scale?

18:03.380 --> 18:08.380
Because you use just one system call in the case of the I.O. control.

18:08.380 --> 18:10.380
It's just a system call or using write.

18:10.380 --> 18:13.380
It's just another system call somehow.

18:13.380 --> 18:16.380
So it doesn't probably not scale, right?

18:16.380 --> 18:25.380
So if you want to generate thousands of events, triggering events, it requires a system call each.

18:25.380 --> 18:30.380
I say it does scale.

18:30.380 --> 18:37.380
It scales as a poll of scales.

18:37.380 --> 18:40.380
Because you can use as many fider skaters.

18:40.380 --> 18:47.380
For each fider skater, you can have all the events you need.

18:47.380 --> 18:52.380
In which means you think there are problems with scaling?

18:52.380 --> 18:57.380
Yeah, I mean a poll or an E-POL or whatever scales somehow.

18:57.380 --> 19:05.380
But the mechanism on your side to trigger this requires one system call.

19:05.380 --> 19:10.380
So here you see another write on the slides.

19:10.380 --> 19:12.380
Another one, the other slides.

19:12.380 --> 19:16.380
If you saw the write, it's just a system call or using the I.O. control.

19:16.380 --> 19:19.380
It's just another system call to trigger this.

19:19.380 --> 19:23.380
So you have one event.

19:23.380 --> 19:30.380
The solution with the device, you mean using the I.O. control.

19:30.380 --> 19:35.380
Yeah, to trigger the event, probably we can do it offline later.

19:35.380 --> 19:40.380
Here the last line.

19:40.380 --> 19:42.380
No, no, on the previous slide.

19:42.380 --> 19:46.380
This one, the write call.

19:46.380 --> 19:48.380
Here, right?

19:48.380 --> 19:50.380
You see this?

19:50.380 --> 19:52.380
This is a system call, the write is a system call.

19:52.380 --> 19:56.380
And if you trigger it, it requires a system call.

19:56.380 --> 20:02.380
But each aesthetic event requires one system call, right?

20:02.380 --> 20:05.380
No.

20:05.380 --> 20:09.380
And if I want to simulate millions of...

20:09.380 --> 20:13.380
No, no, you don't need the call for each event because it's a bitmap.

20:13.380 --> 20:19.380
So you can set the bitmap of an event.

20:19.380 --> 20:25.380
You want to be added or set or cleaned.

20:25.380 --> 20:30.380
So with one call, you set all the events for one FD.

20:30.380 --> 20:33.380
Obviously for different FD, you need different...

20:33.380 --> 20:36.380
Right.

20:36.380 --> 20:41.380
Next.

20:41.380 --> 20:44.380
Thanks. We're out of time.

20:44.380 --> 20:46.380
Thank you for your talk.

20:46.380 --> 20:47.380
Thank you.

20:47.380 --> 20:50.380
And we'll have a five minute break.

20:55.380 --> 20:57.380
Thank you.

