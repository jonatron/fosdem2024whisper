WEBVTT

00:00.000 --> 00:05.000
I translate.

00:05.000 --> 00:10.000
No, no, I directly plugged into the laptop.

00:10.000 --> 00:15.000
Okay, so we are going to continue on.

00:15.000 --> 00:18.000
The stream going out that is being recorded looks nice,

00:18.000 --> 00:21.000
so the rest of us, we're going to suck it up

00:21.000 --> 00:28.000
and just listen to what we are here to learn from Holger Voight.

00:28.000 --> 00:33.000
So please give a round of welcome to Holger.

00:33.000 --> 00:38.000
Yeah, okay, so many thanks.

00:38.000 --> 00:43.000
Angie Spice, Circulator and Pink.

00:43.000 --> 00:48.000
Talk about Stand-Alone and Embedded in Turkey Cat.

00:48.000 --> 00:55.000
Well, I give a short introduction to Circulator.

00:55.000 --> 01:00.000
Then talk about what's new in Angie Spice.

01:00.000 --> 01:04.000
Talk about the Kikat-Angie-Spice interface

01:04.000 --> 01:07.000
and give some simulation examples.

01:07.000 --> 01:12.000
Well, conclude with what is next.

01:12.000 --> 01:14.000
Yeah, why circuit simulation?

01:14.000 --> 01:19.000
You emulate electronic circuits per software.

01:19.000 --> 01:22.000
It should be cost efficient at time saving.

01:22.000 --> 01:25.000
That's it.

01:25.000 --> 01:28.000
Some details, of course, you can check functionality

01:28.000 --> 01:30.000
without making hardware.

01:30.000 --> 01:33.000
It's very important if you do IC design

01:33.000 --> 01:38.000
because fabricating an IC with a defect circuit,

01:38.000 --> 01:41.000
this is very expensive.

01:41.000 --> 01:45.000
You can check for parasitic elements.

01:45.000 --> 01:48.000
You can make variance very easily.

01:48.000 --> 01:50.000
You can change some device parameters

01:50.000 --> 01:53.000
and see what is happening.

01:53.000 --> 01:58.000
You can evaluate new concepts with not too large an effort.

01:58.000 --> 02:01.000
You can cross-check against automatic circuit generation

02:01.000 --> 02:08.000
as a final simulation test.

02:08.000 --> 02:10.000
You can anticipate reliability,

02:10.000 --> 02:13.000
make degradation simulations.

02:13.000 --> 02:15.000
And it's a good learning experience

02:15.000 --> 02:17.000
because you can look into a circuit

02:17.000 --> 02:20.000
without using hardware to do so.

02:20.000 --> 02:22.000
You can see voltage and currents

02:22.000 --> 02:25.000
in different branches in this.

02:25.000 --> 02:26.000
Very interesting.

02:26.000 --> 02:28.000
Yeah, Angie Spice, what is it?

02:28.000 --> 02:32.000
It's a circuit simulator that numerically solves equations.

02:32.000 --> 02:34.000
Describing electronic circuits,

02:34.000 --> 02:37.000
it can also be other types of circuits.

02:37.000 --> 02:43.000
For example, thermal could also be mechanical.

02:43.000 --> 02:48.000
And you are interested mostly in time-varying signals

02:48.000 --> 02:51.000
in electronics, its current and voltages.

02:51.000 --> 02:54.000
It's the open-source successor of the vulnerable

02:54.000 --> 02:57.000
SPICE-3 from Berkeley.

02:57.000 --> 02:59.000
Okay, we have a circuit.

02:59.000 --> 03:01.000
This is a very simple circuit,

03:01.000 --> 03:03.000
an inverter with two transistors.

03:03.000 --> 03:07.000
And this is the entry to Angie Spice.

03:07.000 --> 03:12.000
So Angie Spice is a command line input tool.

03:12.000 --> 03:14.000
Many people said, ooh, command line.

03:14.000 --> 03:18.000
But I've just learned command line is very nice.

03:18.000 --> 03:22.000
KeyCut has got a command line and other software also.

03:22.000 --> 03:24.000
So we are not too bad with that.

03:24.000 --> 03:28.000
Okay, you have the net list, the SPICE net list,

03:28.000 --> 03:33.000
which contains circuit description, power supplies, transistors,

03:33.000 --> 03:37.000
some simulation commands to run the thing

03:37.000 --> 03:41.000
and some model data to run this thing.

03:41.000 --> 03:43.000
The output is graphical indeed.

03:43.000 --> 03:46.000
It's a time axis and the voltage axis.

03:46.000 --> 03:50.000
The ideal green input.

03:50.000 --> 03:53.000
Yeah, it's green still.

03:53.000 --> 03:58.000
And the simulated output, you see the inverted signal.

03:58.000 --> 04:00.000
Yeah.

04:00.000 --> 04:04.000
This is the Angie Spice user interface.

04:04.000 --> 04:09.000
Yeah, on the input side, you put in the circuit net list,

04:09.000 --> 04:11.000
the circuit description.

04:11.000 --> 04:14.000
You put in models or model parameters for the devices

04:14.000 --> 04:16.000
you're using in your circuit.

04:16.000 --> 04:19.000
And you put in simulation commands.

04:19.000 --> 04:22.000
And the output could be data tables or tables to file,

04:22.000 --> 04:26.000
of course, could be graphical plots.

04:26.000 --> 04:31.000
We use the venerable X11 interface

04:31.000 --> 04:34.000
or native Windows plotting capability.

04:34.000 --> 04:38.000
Or you can plot to PostScript SVG

04:38.000 --> 04:42.000
or use NuPlot or other tools for outputting.

04:42.000 --> 04:45.000
Yeah, what's new in Angie Spice?

04:45.000 --> 04:49.000
The current release is Angie Spice 42,

04:49.000 --> 04:53.000
released in December 27th last year.

04:53.000 --> 04:57.000
We have an additional matrix over.

04:57.000 --> 05:00.000
I will talk about these things a little bit more in detail

05:00.000 --> 05:02.000
in the following.

05:02.000 --> 05:07.000
We have a new matrix over in addition to the venerable SPACE 1.3.

05:07.000 --> 05:12.000
We support VariLock A-coded compact device models.

05:12.000 --> 05:16.000
We allow co-simulation for mixed signal simulation

05:16.000 --> 05:19.000
with VariLock digital circuit blocks

05:19.000 --> 05:24.000
and mixed signal digital analog parts within Angie Spice.

05:24.000 --> 05:26.000
We allow core simulation.

05:26.000 --> 05:30.000
Again, mixed signal with C-coded digital.

05:30.000 --> 05:36.000
So there is a way to translate C-code into Angie Spice readable

05:37.000 --> 05:39.000
shared libraries.

05:39.000 --> 05:44.000
And we have a, and I'm benefiting from the vastly improved

05:44.000 --> 05:46.000
graphical user interface,

05:46.000 --> 05:51.000
key cut, especially the upcoming key cut A is offering

05:51.000 --> 05:54.000
for using Angie Spice.

05:54.000 --> 05:56.000
Well, the matrix over.

05:56.000 --> 05:58.000
What is the circuit simulator doing?

05:58.000 --> 06:01.000
The circuit simulator, if you look inside,

06:01.000 --> 06:06.000
Angie Spice gets the circuit, makes a setup,

06:06.000 --> 06:10.000
parsing the netlist, reading the model files.

06:10.000 --> 06:13.000
And then it is, if you do a transient simulation,

06:13.000 --> 06:18.000
simulation versus time, then you have the ever circle here

06:18.000 --> 06:23.000
between model equation evaluation and these data go

06:23.000 --> 06:26.000
into the matrix and the matrix is solved.

06:26.000 --> 06:28.000
And then you go for the next time step

06:28.000 --> 06:31.000
and you repeat this until the time is over

06:31.000 --> 06:34.000
and you look at the output.

06:34.000 --> 06:37.000
The model evaluation is already running in parallel

06:37.000 --> 06:38.000
in Angie Spice.

06:38.000 --> 06:39.000
We use open MPs,

06:39.000 --> 06:42.000
so if you have a multi-core processor

06:42.000 --> 06:47.000
you typically have today, you use, benefit from that.

06:47.000 --> 06:51.000
The matrix evaluation is not paralyzed.

06:51.000 --> 06:57.000
These sparse matrix solvers are difficult to paralyze.

06:57.000 --> 07:02.000
So we have been looking for a long time

07:02.000 --> 07:04.000
for an additional matrix solver.

07:04.000 --> 07:08.000
We used the sparse 1.3, developed in 1986.

07:08.000 --> 07:13.000
And now we use an additional optional selectable KLU matrix

07:13.000 --> 07:18.000
solver, which is ongoing development by T.A. Davis

07:18.000 --> 07:20.000
and his co-workers.

07:20.000 --> 07:23.000
And with KLU you get a speed-up of simulation

07:23.000 --> 07:26.000
by factor 1.5 to 3 if you have large circuits

07:27.000 --> 07:31.000
and especially if you do circuits for IC simulation.

07:31.000 --> 07:36.000
And this is, of course, an advancement.

07:38.000 --> 07:43.000
We allow Verlach A compact device models in Angie Spice.

07:43.000 --> 07:46.000
Compact device models, these are the model equations

07:46.000 --> 07:49.000
describing modern transistors, for example.

07:49.000 --> 07:52.000
These complex, tiny things like FinFETs

07:53.000 --> 08:00.000
also would have 500 parameters and lots of differential equations

08:00.000 --> 08:04.000
to describe and people do the development in Verlach A.

08:04.000 --> 08:10.000
And so we had a real need to have an interface to this Verlach A

08:10.000 --> 08:14.000
because this provides access to the modern devices

08:14.000 --> 08:17.000
like BISIM bulk, which is for ultra-short channels,

08:17.000 --> 08:22.000
or BISIM CMG, which is for FinFET, or for gallium nitride devices,

08:22.000 --> 08:26.000
power devices, high-speed bipolar transistors, and so on and so on.

08:26.000 --> 08:32.000
Yeah, and we got this set up in cooperation with the company SemiMod,

08:32.000 --> 08:34.000
who did this open-source development.

08:34.000 --> 08:37.000
We have the Verlach A model description.

08:37.000 --> 08:42.000
We compiled this model with an open-source compiler OpenWath,

08:43.000 --> 08:46.000
compiled directly into a shared library,

08:46.000 --> 08:49.000
and this shared library can be read by Angie Spice,

08:49.000 --> 08:53.000
which has got the OSDI interface.

08:53.000 --> 09:00.000
So we are reading directly the Verlach A compiled model

09:00.000 --> 09:04.000
from a shared library or DLL.

09:04.000 --> 09:07.000
Yeah, we make use of this.

09:07.000 --> 09:11.000
For example, I've been mentioned maybe already,

09:12.000 --> 09:17.000
open-source PDK is for IC design,

09:17.000 --> 09:24.000
are upcoming, and one of these is the IHP open-source PDK,

09:24.000 --> 09:28.000
and this is a 130-nanometer CMOS process

09:28.000 --> 09:32.000
with integrated ultra-fast bipolar transistors.

09:32.000 --> 09:35.000
Ultra-fast means 500 GHz or so.

09:36.000 --> 09:41.000
The model used for the bipolar is the so-called phobic model,

09:41.000 --> 09:44.000
which is integrated into Angie Spice for some years now,

09:44.000 --> 09:48.000
and the MOS model is a PSP model developed by,

09:48.000 --> 09:52.000
currently I think developed by Lehti in France,

09:52.000 --> 09:57.000
and this is Verlach A, and we translate this,

09:57.000 --> 09:59.000
put this into Angie Spice,

09:59.000 --> 10:02.000
and so we can support this open-source PDK with simulation.

10:02.000 --> 10:07.000
This is just a simple example, 19-stage NAND gate ring oscillator,

10:07.000 --> 10:09.000
so we have 19 NAND gates in series,

10:09.000 --> 10:12.000
feed them back, and it starts to oscillate,

10:12.000 --> 10:18.000
and we have your frequency,

10:18.000 --> 10:22.000
this is an FFT of this signal, a frequency of 600 MHz,

10:22.000 --> 10:25.000
and you divide it by 19 by 2,

10:25.000 --> 10:29.000
and then you get an inverter delay of 280 picoseconds.

10:30.000 --> 10:38.000
Okay, yeah, we allow digital Verlach circuit blocks into Angie Spice.

10:38.000 --> 10:42.000
Looks a little bit more complex, but isn't that much complex?

10:42.000 --> 10:46.000
We have a Verlach digital circuit block.

10:46.000 --> 10:52.000
We compile this with an open-source compiler very later

10:52.000 --> 10:55.000
into some intermediate C code,

10:55.000 --> 10:59.000
and then we compile this intermediate C code

10:59.000 --> 11:01.000
with some C templates in addition,

11:01.000 --> 11:04.000
which are constant all the same.

11:04.000 --> 11:12.000
We compile it with GCC or MSVC into a C-CodedShare library.

11:12.000 --> 11:15.000
And this C-CodedShare library is read by Angie Spice.

11:15.000 --> 11:19.000
Angie Spice has a so-called code model interface,

11:19.000 --> 11:23.000
and we have written a code model in decosim,

11:23.000 --> 11:28.000
which directly interfaces this shared library.

11:28.000 --> 11:34.000
So we can now run simulation with this standard Angie Spice netlist,

11:34.000 --> 11:39.000
which may contain lots of analog, plus digital blocks.

11:39.000 --> 11:41.000
This is an example, it's just a demo,

11:41.000 --> 11:45.000
it's not a productive simulation.

11:45.000 --> 11:52.000
This is a successive approximation register analog to digital converter.

11:52.000 --> 11:54.000
Six-bit.

11:54.000 --> 12:05.000
And this uses the digital SARAR block written in Verlach

12:05.000 --> 12:12.000
with the analog part, which is a capacitor array with some switches.

12:12.000 --> 12:17.000
Okay, and even if things look complex,

12:17.000 --> 12:19.000
using this is not very complex.

12:19.000 --> 12:22.000
You need two commands.

12:22.000 --> 12:24.000
You have this command, Angie Spice,

12:24.000 --> 12:31.000
and Angie Spice calls a script written in Angie Spice control language,

12:31.000 --> 12:38.000
and you enter the ADC Verlach description.

12:38.000 --> 12:43.000
It compiles the Verlach thing, it compiles the GCC thing,

12:43.000 --> 12:48.000
and then you call the Spice netlist with the standard command,

12:48.000 --> 12:53.000
Angie Spice ADC dot sir, which contains the analog part

12:53.000 --> 12:56.000
and contains the simulation control,

12:56.000 --> 12:58.000
then you get this kind of thing.

12:58.000 --> 13:03.000
Okay, I just enlarged a little bit.

13:03.000 --> 13:06.000
You see that it's a successive approximation.

13:06.000 --> 13:13.000
This is the ramped-in voltage, and this is the x-axis is time.

13:13.000 --> 13:15.000
And this is a new start.

13:15.000 --> 13:18.000
We try to get the value of this point here.

13:18.000 --> 13:21.000
It starts with the starting value,

13:21.000 --> 13:27.000
and then successively approximates the input.

13:27.000 --> 13:31.000
Well, with a certain delay, 8.5 microseconds here,

13:31.000 --> 13:37.000
which is the time you need for the conversion,

13:37.000 --> 13:39.000
then you are here in the stable phase,

13:39.000 --> 13:43.000
and this is the red line just shifted by 8.5 microseconds,

13:44.000 --> 13:47.000
is, well, the output signal.

13:47.000 --> 13:50.000
Yeah, so digital plus analog.

13:50.000 --> 13:59.000
Okay, you can also do this with C-coded digital type of models.

13:59.000 --> 14:02.000
You have C-coded independent processes.

14:02.000 --> 14:05.000
You compile them with GCC, for example,

14:05.000 --> 14:09.000
or with any C compiler.

14:09.000 --> 14:15.000
And these communicate with NG-spice via another code model.

14:15.000 --> 14:18.000
The digital interface is now called deep-process.

14:18.000 --> 14:21.000
Well, this has been developed by Eurospalatis

14:21.000 --> 14:23.000
from Isotel some time ago,

14:23.000 --> 14:26.000
but we have now, for the recent version,

14:26.000 --> 14:28.000
have adapted it a little bit,

14:28.000 --> 14:32.000
modified it so it will also run under MS-Windows.

14:32.000 --> 14:37.000
And now we can, yeah, simulate some circuit,

14:37.000 --> 14:41.000
which has some circuit blocks from C-code.

14:41.000 --> 14:45.000
This is just, again, an example, a simple example.

14:45.000 --> 14:53.000
The C-code you see here, this is, yeah, a gray code generator.

14:53.000 --> 14:58.000
This gray code generator is compiled

14:58.000 --> 15:02.000
and loaded into NG-spice,

15:02.000 --> 15:04.000
and this is the output.

15:04.000 --> 15:06.000
The plotting here is by GTKWave,

15:06.000 --> 15:09.000
because this is a nice digital plot.

15:09.000 --> 15:12.000
Yeah, and you can use these kinds of blocks.

15:12.000 --> 15:17.000
So you define these compute functions with data out

15:17.000 --> 15:24.000
and data in and some other,

15:24.000 --> 15:29.000
and the time or the clock circuit, clock going in,

15:29.000 --> 15:34.000
you can run C-code digital circuit.

15:34.000 --> 15:41.000
Okay, so I want to talk about schematic entry for NG-spice,

15:41.000 --> 15:44.000
because this is under continuous development,

15:44.000 --> 15:49.000
and, yeah, it's a nice usable thing.

15:49.000 --> 15:53.000
Why do we want to have such a graphical user interface?

15:53.000 --> 15:56.000
Well, NetList as input quickly becomes confusing.

15:56.000 --> 15:58.000
You need schematic entry.

15:58.000 --> 16:00.000
You need to see circuits,

16:00.000 --> 16:03.000
circuit schematics,

16:03.000 --> 16:06.000
and then have an interface to the simulator.

16:06.000 --> 16:08.000
You can get better documentation, of course,

16:08.000 --> 16:11.000
if you group inputs and outputs.

16:11.000 --> 16:15.000
This is not an NG-spice development.

16:15.000 --> 16:18.000
So we develop this, for NG-spice,

16:18.000 --> 16:20.000
don't develop these graphical user interfaces.

16:20.000 --> 16:23.000
We make use of existing ones

16:23.000 --> 16:26.000
or support the development.

16:26.000 --> 16:28.000
And, of course, you need one,

16:28.000 --> 16:30.000
because all other simulators are mostly,

16:30.000 --> 16:32.000
most of all other simulators have one,

16:32.000 --> 16:34.000
so you have to offer one.

16:34.000 --> 16:38.000
There are three of these interfaces

16:38.000 --> 16:40.000
currently under development,

16:40.000 --> 16:42.000
we cooperate.

16:42.000 --> 16:45.000
This is a thing called X-Schem,

16:45.000 --> 16:48.000
whose main focus is on IC design.

16:48.000 --> 16:51.000
There is another one, QXS.

16:51.000 --> 16:53.000
This is a very universal interface,

16:53.000 --> 16:56.000
which specializes a little bit in RF simulation.

16:56.000 --> 16:59.000
And then, okay, we have the key-cat.

16:59.000 --> 17:02.000
So I wouldn't say that key-cat is developed

17:02.000 --> 17:05.000
because it's a graphical user interface of NG-spice.

17:05.000 --> 17:08.000
No, the other way around, yeah?

17:08.000 --> 17:11.000
You have heard about this PCB design and layout tool,

17:11.000 --> 17:14.000
and it offers a simulation,

17:14.000 --> 17:17.000
and the simulation engine is NG-spice

17:17.000 --> 17:20.000
to support the circuit designer.

17:20.000 --> 17:24.000
So, of course, I can then make use of this beautiful interface.

17:24.000 --> 17:29.000
Okay, just show these interfaces in strange colors.

17:29.000 --> 17:34.000
Yeah, I won't talk about these.

17:34.000 --> 17:38.000
I want to talk about this one, again, in strange colors.

17:38.000 --> 17:43.000
Okay, but you could imagine that it could look nice.

17:43.000 --> 17:49.000
This is the ischema window with some circuit,

17:49.000 --> 17:52.000
simple circuit, a simple phase shift oscillator

17:52.000 --> 17:57.000
with a 4.2 kHz frequency oscillating.

17:57.000 --> 18:04.000
And down here, you see the FFT.

18:04.000 --> 18:09.000
Of course, you see it's not a super clean sinusoidal signal,

18:09.000 --> 18:15.000
but, okay, this is the 4 kHz thing here.

18:15.000 --> 18:17.000
Yeah, so what is the interface looking like?

18:18.000 --> 18:22.000
Ischema does this schematic entry.

18:22.000 --> 18:26.000
Ischema generates the SPICE netlist,

18:26.000 --> 18:31.000
and Ischema also does a graphical presentation of the results.

18:31.000 --> 18:35.000
So, it sends the circuit netlist to NG-spice,

18:35.000 --> 18:37.000
it sets model parameters to NG-spice,

18:37.000 --> 18:39.000
so the simulation commands,

18:39.000 --> 18:42.000
and it gets back simulation results.

18:42.000 --> 18:46.000
NG-spice is here used as a shared library

18:46.000 --> 18:49.000
to this key-cut process.

18:52.000 --> 18:55.000
Yeah, I would like to make a live demo.

18:55.000 --> 18:57.000
I don't like these colors,

18:57.000 --> 19:02.000
but let's see if we can survive somehow.

19:02.000 --> 19:06.000
Okay, this is my starting template.

19:06.000 --> 19:11.000
I do not start from the zero because it takes too much time.

19:11.000 --> 19:17.000
So, this should become an operational amplifier.

19:17.000 --> 19:22.000
Simple thing, amplifier by a factor of 10.

19:22.000 --> 19:27.000
Okay, what is missing is the operational amplifier.

19:27.000 --> 19:32.000
I try to grab it, grab it from the library.

19:32.000 --> 19:35.000
So, we just load the library,

19:35.000 --> 19:36.000
it takes a little bit of time,

19:36.000 --> 19:39.000
but only once the first time, then it gets faster.

19:39.000 --> 19:43.000
I know that it is in the library simulation-spice,

19:43.000 --> 19:46.000
and here is the op-amp.

19:46.000 --> 19:48.000
I grab it, and I move it,

19:48.000 --> 19:53.000
and hopefully it fits because, yeah, it did last time.

19:53.000 --> 19:54.000
Yeah, it does.

19:54.000 --> 19:57.000
Okay, so this is how you place additional elements.

19:57.000 --> 19:59.000
Very simple.

19:59.000 --> 20:00.000
But now, let's stop.

20:00.000 --> 20:02.000
We don't need any more, I hope.

20:02.000 --> 20:05.000
Yeah, and now we do simulation.

20:05.000 --> 20:07.000
This is a real-time simulation.

20:08.000 --> 20:11.000
I look inspect for simulator,

20:11.000 --> 20:13.000
and I get this simulator interface.

20:13.000 --> 20:17.000
Well, black is green, and pink is white.

20:17.000 --> 20:20.000
Okay, I'm sorry for that.

20:20.000 --> 20:22.000
What do we want to do?

20:22.000 --> 20:24.000
We want to do the transient simulation.

20:24.000 --> 20:31.000
Transient simulation is output versus input versus time.

20:31.000 --> 20:35.000
Okay, and so we have, yeah, what is our input?

20:35.000 --> 20:37.000
Let's go back and have a look.

20:37.000 --> 20:40.000
The input is a sinusoidal signal

20:40.000 --> 20:42.000
with an amplitude of 0.1 volt

20:42.000 --> 20:46.000
and a frequency of 1 kilohertz.

20:46.000 --> 20:49.000
Okay, back to the simulator window,

20:49.000 --> 20:52.000
and I just click on to start simulation,

20:52.000 --> 20:54.000
and here is our simulation.

20:54.000 --> 20:57.000
The input is the small one,

20:57.000 --> 21:00.000
and the output is the red,

21:00.000 --> 21:01.000
who stays red.

21:01.000 --> 21:03.000
That's great.

21:03.000 --> 21:07.000
The input is the red signal.

21:07.000 --> 21:11.000
Okay, so this is transient simulation versus time.

21:11.000 --> 21:14.000
We could have another simulation.

21:14.000 --> 21:17.000
To be honest, I have prepared this.

21:17.000 --> 21:20.000
Four, this is so-called AC simulation,

21:20.000 --> 21:23.000
small signal simulation versus frequency.

21:23.000 --> 21:27.000
So you see the frequency behavior of this kind of circuit.

21:27.000 --> 21:30.000
Yeah, we again run the analysis,

21:30.000 --> 21:38.000
and you see that the amplification is 20 dB,

21:38.000 --> 21:42.000
so it's 10, is constant,

21:42.000 --> 21:47.000
but the operational amplifier has one single internal pole,

21:47.000 --> 21:51.000
and so it goes down.

21:51.000 --> 21:54.000
Okay, so this is very quickly,

21:54.000 --> 21:56.000
you just see what's going on.

21:56.000 --> 22:02.000
I think I have time to make some additional change.

22:02.000 --> 22:05.000
I put an additional capacitor in here.

22:05.000 --> 22:07.000
I collect my capacitor,

22:07.000 --> 22:10.000
I transform it because I have to rotate it.

22:10.000 --> 22:12.000
I put it just in here.

22:12.000 --> 22:14.000
Let's do it in here.

22:14.000 --> 22:19.000
And I have to give it a value.

22:19.000 --> 22:23.000
I guess I take one mic one.

22:23.000 --> 22:27.000
Yeah, and then we go back,

22:27.000 --> 22:30.000
and do the AC simulation again.

22:30.000 --> 22:32.000
Oops, there's something changed.

22:32.000 --> 22:36.000
We have this, this is sort of low pass behavior.

22:36.000 --> 22:39.000
It stayed, and now we have some high pass behavior

22:39.000 --> 22:43.000
for the low frequencies due to this input capacitor.

22:43.000 --> 22:46.000
Yeah, so very quickly you do a small change,

22:46.000 --> 22:50.000
and with a simple click, we are there.

22:50.000 --> 22:54.000
Okay, so this is what I wanted to show live.

22:54.000 --> 22:56.000
Let's go back to the slides,

22:56.000 --> 23:02.000
and I give some more examples.

23:02.000 --> 23:07.000
Yeah, the first example, this is, again,

23:07.000 --> 23:09.000
why do you want to simulate?

23:09.000 --> 23:15.000
This is a 2.5 kilowatt class D audio amplifier.

23:15.000 --> 23:17.000
And you would say, this is strange.

23:17.000 --> 23:22.000
No, you go to some Amazon and click in

23:22.000 --> 23:26.000
looking for these kind of amplifiers and 300 bucks.

23:26.000 --> 23:30.000
You can get a kilowatt amplifier today,

23:30.000 --> 23:33.000
because it's a digital amplifier.

23:33.000 --> 23:37.000
And, okay, so what did I do to get this simulation?

23:37.000 --> 23:41.000
Okay, I made a symbol myself of this audio driver circuit,

23:41.000 --> 23:43.000
just drawing the symbol.

23:43.000 --> 23:45.000
And this audio driver circuit is also something

23:45.000 --> 23:49.000
I created myself, because it has the analog input.

23:49.000 --> 23:53.000
It has a path width modulator.

23:53.000 --> 23:56.000
This is a translation from the analog signal

23:56.000 --> 23:59.000
to a pulse width digital signal.

23:59.000 --> 24:00.000
It needs something more.

24:00.000 --> 24:03.000
It needs a complementary pull output,

24:03.000 --> 24:07.000
because we have two transistors here.

24:07.000 --> 24:11.000
And it has a dead time generator to avoid shoot through,

24:11.000 --> 24:13.000
because what will happen?

24:13.000 --> 24:17.000
You have minus 100 volts here, plus 100 volts here.

24:17.000 --> 24:19.000
And if you manage to open both of these transistors

24:19.000 --> 24:24.000
at the same time, you will see the result in form of smoke.

24:24.000 --> 24:28.000
And so you have to avoid this.

24:28.000 --> 24:33.000
And, okay, and some simulation commands in here.

24:33.000 --> 24:37.000
The input is 2 volts, again, 1 kilohertz.

24:37.000 --> 24:40.000
You see the power supply.

24:40.000 --> 24:44.000
The output load is a 2 ohm resistor.

24:44.000 --> 24:48.000
Well, and this is the output.

24:48.000 --> 24:56.000
This is the input signal, and this one is the output signal.

24:56.000 --> 24:59.000
Okay, and with the double frequency,

24:59.000 --> 25:02.000
you have the power signal, the blue one here.

25:02.000 --> 25:09.000
And if you do an RMS over this output power signal,

25:09.000 --> 25:13.000
you see here it's kilowatt up to 4.3, for example,

25:13.000 --> 25:17.000
you will get an output power of 2.6 kilowatt.

25:17.000 --> 25:20.000
The simulation has a great advantage.

25:20.000 --> 25:21.000
Nothing explodes.

25:21.000 --> 25:24.000
You can just do it, and if you do,

25:24.000 --> 25:26.000
you can investigate the output filters

25:26.000 --> 25:32.000
and can check loudspeaker models and everything just by simulation.

25:32.000 --> 25:38.000
Of course, you can also do real-time real amplifiers.

25:38.000 --> 25:44.000
This is Tiberio Vecol has made this Q17 amplifier

25:44.000 --> 25:49.000
derived from the famous quad 405 audio field amplifier.

25:49.000 --> 25:52.000
You see lots of transistors in this thing.

25:52.000 --> 25:57.000
The output stage, the input is an operational amplifier.

25:57.000 --> 26:00.000
This is the modern contribution of the whole thing

26:00.000 --> 26:03.000
and some voltage generators here.

26:03.000 --> 26:07.000
Well, yeah, and you can, of course, simulate this

26:07.000 --> 26:12.000
and look similar to our 2.6 kilowatt, it's 100 watt,

26:12.000 --> 26:15.000
and what you see here is just at 300 milliseconds,

26:15.000 --> 26:18.000
we switch the output load from 8 to 7 ohms automatically

26:18.000 --> 26:22.000
to check what the output load would mean,

26:22.000 --> 26:30.000
and you see a little bit increase in output power.

26:31.000 --> 26:37.000
So you can model all these things and model the influences and so on and so on.

26:37.000 --> 26:41.000
OK, NG-SPICE allows to do mixed signal simulation.

26:41.000 --> 26:44.000
Mixed signal simulation means you have analog and digital circuits

26:44.000 --> 26:51.000
in the same simulator, and you could also simulate the digital part

26:51.000 --> 26:54.000
like the analog part, but this takes a lot of time,

26:54.000 --> 26:58.000
and if you have more than a few gates, it would be much too slow.

26:58.000 --> 27:04.000
So NG-SPICE includes an event-based simulation, which is very fast,

27:04.000 --> 27:06.000
and this is a mixture.

27:06.000 --> 27:14.000
Well, this is the veneral 7400 series of devices.

27:14.000 --> 27:18.000
You have flip-flops here, you have some output decoders

27:18.000 --> 27:24.000
and some NAND gates, and you have some XOR, or NAND, this is NOR gates.

27:25.000 --> 27:30.000
Yeah, and you can simulate this whole thing together,

27:30.000 --> 27:34.000
and you see that this is mixed signal means

27:34.000 --> 27:38.000
because we're using the digital output here for a delay line.

27:38.000 --> 27:42.000
So we have an RC delay and another RC delay,

27:42.000 --> 27:44.000
and we have the original signal,

27:44.000 --> 27:48.000
and so this gives an output pulse of a specific width.

27:48.000 --> 27:51.000
This is the clock signal generated in this circuit,

27:51.000 --> 27:56.000
and this circuit here, which is shown, is a rotary encoder,

27:56.000 --> 28:03.000
so encoder which does give optical signals when it's turned around one or the other way,

28:03.000 --> 28:08.000
and this is the digital output, again plotted with GTK wave,

28:08.000 --> 28:14.000
and you see this here, the Q1 signal is coming before Q2 signal,

28:14.000 --> 28:20.000
and because in the rotary decoder these two decoders are shifted a little bit,

28:20.000 --> 28:23.000
so you know that this is turning left, for example,

28:23.000 --> 28:31.000
and here the turning is changed to the other direction,

28:31.000 --> 28:35.000
and you see the Q1 is coming later than Q2,

28:35.000 --> 28:39.000
and this is detected by this circuit.

28:39.000 --> 28:43.000
You have here the pulses, let's say for turning left,

28:43.000 --> 28:46.000
and then left turning, switched right turning,

28:46.000 --> 28:51.000
and you see the output pulses here for the turning right.

28:51.000 --> 28:57.000
So mixed signal simulation is, and this is effective,

28:57.000 --> 29:02.000
because the whole simulation thing is 25 milliseconds,

29:02.000 --> 29:07.000
so it's ultra-fast, it's click, and it's there.

29:07.000 --> 29:09.000
You can even run this on this computer here,

29:09.000 --> 29:13.000
which is not the fastest machine.

29:13.000 --> 29:16.000
And we can have pure digital.

29:16.000 --> 29:19.000
I made a symbol for this up and down counter.

29:19.000 --> 29:23.000
You have the input clock, you have the input up and down signal,

29:23.000 --> 29:30.000
and here it's a 3-bit, 8-state counter,

29:30.000 --> 29:33.000
and inside of this is a state machine,

29:33.000 --> 29:35.000
and it's a very, very simple state machine.

29:35.000 --> 29:39.000
You have here the states from 0 to 7, so the 8 states.

29:39.000 --> 29:45.000
Here are the signals you see from 0, 0, 0 up to 1, 1, 1,

29:45.000 --> 29:48.000
and here is what the states are switching.

29:48.000 --> 29:55.000
The input is at 0 state, and the input is 0,

29:55.000 --> 29:58.000
input means backward counting,

29:58.000 --> 30:01.000
then the next state is this one here.

30:01.000 --> 30:05.000
Or if the input is 1 and we are at state 0,

30:05.000 --> 30:07.000
then we go to state 1.

30:07.000 --> 30:12.000
If we are at state 1 and we count down,

30:12.000 --> 30:14.000
we go back to state 0.

30:14.000 --> 30:17.000
If we are at state 1 and we count forward, we go to state 2.

30:17.000 --> 30:23.000
So you can do very simple programming inside one of these code models

30:23.000 --> 30:27.000
used by the digital event simulator of NG-SPICE.

30:27.000 --> 30:31.000
Well, and here's just the signal, the clock signal.

30:31.000 --> 30:35.000
This is the up and down, the up and down signal,

30:35.000 --> 30:39.000
and we count up and count up, and then we switch to down

30:39.000 --> 30:43.000
and then we count down and we switch up again.

30:43.000 --> 30:47.000
So very simple simulation, and the simulation time

30:47.000 --> 30:51.000
of this whole thing is mere 37 milliseconds,

30:51.000 --> 30:54.000
so it's very fast.

30:54.000 --> 30:58.000
Okay, so much about the examples we have.

30:58.000 --> 31:00.000
What's next in NG-SPICE?

31:00.000 --> 31:04.000
Here are listed some ideas, some more or less fixed plans,

31:04.000 --> 31:08.000
and some actual activities.

31:08.000 --> 31:11.000
We will do more tests with the open source PDKs,

31:11.000 --> 31:14.000
supporting the sky-water PDK,

31:14.000 --> 31:20.000
and especially the upcoming IHP PDK

31:20.000 --> 31:29.000
to support analog mix signal and RF simulation

31:29.000 --> 31:32.000
to support these kind of designs.

31:32.000 --> 31:36.000
We will improve the RF capability by adding harmonic balance

31:36.000 --> 31:41.000
with a special effective method,

31:41.000 --> 31:48.000
for example, to simulate intermodulation of signals and so on.

31:48.000 --> 31:54.000
We will support reliability and degradation simulation.

31:54.000 --> 31:58.000
Well, nothing lasts forever, chips don't last forever,

31:58.000 --> 32:03.000
and people sometimes want to know how long they will live,

32:03.000 --> 32:07.000
and so you can try to model that, and this will be done here.

32:07.000 --> 32:12.000
And hopefully with a funded project, this is very interesting.

32:12.000 --> 32:16.000
There has been the request for transient noise simulation.

32:16.000 --> 32:19.000
This is a difficult task,

32:19.000 --> 32:23.000
because we don't want to rewite the complete simulator,

32:23.000 --> 32:27.000
we have to figure out ways, and again here it would be

32:27.000 --> 32:30.000
very difficult to do that.

32:30.000 --> 32:33.000
If somebody is interested in integrating this into NG Spice,

32:33.000 --> 32:35.000
please let me know.

32:35.000 --> 32:39.000
We will improve the usability of key-cut NG Spice graphics interface.

32:39.000 --> 32:43.000
Continuously, people are requesting things,

32:43.000 --> 32:45.000
and we are detecting things,

32:45.000 --> 32:48.000
and we can try to simplify things,

32:48.000 --> 32:56.000
we can try to support more of what NG Spice is offering internally right now.

32:56.000 --> 33:00.000
For example, the digital simulation is,

33:00.000 --> 33:10.000
should be supported by having digital basic blocks as input,

33:10.000 --> 33:14.000
and digital plotting, for example, as output.

33:14.000 --> 33:17.000
And we have to enhance compatibility,

33:17.000 --> 33:24.000
because the world is, somehow we are competing against commercial simulators

33:24.000 --> 33:30.000
like LT Spice or Q Spice, or P Spice, or H Spice, and what other...

33:30.000 --> 33:33.000
We cannot do this in full,

33:33.000 --> 33:36.000
but the basic things should be compatible.

33:36.000 --> 33:39.000
But all these four I have mentioned have different,

33:39.000 --> 33:42.000
slightly different input languages,

33:42.000 --> 33:44.000
slightly different models,

33:44.000 --> 33:48.000
and so you have to take care of this somehow.

33:48.000 --> 33:50.000
Yeah, that's it.

33:50.000 --> 33:56.000
What I wanted to provide you with information,

33:56.000 --> 33:58.000
here is some support,

33:58.000 --> 34:03.000
websites, if you need more details,

34:03.000 --> 34:05.000
here they are.

34:05.000 --> 34:06.000
Thank you.

34:06.000 --> 34:11.000
APPLAUSE

34:11.000 --> 34:16.000
So, while we are taking questions,

34:16.000 --> 34:19.000
the video team is going to try to repair the video locally,

34:19.000 --> 34:25.000
so your questions will not be able to refer to the slide.

34:25.000 --> 34:31.000
Hi Holger, you said something about the creation of semiconductor devices.

34:31.000 --> 34:37.000
Would it be possible to simulate the creation based on radioactivity?

34:37.000 --> 34:45.000
Yes, this is included in this development plans.

34:45.000 --> 34:50.000
Thank you for the presentation.

34:50.000 --> 34:56.000
A quick question is how do we input the state machine in the component?

34:56.000 --> 35:00.000
Is there a special window where we come and we type it,

35:00.000 --> 35:04.000
or the state machine must be written in a dot c or dot something

35:04.000 --> 35:06.000
and we give it to the component?

35:06.000 --> 35:09.000
Yeah, the simple state machine,

35:09.000 --> 35:16.000
the question is how can we code the state machine into ng-spice?

35:16.000 --> 35:21.000
The simple state machine I have shown is just a text file.

35:21.000 --> 35:27.000
This text file is loaded, you put into your spice netlist

35:27.000 --> 35:35.000
a single line with a specific model and this model loads the state machine.

35:35.000 --> 35:37.000
That's it for the simple things.

35:37.000 --> 35:43.000
The complex, you could of course write state machines and c-codes if you want to.

35:43.000 --> 35:59.000
Then you have to do this translation.

35:59.000 --> 36:04.000
My question is maybe a bit naive, but would it be at some point feasible

36:04.000 --> 36:11.000
to include the tracks or geometry inputs from KCAD

36:11.000 --> 36:17.000
in order to mimic the links that you place between your spice components?

36:17.000 --> 36:26.000
Please, it's a little bit...

36:26.000 --> 36:30.000
Track width and we also have the PCB stack up.

36:30.000 --> 36:35.000
Would it be somewhat feasible to from this geometry inputs

36:35.000 --> 36:42.000
associate a kind of approximation of the S-parameters of each lines between the components?

36:42.000 --> 36:48.000
Yes, there is some work ongoing.

36:48.000 --> 36:56.000
It's not that intensive to use an EM-sover, it's called Sparse Lizards,

36:56.000 --> 37:04.000
to extract these data from your lines in KCAD.

37:04.000 --> 37:09.000
I think it's a lack of manpower to make this a real tool.

37:09.000 --> 37:18.000
KCAD has added IBIS simulation, so you have IC output and IC input,

37:18.000 --> 37:24.000
only the output and input signals and many semiconductor vendors offer these models.

37:24.000 --> 37:31.000
Then you could basically have a transmission line or an RC line in between

37:31.000 --> 37:34.000
to simulate the signal integrity.

37:34.000 --> 37:40.000
The problem is, as you said, to get these data from your PCB.

37:40.000 --> 37:44.000
Slowly, slowly moving on.

37:44.000 --> 37:50.000
Basically, yes, but this is a key-cut or ischima, it's a key-cut work,

37:50.000 --> 37:55.000
it's not the NG-spice. The NG-spice takes the transmission line parameters

37:55.000 --> 38:01.000
or takes the parasitic capacitance resistances and then does the simulation.

38:01.000 --> 38:05.000
So the EM would have to be data from the key-cut?

38:05.000 --> 38:11.000
Yes, exactly. The EM has to come from the key-cut.

38:11.000 --> 38:18.000
I wanted to ask if anybody has used the C interface to, for example,

38:18.000 --> 38:22.000
make simulations of existing microcontrollers or things like that

38:22.000 --> 38:25.000
that you could have in your design.

38:25.000 --> 38:30.000
There has been some activity on this, very scarce.

38:30.000 --> 38:35.000
I think it's two. It's yours, Platysy, from Iso-Tel.

38:35.000 --> 38:40.000
Just look up his website, Iso-Tel, and you could find some information on that.

38:40.000 --> 38:47.000
There has been another guy, I think he has used Arduino interfacing to NG-spice,

38:47.000 --> 38:51.000
but I don't know much about this work.

38:51.000 --> 38:59.000
Are there any dynamic languages that are possible to be used as a model,

38:59.000 --> 39:07.000
or is it just compiled languages that have to be loaded?

39:07.000 --> 39:10.000
If you don't care about simulation time, for example,

39:10.000 --> 39:13.000
would it be possible to use any scripting language to...

39:13.000 --> 39:17.000
Yes, there are various kinds of making models.

39:17.000 --> 39:22.000
You have the very old A-road, but this is compiled and static.

39:22.000 --> 39:25.000
And it's compiled, it's there.

39:25.000 --> 39:33.000
You can do models with NG-spice internal nonlinear voltage sources, for example.

39:33.000 --> 39:36.000
And these are very dynamic.

39:36.000 --> 39:40.000
And many power semiconductor device makers,

39:40.000 --> 39:46.000
they make so-called sub-circuit models, which are comprised of spice commands.

39:46.000 --> 39:52.000
These can be very complex, difficult to debug,

39:52.000 --> 39:58.000
but then you can do whatever you could imagine.

39:58.000 --> 40:05.000
Is it possible to perform simulations over PVT, so over process variants and voltage variants?

40:05.000 --> 40:06.000
Yes.

40:06.000 --> 40:12.000
And would it be possible to do this without changing any of the models itself?

40:12.000 --> 40:15.000
Yes, this is the typical content of the model.

40:15.000 --> 40:22.000
Content of modern semiconductor PDKs when you think about IC simulation.

40:22.000 --> 40:27.000
The worst case simulation or corner simulation is typically integrated.

40:27.000 --> 40:29.000
It's different model parameters.

40:29.000 --> 40:37.000
The model stays the same, but certain parameters are changed.

40:37.000 --> 40:40.000
So we have a question from online.

40:40.000 --> 40:44.000
Just heads up, we're still working on the video, so lucky for us.

40:44.000 --> 40:50.000
Holger is able to continue answering questions for the foreseeable future.

40:50.000 --> 41:00.000
Online they are asking, is there any post-processing of waveforms such as THD, FFT, etc. possible?

41:00.000 --> 41:04.000
FFT is standard.

41:04.000 --> 41:11.000
FFT is standard in NG-spice and is standard in the Kikat-NG-spice interface right now.

41:11.000 --> 41:18.000
It's more or less two clicks and then you have it.

41:18.000 --> 41:25.000
You can set up, NG-spice has a very powerful scripting language, well another language.

41:25.000 --> 41:31.000
It's not Python, it's another language which originated in 1990.

41:31.000 --> 41:38.000
So we keep it up and have more than 100 commands available.

41:39.000 --> 41:44.000
And you can do a lot of data processing with this scripting.

41:44.000 --> 41:51.000
So for example, classification into bins, or if you do Monte Carlo simulation, you can run Monte Carlo simulation.

41:51.000 --> 41:53.000
You can classify these data into bins.

41:53.000 --> 42:00.000
You can do a lot of post-processing internally in NG-spice.

42:00.000 --> 42:04.000
Well, of course, if this is not enough or you want to use standard interfaces,

42:04.000 --> 42:08.000
there are Python-NG-spice interfaces available.

42:08.000 --> 42:14.000
So you can use all these Python libraries which are there for data processing.

42:14.000 --> 42:21.000
So it's a lot of action, but the action has to be done by you.

42:21.000 --> 42:25.000
Okay, we have time for one more question.

42:25.000 --> 42:28.000
You do not actually work time.

42:28.000 --> 42:33.000
Okay, so let's give Holger a round of applause.

42:33.000 --> 42:35.000
Thank you very much.

42:39.000 --> 42:41.000
Okay, so we're going to check.

