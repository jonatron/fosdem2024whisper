WEBVTT

00:00.000 --> 00:10.520
Hello, my name is Christopher Allen. I have the great privilege of being one of the approximately

00:10.520 --> 00:17.400
five engineers who work on Blockly at Google. We are part of engineering education and in

00:17.400 --> 00:23.200
particularly we're the kids coding team. I'm based in London. I have colleagues primarily

00:23.200 --> 00:33.640
in the US but also one in Zurich. So this talk I'm going to be talking a little bit

00:33.640 --> 00:39.440
about what Blockly is and what it's used for. I'm guessing a number of you are probably

00:39.440 --> 00:46.160
familiar with Blockly. Who has heard of Blockly before? Who has played with something containing

00:46.160 --> 00:53.440
Blockly before? Anybody written something using Blockly as a component of the thing? Okay, yeah,

00:53.440 --> 00:57.880
good mix of those. Great. So there will be a little introduction for the people who don't know

00:57.880 --> 01:03.680
what Blockly is. We're also going to talk about how to put Blockly into your app. So I shall do a

01:03.680 --> 01:09.800
little demonstration of what it looks like to build an app using Blockly. I'm going to talk a

01:09.800 --> 01:14.480
little bit about the architecture and internals of Blockly. Just a very high level overview but

01:14.800 --> 01:19.720
some of the structure of the code and some of the major pieces of how it works under the covers.

01:19.720 --> 01:24.440
I'm going to be talking a little bit about some of the things we have learned in the last,

01:24.440 --> 01:29.280
well actually now more than a decade, I think nearly 13 or 14 years that the team has been

01:29.280 --> 01:33.080
working on Blockly. I have fortunately had the great privilege of learning most of it second

01:33.080 --> 01:37.320
hand as I've only been on the team for about two and a half years. It's much better to learn

01:37.320 --> 01:41.960
for other people's mistakes. And finally hopefully we'll have some time for Q&A at the end.

01:42.960 --> 01:50.280
So what is Blockly? Blockly is an open source client side library for creating block based

01:50.280 --> 01:55.480
visual programming languages. That's a lot of words. So first of all I assume if you're here

01:55.480 --> 02:00.360
at Fosdame that you probably know what open source is. By client side what we mean is

02:00.360 --> 02:06.760
JavaScript. In fact in these days the actual code base is written in TypeScript but it compiles

02:06.840 --> 02:12.320
to JavaScript, it runs in the web browser. And block based visual programming languages just

02:12.320 --> 02:16.000
mean we're going to write software but our source code is going to look like a bunch of puzzle

02:16.000 --> 02:24.120
pieces connected together. So here is a picture of a Blockly workspace with a little program that

02:24.120 --> 02:29.720
consists of a function that computes Fibonacci numbers on the right and a piece of code on the

02:29.720 --> 02:35.760
left which we'll call that to compute the first five Fibonacci numbers and print them out neatly

02:35.800 --> 02:45.600
formatted. Now let's have a look at that in action. We can have a look at this very program here. You

02:45.600 --> 02:50.200
can see with Blockly that we obviously have these various blocks and I can pick them up and move

02:50.200 --> 03:03.000
them around. I can edit the text if I want to change. And then over here we can compile this code

03:03.240 --> 03:12.280
to any of five different programming languages. We support JavaScript, Python, PHP, Lua and Dart.

03:12.280 --> 03:19.960
Now this is a little playground for Blockly. You'll note that one of the things that it does not do

03:19.960 --> 03:26.800
is run the code. Blockly is the editor and I guess you could say the compiler but it is not the

03:26.800 --> 03:31.040
runtime, it is not the app that uses Blockly. So let's have a look at an app that uses Blockly.

03:32.000 --> 03:40.000
This is Blockly Games. The website is Blockly.games and it consists of a series of puzzles. This is a maze.

03:40.000 --> 03:48.880
The first level of maze is very easy. I just need to move forward twice. And I have succeeded in

03:48.880 --> 03:54.560
solving the maze. It shows me the JavaScript code that was generated. If we skip ahead to a slightly

03:54.600 --> 04:05.360
more interesting level, here I can create a loop and I'm going to add a conditional and I'm going to

04:05.360 --> 04:12.840
check to see if there is a path to the left and if it is I will turn left and if not I will move

04:12.840 --> 04:19.080
forward. And now when I run the program hopefully Pegman will make it all the way around the maze

04:19.960 --> 04:27.560
to the end. And so here Blockly is being used to display and edit the programs and then the game

04:27.560 --> 04:33.480
itself displays the maze and the various controls and it calls back into Blockly to highlight the

04:33.480 --> 04:46.920
blocks as the program runs. Great. All right. So a little bit of history. Blockly originated

04:47.880 --> 04:55.320
with a project called App Inventor. Now my slide says that it started in 2010 but I saw a presentation

04:55.320 --> 04:59.840
earlier this morning from the App Inventor team and I think they said it started in 2008 and I

04:59.840 --> 05:07.040
suspect they are probably right about that. It was a web app to create Android mobile phone apps.

05:07.040 --> 05:12.800
It still is in fact. It was originally sort of started by Hal Abelson and Mark Friedman. Hal

05:12.840 --> 05:16.640
Abelson some of you will probably know as one of the co-authors of the structure and

05:16.640 --> 05:21.280
interpretation of computer programs. A very well known computer science textbook from MIT.

05:21.280 --> 05:30.280
It was a web app and in its earliest version the front end the block editor was written in Java

05:30.280 --> 05:36.200
which was an interesting choice at the time because Java was kind of already on the way out.

05:36.200 --> 05:42.160
A hot Java browser with built-in JavaScript was very much a thing of the 90s and by 2010 if you

05:42.200 --> 05:46.240
wanted to run Java in your browser you had to install a bunch of plugins and fiddle around and

05:46.240 --> 05:52.600
it was not that easy to do. But you know it worked. Here you can see a screenshot from some very

05:52.600 --> 05:57.000
early version of App Inventor. It looks a lot less pretty than the current version does if you were

05:57.000 --> 06:04.480
here for the talk this morning. There were some issues with the Java editor. This was the kind

06:04.480 --> 06:09.880
of rendering bug that would be encountered and getting things to work well. Other than you know

06:09.920 --> 06:18.760
once you got the Java applet running was quite challenging. So kind of recognizing that the

06:18.760 --> 06:25.800
writing was on the wall for Java in the browser and that JavaScript was the way forward. My

06:25.800 --> 06:30.960
colleague Neil Fraser joined the team with and was assigned the task of rewriting the front end

06:30.960 --> 06:36.840
in JavaScript. He tried a bunch of different technologies to do the actual rendering. He used

06:37.200 --> 06:42.000
Canvas and SVG, wrote initial prototypes in both of those, decided that SVG was the way to go.

06:42.000 --> 06:48.840
So ever since Blockly has been an app written in JavaScript that produces SVG to display the

06:48.840 --> 06:54.520
blocks in the browser and on the right you can see a screenshot of a very early version of Blockly.

06:54.520 --> 07:01.160
The amusing thing about this is nobody knows where the trash can icon came from. So we were obliged

07:01.320 --> 07:07.960
to replace it with one that we knew what the copyright status was. Yeah, things happen. Of

07:07.960 --> 07:15.080
course all of you know the ghoul is infamous for cancelling projects and App Inventor was definitely

07:15.080 --> 07:20.760
one of those. It was cancelled but luckily it was open sourced and it was adopted by MIT and they

07:20.760 --> 07:27.840
have continued to develop it. Neil continued to work on the JavaScript block editor. It had not

07:27.960 --> 07:33.160
actually made it into App Inventor by this point and they had taken the Java front end and thrown

07:33.160 --> 07:38.280
it away and I think initially did their own thing completely. But Neil plowed on because he could

07:38.280 --> 07:43.680
see that this was going to be a useful piece of technology. Unfortunately even at Google you

07:43.680 --> 07:48.480
can only work on a cancelled project for so long before somebody tells you you should be doing

07:48.480 --> 07:55.600
something more useful with your time. But my friend Neil, he's a stubborn man and he decided he

07:55.640 --> 08:02.560
would go on vacation. But his vacations don't look like that. They tend to look more like this. The

08:02.560 --> 08:06.040
great thing about coming into the office when you're on vacation is nobody can tell you that

08:06.040 --> 08:11.560
you're not supposed to be working on the cancelled project. And after some weeks of vacation he had

08:11.560 --> 08:18.600
quite a lot of leaves stored up. He did a demo of the first version of the JavaScript block editor.

08:18.600 --> 08:24.880
The project was uncanceled. He got his vacation refunded. His boss told him he should take a

08:24.880 --> 08:32.880
real vacation this time and he was assigned to work on the project full time. The next year

08:32.880 --> 08:39.960
2012 Blockly was officially released. It got this name. Some of you may know that Google Docs

08:39.960 --> 08:46.440
started off originally as something known as rightly and Google has had any number of similarly

08:46.440 --> 08:52.880
named projects inside and Blockly made it out with that name because of that. It debuted at the

08:52.880 --> 08:58.080
Bay Area Maker Faire and I don't know if any of you have been to Maker Faire. I had the chance to go

08:58.080 --> 09:04.760
in 2018 and there was an entire hall full of educational things that people had made and I

09:04.760 --> 09:09.080
was completely boggled at the number of them that had some kind of block based programming

09:09.080 --> 09:13.880
language as an interface. It was quite fun to go around with Neil and guess which ones were

09:13.880 --> 09:19.960
actually Blockly and which ones only looked like Blockly and not even he could always guess which

09:20.000 --> 09:30.960
was which. Blockly has been, because it wasn't specifically made for App Inventor, it was made as

09:30.960 --> 09:36.280
a general purpose library. It was quickly adopted by lots and lots of other groups. So 2014 we had

09:36.280 --> 09:43.440
Code.org releasing a version of Flappy Bird where you write your own Flappy Bird game with blocks.

09:44.440 --> 09:51.840
In 2014 President Obama with the first US president to code using Blockly, you can see his first

09:51.840 --> 10:03.920
program was simple and the interesting bit of the story is our partnership with Scratch. So I'm sure

10:03.920 --> 10:10.360
most of you have heard of Scratch or seen Scratch. Version 1.0 of Scratch was as I understand a PC

10:10.480 --> 10:18.400
app, probably for Windows, I'm not certain about that. In 2013 they released the first web version

10:18.400 --> 10:25.000
using Flash. It had taken them several years from when they made the decision to use Flash. Flash

10:25.000 --> 10:29.960
was like the obvious technology for doing this kind of interactive thing in the browser. By the time

10:29.960 --> 10:37.440
they had the first version ready and released it, Flash was very much on its way out. So they began

10:37.520 --> 10:45.120
thinking about what they would do and Neil and some other folks at Google who were involved with

10:45.120 --> 10:50.760
Blockly also started thinking about what to do and it seems that both Neil and some of the product

10:50.760 --> 10:55.720
people at Google reached out to the Scratch team independently and had conversations,

10:55.720 --> 11:03.360
engineer to engineer and planners to planners and everybody came to the conclusion that using

11:03.440 --> 11:08.720
Blockly as the next version of Scratch might be a good idea. This required a lot of work on

11:08.720 --> 11:15.240
Blockly's part to support the Scratch UI and on Scratch's part to redesign their app around

11:15.240 --> 11:23.000
Blockly. But finally in 2018, it was announced in 2016, in 2018 it came out in data test and in 2019

11:23.000 --> 11:29.320
Scratch 3.0 was released and it has been Blockly under the covers since then and that is certainly

11:29.600 --> 11:36.600
in terms of usage as far as I know our biggest partner. We do however have lots and lots of other

11:36.600 --> 11:44.320
partners including several people in this room including all of these companies and many,

11:44.320 --> 11:54.160
many more and I guess we also have people using Blockly who have no access to computers. This

11:54.240 --> 12:00.080
photo was taken at a school in Malaysia, no computers but they were using cutouts, laminated

12:00.080 --> 12:06.400
cutouts of Blockly blocks to teach their kids to program or at least to be able to do thinking

12:06.400 --> 12:14.960
about computational thinking and algorithms and so on. So I think the question might be to put

12:14.960 --> 12:21.480
to you guys what are you guys building with Blockly? If you have built something with Blockly,

12:21.800 --> 12:27.320
I would love to stand up and just give us maybe a one sentence description of what you have made.

12:27.320 --> 12:39.400
So I'm one of the maintainers of the open app home automation system where we're writing rules and

12:39.400 --> 12:46.040
some of these rules are usually done in Python or JavaScript or we're using Blockly to actually make

12:46.120 --> 12:51.240
the learning curve much easier so even kids can create their rules, their home automation rules

12:51.240 --> 12:56.440
with a Blockly. So we're using the standard blocks and I implement like 100 more blocks

12:56.440 --> 13:13.760
that make our home automation very easy. Nice. I'm adding support for Go, the Go language to Blockly,

13:14.160 --> 13:21.520
especially for TinyGo so we can compile it to microcontroller. Oh, okay, that's cool.

13:23.520 --> 13:32.240
Thank you. A block-based editor to write automations using Google Home. So Google recently released

13:32.240 --> 13:39.120
the Google Home scripting language so it abstracts over that, gives you a set of blocks to work with

13:39.680 --> 13:44.960
so conditionals and actions that you can run and yet block-based editor for that. Yeah, cool.

13:47.120 --> 13:54.640
Oh, and yeah, two more. Apologies to those of you on the livestream who can't see. I'm actually

13:54.640 --> 14:00.640
building an XML editor with Blockly so in this case we are actually going in the other way around

14:00.640 --> 14:06.160
where we generate blocks out of the XML so you can actually just load an XML file and it's going

14:06.240 --> 14:10.560
to become blocks and then somebody that doesn't know XML is not technical can actually

14:10.560 --> 14:22.080
work with that XML file and modify it. That's cool. Yeah, thanks.

14:27.520 --> 14:33.040
We're a boot camp. We teach full stack HTML, CSS JavaScript. After we teach HTML and CSS,

14:33.040 --> 14:38.720
we use Blockly to have people make event handlers and that kind of thing. It generates JavaScript

14:38.720 --> 14:43.360
and so they can make their pages interactive before they have to learn syntax. Then they can

14:43.360 --> 14:47.280
look at the exported JavaScript and learn how it works and what it's doing. Nice.

14:51.040 --> 14:55.600
I use Blockly within Node-RED so within Node-RED you write a function node in JavaScript when

14:55.600 --> 15:00.480
you run out. No, I want to use Blockly so I'm heavily involved with the person who's written

15:00.480 --> 15:04.400
the Blockly interface inside of Node-RED. Excellent. That's my house.

15:07.760 --> 15:13.520
So yes, this is lovely but I think this gives such a great picture of the variety of different

15:13.520 --> 15:22.960
things that people use Blockly for from clearly educational focus things to utility scripting

15:22.960 --> 15:27.760
languages for other applications and sort of more businessy applications. I think that's great.

15:28.640 --> 15:33.440
All right. How to use Blockly. Those of you who already built something with Blockly, this will

15:33.440 --> 15:38.560
be old hat to you but for those of you who have never seen an app built with Blockly,

15:39.280 --> 15:45.200
I am going to show you very quickly how one might go about doing that. First of all, just a little

15:45.200 --> 15:50.320
bit of terminology so you can see here this, the big rectangle with all the stuff in it is what we

15:50.320 --> 15:55.680
call the workspace and on the left of the workspace you can see the toolbox which consists of a set

15:55.680 --> 16:01.440
of categories, logic, loops, math and so on and then a fly out that contains the blocks that users

16:01.440 --> 16:06.560
can drag onto the workspace. On the right you can see a bunch of blocks and on the far right you

16:06.560 --> 16:12.160
can see some zoom controls, a trash can, of course there are scroll bars, a grid, you can see a tool

16:12.160 --> 16:23.920
tip, just the usual sorts of things. All right, we'll see how this goes. So, oh yes, I was practicing

16:23.920 --> 16:36.080
earlier. So, on our developer site there's a page called Get Blockly which gives a number of ways

16:36.080 --> 16:41.840
of obtaining it. We publish Blockly as an NPM package and we also publish a variety of little

16:41.840 --> 16:47.600
utility packages for it, one of which includes a script that will create an app for you and so

16:47.600 --> 16:53.600
rather than making you sit as I take half an hour to type out a bunch of HTML and CSS and

16:53.600 --> 17:07.440
JavaScript we will just start with the little sample app. So, we'll take a moment to install some

17:07.440 --> 17:23.040
packages. It'll end up creating a directory structure for us that contains a main HTML file,

17:23.040 --> 17:35.120
a main JavaScript file, some other files on the side and it also creates a webpack configuration

17:35.760 --> 17:42.800
so that we can do an NPM start. This will fire up webpack, it will build the application,

17:42.800 --> 17:47.040
start a local server and open it in the web browser.

17:52.480 --> 18:01.360
So, here is our sample app. I'm just going to show you how it works. So, again we have our kind of

18:01.360 --> 18:07.760
categories here. I'm going to take a repeat block. I'm going to have it repeatedly put some text

18:08.400 --> 18:15.760
on the screen and you can see over here the JavaScript that is generated by the blocks

18:15.760 --> 18:23.440
appears here and underneath you can see the output of executing that code. We can change the color of

18:23.440 --> 18:33.920
the text and the contents of the text. It's very straightforward. Let's have a look at the files

18:33.920 --> 18:43.520
that it's created. I will try to make sure that these windows are big enough that you can all see

18:43.520 --> 18:52.320
if I can remember the right key combination. Yeah, here we go. Great. So, everything interesting

18:52.320 --> 19:07.440
is in the source directory. The app has a very simple HTML file, which basically just contains

19:07.440 --> 19:13.840
a few divs, one for the whole page, one for the output pane at the bottom left, one for the

19:13.840 --> 19:19.520
generated code at the top left and then the main blockly div which ends up being on the right.

19:20.160 --> 19:24.080
There is some CSS that puts all these things in the right place. This is a point where I have to

19:24.080 --> 19:28.480
admit I am not actually a front-end engineer despite working on a front-end library. So,

19:28.480 --> 19:32.320
I'm not going to try and explain how that works. I'm sure many of you here know far better than I

19:32.320 --> 19:39.200
do. The interesting parts of this app from my point of view are all in the main JavaScript file here.

19:39.840 --> 19:45.760
So, this was created for us using a template, but it's reasonably straightforward. The first bit of

19:45.840 --> 19:54.640
the code at the top just imports the various libraries and other files from the local directory

19:54.640 --> 20:01.520
that are going to be needed. This app contains some custom blocks and a custom generator for

20:01.520 --> 20:06.240
those blocks. The generator is the part of the blockly that actually produces the JavaScript

20:06.240 --> 20:18.320
code to be run. So, we register those custom pieces. Then we find the three divs in the HTML page.

20:18.960 --> 20:25.920
The one that is most interesting to us is BlocklyDiv. This line here is where Blockly is

20:25.920 --> 20:33.680
actually turned on, fired up on our page. It has some options. At the moment, the option we're

20:33.680 --> 20:39.120
passing in is Toolbox. I'll go and show you the contents of the Toolbox in a moment. It's loaded

20:39.120 --> 20:43.760
from another file in the same directory, but we can add some other options. For example, Blockly

20:43.760 --> 20:48.480
supports a number of different renderers. I can change the renderer that's used

20:54.800 --> 20:59.360
just by adding an extra option here. When I save the file, you can see Webpack

20:59.360 --> 21:06.240
recompiles it, reloads the browser, and now we have this much more scratch-style appearance.

21:07.360 --> 21:09.760
We can also add a grid.

21:18.800 --> 21:23.440
Those dots are pretty small. There are actually little crosses. Let's make them a little bit bigger.

21:24.080 --> 21:26.160
Length 5.

21:29.440 --> 21:32.240
That's a little easier to see. I could change the color.

21:33.840 --> 21:38.320
Both Neil and myself are Canadian, so we use Canadian spellings in Blockly.

21:42.000 --> 21:49.680
I really like blue, so we'll go with blue. Now we have blue grid. The grid you can see is

21:49.680 --> 21:56.480
useful for lining things up, but our blocks are not currently snapping to it, but we can

21:56.480 --> 22:07.600
turn on an option for that. I should know my JavaScript syntax by now. Now you'll see the

22:07.600 --> 22:12.240
blocks will snap to the grid each time I move them to keep them nice and neatly organized.

22:12.560 --> 22:22.160
At the moment, you can see in the tool box, you can see a number of blocks. Most of these blocks

22:22.160 --> 22:26.480
come from a standard library of blocks that we created, but a few of them, for example,

22:26.480 --> 22:33.440
this add text block is a custom block for this particular application. You can have a look at

22:34.160 --> 22:48.800
that here. Here is a piece of code which defines the add text block and adds it to the dictionary of

22:48.800 --> 22:56.560
blocks that Blockly maintains. We have lots of documentation about the format here, but as you

22:56.560 --> 23:04.320
can see, it's basically a little bit of JSON with a set of options that control the shape of the

23:04.320 --> 23:15.920
block and the fields and inputs it has. If we look at the tool box, here we have another bit of

23:16.640 --> 23:22.080
basically JSON that lists all the blocks that appear on the tool box, and in some cases, if they

23:22.080 --> 23:29.120
have some extra blocks attached to them. For example, here we have the repeat block, which is in

23:29.120 --> 23:40.640
logic. You can see that by default comes with a shadow block with a number here, so you don't

23:40.640 --> 23:46.640
need to attach a block there just to put a number in. That's given here with the default value of 10.

23:47.600 --> 23:51.520
Suppose that I'm making an app and I decide that I don't need to have variables and functions in

23:51.520 --> 23:56.880
this app because it's a very simple app that's going to be targeted maybe at young users or that

23:56.880 --> 24:02.960
just don't need that functionality. I can go down and find the variables and procedures sections of

24:02.960 --> 24:09.600
the tool box and I can delete them and you can see they disappear from the app. It's reasonably

24:09.600 --> 24:20.560
straightforward to control what Blockly looks like, what blocks it provides, and the things scroll

24:20.560 --> 24:33.120
options, the availability of the trash can, and so on. Blockly architecture and internals.

24:33.120 --> 24:38.080
For those of you who are of a non-technical background, thank you for bearing with me so far.

24:38.080 --> 24:41.040
We're going to talk a little bit more. This part of the talk is going to be more technical,

24:41.040 --> 24:44.640
but it's going to have more pretty pictures hopefully, so maybe that's something.

24:44.960 --> 24:52.000
First of all, a little bit of terminology. This is a stack of blocks, which is basically just any

24:52.000 --> 24:57.840
arrangement of blocks that are connected together. You can see that blocks have a number of connections,

24:58.400 --> 25:02.880
so the little bumps at the top and bottom are previous and next connections for statements.

25:04.400 --> 25:09.520
On the right, you can see a value input where this block can take a value from another block,

25:09.520 --> 25:13.920
and a statement input where you can connect a bunch of other statement blocks to it that it

25:13.920 --> 25:19.520
will execute, in this case, while it's repeating something. On the bottom, you can see a block

25:19.520 --> 25:25.760
that has an output connection on the left, and we describe it as having a dummy input, because

25:25.760 --> 25:32.080
the contents of the block is basically, it's a bunch of stuff, but all that stuff has to be

25:32.080 --> 25:37.760
contained in a set of inputs. The top block has two inputs, which are labeled, though the bottom

25:37.760 --> 25:42.800
block doesn't need any actual input, so it has what we call a dummy input, which is basically just,

25:42.800 --> 25:46.400
it's an input, but not really an input, and it's just to put other stuff inside, in this case,

25:46.400 --> 25:53.520
to put a color picker. The stuff you put inside inputs are called fields, and here's a few different

25:53.520 --> 25:59.440
kinds of fields. For example, on the left, we have the labels repeat and do. We have a drop-down

25:59.440 --> 26:06.240
field for while. The next block has a smaller block inside it, and that smaller block has a

26:06.240 --> 26:12.560
number field on it. On the right hand side of that block, you can see over here, this block here is

26:12.560 --> 26:17.520
what we call a shadow block, so it's a space you can put a block, and until you put a block there,

26:17.520 --> 26:23.520
it acts as if it has a number block in it, whereas this input here has an actual number block in it.

26:24.880 --> 26:30.000
Here we have an image input. In this case, it's just a static picture of a paragraph symbol,

26:30.000 --> 26:33.920
and we have a multi-line text input, and finally over here, we have a color picker, which when you

26:33.920 --> 26:39.280
click on it, pops up a little grid of colors that you can choose from. So those are fields, and you

26:39.360 --> 26:42.640
can see a number of them here, and you can imagine that creating an app, you might want to be able to

26:42.640 --> 26:53.680
create some more kinds of fields. You can see the architecture, and I should admit this is

26:53.680 --> 26:58.320
emitting a tremendous amount of detail, but the high-level architecture is that we have

26:58.880 --> 27:05.360
classes for workspace, for block, for input, and for field, and you can see that the input

27:06.320 --> 27:12.080
has, the input class has three subclasses, one for those dummy inputs, one for value inputs,

27:12.080 --> 27:17.600
and one for statement inputs. The field then has a number of subclasses, labels, numbers,

27:17.600 --> 27:24.240
text input, drop down, and so on, and you can see that this, you would want to be able to add more

27:24.240 --> 27:32.960
of these, and to facilitate developers adding more, the inputs and fields come from something

27:32.960 --> 27:38.160
called the registry, which is basically a little internal database running inside Blockly

27:38.160 --> 27:43.120
that allows the developers to register additional classes to provide different kinds of fields,

27:43.760 --> 27:45.440
or potentially different kinds of inputs.

27:49.520 --> 27:55.440
On the right, we have a little set of classes that are the Blockly events, so there is an

27:55.440 --> 28:01.040
abstract base class, and then for example, for events that have to do with blocks, there is a

28:01.040 --> 28:08.080
block base class, and then another series of block create, block move, block drag, block delete,

28:08.080 --> 28:15.280
and so on, and similarly for inputs and fields, and the connections that connect the inputs and

28:15.280 --> 28:20.880
blocks together. A large hierarchy of events that are generated, you can add event listeners to

28:20.880 --> 28:26.640
listen to these, to different events, and you can also register more events so that your custom

28:26.640 --> 28:31.840
fields, for example, could generate custom events if you wanted them to, and whenever Blockly needs

28:31.840 --> 28:38.320
to create a field, it will look up the field in the registry, and then the field can then look up

28:38.320 --> 28:42.480
the events that it needs to create, and so on, so it's all relatively extensible, it's quite easy

28:42.480 --> 28:51.280
to add additional kinds of things. On the left, there's a little bit of stuff here, so workspace

28:51.280 --> 28:56.320
and block are the kind of the abstract models of a workspace and a block, and then there's versions

28:56.320 --> 29:01.600
of those, there are subclasses of those for the ones that are actually rendered on the screen,

29:01.600 --> 29:06.880
which are block SVG and workspace SVG, and those communicate with a bunch of code that I don't

29:06.880 --> 29:12.240
want to get into called the rendering subsystem that is responsible for like producing the SVG

29:12.240 --> 29:15.600
that is then fed to the browser to make it draw the pretty pictures of blocks.

29:16.400 --> 29:21.920
So that's basically the front end of Blockly, the back end of Blockly as it were is the code

29:21.920 --> 29:27.280
generation subsystem, so we have a base class code generator which provides mostly utility

29:27.280 --> 29:34.800
functions for code generation and things like indentation and so on. There is then a subclass

29:34.800 --> 29:41.760
for each of the languages we support that provides things like functions to correctly quote text in

29:41.760 --> 29:47.600
that language, and for each of those subclasses we also provide an instance of that, in this case

29:47.600 --> 29:54.240
the lowercase j javascript generator that has a little dictionary of generator functions,

29:54.240 --> 30:00.560
so for each different block type, so controls if is the if block, there is a generator function

30:00.560 --> 30:04.080
for that, and so for each of the different blocks there's a there's a function written

30:04.080 --> 30:10.640
that takes as its input a block instance and some extra information for example a reference to the

30:10.640 --> 30:17.120
generator itself and it returns a piece of source code and for blocks that have inputs

30:18.160 --> 30:22.720
of various kinds they will then call the generator function for those inputs

30:22.720 --> 30:28.400
and take the resulting bits of text from those and combine them together to produce the output text.

30:29.360 --> 30:43.520
All right, lessons from a decade of Blockly. So there's a lot that I could say on almost any of

30:43.520 --> 30:49.840
these topics but I think the thing which I am certainly very conscious of and I know Neil is

30:50.320 --> 30:58.800
is that dependencies are very expensive. At the moment if you install Blockly it has only one

30:58.800 --> 31:05.280
dependency, the npm package has only one direct dependency, and that is on js dom and js dom is

31:05.280 --> 31:12.640
only used if you are running Blockly headlessly in no js because we need some DOM functions to parse

31:12.720 --> 31:21.840
XML. So this makes Blockly relatively dependency free but it didn't used to be like that. In the

31:21.840 --> 31:28.080
early days of Blockly we made use of the closure library, I don't know how many of you are familiar

31:28.080 --> 31:36.240
with this but it's a JavaScript UI widget library which also provides some JavaScript utility functions

31:36.800 --> 31:41.280
and it was very convenient to use, it took care of a lot of things like oh you need a date picker,

31:41.280 --> 31:48.560
well it provides a date picker and it also had utility functions that were useful but the closure

31:48.560 --> 31:56.640
library is kind of big and that meant that Blockly was kind of big and tended to load slowly especially

31:56.640 --> 32:02.000
if you had a small internet connection and some of the people that we are most interested in

32:02.000 --> 32:06.640
reaching are people who don't necessarily have that great an internet connection and if you are

32:07.280 --> 32:13.520
in some place where you are dependent on dial up or a low band with mobile phone connection

32:14.160 --> 32:19.520
we want you to be able to use Blockly and obviously if it takes a minute or two to load a page

32:19.520 --> 32:24.000
containing Blockly that is not going to make you very happy, it's not going to make you a returning

32:24.000 --> 32:33.360
customer of that app. So the Blockly team wanted to reduce the size of Blockly, now the piece of

32:33.360 --> 32:37.360
advice that was given was basically to go all in on closure, the closure library if you are going

32:37.360 --> 32:43.280
to use it it has a certain cost in size so you might as well use as much of it as you can and

32:43.280 --> 32:48.160
remove any other code that you have in your app that does the same thing that you could use a

32:48.160 --> 32:53.600
closure library for that seems like good advice and that was the direction that Blockly went for a

32:53.600 --> 33:00.560
while but it became clear that this wasn't working very well, Blockly was still pretty big and the

33:01.440 --> 33:06.880
closure library is designed for HTML and CSS whereas Blockly is mostly the front end is mostly

33:06.880 --> 33:14.960
SVG and using HTML and CSS based widgets in an SVG app turns out to be not very much fun and not

33:14.960 --> 33:19.920
particularly easy so eventually the decision was made to get rid of closure and it actually took

33:20.480 --> 33:26.800
several years to remove all of the bits of code in Blockly that called into the closure library,

33:27.680 --> 33:32.400
the few remaining bits that were actually useful basically just got copied into the Blockly source

33:32.400 --> 33:39.120
code and that dependency was eventually deleted but in the meantime there had been the cost of

33:39.120 --> 33:46.960
keeping it up to date and so on so it was definitely worth removing it because now we own all of that

33:46.960 --> 33:52.320
code ourselves and we don't have to worry about it breaking because somebody has decided to push

33:52.320 --> 33:59.760
an update but it took a long time and a lot of work to get there so I think the team is always

33:59.760 --> 34:04.960
thinking very carefully when opportunities come along to use new bits of tooling it can be very

34:04.960 --> 34:11.600
tempting some new application or utility or library that looks like it would make your life easier

34:11.600 --> 34:19.840
and be super convenient but it has costs another example of this is Blockly games until last week

34:19.840 --> 34:27.360
was running on Google App Engine it was using a version of the API which has been deprecated for

34:27.360 --> 34:32.240
about five years the amount of effort that it was going to take to update to the current version of

34:32.240 --> 34:38.880
the API was enough that we decided that it was going to be easier to self-host it so it still

34:38.880 --> 34:45.680
runs in Google Cloud but it runs in Google App Engine on basically a you know a bear server

34:46.240 --> 34:51.600
where we supply all of the software infrastructure that we previously used to be using that was

34:51.600 --> 34:57.760
provided by by App Engine so and hopefully that will considerably reduce the amount of time we

34:57.760 --> 35:09.600
spend dealing with App Engine updates in future so progress is great but keeping up is hard

35:09.600 --> 35:18.960
when Blockly was started around 2010 the technology that was used in use at Google was

35:18.960 --> 35:25.360
ECMAScript 5.1 which is to say an old version of JavaScript the closure type system I'm not

35:25.360 --> 35:30.160
sure if any of you are familiar with Google's closure compiler but it provided type checking for

35:30.160 --> 35:35.040
JavaScript very early on it was one of the first major tools to provide type checking for a JavaScript

35:35.040 --> 35:41.280
and when you build web apps the size that Google does that's extremely handy we also used what I

35:41.280 --> 35:47.040
might optimistically describe as a module system that was based around a function in a library

35:47.040 --> 35:52.640
called Google provide it wasn't really a module system it was basically just namespace objects

35:52.640 --> 35:57.120
if any of you who's used the TypeScript namespace feature it's basically exactly the same as that

35:57.120 --> 36:02.000
you can create an object and put some properties on it and put some more objects on those properties

36:02.000 --> 36:06.320
and you basically build a little tree and then you tuck your code away somewhere on that tree

36:06.320 --> 36:13.360
that's not going to conflict with anybody else's code and each file in your project puts its code

36:13.360 --> 36:20.400
on a different part of that tree there is still only one scope so if you declare a global variable

36:20.400 --> 36:27.600
by accident everybody gets to see it but it was a pretty pretty useful system at the time

36:28.400 --> 36:36.400
in 2012 TypeScript came along with a different slightly different and slightly incompatible

36:36.400 --> 36:45.520
but similar approach to JavaScript typing in 2014 Google promulgated a new module system called

36:45.520 --> 36:52.320
google.module which I think I would describe as being very similar to common js modules the syntax

36:52.320 --> 36:57.360
is a little bit different but the semantics are pretty similar to common js modules you have

36:57.360 --> 37:01.440
a local scope in each file so you can declare global variables in a file and they stay within

37:01.440 --> 37:10.400
that file life is happy 2015 of course we saw es6 and the introduction of ECMAScript modules

37:10.400 --> 37:14.960
with their own syntax and semantics which were quite different from common js modules

37:16.080 --> 37:22.240
and 2016 Google started to adopt TypeScript for our main internal code base

37:22.560 --> 37:30.240
guess what tech google Blockly was using in 2021 when I joined the project

37:34.320 --> 37:40.800
no no we were using ECMAScript 5.1 and the closure type system and google provide because

37:42.320 --> 37:45.680
you know the the Blockly code base is not enormous in the grand scheme of things google

37:45.680 --> 37:50.240
scale it's a pretty small bit of code but it's still hundreds and hundreds of files and when

37:50.240 --> 37:56.160
you have the choice between adding useful features to your project or fixing bugs that are impacting

37:56.160 --> 38:05.600
your users or spending time on refactoring your code to use a different language dialect and type

38:05.600 --> 38:11.600
system and module system that latter task doesn't seem like a particularly good use of your time

38:12.720 --> 38:16.400
the problem of course is with an open source project if you want to get people to contribute to

38:16.400 --> 38:22.240
your project it's nice to be using the same kind of tech that they're using in their projects and

38:23.040 --> 38:26.880
just just show hands here who's used the closure type system

38:28.880 --> 38:31.840
yeah three people have put up their hands that's about what I expected

38:33.040 --> 38:37.440
so yeah it's hard to find people who are on work on a project that is essentially written in

38:37.440 --> 38:41.440
something like a foreign language or at least a foreign dialect of a language that you know

38:42.080 --> 38:50.320
so we decided that we needed to update but the the cost of that update was substantial

38:51.040 --> 38:58.880
so the migration process was arduous we started by doing an almost entirely manual migration from

38:58.880 --> 39:06.960
the google provide module system to the google module actually really modules system that required a

39:06.960 --> 39:14.000
lot of restructuring code because google provide you didn't have any kind of notion of exports like

39:14.000 --> 39:18.880
just you you created a bunch of properties on an object and that object was visible to any of the

39:18.880 --> 39:23.600
other code in the system and so they could use those data properties or call those functions

39:24.720 --> 39:28.880
we had to think about what each file needed to actually export that other

39:28.880 --> 39:33.680
files within blockly were going to need and what things in that file were private and needed to

39:33.680 --> 39:39.280
be kept within the file it was it was quite a lot of work and we had to move a lot of code around

39:39.280 --> 39:44.800
and that ended up breaking creating a lot of breaking changes in blockly which was not great but

39:44.800 --> 39:52.400
we didn't know any way around that at the time we then were able to do a migration from es 5.1

39:52.400 --> 39:58.080
to es 6 this was a mix of manual work but quite a lot of help from various bits of tool various

39:58.160 --> 40:06.000
bits of tooling to do that migration so starting to use class constructors for example or class syntax

40:07.520 --> 40:12.720
then the main final migration from the closure type system in google module to type script

40:12.720 --> 40:19.360
and es modules that was actually done using internal tooling at google i i probably can't

40:19.360 --> 40:25.280
talk a great deal about that but i know that it was briefly it was briefly made available as a now

40:25.280 --> 40:32.080
deprecated project on github whose name i whose public name i don't remember but it was used by

40:32.080 --> 40:37.040
like one or two other companies that had very heavily closure oriented code bases to do a

40:37.040 --> 40:41.680
typescript migration and they were fairly successful with that but it wasn't a useful general purpose

40:41.680 --> 40:50.960
tool so that has not not really been that useful to anybody else but we we we pushed through we

40:50.960 --> 40:55.840
fixed a lot of type errors that were left over after the automated tooling dumped a bunch of files

40:55.840 --> 41:01.760
into the repository and we eventually got it running we got it passed through typescript

41:01.760 --> 41:07.040
compilers type checking we figured out what we needed to do to get closure compiler to correctly

41:07.040 --> 41:12.960
ingest the code that was generated by the typescript compiler and life was good and now we have

41:12.960 --> 41:20.000
blockly in written in typescript with standard typescript yes modules code base that will be

41:20.000 --> 41:25.200
much more familiar to potential contributors it took a long time for us to get up to speed on

41:25.200 --> 41:33.680
these new technologies we made a number of regrettable mistakes we we we completely rearranged a lot of

41:33.680 --> 41:38.720
the public api of blockly which in hindsight we probably didn't actually need to do but we just

41:38.720 --> 41:43.840
didn't know at the time any better way to do it because we were mostly novices to the technology

41:43.840 --> 41:48.320
we're using we had only one person on the team who had really used typescript before we undertook

41:48.320 --> 41:55.600
this migration and even even kind of expertise on closure compiler there were only a few of us on

41:55.600 --> 42:00.720
the team who had used it extensively and kind of understood what it was doing and how to interpret

42:00.720 --> 42:09.040
some of its more obscure error messages the the blocks the library blocks that we provide and

42:09.040 --> 42:13.680
the code generators those were migrated a bit later that migration was actually done a bit more

42:13.680 --> 42:19.520
manually and using some of the wisdom we had gained by the migration of the main part of the

42:19.520 --> 42:25.920
code base and i would say largely that went a bit more smoothly i don't know that we could have done

42:25.920 --> 42:31.280
the main part of the code base entirely manually it took us basically a whole year's work from the whole

42:31.920 --> 42:38.800
then roughly six person team the the blocks and generators were a much smaller piece but it was

42:38.800 --> 42:44.000
satisfying to to do those and feel like i was you know doing it the way we should have done it the

42:44.000 --> 42:49.600
first time on the main part of the code base but yeah especially in the world's javascript

42:49.600 --> 42:56.160
technology changes it changes incredibly quickly and you're going to need to invest time at some point

42:56.160 --> 43:01.840
to keep your code base looking like something that a new developer will recognize

43:02.720 --> 43:10.960
architecture is always easier in hindsight so i guess there's a there's a few parts of this

43:11.520 --> 43:19.680
so part of it is when blocky began being written javascript was still a relatively new language

43:19.680 --> 43:26.160
that was used it was it was certainly we had gmail and google maps and javascript was being used to

43:26.160 --> 43:34.400
write web apps but web apps were still a relatively new thing and i think there were many different

43:34.400 --> 43:40.160
ways of writing code in javascript javascript is an object-oriented programming language

43:40.160 --> 43:48.560
but it didn't originally have class syntax and so a lot of people explored quite different ways to

43:48.560 --> 43:56.080
build objects it's not unusual for javascript code to copy properties from object to object

43:56.320 --> 43:59.920
to use mixins and things like that and there was a lot of stuff like that within the blocky

43:59.920 --> 44:07.120
code base blocks in javascript in blocky you can see there's a block class and the way different

44:07.120 --> 44:13.920
shaped blocks were created was basically to have a mixin object with some properties on it some

44:13.920 --> 44:21.200
methods and data you you copy those onto a new fresh block instance and you call an init method and

44:21.920 --> 44:29.280
it then kind of sets up the block so each block is an instance of the block class but it has

44:29.280 --> 44:34.400
some random extra properties on it and that was fine in the early days of javascript but that is

44:34.400 --> 44:41.120
not a type model that works particularly well with class syntax or especially with type script

44:41.120 --> 44:47.200
type checking there are some other interesting wrinkles here we have a workspace svg and block

44:47.200 --> 44:54.560
svg classes they were essentially an effort to separate the the model from the view but it's

44:54.560 --> 45:01.040
it's one of these cases where instead of having a view the model is the view and this then creates

45:01.040 --> 45:05.200
some problems we might want to turn our block definitions into actual subclasses of block but

45:05.200 --> 45:10.560
now you need a now you need to be able to subclass either block or block svg depending on whether

45:10.560 --> 45:18.720
Block v is running with a UI or headlessly so fixing that yeah these guys here they're they're

45:18.720 --> 45:22.960
they're difficult we we will probably continue working on this bit of the Block v architecture for

45:22.960 --> 45:29.840
some time but let's just say it's a lot clearer to us now how we should have written this the

45:30.960 --> 45:35.120
model the view and the controller should have been separate pieces there should have been less

45:35.120 --> 45:39.600
inheritance between them it should have been a has a rather than is a relationship and so on but

45:39.680 --> 45:44.960
you know nearly nearly 15 years experience you you learn some things

45:47.520 --> 45:53.680
finally no technical decisions are made in a vacuum Block v is a library that is used by

45:54.880 --> 46:00.720
hundreds thousands of other projects we don't we don't even know exactly we we have some metrics

46:00.720 --> 46:08.160
that tell us that we know roughly as a minimum about 40 million people a year use Block v to learn

46:08.160 --> 46:14.080
to code but we have no idea how many people use Block v as part of some you know corporate internal

46:16.160 --> 46:22.080
financial reporting system or a robot controller or any of the rest of us so we need when we're

46:22.080 --> 46:28.160
making changes to Block v we need to do so in a way that is going to be as as convenient as possible

46:28.160 --> 46:33.840
for developers to upgrade unfortunately if you never make any breaking changes to your code base

46:33.840 --> 46:37.520
you end up in a situation where you're eventually not going to be able to make any useful changes

46:37.520 --> 46:42.880
to it either so we look very carefully at breaking changes we try really hard not to break the Block

46:42.880 --> 46:49.840
v API and behavior but if we if we break it so the developer has to update their code we're okay

46:49.840 --> 46:57.280
with that but we do not break Block v in a way that would prevent the developer from being able

46:57.280 --> 47:02.160
to update their app and load saved programs what we do not want is somebody who's written a program

47:02.160 --> 47:07.120
in Block v being unable to load that program into Block v because of some change that we've

47:07.120 --> 47:13.520
made to Block v itself so some breaking changes for the developers hopefully no breaking changes

47:13.520 --> 47:19.040
when it comes to loading programs because we would like well it is still the case that the very first

47:19.040 --> 47:24.240
Block v programs that were ever written there it you know all the ones from Block v games that

47:24.240 --> 47:32.320
kids have saved those all still load and work today so and finally Block v's unexpected killer feature

47:33.280 --> 47:38.640
we only let the developers choose the hue of blocks people like to pick colors for things

47:39.760 --> 47:45.920
it we basically in Block v you can choose the hue and Block v chooses the saturation and value for

47:45.920 --> 47:50.720
the different parts of the block developers often complain about this and you can work around it if

47:50.720 --> 47:55.360
you really want to but the big advantage of doing it this way is it turned out that if you only let

47:55.360 --> 48:01.600
the developers choose the hue they really couldn't choose a set of colors that looked awful

48:03.120 --> 48:09.280
and the unexpected benefit was that Block v basically just looked better than any of the other Block

48:09.280 --> 48:14.640
front-end libraries out there at the time because because it prevented developers from

48:14.640 --> 48:20.320
making bad color choices so we kind of won on that one sort of by accident so yeah sometimes less

48:20.320 --> 48:29.520
is more I guess all right we have a few minutes left for Q&A I am happy to answer almost any

48:29.520 --> 48:35.120
question I can I did mention that I am not much of a front-end developer most of my work on Block

48:35.120 --> 48:40.960
v has been involved in migration and tooling and things like that but I am happy to answer any

48:40.960 --> 48:45.920
questions I possibly can with that mind stick up your hand I will pass you the mic if you're not

48:45.920 --> 48:58.320
too far away just so people who are watching on the live stream can hear could you tell us a bit

48:58.320 --> 49:04.080
more about Block v's own type system so each block can have a type so what kind of types are

49:04.080 --> 49:11.920
supported yeah so Block v's type system is very simple basically each connection can provide that

49:11.920 --> 49:18.080
to say an input or an output connection from a block can provide a list of strings those strings

49:18.080 --> 49:26.000
might be things like string number boolean color something like that and you can only connect

49:26.000 --> 49:31.520
two blocks together if there's at least one type in common between an output and an input

49:31.520 --> 49:37.680
and that is basically Block v's type system now there has been some work done by my colleague

49:37.680 --> 49:43.040
Becca on something called a nominal connection checker which is basically designed to provide a

49:43.040 --> 49:48.160
much more sophisticated kind of type checking that was she did that work experimentally actually

49:48.160 --> 49:54.320
before she joined Block v team so if you if you search for Google Block v nominal connection

49:54.320 --> 49:59.280
checker you can find some of the work that she did on that we are definitely interested in providing

49:59.280 --> 50:04.880
a bit more sophistication in terms of typing but it's not a huge priority for us because for the

50:04.880 --> 50:11.360
kind of educational market that we are there is our main target of our work this very simple type

50:11.360 --> 50:17.120
system that we have is generally good enough to make it easy for kids to not produce invalid

50:17.200 --> 50:24.880
programs which is our main goal thank you so one in the middle or I was just gonna

50:24.880 --> 50:29.920
I just wanted to build on that so for App Inventor we also have a system we extended Block v to

50:29.920 --> 50:34.080
take a function so as long as the function returns true then you can connect two blocks

50:34.080 --> 50:38.000
and that gives you basically max the developer of the app can figure out what type checking they

50:38.080 --> 50:40.080
want to do yeah

50:46.080 --> 50:51.200
thanks for the talk really interesting and one of the downsides of teaching coding through

50:51.760 --> 50:58.240
or one of the perceived downsides is that when you graduate beyond using blocks to using real code

50:58.800 --> 51:03.360
it's a one-way street right you take your code and you generate some code and it maybe is not

51:03.360 --> 51:07.440
the same shape of code that you would write if you're writing code from scratch and it's also a

51:07.440 --> 51:12.240
one-way street you can't go back yes do you know if there's been much research into going the other

51:12.240 --> 51:18.560
way like bringing existing logic into Block v and on kind of bridging this gap more smoothly on

51:18.560 --> 51:25.120
like improving the quality of the generated code to feel more like a human would write yeah so this

51:25.120 --> 51:30.960
is this is something that we're definitely very interested in my my colleague Neil is actually

51:31.040 --> 51:40.240
doing some work at the moment on basically pre-work on something like that the idea is okay so the

51:40.240 --> 51:46.400
fundamental problem with the kind of general code to blocks is that within Block v even in our

51:46.400 --> 51:51.120
standard block library we we don't have blocks that represent all of the different things you

51:51.120 --> 51:57.360
can do in any of the five languages that we support so there are lots of programming constructs which

51:57.360 --> 52:03.600
we just can't represent in Block v so you would need to have a set of blocks that could represent

52:03.600 --> 52:09.920
everything that the language can do in order for that to work in the general case even in the case

52:09.920 --> 52:14.560
the specific case that the program only uses constructs from within the set of things that you

52:14.560 --> 52:20.800
can do with Block v blocks it is not that straightforward to figure out how to how to do the reverse

52:21.520 --> 52:28.480
uh so Neil has a sort of a little research project that he's working on that will basically try to

52:29.520 --> 52:37.840
evolve a Block v program to be as close as possible to a given input text so one of the things

52:37.840 --> 52:42.480
that he's worked on so far is making the generators work a lot faster so that you can basically like

52:42.480 --> 52:48.400
randomly permute a Block v program like thousands of times and try to like you know tweak it in the

52:48.400 --> 52:53.680
direction that it looks more and more like a piece of code but yeah the fully general case would

52:53.680 --> 52:59.840
require a very comprehensive set of blocks and some fairly careful thought put into how to make that

52:59.840 --> 53:10.240
mapping work uh I will take your question but actually I just wanted to mention one thing which is

53:10.960 --> 53:14.800
I don't know if you guys are aware but there are some other projects that have looked at

53:14.800 --> 53:20.160
alternative approaches to the kind of blocks to coding transition one that I'm aware of is called

53:20.160 --> 53:26.880
pencil code which is a it's basically like a blocks editor but the blocks look a little bit

53:26.880 --> 53:31.280
more like source code and you can kind of click a button and the blocks disappear and just leave

53:31.280 --> 53:36.160
behind the source code and so then you can write code and you can then like click the button and

53:36.160 --> 53:42.240
then the blocks come back so that's kind of a clever that's kind of clever system so that that

53:42.240 --> 53:48.160
might be that might be a route that one could that could take again there was lots of things we

53:48.160 --> 53:54.240
would love to add to Block v uh alas we are a small group with a lot of responsibility and

53:54.240 --> 54:01.280
have to focus on you know fixing the bugs for one thing but yeah uh yes I have two small questions

54:01.280 --> 54:07.760
first of all why is google I appreciate that google is doing this because we all um use it

54:07.840 --> 54:12.480
and I don't appreciate a lot so why is google actually developing it what does it bring to

54:12.480 --> 54:18.000
google that's the one question and the second one I'll just add it quickly what will do with

54:18.000 --> 54:25.040
future of Block v so what do you have in mind on doing it okay so the first question but what

54:25.600 --> 54:33.920
why does why does google pay me to work on this I to be honest the the real answer that is

54:34.000 --> 54:40.400
is several uh several pay grades above where I sit on the org chart uh I don't really know for

54:40.400 --> 54:46.480
sure but I do know that we work with very closely with a part of the organization called education

54:46.480 --> 54:54.480
for social impact uh which as of uh as of this basically as of this weekend has moved to become

54:54.480 --> 55:00.400
part of google.org so it has always been uh I don't want to say exactly a charitable but a very

55:00.400 --> 55:07.840
intentional uh corporate citizenship outreach kind of uh department they run a lot of coding

55:08.720 --> 55:16.080
learn to code digital skills programs uh often targeting disadvantaged people marginal

55:16.080 --> 55:22.240
look at marginalized groups and uh we they are they are within google they are effectively our

55:22.720 --> 55:31.920
our customer um google uses Blockly as part of the um I forgot we have a learn to code program at

55:31.920 --> 55:37.520
cs first uh that is based on scratch which in turn is based on Blockly so the work that we do on

55:37.520 --> 55:43.840
Blockly eventually makes it around that loop so it becomes part of the cs first uh product that

55:43.840 --> 55:50.480
that google runs and and then just generally uh despite the current uh despite the current

55:50.480 --> 55:56.400
to belt tightening and so on at google google I think does continue to recognize that there is a

55:56.400 --> 56:02.640
considerable value to uh things like cs education uh for one thing uh we may not be hiring at the

56:02.640 --> 56:07.280
moment but for almost the entire company's history uh google has struggled to find enough

56:08.240 --> 56:15.040
highly qualified engineers so anything involved in providing more potential uh potential staff

56:15.040 --> 56:20.000
for the company has been a an important initiative uh hopefully we'll go back to hiring otherwise

56:20.000 --> 56:26.160
maybe that will be less useful as a justification uh as to ours the uh future of uh Blockly um

56:26.960 --> 56:33.440
we have a bit of an internal roadmap uh I find myself standing up here having had a long weekend

56:33.440 --> 56:37.920
of thinking about all kinds of other amazing projects and I cannot remember what we talked about

56:37.920 --> 56:45.120
in our team meeting even just a couple of weeks ago um but we are uh one of our major projects at

56:45.120 --> 56:50.560
the moment is to try to get our major partners up to date using latest version of Blockly because

56:50.560 --> 56:55.040
there have been a lot of bug fixes and new features added since there uh many of them have forked

56:55.040 --> 56:58.720
Blockly and are using older versions and we are gradually getting them back onto the main line

56:58.720 --> 57:06.640
version of Blockly uh after our big migration and uh in addition to that work we uh we have a number

57:06.640 --> 57:11.600
of projects adding features that have been requested one feature that was recently added

57:11.600 --> 57:18.720
was a set of APIs that allow you to create uh create procedure or function blocks in one workspace

57:18.720 --> 57:24.400
and call them from code in another workspace uh it can also be used to like uh have two

57:24.400 --> 57:28.400
workspaces that are kept in sync and we did a little demo within one browser but you could very

57:28.400 --> 57:32.480
easily ship the event data between two different browsers so you could have two people coding

57:32.480 --> 57:39.520
together on the same program in on two different computers um so we have a we have a we have a

57:39.520 --> 57:43.680
you know essentially a list of feature requests along those lines adding features that are useful

57:43.680 --> 57:48.320
for Blockly uh and generally we try to add them a fairly generalized way so that they can be used

57:48.320 --> 57:51.200
for a number of different purposes and that that one is an example of it.

57:53.600 --> 57:59.120
Did you have set outside contributions? Do you have set outside? Yes we do we do we are we are an

57:59.120 --> 58:04.640
open source project uh we get a lot of pull requests uh come our way uh you can see actually here we

58:04.640 --> 58:09.760
have two different github repositories the Blockly repository is the main Blockly library

58:10.480 --> 58:14.800
and we welcome pull requests there but that is maybe not the easiest place for less experienced

58:14.800 --> 58:19.120
developers to start the Blockly codebase is it's a little complicated and the interesting bits are

58:19.760 --> 58:26.080
quite complicated but Blockly samples is a repository containing a large number of plugins for Blockly

58:26.080 --> 58:31.120
basically additional stuff that you can plunk into the registry to add new kinds of fields

58:31.840 --> 58:37.360
and new features to Blockly and that is a much more tractable place we had a number of plugins

58:37.360 --> 58:41.600
that have been contributed to that repository and we get lots and lots of people doing bug fixes

58:42.480 --> 58:49.600
we have a good first issue label so if you are new to the project and maybe potentially even

58:49.600 --> 58:54.800
relatively new to contributing to github there are any number of little little bugs that are tagged

58:54.800 --> 58:59.360
that way that might just be like might just be fixing some documentation or you know

59:00.320 --> 59:06.160
uh you know correcting some typos or things like that uh and there's definitely lots of feature

59:06.160 --> 59:11.520
requests we quite often get feature requests from people on the forum they're saying oh how do I

59:11.520 --> 59:16.080
do this with Blockly and I'm like well we don't currently offer a way of doing that but here's

59:16.080 --> 59:20.560
a sketch of what you could do and if you can get it working please turn it into a plugin and contribute

59:20.560 --> 59:24.480
it back to the Blockly repository so other people can use it and uh of course it doesn't always

59:24.480 --> 59:28.240
happen but a surprising number of plugins have happened because somebody wanted something and

59:28.240 --> 59:31.920
we're like well we don't have time to build that but here's here's a rough idea of how to make it

59:31.920 --> 59:37.440
work go for it and and they've they've succeeded with it so yeah we uh we absolutely welcome

59:37.440 --> 59:42.480
contributions uh and in addition to external contributors we're very lucky to have a small

59:42.480 --> 59:49.760
group of other Googlers who work on Blockly as a 20 as a 20 project so yeah so that uh there's

59:49.760 --> 59:52.800
you're kind of in in a way as an external contributor you're sort of in good company because

59:52.800 --> 59:57.040
there's other external contributors within google as well we try to make life good for all of those

59:57.040 --> 01:00:11.680
people if we can. Any final questions? All right well thank you very much just before you go if

01:00:11.680 --> 01:00:16.080
you were one of the people who stuck your hand up earlier to tell me what you were building in Blockly

01:00:16.080 --> 01:00:20.400
please please come up here after the talk but yes so that's what you thank you so much for coming

01:00:20.400 --> 01:00:29.760
and uh I look forward to seeing what you guys make with Blockly

