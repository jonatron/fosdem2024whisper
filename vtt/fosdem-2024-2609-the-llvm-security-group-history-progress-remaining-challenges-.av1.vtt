WEBVTT

00:00.000 --> 00:12.000
Hi, my name is Christoph Bales.

00:12.000 --> 00:18.000
One of the things I do in LLVM is I'm a member of the LLVM Security Group.

00:18.000 --> 00:26.000
And I realize that I don't think there has been a lot of publication or sharing of exactly what the Security Group does.

00:26.000 --> 00:32.000
And so I thought, hey, let's see if there's anything interesting to say about the LLVM Security Group.

00:32.000 --> 00:35.000
So what's the purpose of the Security Group?

00:35.000 --> 00:45.000
It's there to make sure that when there are issues, security issues that are discovered, there is a way to responsibly disclose them.

00:45.000 --> 00:53.000
So that means when there is need to take action before the issue should be fully publicly known, the Security Group enables that.

00:53.000 --> 00:58.000
Its purpose is not to try and do everything related to security.

00:58.000 --> 01:04.000
So everything that can be done fully public in the open probably should be done elsewhere.

01:04.000 --> 01:08.000
A little bit of history.

01:08.000 --> 01:15.000
The idea of setting up a Security Group was done in late 2019.

01:15.000 --> 01:17.000
It took about a year and a bit.

01:17.000 --> 01:19.000
The group was up and running by 2021.

01:19.000 --> 01:26.000
And now three years later, we've been operating for, well, three years.

01:26.000 --> 01:28.000
Who can be on the group?

01:28.000 --> 01:36.000
There's a page on the LLVM Talk website, which I'm sure the URL will show up on some later slides.

01:36.000 --> 01:44.000
But it does describe that it can be individual contributors, security researchers, and representatives from vendor contacts.

01:44.000 --> 01:52.000
And here vendor means typically people who pick LLVM, build it, and release it, something along those lines.

01:52.000 --> 01:59.000
Currently, there's about 20 members, and the far majority are vendor contacts.

01:59.000 --> 02:01.000
So how to report a security issue?

02:01.000 --> 02:13.000
So far, we've been using the Chromium Bug Tracker, which seems a bit odd, but it was at the time three years ago the easiest way to get the Security Group

02:13.000 --> 02:22.000
going because that's a tracker that has features to make sure that you can report issues in confidence.

02:22.000 --> 02:29.000
We are planning to move to something different, most likely something that's integrated in GitHub,

02:29.000 --> 02:37.000
given that most of the other project infrastructure is now in GitHub.

02:37.000 --> 02:43.000
So what kind of reports have we received over the past three years in total?

02:43.000 --> 02:50.000
We've received about 47 reports, and in the next couple of slides I'll go into a bit more detail.

02:50.000 --> 02:52.000
This is Sunburst Diagram.

02:52.000 --> 02:59.000
Hopefully it will be clear what this kind of represents in the next couple of slides.

02:59.000 --> 03:10.000
So the stuff that's highlighted here, 27 issues were considered by the Security Group to not be actually security issues,

03:10.000 --> 03:19.000
or at least not issues that needed special treatment and could not be made public immediately.

03:19.000 --> 03:23.000
Just a list of, this is my personal classification.

03:23.000 --> 03:27.000
It's possible I made a mistake here, so four reports were just empty.

03:27.000 --> 03:34.000
Three issues report about Chromium because it's a Chromium Bug Tracker, that's a confused people.

03:34.000 --> 03:47.000
I don't blame them, like it's five bugs turned out to be just very regular normal bugs that probably should have been published publicly.

03:47.000 --> 03:53.000
There were 12 issues where people reported a memory vulnerability, like a buffer overflow or something like that,

03:53.000 --> 03:57.000
happening in a tool, not a library.

03:57.000 --> 04:01.000
So for example, a buffer overflow in the parser of the compiler, something like that.

04:01.000 --> 04:06.000
We explicitly describe that as we don't consider those are security issues,

04:06.000 --> 04:12.000
or at least not issues that need to be handled in a coordinated way.

04:12.000 --> 04:18.000
Two issues related to undefined behavior in source code, so someone showed a small program and said,

04:18.000 --> 04:22.000
hey, the compiler does something like clearly security issue.

04:22.000 --> 04:26.000
It is a source program written in C or in C++ and it has undefined behavior,

04:26.000 --> 04:30.000
and actually the compiler does what's allowed according to the standard.

04:30.000 --> 04:37.000
And there was one discussion on improving supply chain security, which is very useful,

04:37.000 --> 04:42.000
but there's no need to do that as a discussion in confidence.

04:42.000 --> 04:50.000
So let's jump to the issues that were considered to be, yes, probably these are, well,

04:50.000 --> 04:56.000
these are considered security issues according to the security group.

04:56.000 --> 05:03.000
So two of them were considered like we don't need coordinated actions here.

05:03.000 --> 05:07.000
It's okay to just have these as public issues.

05:07.000 --> 05:12.000
One was a particular sanitizer, not reporting an issue in a particular niche use case.

05:12.000 --> 05:19.000
Another one was a client warning not being enabled by default, not going to go into the details,

05:19.000 --> 05:21.000
but these could be discussed in public.

05:21.000 --> 05:28.000
18 or 38% if I calculated correctly, were deemed security issues,

05:28.000 --> 05:32.000
and that required some kind of coordination.

05:32.000 --> 05:36.000
Again, very rough classification.

05:36.000 --> 05:40.000
One was about the compiler generating incorrect code.

05:40.000 --> 05:45.000
In general, not every incorrect code generation is considered a security issue,

05:45.000 --> 05:50.000
but in this case, if I remember correctly, it was something about access to the frame pointer

05:50.000 --> 05:56.000
that was not correct, and so we could see that this could be exploited.

05:57.000 --> 06:00.000
Three issues were memory vulnerabilities in Lipsy++.

06:00.000 --> 06:05.000
Seven issues roughly related to supply chain security.

06:05.000 --> 06:13.000
I put it in that category, and then seven issues related to gaps in hardening features.

06:13.000 --> 06:15.000
I say hardening features.

06:15.000 --> 06:18.000
They could also be called security mitigations.

06:18.000 --> 06:24.000
So I just show on the slide a few examples of what can be considered these hardening features

06:24.000 --> 06:29.000
like stackinaries, branch protection.

06:29.000 --> 06:35.000
The number of hardening features implemented in compilers over the past 10 years have really taken off.

06:35.000 --> 06:38.000
Let me put it that way.

06:38.000 --> 06:42.000
Going back to supply chain security.

06:42.000 --> 06:45.000
So what are the kind of issues we saw in supply chain security?

06:45.000 --> 06:52.000
One issue was about the Visual Studio Code plugin for playing D.

06:52.000 --> 06:58.000
The LLVM was potentially trusting workspaces where maybe the user should first say,

06:58.000 --> 07:00.000
yes, this is a fresh workspace.

07:00.000 --> 07:01.000
I should trust that.

07:01.000 --> 07:06.000
So a kind of supply chain security like in the tool LLVM built itself.

07:06.000 --> 07:13.000
There was one issue that said something potentially suspicious happened here.

07:13.000 --> 07:17.000
Did someone try to put the backdoor into the LLVM compiler?

07:17.000 --> 07:21.000
It turned out extremely unlikely that that actually happened.

07:21.000 --> 07:27.000
But I'm quite happy that if people have suspicions, they actually report it and it gets investigated.

07:27.000 --> 07:37.000
Two issues were related to, I think one was a person accidentally publishing their GitHub access token publicly.

07:37.000 --> 07:42.000
So everyone had access to commit to the repository.

07:42.000 --> 07:45.000
And then something about the website that could be improved.

07:45.000 --> 07:50.000
And three issues were about out of date dependencies on libraries.

07:50.000 --> 07:56.000
So in a few, not in the core of LLVM, but a few of the utilities around, they're implemented in Python.

07:56.000 --> 08:01.000
These typically say we depend on exactly that version of a Python library.

08:01.000 --> 08:10.000
And those were out of date and there were security related consequence of that.

08:10.000 --> 08:13.000
Hardening features again.

08:13.000 --> 08:17.000
Seven issues we had.

08:17.000 --> 08:25.000
Two categories. One was four issues were related to gaps in existing mitigations.

08:25.000 --> 08:28.000
So mitigation has already existed.

08:28.000 --> 08:35.000
And three issues were some new vulnerability got detected in another system or maybe in some hardware.

08:35.000 --> 08:45.000
And the request was before we make this publicly available, we would like to make sure that there is a new security mitigation feature in LLVM

08:45.000 --> 08:52.000
to help people to work around that issue.

08:52.000 --> 08:57.000
So I really raised through just showing a few stats on what are the kinds of issues we get.

08:57.000 --> 09:01.000
Can we have some takeaways from looking at those? I think yes.

09:01.000 --> 09:04.000
So first of all, achievements, success.

09:04.000 --> 09:13.000
I think through all of these issues, I think all of these, all the report issues seem to have been processed appropriately.

09:13.000 --> 09:18.000
I think that means the security group is working as expected.

09:18.000 --> 09:20.000
So that's a success.

09:20.000 --> 09:29.000
If you would like to have a closer look yourself, the security group publishes a transparency report every year at that link.

09:29.000 --> 09:38.000
One thing I do not know is maybe some people have published an issue that is covered in the public bug tracker.

09:38.000 --> 09:44.000
That really is a security issue and should have been reported to the security group first.

09:44.000 --> 09:48.000
I'm not entirely sure exactly how to get some stats on that.

09:48.000 --> 09:54.000
If you do have any thoughts on that, please do contact me later.

09:54.000 --> 09:59.000
Those were all room for a lot of good things.

09:59.000 --> 10:02.000
The security group is working as expected.

10:02.000 --> 10:06.000
But from these stats, we could also derive some ideas for what could we do?

10:06.000 --> 10:11.000
What could be done better? Where do we need some more work?

10:11.000 --> 10:14.000
I think there's at least five different categories.

10:14.000 --> 10:21.000
First of all, a little bit more clarity on the threat model and what the security issue is.

10:21.000 --> 10:34.000
The issues that from my experience at least were by far the most complex are all the ones related to issues related to mitigations in the compiler.

10:34.000 --> 10:38.000
Supply chain, there's quite a few issues came in.

10:38.000 --> 10:40.000
There's probably also something to do there.

10:40.000 --> 10:43.000
I already said we should move away from the Chromium bug tracker.

10:43.000 --> 10:47.000
Then something that isn't quite clear from just looking at the issues itself.

10:47.000 --> 10:57.000
I think we also need to improve how we communicate what the known security issues are to everyone who has an interest and who should know.

10:57.000 --> 11:00.000
I'll go into a little bit more detail there.

11:00.000 --> 11:04.000
First of all, what is security issue or a threat model?

11:04.000 --> 11:12.000
Actually, it's documented what currently the security group defines as this definition of what is security issue.

11:13.000 --> 11:15.000
It was a threat model.

11:15.000 --> 11:17.000
A few things highlighted there.

11:17.000 --> 11:21.000
A lot of young issues in a very wide variety of use cases.

11:21.000 --> 11:29.000
It's very hard for everyone having all different kinds of use cases for all of them to agree on these are security issues.

11:29.000 --> 11:34.000
We'll have to come up with a reasonable consensus.

11:34.000 --> 11:39.000
Before we can say, hey, this is really the threat model we follow.

11:39.000 --> 11:49.000
We need buy-in from most of the people who commit to LLVM because otherwise how can you make sure that patches follow threat models?

11:49.000 --> 11:54.000
There's actually a few thousand committers to LLVM every year.

11:54.000 --> 11:57.000
That may be a bit of work.

11:57.000 --> 12:04.000
Maybe the most important guideline currently is that if you're not quite sure of an issue, is it security issue or not,

12:04.000 --> 12:07.000
please err on the safe side and do report security group.

12:07.000 --> 12:11.000
You saw a slight majority of issues we received.

12:11.000 --> 12:15.000
We decided this is not security issue can be handled as a regular issue.

12:15.000 --> 12:17.000
It's better to be safe than sorry there.

12:17.000 --> 12:23.000
So by all means, please do report if you think it might be security issue.

12:23.000 --> 12:26.000
What are the security sensitive parts of LLVM?

12:26.000 --> 12:29.000
Non-currently explicitly written up.

12:29.000 --> 12:32.000
I think we need to improve this section.

12:33.000 --> 12:38.000
Which parts or which kinds of issues are not security issues?

12:38.000 --> 12:40.000
There's actually one definition here.

12:40.000 --> 12:51.000
So it's basically if you have a malicious input file to a front-end and like you make clang fall over in a segmentation fall or something like that.

12:51.000 --> 12:57.000
That's probably due to a memory vulnerability in clang, but in general we don't consider that to be a security issue.

12:58.000 --> 13:04.000
Second category of things that could be improved.

13:04.000 --> 13:08.000
Issues related to hardening features.

13:08.000 --> 13:16.000
Based on the reports that we received, I think for two or three of them, we said that no, no, the hardening feature works as expected.

13:16.000 --> 13:23.000
You as a user thought you would get more protection, but you didn't get it in a specific detailed example.

13:23.000 --> 13:32.000
I think the documentation for many of the hardening features can be made quite a bit better to be more explicit and more refined about this is exactly what you get.

13:32.000 --> 13:40.000
And are there a few things that we could do to increase the quality of implementation of these hardening features?

13:40.000 --> 13:42.000
I have a few IDs there.

13:42.000 --> 13:47.000
So one is to build a binary scanner that checks the compiler produced some binary.

13:47.000 --> 13:51.000
Does it actually everywhere apply that security hardening feature correctly?

13:51.000 --> 13:59.000
I build a prototype based on BALT, but that's a whole other presentation at some point.

13:59.000 --> 14:04.000
I already said that probably we should improve documentation.

14:04.000 --> 14:12.000
Some of the mitigations, so they're built in LLVM, they are made available for clang the frontend.

14:12.000 --> 14:18.000
But then if you go look where are they also applied to other languages and then you see some gaps.

14:19.000 --> 14:27.000
So for example, for the rest frontend, maybe some of these mitigations could also be enabled and maybe for other languages too.

14:27.000 --> 14:40.000
And maybe it could also help to help more competitive developers know about what are the special things to look out for from a security point of view.

14:41.000 --> 14:49.000
And so together with a few other people, I started an open source book to try and collect the information like what should a compiler developer know about security.

14:49.000 --> 14:52.000
And so the link to that open source book is at the bottom of the slide.

14:55.000 --> 15:01.000
I said something about supply chain, something, something we should could improve there too.

15:01.000 --> 15:04.000
There's a few categories for supply chain that we saw.

15:04.000 --> 15:08.000
So something's about just the web infrastructure for a project.

15:08.000 --> 15:14.000
Something about features and tool chains that help with developing software.

15:14.000 --> 15:21.000
Maybe something is needed there also to, to, to from the supply chain angle point of view.

15:24.000 --> 15:27.000
Secure against malicious injection of code into LLVM binaries.

15:27.000 --> 15:35.000
So yes, making sure that a malicious actor wouldn't be able to like modify the LLVM binaries or the binaries and produce itself.

15:36.000 --> 15:47.000
One thing that I think is a really good, very recent change is having some open as an F scorecard for on, on, on the project currently,

15:47.000 --> 15:56.000
which is a list of recommendations on best practices for software in general, software projects in general from a supply chain security point of view.

15:56.000 --> 16:01.000
And currently LLVM has a score of 5.2, so probably there's room for improvement there too.

16:02.000 --> 16:07.000
Moving away from the Chromium tracker, I'm not going to say that I'd spend any more time on that.

16:08.000 --> 16:12.000
Finally, some thoughts on better communicating security issues.

16:12.000 --> 16:20.000
So most of the security issues that we received, maybe people think of CVE as that's the way to communicate to the whole world.

16:20.000 --> 16:22.000
There was a security issue here. This is what you do.

16:22.000 --> 16:30.000
What it turns out, most of the issues that we receive on the tool chain side, there are quite a few security issues that actually,

16:30.000 --> 16:34.000
most people would say you shouldn't create the CVE for that.

16:34.000 --> 16:41.000
For example, gaps in mitigations like that doesn't make one specific program immediately exploitable.

16:41.000 --> 16:46.000
And so quite a few people say you don't create CVEs for that.

16:46.000 --> 16:50.000
But at the same time, these mitigations are widely used and people rely on it.

16:50.000 --> 16:53.000
And so that should be a way to communicate to users of tool chains.

16:53.000 --> 16:58.000
We found something probably you want to know and you can do your own decision.

16:58.000 --> 17:01.000
Should I update my tool chain or is it okay for me?

17:04.000 --> 17:07.000
There's a few ideas on the slides on how to do that.

17:07.000 --> 17:14.000
Maybe just have a security label in the issue tracker or something different.

17:14.000 --> 17:19.000
But I guess I'm almost running out of time, so let me move on.

17:20.000 --> 17:32.000
A little bit on, can you participate as a general LLVM developer or LLVM user?

17:32.000 --> 17:40.000
Well, please, if you do think you find a particular issue and you do think there's a particular security angle to it,

17:40.000 --> 17:45.000
please do report it appropriately to the security group rather than its public bug reports.

17:46.000 --> 17:55.000
When needed, spread the word that LLVM does have a security group and a process to report security issues.

17:55.000 --> 18:00.000
We do every month have a public online sync up.

18:00.000 --> 18:08.000
So if you would like to talk with a number of people on security group or anything relevant, please have a look.

18:08.000 --> 18:11.000
There's also a link to the calendar, what the exact schedule is.

18:12.000 --> 18:20.000
And if you're a vendor contact or a researcher or you would like to participate here, please do reach out.

18:20.000 --> 18:23.000
We do welcome new additions to the group.

18:23.000 --> 18:30.000
So in summary, the LLVM security group has been operating pretty well, I would say over the past three years.

18:30.000 --> 18:35.000
If you analyze the issues, there's a number of areas for improvements left.

18:35.000 --> 18:46.000
And again, if you do encounter an issue that you think, hey, maybe there's a security issue to try to remember to report it appropriately.

18:46.000 --> 18:51.000
And with that, I thank you for listening and hopefully a few more minutes for questions.

18:51.000 --> 18:53.000
One minute and 20 seconds.

18:53.000 --> 18:54.000
Right.

18:55.000 --> 19:07.000
I think you really understand the idea with vulnerability in the tool, not being concerned with the security group.

19:07.000 --> 19:13.000
If the tool is part of the LLVM project, why is it not?

19:13.000 --> 19:14.000
All right.

19:14.000 --> 19:23.000
So the question is, I think, this line roughly.

19:23.000 --> 19:31.000
So how come if there is an issue in a tool, how come that's not considered a security issue?

19:31.000 --> 19:33.000
I think it boils down to that.

19:33.000 --> 19:40.000
In the very first class, in your stats, you said there were two issues that you didn't need to consider.

19:40.000 --> 19:41.000
All right.

19:41.000 --> 19:42.000
Okay.

19:42.000 --> 19:43.000
Let me go back to that.

19:43.000 --> 19:52.000
So we had two issues, one in the sanitizer, one in a client warning.

19:52.000 --> 19:56.000
So the classification is mine.

19:56.000 --> 20:01.000
So I just looked at exactly what happened on those issues.

20:01.000 --> 20:10.000
On those issues, the decision the group took was it's not necessary to keep this issue private.

20:10.000 --> 20:13.000
This issue can be made fully public.

20:13.000 --> 20:18.000
It means that fixes will be implemented more quickly, which is a good thing.

20:18.000 --> 20:27.000
On the other hand, do we think anyone would be immediately the target of an attacker because we made this information public?

20:27.000 --> 20:33.000
And for these two issues, we thought the chances of that are really, really, really low.

20:33.000 --> 20:40.000
And so the trade-off was it's better to make this issue public rather than to keep it private.

20:40.000 --> 20:45.000
Hopefully that makes sense.

20:45.000 --> 20:46.000
Yeah.

20:46.000 --> 20:50.000
Well, maybe we have time for one more question if there's one.

20:50.000 --> 20:58.000
I was curious, since you said that you have some vendors in the group, do you think that they will be open to giving bounties for some of these vulnerabilities if they are significant enough?

20:58.000 --> 21:02.000
Because I mean, it's a real bug in the code gen.

21:02.000 --> 21:06.000
It could be significant, especially if mitigations are on my list.

21:06.000 --> 21:12.000
So the question is, would vendors be open for a bug bounty program?

21:12.000 --> 21:13.000
Sure.

21:13.000 --> 21:23.000
All I can say is that so far I haven't seen anyone even suggesting the ID from the vendor's side, so who knows.

21:23.000 --> 21:25.000
Bounty fixing.

21:25.000 --> 21:26.000
Yeah.

21:26.000 --> 21:27.000
All right.

