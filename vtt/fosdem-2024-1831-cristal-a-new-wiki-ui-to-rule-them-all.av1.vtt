WEBVTT

00:00.000 --> 00:07.000
Okay, so thank you everyone for joining.

00:07.000 --> 00:11.000
We'll soon start the talk about crystal.

00:11.000 --> 00:15.000
One week you have to rule them all with Ludovic and Manuel.

00:15.000 --> 00:19.000
So I'm going to give you the mic.

00:19.000 --> 00:25.000
Okay, we're good.

00:25.000 --> 00:30.000
So hello everybody, welcome to this talk.

00:30.000 --> 00:35.000
So we're going to talk a bit about the new project we have at Xwiki.

00:35.000 --> 00:42.000
And so we're going to present the team first, who we are, the product vision,

00:42.000 --> 00:45.000
what vision we have for this product.

00:45.000 --> 00:50.000
And since it's a new product, it's not ready, so it's not something that's usable today.

00:50.000 --> 00:54.000
It's something that we're going to build with a lot of energy.

00:54.000 --> 00:58.000
And then we're going to show the design proposals that we have for the UI,

00:58.000 --> 01:02.000
which is from our belief very important, then the technical architecture,

01:02.000 --> 01:05.000
which is another part that we believe is very important.

01:05.000 --> 01:07.000
And then the current status and the roadmap.

01:07.000 --> 01:12.000
We call this project crystal because we want to both...

01:12.000 --> 01:15.000
We want that it's both beautiful on one side,

01:15.000 --> 01:18.000
but that it's also like the chemical structure,

01:18.000 --> 01:23.000
like it has a very nice and very well-done architecture.

01:23.000 --> 01:25.000
So first, who are we?

01:25.000 --> 01:31.000
So I'm Ludwig Dubost, the CEO and founder of Xwiki.

01:31.000 --> 01:34.000
We're going to talk about Xwiki just after.

01:34.000 --> 01:38.000
Manuel. Manuel is the tech lead of Crystal.

01:38.000 --> 01:40.000
He's going to talk to you about the architecture.

01:40.000 --> 01:47.000
The project has also Vincent Massaud, our CTO, Thiago, our designer on this project.

01:47.000 --> 01:53.000
And we have also the support of the whole Xwiki team on this project.

01:53.000 --> 01:58.000
So Xwiki SIS is a company that is established in 2004.

01:58.000 --> 02:00.000
For 20 years, we're working on Wikis.

02:00.000 --> 02:01.000
So it's quite a long time.

02:01.000 --> 02:05.000
We have friends in this endeavour of Wikis.

02:05.000 --> 02:07.000
We believe Wikis are very important.

02:07.000 --> 02:11.000
Hence our tagline knowledge is power.

02:11.000 --> 02:14.000
We are a self-funded company.

02:14.000 --> 02:18.000
And we have reached 4 million euros revenue.

02:18.000 --> 02:21.000
We're also building the CripPad software.

02:21.000 --> 02:24.000
We have done 50% growth in 2023.

02:24.000 --> 02:29.000
We have 60 employees in France, Romania, but also Germany and anywhere.

02:29.000 --> 02:33.000
As I said, we have two software, Xwiki, CripPad.

02:33.000 --> 02:35.000
We engage in digital sovereignty.

02:35.000 --> 02:37.000
We believe open source is really important for that.

02:37.000 --> 02:40.000
And we have a business model to really try to fund the software.

02:40.000 --> 02:45.000
We believe it's also very important to find a way to find open source software.

02:45.000 --> 02:49.000
Open source software cannot be done with...

02:49.000 --> 02:51.000
Microphone is not working.

02:51.000 --> 02:52.000
Is it okay now?

02:52.000 --> 02:53.000
Okay.

02:53.000 --> 02:54.000
So I have to be careful.

02:54.000 --> 02:56.000
It turns around.

02:56.000 --> 02:57.000
So the product vision.

02:57.000 --> 03:05.000
So first, there are lots of technological shifts that have happened in the latest years.

03:05.000 --> 03:09.000
For example, JavaScript is getting more and more mature.

03:09.000 --> 03:13.000
Like better development methodologies come in JavaScript.

03:13.000 --> 03:14.000
We come from the Java world.

03:14.000 --> 03:20.000
And so we're very keen to have great development methodology.

03:20.000 --> 03:27.000
And for a long time, JavaScript was like a bit in every direction.

03:27.000 --> 03:33.000
And now we see that it's also getting more organized with development tools.

03:33.000 --> 03:39.000
It has better frameworks also for developing JavaScript applications.

03:39.000 --> 03:41.000
Standards have evolved.

03:41.000 --> 03:46.000
You also have web components, JavaScript modules that are working much better.

03:46.000 --> 03:52.000
You have also technologies such as JSON-LD or SOLID that bring new capacity.

03:52.000 --> 03:54.000
There are also new paradigms.

03:54.000 --> 04:00.000
Paradigms, real time, is becoming something that any application should kind of have.

04:00.000 --> 04:04.000
We believe offline is important also.

04:04.000 --> 04:06.000
And that the technologies allow it.

04:06.000 --> 04:09.000
We also see a convergence in the field of wikis.

04:09.000 --> 04:15.000
Not only between wikis, so the features of wikis are getting similar.

04:15.000 --> 04:19.000
Like there's a better understanding of what the features of a wiki is.

04:19.000 --> 04:24.000
But also we see that there is a convergence between wikis, for example, or even drives.

04:24.000 --> 04:26.000
They're getting closer.

04:26.000 --> 04:34.000
So there are also questions about how they could be similar applications.

04:34.000 --> 04:38.000
For example, we have always had attachments in wikis.

04:38.000 --> 04:43.000
Maybe you could consider attachments or documents like their wiki documents.

04:43.000 --> 04:45.000
So there are convergence there in this area.

04:45.000 --> 04:49.000
We believe there is a model of future.

04:50.000 --> 04:56.000
So Jitsi's founder, Emil, in last year, he mentioned at the end of his 20 years Jitsi talk

04:56.000 --> 05:03.000
that in open source building on layers is going to be an approach that matters more.

05:03.000 --> 05:06.000
And it enables tremendous innovation.

05:06.000 --> 05:12.000
So if you look at Jitsi, you have a Jitsi library that makes the video conferencing module.

05:12.000 --> 05:14.000
And you have the Jitsi application.

05:14.000 --> 05:19.000
Like I really believe in this and open source can really reach all of its power

05:19.000 --> 05:22.000
if you can do a lot of reuse of anything.

05:22.000 --> 05:24.000
So you need lots of modularity.

05:24.000 --> 05:30.000
We had reached a lot of modularity in xwiki with everything's components in xwiki and Java.

05:30.000 --> 05:33.000
But now applications are way more client side.

05:33.000 --> 05:36.000
And so you need the same level of modularity on the client side.

05:36.000 --> 05:40.000
And we also need integrations between open source tools.

05:40.000 --> 05:46.000
There was a talk about OpenDesk in which we are partners where we need to bring open source applications together

05:46.000 --> 05:52.000
so that the whole suite of open source applications could replace Microsoft or proprietary applications.

05:52.000 --> 05:56.000
And we need to be able to integrate tools much tighter.

05:56.000 --> 05:59.000
And for this you need, again, the modularity.

05:59.000 --> 06:03.000
We also got an opportunity to fund that work.

06:03.000 --> 06:08.000
We have one with other companies as part of consortiums.

06:08.000 --> 06:15.000
We have one actually three projects, but two of these projects include the work of Crystal

06:15.000 --> 06:19.000
that we have included in the projects of building this new UI.

06:19.000 --> 06:23.000
And so we had this opportunity to fund it so we're able to get money for that.

06:23.000 --> 06:28.000
And so we have this big opportunity.

06:28.000 --> 06:32.000
We also have the opportunity to have the collaboration of partners.

06:32.000 --> 06:36.000
So actually the partners of this project, unfortunately they're not open source,

06:36.000 --> 06:43.000
would be also users of that Crystal module for their application storing data in their own system.

06:43.000 --> 06:47.000
We'll come to that when we talk about the vision for the product.

06:47.000 --> 06:49.000
So what's the vision of the product?

06:49.000 --> 06:56.000
It's actually one UI, one wiki UI, a modern one that brings all the features that you have in wikis today

06:56.000 --> 06:59.000
and that can support multiple back ends.

06:59.000 --> 07:05.000
So you would have an application that is web, desktop, mobile,

07:05.000 --> 07:10.000
and this application would be extensible, very modular based,

07:10.000 --> 07:15.000
but it would have a common data model behind that applications,

07:15.000 --> 07:22.000
which support offline, real time, and then it would be able to connect to different systems in terms of back ends.

07:22.000 --> 07:24.000
Of course it would be able to connect to Xwiki.

07:24.000 --> 07:30.000
We built Xwiki and we wanted to connect to Xwiki and support all the features that Xwiki has,

07:30.000 --> 07:33.000
even the most advanced one that we have in Xwiki.

07:33.000 --> 07:40.000
But we also would want it to do a basic wiki based on a file system that you store locally on your computer.

07:40.000 --> 07:47.000
We also would want it to work as a nice wiki with the next cloud back end using webdav or git.

07:47.000 --> 07:58.000
And we also would want it to support a wiki storing data in an end-to-end encrypted system such as CripPad that we build ourselves also at Xwiki.

07:58.000 --> 08:04.000
And this application, as a whole, where you can activate and deactivate modules,

08:04.000 --> 08:08.000
you could decide that these features you don't want them, you can change modules,

08:08.000 --> 08:12.000
you could replace modules in this modular application, would also be embeddable.

08:12.000 --> 08:18.000
That means you could put it in the next cloud server and serve it from the next cloud server.

08:18.000 --> 08:23.000
You can put it in the Xwiki server, serve it for the Xwiki server to access Xwiki data,

08:23.000 --> 08:26.000
or you could put it in any other application.

08:26.000 --> 08:28.000
That's the vision of the product, Crystal.

08:28.000 --> 08:37.000
The key concept is that we want it to be a slick UI with modern editor and slash comments, multiple back ends, as I mentioned.

08:37.000 --> 08:45.000
So, slick UI means it needs to be as good as what Notion does today in the world of wikis in terms of UIs,

08:45.000 --> 08:48.000
or the Notion competitors that we see coming in.

08:48.000 --> 08:54.000
So, we believe the Notion competitors are nice because they support a lot of nice UI features,

08:54.000 --> 08:58.000
but they don't support the modularity that Crystal will have.

08:58.000 --> 09:01.000
It's going to be offline in real time.

09:01.000 --> 09:06.000
It's going to have accessibility by default, support web components, and also be sustainable.

09:06.000 --> 09:12.000
There was a very nice talk before about sustainability of software, measuring the consumption of software.

09:12.000 --> 09:14.000
We want to try to do that also with Crystal.

09:14.000 --> 09:19.000
We want Crystal to be a UI that is built in a way that will consume less.

09:19.000 --> 09:23.000
It's going to be available as web, desktop, later mobile.

09:23.000 --> 09:27.000
It's going to be extensible and configurable, and it's going to be a strong editor.

09:27.000 --> 09:30.000
So, I'm not going to go into details of what a strong editor is.

09:30.000 --> 09:34.000
It's going to support markdown, but it's also going to support the Xwiki syntax,

09:34.000 --> 09:38.000
but it's going to be state-of-the-art UI.

09:38.000 --> 09:41.000
Lately in Xwiki, we implemented slash comments.

09:41.000 --> 09:46.000
It's going to have slash comments in Crystal too.

09:46.000 --> 09:50.000
It's going to also support structured data.

09:50.000 --> 09:56.000
That's one of the big advantages of Xwiki that our customers and users have loved in Xwiki compared to other wikis.

09:56.000 --> 10:00.000
We have a whole system around structured applications, structured data,

10:00.000 --> 10:03.000
and we're going to support that in Crystal.

10:03.000 --> 10:11.000
Some use cases, we wanted to be a UI for simple storage, markdown.

10:11.000 --> 10:13.000
So, it should be a simple wiki.

10:13.000 --> 10:19.000
The idea is that it can be a local note-taking app.

10:19.000 --> 10:25.000
You use as an offline with a storage that is local, and that would be really interesting.

10:25.000 --> 10:31.000
It's going to be a modernization for Xwiki because Xwiki has a UI that's quite old now.

10:31.000 --> 10:37.000
We have done a lot of things with this UI, but we wanted to be the modernization of the wiki UI in Xwiki.

10:37.000 --> 10:45.000
It's going to be embeddable, as I mentioned, and we wanted to be a wiki view on all your wikis

10:45.000 --> 10:52.000
so that as an individual user, you would have multiple wikis in your Crystal UI.

10:52.000 --> 10:57.000
You could even create a wiki of wikis, so you could create your own tree of pages,

10:57.000 --> 11:04.000
and you could be navigating different pages in different wikis that you have in the back end and locally, of course.

11:04.000 --> 11:11.000
It can be an end-to-end encrypted wiki for CripPad, which is a feature that we would love to have.

11:11.000 --> 11:17.000
So, we can summarize that as a new wiki UI to rule them all.

11:17.000 --> 11:20.000
The design proposal, I give it to Manuel.

11:20.000 --> 11:23.000
Is it working?

11:23.000 --> 11:31.000
We only share the results of work by Ciego, UX engineer, we hired a few months ago.

11:31.000 --> 11:38.000
Since we have some experience with Xwiki, we are able to part from a blank state,

11:38.000 --> 11:45.000
but using the experience we have already to redesign a more clean and modern UI for wiki.

11:45.000 --> 11:53.000
That's one example, but we have some documentation online where you can find other wireframes.

11:53.000 --> 12:02.000
Of course, everything is community-based, so you can come to the forum where we are openly discussing design ideas and contributions.

12:02.000 --> 12:10.000
One important aspect we want to work on is, since we want Crystal to be unbedaible,

12:10.000 --> 12:17.000
it can be with its own style. It needs to look like the application where it's integrated.

12:17.000 --> 12:22.000
What we want to do is, as a developer, when you design a part of Crystal,

12:22.000 --> 12:28.000
to design it with some abstract components, UI components,

12:28.000 --> 12:38.000
by configuration to be able to say, I want to use shoelace for the actual visualization

12:38.000 --> 12:46.000
without much code to say, OK, now, for this application, I want to use Vue.define on...

12:46.000 --> 12:52.000
to make it easy for the developers to switch from one design system to another.

12:52.000 --> 12:58.000
It can even be convenient, for instance, the French government has its own design system,

12:58.000 --> 13:02.000
so if you want to have some knowledge base for the French government,

13:02.000 --> 13:11.000
it should be by extension to define a new concrete design system and to use it for their own needs, for instance.

13:11.000 --> 13:17.000
We can imagine some other use cases, like in Nextcloud, they have their own set of components,

13:17.000 --> 13:24.000
and if you want to have Crystal inside Nextcloud, you want to have it look like Nextcloud

13:24.000 --> 13:29.000
and be seamlessly integrated inside the ecosystem.

13:29.000 --> 13:33.000
So, a few notes on our technical view for the future.

13:33.000 --> 13:40.000
Starting Crystal was a very good opportunity to be able to try new things,

13:40.000 --> 13:49.000
so I'm working for a few months into studying a lot of libraries that we can use for Crystal.

13:49.000 --> 13:54.000
That's a snapshot of things we have settled down for now.

13:54.000 --> 13:58.000
I went to the JavaScript room this morning,

13:58.000 --> 14:02.000
and now I have like dozens of new technologies to check.

14:02.000 --> 14:10.000
We have this page where all the choices we made are listed, and we maintain it over time.

14:10.000 --> 14:19.000
And so, in terms of architecture, it's starting easily with two main components,

14:19.000 --> 14:28.000
the web one on Electron, all the ones with Dash as the platform where the most work to do in the future

14:28.000 --> 14:33.000
because they are the most challenging for integration of Crystal inside XWiki

14:33.000 --> 14:43.000
because it's 20 years old project, so as you can expect, a lot of features to make us compatible with.

14:43.000 --> 14:48.000
Reach editing is very challenging.

14:48.000 --> 14:56.000
We need to choose a new technology for the editor which is compatible with offline editing with real-time editing,

14:56.000 --> 15:04.000
so that's a lot of work ahead, but we have plenty for our next roadmap.

15:04.000 --> 15:11.000
So, the key aspect we have in mind is that we want to preserve from what we already have in XWiki

15:11.000 --> 15:17.000
and that we deem as important its accessibility and sustainability.

15:17.000 --> 15:23.000
That comes with artifact size, of course, measuring performance,

15:23.000 --> 15:29.000
making the Crystal locally usable, modular with inversion of control,

15:29.000 --> 15:36.000
based on standard as much as we can, for instance JSON-LD web components,

15:36.000 --> 15:43.000
to keep having documentation for users, for developers,

15:43.000 --> 15:49.000
to have a broad idea of the artifacts we want to publish,

15:49.000 --> 15:58.000
so the abstract design system library for others to develop design systems on top of Crystal,

15:58.000 --> 16:03.000
a set of connectors to different sources, as we said,

16:03.000 --> 16:10.000
and a JavaScript syntax formula to have offline editing with a rich experience,

16:10.000 --> 16:15.000
a software development kit to be able to develop extensions,

16:15.000 --> 16:21.000
and a set of components we're considering web components in particular

16:21.000 --> 16:25.000
because that's independent from a particular framework,

16:25.000 --> 16:32.000
which I believe is better for the future, a long-term future of the project.

16:32.000 --> 16:38.000
So, on users, we have this electronic application for desktop not taking

16:38.000 --> 16:45.000
as a replacement for the XWiki front-end.

16:45.000 --> 16:47.000
So, I'll get back.

16:47.000 --> 16:53.000
And so, the tricky part now is what's the status and where are we today?

16:53.000 --> 16:59.000
So, the first thing is we have a prototype of the extensible architecture using IOC

16:59.000 --> 17:01.000
and the version of control.

17:01.000 --> 17:04.000
That's actually a very important part of the way we've designed the applications.

17:04.000 --> 17:09.000
So, people coming from the Java world understand what components in Java are

17:09.000 --> 17:14.000
and what inversion of control is, and this is actually something that is not used that much

17:14.000 --> 17:16.000
in the JavaScript world.

17:16.000 --> 17:20.000
It's used by frameworks, so ViewJS or AngularJS,

17:20.000 --> 17:23.000
they're frameworks that are doing inversion of control,

17:23.000 --> 17:27.000
but when it comes to JavaScript libraries, this is not something that is used that much.

17:27.000 --> 17:32.000
So, the key feature that is really important for the extensibility and modularity,

17:32.000 --> 17:38.000
if you want to be able to replace one piece of the system because you want to change the way it behaves,

17:38.000 --> 17:44.000
you need to be able to replace any module for which you have defined an API.

17:44.000 --> 17:47.000
And inversion of control is a key method to be able to do that.

17:47.000 --> 17:53.000
In the prototype we did, we've been able to load dynamically a module by configuration

17:53.000 --> 17:55.000
that is coming from the Internet.

17:55.000 --> 18:00.000
So, in the configuration that you want this module instead of the other module,

18:00.000 --> 18:07.000
and from a static build that has been built as a standard crystal delivery,

18:07.000 --> 18:11.000
you can add an extension that will replace one of the modules of the system.

18:11.000 --> 18:13.000
And this is key.

18:13.000 --> 18:17.000
We have designed the architecture, the basic architecture of plugins,

18:17.000 --> 18:19.000
skins, and user interface extension.

18:19.000 --> 18:23.000
In X-Riki there is a great feature that is called Skin and UIX.

18:23.000 --> 18:25.000
Skin is a way to replace the UI.

18:25.000 --> 18:29.000
UIX is a way to add an item somewhere in the UI.

18:29.000 --> 18:34.000
So, if you want to add a feature in the product by an extension, you need extension points.

18:34.000 --> 18:36.000
UIX and X-Riki is the way we do it.

18:36.000 --> 18:44.000
We have replicated these methods in the crystal prototype so that you can add things in the extension.

18:44.000 --> 18:47.000
And we'll also replicate the fact that you can replace the skin.

18:47.000 --> 18:51.000
So, in addition to what Manuel explained about the abstract design system,

18:51.000 --> 18:57.000
which allows to reimplement the basic view and the basic components that we're using in the whole application,

18:57.000 --> 19:01.000
we can also replace pieces of the user interface.

19:01.000 --> 19:05.000
We have implemented X-Riki and Markdown renderers.

19:05.000 --> 19:09.000
One difficulty was to bring a JavaScript renderer for X-Riki.

19:09.000 --> 19:14.000
If we want to be compatible with X-Riki, we want Markdown to be a first-class citizen in crystal

19:14.000 --> 19:18.000
because that's the standard today, but we also need to support our customers

19:18.000 --> 19:23.000
that are using the X-Riki syntax in with X-Riki.

19:23.000 --> 19:28.000
We've also done prototypes of client macros, rendering in ViewGS of a macro.

19:28.000 --> 19:30.000
So, new macros.

19:30.000 --> 19:32.000
We've done the choices of design system libraries.

19:32.000 --> 19:37.000
The first one we want to spend time on, Shule's Vutify.

19:37.000 --> 19:40.000
One thing we had in the previous slide that Manuel didn't say.

19:40.000 --> 19:43.000
Shule is one of our performance tests.

19:43.000 --> 19:48.000
Actually, twice as fast as Vutify, and Shule is a web component library.

19:48.000 --> 19:51.000
We were quite impressed by that.

19:51.000 --> 19:53.000
Vutify is a pure Vutify library.

19:53.000 --> 20:00.000
Shule is a cross-platform library of components like supporting React or Angular, etc.

20:00.000 --> 20:02.000
Really interesting work.

20:02.000 --> 20:03.000
We have done design work.

20:03.000 --> 20:05.000
We have a prototype UI for basic view.

20:05.000 --> 20:10.000
We have first test of the editor UI with Markdown and TipTap, and we have the project infrastructure.

20:10.000 --> 20:16.000
You can check the code at the link I gave, crystal on GitHub X-Riki contrib.

20:16.000 --> 20:22.000
Basically, what we want to achieve in 2024, we want the first version for basic wikis.

20:22.000 --> 20:29.000
You can browse your, you can actually take notes in Markdown with an electron system.

20:29.000 --> 20:31.000
You can access a git on the other side.

20:31.000 --> 20:36.000
You can access a basic X-Riki with not all the advanced features of X-Riki.

20:36.000 --> 20:40.000
Maybe about 50% of X-Riki's current features.

20:40.000 --> 20:46.000
By, during 2025, we will achieve 75% of X-Riki's feature, including structured data.

20:46.000 --> 20:50.000
We want to bundle it in X-Riki by 2026.

20:50.000 --> 20:52.000
We want to have also plugin repository.

20:52.000 --> 20:56.000
We'll probably have that earlier, but we want to start having more plugins.

20:56.000 --> 21:02.000
We want to also have done more plugin development and a Crip at release.

21:02.000 --> 21:06.000
We probably want it as a default UI for X-Riki.

21:06.000 --> 21:10.000
Also, if we have done our work properly.

21:10.000 --> 21:14.000
That's it. You can look at our website, crystalx-wiki.org.

21:14.000 --> 21:18.000
There is also very interesting information there for anybody that does a JavaScript application,

21:18.000 --> 21:20.000
an advanced application.

21:20.000 --> 21:23.000
We're not necessarily the biggest killer in JavaScript.

21:23.000 --> 21:30.000
We come from the Java world, as I said, but we have done a lot of studies of what are the good technologies,

21:30.000 --> 21:35.000
because we have a lot of experience about choosing libraries right.

21:35.000 --> 21:38.000
We're trying to really make tables.

21:38.000 --> 21:42.000
We have tables about libraries and so on, about technologies.

21:42.000 --> 21:45.000
Don't hesitate to look at this.

21:45.000 --> 21:47.000
X-Riki is also hiring.

21:47.000 --> 21:51.000
If you find this project interesting, you can also join.

21:51.000 --> 21:58.000
If you're interested in what X-Riki is about, I have a beautiful conference at 9am tomorrow.

21:58.000 --> 22:02.000
If you like to wake up early in K, and we also have a party,

22:02.000 --> 22:08.000
you can scan the QR code if you want to join our party tonight.

22:08.000 --> 22:10.000
There's no room left?

22:10.000 --> 22:14.000
You can still try. You can still try. It doesn't matter.

22:14.000 --> 22:17.000
There's a risk. Thank you. Questions?

22:17.000 --> 22:23.000
APPLAUSE

22:23.000 --> 22:25.000
Any questions?

22:25.000 --> 22:32.000
Do you have an example of an extension you're imagining or planning for?

22:32.000 --> 22:34.000
First, any macros are extensions.

22:34.000 --> 22:37.000
If you want to add macros in your wiki, it's going to be extensions.

22:37.000 --> 22:41.000
If you look at X-Riki, we have 650 extensions.

22:41.000 --> 22:47.000
We have at least 50 high-quality extensions that we're not bundling with X-Riki.

22:47.000 --> 22:49.000
Lots of them are macros.

22:49.000 --> 22:53.000
Macros can be extensions, but it can be just adding a feature.

22:53.000 --> 22:55.000
Structured data would be an extension.

22:55.000 --> 23:01.000
We would not bundle it in the basic one, in the basic crystal,

23:01.000 --> 23:07.000
if you are not using crystal as a back end, because we wouldn't support anything.

23:07.000 --> 23:09.000
Everything is going to be X-Riki supports.

23:09.000 --> 23:14.000
For us, anything will be an extension.

23:14.000 --> 23:17.000
The difference is some will be bundled and some won't be bundled,

23:17.000 --> 23:19.000
but storage system is an extension.

23:19.000 --> 23:22.000
Access to Tiki can be an extension.

23:22.000 --> 23:24.000
Access to GitHub is one.

23:24.000 --> 23:30.000
Access to Git, access to file system, they are all extensions.

23:30.000 --> 23:35.000
Thank you. Another question?

23:35.000 --> 23:37.000
No? No question?

23:37.000 --> 23:40.000
OK. Thank you very much.

23:40.000 --> 23:45.000
Last second.

23:45.000 --> 23:49.000
Do you have a specific library for JSON-LD? What do you want to use?

23:49.000 --> 23:52.000
Can I repeat the question?

23:52.000 --> 23:56.000
Is there a specific library for JSON-LD that we want to use?

23:56.000 --> 24:04.000
First, when we look at storage, there are two ways to do the abstract storage.

24:04.000 --> 24:11.000
One way is to hope that the server application will support JSON-LD by default.

24:11.000 --> 24:17.000
We'll actually do that for X-Riki to try to make X-Riki give you JSON-LD by default.

24:17.000 --> 24:23.000
We believe that will be better because we'll do conversions of structured data of X-Riki and JSON-LD.

24:23.000 --> 24:25.000
That will be very interesting.

24:25.000 --> 24:31.000
In the Java world, we have found a Java JSON-LD library that is widely available.

24:31.000 --> 24:35.000
On the JavaScript world, at this point, we didn't feel we needed the library.

24:35.000 --> 24:37.000
That's just JSON that we can manipulate.

24:37.000 --> 24:47.000
At this point, we haven't seen the need for a library because we're just storing the JSON-LD data as offline right away.

24:47.000 --> 24:49.000
Sorry, I forgot to say.

24:49.000 --> 24:54.000
The second way is to do the conversion to JSON-LD on the client.

24:54.000 --> 25:00.000
That means the storage module will use the standard API of the backend

25:00.000 --> 25:07.000
and then transforms things to JSON-LD to give it to the other crystal modules that will understand JSON-LD.

25:07.000 --> 25:18.000
The conversion would be on the client and then you store as offline the resulting of that conversion so that you can do anything in the application.

25:18.000 --> 25:23.000
We didn't see the need yet, but we're not there yet.

25:23.000 --> 25:33.000
We did some tests of how X-Riki.NET to JSON-LD would display when it has structured data in a page.

25:33.000 --> 25:39.000
We've been able to replicate things we do in X-Riki on the client side in a similar way.

25:39.000 --> 25:41.000
We're not there yet.

25:41.000 --> 25:49.000
For now, we're focusing on the editing experience, which is the most important part for the beginning.

25:49.000 --> 25:51.000
Thank you.

25:51.000 --> 25:53.000
Thank you very much.

25:53.000 --> 25:55.000
Another question.

25:55.000 --> 25:57.000
Sorry, we'll take it outside.

