WEBVTT

00:00.000 --> 00:16.040
Okay, thank you. Good morning, good afternoon. Thank you for having me. My name is Luca.

00:16.040 --> 00:21.280
By day I work as a software engineer in the Linux systems group in Microsoft in the Azure

00:21.280 --> 00:26.800
organization where I manage the Azure Linux OS that runs on the infrastructure there.

00:26.800 --> 00:30.360
By night I'm involved in various open source projects. I'm an assistant demantainer,

00:30.360 --> 00:34.720
a debian developer, a DPDK LTS maintainer, a bunch of other stuff that I consistently

00:34.720 --> 00:39.920
forget about. Now, if you read the title of this talk, you might think, hang on, was that

00:39.920 --> 00:44.920
really intended to be that provocative? And the answer is yes, yes it was. This is my

00:44.920 --> 00:50.840
yearly talk to make new friends. But of course I tried to mean it in a positive way. So I

00:50.840 --> 00:55.880
want to provoke some thoughts and discussions, see what we can do about this that I consider

00:55.960 --> 01:00.880
a problem and that I think we are in a good place to start fixing. But first, even though

01:00.880 --> 01:06.240
everybody lives and breathes secure boot, some background, if you're not aware, if you work

01:06.240 --> 01:10.320
on bootloader, so boot system, you already know all of this, but just one slide. So in

01:10.320 --> 01:16.480
the beginning we had BIOS, everything was great. The security model was low as if. In

01:16.480 --> 01:21.600
the 2000s we got Ufi. So Intel, Microsoft, a bunch of other people got together and created

01:21.640 --> 01:27.000
this new protocol for firmers. And it actually has a security model, which is nice. Now,

01:27.000 --> 01:31.120
it gets a lot of mud thrown at it. Every time there's a bug in the news like the logo face

01:31.120 --> 01:36.040
stuff, people are going, oh, why do we need secure boot? It's always broken anyway. Well,

01:36.040 --> 01:39.920
having a security model doesn't mean that everything is perfect or never breaks. It's

01:39.920 --> 01:45.240
software. It runs on computers. Of course it breaks. The point is that we have a process

01:45.240 --> 01:49.040
to deal with it and we have a natural security model to follow. So the way it works is that

01:49.080 --> 01:52.960
there's a chain of trust that starts in hardware. So for example, Intel boot guard. So the

01:52.960 --> 01:58.160
hardware verifies the trust in the firmware. The firmware verifies the bootloader, the

01:58.160 --> 02:03.440
bootloader verifies the kernel. The set of keys and certificates used are stored in the

02:03.440 --> 02:07.200
firmware. I won't go into details in that because it's not too important for this. This

02:07.200 --> 02:13.840
is generally called secure boot in a nutshell. Now, this in the 2010s, thanks to the work

02:13.840 --> 02:20.160
of a lot of people, like the government and many others, Linux joined the party finally.

02:20.160 --> 02:25.800
We were shut out of that ecosystem for a while and by default, distribution couldn't boot

02:25.800 --> 02:29.600
on new hardware. You had to go and fiddle with the buyers on this secure boot. This

02:29.600 --> 02:35.520
changed in the 2010s. So we have Shim, Grab 2 and the kernel lockdown stack and distribution

02:35.520 --> 02:41.120
can work again by default. They are signed with the U-featured party CA. You get your

02:41.200 --> 02:47.120
Shim signed by Microsoft and then you sign your second stage bootloader like Grab or

02:47.120 --> 02:53.600
System Eboot with your distribution key. And then we have this patch set in the kernel

02:54.160 --> 02:58.640
that was called secure level in the beginning when it was out of three. Then it was merged as

02:58.640 --> 03:05.040
the lockdown LSM later that basically tries to protect the kernel and the firmware and the

03:05.040 --> 03:12.480
hardware before the Xeboot service is called. Xeboot services is an API call in the U-fe

03:12.480 --> 03:16.800
interface and when that happens, a bunch of things get locked down. You cannot change secure

03:16.800 --> 03:21.360
viable anymore. The firmware goes away and a bunch of other things. It's very important to protect

03:21.360 --> 03:26.480
the system before that. So this is what this ecosystem tries to protect. Secure level also

03:26.480 --> 03:33.360
tries or lockdown tries to separate UAD0 from ring zero. So the theory is if you are root,

03:33.440 --> 03:38.800
you shouldn't be able to change the hardware or the kernel memory outside of what should be allowed.

03:38.800 --> 03:44.960
So this is not perfect. It went a very long way and it fixes a lot of problems. It's not perfect.

03:44.960 --> 03:50.560
Of course, it's softer. It's never perfect. But yes, the idea is we have this boundary between UAD0

03:50.560 --> 03:57.120
and ring zero. And this has been working for 10 years or so. It's great. We moved, we have no

03:57.120 --> 04:02.480
trust whatsoever to having trust until the point we start the user space.

04:03.600 --> 04:09.520
And that's great. But other operating systems are way far ahead. My course is way far ahead.

04:09.520 --> 04:15.920
Android is way far ahead. Windows is way far ahead. We do nothing for user space so far. But in the

04:15.920 --> 04:20.800
past couple of years, we've been talking a lot about how to fix this and things are starting to

04:20.800 --> 04:25.600
happen. So this is the next level. We'll have a unified kernel image. And by the way,

04:26.160 --> 04:30.000
Renard had a talk this morning about UKIs and I think he might have mentioned before as well

04:30.080 --> 04:33.760
in the previous talk. I could not get him because the room was full. But we've been talking about

04:33.760 --> 04:38.240
this stuff for a while and there were at least three or four talks talking about these things. So

04:38.240 --> 04:44.560
you might have already heard about these concepts and we'll repeat them again in a different context

04:44.560 --> 04:51.760
here. So what we are trying to do is extend that level of trust and security and authentication

04:51.760 --> 04:57.680
to user space. For example, the E30 right now on any generous distribution just sits on the

04:57.680 --> 05:04.320
boot partition on the ESP and anybody can offline or even online that has write access that can

05:04.320 --> 05:09.680
inject anything. And they're just built locally. They're unverified. You add a backdoor to the

05:09.680 --> 05:14.400
prompt that asks for your locks encryption password and you wouldn't have any idea because it's

05:14.400 --> 05:20.000
completely unchecked and untrusted and verified. Unified kernel images try to fix this. The unit

05:20.320 --> 05:28.320
RD is part of the PE binary that gets signed so that the shim or the firmware verifies it before

05:28.320 --> 05:34.240
loading so that we can extend the chain of trust a little bit further into user space. At least the

05:34.240 --> 05:40.720
first part of user space, the unit RD. But that's not enough. We want to go further because once you

05:40.720 --> 05:46.400
go to your root file system for the unit RD, well, that also is unverified. Now, Wacuzov is working on

05:46.400 --> 05:52.480
the IP, Intervity Policy Enforcement or Execution or something like that. It's a new LSM that basically

05:52.480 --> 06:00.240
allows you to write a policy that says any binary that runs on my system in user space must come

06:00.240 --> 06:07.520
from a DM Verity volume that is signed by a key trusted by the kernel. DM Verity is a

06:08.080 --> 06:15.520
mercury system to do online verification of block devices as they are loaded and opened.

06:15.520 --> 06:21.360
It's a very, very nice interface that has been available in the kernel for 10 years or so. And

06:21.360 --> 06:27.920
with IP, we can use this to move the chain of trust into the full user space. So now all the code

06:27.920 --> 06:35.120
that runs is fully verified with a chain of trust that goes back to the hardware. With discover of

06:35.120 --> 06:41.520
these images, we can also protect further payloads, so containers, end-spon containers, portable

06:41.520 --> 06:46.320
services and other things that are attached to the OS. If you're running a read-only system, you need

06:46.320 --> 06:51.440
some way to attach new applications there, of course. And with DDIs, you can further extend the chain

06:51.440 --> 06:58.320
of trust again in the same way for those payloads as well. So we put all of this together when we

06:58.320 --> 07:06.240
have the shim and lockdown stuff for the boot process and then UKIs for the InterD, IP and

07:06.240 --> 07:14.480
DDIs for user space. We have a very nice system that chains back to the hardware and implements

07:14.480 --> 07:22.480
a full root of trust. And that's very nice, except for the kernel command line. This is just stored

07:22.480 --> 07:29.680
as a plain text file in system debut type 1 BLS. So it's a type of boot images supported by system

07:29.680 --> 07:34.640
debut or in grab as well. It's just plain text file. If you have root access, you can write whatever

07:34.640 --> 07:39.680
you want there. If you don't, it checks, that just gets out there and run. It also can be edited on

07:39.680 --> 07:45.360
the fly if you have access to the keyboard, which probably is fine on a laptop, because if you have

07:45.360 --> 07:49.360
access to the laptop, you're probably the owner. But if you're on a server, owner of VM, or a

07:49.360 --> 07:58.080
confidential VM, that's kind of bad, especially for the Taster computing case, because the serial

07:58.080 --> 08:03.600
console is just a device owned by the supervisor, which is outside your PCB. So why is this a problem?

08:04.480 --> 08:09.280
Because it has become kind of a kitchen sink. Just for the kernel alone, there's that document

08:09.280 --> 08:14.880
there, which is very nice and documents a lot of options available. It's 7,000 lines long,

08:14.880 --> 08:19.920
and itself says this is not a complete list. So we don't even have one list that says, okay,

08:19.920 --> 08:26.160
this is everything you can do with this untrusted, unverified interface for your machine,

08:26.160 --> 08:32.320
which is not ideal. Also, I checked, I'm not a kernel developer, but I checked as far as I can

08:32.320 --> 08:38.240
see, the very first parsing of the kernel command line happens in the kernel's EFI stub

08:39.040 --> 08:44.400
before Exiboot services. Remember I said before Exiboot services is a very important point

08:44.400 --> 08:48.800
in the boot process that before that you want to protect your system. You'll be really careful

08:48.800 --> 08:54.000
about what happens and what is allowed to run and execute and change the flow of execution.

08:55.680 --> 09:00.240
Now, you can use the kernel command line to configure the kernel to do things like

09:00.240 --> 09:05.840
disable a Cerenox, disable IP. I talked about a moment before about IP. You can disable all

09:05.840 --> 09:11.200
these security components using the kernel command line. And it's not just the kernel that you

09:11.200 --> 09:16.400
configure. It's called the kernel command line, but it's just a command line. You configure everything

09:16.400 --> 09:21.280
and anything in user space. Everybody sees it by default. It's approximately aligned. It's there.

09:21.280 --> 09:26.160
Everybody has their own parsers. The custom written to parse it and read it, and it's used for

09:26.160 --> 09:31.360
absolutely everything. And again, this is bad for confidential computing. The Cereconsole is

09:31.360 --> 09:39.280
outside of the TCP. So this is a difficult problem. Now, of course, there are historical reasons for

09:39.280 --> 09:44.560
this. It's super convenient. It's amazing. You have a problem. You just press E to edit a debug,

09:44.560 --> 09:49.600
and then you can get some debug logs if your machine doesn't boot. That's amazing. That is super useful.

09:50.480 --> 09:55.520
But I think we're getting close to the point where we need to make decisions and whether we

09:55.520 --> 10:01.200
want to allow this always or in some cases or disable it completely in some other cases,

10:02.320 --> 10:08.480
because it is the last bit missing, as far as I can tell, in the security story of the boot

10:08.480 --> 10:17.360
process on Linux. So for system reboot, we have decided to stop allowing editing the command line

10:17.360 --> 10:24.640
and supplying untrusted sources of input to it when you boot UKIs. You cannot do that. And we made

10:24.640 --> 10:30.560
a lot of friends with that decision, I can tell you. So the problem is, of course, the flexibility

10:30.560 --> 10:37.760
is gone. Can we get it back? What are the use cases? So one of the main ones, the root FS auto

10:37.760 --> 10:44.880
discovery. In this case, you would do root equal, devs, da1, or whatever. Now you probably may be

10:44.880 --> 10:50.080
using a UGID to identify the disk so it doesn't switch partition. You don't lose booting.

10:51.040 --> 10:54.720
We have something called the discover partition specification system that is supported by our

10:54.720 --> 11:01.600
tools. So basically, the very quick resystem reboot tells the intrad where your root is. It

11:01.600 --> 11:06.880
automatically finds it based on UID set on the partition. So this use case is very well covered

11:06.880 --> 11:12.880
now. I already mentioned UKI, that we mentioned very frequently as FOS, so I go very quickly through

11:12.880 --> 11:19.440
this. You can add a command line to the UKI when you build it. It's very easy with UQFI,

11:19.440 --> 11:26.160
our tool to build UKIs. But of course, it's one entry. It's a fixed entry. The UKI is meant to be

11:26.160 --> 11:31.760
shipped by the OS vendor, and that is very not flexible, of course, because the OS vendor doesn't

11:31.760 --> 11:39.440
know what you need to have on your OS to make it work. Now we have a future plan. We'll get to this

11:39.440 --> 11:44.080
this year, but you'll be able to actually specify multiple options. For example, your OS vendor

11:44.080 --> 11:49.120
will be able to say, I have my kernel command line, which is the default one, and then one that has

11:49.120 --> 11:54.080
debug, and another one that has factory reset, so that you have multiple options. And in your

11:54.080 --> 11:59.440
boot menu from system reboot, you can select a non-default one if so you wish. This is very

11:59.440 --> 12:03.920
hard to list, and I get Leonard to implement that very soon, but he hasn't done that yet.

12:04.720 --> 12:11.120
The other thing we have, so system is tab is the small UFI stub that is embedded in the UKI,

12:11.120 --> 12:18.320
the first bit that gets loaded. So we added this thing this year called addons. Again, they can

12:18.320 --> 12:24.000
be built by UKFI, and what they are is they're just PE binaries, so they are signed, so the firmware

12:24.000 --> 12:28.800
verifies them using the secure boot certificates before loading them, but they don't have code.

12:28.800 --> 12:33.120
There's just a kernel command line configuration. So you can use this, and system is tab, we

12:33.120 --> 12:38.800
automatically load them if it finds them. Again, through the firmware, so verified and signed and

12:38.800 --> 12:44.560
trusted, and then you can use that for extending the kernel command line that was in the UKI,

12:44.560 --> 12:50.800
and that is fixed. This is really meant for platform owners. So for example, if you want to set crash

12:50.800 --> 12:56.640
kernel equals some amount of memory, that's probably the same across your whole fleet, at least for

12:56.640 --> 13:02.640
the same devices, so you can use the same addon everywhere to set these cases. Again, we want to

13:02.960 --> 13:09.840
add selection to, right now every addon will be used. We want to add a menu to let you select

13:09.840 --> 13:14.400
which one you want a boot in case that is needed, but we don't have that yet. It's again on the

13:14.400 --> 13:20.720
to-do list. Next thing we have extended extension images. This can be used to extend the IninterD.

13:20.720 --> 13:26.960
So you can drop them in the ESP, they are the invertees, so again they get verified by the kernel,

13:26.960 --> 13:35.920
and given the IninterD 2 is fixed, we can use this to extend the IninterD with additional code

13:35.920 --> 13:41.280
or configuration. It can be used for both configuration, overlay none ETC or code overlay none

13:41.280 --> 13:46.960
USR. Again, we don't have any way to select which one you want. We just pick every one,

13:46.960 --> 13:52.720
every extension image that we find in the ESP. And also you can embed them in the IninterD if you

13:52.720 --> 13:56.800
want and extend the router fast with this, or download them at running time to extend the

13:56.800 --> 14:06.000
router fast when it's read only. Finally, this is my favorite one, and I think this should give us

14:06.000 --> 14:10.880
enough flexibility that we can start to talk about actually disabling this stuff by default.

14:11.680 --> 14:16.960
So credentials are a very simple concept that we added to system this some years ago. They are just

14:17.600 --> 14:25.360
key value pairs. The key difference is that they are scoped by default. They are only visible by

14:25.360 --> 14:32.000
user space and only by services they opt into them by key. So in your service you say load

14:32.000 --> 14:38.080
credential key. If you have a credential for you name it there and it will be loaded. Everybody else

14:38.080 --> 14:43.840
will not see the content because they can be encrypted. And we are, I think we have that already,

14:43.920 --> 14:49.280
if not it will be ready very soon. You can encrypt them ahead of time if you know the TPM's

14:50.160 --> 14:54.480
public certificate for the SRK. You can encrypt them ahead of time for any machine.

14:55.440 --> 15:01.360
And they are decrypted only when the service starts and reads them. And only in the namespace

15:01.360 --> 15:07.680
view of the service. So they are fully isolated. Nothing else outside of it can see the credential.

15:07.680 --> 15:16.080
And you can drop them in the SP again in a per image or global directories. Again we don't have

15:16.080 --> 15:23.360
selection. Everything that is found in this location is picked up. And we are starting to add

15:23.360 --> 15:29.600
support to every system component and outside of it to use credentials to configure things that used

15:29.600 --> 15:35.360
to be configured with the Cora command line. So your networking can be configured credential. Your

15:35.360 --> 15:43.280
users, your autologin, your root password and a bunch of other things can all be, which you need to

15:43.280 --> 15:49.040
start. Like literally hundreds of things can be configured using credentials. I have a pull request

15:49.040 --> 15:55.760
open. Hopefully, as soon as I figure out the TPM measurement story, but we will also allow you to

15:56.640 --> 16:03.920
create new credentials from the boot menu. Like when you have a system boot with type one or

16:04.000 --> 16:08.720
grab two, you can edit the Cora command line. You'll be able to on the boot menu to just type

16:08.720 --> 16:14.160
credential and then a name and then a value. It will be passed to by system D and added to the

16:14.160 --> 16:20.960
interface so that it can be used. So I think this is very powerful. It's something that should give us

16:20.960 --> 16:27.120
all the flexibility, most of the flexibility that we need. Maybe. Is that enough? We have GPTO to

16:27.120 --> 16:33.120
discover for your root for a system. UKIs, add-ons, extension images, credential. Is this enough to

16:33.200 --> 16:40.240
cover all the use cases that we need in the 90% or maybe 95%? Of course, there will also be a case

16:40.240 --> 16:45.280
where you have to go put your hands on a machine that is completely broken. What you do in the case

16:45.280 --> 16:50.320
is you disable security. You break glass. You take your node offline. If it's a server, you take

16:50.320 --> 16:54.800
production workers away, you debug it. You disable security and then you can do whatever you want.

16:54.800 --> 17:00.640
Let's say 1% of the cases. Are we there yet for the 95%? That is an open question. I hope we can

17:00.640 --> 17:07.680
have some discussions about this. We also have a Secure Boot 2.0 comment. We are starting to think

17:07.680 --> 17:14.480
about it. Should this say something about what is allowed or not allowed to do to the kernel before

17:14.480 --> 17:19.920
execute services? It's kind of an important topic. Should it be a specification or should it not?

17:21.040 --> 17:25.920
Now, as reviewers and maintainers of your space components, I think it is time that we start to

17:25.920 --> 17:30.960
say, hey, if you're adding a new option via the kernel command line for my user space program,

17:30.960 --> 17:36.080
please at least also add a credential to it so that we can use both at the very least.

17:36.720 --> 17:42.640
And is this a full term? Most likely, but we still try because we are trying to push the envelope a

17:42.640 --> 17:48.560
bit forward every time and hopefully we'll get somewhere. So I think that's it and we have

17:48.560 --> 17:56.640
three minutes for questions. Oh, thank you. I was fast. Questions?

18:00.320 --> 18:08.320
Please. So you said about selecting crude partition, there was this discoverable

18:08.880 --> 18:15.360
partition specification. How you handle multiple installations of the same distribution like

18:16.080 --> 18:22.080
free fedora installations on the same disk? So the way this works is that system disk...

18:22.080 --> 18:26.400
Sorry, repeat the question for the microphone. If you have multiple partitions, multiple

18:26.400 --> 18:30.960
distributions, and start at the same time, how do you find out automatically what their

18:30.960 --> 18:37.600
disk is? The basic stuff is that the way system deboot system disk actually finds it is that

18:38.400 --> 18:47.520
it tells the initardivia EFI runtime variable which disk the ESP that was used to find the

18:47.520 --> 18:57.200
system deboot or the UKI was on. So you get the root of the disk. And then the auto generator there

18:57.200 --> 19:00.880
takes the disk and only look at that. So if you are installing with multiple disks,

19:00.880 --> 19:07.760
then we select the right disk like that. If you have multiple root partitions on the same disk

19:07.760 --> 19:12.560
as well, then I have no idea how we do that. I think we recommend to use different volumes for

19:12.560 --> 19:16.960
that. I think there's some way to do it. I don't remember to be honest. I need to look at the generator.

19:20.400 --> 19:25.520
There you go. So use a different UKI for the different root of FES basically.

19:25.760 --> 19:32.320
Yeah. Or again, with the credentials, we support credentials then for the auto generator yet?

19:33.520 --> 19:37.760
So we should add that. So that's probably a good way we could configure with the credential. But

19:37.760 --> 19:43.040
this is made so that by default you find the right thing for the simplest case. And then of

19:43.040 --> 19:47.360
course you need configuration for the complex one. If you use the same disk for multiple root

19:47.360 --> 19:51.600
file systems, well then you need to tell which one to pick. And that's one way. And I think we

19:52.320 --> 19:56.000
it is configurable and we should have credentials support for that. So you drop in a credential

19:56.000 --> 19:58.960
and then you decide which one to use. Yes. But it's a good question.

20:08.240 --> 20:13.120
That's a BTFS question. How to deal with starting from difference of volume on

20:13.120 --> 20:18.480
butterfests? I have no clue. I don't use butterfests, but the meta people here do. Do you have any

20:18.560 --> 20:28.480
other? I don't remember. Right. So yeah, it's not supported right now in the specification, but

20:29.360 --> 20:39.040
there was a buzzer, I think. Patches welcome. As usual. Yes. Yes. Anything else? Please.

20:39.120 --> 20:53.440
So the question was, can we use the auto generator when we create the UKI? The answer is yes,

20:53.440 --> 20:57.840
because then you would use the kind of command line. But if you are generating UKIs locally,

20:57.840 --> 21:03.200
our idea is that the UKI is generated on a server somewhere by your vendor. So I wouldn't work in

21:03.200 --> 21:08.080
that case. You could create a credential when you install it, for example, to tell it actually going

21:08.080 --> 21:14.640
and figure it out from that idea. But yeah, if we do support building UKIs locally, we have

21:14.640 --> 21:18.800
kernel installed plugins for that. It does work. And yes, you could do it that way.

21:21.440 --> 21:27.440
Yes. Yes. That could work if you're building locally. Yes. Sorry, that was according to the

21:27.440 --> 21:32.240
UUID in the UKI itself. And again, yes, it can work if you're building it locally.

21:32.480 --> 21:36.160
Yes. Anything else? Yes.

21:45.920 --> 21:53.600
And no, it is not a workaround for broken EFI variables. We added this so that we could configure

21:54.240 --> 22:00.000
autologene in VMs. I think that was the first time we added this back then. But this is a way to,

22:00.000 --> 22:07.360
again, the main use case was to be able to have secrets that are encrypted against the TPM

22:07.360 --> 22:13.360
and are not visible by default. So the services don't have to implement encrypted and decrypting

22:13.360 --> 22:17.200
all the stuff because that is hairy, especially against the TPM. That was the main use case,

22:17.200 --> 22:24.480
to have this as sealed stuff that is only visible by the service in its main space only when it

22:24.480 --> 22:31.760
runs. That was the main use case because normally a lot of times you configure secrets by environment

22:31.760 --> 22:36.960
variables and things like that. And of course, that is bad because environment variables are

22:36.960 --> 22:41.680
inherited now on the process tree. And you don't want your secrets to leak down to all your child

22:41.680 --> 22:47.360
processes. So this is one of the reasons we added the credential concept. Yes. So another question

22:47.440 --> 22:57.840
for credentials. What is the scope of credentials you load from this ESP? Is it the whole EUNITRD

22:57.840 --> 23:05.760
you can see it or some? The worry, so again, they are obtained. So sorry, yes. What is the scope

23:05.760 --> 23:13.520
of credentials loaded from the ESP? Does the whole EUNITRD see them? Yes, if they obtain. So your

23:13.600 --> 23:18.400
EUNITRD is trusted and verified and signed. So you build a configuration, you say service,

23:18.400 --> 23:25.200
full and bar can load this credential. Service, ABC, don't. So only full and bar that have opted

23:25.200 --> 23:31.040
in will see that and it will be decrypted for them. But yes, anything in the EUNITRD can obtain and

23:31.680 --> 23:36.320
I think we transition them across as well to the full OS. So they will be available also for

23:36.320 --> 23:39.840
services running from the after EUNITRD to full OS transition.

23:39.840 --> 23:44.000
Yes, credentials are awesome. You should check them out.

23:44.000 --> 23:48.480
They all, by the way, the slides are online and all these things are links to the actual

23:48.480 --> 23:52.960
documentation. Anything else? I think we have two minutes.

23:53.600 --> 23:59.600
I have a pretty dumb question, but let's say I want to put an RO on the kernel

23:59.600 --> 24:06.560
and online. I do that with the prediction. No, because that is for the, depends. Is that for

24:06.560 --> 24:13.040
the kernel or, oh, sorry, sorry. If you want, if you want to put RO on the kernel command line,

24:13.040 --> 24:17.680
would you do that on using a credential? Depends who's reading that. Is that for the kernel or

24:17.680 --> 24:22.240
is that for a user space in EUNITRD setting up your root file system? It depends on the case.

24:22.480 --> 24:26.000
If it is for your kernel, well, probably you want that in the UKI itself,

24:26.640 --> 24:32.160
because it's something you want your image to run in that configuration state, so you put that in

24:32.160 --> 24:38.320
the UKI itself. If you want that to only for certain cases, then maybe you can use addons

24:38.320 --> 24:43.200
and only deploy that on the machines that use the same image, but with a different configuration.

24:43.200 --> 24:47.600
So the answer, yes, it depends. There's many ways to do that and depends who's reading it and what

24:47.600 --> 24:53.120
the use case is and if you want that to be the default or the non-default on whatever else.

24:54.240 --> 24:58.000
I think we have, okay. Thank you.

