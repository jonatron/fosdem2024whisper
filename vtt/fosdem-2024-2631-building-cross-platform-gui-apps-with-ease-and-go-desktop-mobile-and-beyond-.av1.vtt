WEBVTT

00:00.000 --> 00:11.920
Thanks very much everybody for coming here to the graphics room to listen to another

00:11.920 --> 00:17.040
talk about building native compiled applications that are going to work everywhere. I had the

00:17.040 --> 00:21.040
title of the slide up and realised it didn't actually say go on the title slide so I just

00:21.040 --> 00:26.000
wanted to get that out there right away. It's very exciting to be here in the graphics dev

00:26.000 --> 00:32.800
room and to be presenting in the same place that fantastic people over the last decades

00:32.800 --> 00:38.520
have shown great new features in KD and Nome and fantastic discussions around all of that

00:38.520 --> 00:43.120
and hopefully I could bring something new and interesting to the room as well. Just out

00:43.120 --> 00:48.600
of interest to get this right I recognise some faces from the Go Dev room yesterday so maybe

00:48.600 --> 00:56.280
a show of hands if people have programmed Go at all. Wow, okay cool probably unusual

00:56.280 --> 01:01.640
for this room and anybody then that is a C developer just in case I need to go back to

01:01.640 --> 01:08.480
some common ground. Right, okay cool well thanks very much. So just a little bit about

01:08.480 --> 01:13.960
myself. Hi my name is Andrew it's really nice to meet you all. I am a software engineer

01:14.000 --> 01:21.520
have been for 20 years I think now, I stopped counting. I work a lot in startups either my

01:21.520 --> 01:27.400
own or other people's companies solving interesting technical and personal challenges, building

01:27.400 --> 01:32.480
teams all that kind of stuff and I've written some books gone on a couple of podcasts on

01:32.480 --> 01:38.400
the topic of building applications like the ones I'm going to show you today. I have a

01:38.400 --> 01:42.760
background in open source if you've seen me here before it might have been talking about

01:42.800 --> 01:46.960
the enlightenment project where I spent a lot of my time and before then the Maven

01:46.960 --> 01:52.440
project as well. I started the Find project which I'm going to present today to build

01:52.440 --> 02:00.000
graphical applications built on top of Go in 2018 and I have been a Go developer since

02:00.000 --> 02:05.400
two weeks after the project was founded. I'll tell you a little bit more about Find as we

02:05.400 --> 02:09.920
get into it but I didn't pick up a language I wanted to learn and decided needed a graphical

02:09.960 --> 02:14.920
toolkit. I had an ambition to make getting into graphical application development so much easier

02:14.920 --> 02:19.800
I knew what I wanted to achieve and then I hunted for programming language and I don't know if

02:19.800 --> 02:24.560
it's a good or a bad thing to say I wanted it to be rust I so wanted it to but I couldn't figure

02:24.560 --> 02:31.720
it out and so I picked up Go and I haven't looked back I've never felt more productive. My day job

02:31.720 --> 02:39.000
is at Fine Labs which is a company that's set up to help businesses get more out of the types of

02:39.080 --> 02:44.080
platform agnostic technology that I'm going to show and so we have products and services that

02:44.080 --> 02:50.720
could help companies working in this space. So I don't know whether or not people would think

02:50.720 --> 02:55.680
that Go is a strange choice of programming language for building graphical applications. It's

02:55.680 --> 02:59.600
certainly what the Go development team have said over the past few years although I think they're

02:59.600 --> 03:04.360
coming around now they've seen how easy it is but just to summarize the benefits for anybody

03:04.600 --> 03:10.480
that doesn't know much like Dart in the previous presentation it's going to allow you to write

03:10.480 --> 03:16.000
applications that compile natively to absolutely any device so they can pretty much run anywhere

03:16.000 --> 03:21.960
from desktops through mobiles, wasm on the web browser through into embedded devices as well.

03:21.960 --> 03:28.320
It's important to me also that there are no runtime dependencies. These pieces of software

03:28.320 --> 03:33.280
should drag and drop or install through a store in the usual manner without any need for additional

03:33.320 --> 03:40.040
steps, no runtime setup, no hidden pre-conditions required to get the applications running.

03:40.040 --> 03:45.760
We may have to do some as a developer but we take the pain so that our users get the big benefit.

03:45.760 --> 03:51.160
We're going to deliver native performance. These applications are compiled down into the same

03:51.160 --> 03:58.040
machine code at the TIN level that any piece of software built with C or other built for

03:58.080 --> 04:03.560
specific platform technology is going to offer but fundamentally I thought it was important to

04:03.560 --> 04:09.520
lower the barrier to writing graphical applications, help people to realize it's not so difficult.

04:09.520 --> 04:15.640
It's something that you can see and do and have installed on your device very very quickly indeed

04:15.640 --> 04:21.280
and Go provides the ability to do that whatever platform you're on but also the standards and

04:21.280 --> 04:27.440
the pros and the tools, the techniques in the language help to make everything easier to understand.

04:27.840 --> 04:32.520
It's good documentation, it's standard ways of writing things, unit testing built right in,

04:32.520 --> 04:36.400
all of those good things helping to promote good engineering principles.

04:36.400 --> 04:42.800
And so for me this is why it made such a good fit and it's why the fine toolkit picked up Go

04:42.800 --> 04:49.360
because we're wanting to be the simplest way possible to get people building beautiful and

04:49.360 --> 04:55.520
usable native graphical applications and to not have to think about any changes that might be

04:55.560 --> 04:58.320
necessary to get them running on any particular device.

05:00.840 --> 05:07.560
So the fine project like I said started in 2018 so that is now six years old I think possibly as of

05:07.560 --> 05:12.400
this weekend actually, complete coincidence I was not sitting in a Fosden room when I thought of

05:12.400 --> 05:18.640
the project which is same, would be a good story. It has become the most popular graphical

05:18.640 --> 05:24.000
toolkit for Go which is pretty exciting. Over the years there's been actually quite a few have

05:24.040 --> 05:30.040
started and it's nice to have choice. They have started perhaps with different technologies

05:30.040 --> 05:34.560
under the hood some are using embedded web browsers for example and others are interested in

05:34.560 --> 05:40.040
enabling more control, more power where we're focused on the simplicity and the ease of use I

05:40.040 --> 05:48.280
suppose. OSS Insight if you track them on Twitter, X, wherever they are have ranked a sixth out of

05:48.320 --> 05:55.040
all cross-platform graphical tokens which is very exciting although for some reason Qt and GTK

05:55.040 --> 06:01.200
don't seem to list in the top 10 so how they came up with the numbers I don't know but it puts us

06:01.200 --> 06:06.120
up there with others like Flutter, React Native and other names that you would have heard of and

06:06.120 --> 06:13.200
just last week I realized that we had got into GitHub's 1000 most popular repositories across

06:13.280 --> 06:19.600
the entire entirety of their code base if that's the right word which I think something like

06:19.600 --> 06:27.480
350 million repositories and as part of the Go ecosystem we make use of the really excellent

06:27.480 --> 06:33.000
and welcoming community that they have established over there and across Slack, Discord, Matrix and

06:33.000 --> 06:37.480
in-person meetings we've got about 2,000 people that like to get together and talk about building

06:37.480 --> 06:44.600
applications offering help for people who want to get started. So let's get a couple of pictures

06:44.600 --> 06:50.320
on these slides as well. This is the fine demo application so if you're interested in checking

06:50.320 --> 06:56.200
it out you can load this right now it's in the standard repository that we have we ship a few

06:56.200 --> 07:01.480
demo applications and if you're on the Google Play Store you could download this right now onto

07:01.480 --> 07:06.720
your phone and see how it renders on a mobile device. Hint looks exactly the same except it's

07:06.760 --> 07:13.600
adjusted for the different screen sizes and of course I mean as a developer at heart Light Mode

07:13.600 --> 07:19.680
is no good to me we ship the dark mode by default as well sorry they're both in there by default it

07:19.680 --> 07:30.920
will pick the right variant of the theme depending on your user preferences. So let's get started

07:30.920 --> 07:34.960
and build an app. I'm not going to overwhelm you with complex code which is perhaps a relief to

07:35.200 --> 07:41.200
people who don't know Go or C but I'll step through what we do have. Go is known for being easy to

07:41.200 --> 07:46.200
compile across all different platforms from whatever developer device you have which is fantastic

07:46.200 --> 07:50.360
it's a good place to start but because we're going to be doing some graphics programming and we want

07:50.360 --> 07:54.680
optimized binaries that are going to use your hardware acceleration we've got to get a little bit

07:54.680 --> 08:00.720
of C in there under the hood you're never going to see it but we do need a compiler installed as

08:00.760 --> 08:08.520
well so you'll need to install Go and GCC or Clang or a compatible compiler. If you're unsure

08:08.520 --> 08:12.920
whether you've succeeded setting up a development environment we have a fine setup tool which will

08:12.920 --> 08:18.840
verify the runtime yeah the runtime it's linked from the Getting Started pages which I'll add

08:18.840 --> 08:24.560
reference later and that's just going to check that the Go compiler, the C compiler, are found and

08:25.040 --> 08:32.080
catch typical challenges around just having your path set up properly so that tools are

08:32.080 --> 08:38.760
indiscoverable and we have a tool called Fine that's going to be useful for our packaging later.

08:38.760 --> 08:46.520
So there are a couple of steps that we need to do to get started with a project nothing like if

08:46.520 --> 08:51.240
we were going to be starting with a C code base but nonetheless it's something to be aware of we

08:51.280 --> 08:56.840
need to make a directory for our code we need to initialize the Go module this is a step that was

08:56.840 --> 09:02.840
introduced recently it adds for much more powerful dependency management on the Go project it used

09:02.840 --> 09:07.120
to be that you could just open a file save it run it and you would have an application displayed

09:07.120 --> 09:14.040
and I'm trying to coax the Go team to allow that as a default for really early stage because the

09:14.040 --> 09:19.840
mantra is start with the smallest thing possible and then add to it over time so apologies we've got

09:19.880 --> 09:24.760
a couple of steps there that you need to know we're calling Go get which is going to grab the

09:24.760 --> 09:30.800
library and goes looking all of the stuff up on the web through pretty efficient caching mechanism

09:30.800 --> 09:36.480
but as you can see that's a URL it's finding the source code and that's going to download it into

09:36.480 --> 09:40.960
the module that you've just created actually it's referencing in the module and putting in a common

09:40.960 --> 09:44.960
space so you don't need to download it again for another project and then we're going to edit our

09:45.000 --> 09:51.480
Go file I'm calling it UI.go because I'm really good at naming this is the code that we're going to

09:51.480 --> 09:57.000
put in it not adventurous to live code I'm afraid I'll step you through it we have package main

09:57.000 --> 10:04.000
because every application enters through the main package we're importing two packages they're in

10:04.000 --> 10:10.480
the same namespace of find.io slash find slash v2 because this is our second major API and it's the

10:10.520 --> 10:16.360
app and the widget sub packages that we're going to be using the app package sets up the runtime

10:16.360 --> 10:22.840
pools in the appropriate drivers for the device that you're running on and then is going to bootstrap

10:22.840 --> 10:30.960
the application and the widget package we're using to add something into our window our main function

10:30.960 --> 10:37.320
again probably no prizes here forgetting that's the entry point for a Go app is creating a new

10:37.360 --> 10:43.760
find application that's invoking the driver is creating a new window from the application with

10:43.760 --> 10:50.120
hello as its title so if your device has title bars hello gets popped in there and then the one line

10:50.120 --> 10:56.400
which is basically our entire user interface says set the content of the window to a new widget

10:56.400 --> 11:03.440
a new label widget that says hello fine and then we then call show and run on the window which is

11:03.560 --> 11:09.360
a little shortcut for show my window run my application if you're not familiar part of the

11:09.360 --> 11:13.960
challenge with graphical apps is they do have to run in an event thread the operating system has

11:13.960 --> 11:20.440
specific requirements for things we just bundle it up as simply as possible so there we have I think

11:20.440 --> 11:27.160
four lines of code and a couple of import statements we can type go run full stop the period there is

11:27.160 --> 11:30.920
just say the current directory you could equally have said main.go because we only have one file

11:31.760 --> 11:38.880
and it's going to load this picture this window here says hello fine I was running this on a desktop

11:38.880 --> 11:44.760
in dark mode at the time which is why it looks that way wow yeah I can see you're really really

11:44.760 --> 11:50.400
excited about a hello world application I mean I was the first time it appeared on the screen but

11:50.400 --> 11:55.600
that was a few years ago so let's do something a little bit more interesting and show that it's

11:55.640 --> 12:03.960
still going to be easy to do something useful going to make a markdown editor for you we have

12:03.960 --> 12:11.960
built into the standard widget package and an entry widget that seems to say editor it's an entry

12:11.960 --> 12:18.200
widget that's going to take the user input we're going to use a rich text in our application to

12:18.200 --> 12:22.960
render the output part of the reason this is going to be really straightforward is that a rich text

12:23.080 --> 12:30.400
understands markdown as a source for the information to mark up a text document and a horizontal

12:30.400 --> 12:36.720
splits container for laying out our user interface I showed you widgets before but containers are

12:36.720 --> 12:40.960
sort of like a type of widget where you have multiple things in it and it has a layout that's

12:40.960 --> 12:46.160
going to describe how things should lay out on screen you don't position widgets manually you

12:46.160 --> 12:51.400
have an area and a container fills it which means that we can adapt to screen sizes orientations

12:52.000 --> 12:57.240
very easily widgets don't have to think too much about how they're placed what type of device

12:57.240 --> 13:02.280
they're running on it's actually very powerful when you're not really wanting to think too much

13:02.280 --> 13:07.760
about what system you're going to be running your application on and I'm going to hook the two

13:07.760 --> 13:15.560
together with an unchanged callback so that when the user edits their text the runtime will change

13:15.720 --> 13:24.360
it okay so I described four lines it is a little bit more than four lines of code but we have the

13:24.360 --> 13:29.720
same imports with the addition of the container package and we're starting the application and

13:29.720 --> 13:34.720
window in the same way although as you can see a very exciting new title is going to appear on our

13:34.760 --> 13:46.480
window the editor field the oh sorry the editor field can't seem to point sorry anyway you can

13:46.480 --> 13:52.840
read it's not a lot of text is a new multi-line entry which is a standard entry widget but has

13:52.840 --> 13:57.000
more than one line in it we don't need to specify how many because it will fill the space available

13:57.000 --> 14:04.680
we have a new rich text we're saying load markdown but we're loading nothing as you can imagine

14:04.920 --> 14:08.520
if you passed in a string a markdown string there it would actually render that as it was

14:08.520 --> 14:16.040
loading for the first time then the hook that I mentioned is again one line of code the unchanged

14:16.040 --> 14:22.320
on entry passes a string to whoever is interested in what changed and the parsed markdown function

14:22.320 --> 14:28.040
of our preview accepts a string because you would parse your markdown from a string so we're able to

14:28.040 --> 14:36.160
set one function to to the other one so when unchanged happens it fires parsed markdown so we

14:36.160 --> 14:41.680
can avoid signal slots string based IDs and comparisons to connect multiple widgets together

14:41.680 --> 14:47.360
and just use a single line of code instead and then the most complicated piece of code in this

14:47.360 --> 14:55.120
entire snippet is the container we're using an adaptive grid which is like a grid but it adapts

14:55.320 --> 15:02.680
to is the number of columns slash rows that it should it should have if you had a standard widget

15:02.680 --> 15:08.920
a standard grid it would have columns or rows specified and as it reaches the end it flows

15:08.920 --> 15:15.200
onto another with an adaptive grid it's going to decide whether it's columns or rows based on the

15:15.200 --> 15:20.360
space available so if we were loading this on our phone in portrait mode one will be above the other

15:20.400 --> 15:24.840
and if it's in landscape one will be to the left and one will be to the right

15:29.840 --> 15:35.960
so sorry about the sneak preview before but this is a markdown editor there we go that's better

15:35.960 --> 15:45.480
thank you thank you you're too kind as you can see this is not difficult we have the entry widget

15:45.600 --> 15:50.840
on the left we've typed some markdown into it and it has rendered on the right there is a link

15:50.840 --> 15:58.680
which you could tap and it has referenced a local image as well that's quite cool but this is cooler

15:58.680 --> 16:05.440
it's exactly the same software that has been packaged as an IPA and dropped into my iPhone

16:05.440 --> 16:10.600
simulator actually it's a dot app because it's a simulator not a real device but exactly the same

16:10.720 --> 16:15.760
so the code could be dropped onto a device as well as you can see it's also running in landscape so

16:15.760 --> 16:23.400
the arrangement is the same so there that is the application running across multiple different

16:23.400 --> 16:29.280
platforms how did we get it there so compiling for targets that aren't your current machine is a

16:29.280 --> 16:35.760
little bit more complicated but let's start with what if you are compiling locally the fine tool

16:35.920 --> 16:42.000
the helper that I mentioned before is pretty important and very helpful as many help helpers are

16:42.000 --> 16:48.000
you can get it from the URL there and that go get command is going to download it and put it

16:48.000 --> 16:53.480
into your path and then you can use it to do helpful things like package the application or

16:53.480 --> 16:59.240
install it locally as I'm sure you're aware a binary that you get out of a compiler is fantastic

16:59.240 --> 17:03.360
and efficient and you can move it around because it is portable it doesn't look good and you can't

17:03.480 --> 17:09.640
put it in your start menu so fine package is going to give you a binary with whatever metadata

17:09.640 --> 17:17.120
around it is necessary so it will inject an icon into an XE for Windows or it will put the icon

17:17.120 --> 17:24.120
and desktop file into the appropriate places on your Linux system and fine install on that second

17:24.120 --> 17:28.680
line there is doing all of that for the current system and installing it into the right place for

17:28.720 --> 17:33.880
you so user local probably for most people here or the start menu or your applications folder on

17:33.880 --> 17:40.280
Mac line three there is how do we do it for a different platform because we can't just invoke

17:40.280 --> 17:44.760
the compiler we also want to package it differently the XE is going to appear instead of whatever

17:44.760 --> 17:51.160
our native system is that is going to use local tools and so if you're familiar with cross compiling

17:51.160 --> 17:57.800
and see having a tool chain specifying the CC variable is going to be likely needed for some of

17:57.800 --> 18:04.280
these cross ports we'll come back to that in a second the fourth one there is to build an Android

18:04.280 --> 18:09.640
application on our platform to do that you just need the Android SDK installed essentially quite

18:09.640 --> 18:15.160
straightforward and relatively portable the only reason we it's a bit more complex is we need to

18:15.160 --> 18:20.960
say what the application ID is because the sandboxing and the operating systems rules say you can't

18:20.960 --> 18:26.280
just be an anonymous piece of software so we pass that in there is also metadata file that you can

18:26.280 --> 18:31.480
do if you prefer to avoid command line arguments all the time fine app.toml I'm not going to cover it

18:31.480 --> 18:38.680
but it's there and can help you save a little bit of pain but what if you don't want to manage

18:38.680 --> 18:44.200
multiple developer tool chains installing packages even if it's for your local environment you just

18:44.200 --> 18:51.240
might not want to you might not be able to so contributed to the project is fine cross from

18:51.880 --> 18:59.960
Luca Corbo and Cedric by who many of you will know and another guy Jacob on our project have

18:59.960 --> 19:05.640
pulled together a Docker based build system with a very standard command line front end so you could

19:05.640 --> 19:10.920
much like you would say fine package OS windows you could say fine cross windows and it's going to

19:10.920 --> 19:17.160
take your application bundle it up inside the Docker container put the binary back into your

19:17.240 --> 19:22.440
current directory and and exit the container so helps you to avoid all of the setup if you don't

19:22.440 --> 19:27.800
mean running Docker or podman on your local instance that's going to be super super helpful

19:29.960 --> 19:34.840
very briefly want to touch on some more interesting parts of the toolkit because it's not all about

19:34.840 --> 19:40.440
just showing dialogue sorry showing graphical elements on screen one of the hard things about

19:40.440 --> 19:44.840
making applications portable is the file system we take it for granted but we shouldn't it's not

19:44.840 --> 19:52.520
always there so we've provided dialogues to open and save files and a package that helps you to

19:52.520 --> 19:58.840
manage storage in an abstract way even more abstract actually than the recently added go

19:58.840 --> 20:05.800
file system package it doesn't assume file paths it uses URIs to uniquely identify any data source

20:05.800 --> 20:10.440
so you could have your your data remotely on a network somebody made an application to bores

20:10.440 --> 20:15.480
their steam library they connected it through the storage api and they used the file open dialogue

20:15.480 --> 20:21.480
to browse their steam library cool but why it's really cool is the picture on the right here

20:21.480 --> 20:27.000
i've asked my application to open a file i've put that onto my iphone simulator

20:29.240 --> 20:35.880
yes and it has shown me this file picking dialogue i don't know if people are familiar or not but

20:35.880 --> 20:40.440
this is what's going to come up if you have an iphone set up with an iCloud account i can pick

20:40.440 --> 20:46.040
data off the cloud or i can back out and i can go to the dropbox picker where i might have something

20:46.040 --> 20:51.560
stored so third-party applications can provide data as though they were files because we're not

20:51.560 --> 20:57.160
making the assumption that they're files and if you get further into this and you want to separate

20:57.160 --> 21:03.320
your ui from the data that you're managing internally separate state from from rendering

21:03.400 --> 21:07.320
then we have a binding package so you could pass around a string binding

21:07.320 --> 21:12.360
not have to remember that it's going to a label or you could multiplex i have some data it's going

21:12.360 --> 21:18.920
to go to two or three widgets and most of the standard widgets will provide a with data constructor

21:18.920 --> 21:23.160
so i can pass the data binding in and that's a two-way data binding everything's always going

21:23.160 --> 21:29.800
to be kept up to date so two pretty helpful things but i wish i had more time to tell you more

21:29.800 --> 21:33.320
obviously there's a full widget library or i wouldn't be shouting about hey everybody you

21:33.320 --> 21:39.000
should try this we have a dialogues library and full featured forms as well which surprisingly

21:39.000 --> 21:43.400
is one of the things that could be a little tricky to get working on a mobile app menus

21:44.200 --> 21:49.240
some more complex containers than i have shown you we have notification integration system tray

21:49.240 --> 21:55.800
for desktop and popping in and out wherever it happens to be appropriate for the device you're on

21:56.680 --> 22:02.920
and we've provided native access to apis that you might not have in go so if you need to use a

22:02.920 --> 22:09.480
library it's not available in go you can call out to that natively through a c api the go team

22:09.480 --> 22:14.120
have done a fantastic job with making that integration really easy you just essentially import c

22:14.120 --> 22:19.640
and call it with a c namespace and it works pretty much transparently again there's some

22:19.720 --> 22:25.480
complications if this is android and you want to access the end the k you need the jvm instance

22:25.480 --> 22:29.720
so we've provided some native integration that that give you the context necessary

22:29.720 --> 22:35.720
i'm not going to step through that today however there is a little bit more than that it wouldn't

22:35.720 --> 22:42.280
be a presentation in the graphics dev room if i wasn't able to say but hold on a second um

22:43.160 --> 22:49.800
we built an entire desktop system using this this api stack the presentation that i've just

22:49.800 --> 22:56.040
run through is in an app called slides it is a markdown file we support markdown rendering

22:56.680 --> 23:03.800
that is pulled together in a fine app the terminal here another fine app in fact the desktop system

23:03.800 --> 23:09.880
everything in front of us it's all rendered in fine it is go apis and very very easy to understand

23:09.960 --> 23:16.440
so there you go i feel like i've fulfilled what's necessary to to consider ourselves a serious

23:16.440 --> 23:22.280
graphical contender if you would like to learn more well i'm here i'll hang around outside if

23:22.280 --> 23:27.480
anybody wants to chat there's a lot of documentation online the like i said the project's been going

23:27.480 --> 23:33.560
for a while so you can find a lot of what we have at docs dot find i o there's also a pretty good

23:33.560 --> 23:40.280
video channel um at fine i o on youtube where you can find tutorials examples and do search for

23:40.280 --> 23:45.400
fine tutorials outside of what we have because there's translations in okay i'm not going to list

23:45.400 --> 23:50.120
them in case any of them politically insensitive but plenty of different languages for folks who

23:50.120 --> 23:54.840
find that they want to try um a platform that's this different to the standard ones available

23:54.840 --> 23:59.880
perhaps um there's a book available about fine that i wrote you don't have to buy it but it's out there

24:00.600 --> 24:05.160
um if you would like to contribute and we would really love it if some people came along and

24:05.160 --> 24:09.960
helped us to improve this project everything is on github including the documentation the

24:09.960 --> 24:14.760
websites the examples you can all find it in the organization and the main repository is simply

24:14.760 --> 24:18.920
called fine and you can find the source code to everything i've shown you today we're of course

24:18.920 --> 24:23.560
looking for sponsors but who isn't if you love it you know help out in whatever way you can

24:24.520 --> 24:27.640
appreciate your time thank you so much and i'll take any questions that you have

24:37.640 --> 24:40.360
excuse me please yes um

24:48.200 --> 24:53.240
we do a lot of complicated stuff to make oh i'm sorry of course so what's the support like for ios

24:53.320 --> 24:59.000
is it more complicated than android it is very complicated for us it is trivial for you the

24:59.000 --> 25:03.480
developer who's using the toolkit you don't need to think about it you don't need to do anything

25:03.480 --> 25:09.080
at all the tools that i've shown you will create any type of application from your code um the one

25:09.080 --> 25:17.080
proviso is that if you want to put it into an ios into an onto an ios device apple is going to

25:17.080 --> 25:22.280
insist that you own some hardware that they have produced it may or may not be possible to do it in

25:22.280 --> 25:28.680
other ways but that's the license um but no fundamentally this is this is platform agnostic

25:28.680 --> 25:34.760
the apis are all guaranteed to work absolutely everywhere um sorry the the fuzz done to fit yeah

25:36.200 --> 25:41.240
yeah i was just wondering if you could um i if you could provide a sense of are there any certain

25:41.240 --> 25:48.200
kinds of application that are both particularly good bits and maybe less good i good good bit

25:48.440 --> 25:52.760
the video in this framework yeah so are there applications that are good fit or not a good

25:52.760 --> 26:01.640
fit um for using fine i think the easiest answer is going to be that if you have a document rich

26:01.640 --> 26:07.160
piece of um content if you're helping people to browse archives of um documents and things like

26:07.160 --> 26:10.760
that you'd probably be better with a web framework honestly because i mean that's what it's built for

26:11.560 --> 26:16.600
if it's more interactive if it's graphical driven um then that's something that we're going to be

26:16.600 --> 26:22.040
much better place to do fundamentally if you want to get this out to many people we're going to um

26:22.040 --> 26:26.040
alleviate a lot of the pain of getting it out there quickly and some of the things that other

26:26.040 --> 26:30.920
toolkits might offer as built in or community add-ons might take a little bit of time to

26:30.920 --> 26:36.200
implement but you've saved a lot of time up front i wouldn't go and implement games because we don't

26:36.200 --> 26:41.480
offer the 3d acceleration as part of our api we just use it internally for the speed improvements

26:41.480 --> 26:46.040
but it has been used for such a wide variety of things we have remote desktop application screaming

26:47.400 --> 26:53.240
uh 60 frames a second um full screen so that that kind of thing that's pretty cool and can we

26:53.240 --> 27:00.280
squeeze one more in yeah um just there please uh yes you mentioned about uh using open gel as the

27:00.280 --> 27:07.400
back end under ios for instance are you going straight to metal or are you using say angle or

27:07.400 --> 27:12.200
some other solution okay so yeah what are the graphical back ends that we're utilizing um

27:12.840 --> 27:18.120
it is open gel on the desktop you're you're quite right and we are using gles on the mobile

27:18.120 --> 27:22.920
platforms ios and android i'm aware that some of these have been deprecated and they may change

27:22.920 --> 27:27.800
over time um on the desktop mac is trying to kill off um open gel they've not really said that they're

27:27.800 --> 27:34.440
going to kill gles on mobile but it's inevitable that they will want to we're looking in the future

27:34.440 --> 27:40.600
to build more back end sorry more platform specific uh engines because you know performance

27:40.600 --> 27:45.240
also it offers slightly better portability ironically if you build for everything separately

27:45.240 --> 27:50.040
internally but we've designed the api so we don't need to make those decisions it's really easy to

27:50.040 --> 27:55.320
use it's going to work and over time we're going to adapt the back ends to be more efficient or

27:55.320 --> 28:01.880
or whatever is needed by the platforms um and so we're offering we do updates every um six

28:01.880 --> 28:07.080
months four to six months so that we can keep up with the the specifics of each of those platforms

28:07.080 --> 28:11.160
so if we have to look at a different one it'll be there before you have to worry about it

28:12.360 --> 28:19.560
thank you so much everybody enjoy the rest of your day

