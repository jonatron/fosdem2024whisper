WEBVTT

00:00.000 --> 00:15.120
So, up next, we have Christos and Alex and unifying observability in the power of common

00:15.120 --> 00:16.120
schema.

00:16.120 --> 00:25.640
Okay, thanks everyone and welcome to our talk.

00:25.640 --> 00:31.680
We will in this presentation talk about the conversion story of two schemas of open telemetry

00:31.680 --> 00:34.280
in the elastic common schema.

00:34.280 --> 00:36.160
But let's first introduce ourselves.

00:36.160 --> 00:37.160
My name is Alex.

00:37.160 --> 00:42.120
I'm leading the open telemetry initiative at Elastic and I'm a co-maintenor of the open

00:42.120 --> 00:45.600
telemetry semantic conventions project.

00:45.600 --> 00:48.480
Hi, I'm Christos.

00:48.480 --> 00:54.680
I work on elastic as well and I'm software engineer focusing on observability and specifically

00:54.680 --> 01:00.400
open telemetry where I am a contributor and a prover on the semantic convention project.

01:00.400 --> 01:06.120
Okay, we would like to start with a quite easy and simple question.

01:06.120 --> 01:11.160
How many of you do know exactly what open telemetry is?

01:11.160 --> 01:12.160
That's great.

01:12.160 --> 01:14.360
I can skip some slides later.

01:14.360 --> 01:18.960
How many of you do know what semantic conventions is about?

01:18.960 --> 01:21.080
That's what I expected.

01:21.080 --> 01:24.800
And how many of you do know what elastic common schema is?

01:24.800 --> 01:29.280
Okay, thanks everyone.

01:29.280 --> 01:36.040
So let's deep dive a bit on the history of open source tools and standards in observability

01:36.040 --> 01:39.440
to give us a picture where the standards come from.

01:39.440 --> 01:42.440
Let me.

01:42.440 --> 01:44.440
Okay.

01:44.440 --> 01:46.440
No.

01:46.440 --> 01:49.920
Does that work?

01:50.920 --> 01:54.720
Okay, around, do you hear me?

01:54.720 --> 01:55.720
That works well.

01:55.720 --> 01:56.720
Okay.

01:56.720 --> 02:01.640
Around or a bit more than 10 years ago when microservice emerged that also changed the

02:01.640 --> 02:04.760
observability market and industry.

02:04.760 --> 02:10.120
That's when like big tech companies started building their own open source tools for collecting

02:10.120 --> 02:11.120
observability data.

02:11.120 --> 02:17.080
So tools like Zipkin, Jega for distributor traces emerged, the Elk stack for logging,

02:17.080 --> 02:18.080
Prometheus for metrics.

02:18.080 --> 02:21.360
We heard a lot about this in previous talks.

02:21.360 --> 02:28.440
And based on this defective standard tools, then actual standards emerged like open tracing,

02:28.440 --> 02:33.960
open sensors later for distributed tracing, open sensors also covered metrics and the

02:33.960 --> 02:42.720
open metrics as a derivative of Prometheus format emerged and Elastic has its own ECS

02:42.720 --> 02:46.800
that defines the semantics of structured logging data.

02:46.800 --> 02:51.760
Since we will talk a bit more about ECS, a quick introduction what that is.

02:51.760 --> 02:57.520
So ECS stands for the Elastic Com Schema and it's basically just a definition of a set

02:57.520 --> 03:02.880
of fields that describe the semantics in structured logging data.

03:02.880 --> 03:08.960
So for example, if you're collecting a service name with your observability data, the Com

03:08.960 --> 03:15.520
Schema tells you that you should put this value into a field that is called service.name,

03:15.520 --> 03:18.440
not app.name or application.name.

03:18.440 --> 03:24.120
So you have common names that you can later on search for and this also allows you to

03:24.120 --> 03:29.200
correlate data across different signals.

03:29.200 --> 03:35.440
Now as you can see, we already have at least four standards here that are partially competing,

03:35.440 --> 03:37.440
partially complementary.

03:37.440 --> 03:43.920
Plus we have all the tools that also create some defective standards for collecting data.

03:43.920 --> 03:47.560
So it's ridiculous to have so many standards, right?

03:47.560 --> 03:51.840
We need one more that covers all of them.

03:51.840 --> 03:57.240
And usually what happens is we have one more that is competing with all the others.

03:57.240 --> 04:00.440
And yes, we have one more standard for observability.

04:00.440 --> 04:04.800
OpenTelemedia will come back to the comic later again.

04:04.800 --> 04:07.400
This is the slide that I can skip based on the Paul.

04:07.400 --> 04:13.880
So OpenTelemedia provides not just a standard but a full ecosystem and framework for observability.

04:13.880 --> 04:17.040
For collecting data, sending it protocol.

04:17.040 --> 04:21.600
One thing that I want to highlight here, there is a specification in OpenTelemedia that defines

04:21.600 --> 04:25.960
what data you can collect, like traces, metrics, logs.

04:25.960 --> 04:30.480
OpenTelemedia working group is also working on a profiling signal.

04:30.480 --> 04:35.280
And what we will talk more about in this presentation is the semantic conventions.

04:35.280 --> 04:40.960
Semantic conventions are very similar to what I've shown for ECS.

04:40.960 --> 04:48.640
And basically defines, yeah, attribute names and their semantics.

04:48.640 --> 04:52.880
Let's have a concrete example of how the data structure in OpenTelemedia looks like here

04:52.880 --> 04:54.760
with some logging data.

04:54.760 --> 04:57.040
Very simplified view here, it's a bit more complex.

04:57.040 --> 05:00.480
But let's say we have a set of log records, right?

05:00.480 --> 05:06.680
The OpenTelemedia protocol defines like the core structure of that signal with fields

05:06.680 --> 05:11.720
like severity text, which is basically the log level and body, which is basically the

05:11.720 --> 05:13.240
log message.

05:13.240 --> 05:18.560
In addition, you can collect with your observability data additional context information.

05:18.560 --> 05:22.880
This is usually represented in so-called attributes, and that's where semantic conventions come

05:22.880 --> 05:23.880
into play.

05:23.880 --> 05:29.600
The semantic conventions define which attributes exist, their names, types, and also the semantics

05:29.600 --> 05:30.600
behind this.

05:30.600 --> 05:36.000
For example, if you're collecting an HTTP access log, right, and you want to capture

05:36.000 --> 05:43.480
the HTTP request method, this is the attribute name that you would use for it.

05:43.480 --> 05:50.120
Now observability data is usually also captured in a broader context for some resource like

05:50.120 --> 05:54.000
a concrete service, a host, or other resources.

05:54.000 --> 06:02.040
That's why OTLP wraps the actual observability data into a resource wrapper, and a resource

06:02.040 --> 06:07.120
again has a set of attributes, so-called resource attributes, that describe the resource,

06:07.120 --> 06:11.640
something like the service name, host name, and so on.

06:11.640 --> 06:18.040
So this is the structure in OpenTelemedia for collecting observability data, and semantic

06:18.040 --> 06:26.160
conventions is just about the attributes basically in their meaning in this data.

06:26.160 --> 06:30.960
Now let's come back to our timeline of standards.

06:30.960 --> 06:34.600
There's one important thing I didn't mention before.

06:34.600 --> 06:40.280
Actually OpenTelemedia, and we heard this in the previous talk, is the result of a merger

06:40.280 --> 06:43.480
between open tracing and open sensors.

06:43.480 --> 06:48.600
OpenTelemedia also supports Prometheus metrics and OpenMetrics that we have heard in some

06:48.600 --> 06:55.560
of the previous talks, and just last year, Elastic also announced the donation of ECS

06:55.560 --> 06:57.600
into OpenTelemedia.

06:57.600 --> 07:01.760
So coming back to this, the question is, is it really that we have one more competing

07:01.760 --> 07:02.760
standard?

07:02.760 --> 07:04.400
I would say actually not.

07:04.400 --> 07:09.560
With OTLP we have less competing standards, and OTLP really succeeds in reducing the amount

07:09.560 --> 07:17.160
of competing standards and becoming the one and single standard for observability.

07:17.160 --> 07:24.600
Now as I said before, Elastic announced the donation of ECS into the OTLP's semantic

07:24.600 --> 07:27.600
conventions project.

07:27.600 --> 07:28.600
Why?

07:28.600 --> 07:31.080
Yeah, because there are great benefits to this.

07:31.080 --> 07:37.320
First of all, there are complementary parts and strengths in both schemas that we now

07:37.320 --> 07:41.440
merge into one single schema.

07:41.440 --> 07:46.840
And second, we grow two different communities by merging them and providing a bigger network

07:46.840 --> 07:47.840
effect.

07:47.840 --> 07:53.040
So it's a huge win I think for the community, but there are not only benefits, there are

07:53.040 --> 07:55.240
also challenges, right?

07:55.240 --> 08:01.200
First of all, the overlap between the two schemas is a potential for schema conflicts.

08:01.200 --> 08:04.880
And to resolve these conflicts might mean that we need to have either breaking changes

08:04.880 --> 08:09.680
in the one schema or in the other.

08:09.680 --> 08:14.960
We have seen the structure of observability data in OpenTelemedia, which consists of the

08:14.960 --> 08:19.800
protocol with the nested structure plus the semantic conventions.

08:19.800 --> 08:26.160
It's quite different to how ECS defines the fields because ECS is just a plain definition

08:26.160 --> 08:30.000
of fields without like nested structures or so.

08:30.000 --> 08:36.480
So there's some difference resolving that is a bit of a challenge.

08:36.480 --> 08:41.760
Another interesting thing that we discovered when we started merging ECS is that in OpenTelemedia

08:41.760 --> 08:47.640
before the merger, many times attributes have been defined in a concrete context.

08:47.640 --> 08:52.520
For example, we have here an HTTP server span and the attribute HTTP route is basically

08:52.520 --> 08:57.160
defined under the semantic conventions for HTTP server spans.

08:57.160 --> 09:01.680
The problem is now if I want to use the same attribute in a different context like let's

09:01.680 --> 09:08.520
say HTTP access logs, I mean there was always a means just to reference the other attribute,

09:08.520 --> 09:14.360
but it feels sort of weird because in the one context is a first class, right, attribute

09:14.360 --> 09:19.800
and the other one is just a reference that overrides some semantics.

09:19.800 --> 09:26.440
So learning from ECS, what we already achieved with the merger is that now we have in OpenTelemedia

09:26.440 --> 09:33.960
a dedicated attributes registry that serves the case of just defining attributes with

09:33.960 --> 09:39.080
their types, with their meaning and in the different semantic conventions and their use

09:39.080 --> 09:42.360
cases we are just referencing those attributes.

09:42.360 --> 09:49.400
So we have clear separation between defining attributes and using them in a concrete context.

09:49.400 --> 09:54.320
And finally another challenge is metrics.

09:54.320 --> 09:58.640
Metrics formats in OpenTelemedia follow the TSTB model.

09:58.640 --> 10:04.360
So we have a concrete metric name like system disk IO in this case with a type, with a unit

10:04.360 --> 10:07.760
and we have a set of dimensions modeled as attributes.

10:07.760 --> 10:13.000
In this case direction for example for disk IO read or write.

10:13.000 --> 10:22.480
In ECS previously the metrics were basically modeled as numerical fields on documents and

10:22.480 --> 10:27.280
you can have multiple numerical fields in the documents so you can have multiple metrics.

10:27.280 --> 10:31.440
That's the reason why often some of these dimensions that we have in OpenTelemedia are

10:31.440 --> 10:34.000
just encoded into the metric name on ECS side.

10:34.000 --> 10:39.200
So we have things like disk read bytes or disk write bytes.

10:39.200 --> 10:42.680
This is quite a big difference in modeling.

10:42.680 --> 10:48.600
This is a case where we are learning basically from OpenTelemedia and adopting this at Elastic

10:48.600 --> 10:52.560
now also with Elastic Search supporting TSTB.

10:52.560 --> 10:57.720
So we see we are learning from both sides which is a great thing and we are coming to

10:57.720 --> 11:00.760
the best solution possible for the community.

11:01.760 --> 11:05.760
And Chris will tell you how this actual merger is happening in practice.

11:18.760 --> 11:19.760
Thank you.

11:19.760 --> 11:20.760
Can you hear me?

11:20.760 --> 11:21.760
Okay.

11:22.760 --> 11:29.120
So as Alex mentioned there are a lot of things going on so the question is when is time to

11:29.120 --> 11:34.520
celebrate the merger that everything has been completed and the truth is that we are

11:34.520 --> 11:35.520
not there yet.

11:35.520 --> 11:40.040
There are things that needs to be done and actually everyone believed in the beginning

11:40.040 --> 11:44.000
that once the merger was announced that that's all.

11:44.000 --> 11:51.320
I mean we have not anything to add there but yeah the truth is that the actual work started

11:51.320 --> 11:54.240
right after the merger was announced.

11:54.240 --> 11:59.800
So yeah let's see some examples of how the merger is happening and how things are moving

11:59.800 --> 12:00.800
forward.

12:00.800 --> 12:06.040
So I have some real examples here from the upstream repository on GitHub with issues and

12:06.040 --> 12:07.240
pull requests.

12:07.240 --> 12:12.920
So this one for example is trying to add some new resource attributes for the container

12:12.920 --> 12:17.040
images and specifically the digest of the image.

12:17.040 --> 12:25.200
So as we can see that PR was filed on the 4th of July I think yes and it took it some

12:25.200 --> 12:26.520
time to get seen right.

12:26.520 --> 12:33.680
So it took us like many review cycles more than 20 blocker comments actually there so

12:33.680 --> 12:39.200
lots of back and forth lots of discussions but that one was actually merged after almost

12:39.200 --> 12:40.720
two months.

12:40.720 --> 12:47.640
And another example is about a very important attribute the IP of the host hosted IP as

12:47.640 --> 12:53.240
we call it and this one was really unique really interesting actually because this PR

12:53.240 --> 12:55.880
was filed by a non ECS contributor.

12:55.880 --> 13:00.880
So actually that contributor used to work for a company that it's I would say completely

13:00.880 --> 13:05.640
unrelated to the ECS project but it was quite nice because in that case the existence of

13:05.640 --> 13:10.640
the ECS project was taken into account and there were very interesting conversations

13:10.640 --> 13:15.200
and it took us like almost three months to have it in.

13:15.200 --> 13:21.600
So yeah it's quite obvious with these examples that the merger was not something trivial

13:21.600 --> 13:26.360
not something straightforward that can happen from one day to the other by for example writing

13:26.360 --> 13:30.200
a script that will transfer everything from one project to the other or something like

13:30.200 --> 13:31.200
that.

13:31.280 --> 13:38.920
So we have decided to take an approach to move let's say not so fast and pay attention to

13:38.920 --> 13:44.540
the detail and have the proper people work on specific areas so as to leverage their

13:44.540 --> 13:50.440
expertise and be sure that what we are merging to the up seem to the final project which

13:50.440 --> 13:54.640
is actually the sematic convention of open telemetry will stay there and everyone will

13:54.640 --> 13:57.280
be happy with that in the future.

13:57.360 --> 14:02.160
So that's more or less the areas of the sematic conventions.

14:02.160 --> 14:09.000
We have areas in area about databases cloud containers Kubernetes HTTP system metric

14:09.000 --> 14:12.680
system resource attributes and many others.

14:12.680 --> 14:19.760
And yeah so we have started focusing on specific areas some examples is the effort that we

14:19.760 --> 14:25.240
are doing on the system metrics area we have a working group working there focusing on the

14:25.240 --> 14:27.080
stability of the area.

14:27.080 --> 14:32.440
We are in a really good position now we are moving towards the ability really soon and

14:32.440 --> 14:37.640
the same for the process namespace the process area the process resource attributes and the

14:37.640 --> 14:43.680
same for container area we are close to achieving the 100 percent converges there the recent

14:43.680 --> 14:50.240
going PR that will add the final attributes final metrics excuse me same for HTTP and

14:50.240 --> 14:56.600
network areas we have good coverage HTTP sematic conventions were declared as stable really

14:56.600 --> 15:03.320
recently so we are adding on top now which is quite nice and yeah we have work in progress

15:03.320 --> 15:10.520
in databases mobile areas cloud Kubernetes so we have working groups getting started

15:10.520 --> 15:19.160
and focusing on these areas and yeah over the past months we are focusing on making

15:19.160 --> 15:26.400
the project as good as possible it's a community driven way so we as ECS contributes to the

15:26.400 --> 15:31.440
contributors donating this project we are not only focusing on the merger itself but

15:31.440 --> 15:37.800
we want also to ensure that the sematic conventions project will be there and will can serve us

15:37.800 --> 15:44.880
in the future so we are also focusing on other things as well like improving the tooling

15:44.880 --> 15:50.240
of the project working on the guidelines this is quite important because there are many times

15:50.240 --> 15:54.720
that the guidelines of the one project are in conflict with the guidelines of the other

15:54.720 --> 15:59.880
projects so in that case we need to take a step back and reconsider the guidelines and

15:59.880 --> 16:07.560
see what we want to have there as a final result and yeah also we work on restructuring the

16:07.560 --> 16:12.800
project before it was the sematic conventions within the project were grouped by signal

16:12.800 --> 16:19.400
logs metrics traces and so on but now we have a better organized organization there and we

16:19.480 --> 16:25.360
group the attributes by topic and yeah as Alex mentioned already we have introduced the

16:25.360 --> 16:30.640
global attributes registry it's actually a very big list with all the attributes there and then

16:30.640 --> 16:36.720
within the actual specification you can reference the attributes from there so yeah that's quite

16:36.720 --> 16:44.880
useful and we're also working on adding a new concept from ECS which actually the attribute

16:44.920 --> 16:49.840
nesting or reusing some namespaces that means that if you have a namespace for example always

16:49.840 --> 16:56.160
dot whatever you can nest it attach it as it is under the host namespace for example and you

16:56.160 --> 17:02.760
don't need to redefine it again so yeah these are some examples from the upstream most of them are

17:02.760 --> 17:10.640
closed some of them are really let's say close to be completed but we have some small blockers

17:10.680 --> 17:16.880
there but the work is moving forward that's a that's the point and yeah how the community is

17:16.880 --> 17:23.280
organized around these so as I mentioned before we want to have proper people working on specific

17:23.280 --> 17:29.840
areas leveraging their expertise so we have working groups working on each area and we're

17:29.840 --> 17:36.040
trying to first declare their the areas of the semantic attribute the sematic conventions as

17:36.080 --> 17:40.480
stable which means that all the semantic conventions that we will have there will be

17:40.480 --> 17:45.640
stable and then we can use them in the actual implementations so the next step is to tune

17:45.640 --> 17:50.000
the implementations accordingly which means essentially the open telemetry collector and

17:50.000 --> 17:59.760
the language SDKs and yeah some examples the system metrics working group the working group

17:59.760 --> 18:05.880
around databases we have a security semantic conventions working group which is getting

18:05.920 --> 18:12.560
started now we have also approvers areas for the mobile area containers Kubernetes and many others

18:12.560 --> 18:19.840
that I don't mention here and the process looks like this first once you want to create a working

18:19.840 --> 18:26.120
group or a specific project you propose the working group area and you mentioned there what

18:26.120 --> 18:32.000
issues you want to work on and then you will have people expressing their interest to join this

18:32.040 --> 18:37.840
effort you will need to find a sponsor from the technical committee and yeah once everything is

18:37.840 --> 18:45.240
decided we have a specific project board we have regular meetings we have people getting assigned

18:45.240 --> 18:52.800
to the issues there and yeah the work is happening like this and yeah regarding the merger itself

18:52.800 --> 19:00.400
in yeah technically it happens like this we follow this process so once we have to either

19:00.440 --> 19:04.680
introduce some new fields some new semantic conventions or we want to move something from

19:04.680 --> 19:10.640
ECS to the semantic conventions of open telemetry we first check obviously what we have in these

19:10.640 --> 19:16.600
two projects and we also check what implementations have so far essentially the open telemetry

19:16.600 --> 19:22.520
collector or the SDKs because there are cases that the for example the collector already

19:22.520 --> 19:27.480
uses some some let's say metrics there or some semantic events some resource attributes for

19:27.520 --> 19:33.520
example but those are not yet part of the semantic conventions of open telemetry so in that case we

19:33.520 --> 19:41.480
also check what there is there so we might find something interesting so we can use it and once

19:41.480 --> 19:47.040
we have everything considered we have a final proposal we raise an issue or a pull request

19:47.040 --> 19:53.480
directly and we start the discussion within the community we yeah particularly focusing on

19:53.840 --> 20:00.920
measuring the breaking changes because you can imagine that we want to avoid bringing frustration

20:00.920 --> 20:08.680
to our users on both sides so yeah that's really unique really important thing to consider and

20:08.680 --> 20:14.520
we go through the review process and then once we have a conclusion we merge and then of course

20:14.520 --> 20:20.680
we need to handle the breaking changes because they are there most of the times and yeah the summary

20:20.720 --> 20:25.920
for today is that the merger is happening feel free to join us contributors are more than welcome

20:25.920 --> 20:30.840
everything happens in the app stream so if you are interested please join and you will see that

20:30.840 --> 20:38.000
you will find that you will have real impact from day one there and the goal of everyone is to make

20:38.000 --> 20:42.960
the semantic convention of open telemetry the one unique straight one unique and straightforward

20:42.960 --> 20:50.560
standard for observability and security that will be there for the future so yeah with that you

20:50.600 --> 20:57.880
can find us on csf slack channels or by using our github handles and some project meetings on

20:57.880 --> 21:05.520
Mondays we have the semantic events working group meeting same our next day Tuesdays we

21:05.520 --> 21:11.280
have the specification sig meeting and on Thursdays we have the system metrics working group 530

21:11.280 --> 21:18.160
30 central time and yeah without any questions I think we're out of time

21:20.560 --> 21:29.920
do we have any questions

21:29.920 --> 21:53.360
hi thank you for the talk this this was really interesting and clarified some things for me

21:53.520 --> 22:04.520
I have one question about what's how what are the benefits of these semantic conventions in terms

22:04.520 --> 22:11.360
of like front-end tooling that that we are using because I know that you know there's this idea in

22:11.360 --> 22:15.840
open telemetry project that you have semantic conventions and you have common attributes

22:15.840 --> 22:24.760
for different signals and then we collect all this data in all these different signals in some

22:24.760 --> 22:32.960
observability tools and I imagine in like front-end we could automatically correlate different signals

22:32.960 --> 22:43.080
if we have this like common attributes I'm not up to date with the current state of this this area

22:43.120 --> 22:49.920
so yeah this is my question what are the main benefits of following this semantic conventions

22:49.920 --> 22:57.840
yeah I would say there are two actually one is I mean open telemetry is an open source standard

22:57.840 --> 23:02.520
right and there are many vendors adopting this so we need common semantics of what the data

23:02.520 --> 23:08.160
represents to build features higher level features on top this is the first thing and the other one

23:08.200 --> 23:15.720
is correlation as you already mentioned cross like different signals to also have correlation

23:15.720 --> 23:20.760
cross or through the resource attributes for example so you can drill down basically on

23:20.760 --> 23:29.680
different signals into the same resource and yeah I would say these two things and also cross

23:29.680 --> 23:35.520
signal correlation not only through resources but things like trace ID to have them you know both

23:35.640 --> 23:42.400
on locks and traces and later maybe in profiling data this kind of things okay thank you so are

23:42.400 --> 23:51.360
you doing something like that in elastic like in front-end at the moment is there any work going

23:51.360 --> 23:56.800
on in this area like correlation of different signals yeah of course like I think that's that's

23:56.800 --> 24:00.480
the goal for for every observability vendor to bring all all these different signals together

24:00.480 --> 24:15.520
yeah okay great thank you very much any other questions going once

24:21.600 --> 24:23.400
okay cool then bingo plus

24:30.480 --> 24:31.480
okay

