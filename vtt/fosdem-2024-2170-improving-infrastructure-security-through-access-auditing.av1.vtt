WEBVTT

00:00.000 --> 00:10.000
Today is Scott Bryan.

00:10.000 --> 00:17.000
He's going to talk about improving infrastructure security through access.

00:17.000 --> 00:19.000
So, you're up.

00:19.000 --> 00:20.000
Morning, everyone.

00:20.000 --> 00:29.000
So, I recently joined Red Hat and I work full time on the Adoptium Temerin JDK project.

00:29.000 --> 00:34.000
So, we use a very traditional build model with a large suite of machines.

00:34.000 --> 00:39.000
We support between 12 and 15 different platform and architecture combinations.

00:39.000 --> 00:44.000
So, it's very difficult to do just with dock containers, just single machines.

00:44.000 --> 00:48.000
So, we have a massive, massive suite of infrastructure.

00:48.000 --> 00:53.000
This doesn't work.

00:53.000 --> 01:02.000
So, we're currently undertaking a massive piece of work to secure our supply chain.

01:02.000 --> 01:06.000
So, we are looking at S-bombs, reproducible builds.

01:06.000 --> 01:12.000
But underpinning it all is a good infrastructure security strategy.

01:12.000 --> 01:17.000
And we've implemented centralized keys, rootless access, things of that nature.

01:17.000 --> 01:19.000
But how do you know all of that stuff is working?

01:19.000 --> 01:23.000
Unless you can visually see the results of all your security work.

01:23.000 --> 01:26.000
It's very difficult to prove whether it's working.

01:26.000 --> 01:28.000
So, I came in.

01:28.000 --> 01:35.000
There's no security or no strategy for verifying that any security fixes have worked.

01:35.000 --> 01:45.000
So, it's a very cut down presentation from the full length one.

01:45.000 --> 01:54.000
So, first things first for us was identifying what we wanted to get out of an auditing system.

01:54.000 --> 02:03.000
So, we want to capture, login any access attempts, anything at all where somebody was accessing a system,

02:03.000 --> 02:05.000
particularly in the build sphere.

02:05.000 --> 02:09.000
If you think about the Sol wins attack, which was a compromised Jenkins server, I believe.

02:09.000 --> 02:16.000
If your build system infrastructure is compromised, your builds and source code are potentially compromised.

02:16.000 --> 02:22.000
You build something, it's got a vulnerability in, but it checks and everything else looks valid.

02:22.000 --> 02:25.000
So, any end user sees that.

02:25.000 --> 02:28.000
The other thing we need, we wanted was an automated response and alerting.

02:28.000 --> 02:33.000
So, should somebody try to log in as root on a build system, we need to be one.

02:33.000 --> 02:35.000
That needs to be stopped straight away.

02:35.000 --> 02:39.000
And we need to be alerted that that's a thing that's happened.

02:39.000 --> 02:47.000
Come to it, why in a little while, the scale of the problem when you don't know about it is very different to when you do know the numbers involved.

02:47.000 --> 02:54.000
So, and then we want some analytics and reporting so we can, again, gauge the program and the success thereof it.

02:54.000 --> 03:00.000
Ultimately, for us, our infrastructure is all provided by a dozen different cloud providers.

03:00.000 --> 03:02.000
It's all publicly accessible.

03:02.000 --> 03:06.000
So, all of our, even our build infrastructure is open to the web.

03:06.000 --> 03:10.000
You can request access to it when you join the projects.

03:10.000 --> 03:14.000
So, again, the attack vector is significantly large.

03:14.000 --> 03:19.000
We don't have a single firewall that we can use, sneak and restrict the IP addresses.

03:19.000 --> 03:21.000
It's all publicly available.

03:21.000 --> 03:28.000
So, for us, host-based intrusion detection using Wazoo, not a tool we build, but it's open source.

03:28.000 --> 03:31.000
It's a very good tool for this use case.

03:31.000 --> 03:40.000
I would recommend you do a very similar exercise, analyze your requirements, and then have a look into the tools that are available.

03:40.000 --> 03:41.000
There's quite a few of them.

03:41.000 --> 03:49.000
Wazoo itself is a fork of OSSEC, which kind of stopped development when it became semi-paidware.

03:49.000 --> 03:54.000
Wazoo was an offshoot that is still open source, and they've continued to feature develop it.

03:55.000 --> 03:58.000
So, the scale of the problem.

03:58.000 --> 04:05.000
So, some numbers, which 24 hours across our infrastructure suite,

04:05.000 --> 04:11.000
202, just slightly over 2 million attacks in 24 hours.

04:13.000 --> 04:15.000
It's a bit of an eye-opener.

04:15.000 --> 04:22.000
Of those, 12 are deemed by our, and the standard rule set from Wazoo is really excellent,

04:22.000 --> 04:26.000
of being serious enough to warrant concern.

04:26.000 --> 04:35.000
And you can see in 24 hours, about half a million people, people just brute-forcing the build machines to try and compromise them.

04:37.000 --> 04:42.000
I think a demo is slightly impossible without my laptop, but you can drill down into all these.

04:42.000 --> 04:46.000
You can see there are all the metrics that are available for the attack vectors, the CVEs,

04:46.000 --> 04:51.000
and you see there are also the 79,000 authentication successes.

04:52.000 --> 04:54.000
It's here on the right.

04:54.000 --> 04:57.000
What's the difference between SSH and brute-forcing?

04:57.000 --> 05:02.000
Not all machines are accessed by SSH, so they will be things like Windows,

05:02.000 --> 05:04.000
brute-force, password attacks.

05:04.000 --> 05:10.000
But Wazoo detects, again, remote services, modify registry attempts,

05:10.000 --> 05:13.000
all via RPCs and things like that.

05:13.000 --> 05:19.000
So, again, this is the, the first thing it does is give you a nice kind of visual view

05:19.000 --> 05:22.000
of how big the scope of problems are.

05:22.000 --> 05:25.000
It's why I like this tool quite so much.

05:26.000 --> 05:30.000
So, drilling down a little bit just into the authentication failures,

05:30.000 --> 05:36.000
you'll notice that Windows, by far, is the key attack platform compared to the Linux service.

05:36.000 --> 05:39.000
The numbers are hundreds of thousands times as many.

05:39.000 --> 05:44.000
And you'll see there, the top three machines are all build, Azure, Windows.

05:45.000 --> 05:49.000
It's a very popular thing for attacking and, again,

05:49.000 --> 05:54.000
get a much better kind of breakdown of the attack vectors.

05:54.000 --> 05:57.000
People trying to access restricted accounts.

05:57.000 --> 06:00.000
People trying to get valid accounts.

06:00.000 --> 06:04.000
So, although they're disabled on ours, the standard Windows administrator,

06:04.000 --> 06:07.000
the standard Windows guest accounts, although they're all disabled,

06:07.000 --> 06:11.000
everybody can guess one of the Windows or can find out one of the Windows standard accounts

06:11.000 --> 06:15.000
that, unless you've disabled it, is a very easy attack vector.

06:15.000 --> 06:18.000
And then just brute forcing things.

06:20.000 --> 06:24.000
And then, looking even deeper into just a single host.

06:24.000 --> 06:27.000
You can see down here at the bottom of the screen,

06:27.000 --> 06:30.000
you're getting the login failures, unknown user, a bad password.

06:30.000 --> 06:34.000
In theory, it's somebody just typing an IP addressing wrong.

06:34.000 --> 06:39.000
However, every single one of these attacks has been stopped with an automated response.

06:39.000 --> 06:45.000
You can go even further into blocking IP ranges, geographic ranges,

06:45.000 --> 06:48.000
so you don't even get the alerts.

06:48.000 --> 06:50.000
It's that I like the visibility.

06:50.000 --> 06:53.000
I would say only the really high priority stuff.

06:53.000 --> 06:58.000
And you'll notice once you drill down, there are actually no serious alerts.

06:58.000 --> 07:00.000
That proves it's working.

07:00.000 --> 07:05.000
So, again, you can take some knowledge in that your infrastructure is fairly secure.

07:06.000 --> 07:16.000
And then another really useful feature, and again, is you can then go into the details of each individual attack.

07:16.000 --> 07:23.000
Although you get a geographic region name, IP address, things like the target users,

07:23.000 --> 07:28.000
they've tried to brute force on our SSH-based host.

07:28.000 --> 07:29.000
There isn't a slide for this.

07:29.000 --> 07:32.000
We've extended it because Wazoo is eminently customizable.

07:32.000 --> 07:40.000
So, we also capture the SHA-256 checksum of the SSH key being used to try and attack.

07:40.000 --> 07:43.000
So, we can then determine if it's one of our valid users,

07:43.000 --> 07:48.000
because we have all our keys stored centrally and distributed centrally via Vestillion.

07:48.000 --> 07:53.000
If it's not one of our keys, we can then start blocking SSH keys at that level.

07:53.000 --> 07:56.000
But, again, we've extended it to capture that information.

07:57.000 --> 08:03.000
And Wazoo is basically an Elk stack-based tool system.

08:03.000 --> 08:09.000
It uses the logging part of it, the elastic search,

08:09.000 --> 08:12.000
and it just captures all the logs from all the systems.

08:12.000 --> 08:16.000
Again, you can customize it to capture whatever you like, your Windows system registry,

08:16.000 --> 08:22.000
whatever the Mac equivalent is, audit log, syslog, and it just harvests it all into one.

08:22.000 --> 08:24.000
Really nice, easy to query, work with.

08:24.000 --> 08:28.000
It's got the capability of doing dashboards and searches.

08:28.000 --> 08:33.000
We're still fairly new to rolling out and leveraging it for real serious stuff,

08:33.000 --> 08:36.000
but I think it's worth sharing even at this stage.

08:38.000 --> 08:41.000
And again, more extended audit information.

08:41.000 --> 08:44.000
This is from one of our dock hosts.

08:44.000 --> 08:48.000
Somebody there has logged in as Root.

08:49.000 --> 08:51.000
It's probably me.

08:51.000 --> 08:56.000
But again, you can see the kind of information you capture even on successful logins.

08:56.000 --> 08:59.000
If you're trying to find out who's doing stuff, they shouldn't.

08:59.000 --> 09:01.000
And Wazoo itself goes much further.

09:01.000 --> 09:07.000
It's got a file integrity management tool, which again, you can alert on,

09:07.000 --> 09:12.000
so you can track all the changes to key system files.

09:12.000 --> 09:20.000
It's got a SEA component, so it will check your system against the NIST databases,

09:20.000 --> 09:24.000
look for any vulnerabilities, give you the links to the CVEs,

09:24.000 --> 09:28.000
and then the potential fixes if that information's in the NIST databases.

09:28.000 --> 09:32.000
All of that in one happy place.

09:32.000 --> 09:35.000
Worth a look, and if you want some more information about how we use it,

09:35.000 --> 09:41.000
feel free to connect with me on the adoptium slack after this meeting.

09:41.000 --> 09:43.000
Whatever you need.

09:43.000 --> 09:49.000
I think we've got like a minute left, so time for one question, maybe.

09:49.000 --> 09:53.000
Say we're already using something like HashiCorp Vault.

09:53.000 --> 09:57.000
There's that lagging behind in audit capability.

09:57.000 --> 10:01.000
Let's say audit capability is something we want to elaborate on right and get ahead.

10:01.000 --> 10:04.000
Does that even give us an advantage?

10:04.000 --> 10:06.000
Is it doing everything in Vault or not?

10:06.000 --> 10:10.000
What is the wisdom and that?

10:10.000 --> 10:16.000
Okay, so that's the question is, compared to HashiCorp Vault, what does Wazoo give you?

10:16.000 --> 10:19.000
I can't see any reason why you couldn't use both.

10:19.000 --> 10:22.000
You could still use Vault for everything you're using Vault for,

10:22.000 --> 10:25.000
but what this would give you is the reporting tool on top.

10:25.000 --> 10:27.000
Would that work?

10:27.000 --> 10:28.000
Yeah, yeah.

10:28.000 --> 10:30.000
How much effort would go into it?

10:30.000 --> 10:32.000
I've never used HashiCorp Vault, so I really...

10:32.000 --> 10:35.000
But Wazoo, say you could get it to monitor your Vault,

10:35.000 --> 10:39.000
as long as Vault's putting some logs out for you to monitor,

10:39.000 --> 10:43.000
you could customize Wazoo to look at those logs,

10:43.000 --> 10:45.000
as well as your system logs,

10:45.000 --> 10:50.000
and still use the same visibility features and log harvesting.

10:50.000 --> 10:52.000
I don't see why that wouldn't work, but...

10:52.000 --> 10:55.000
So it's string matching based, right, as long as I have log performance?

10:55.000 --> 11:01.000
At the base level, yes, it's string matching and regex from log files,

11:01.000 --> 11:04.000
but that's just what it ships with by default.

11:04.000 --> 11:07.000
You can extend it to do whatever you like pretty much.

11:07.000 --> 11:10.000
If you're willing to write it.

11:10.000 --> 11:13.000
OK.

11:13.000 --> 11:15.000
Right, I think that's it.

11:15.000 --> 11:17.000
Thank you very much.

11:17.000 --> 11:20.000
APPLAUSE

11:27.000 --> 11:29.000
Thank you.

11:34.000 --> 11:36.000
Thank you.

11:37.000 --> 11:40.000
APPLAUSE

11:44.000 --> 11:49.000
Doctim is an Eclipse Foundation project for Temrin JDK.

11:49.000 --> 11:52.000
Although I ran out of paying my wages,

11:52.000 --> 11:55.000
I worked full-time on the adopting project.

11:55.000 --> 11:57.000
So...

11:57.000 --> 12:02.000
Wazoo is a third party to look into the Eclipse Foundation.

12:02.000 --> 12:04.000
I just think it's...

12:04.000 --> 12:06.000
Yep, sorry.

12:06.000 --> 12:08.000
Sorry.

12:08.000 --> 12:10.000
Well, cheers, George.

12:10.000 --> 12:12.000
I'll catch up with you later, mate.

12:12.000 --> 12:14.000
Wazoo, just a little bit.

12:14.000 --> 12:17.000
I saw it was best for our needs.

12:17.000 --> 12:19.000
OK.

12:19.000 --> 12:22.000
And all good things about being a little bit independent

12:22.000 --> 12:24.000
about working for the foundation.

