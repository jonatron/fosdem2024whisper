WEBVTT

00:00.000 --> 00:05.000
Okay, great.

00:07.160 --> 00:08.640
Let me introduce myself.

00:08.640 --> 00:10.160
My name is Dmitry Bedovsky.

00:10.160 --> 00:12.760
I work in Red Hat for several years

00:12.760 --> 00:16.360
and maintain the open-estation, the open-estate.

00:16.360 --> 00:17.960
I am also involved in

00:20.080 --> 00:21.680
development of open-estate,

00:21.680 --> 00:25.080
a member of the Open-estate Technical Committee.

00:25.080 --> 00:27.840
And my current work is dedicated

00:27.840 --> 00:30.280
to post-quantum transition in Red Hat.

00:31.560 --> 00:33.640
So, first, brief reminder.

00:33.640 --> 00:36.520
Why do we need post-quantum transition?

00:36.520 --> 00:39.880
There is a wide consensus that quantum computers,

00:39.880 --> 00:42.080
if they ever happen, nobody knows,

00:43.920 --> 00:48.920
nobody knows when, will break the traditional cryptography

00:48.920 --> 00:53.920
in sense that digital signature becomes forgible,

00:57.840 --> 01:02.840
decay generation becomes reversible, and so on and so forth.

01:02.840 --> 01:07.840
So, if a malicious sector records the communication now

01:08.680 --> 01:13.400
and they are still secret and confidential

01:13.400 --> 01:16.560
to the moment when the quantum computers happen,

01:16.560 --> 01:18.160
they can get your secrets.

01:18.960 --> 01:20.480
Not sure it will happen soon,

01:20.480 --> 01:24.000
but this is considered as a threat

01:24.080 --> 01:29.080
and it means that the technical community

01:29.080 --> 01:32.680
has to implement quantum resistant algorithms

01:32.680 --> 01:36.920
that will be unbreakable even with post-quantum computers.

01:39.680 --> 01:43.280
So, some words about challenges we have.

01:43.280 --> 01:47.760
First, as quantum computers happens,

01:47.760 --> 01:50.120
we can't trust the existing algorithms,

01:50.120 --> 01:52.200
as I mentioned before.

01:52.200 --> 01:57.200
Second, well, when we implement new algorithms,

01:57.440 --> 02:01.080
they are not tested for a long time enough,

02:01.080 --> 02:06.080
so we also can't trust them too.

02:06.080 --> 02:11.080
For example, in the NIST contest,

02:12.160 --> 02:15.360
one of the algorithms that was moved

02:16.360 --> 02:20.720
even to the fourth round of the contest

02:20.720 --> 02:24.320
was completely broken without any post-quantum computers.

02:24.320 --> 02:27.000
It's a pity it was a wonderful algorithm.

02:28.360 --> 02:33.360
So, currently, a lot of efforts are related

02:34.680 --> 02:37.120
to providing so-called hybrid schemes

02:37.120 --> 02:41.880
when we use both classical algorithms

02:41.880 --> 02:44.600
and post-quantum algorithms simultaneously

02:44.600 --> 02:47.120
and combine them in this or that way.

02:47.120 --> 02:49.080
It can be two different signatures.

02:49.080 --> 02:54.080
It can be some combination of calculation,

02:55.280 --> 02:59.440
but again, if one of algorithms is unbroken,

02:59.440 --> 03:04.040
the second still provides some relevant security.

03:07.080 --> 03:11.920
The second area where we can expect problems

03:11.920 --> 03:16.120
on post-quantum transition is related to key size.

03:16.120 --> 03:21.120
Well, let's compare the key size for classical algorithms.

03:21.320 --> 03:26.320
RSA, well, practical 3K bits,

03:26.440 --> 03:31.040
means 400 bytes of the key

03:31.040 --> 03:33.800
and 400 bytes of signature, right?

03:33.800 --> 03:36.560
For the deletion, one of the algorithms

03:36.560 --> 03:38.320
choose for standardization,

03:38.320 --> 03:43.320
and the digits I provide are not for the most

03:44.080 --> 03:46.080
strongest version.

03:46.080 --> 03:49.040
It's for some intermediate version of it.

03:49.040 --> 03:52.760
We will have more than one kilobyte of the key

03:52.760 --> 03:57.440
and two and a half kilobytes of the signature.

03:57.440 --> 04:01.200
So, as a key and the signature are parts of the certificate,

04:01.200 --> 04:03.520
as a certificate doesn't go alone.

04:03.520 --> 04:05.160
You have a chain.

04:05.160 --> 04:09.200
You can imagine that, well, currently you have, say,

04:09.200 --> 04:12.160
four kilobytes of a certificate chain,

04:12.160 --> 04:15.520
and switching to deletion,

04:15.520 --> 04:20.520
you get, well, 18, 20, something like that.

04:22.440 --> 04:26.800
Also, we should expect performance problems

04:26.800 --> 04:31.800
because new algorithms will, with high probability,

04:31.800 --> 04:34.160
be much slower than existing.

04:35.520 --> 04:37.920
We will have compatibility problems

04:37.920 --> 04:41.440
because, well, other implementations of algorithms

04:41.440 --> 04:44.560
will contain these or that mistakes

04:44.560 --> 04:48.000
and probably implement various versions

04:48.000 --> 04:51.160
of intermediate standards instead of final,

04:51.160 --> 04:53.840
at least at early stages.

04:55.600 --> 04:59.760
And sometimes, I am not sure,

04:59.760 --> 05:03.520
we will meet problems with middle boxes

05:03.520 --> 05:07.000
analyzing traffic, passing through them.

05:07.000 --> 05:09.840
Well, is it something known and should go forward

05:10.240 --> 05:13.920
or is something bogus and they should be stopped?

05:13.920 --> 05:17.440
Well, let me remind that when TLS-103

05:17.440 --> 05:21.000
was in the process of standardization,

05:21.000 --> 05:22.920
people have measured and found out

05:22.920 --> 05:27.920
that something between five and 10% of TLS-103 traffic

05:29.840 --> 05:31.920
don't pass through middle boxes.

05:31.920 --> 05:35.240
And the TLS-103 protocol was significantly redesigned

05:35.240 --> 05:40.040
to better mimic TLS-102,

05:40.040 --> 05:43.240
which was already familiar to middle boxes.

05:43.240 --> 05:47.360
And, of course, when we are speaking about network,

05:47.360 --> 05:51.120
we also get traditional problems.

05:51.120 --> 05:55.620
Well, big keys doesn't fit the TCP or UDP packets.

05:55.620 --> 06:00.620
We have to deal something with, for example, DNSSEC,

06:02.320 --> 06:04.080
which is currently stateless

06:04.080 --> 06:07.240
and expects that the response from server comes

06:07.240 --> 06:08.920
in one packet.

06:08.920 --> 06:12.880
And, of course, if you send a little request

06:12.880 --> 06:17.000
and get a huge response and use UDP protocol,

06:17.000 --> 06:19.320
well, all the protocols that rely

06:19.320 --> 06:23.680
on post quantum algorithms will be a good chance

06:23.680 --> 06:26.080
to implement so-called amplification attack

06:26.080 --> 06:31.080
where you send a legitimate request to a server,

06:31.520 --> 06:34.200
but spoofing the IP address.

06:34.200 --> 06:38.160
And if you use UDP, the response,

06:38.160 --> 06:41.520
which is much bigger than the initial request,

06:41.520 --> 06:43.760
will go to the victim computer

06:43.760 --> 06:48.760
and so distributed denial of service will be implemented.

06:51.760 --> 06:56.760
Okay, now when I briefly told about the threes,

06:57.760 --> 07:01.000
let's go to something more positive.

07:02.720 --> 07:06.280
First, we have several standard bodies

07:06.280 --> 07:07.920
that are involved in the process

07:07.920 --> 07:10.120
of post quantum standardization.

07:11.280 --> 07:16.280
NIST, which organized the post quantum contest,

07:16.960 --> 07:21.720
has chosen three, four algorithms for standardization.

07:21.720 --> 07:26.720
Here are three of four links to the drafted standards.

07:27.600 --> 07:31.040
Kiber is the algorithm for key encapsulation.

07:31.040 --> 07:34.240
Deletion is the algorithms for digital signature

07:34.240 --> 07:38.240
and Falcon is Sphinx and Falcon are also algorithms

07:38.240 --> 07:41.360
for digital signature.

07:42.400 --> 07:45.280
The standards, the final version of standards

07:45.280 --> 07:49.240
are expected to happen in Q1 of this year,

07:49.240 --> 07:50.800
but did not happen yet.

07:52.400 --> 07:54.640
Then, when we have algorithms,

07:54.640 --> 07:59.520
we should specify the usage in protocol.

08:01.880 --> 08:03.840
Okay, sorry, how to switch it off?

08:03.840 --> 08:06.200
Yeah, sorry.

08:09.640 --> 08:14.640
So, IETF is the standard body which works on protocols.

08:16.520 --> 08:21.120
The work happens in, well, in almost any working group

08:21.120 --> 08:23.280
that is dedicated to cryptography

08:23.280 --> 08:27.240
that is in the so-called security area of IETF.

08:27.240 --> 08:32.240
And it was created a dedicated group named PQEAP,

08:34.560 --> 08:37.120
which will cover the protocols

08:37.120 --> 08:39.760
that currently don't have dedicated working groups,

08:39.760 --> 08:42.000
such as SSH, for example.

08:42.000 --> 08:46.080
I will briefly speak about it at the end of my presentation.

08:46.080 --> 08:50.000
And also for hardware implementation of the keys,

08:50.000 --> 08:53.120
for example, tokens and HSMs,

08:53.120 --> 08:55.680
the standards are developed by OASIS group.

08:56.640 --> 08:59.760
As far as I remember, well, several weeks ago,

08:59.760 --> 09:02.880
there were no final version of the standard.

09:02.880 --> 09:05.280
There were some drafts, but they're not public.

09:08.440 --> 09:12.320
So, despite lack of the final standards,

09:12.320 --> 09:17.320
you already are able to use Fedora for experiments.

09:18.320 --> 09:21.440
We have chosen LibuQS project.

09:21.440 --> 09:26.440
It provides an implementation of a wide set

09:27.280 --> 09:28.960
of post-quantum protocols.

09:30.520 --> 09:32.920
For Fedora, we build only those

09:32.920 --> 09:37.920
which are chosen by NISTO, the standardization, I'm sorry.

09:39.000 --> 09:41.840
If you want to play with something else,

09:41.840 --> 09:45.400
you will probably have to rebuild it yourself.

09:45.480 --> 09:50.480
And, well, LibuQS is a part of OpenQuantumSale project.

09:51.280 --> 09:56.280
And they also provide some fork of OpenSSH

09:57.840 --> 10:02.840
using post-quantum mechanism for case establishment.

10:02.840 --> 10:07.840
And what's also important, OpenSSale provider.

10:09.360 --> 10:12.080
Let me briefly remind what is OpenSSale providers.

10:12.080 --> 10:17.000
It's basically a plugin style mechanisms

10:17.000 --> 10:22.000
that allow you to add or modify functionality of OpenSSale,

10:22.400 --> 10:27.320
including providing the new cryptographic algorithms

10:27.320 --> 10:29.560
or hardware back implementations.

10:30.680 --> 10:35.680
In Fedora 39, that was released at the end of 2023,

10:35.680 --> 10:40.680
we have OpenSSale 3.1, we have LibuQS 0.8,

10:41.480 --> 10:45.680
we have OpenSSale provider 0.5.1.

10:47.080 --> 10:50.240
And we plan to update all these components

10:50.240 --> 10:54.200
in Fedora, Rochide, LibuQS, and OpenSSale provider

10:54.200 --> 10:56.760
are already updated.

10:56.760 --> 11:00.200
And we are currently finalizing the rebasing

11:00.200 --> 11:03.240
of OpenSSale to next version.

11:04.960 --> 11:08.280
I'm sorry, I am lazy and not brave enough

11:08.280 --> 11:10.320
to provide you a live demo.

11:11.680 --> 11:15.560
But well, it's quite simple.

11:15.560 --> 11:19.800
If you have a Fedora machine, you can do it yourself.

11:19.800 --> 11:24.200
You should install, okay, as provider, the first line.

11:24.200 --> 11:28.720
You can, then you should generate the K-Pair.

11:28.720 --> 11:33.440
I have chosen electric curves, but it's a matter of taste.

11:33.440 --> 11:38.440
And then you just run OpenSSale server.

11:39.200 --> 11:43.800
But now you should exactly specify

11:43.800 --> 11:47.000
what groups for K-Exchange you plan to use.

11:47.000 --> 11:52.000
So it can be done with a common line key groups.

11:55.640 --> 12:00.640
And here, if you see the group's names are in red,

12:01.360 --> 12:04.760
the names consist of two parts.

12:04.840 --> 12:09.840
One, X25519 is a classic cryptography algorithms

12:10.400 --> 12:15.400
and the second, Kiber is a post quantum stuff.

12:17.600 --> 12:22.600
The second group allowed for K-Exchange establishment

12:23.680 --> 12:25.360
also have the same structure,

12:25.360 --> 12:30.360
but uses a different parameter for classic part.

12:31.040 --> 12:36.040
And now when you have run server, yes, it's a demo server,

12:39.040 --> 12:41.280
then you can also connect to it.

12:43.080 --> 12:44.760
When you run the bad connection,

12:44.760 --> 12:47.360
I strongly recommend use the key trace.

12:47.360 --> 12:51.480
It provides in more or less human readable form

12:51.480 --> 12:54.880
the handshake process.

12:54.880 --> 12:58.720
And trust me, you will see that you use

12:58.720 --> 13:02.080
the hybrid algorithms for K-establishment.

13:04.480 --> 13:09.480
Oh, well, S-Plant and the server is sort of fun,

13:11.160 --> 13:16.160
but I don't recommend them for any sort of production use.

13:18.200 --> 13:23.200
But you already can also use such a popular web server

13:23.280 --> 13:27.680
as engines, but again, for now,

13:28.400 --> 13:30.320
I'm speaking about Fedora 39,

13:30.320 --> 13:33.760
we will have to load OKS provider

13:33.760 --> 13:37.480
in the global open state configuration

13:37.480 --> 13:42.480
or in the local copy and provide it explicitly to engines.

13:45.360 --> 13:49.360
For demo purpose, I recommend using global.

13:51.480 --> 13:55.520
It's just simple, you load the provider, you activate it,

13:55.560 --> 14:00.560
it's done by providing the section dedicated for it,

14:00.880 --> 14:04.600
and then you configure engines in a regular mode

14:04.600 --> 14:09.600
and you add a derivative, say, ACDH curve,

14:10.080 --> 14:14.240
which is more or less equal to the groups parameter

14:14.240 --> 14:16.880
that I mentioned on the previous slide.

14:16.880 --> 14:19.600
So, well, then after restarting Jinx,

14:19.600 --> 14:24.600
you have a web server that provides

14:24.960 --> 14:29.960
that uses hybrid K-change for groups

14:30.920 --> 14:35.920
and you can use URL, which is open state based,

14:36.120 --> 14:38.040
at least in Fedora.

14:40.960 --> 14:44.200
Again, you should have to specify the curves,

14:44.200 --> 14:48.960
but you will get something

14:48.960 --> 14:51.680
over quantum protected channel.

14:52.680 --> 14:57.680
Of course, it's worth mentioning that big companies,

14:58.480 --> 15:02.080
well, also have their post quantum stuff.

15:02.080 --> 15:06.120
Google Chrome allows enabling post quantum algorithms,

15:06.120 --> 15:08.560
it requires switching on special flags,

15:08.560 --> 15:12.560
and you can check that your server setup

15:13.880 --> 15:18.880
as it is done on the previous slide,

15:19.480 --> 15:22.560
will be able to communicate with a standard Google browser.

15:23.720 --> 15:28.720
Also, you can use a CURL to reach, for example,

15:32.440 --> 15:35.360
Cloudflare, the demo site,

15:35.360 --> 15:37.560
they also use the same algorithms

15:37.560 --> 15:39.640
and compatible implementation.

15:41.000 --> 15:43.080
Okay, future plans.

15:44.400 --> 15:48.680
First, we want to pack all our results to container

15:48.680 --> 15:51.840
because do it yourself demo is fine,

15:51.840 --> 15:54.280
but for a practical purposes container,

15:54.280 --> 15:55.520
it's much more convenient.

15:56.480 --> 15:59.080
Then, as I mentioned before,

15:59.080 --> 16:02.640
we are going to provide the recent version

16:03.480 --> 16:07.960
and it's work in progress in Fedora Rohide.

16:09.600 --> 16:13.480
So, you can use the post quantum algorithms

16:13.480 --> 16:14.720
also for digital signature.

16:14.720 --> 16:18.920
It's currently doesn't work for Fedora,

16:18.920 --> 16:21.000
for OpenSS 3.1.

16:21.000 --> 16:24.720
And of course, we are involved in upstream work,

16:24.720 --> 16:27.000
OpenSS cell, NSS, GNUT LS,

16:27.000 --> 16:28.920
we have identified some deficiencies

16:28.920 --> 16:30.480
and working on fixing them.

16:33.120 --> 16:35.160
And as I promised,

16:35.160 --> 16:38.080
there is an opportunity to be involved

16:38.080 --> 16:39.760
in that community work

16:39.760 --> 16:44.320
because let me speak about SSH.

16:44.320 --> 16:47.280
For several years, OpenSSH has implemented

16:49.200 --> 16:51.040
post quantum algorithms for K exchange.

16:51.040 --> 16:54.080
Unfortunately, that is not any algorithms

16:54.080 --> 16:56.560
that is chosen by NIST.

16:56.560 --> 16:59.520
There are no standards for it,

16:59.520 --> 17:02.960
neither NIST or ITF,

17:02.960 --> 17:06.640
there is work in progress on ITF level

17:06.640 --> 17:09.320
to write a specification,

17:09.320 --> 17:11.680
a formal specification with these algorithms.

17:12.680 --> 17:17.680
And there are no specification

17:17.680 --> 17:22.680
for no specification in RFC form

17:23.160 --> 17:28.160
for using the NIST chosen algorithms

17:30.280 --> 17:32.840
in OpenSSH can shape.

17:32.840 --> 17:37.840
So, OQS project has the version of OpenSSH

17:38.840 --> 17:43.400
which is currently frozen because of lack of contributes.

17:43.400 --> 17:48.400
So, if anybody desires to speed up

17:48.760 --> 17:53.760
the process of transition of SSH to quantum safe world,

17:55.120 --> 17:58.640
I think it's worth organizing some activity

17:58.640 --> 18:01.400
both in the development,

18:01.400 --> 18:05.280
in cooperation with OQS project

18:05.320 --> 18:10.320
and with writing specification of the draft for ITF.

18:12.080 --> 18:13.000
Thank you very much.

18:13.000 --> 18:14.280
Feel free to ask questions.

18:14.280 --> 18:14.960
Sure.

18:22.800 --> 18:25.040
Have you analyzed the performance difference

18:25.040 --> 18:26.840
between the classic implementation

18:26.840 --> 18:28.700
and the one with post quantum?

18:28.700 --> 18:31.440
What is the performance impact?

18:31.440 --> 18:33.680
I didn't analyze it myself,

18:33.680 --> 18:38.680
what I expect performance degradation,

18:39.200 --> 18:42.560
just because we are implementing

18:42.560 --> 18:44.960
classical algorithms for decades,

18:44.960 --> 18:49.160
and first post quantum algorithms

18:49.160 --> 18:51.300
will be imperfect by definition.

18:53.560 --> 18:57.120
Sorry, the question was about the difference,

18:57.120 --> 18:59.120
the performance difference between

18:59.120 --> 19:02.520
classical algorithms and post quantum algorithms.

19:02.520 --> 19:03.360
Sure?

19:03.800 --> 19:08.800
So everybody nowadays is using X509 for services,

19:10.880 --> 19:14.400
and you mentioned that it's difficult

19:14.400 --> 19:16.320
to trust the new algorithms,

19:16.320 --> 19:20.400
and also would be impossible to trust the old algorithms.

19:20.400 --> 19:25.400
So did you do any experiments on like dual implementations

19:27.760 --> 19:31.060
on X509, and the impact on that,

19:31.060 --> 19:34.700
because the certificate will be huge?

19:34.700 --> 19:37.660
Yes, certificate will be,

19:37.660 --> 19:40.220
so the question is, do I correctly understand?

19:40.220 --> 19:43.020
The question is how does the post quantum algorithm

19:43.020 --> 19:44.700
affect X509?

19:44.700 --> 19:47.220
Yeah, if you use it in dual combination

19:47.220 --> 19:49.500
with the old algorithms and the new algorithms.

19:49.500 --> 19:52.060
If it's used in dual combinations

19:52.060 --> 19:54.540
with old and classical algorithms.

19:54.540 --> 19:59.540
So there are several concurrent documents

20:00.540 --> 20:05.540
of combination of classic and post quantum algorithms.

20:07.220 --> 20:12.340
And yes, the certificate will inevitably

20:12.340 --> 20:14.980
be huge, which combination,

20:14.980 --> 20:19.340
no matter which combination will be chosen.

20:19.340 --> 20:23.940
There are some efforts how the impact can be reduced.

20:23.940 --> 20:28.940
For example, let's add intermediate certificates

20:29.420 --> 20:34.420
to the trust storage instead of sending them on the wire.

20:36.420 --> 20:39.180
But it definitely has its downsides,

20:39.180 --> 20:44.180
because well, increasing the size of root storage.

20:46.900 --> 20:50.260
But yes, as I mentioned, network protocols

20:50.260 --> 20:54.260
will be seriously affected by huge certificates.

20:56.020 --> 20:57.420
So just add on to this question,

20:57.420 --> 20:59.860
so that means we need more computing power

20:59.860 --> 21:01.420
for our applications?

21:01.420 --> 21:04.460
No, it means we need to reinvent the CPN DDP.

21:06.620 --> 21:07.460
Sure.

21:09.300 --> 21:14.300
If we bring these into how we usually provide

21:14.300 --> 21:17.180
a very friendly user experience in order

21:17.180 --> 21:22.180
to communicate these keys from one device to the other,

21:23.180 --> 21:28.020
we sometimes use QR codes, NFC and Bluetooth.

21:28.020 --> 21:30.620
Will that be still possible if we go

21:30.620 --> 21:33.980
to these size of certificates and keys?

21:33.980 --> 21:37.700
Will the user friendly certificates,

21:38.700 --> 21:42.420
will the user friendly way of transferring the certificates

21:42.420 --> 21:46.020
such as QR codes, Bluetooth and so on and so forth,

21:46.020 --> 21:49.220
be still suitable for post quantum keys, right?

21:50.220 --> 21:55.220
Okay, yes, for QR code because it's just linked to the URL.

21:58.220 --> 22:03.220
Yes, yes, yes, don't know about Bluetooth, sorry.

22:05.220 --> 22:07.220
How many time do I have?

22:07.220 --> 22:09.220
For minutes, sure, go ahead.

22:09.220 --> 22:11.220
Do you have any expectations on when will actually have

22:11.220 --> 22:14.220
to deal with post quantum signatures in the wild,

22:14.220 --> 22:17.220
like in our products or because of a server we're interacting

22:18.220 --> 22:19.220
with or as a client?

22:20.220 --> 22:23.220
Well, when do we have an expectation,

22:23.220 --> 22:26.420
when will it appear in real world, right?

22:28.220 --> 22:33.220
So, I have expectations but don't trust me too much.

22:35.220 --> 22:40.220
We have, there is a promise that algorithms are finalized

22:41.220 --> 22:45.220
in Q1, right?

22:46.220 --> 22:51.220
Presuming this, the ITF process even for near-finalized

22:53.220 --> 22:58.220
RFCs is about half a year, right?

22:58.220 --> 23:03.220
So, I'd say that first attempts of introducing post quantum

23:04.220 --> 23:09.220
certificates into real world will not happen before 2025,

23:11.220 --> 23:16.220
especially taking for account that real world CA needs hardware

23:16.220 --> 23:21.220
which is capable to keep post quantum keys inside

23:22.220 --> 23:27.220
and also it will take time to develop such hardware.

23:28.220 --> 23:33.220
You showed the hybrid mode of the hybrid, right?

23:34.220 --> 23:38.220
Do I use a hybrid mode of the hybrid and the classical

23:38.220 --> 23:39.220
algorithm, right?

23:39.220 --> 23:40.220
Yeah, yes.

23:40.220 --> 23:43.220
What is its security level, let's say?

23:43.220 --> 23:48.220
Is that hybrid mode also quantum safe or is that not fully

23:48.220 --> 23:49.220
quantum safe?

23:49.220 --> 23:51.220
It's quantum safe.

23:52.220 --> 23:57.220
At least the current evaluation of this hybrid mode

23:57.220 --> 23:59.220
is that it's quantum safe.

23:59.220 --> 24:04.220
As I mentioned, we did not study the post quantum

24:04.220 --> 24:07.220
algorithms enough yet.

24:09.220 --> 24:10.220
Go ahead.

24:10.220 --> 24:15.220
And how do we evaluate the quantum safety in general?

24:16.220 --> 24:20.220
Like what is the current evaluation of the current

24:20.220 --> 24:21.220
in general?

24:21.220 --> 24:25.220
Like what are the approaches to presumed that are going

24:25.220 --> 24:26.220
to be quantum safe?

24:26.220 --> 24:31.220
Which approaches are presumed to be quantum safe?

24:31.220 --> 24:33.220
Sorry, I'm not a mathematician.

24:33.220 --> 24:34.220
Yeah, right?

24:34.220 --> 24:36.220
I can say some words.

24:36.220 --> 24:41.220
I can say some words such as lattice-based cryptography,

24:43.220 --> 24:45.220
hash-based cryptography and so on and so forth.

24:45.220 --> 24:50.220
But please investigate what this word means yourself, sorry.

24:52.220 --> 24:54.220
Okay, the last question.

25:03.220 --> 25:09.220
Are the quantum save algorithms, sorry, do I correctly

25:09.220 --> 25:10.220
understand the question?

25:10.220 --> 25:14.220
Will the quantum algorithms will be resistant to all types

25:14.220 --> 25:15.220
of quantum computers?

25:19.220 --> 25:20.220
We hope.

25:23.220 --> 25:24.220
Thank you very much.

25:33.220 --> 25:34.220
Thank you.

25:40.220 --> 25:41.220
May I take the question?

25:41.220 --> 25:42.220
Yes.

25:42.220 --> 25:44.220
Okay, thank you.

25:44.220 --> 25:48.220
Thank you very much.

