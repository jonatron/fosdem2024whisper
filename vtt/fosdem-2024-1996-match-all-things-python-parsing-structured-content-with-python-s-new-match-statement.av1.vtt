WEBVTT

00:00.000 --> 00:17.600
Good afternoon.

00:17.600 --> 00:21.960
We have now Mach-Andre Leimburg.

00:21.960 --> 00:29.800
He's the CEO and founder of E-Gennex.

00:29.800 --> 00:34.560
He's not only that, but he's a Python C-Python core developer.

00:34.560 --> 00:38.960
He's also one of the organizers of the EuroPython.

00:38.960 --> 00:41.560
He's a EuroPython Society Fellow,

00:41.560 --> 00:44.160
and he's been making many contributions to Python.

00:44.160 --> 00:46.880
So, yes, we have this pop star here.

00:46.880 --> 00:51.040
Now, he's going to talk about Match of Things Python,

00:51.040 --> 00:54.240
parsing structured content on Python's new match statement.

00:54.240 --> 00:55.680
Thank you very much, Mar.

00:55.680 --> 00:56.560
Thank you.

00:56.560 --> 01:03.280
And thank you all for coming.

01:03.280 --> 01:06.320
The reason why I'm doing a talk about the match statement

01:06.320 --> 01:09.960
is that I'm getting a feeling that it doesn't receive enough traction.

01:09.960 --> 01:18.120
So, I wanted to know from you how many of you know the match statement?

01:18.120 --> 01:22.240
How many of you have actually used the match statement?

01:22.240 --> 01:23.200
A lot less.

01:23.200 --> 01:25.080
Yeah, that's what I thought.

01:25.080 --> 01:28.440
So, maybe a short introduction.

01:28.440 --> 01:32.120
Tatiana already mentioned a couple of things.

01:32.120 --> 01:34.160
I did a lot of stuff in Python.

01:34.160 --> 01:38.520
I've been working with Python since 1994, so a very long time.

01:38.520 --> 01:40.520
I did lots of things in the core development,

01:40.520 --> 01:44.840
Unicode, Db, API, the platform module.

01:44.840 --> 01:46.320
I'm based in Germany.

01:46.320 --> 01:48.040
If you have a need for, I don't know,

01:48.040 --> 01:52.400
a senior software architect, then please contact me.

01:52.400 --> 01:54.440
But that's not the point of this talk.

01:54.440 --> 01:57.360
The point of this talk is to show you this.

01:57.360 --> 02:02.480
So, this is the match statement that you have in Python.

02:02.480 --> 02:04.880
And it's actually a very, very useful thing,

02:04.880 --> 02:08.440
especially if you want to parse structured data.

02:08.440 --> 02:12.640
Now, the match statement itself is actually quite complex

02:12.640 --> 02:14.000
if you look at all the details.

02:14.000 --> 02:17.800
And I'm going through all the details in this talk.

02:17.800 --> 02:21.400
There are so many details that I have to rush a bit, unfortunately.

02:21.440 --> 02:24.760
And I'm not going to be able to show you live demos or anything

02:24.760 --> 02:26.520
because I simply don't have the time for that.

02:26.520 --> 02:28.840
So, let's just head right in.

02:28.840 --> 02:32.520
So, what's the motivation behind the match statement?

02:32.520 --> 02:35.640
People wanted to have something like a switch statement,

02:35.640 --> 02:37.440
as you probably know from maybe C,

02:37.440 --> 02:40.760
your other languages, for a very, very long time.

02:40.760 --> 02:44.760
I just, I wrote a pep a very long time ago,

02:44.760 --> 02:47.720
which basically suggested adding something like that to Python.

02:47.720 --> 02:49.040
It was rejected at the time,

02:49.080 --> 02:52.480
so it took another 20-something years

02:52.480 --> 02:57.920
to actually something like this to make it into Python.

02:57.920 --> 02:59.520
What we now have with the match statement

02:59.520 --> 03:01.560
is a lot more powerful than the switch statement.

03:01.560 --> 03:05.240
So, you can do not only matching on literals, for example,

03:05.240 --> 03:06.960
but you can also do matching on types.

03:06.960 --> 03:09.600
You can do matching all kinds of things,

03:09.600 --> 03:12.800
including conditions that you apply to these things.

03:12.800 --> 03:14.320
You can combine all of these things.

03:14.320 --> 03:18.440
You can also do parsing and matching at the same time,

03:18.480 --> 03:21.120
which is quite useful, so you don't have to have two passes.

03:21.120 --> 03:24.120
First, to figure out whether something is actually valid,

03:24.120 --> 03:27.120
and then in the second pass to then figure out

03:27.120 --> 03:30.520
how to actually use the data that you have there.

03:30.520 --> 03:33.760
It all started in Python 3.10.

03:33.760 --> 03:37.520
That's more than two years ago.

03:37.520 --> 03:41.400
But, like I said, it hasn't received that much traction yet.

03:41.400 --> 03:44.760
So, what you see here, or maybe you cannot see it,

03:44.800 --> 03:49.200
it's a graph from py-code.org,

03:49.200 --> 03:50.280
which is a very nice site.

03:50.280 --> 03:52.520
If you don't know that one, you should go there and have a look.

03:52.520 --> 03:56.360
It basically scans all the PyPI code

03:56.360 --> 03:59.520
and then does analysis on that.

03:59.520 --> 04:02.920
The maintainer did an analysis in July last year

04:02.920 --> 04:07.560
and looked at various features of the language,

04:07.560 --> 04:12.120
whether they were being used in the packages on PyPI or not.

04:12.120 --> 04:18.280
As you can see, in July, there were only 2,600-something packages

04:18.280 --> 04:22.160
on PyPI using the match statement.

04:22.160 --> 04:25.480
That's two years after the release,

04:25.480 --> 04:31.760
and it's only 0.55% of all the packages, so it's next to nothing.

04:31.760 --> 04:36.080
So, I guess one of the reasons for that

04:36.080 --> 04:38.480
is that the documentation for this match statement

04:38.480 --> 04:41.240
is not all that great.

04:41.240 --> 04:44.200
I'm talking about the official Python documentation.

04:44.200 --> 04:46.200
There are many blog posts about it,

04:46.200 --> 04:50.840
and many other resources that you can tap into and overviews.

04:50.840 --> 04:54.920
But the Python documentation for the match statement is not ideal.

04:54.920 --> 04:58.240
What you have is these three PEPs,

04:58.240 --> 05:00.320
and this is basically the best that you have

05:00.320 --> 05:02.920
in the official documentation for Python.

05:02.920 --> 05:04.480
If you want to get into these things,

05:04.480 --> 05:08.600
then I would suggest to go with the PEP 636,

05:08.640 --> 05:11.440
which is a very nice introduction,

05:11.440 --> 05:13.720
a tutorial kind of introduction to the match statement,

05:13.720 --> 05:19.400
and then you can go to the other PEPs to have more detail.

05:19.400 --> 05:21.600
So, how does it all work?

05:21.600 --> 05:23.080
We're going to have a look at this example,

05:23.080 --> 05:26.720
and I'm going to go through the various different parts of it.

05:26.720 --> 05:30.280
So, the first part is the match object itself.

05:30.280 --> 05:35.000
This is what you want to match, this is what you want to analyze.

05:35.000 --> 05:40.000
The next thing is what you have behind the case statements in there.

05:40.000 --> 05:43.080
Those are called match patterns, and there are quite a few of those.

05:43.080 --> 05:48.760
I'm going to go through a list of many other patterns that exist.

05:48.760 --> 05:50.480
Then, of course, you have the match code.

05:50.480 --> 05:53.680
This gets executed in case, one of those case statements,

05:53.680 --> 05:59.200
the case patterns actually do match.

05:59.200 --> 06:02.160
And then you have something called capturing variables.

06:02.160 --> 06:04.440
I'm not going to explain what that is now,

06:04.480 --> 06:06.880
because I have a few slides on those.

06:06.880 --> 06:15.920
This is a way basically to store the data that's being matched in a variable.

06:15.920 --> 06:19.880
Plus, you have something that's a bit strange, which is just the underscore.

06:19.880 --> 06:22.200
These are non-capturing wild cards.

06:22.200 --> 06:26.880
So, it's basically like an ELTS in an if-else statement.

06:26.880 --> 06:33.440
So, if the matching goes down, and you have a, as the last case,

06:33.440 --> 06:36.640
you have one of these wild card things, then this will always match.

06:36.640 --> 06:40.800
So, this is a way to do the ELTS in the match statement.

06:40.800 --> 06:45.600
Matching itself is always tried from top to bottom, and the first match wins.

06:45.600 --> 06:49.760
So, the order in which you list these match statements,

06:49.760 --> 06:53.840
the case statements, is actually very important.

06:53.840 --> 06:59.760
There's no fall through, like in C. How many of you know C?

06:59.760 --> 07:03.680
Well, quite a lot. That's good.

07:03.680 --> 07:06.400
So, you don't have that, because in C you can often make a mistake.

07:06.400 --> 07:10.040
If you forget a break, for example, in one of these,

07:10.040 --> 07:13.600
the code that comes behind the case, then it just falls through,

07:13.600 --> 07:20.080
and then you execute code that you probably don't want to execute it.

07:20.080 --> 07:23.880
So, let's have a look at these pattern types that we have.

07:23.880 --> 07:25.120
Like I said, there are quite a few.

07:25.120 --> 07:27.640
I'm going to go through them rather quickly.

07:27.640 --> 07:30.280
So, the first one is the literal.

07:30.280 --> 07:33.360
So, you can just write a little bit of string, a little bit of number,

07:33.360 --> 07:36.160
an integer, a float.

07:36.160 --> 07:41.440
It can also handle a couple of special singletons, like true, false, or none.

07:41.440 --> 07:43.320
Not many more.

07:43.320 --> 07:47.320
If you have something else that you want to actually match,

07:47.320 --> 07:49.640
and you don't want to write this down as a literal,

07:49.640 --> 07:53.800
you can use a variable kind of notation for that.

07:53.800 --> 07:57.880
So, if you have some other value, you put that into a variable

07:57.880 --> 08:00.680
that's accessible to the match statement.

08:00.680 --> 08:06.920
And what's very important is that you have a dot in that reference.

08:06.920 --> 08:10.720
The reason for that is a bit strange,

08:10.720 --> 08:14.320
because the match statement also works on types.

08:14.320 --> 08:18.720
And in order to differentiate between type names and variable names,

08:18.720 --> 08:22.400
the match statement and the parser, they need to have some kind of hint for this,

08:22.400 --> 08:23.960
so that they know what they're dealing with.

08:23.960 --> 08:28.840
And the dot is that hint.

08:28.840 --> 08:32.800
Now, the next two types are sequences and mappings.

08:32.800 --> 08:35.560
They look very natural to a Python programmer for sequences.

08:35.560 --> 08:43.440
You just use like the square brackets or the round brackets,

08:43.440 --> 08:46.200
and then you match a sequence.

08:46.200 --> 08:50.640
What's not necessarily intuitive about this is that

08:50.680 --> 08:55.480
this actually matches sequences, not just lists or tuples.

08:55.480 --> 09:00.040
So, if you write something like, for example, in the tuple notation,

09:00.040 --> 09:04.320
and then you pass in a list as an object that gets matched,

09:04.320 --> 09:08.160
the tuple case will still match in your match statement.

09:08.160 --> 09:09.760
So, that's a bit like a gutcher.

09:09.760 --> 09:11.640
You have to watch out for that.

09:11.640 --> 09:12.840
And it's similar for mappings.

09:12.840 --> 09:17.640
For mappings, you write them like the, like a dict kind of notation.

09:17.640 --> 09:20.280
It actually matches all kinds of mappings,

09:20.280 --> 09:22.280
not just dictionaries.

09:22.280 --> 09:24.640
There are ways to, you know, just match dictionaries.

09:24.640 --> 09:26.320
I'm going to show them.

09:26.320 --> 09:30.480
You can also match, like I said, different types.

09:30.480 --> 09:34.240
The very, you know, very simple ones are like all the built-in types

09:34.240 --> 09:35.960
that you have there.

09:35.960 --> 09:38.720
You can have support for user-defined classes.

09:38.720 --> 09:41.600
You have to pay some attention in user-defined classes

09:41.600 --> 09:45.720
about the order of the arguments that you have in there.

09:45.720 --> 09:48.240
I'm going to talk about that in a bit.

09:48.240 --> 09:50.480
What's very important are these parentheses.

09:50.480 --> 09:52.920
If you don't have parentheses behind this,

09:52.920 --> 09:56.000
then the match statement is going to basically treat this,

09:56.000 --> 09:58.520
the name that you have there as a variable,

09:58.520 --> 10:00.280
and very often as a capturing variable.

10:00.280 --> 10:02.160
So that's going to, that's another gutcher

10:02.160 --> 10:06.000
you need to be careful with.

10:06.000 --> 10:08.400
Of course, you can nest all these things.

10:08.400 --> 10:12.360
You can combine all these things that I just mentioned in various ways.

10:12.360 --> 10:16.400
There's an OR combination with a pipe character.

10:16.400 --> 10:18.440
And to make things even more complex,

10:18.440 --> 10:23.360
you can add guards to these match patterns that you have.

10:23.360 --> 10:25.320
So you can say, OK, for example, down here,

10:25.320 --> 10:28.600
if you can see that it's a sequence AB,

10:28.600 --> 10:33.320
and then this should only match if the value A in that sequence

10:33.320 --> 10:36.400
is above 10.

10:36.400 --> 10:40.560
So you can write very complex things in those match statements.

10:40.560 --> 10:45.680
And then finally, you have these white-card patterns.

10:45.680 --> 10:46.880
I mentioned those already.

10:46.880 --> 10:50.400
There are two types of these white-card patterns.

10:50.400 --> 10:56.080
One is the anonymous one, a non-binding one, which is the underscore.

10:56.080 --> 10:59.480
And the second one is one where you basically put something

10:59.480 --> 11:02.440
at the bottom of your match statement,

11:02.440 --> 11:06.120
and you just assign a variable to that.

11:06.120 --> 11:09.840
I often use unknown for this because it just makes sense.

11:09.840 --> 11:14.040
If you read that, it's very, you can easily comprehend that.

11:14.040 --> 11:16.840
If you read the code, you can easily understand

11:16.840 --> 11:20.520
that this is actually something that matches anything

11:20.520 --> 11:22.720
a bit unlike the underscore.

11:22.720 --> 11:26.560
I'm not too much of a fan of this underscore thing.

11:26.560 --> 11:31.360
Right, so now let's have a look at the capturing variables.

11:31.360 --> 11:32.760
Like I mentioned in the beginning,

11:32.760 --> 11:34.280
the nice thing about the match statement

11:34.280 --> 11:38.120
is that you can actually combine the matching and the parsing.

11:38.120 --> 11:41.520
So whenever something matches, Python

11:41.520 --> 11:45.560
will put the matched value into a variable that you define,

11:45.560 --> 11:48.720
which is very much like, for example, the ass notation

11:48.720 --> 11:51.400
that you have with context managers.

11:51.400 --> 11:52.680
There are two forms for this.

11:52.680 --> 11:53.960
One is an explicit form.

11:53.960 --> 11:56.840
So I put an example here.

11:56.840 --> 12:00.040
So what happens is it matches a list.

12:00.040 --> 12:02.680
And then if the list type matches,

12:02.680 --> 12:06.360
it will put the value into the variable sublist.

12:06.360 --> 12:10.400
And then you can use that variable in your other matching code

12:10.400 --> 12:13.280
that you have or in the actual code

12:13.280 --> 12:16.760
that you want executed for that particular case.

12:16.760 --> 12:18.160
Very easy to understand.

12:18.160 --> 12:22.600
It's a bit more verbose, but it always works, which is nice.

12:22.600 --> 12:25.520
And then there's an implicit form.

12:25.520 --> 12:29.000
This can cause some problems because it introduces

12:29.000 --> 12:31.240
some of these gotchas.

12:31.240 --> 12:33.440
The way that this works is that instead of putting

12:33.440 --> 12:37.280
literals in these, for example, sequence notations

12:37.320 --> 12:40.840
or mapping notations, you put variables in there.

12:40.840 --> 12:44.520
And what happens there is that implicitly, for example,

12:44.520 --> 12:48.960
in the first example up there, the first entry

12:48.960 --> 12:52.320
in that sequence will go into A, and the second entry

12:52.320 --> 12:55.520
will go into B. And then you can immediately use A and B,

12:55.520 --> 12:58.200
for example, in guards that you have on the code that

12:58.200 --> 13:00.000
comes afterwards.

13:00.000 --> 13:05.600
And these things are actually bound variables in your code.

13:05.600 --> 13:09.480
This works very well if you have well-defined variable names.

13:09.480 --> 13:12.280
If you don't, you can get into lots of trouble.

13:12.280 --> 13:15.880
So using short names is probably not a good idea.

13:15.880 --> 13:19.600
They should be very explicit.

13:19.600 --> 13:21.840
This does also work with some of the built-in types,

13:21.840 --> 13:22.840
not all of them.

13:22.840 --> 13:25.040
So there is a, I think this is actually

13:25.040 --> 13:29.240
a full list of all of the ones that support this.

13:29.240 --> 13:32.520
It does work with classes that you define,

13:32.520 --> 13:35.920
but you need to have a look at this pep for the details.

13:35.920 --> 13:38.200
There are some special attributes

13:38.200 --> 13:40.160
that you have to define in order for the parser

13:40.160 --> 13:44.440
to know in which kind of order these variables should

13:44.440 --> 13:46.520
be assigned.

13:46.520 --> 13:49.560
Unfortunately, it doesn't work with ABCs,

13:49.560 --> 13:51.400
but there are workarounds for that.

13:51.400 --> 13:53.480
So if you work with ABCs, for example,

13:53.480 --> 13:57.360
if you want to test whether something is a float or an int,

13:57.360 --> 13:59.680
and you want to put that kind of logic into an ABC,

13:59.680 --> 14:03.960
then there are ways to still make that happen.

14:03.960 --> 14:07.000
There are some things that don't work with the match statement.

14:07.000 --> 14:10.040
Some are a bit unfortunate, because, for example,

14:10.040 --> 14:14.600
if you use a scripting shell language, like bash,

14:14.600 --> 14:18.320
for example, a very, very common use case for matching

14:18.320 --> 14:19.480
is regular expressions.

14:19.480 --> 14:22.040
So basically, you have a case, and then you

14:22.040 --> 14:24.160
put a regular expression there to match

14:24.160 --> 14:26.920
a particular regular expression, kind of like how

14:26.920 --> 14:29.040
the string should look like.

14:29.040 --> 14:31.520
This is not supported directly.

14:31.520 --> 14:33.280
There are ways to work around this.

14:33.280 --> 14:34.960
I'm going to show you a reference later on,

14:34.960 --> 14:39.800
where you can basically find how to do this.

14:39.800 --> 14:43.600
Something else that doesn't work well is a set member matching.

14:43.600 --> 14:46.160
There are ways, again, to work around this.

14:46.160 --> 14:51.640
You can use a guard to kind of do this set matching.

14:51.640 --> 14:54.720
So the guard works by having the wild card,

14:54.720 --> 14:55.800
so it always matches.

14:55.800 --> 15:00.360
And then it uses the guard to do the actual check

15:00.360 --> 15:02.080
whether something is in a value set,

15:02.080 --> 15:03.720
or you can use the OR pattern.

15:03.720 --> 15:05.160
But the OR pattern is sequential,

15:05.160 --> 15:08.120
so it's not really efficient.

15:08.120 --> 15:10.200
Optimizations haven't been done yet,

15:10.200 --> 15:12.960
which is a very common theme that you always have in Python.

15:12.960 --> 15:15.080
First, something gets implemented

15:15.080 --> 15:17.040
to have something to work with.

15:17.040 --> 15:20.360
And then, in the next couple of releases,

15:20.360 --> 15:23.400
people then worry about performance and add better

15:23.400 --> 15:24.080
performance.

15:24.080 --> 15:27.760
So that has happened a lot in Python in the history.

15:27.760 --> 15:31.880
It's probably going to happen for this as well.

15:31.880 --> 15:33.680
So I talked a bit about the guard trust.

15:33.680 --> 15:36.680
I just want to reiterate some of them.

15:36.680 --> 15:39.440
This I already mentioned.

15:39.440 --> 15:43.360
If you use the tuple notation or the list notation,

15:43.360 --> 15:46.520
and you think that, OK, this is just

15:46.520 --> 15:49.400
going to match a tuple or just a list,

15:49.400 --> 15:50.840
you can easily get this wrong.

15:50.840 --> 15:53.120
So if you want to do this explicitly,

15:53.120 --> 15:56.800
then you actually have to use the type notation for this.

15:56.800 --> 15:59.160
So you have to write list or tuple,

15:59.160 --> 16:03.000
and then the sequence that you want to match.

16:03.000 --> 16:05.680
The same issue you have with the mapping types.

16:05.680 --> 16:10.120
So you have to pay attention to that as well.

16:10.120 --> 16:12.080
Another gotcha is the wildcard pattern.

16:12.080 --> 16:15.800
So you can only use the wildcard pattern

16:15.800 --> 16:19.320
at the very end of the list if you put something up

16:19.320 --> 16:20.320
at the top of the list.

16:20.320 --> 16:23.920
For example, if you start with case and then wrong values,

16:23.920 --> 16:26.760
because wrong values is a capturing variable,

16:26.760 --> 16:29.600
it's regarded as a wildcard case.

16:29.600 --> 16:31.480
And so it will match anything.

16:31.480 --> 16:34.040
And the parser will actually complain about this.

16:34.040 --> 16:36.520
So this is not valid Python.

16:36.520 --> 16:43.200
However, if you put a guard with it, then you can use it.

16:43.200 --> 16:47.440
Which is probably in order to make certain workarounds

16:47.440 --> 16:48.000
possible.

16:48.000 --> 16:49.960
I don't really know what the reason is

16:49.960 --> 16:51.120
why this works.

16:51.120 --> 16:53.760
It's a bit strange.

16:53.760 --> 16:56.280
And then the parentheses.

16:56.280 --> 17:02.080
If you look at this code, if I wouldn't have put an error there,

17:02.080 --> 17:05.320
you probably wouldn't have seen this.

17:05.320 --> 17:07.520
What I did there is I put a dict there,

17:07.520 --> 17:12.160
meaning that I want properties to have a dict,

17:12.160 --> 17:14.240
like a dictionary value.

17:14.240 --> 17:16.400
And they want to match that.

17:16.400 --> 17:17.640
But I forgot the parentheses.

17:17.640 --> 17:19.480
So what's going to happen is the parser

17:19.480 --> 17:22.640
is going to regard this as a binding, sorry, capturing

17:22.640 --> 17:23.720
variable.

17:23.720 --> 17:26.360
So it's going to put the value into a dict.

17:26.360 --> 17:30.280
And then it's not only going to not parse correctly,

17:30.280 --> 17:32.600
because it will just put any kind of value

17:32.600 --> 17:35.920
that you have there into this dict capturing variable.

17:35.920 --> 17:38.120
But it will also bind dict to this value

17:38.120 --> 17:40.760
that you have in there, possibly breaking code that

17:40.760 --> 17:43.800
comes afterwards, because you can no longer access

17:43.800 --> 17:45.440
the built-in dict.

17:45.440 --> 17:48.720
So this is something to watch out for.

17:48.720 --> 17:52.400
And finally, this is the talk that I wanted to mention.

17:52.400 --> 17:53.720
Raymond Hettinger.

17:53.720 --> 17:56.720
Who knows, Raymond Hettinger?

17:56.720 --> 17:57.720
Not that many people.

17:57.720 --> 17:59.320
That's strange.

17:59.320 --> 18:00.600
You should definitely look him up.

18:00.600 --> 18:03.400
I mean, he has done so many good talks.

18:03.400 --> 18:05.920
It's just incredible.

18:05.920 --> 18:08.800
I mean, if you want to learn something deep about how

18:08.800 --> 18:12.880
Python works, he has all the talks in his stack.

18:12.880 --> 18:14.800
So definitely have a look at that.

18:14.800 --> 18:18.840
He did a great talk at PyCon Italia 2022,

18:18.840 --> 18:21.320
also on the pattern matching.

18:21.320 --> 18:23.800
And he shows a lot of tricks on how

18:23.800 --> 18:25.760
to work some of the deficiencies that you currently

18:25.760 --> 18:27.920
have in the match statement.

18:27.920 --> 18:31.400
So I was actually faster than I thought.

18:31.400 --> 18:34.280
So I'm done.

18:34.280 --> 18:36.480
So yeah, this is always my last slide.

18:36.480 --> 18:37.520
Never stop to learn.

18:37.520 --> 18:38.560
Always learn new things.

18:39.560 --> 18:45.360
Never always try out new stuff that comes out in Python.

18:45.360 --> 18:49.120
And I hope this talk will kind of make you have a look

18:49.120 --> 18:52.040
at the match statement and maybe use it more,

18:52.040 --> 18:55.080
because it's actually quite useful.

18:55.080 --> 18:56.080
Thank you.

18:56.080 --> 19:07.080
Thank you, Mark.

19:07.080 --> 19:09.080
Thank you, Mark.

19:09.080 --> 19:11.640
So now it's time for questions.

19:11.640 --> 19:13.960
So I can say a few people with the hands raised.

19:13.960 --> 19:15.800
I will start here, and we will go up.

19:15.800 --> 19:17.880
So we have four people, at least.

19:23.960 --> 19:26.640
One of your first examples, you first

19:26.640 --> 19:31.760
had to check whether this is a list, like with the list

19:31.760 --> 19:33.160
in the parentheses.

19:33.160 --> 19:35.800
And then two cases later, you are

19:35.800 --> 19:38.440
trying to catch against the sequence.

19:38.440 --> 19:41.800
That means that this will only match if it's a sequence,

19:41.800 --> 19:44.800
but it's not a list, I guess.

19:44.800 --> 19:47.000
Like on your first slide, literally.

19:47.000 --> 19:49.600
The first one, like this one?

19:49.600 --> 19:50.520
Yes, this one.

19:50.520 --> 19:53.640
So on the third case, it will match

19:53.640 --> 19:57.120
if the thing is a sequence with three elements,

19:57.120 --> 19:59.840
but that sequence is not a list, because otherwise it

19:59.840 --> 20:01.720
would have gotten into the first case.

20:01.720 --> 20:02.920
Is that correct?

20:02.920 --> 20:03.960
Given this one, yeah?

20:03.960 --> 20:04.680
Yes.

20:05.680 --> 20:08.960
Since you have a case list, oh, yeah.

20:08.960 --> 20:12.840
Yeah, so you're right.

20:12.840 --> 20:16.680
What happens here is that this will always match for lists.

20:16.680 --> 20:21.760
So if you put in a real, like a true Python list,

20:21.760 --> 20:23.960
then you will always go in here.

20:23.960 --> 20:27.440
If you have defined your own kind of sequence,

20:27.440 --> 20:29.160
that's not a Python list.

20:29.160 --> 20:30.360
Only then it will get in the top.

20:30.360 --> 20:33.400
Then it will drop down here, and we'll parse here.

20:34.200 --> 20:37.680
And as Heckelman and Laska mentioned for me,

20:37.680 --> 20:42.960
what happens if you put a generator in there?

20:42.960 --> 20:44.320
Can you match against generators?

20:44.320 --> 20:47.320
Because then you will kind of mutate the element

20:47.320 --> 20:49.040
while casing the case.

20:49.040 --> 20:50.160
Would that work?

20:50.160 --> 20:51.680
This is a good question.

20:51.680 --> 20:53.440
I think if you put a generator in there,

20:53.440 --> 20:56.000
it will actually match the generator type and nothing

20:56.000 --> 20:56.640
much else.

20:56.640 --> 20:59.360
It won't actually call the generator

20:59.360 --> 21:03.320
to give back any values.

21:03.320 --> 21:05.520
But it's a good question.

21:05.520 --> 21:06.280
I'm not really sure.

21:06.280 --> 21:07.760
It probably works like that.

21:10.400 --> 21:11.880
Hi.

21:11.880 --> 21:13.360
Thanks for the great talk.

21:13.360 --> 21:18.760
I had a question regarding the caveat you gave at the end

21:18.760 --> 21:21.040
regarding the dict.

21:21.040 --> 21:24.080
Is there a proper way to do it, like putting parenthesis,

21:24.080 --> 21:29.440
or is it not possible to match a type inside of a hash map

21:29.440 --> 21:31.560
like that?

21:31.600 --> 21:33.800
Let me just find the slide.

21:36.600 --> 21:37.600
This one, right?

21:37.600 --> 21:38.680
Yeah, that one.

21:38.680 --> 21:40.000
So what was the question?

21:40.000 --> 21:42.160
So here you put the dict, and you

21:42.160 --> 21:45.720
said that, of course, if it will overwrite,

21:45.720 --> 21:50.960
let's say, the Python dict, would it

21:50.960 --> 21:53.880
be possible in that case to put parenthesis to match the type

21:53.880 --> 21:54.400
here?

21:54.400 --> 21:55.520
Yes, of course.

21:55.520 --> 21:57.920
And that was the code is actually

21:57.920 --> 22:01.160
written in a way that this would have been intended, right?

22:01.200 --> 22:04.560
So the intention was that properties,

22:04.560 --> 22:06.640
well, it's matching a mapping, right?

22:06.640 --> 22:09.480
So if you put in a mapping that has,

22:09.480 --> 22:11.280
as one of the keys has properties,

22:11.280 --> 22:16.640
and as a value has a dictionary, then this will match, right?

22:16.640 --> 22:18.880
Without the parenthesis, it won't match

22:18.880 --> 22:23.160
any mapping that has a key that has properties,

22:23.160 --> 22:25.120
but not actually look at the value,

22:25.120 --> 22:28.880
and simply just put the literal value

22:28.920 --> 22:31.160
into the variable dict.

22:31.160 --> 22:33.960
That's what happens.

22:33.960 --> 22:36.360
OK, I think I see you up there, right?

22:36.360 --> 22:37.320
Yes, hello.

22:37.320 --> 22:40.520
I was wondering, with this capturing variable,

22:40.520 --> 22:43.120
it can sometimes lead into ambiguity.

22:43.120 --> 22:45.160
So I was working how well this would

22:45.160 --> 22:48.200
work with the existing typing system, where you would,

22:48.200 --> 22:52.520
for example, have an object that, like,

22:52.520 --> 22:55.480
dict that represents the type.

22:55.480 --> 22:58.280
So that is something that I did not really cover in here,

22:58.280 --> 23:03.400
but perhaps you noticed the syntax that's being used here

23:03.400 --> 23:06.600
is actually somewhat different from the type annotations

23:06.600 --> 23:08.560
that you have in Python, right?

23:08.560 --> 23:13.200
So those are two distinct kind of, basically, systems

23:13.200 --> 23:14.760
working here.

23:14.760 --> 23:19.200
These types that you have here are actual Python type objects

23:19.200 --> 23:23.480
that you work with, whereas the type annotations are being used

23:23.480 --> 23:26.520
by, for example, MyPy or other tools,

23:26.560 --> 23:30.680
other static code analysis tools to figure out

23:30.680 --> 23:32.040
whether something is correct or not.

23:32.040 --> 23:35.880
So this actually happens at runtime.

23:35.880 --> 23:37.880
I don't know if that answers your question, so.

23:37.880 --> 23:41.520
Well, sort of, I guess.

23:41.520 --> 23:46.080
So you can't really put the typing types in here, let's say,

23:46.080 --> 23:48.000
because there is generics in there, of course,

23:48.000 --> 23:50.880
that would be highly convenient for matching.

23:50.880 --> 23:51.800
Right, right.

23:52.760 --> 23:58.760
I think that, I mean, in typing, you do have some actual

23:58.760 --> 24:00.720
Python type objects.

24:00.720 --> 24:02.720
Those you can use in here, right?

24:02.720 --> 24:10.480
But you cannot use the type annotation kind of syntax,

24:10.480 --> 24:13.760
for example, for matching an integer or something, yeah?

24:13.760 --> 24:14.760
No, it doesn't make sense, of course.

24:14.760 --> 24:16.080
That doesn't work.

24:16.080 --> 24:17.080
Thank you.

24:18.080 --> 24:23.080
Do we have any more questions?

24:23.080 --> 24:25.080
We have time for one last one.

24:25.080 --> 24:26.080
Yes, we do.

24:26.080 --> 24:27.080
Oh, my God, we have two.

24:27.080 --> 24:30.080
I'm going to the right side, because we haven't had

24:30.080 --> 24:32.080
many questions from there.

24:32.080 --> 24:33.080
I'm coming.

24:37.080 --> 24:38.080
Let's go.

24:38.080 --> 24:39.080
Thank you.

24:44.080 --> 24:48.080
So, yeah, maybe this is wishful thinking, but how difficult

24:48.080 --> 24:52.080
would be to implement or to provide, like, a match that

24:52.080 --> 24:57.080
will match not in order, but it will give me the best match?

24:57.080 --> 24:59.080
Would be that possible?

24:59.080 --> 25:03.080
Because, for example, I'm working in code generators for

25:03.080 --> 25:07.080
wrapping CAP from wrapping C into Python, and sometimes you

25:07.080 --> 25:08.080
can't do that.

25:08.080 --> 25:11.080
And from C++ goes over, function overload.

25:11.080 --> 25:14.080
So I can think, OK, I can have function overload to Python

25:14.080 --> 25:17.080
and translate that to a single function with match for

25:17.080 --> 25:18.080
different signatures.

25:18.080 --> 25:22.080
However, I will have to, I don't know, I need to know which

25:22.080 --> 25:27.080
is the best match for each case in order to order the match

25:27.080 --> 25:28.080
statement.

25:28.080 --> 25:31.080
Will it be possible to have that kind of logic embedded in

25:31.080 --> 25:34.080
Python, or that's too wishful thinking?

25:34.080 --> 25:38.080
You can try to do this by ordering the cases from, you

25:38.080 --> 25:42.080
know, the longest match to the shortest match.

25:42.080 --> 25:45.080
But apart from that, I think it's, this is actually a hard

25:45.080 --> 25:48.080
problem that you're describing there.

25:48.080 --> 25:51.080
Because if you want to, if you want to figure out what's the

25:51.080 --> 25:53.080
best match that you have, then you actually have to go

25:53.080 --> 25:55.080
through all the different cases that you have in here, and

25:55.080 --> 25:58.080
that's going to have different semantics than what you have

25:58.080 --> 26:00.080
now in the match statement.

26:00.080 --> 26:03.080
Usually the problem is like to know which is the most

26:03.080 --> 26:04.080
concrete type.

26:04.080 --> 26:06.080
Usually the problem that I have the most is like to know

26:06.080 --> 26:09.080
which is the most concrete type to the base type, so to

26:09.080 --> 26:12.080
that it matches the most concrete one instead of the base

26:12.080 --> 26:14.080
one, because it's like it can match us both.

26:14.080 --> 26:18.080
But in C or C++, it will always match the most concrete

26:18.080 --> 26:19.080
one.

26:19.080 --> 26:22.080
And if, and it's not there, it will get to the base.

26:22.080 --> 26:25.080
So, and for example, for now, it's like right now in Python

26:25.080 --> 26:28.080
I have no idea how I will solve that when I'm wrapping

26:28.080 --> 26:29.080
APIs.

26:29.080 --> 26:33.080
You can do that by ordering, like I said, you can order the

26:33.080 --> 26:36.080
case statement that you have here from the most, let's say,

26:36.080 --> 26:39.080
abstract one to the most concrete one, and sorry, the

26:39.080 --> 26:42.080
other way around, from the most concrete one to the most

26:42.080 --> 26:46.080
abstract one, and then like in the example I just gave where

26:46.080 --> 26:50.080
you have a list, yeah, when, if you pass in the Python list

26:50.080 --> 26:53.080
object, then it will match the first one.

26:53.080 --> 26:58.080
If you pass in, in this other example that I had here, if you

26:58.080 --> 27:05.080
pass in, let's say, a user defined sequence, then it will

27:05.080 --> 27:07.080
drop down and then match that one.

27:07.080 --> 27:12.080
So that's more abstract, right?

27:12.080 --> 27:14.080
Thank you very much, Mark.

27:14.080 --> 27:16.080
Another round of applause, Mark.

27:16.080 --> 27:17.080
Thank you.

27:17.080 --> 27:18.080
Thank you.

