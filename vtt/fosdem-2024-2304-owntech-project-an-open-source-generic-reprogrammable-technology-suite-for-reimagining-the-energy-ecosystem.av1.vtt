WEBVTT

00:00.000 --> 00:15.520
So, okay, we got the hard task to be the first one to speak, and so we failed.

00:15.520 --> 00:16.520
My name is Jean-LinÃ©ie.

00:16.520 --> 00:22.520
I'm the CEO and co-founder of OnTech, and today with Louis, we will discuss what we've

00:22.520 --> 00:26.680
done so far and what we are trying to achieve.

00:26.680 --> 00:35.280
So, we wanted to have a bit of a general introduction of how we see the energy and how it could

00:35.280 --> 00:38.440
become more and more open source over the years.

00:38.440 --> 00:43.880
The idea is that we see it as a pyramid with the bases being the power hardware and then

00:43.880 --> 00:51.160
having levels of sensors, real-time algorithms, industrial informatics, higher level in terms

00:51.160 --> 00:57.160
of communication, how we dispatch information from these devices on the field, what protocol

00:57.160 --> 01:04.160
we'll use, how we dispatch the energy among different power hardware, and then there is

01:04.160 --> 01:12.000
the highest level, which is like simulation, optimization, and modeling, forecasting, and

01:12.000 --> 01:15.320
so on.

01:15.320 --> 01:22.800
Today it's really exciting because if we look at what is it all about in this session, we

01:22.800 --> 01:29.280
have like plenty of amazing projects that are filling these pyramids, and it's really

01:29.280 --> 01:36.840
interesting because eventually we can reach that point where we have like the whole chains

01:36.840 --> 01:42.600
from the power hardware to the modeling, to the forecasting, to the optimization, through

01:42.600 --> 01:47.720
all the complexity as well of communication and protocols and so on.

01:47.720 --> 01:52.360
An interesting thing to note is that like the time constraints in the power hardware

01:52.360 --> 01:57.560
is not necessarily the same as the one for modeling and simulation for grid, for instance.

01:57.560 --> 02:06.840
So, the complexity associated with these things makes the informatics different, it's different

02:06.840 --> 02:13.560
fields between like the embedded world to the HPC and the modelization and optimization

02:13.560 --> 02:14.560
world.

02:14.560 --> 02:20.040
So, there is like an inherent complexity in the energy domain that is really interesting

02:20.040 --> 02:25.200
as a technical asset and thing to explore.

02:25.200 --> 02:29.600
And this is why I'm really excited today is that like in this session we are combining

02:29.600 --> 02:34.760
simulation, communication, hardware, and so it seems that we have already all the bricks

02:34.920 --> 02:38.360
and maybe tomorrow we'll build the pyramids.

02:38.360 --> 02:43.440
So we the energy people have the power to change the world and so I'm really excited

02:43.440 --> 02:46.440
about that.

02:46.440 --> 02:50.360
We'll let the floor of speech to Luis now.

02:50.360 --> 02:58.840
Thank you, Jean.

02:58.840 --> 03:03.160
And this pyramid is built with different bricks and these different bricks are hardware softer

03:03.240 --> 03:09.040
like Jean just said and hardware usually is hard until it isn't anymore, until somebody

03:09.040 --> 03:16.200
comes along and bundles the hardware somewhere and makes it ergonomic, makes it easy to use.

03:16.200 --> 03:21.400
That's what Arduino has done, that's what Raspberry Pi has done, Microbit has done it

03:21.400 --> 03:28.600
as well and they have inspired us to do that for power hardware.

03:28.600 --> 03:30.640
And that's what we have achieved.

03:30.640 --> 03:38.640
We have, there's a box there with one of our circuits and I'll pass it around a little

03:38.800 --> 03:41.240
bit later.

03:41.240 --> 03:47.360
We propose a community based compact versatile open source and low cost technology for learning

03:47.360 --> 03:49.880
and prototyping power electronics.

03:49.880 --> 03:54.800
That's the goal, that's what we want to achieve.

03:54.800 --> 04:01.520
The idea here is to create a technological sandbox just like Raspberry Pi, just like Arduino

04:01.520 --> 04:06.520
have something that is standardized, that is simple to use, that can be used by academia

04:06.520 --> 04:12.200
for teaching, can be used by industry for fast prototyping or for using in other applications

04:12.200 --> 04:17.640
for makers and fab lads to make fun stuff and burn it.

04:17.640 --> 04:22.920
And this is the place where we hope to foster new ideas and come up with new talents, people

04:23.000 --> 04:28.600
who are willing to build electric bicycles, people who want to build a microgrid, who

04:28.600 --> 04:35.120
want to understand how it works and put together the bricks and build the hardware upon which

04:35.120 --> 04:41.400
they can test their forecasting algorithms or test in their models.

04:41.400 --> 04:48.400
Now, how does, starting to get a little bit under the hood, how does power hardware work?

04:49.400 --> 04:55.760
If we look at it from the perspective of a functional analysis, the power is really

04:55.760 --> 04:58.280
the red arrow in the corner.

04:58.280 --> 05:04.320
And to get that arrow to work as we want, we have all these different arrows in the middle.

05:04.320 --> 05:10.640
And if we take a top down approach where we come, we did a forecasting, we did a simulation

05:10.640 --> 05:15.720
which allowed us to do a forecasting, which allowed us to do, to calculate an energy management

05:15.720 --> 05:21.120
strategy which we then send via dispatch through a protocol all the way to the target.

05:21.120 --> 05:28.120
And when it gets to the target, it gets here through the communication backdoor or frontdoor.

05:28.120 --> 05:32.000
And that goes into the industry informatics and the control systems which are operating

05:32.000 --> 05:39.000
in real time, locked into this micro or nanosecond level loop.

05:39.600 --> 05:44.280
It also receives measurements from its own embedded sensors, but these are not normal

05:44.280 --> 05:47.600
sensors that we come in interrogate via Laura once a week.

05:47.600 --> 05:53.360
Or these are sensors which are sending information at a one megahertz bandwidth which you are

05:53.360 --> 06:00.360
sampling at 50 microseconds or sampling at a very, very precise moment as well.

06:01.200 --> 06:07.600
These combined the control with the algorithms that are in here, they create the low level

06:07.600 --> 06:12.080
electric signals which then go there and trigger the power electronics for them to work the

06:12.080 --> 06:14.120
way you want them to.

06:14.120 --> 06:17.160
And then the loop is closed and the thing works.

06:17.160 --> 06:20.200
There's a little fiddler secret in the middle, never forget it, the energy has to come from

06:20.200 --> 06:27.200
somewhere so sometimes if that little fiddler secret fails, the whole thing stops.

06:27.800 --> 06:33.760
So everything kind of stands on the choice of the little component that you made when

06:33.760 --> 06:36.520
you put that little fiddler secret there somewhere.

06:36.520 --> 06:41.240
And what we did is that we got all the stuff, we put it into a board and you have all the

06:41.280 --> 06:44.760
different blocks which are somewhere bundled there together.

06:44.760 --> 06:48.680
But you don't have to understand to that level of complexity unless you want to.

06:48.680 --> 06:55.180
You see the communication coming in and the power going out, that's it.

06:55.180 --> 06:58.760
And that's the idea.

06:58.760 --> 07:00.840
We have two products.

07:00.840 --> 07:06.840
We have one which is a power product, the twist board which uses the second product,

07:07.440 --> 07:09.360
a passage to talk about.

07:09.360 --> 07:15.000
The twist board is a module which we can then either rack up together so we pick several

07:15.000 --> 07:19.680
twists, we put them together and that allows us to handle more power since they synchronize

07:19.680 --> 07:21.080
and communicate with each other.

07:21.080 --> 07:24.040
It's a linear progression.

07:24.040 --> 07:28.400
The more twists we put together, the more power we can handle.

07:28.400 --> 07:34.880
And we created a communication bus at the low level which can talk in CAN, can talk in

07:34.960 --> 07:39.880
NRS 485 so we can talk at the millisecond, we can talk at the microsecond and we can

07:39.880 --> 07:41.560
talk at the nanosecond with analog.

07:41.560 --> 07:46.640
So we have different bandwidths which we can dispatch with through different communication

07:46.640 --> 07:50.360
methods and protocols.

07:50.360 --> 07:55.880
And we have the spin board which I'll let Jean present you.

07:55.880 --> 08:02.320
So eventually in order to control power hardware so fast you need like some special embedded

08:02.320 --> 08:03.880
microcontroller.

08:03.880 --> 08:07.280
And this microcontroller has some real time constraints to it.

08:07.280 --> 08:11.440
So it's not a regular Arduino or Raspberry Pi that will do the job.

08:11.440 --> 08:16.200
If you want to have good performances you need really precise timers, really special

08:16.200 --> 08:20.360
communication peripherals.

08:20.360 --> 08:26.760
And so eventually we came up with designing our own board which is like the spin board.

08:26.760 --> 08:33.760
The spin board is both a piece of hardware that looks a bit like an Arduino Nano or a

08:33.960 --> 08:35.720
Raspberry Pi Pico.

08:35.720 --> 08:42.080
And this thing has tremendous resolution for its PWM signals, so the driving signals

08:42.080 --> 08:49.080
that will eventually drive the power stage, but also a really flexible acquisition of

08:49.080 --> 08:49.600
signals.

08:49.600 --> 08:55.760
So it will connect with the analog signals on the board.

08:55.760 --> 09:02.760
Eventually microcontrollers are great only if they work together with great ergonomics

09:03.040 --> 09:08.360
and coding a microcontroller can become either a nightmare, either a piece of cake, depending

09:08.360 --> 09:13.440
on what is the software and the ideas that you use to do so.

09:13.440 --> 09:20.440
So we wanted to comply with the maker movement mindset where you basically take a piece of

09:22.480 --> 09:28.480
microcontroller, you plug it with USB to your computer and you start coding in seconds

09:28.480 --> 09:29.560
and minutes.

09:29.560 --> 09:34.560
You don't have to install all the tool chain and so on and everything is done by the ID

09:34.560 --> 09:40.120
itself, so without the complexity to set and so on.

09:40.120 --> 09:47.120
In order to do so we use platform IO together with visual studio code so it's a really seamless

09:47.680 --> 09:50.640
experience for the developer.

09:50.640 --> 09:56.200
But also we have IO level of development that is possible for MATLAB for simulation people

09:56.240 --> 10:03.240
that want to deploy some control loops and control those directly in the target.

10:03.440 --> 10:10.440
They can do so through an IO level of graphical coding, let's say.

10:14.320 --> 10:21.320
And those are there is something from the Linux foundation, the FliarHartus that is providing

10:22.200 --> 10:26.720
a framework on top of which we've built APIs.

10:26.720 --> 10:33.720
So these APIs are calls that are basically making things seamless for the user so that

10:33.720 --> 10:38.040
you don't have to go through the hassle of the 2,000 pages of the microcontroller in

10:38.040 --> 10:40.560
order to program the power hardware.

10:40.560 --> 10:46.360
You have like high level functions that relates to the power world, so okay, what is the duty

10:46.360 --> 10:52.600
cycle, what signals I want on that MOSFET or directly related to the application.

10:52.600 --> 10:59.600
I want to increase the voltage, I want to decrease the voltage so I can go in my level

11:00.920 --> 11:06.000
of complexity in the language I talk daily and I don't have to go through documentation

11:06.000 --> 11:08.920
and things like that.

11:08.920 --> 11:10.560
So we have different APIs.

11:10.560 --> 11:15.080
One is the microcontroller API if you want to develop your own hardware, your own power

11:15.360 --> 11:19.040
hardware and control it through the spin board, you can do so.

11:19.040 --> 11:26.040
Or you can directly call another API that is built for the power hardware that we provide

11:26.360 --> 11:29.200
as well with the spin module.

11:29.200 --> 11:35.040
So this way you can call functions and not signals.

11:35.040 --> 11:39.760
And then there is a communication API, how to synchronize things with the surrounding

11:39.760 --> 11:45.000
world and task APIs to say okay, I want to dedicate that amount of time to do this calculation

11:45.440 --> 11:52.440
and that amount of time to do communication or higher level housekeeping stuff.

11:52.440 --> 11:57.520
And then there is a user code that is basically your main as in a not doing no experience,

11:57.520 --> 12:00.040
let's say.

12:00.040 --> 12:05.120
So this is the pinout.

12:05.120 --> 12:11.440
Of course everything is open source, so the hardware itself is a CERN HL license based.

12:11.440 --> 12:18.440
The idea here is to push people to share back the modification so that we can move on with

12:18.760 --> 12:22.000
a better and better hardware of the time.

12:22.000 --> 12:29.000
Of course all the documentation is Creative Commons, all the interfaces and the graphical

12:29.000 --> 12:32.560
stuff is GPL.

12:32.560 --> 12:38.080
And we have like a dataware and something that you can plug and see like the data live

12:38.200 --> 12:43.760
like if you were having a kind of a low bandwidth oscilloscope just by plugging your USB cable

12:43.760 --> 12:48.920
and gathering your data from the device directly.

12:48.920 --> 12:55.920
In order to make that thing happen, like we've created a foundation that is under the

12:56.320 --> 13:01.040
Aegis of the Seniors Foundation, so it's a National Council of Research in France that

13:01.040 --> 13:05.920
has put a ton of effort into making this thing a reality.

13:05.960 --> 13:12.960
So we got a lot of support from a public lab in France and this is where it comes from.

13:13.760 --> 13:16.520
And so the foundation is holding the IP.

13:16.520 --> 13:22.680
So if you want to contribute to this project, everything will be under a dedicated foundation

13:22.680 --> 13:28.680
that has strict rules to enforce the open source vibes of the project forever, forever

13:28.680 --> 13:29.800
one.

13:29.800 --> 13:33.640
And then there is a startup that is basically providing the hardware because if you want

13:33.680 --> 13:40.680
to develop things, you need someone to be able to provide the hardware to go fast basically.

13:45.080 --> 13:52.080
And yeah, so on the foundation side, we create tutorials, content, MOOCs and we make that

13:52.080 --> 13:53.880
thing available online.

13:53.880 --> 13:56.600
So we create an online space for that.

13:56.600 --> 14:03.600
We also coordinate a small embryo of community at the moment, but we hope that it will be

14:03.640 --> 14:10.640
more vivid and for some international collaboration around these fields of power for energy.

14:10.680 --> 14:17.680
And also we are starting to organize training sessions and events to answer local needs

14:17.920 --> 14:22.920
and the idea is to spread and to make things decentralized in a way that everyone can tackle

14:22.920 --> 14:29.080
its needs of energy with this kind of Arduino for energy thing.

14:29.080 --> 14:34.520
So to give an example of the first use case, at the moment we are working on a use case

14:34.520 --> 14:40.640
with a fully open source e-bike and in this e-bike you have inverters, you have battery

14:40.640 --> 14:47.640
chargers, BMS system in order to monitor all the cells of the battery, converter as well

14:47.880 --> 14:50.560
for the PV panel on the roof.

14:50.560 --> 14:55.280
And so we are collaborating with our great open source hardware projects such as Libre

14:55.280 --> 15:01.160
and Vosola and we are aiming at replacing all these closed source pieces of converters

15:01.160 --> 15:08.160
inside of this e-bike and make it fully open source A to Z from the smallest piece of electronics

15:08.160 --> 15:14.280
to the frame to the bike itself.

15:14.280 --> 15:21.280
So yes, that's it for me and hopefully Luis will be able to make a demo in five minutes.

15:22.280 --> 15:28.280
Yeah, maybe we can combine with a question.

15:31.960 --> 15:38.960
And how much? Sorry, can we buy the boards and how much?

15:41.080 --> 15:46.000
We started producing so we have our own pick and place machine so everything is made in

15:46.120 --> 15:52.280
France at the moment, assembled in France. So we have started assembly, we have shipped

15:52.280 --> 15:58.880
our first eight boards to a university in France for students. They haven't destroyed

15:58.880 --> 16:02.080
the boards yet so it's a good sign.

16:02.080 --> 16:09.080
And so we have pre-orders at the moment and so to give an insight of the price at the

16:09.080 --> 16:16.080
moment the power module is 300 euros and the microcontroller is 45, 49 euros.

16:24.120 --> 16:30.620
Can it be used in a full tour around the architecture?

16:30.620 --> 16:36.000
So yeah, to answer that really fast maybe I will come up back to that slide. So one of

16:36.000 --> 16:41.520
the strengths of the modular approach is that we've put a lot of effort into making

16:41.520 --> 16:46.720
different modules, being able to share power loads and share communication. And it's a

16:46.720 --> 16:52.840
good thing for fault tolerance because if you go modular, if a module fail you can think

16:52.840 --> 16:59.840
of clever ways of replacing the faulty modules with another module.

17:00.840 --> 17:06.840
Yeah, just one, an application is a complete autonomous, energy autonomous for electricity

17:08.600 --> 17:15.600
home with wind power, a little solar panels for the voltaic, also bicycle with electric

17:17.360 --> 17:24.360
assistance and so on. So also for with low tension DC for computers and something else

17:25.360 --> 17:32.360
and high tensions AC and also taking account of the day of the day, the battery charging

17:34.720 --> 17:41.720
with lead, battery charging with lithium or lithium, I don't know, something like that.

17:43.160 --> 17:49.640
So definitely off grid applications are key and also for energy independence and so on.

17:49.640 --> 17:54.800
At the moment the module that we've developed is DC based, so it's DC to DC. It has a really

17:54.800 --> 18:01.000
wide range of operation between 90 volts down to 10 volts also. So it complies with all

18:01.000 --> 18:08.000
battery technologies from 12 volt batteries, 24 volt batteries, 48 and 90, like 86 volt

18:08.240 --> 18:14.440
batteries. So it covers a range of battery application let's say. In the future our goal

18:14.440 --> 18:21.440
is this kind of grid applications and home and energy independence is to go for a microinverter

18:22.520 --> 18:28.240
basically and this will be made by combining different modules. So this one is a DC module

18:28.240 --> 18:35.240
and then we'll add an AC connection on top in order to cover this off grid applications

18:35.520 --> 18:42.520
and energy independence. There is one in the back.

18:42.520 --> 18:49.520
Could you create also some BMS or open source?

18:50.920 --> 18:56.040
So we haven't developed a BMS but that is already covered by the hardware from Libre

18:56.040 --> 18:59.040
Solar I think.

18:59.040 --> 19:06.040
Hello, it's a bit of an implementation question. So you are using Canvas, so you are using

19:12.520 --> 19:19.520
Canvas for now. Maybe it's because the automotive world is using it. I was wondering if you

19:20.680 --> 19:26.480
were thinking about moving to something like T1S. I'm not sure you're familiar with that.

19:26.480 --> 19:33.480
It's kind of Ethernet but with the CAN topology, so multi-drop. So it's really nice and kind

19:33.480 --> 19:40.480
of microcontroller friendly and IP based by thanks to Ethernet. So I was wondering if

19:40.480 --> 19:48.480
you were kind of thinking about it.

19:48.560 --> 19:54.480
So yeah, we thought about it because Ethernet is as great features but it tends to be costly.

19:54.480 --> 20:00.680
The idea is to go like to lower a bit down the cost of the overall communication architecture

20:00.680 --> 20:07.680
and so on. Yet we are making things like to the biggest extent modular in a way that

20:09.600 --> 20:14.640
if you want to plug a different way of communication you can do so. You can access all the pins

20:14.640 --> 20:20.240
of the microcontroller that we have. Maybe in the future we will make it think we will

20:20.240 --> 20:24.040
support different microcontrollers as well that will have more features and more peripherals

20:24.040 --> 20:28.800
but at the moment it's not planned. We have like two different things. CAN is for housekeeping

20:28.840 --> 20:35.840
and sending average data. And RS485 is for superfast communication. So we go at 20 megabits

20:38.920 --> 20:45.920
with RS485. So it's a bit uncommon but it permits to have like one cycle of control

20:46.560 --> 20:52.880
communication with different modules. So they can share one reference and a set point but

20:52.880 --> 20:59.880
also measurements among multiple modules still at 10 kHz control frequency for instance.

21:04.880 --> 21:07.880
No? Sorry, no demo.

21:07.880 --> 21:14.880
Can I convey it for you guys? We are here the whole day but the thing just crashed of course.

21:14.880 --> 21:15.880
Of course it did.

21:15.880 --> 21:16.880
Demo effect.

21:16.880 --> 21:21.880
Demo effect but I would like to just share something with you though.

21:21.880 --> 21:24.880
I can hear you online.

21:24.880 --> 21:29.880
But I would like to share something with you. Can we get into a...

21:29.880 --> 21:30.880
Yes.

21:30.880 --> 21:31.880
Yes.

21:31.880 --> 21:36.880
So we do have a...

21:36.880 --> 21:43.880
We do have a GitHub and what I wanted to show you is that on our own tech foundation GitHub

21:54.880 --> 22:01.880
there are sample codes, the examples of the data that we have.

22:01.880 --> 22:08.880
And in the example repository we have multiple different examples of how do we use the twist

22:17.880 --> 22:24.880
board at different applications, DC to DC, microgrid, AC. What I wanted to show you, the demo that I failed miserably to achieve,

22:25.880 --> 22:32.880
was the microgrid. So what is that supposed to look like if we get the peer to peer AC microgrid?

22:43.880 --> 22:50.880
We have the documentation. How to connect the boards together.

22:54.880 --> 23:01.880
And the communication that goes here. And these two boards then will work together to share power.

23:04.880 --> 23:12.880
In this case it's a peer to peer exchange. So one board is drawing power while the other is supplying.

23:12.880 --> 23:21.880
And this is actually data from the board itself. That means that we can ask the power converter to sample very quickly data.

23:22.880 --> 23:29.880
And keep in its memory and then we can retrieve it later. So we can do this kind of test where we get...

23:32.880 --> 23:37.880
Every point is about five microseconds apart so we can get a lot of resolution and see what's going on.

23:37.880 --> 23:44.880
It's offline because we do it after the work but it still works like that.

23:45.880 --> 23:51.880
And for the DC-DC side, same thing, we had the DC...

23:58.880 --> 24:02.880
Comes up. Okay. We have the different structures and different examples. They are there.

24:02.880 --> 24:08.880
So we invite you to go there, take a look at our Github. Take a look at the spin board. It's there. It's in Kaikaa.

24:08.880 --> 24:17.880
The twist board as well. And if you want to talk with us during the day, I have everything that I would need normally for a demo.

24:17.880 --> 24:19.880
And we can just sit down and do it together.

