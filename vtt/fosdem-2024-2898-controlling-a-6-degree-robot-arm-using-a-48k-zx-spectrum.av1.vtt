WEBVTT

00:00.000 --> 00:20.120
So, please take a seat and be quiet.

00:20.120 --> 00:25.080
We start with the, unfortunately, I already did the last talk for this deaf room today

00:25.080 --> 00:31.080
with Rui who's talking about controlling a robot using ZX Spectrum.

00:31.080 --> 00:32.080
Okay, thank you.

00:32.080 --> 00:40.600
So, that's my name, if you need to contact me on top.

00:40.600 --> 00:46.560
I'm a software developer by profession and I do weird stuff on my hobby time.

00:46.560 --> 00:48.560
So let's start with this.

00:48.560 --> 00:58.560
So, we will talk about all these subjects because this was a project that took about 11 months to do in part time.

00:58.560 --> 01:02.560
So, we have little time so let's go through it.

01:02.560 --> 01:08.560
So, how this started in the beginning, I'm part of the LogZX Spectrum Museum.

01:08.560 --> 01:16.560
I'm an active member and the idea was we had a stand in 2022 on Lisbon Games Week,

01:16.560 --> 01:20.560
which is a show that talks about games and stuff like that.

01:20.560 --> 01:25.560
And we had this stand and we wanted to actually have more people on the stand.

01:25.560 --> 01:33.560
And if you can see on the right side of that photo, there was a bunch of arcade machines next to it.

01:33.560 --> 01:36.560
And that attracts a lot of people.

01:36.560 --> 01:41.560
And there was also this kind of claw machine that allows you to pick up stuff.

01:41.560 --> 01:47.560
And since it was free stuff, people was packing in a line just to go to that machine.

01:47.560 --> 01:55.560
So, the idea is we want that, we want to have a lot of people to go to our stand and make it more successful.

01:55.560 --> 02:01.560
So, I somehow convinced the guys that we should do something about it.

02:01.560 --> 02:06.560
And so, we set these goals that we want to attract people to the stand.

02:06.560 --> 02:13.560
We want to actually make something like a claw or something similar, then end it up as a robot arm.

02:13.560 --> 02:19.560
And we would like to also create a game that integrates with the robot arm to be more interactive.

02:19.560 --> 02:23.560
So, I managed to convince them that this was possible.

02:23.560 --> 02:30.560
A tip for you guys is bring the right t-shirt and then be crazy enough and they will trust you.

02:30.560 --> 02:36.560
So, what was the plan is to use a 48K spectrum and a robot arm.

02:36.560 --> 02:44.560
And we need to find one that doesn't break the bank because they are expensive machinery.

02:44.560 --> 02:56.560
And we want finally to integrate it with basic so that we can program directly in basic without having to know the specifics of the robot in particular.

02:56.560 --> 03:07.560
So, our plan was really simple. So, we have a spectrum, we find a robot arm and then we send some data to it and we receive some data to it and it's easy, right?

03:07.560 --> 03:12.560
Not really because that's the big problem to solve.

03:12.560 --> 03:16.560
So, what I did was found a robot arm.

03:16.560 --> 03:23.560
So, we found this lab vault 50 to 50 that is discontinued already about 2002 or 2003.

03:23.560 --> 03:30.560
And I bought it online for a fair amount but it was missing some stuff.

03:30.560 --> 03:36.560
Basically, the emergency stop button was not available which is the problem.

03:36.560 --> 03:47.560
And that little thing that is very useful is called the pendant and it's not available, they don't sell it anymore and I can't find one if you have one contact me.

03:47.560 --> 03:51.560
Okay, so that simplifies the coding of the robot by the way.

03:51.560 --> 04:05.560
So, it has two serial interfaces, one binary one, one text based and the binary one, since there is no official documentation for it because it was a closed source system.

04:05.560 --> 04:10.560
There is a research paper that actually did the reverse engineering of it.

04:10.560 --> 04:15.560
You can find it here but it seemed more complex and harder to debug.

04:15.560 --> 04:30.560
So, I went for the text based one which fortunately has a help command that helps a little bit out to actually interface with it and it's better for actually debugging it with the commands and try to understand how it works.

04:30.560 --> 04:34.560
So, some reverse engineering was needed.

04:34.560 --> 04:41.560
So, the first thing that was needed is determined that the protocol is actually, the text protocol is actually bidirectional.

04:41.560 --> 04:53.560
So, we need to send commands and get actually some data back and finding exactly what is the setup for the serial communication between the robot, the controller of the robot arm.

04:53.560 --> 04:56.560
So, that means that we can update our plan.

04:56.560 --> 05:09.560
So, we have a spectrum anyway. Now, we have this specific robot which has a specific controller and this controller has a lot of interfaces to simulate cells like industrial cells and communication with other robots.

05:09.560 --> 05:25.560
But, we will use the simple part. So, basically what this does is send controls to the motors of the robot arm and get some feedback from it like encoders feedback position where each of the parts of the arms are.

05:25.560 --> 05:35.560
So, what we need to do is come up with something that actually communicates with the robot. So, this is our goal and we know that this has to work with serial interface.

05:35.560 --> 05:49.560
So, why do we need one? Because there was something called Sinclair interface one and I don't know if you guys know about it but it says something from Sinclair and it was BitBang.

05:49.560 --> 06:00.560
This means that the software is actually hitting the bits of the hardware just to find out the protocol, the serial protocol which is very expensive in runtime.

06:00.560 --> 06:09.560
And it doesn't have a standard pinout which is a brand mark of Sinclair incompatible with everything and then you know you have to sell your own stuff.

06:09.560 --> 06:13.560
It reminds me another company, Apple.

06:13.560 --> 06:24.560
So, there is another option which is a Spectrum 138K but again it's a BitBang interface and it has a very weird connector that is hard to find nowadays.

06:24.560 --> 06:33.560
And all of those that exist, pre-exist have the same problem. They are BitBang which means it will steal us a lot of CPU.

06:33.560 --> 06:39.560
And since the Spectrum is 3.5MHz, we need to help it and not make it difficult.

06:39.560 --> 06:47.560
And we wanted to actually use the iconic Spectrum 48K to just be sure that it works with this one.

06:47.560 --> 07:04.560
So, our updated plan is to actually build some hardware to actually do that and have a serial reward in hardware that will eventually also do flow control so that we don't lose with buffer overflows and stuff like that.

07:04.560 --> 07:12.560
So, that means that we have to implement that interface that goes into the socket of the Spectrum and then actually do the communication.

07:12.560 --> 07:29.560
Besides this, since nowadays we don't like to work with cassettes to put the software in, it's better to actually find another interface and DivMMC is one good one for that because it allows you to have SD card with your software.

07:29.560 --> 07:42.560
And more importantly, it allows you to actually have an extra port behind so that you can plug the device that you are developing to because there is no emulators here, the hardware is new.

07:42.560 --> 07:45.560
We have to actually try it on the hardware.

07:45.560 --> 07:49.560
Okay. So, how do we build that?

07:49.560 --> 07:55.560
So, we know that there is the Spectrum interface bus that has all the data lines and control lines that we need.

07:55.560 --> 08:06.560
We need to actually define an address decoder so that we can actually access, read and write all the registers from the expected UART.

08:06.560 --> 08:12.560
So, it needs to define, enable, read and write so that you can actually control that ship.

08:12.560 --> 08:18.560
That ship will get data and control and configuration from the 8-bit bus.

08:18.560 --> 08:26.560
It needs some kind of crystal so that it has a stable clock signal and in this case it was chosen to be 16 MHz.

08:26.560 --> 08:38.560
And then we need a line driver, something that will actually convert the 5 volts that we have on the board or connected to the Spectrum to the minus 12 and plus 12 that we actually need for the serial line.

08:38.560 --> 08:48.560
And then we will do communication and transmit and receive and we also want to do RTS and CTS and shake for flow control by hardware.

08:48.560 --> 08:57.560
Okay. So, like the other colleague said a few sessions ago, this was what was in the drawer.

08:57.560 --> 09:05.560
So, it's this old PAL encoder chip for decoding logic or making logic expressions.

09:05.560 --> 09:12.560
It allows for 9 input lines and 8 input or output but with some tweaks you'll see later why.

09:12.560 --> 09:26.560
So, then select the UART chip that has at least 2 UARTs and by some luck it has at least 64 bytes of buffers which will save us in the long run.

09:26.560 --> 09:39.560
You'll see why. And we managed to work it with 16 MHz and then we need a pump driver to actually give us the right amount of voltage on the output like I said.

09:39.560 --> 09:54.560
And the max the 238 just because we need 4 inputs and 4 output lines because we are only checking the lines that we actually need and not implementing the entire setup of RS-232 or serial protocol.

09:54.560 --> 10:03.560
But we can do it later. So, this is the actual schematic. It's not complex but I'm not going through it. You can later see and check the GitHub.

10:03.560 --> 10:10.560
Okay. And so, this is the... We need 8 address lines or sorry, 8 registers for controlling the work.

10:10.560 --> 10:14.560
It has a lot more registers but only needs 8 addresses.

10:14.560 --> 10:30.560
And there is a special concern here because the spectrum has the ULA which is what makes a spectrum a spectrum that maps the port 254 as its control port but it only actually uses the address A0 as being 0.

10:30.560 --> 10:38.560
So, every even address is reserved for the ULA. So, we need to use an address that is even. Sorry, odd.

10:38.560 --> 10:49.560
And so, we will hop every odd port between 0 and 15 for the first comm and between 16 and 31 for the second comm.

10:49.560 --> 10:56.560
We have to be mindful that port 31 is being used by Kempion and Logistic.

10:56.560 --> 11:05.560
So, if you want this to be compatible, we still have to change this. My plan is to use something like an index register like we used to have in VGA cards and stuff like that.

11:05.560 --> 11:08.560
So, we'll use only 2 registers.

11:08.560 --> 11:15.560
So, this is the prototype board. I have it here if you want to take a look after this.

11:15.560 --> 11:29.560
And so, mapping what we said before, there is the interface bus, there is the address decoding logic with the PAL and there is the UART with 2 serial UARTs in there, the crystal, and we have the line driver.

11:29.560 --> 11:39.560
And here you will see the hack that we had to do because PAL didn't exactly allow us to program every combination.

11:39.560 --> 11:45.560
So, we had to do a workaround and there is a small cable in the back hiding the hack.

11:45.560 --> 11:48.560
But we can fix that later.

11:48.560 --> 11:52.560
So, how do we interface this with basic?

11:52.560 --> 11:57.560
For the time, Spectrum was at pretty advanced concepts.

11:57.560 --> 12:02.560
Basically, channels is a new concept.

12:02.560 --> 12:07.560
Back then, that is basically the equivalent of a device driver.

12:07.560 --> 12:15.560
So, you can plug in new drivers if you do the right thing into the ROM and into the system variables.

12:15.560 --> 12:25.560
The advantage of having this is that we have an abstraction layer that then allows us to use the devices and allows basic to actually control them as expected.

12:25.560 --> 12:34.560
So, this just keeps this kind of information, the input output routines and the special ID so that you can ask for it specifically.

12:34.560 --> 12:39.560
Besides channels, we have some other advanced concepts, concept that is streams.

12:39.560 --> 12:44.560
And streams is just a way to actually do the same we do today with streams.

12:44.560 --> 12:59.560
It's just a byte stream that can go as input or output and you just address it by ID and you actually create an instance of the channel or an instance of using that specific driver for that hardware.

12:59.560 --> 13:08.560
So, again, this allows integration with basic so we can use those commands and directly without actually having to know how it actually works.

13:08.560 --> 13:18.560
To know this, we have to actually understand how this abstraction layer is implemented and there is a very good book which is the Spectrum Disassembly, the ULI,

13:18.560 --> 13:27.560
and explains in detail, but you have to go really deep down to understand how it works, but that's the solution to actually make this work.

13:27.560 --> 13:37.560
So, by default, the ROM basic creates four channels, the keyboard, the screen, workspace or scratch, internal buffer and four printer.

13:37.560 --> 13:49.560
And we can add more channels to this, although the original ROM had the bug and didn't work except for these four, so it needs to be extended.

13:49.560 --> 13:59.560
But if you reserve the memory in the right places in the system calls, it works as expected if you replace the open and close routines.

13:59.560 --> 14:16.560
It has also defined a lot of streams by default and we can have up to 19 streams, but we should only mess with the last 15 because the others are internal and I wouldn't advise to actually change one and two because it can also mess the basic.

14:16.560 --> 14:30.560
So, after a lot of headbanging and problems, including during the event, it was able to actually have a working version with transmit and receive integrated with the ROM.

14:30.560 --> 14:36.560
So, we have two new channels named one and two for COM one and COM two.

14:36.560 --> 14:45.560
And like I said, we need to have an open close, a new stream to, sorry, routine for that stream.

14:45.560 --> 14:58.560
Currently, the coding GitHub is hard coded, so we can actually change the parameters for the ward because it was quick and dirty and we had to actually make it work for the event.

14:58.560 --> 15:01.560
And you'll see why in a bit.

15:01.560 --> 15:09.560
And we also have our code of the parameters to actually set up the serial line.

15:09.560 --> 15:20.560
So, what we did in the driver is to actually define, like I said, two new channels with ID one and two that correspond to COM one and COM two.

15:20.560 --> 15:24.560
And we need to properly reserve memory for that.

15:24.560 --> 15:38.560
So, regarding the robot controller, that big box that comes with the robot, it actually controls the motors, the feedback from the encoders and the limit switches so that the robot arm doesn't just blow up to the side.

15:38.560 --> 15:51.560
And it does the movement integration when you go from position A to position B as it needs to integrate all the several axes so that it ends in the right position.

15:51.560 --> 15:59.560
And it has a bunch of protocol commands that we need to actually interact with.

15:59.560 --> 16:01.560
So, these are some of them.

16:01.560 --> 16:08.560
So, the program Rdome reset, it needed to actually position the robot from the beginning.

16:08.560 --> 16:15.560
The torque and tree is just to release the motor so that you can position the robot by hand, which is very useful.

16:15.560 --> 16:20.560
Then run is to actually move at a certain speed to a specific position in all axes.

16:20.560 --> 16:26.560
And get port and set port is just basically to be able to interact with other systems.

16:26.560 --> 16:31.560
In particular, the programmatic system that was implemented.

16:31.560 --> 16:36.560
So, what did we need to do?

16:36.560 --> 16:39.560
The first application was to actually control the robot.

16:39.560 --> 16:48.560
So, we made a small application in basic that did some commands and then it did some move commands with the run command in a text.

16:48.560 --> 17:02.560
And it had a special menu that allows us to actually define and list a bunch of points so that we can then work the robot like a puppet and position the several positions that we want.

17:02.560 --> 17:06.560
And we just have a list and we go through that list according to some specific order.

17:06.560 --> 17:17.560
So, we can list and you can save these in particular and we can also define each of the axes and then position the robot in real time.

17:17.560 --> 17:25.560
Okay, next we need to implement the pneumatic reaper to make it more fast to be used in the event.

17:25.560 --> 17:36.560
So, it consists of a suction cup, a motor that creates the vacuum and a valve that actually releases the vacuum so that you can release the parts.

17:36.560 --> 17:41.560
And then this was the first version working in the test bench.

17:41.560 --> 17:46.560
But as usual, nothing works correctly when we plug all in, right?

17:46.560 --> 17:48.560
So, the robot didn't have enough power.

17:48.560 --> 17:52.560
So, as soon as we tried to use it, it just didn't work.

17:52.560 --> 18:01.560
I had to add a special extra relay and put some extra power from the outside so that we can actually integrate this new model.

18:01.560 --> 18:04.560
That's the cable you see there, like here.

18:04.560 --> 18:12.560
It's having to plug in more power so that I could have the pneumatic thing working.

18:12.560 --> 18:16.560
And next.

18:16.560 --> 18:20.560
So, besides that, this was a live event.

18:20.560 --> 18:29.560
So, there were kids around that were people around and they could put their hands near the robot and that will mean that someone could get hurt.

18:29.560 --> 18:32.560
So, we had to define a display stand.

18:32.560 --> 18:35.560
So, I designed this also to support the extra weight of the robot arm.

18:35.560 --> 18:40.560
Here you can see the first iteration of it.

18:40.560 --> 18:46.560
And you can see that's a kitchen cabinet that was later transformed to look nicer.

18:46.560 --> 18:52.560
On this one, you can see actually setting up the stand in the event.

18:52.560 --> 18:58.560
You can probably recognize that t-shirt from previous years on Fosdom.

18:58.560 --> 19:08.560
And as you can see on the right, sorry, on the center now, I was still hacking during the event to make it work because transmit was actually working fine.

19:08.560 --> 19:16.560
But receive was sometimes not triggering the right sequence because there was an issue with the ROM.

19:16.560 --> 19:21.560
It didn't like carriage returns for some reason to hacky around it.

19:21.560 --> 19:30.560
So, and then this was when it was already working and doing some interesting stuff just to try it out.

19:30.560 --> 19:37.560
So, then I developed the tic-tac-toe program that was inspired around Wargames movie.

19:37.560 --> 19:42.560
And tried to make it as educational as possible.

19:42.560 --> 19:52.560
So, the top is the tic-tac-toe is drawn using lines and commands from basic and then using UDGs or user developer graphics from basic.

19:52.560 --> 19:54.560
And then you can actually play the game.

19:54.560 --> 20:00.560
But it's not yet integrated with the robot movements because it was not possible in the time frame.

20:00.560 --> 20:05.560
So, it should be another two days work or something once I have the time to go for it.

20:05.560 --> 20:12.560
So, I would like to show you a simple video.

20:12.560 --> 20:16.560
Quick one because I don't have much time.

20:16.560 --> 20:18.560
So, the robot is moving.

20:18.560 --> 20:23.560
I'm with my hands on the spectrum controlling it and giving some inputs.

20:23.560 --> 20:28.560
And then trying to move and actually confirm that the suction is actually working.

20:28.560 --> 20:32.560
So, you'll see that the suction will actually grab the part.

20:32.560 --> 20:39.560
And I will be a lot happier when this started working.

20:39.560 --> 20:48.560
Okay.

20:48.560 --> 20:53.560
So, something like this is something that you don't do alone or is in isolation.

20:53.560 --> 20:58.560
So, I had a bunch of friends and people from the museum that somehow helped.

20:58.560 --> 21:02.560
And a special guest that came up to the fair, which also helped.

21:02.560 --> 21:04.560
It was really fun.

21:04.560 --> 21:12.560
So, we do this kind of stuff to enjoy ourselves and we cherish these moments and the legacy that is behind it.

21:12.560 --> 21:16.560
And you should do this to enjoy yourself.

21:16.560 --> 21:19.560
So, this is the end.

21:19.560 --> 21:26.560
If you have any questions, you can see the GitHub repository and fire away any questions you have.

21:26.560 --> 21:28.560
I'll give you a few minutes for questions.

21:28.560 --> 21:33.560
Yes.

21:33.560 --> 21:36.560
Anybody?

21:36.560 --> 21:38.560
At least I explained everything.

21:38.560 --> 21:42.560
Yeah. Everything was so clear.

21:42.560 --> 21:51.560
I can tell you some other quick, interesting things like the communication with the robot.

21:51.560 --> 21:56.560
What happened with the ROM is that when you send a carriage return to the ROM,

21:56.560 --> 21:59.560
it thinks it's an, sorry, not a carriage return, a line feed.

21:59.560 --> 22:02.560
It thinks it's to abort the input in basic.

22:02.560 --> 22:04.560
Somehow, they coded it like that.

22:04.560 --> 22:08.560
So, once I found that out, I had to actually see what the robot was sending.

22:08.560 --> 22:12.560
And it was not sending line feed and carriage return, it was just sending line feed.

22:12.560 --> 22:18.560
So, every input I sent, I would get a line feed and then it would stop my input.

22:18.560 --> 22:20.560
And then I'd run it again and then it didn't work.

22:20.560 --> 22:22.560
And then I ran it again, it worked again.

22:22.560 --> 22:24.560
So, it was intermittent every time.

22:24.560 --> 22:28.560
Until I found it was because the carriage return line feed, that was not matching.

22:28.560 --> 22:31.560
So, the driver had to actually swallow the line feed.

22:31.560 --> 22:35.560
And then it didn't work because that didn't have a carriage return either.

22:35.560 --> 22:39.560
So, I had to actually swallow the line feed and inject the carriage return.

22:39.560 --> 22:41.560
And then stuff started working.

22:41.560 --> 22:46.560
And that's what I did during the show, to actually make it work.

22:46.560 --> 22:47.560
Hope you liked it.

22:47.560 --> 22:51.560
Oh, by the way, we didn't finish the game, but it will be done eventually.

23:01.560 --> 23:03.560
Last chance for question.

23:05.560 --> 23:07.560
If not, many, many thanks, Louis.

23:07.560 --> 23:09.560
You're welcome.

23:12.560 --> 23:16.560
And thanks, Sebastian, for taking over this year, because I didn't have the time to handle it.

23:16.560 --> 23:24.560
So, and if you want to help, it's quite a lot of work to find speakers,

23:24.560 --> 23:27.560
find speakers again because you don't have enough.

23:27.560 --> 23:31.560
And then select talks because you have too many and stuff like that.

23:31.560 --> 23:36.560
So, if you want to help, then contact us on the mailing list, maybe.

23:36.560 --> 23:39.560
And thanks. See you next year, maybe.

23:46.560 --> 23:48.560
Thank you.

23:52.560 --> 23:53.560
Thank you.

23:53.560 --> 23:56.560
Yeah, you make us cry a little bit.

23:56.560 --> 23:57.560
Why?

23:57.560 --> 24:01.560
We burned, we spent the years.

24:01.560 --> 24:06.560
I was building and selling the joystick cards.

24:06.560 --> 24:09.560
Oh, okay, okay.

24:09.560 --> 24:11.560
The 8084.

24:11.560 --> 24:15.560
In the school, they allow us to print the boards.

24:15.560 --> 24:16.560
Yeah.

24:16.560 --> 24:21.560
So, I start to print and soldering and selling the joystick cards.

24:21.560 --> 24:27.560
I hope to eventually sell this, but since it's open source, anyone can actually set it up.

24:27.560 --> 24:29.560
You can see the one behind it.

24:29.560 --> 24:31.560
There is a hack with a wire.

24:31.560 --> 24:32.560
Yeah.

24:32.560 --> 24:37.560
Because the pile doesn't allow you to configure everything in the pins you want.

24:37.560 --> 24:42.560
Although I was following the input output, it was fine, but the combination that I needed didn't work.

24:42.560 --> 24:46.560
So, I had to do a hack and do it elsewhere.

24:46.560 --> 24:50.560
So, the connector, you got that from a mouser or something and chopped the ends.

24:50.560 --> 24:51.560
Yeah, yeah.

24:51.560 --> 24:53.560
You need to chop the ends.

24:53.560 --> 24:55.560
And you need to move the key.

24:55.560 --> 24:57.560
Yeah, because then it...

24:57.560 --> 25:00.560
And then, it's the thickness of the PCB, so you can just stick the PCB...

25:00.560 --> 25:01.560
Yeah.

25:01.560 --> 25:03.560
But there is a better way.

25:03.560 --> 25:09.560
You can actually put a metal part that has pins, and then you solder on this side, it will never leave.

25:09.560 --> 25:11.560
That's what I'm going to do next.

25:11.560 --> 25:12.560
Nice.

25:12.560 --> 25:17.560
I want to ask you, what did you use to program the dial chips, because I can't find a decent program.

25:17.560 --> 25:23.560
I have it there, but you can see it on the repository, on the GitHub.

25:23.560 --> 25:24.560
On the product information.

25:24.560 --> 25:25.560
Yeah.

25:25.560 --> 25:26.560
It's there.

25:26.560 --> 25:27.560
I'm using something...

25:27.560 --> 25:29.560
It was from...

25:29.560 --> 25:33.560
Not Palazzo, but it's something similar.

25:33.560 --> 25:34.560
Okay.

25:34.560 --> 25:36.560
And the software is still available.

25:36.560 --> 25:37.560
You can download it.

25:37.560 --> 25:38.560
Okay.

25:38.560 --> 25:41.560
You can use Windows 95 or something, but it runs on the latest ones.

25:41.560 --> 25:42.560
Okay.

25:42.560 --> 25:44.560
And it allows you to actually program that fine.

25:44.560 --> 25:45.560
Okay, thank you.

25:45.560 --> 25:46.560
We'll look at the other one.

25:46.560 --> 25:47.560
Yeah.

25:47.560 --> 25:48.560
Nice work.

25:48.560 --> 25:50.560
If you look there, I think it's even...

25:50.560 --> 25:52.560
This kitable is there or something.

25:52.560 --> 25:53.560
I'm not sure.

25:53.560 --> 25:54.560
Okay.

25:54.560 --> 25:56.560
There is an example with the hardware to program it.

25:56.560 --> 25:57.560
Thank you.

25:57.560 --> 25:58.560
And did it work?

25:58.560 --> 25:59.560
The other...

25:59.560 --> 26:00.560
What?

26:00.560 --> 26:03.560
I mean, did it attract more people?

26:03.560 --> 26:04.560
It did.

26:04.560 --> 26:05.560
It did.

26:05.560 --> 26:07.560
I don't know if there is another video.

26:07.560 --> 26:08.560
Yeah.

26:08.560 --> 26:09.560
In the...

26:09.560 --> 26:11.560
Let me try.

26:11.560 --> 26:16.560
If you go to FOSDOM and you open this one.

26:16.560 --> 26:17.560
Yeah.

26:17.560 --> 26:19.560
Is the screen still on or they...

26:19.560 --> 26:20.560
Shop it off.

26:20.560 --> 26:21.560
Sorry.

26:21.560 --> 26:28.560
So here you can see a video that was done by the museum.

26:28.560 --> 26:29.560
Right.

26:29.560 --> 26:32.560
And the idea was to...

26:32.560 --> 26:34.560
This is presentation.

26:34.560 --> 26:35.560
Anyway.

26:35.560 --> 26:40.560
And the idea was to...

26:40.560 --> 26:44.560
It's in Portuguese, unfortunately, because it was for that audience.

26:44.560 --> 26:45.560
But it's showing up.

26:45.560 --> 26:46.560
Thank you.

26:46.560 --> 26:48.560
Showing up how it works.

26:48.560 --> 26:50.560
So as you see, it's a huge beast.

26:50.560 --> 26:51.560
Yeah.

26:51.560 --> 26:52.560
Yeah.

26:52.560 --> 26:54.560
So that's why I couldn't bring it.

26:54.560 --> 26:57.560
This weights like 12 kilograms or something like that.

26:57.560 --> 27:00.560
Plus there is the box is hidden inside.

27:00.560 --> 27:06.560
I also had a VT420 terminal inside because it was helpful for debug.

27:06.560 --> 27:10.560
You can put it in debug mode and you can see the actual characters in the serial.

27:10.560 --> 27:14.560
That's how I found the line feed was missing the carriage return.

27:14.560 --> 27:18.560
And I used that to actually decode the rest.

27:18.560 --> 27:20.560
The last two nights I didn't sleep.

27:20.560 --> 27:24.560
It was like go, go, go until it worked.

27:24.560 --> 27:28.560
And then on the second day from a five day event,

27:28.560 --> 27:32.560
it started working and I left it alone for a while.

27:32.560 --> 27:33.560
What?

27:33.560 --> 27:34.560
Reverse demo effect.

27:34.560 --> 27:36.560
Yes, maybe.

27:36.560 --> 27:43.560
But I couldn't make the game actually work at the time because you need feedback so that

27:43.560 --> 27:46.560
when you say put your... the arm here, right?

27:46.560 --> 27:47.560
It goes to the arm...

27:47.560 --> 27:48.560
How much time does it take?

27:48.560 --> 27:49.560
You don't know.

27:49.560 --> 27:51.560
You need to wait for the feedback.

27:51.560 --> 27:53.560
And the feedback was not working because of the line feed.

27:53.560 --> 27:58.560
So my first experiment was like I send the command and then wait, then enter.

27:58.560 --> 28:02.560
For the next command I just wait for the robot to do the movement and then enter.

28:02.560 --> 28:03.560
It was like interactive.

28:03.560 --> 28:07.560
But then when it started working, everything started working.

28:07.560 --> 28:11.560
But I didn't have time to... and I needed to sleep.

28:11.560 --> 28:14.560
After two days without sleep.

28:14.560 --> 28:16.560
First two minutes.

28:16.560 --> 28:18.560
What's the reason you put it with the ZX Spectrum?

28:18.560 --> 28:20.560
Did you stand as a child?

28:20.560 --> 28:21.560
I did, I did.

28:21.560 --> 28:23.560
Because I'm part of the museum.

28:23.560 --> 28:25.560
I participate with demos and doing stuff.

28:25.560 --> 28:27.560
One of your specific...

28:27.560 --> 28:28.560
Yeah.

28:28.560 --> 28:29.560
To start picking up the...

28:29.560 --> 28:31.560
But I also do stuff.

28:31.560 --> 28:33.560
You find so many very interesting things.

28:33.560 --> 28:34.560
Yeah.

28:34.560 --> 28:35.560
Why is that?

28:35.560 --> 28:38.560
I've been growing up with Commodore 65 or 20.

28:38.560 --> 28:39.560
Yeah, I also...

28:39.560 --> 28:41.560
I would do that with Commodore.

28:41.560 --> 28:42.560
Yeah.

