WEBVTT

00:00.000 --> 00:20.480
Thanks. Welcome to my talk. So my first time at FOSDEMM, so questions, twists. So I will

00:20.480 --> 00:27.320
do a summary of where we are now about Qualcomm SOC supporting in Mainline because I think

00:27.320 --> 00:45.440
it's time to do a point. So I'm part of the Linao Qualcomm Longing Team. I joined one

00:45.440 --> 00:54.600
year and a half ago. So my many daily work is actually platform Qualcomm support. I'm

00:54.600 --> 01:02.640
maintainer with Calib, the commentator of UBoot Best Sports and I bring new platforms upstream

01:02.640 --> 01:09.280
in Linux. I also maintain and develop other piece of Linux, namely the MLG SOCs,

01:09.280 --> 01:19.160
DLM bridge, DLM panels. And I'm working only on upstream Linux and UBoot for the last few years.

01:19.160 --> 01:30.200
And so I have a lot of patches upstream in UBoot and Linux. So I'm part of Linao. Linao has been

01:30.200 --> 01:39.600
founded to actually enable and make Linux and any software on ARM work better. So we're basically

01:40.560 --> 01:49.520
helping vendors and product makers actually make better products to work on ARM. So we have

01:49.520 --> 01:57.160
plenty of services to help the whole stack of software running better on ARM. And open source

01:57.160 --> 02:07.040
is at the heart of Linao. We mainly work on open source software mainly. So Qualcomm joined

02:07.040 --> 02:16.800
Linao 10 years ago because they wanted to have better open source support at the time,

02:16.800 --> 02:25.840
which was minimal. So they joined to support Linux, but it quickly collaborated plenty of other

02:26.800 --> 02:34.880
places and so far so good. Even happy Linao and Qualcomm is happy with the situation.

02:34.880 --> 02:44.680
So in the last 10 years, Linao and Qualcomm pushed a lot of really huge features for ARM

02:44.680 --> 02:53.480
ecosystem in Linux, namely the power framework that the energy hour schedule really changed the way

02:53.480 --> 03:05.120
Linux schedules correctly on cores. With help and Qualcomm participated in the standard and

03:05.120 --> 03:13.120
software structure on our servers, the Dragon boards are the reference today to test Android,

03:13.760 --> 03:24.400
ASP for example. We have called Linao, which is the principal kit storage for Qualcomm and for

03:24.400 --> 03:30.800
Linao engineers. And namely for the last three years, we were pushing the flagship mobile platforms.

03:30.800 --> 03:43.040
So this year, the last three months, I pushed the standard on Gen3 upstream and it was 98%

03:43.960 --> 03:53.520
two months after the announcement, which is pretty cool. So the agenda, where we came from 10 years

03:53.520 --> 04:04.600
ago, where we are now and the two supported devices, a demo and what's remaining. So we were 10 years

04:04.600 --> 04:12.120
ago. So 10 years ago, Qualcomm and vendors using Qualcomm SOS ships with kernels with more like

04:12.240 --> 04:21.320
three million change. So it was basically a separate kernel in a kernel. So this was a problem, but

04:21.320 --> 04:28.960
it's a hard to solve problem. How do you integrate, how do you upstream so much change in main

04:28.960 --> 04:39.320
Linux? That's why Linao started the learning team to fix this. And this is a graph I made to show

04:40.280 --> 04:49.160
on the last years, the last 10 years, how Qualcomm managed their downstream kernels. So initially,

04:49.160 --> 04:58.880
they used the long term kernel very long time and they kept accumulating new SOS support over time.

04:58.880 --> 05:07.920
So each time frame and for the last four years, the company changed the strategy and they stopped

05:08.400 --> 05:17.600
adding new code and simply changing existing code. I think the reason is first Android strategy with

05:17.600 --> 05:26.000
GKI and because the main line Linux has enough support and has the principal architecture missing

05:26.960 --> 05:39.840
over time. So this is what I posted nine years ago, eight years ago, which was true. I mean, it was

05:39.840 --> 05:50.560
mostly nonexistent. It was the only SOS inverter that was not upstreaming almost nothing. So hopefully

05:51.280 --> 06:00.720
it changed. So Linao worked on Qualcomm specific features in the last 10 years. So the biggest

06:00.720 --> 06:10.960
feature was the remote proc to handle DSP because before Qualcomm had a complex custom solution to

06:10.960 --> 06:20.240
speak to DSPs, which was like two million line of code only to speak to DSPs. And the biggest work

06:20.240 --> 06:27.840
we did was to implement it correctly upstream. So we have now a fully integrated way to speak to DSPs

06:27.840 --> 06:33.600
and it works really, really well. The other big feature of Qualcomm SOS is Interconnect because

06:34.560 --> 06:41.600
the Qualcomm SOS are very complex and you can fine tune any data path in the SOS and you can

06:41.600 --> 06:49.040
change the bandwidth. You can change the performance of any data path. So it was a huge feature. It

06:49.040 --> 06:55.760
took a very long time to upstream it. All the Venus video decoder was complex because it needed

06:56.400 --> 07:05.440
the other support before. The DSP audio support also needed the proper DSP handling. The DM driver

07:06.640 --> 07:13.680
is a huge beast because the graphics display engine is really complex and supports a lot of features.

07:13.920 --> 07:22.080
Lately the sound wire support was upstreamed for Qualcomm and other platforms and we worked on

07:22.080 --> 07:29.680
plenty of very time consuming subjects but tiny. But all of these are needed to actually boot a platform.

07:31.440 --> 07:39.920
So this is a graph of the upstream contribution. You can see it was quite a blow but all these

07:40.800 --> 07:46.720
features are really complex to upstream because they are either Qualcomm specific or very complex but

07:46.720 --> 07:54.320
it doesn't fit in any framework. So it took like seven or eight years to actually push the base

07:55.520 --> 08:02.560
features to actually be able to boot a high-end device. And the last four years because we had a

08:02.560 --> 08:08.800
complex support for all the small and very important features we are able to finally boot

08:08.800 --> 08:13.600
high-end and commercial forms on it. So we had a lot of contribution from

08:14.160 --> 08:21.280
Linao, Qualcomm and also the community. This explains a huge peak in the last two years.

08:24.560 --> 08:29.360
So this is a graph of the supported board of the time. So 10 years ago we had only two boards

08:30.320 --> 08:40.960
in 2D keyboards and now we have a lot of 300 boards which is huge. And most of them are community boards

08:40.960 --> 08:50.480
and non-reference of the base boards. These are the new supported boards of our time. So for each

08:50.480 --> 08:57.440
release the number of supported boards were added. So you can see in the last 10 release

08:57.440 --> 09:03.840
there's a huge amount of new boards added which is great and the community actually helps a lot in

09:03.840 --> 09:14.240
this case. So for the boards, supported boards, like Caleb says the historical dragon boards were the

09:14.240 --> 09:23.040
first really publicly available boards in the SBC form factor and they really helped starting the

09:23.040 --> 09:36.000
mainline development. And while they were like low-end SOCs, we supported a lot of features.

09:37.280 --> 09:43.680
Those support camera and very high-end features so it helped develop the baseline support to

09:43.680 --> 09:52.240
actually enable high-end SOCs at the end. So like Caleb said, these are the robotic boards.

09:54.000 --> 10:01.360
They are quite expensive and it's the current Qualcomm offering in the IoT world

10:02.000 --> 10:06.640
and they aim to support them fully upstream and

10:06.880 --> 10:21.120
which is quite, it's quite each board as a mid-end and low-end. So it's quite diverse and it helps

10:21.120 --> 10:29.840
supporting all the new features. So there is commercial phones which are running very, very well.

10:30.320 --> 10:39.040
So you won't expect all the features for daily usage. So you don't have haptics, you don't have

10:39.040 --> 10:48.880
camera but they work fine and you can boot and actually use it with Wi-Fi, Bluetooth and storage.

10:49.040 --> 11:01.200
You can have a few tablet convertibles running on Linux, mainline like the Lenovo Yiga 640

11:03.600 --> 11:10.080
and these are the Qualcomm high-end reference devices. So those are the devices we use

11:10.560 --> 11:19.360
daily use to upstream high-end platforms. So this one is a one-year-old platform,

11:19.920 --> 11:25.360
this one is a two-year-old platform and this one is actually running this presentation.

11:27.920 --> 11:35.760
And those are the specific Qualcomm reference devices with test points used by Qualcomm engineers to

11:35.760 --> 11:42.080
actually upstream develop Android and we upstream mainline Linux support with them.

11:46.080 --> 11:57.120
So as I said, I was upstreaming the Gen3 support, the latest Qualcomm high-end SOC which the

11:58.000 --> 12:09.440
Samsung phones were announced two weeks ago and in 6.1 RC1 that was announced like two days before

12:09.440 --> 12:16.400
announcing the Samsung phones, we had already a display, UFS, PCI, USB, thermal, CPU fray,

12:16.400 --> 12:24.720
QSPC, suspend-resume and crypto-working on mainline Linux, check out Linux master and it was working,

12:24.720 --> 12:31.600
it works. And in the meantime, we developed audio, display portal mode, DSP, full DSP,

12:31.600 --> 12:42.560
modem, compute and audio, USB PD and charger and GPU is the last remaining one and I won't talk about it.

12:44.960 --> 12:54.640
So the flagship device you could use today is the Lenovo X14S. It's actually the best platform

12:54.800 --> 13:02.160
to use Qualcomm devices. It's really powerful and you can use it daily. My colleagues are actually

13:02.160 --> 13:10.960
developing mainline Linux on this platform. It supports, my colleague can use it about eight

13:10.960 --> 13:20.080
hours time working and you have almost all everything supported. So this is an example what is

13:20.080 --> 13:28.800
supported. You have a JPEU working storage keyboard, thermal, USB, suspend-resume, audio and you can

13:28.800 --> 13:38.960
boot over EFI. So you can, but obviously they're still working process like every software stuff.

13:38.960 --> 13:46.480
So the most important is the camera. Camera doesn't work. It's complex due to the sensor

13:46.480 --> 13:55.040
putting raw data and Qualcomm not wanting to upstream the stuff. So it's in working progress.

13:55.040 --> 14:01.920
We have something working. It's not public. We are working on it. There's plenty of other small

14:01.920 --> 14:06.320
features are missing like the embedded controller, the power measurement. Power measurement is

14:06.800 --> 14:16.240
infinite. It will never be perfect. So we're gaining amps every release. So it's a constant work.

14:17.040 --> 14:25.280
There's always some small, wiffy and Bluetooth issues. Audio needs active speaker protection.

14:25.280 --> 14:32.400
This is a big, modern feature. All the new, modern audio needs active speaker protection because

14:33.360 --> 14:41.200
it's not no more included in the codecs. And some stuff are still missing like the fingerprint

14:41.200 --> 14:51.520
or VDOC shale action. But we aim to support all this in the short frame. So today, if you want to test

14:51.520 --> 15:01.120
Linux, many Linux on the expertise, you can use Fedora, Ambian, Nubuntu or Debian. We about changing

15:01.280 --> 15:11.120
anything. It will install directly and boot and you could use it daily. So this is a great, great

15:12.640 --> 15:21.840
advancement. So demo time. I mean no need for a demo because I'm running it. I'm running the

15:21.920 --> 15:33.200
procession on a Qualcomm device. So yeah, for example, this is 8550. You can play a video,

15:33.200 --> 15:43.920
for example. It works fine. You can switch. I'm still in full screen.

15:52.800 --> 15:57.600
So you can see everything is fine. The video is still running.

16:03.440 --> 16:05.920
So the GPU works very fine.

16:06.400 --> 16:08.000
Up.

16:22.560 --> 16:24.000
Demo effect.

16:26.000 --> 16:28.000
Okay. So...

16:28.640 --> 16:40.640
So to show it's really usable. You have Wi-Fi and Bluetooth working in GPU and this platform

16:41.280 --> 16:54.240
is one year old. But I got hardware like two weeks ago. So it was great. And the support for the board

16:54.240 --> 17:04.320
is actually on the... It's made by the Qualcomm ARM maintainer. So it should be part for 6.9.

17:05.680 --> 17:13.520
So globally, what's remaining to support, properly support the Qualcomm SOCs, power optimization.

17:14.400 --> 17:25.440
It's a long term, nearly infinite work because the Qualcomm is complex and we still need to gain

17:26.480 --> 17:33.520
every time. So performance. Performance, like I said, each data path can be optimized.

17:34.240 --> 17:42.240
And it's also a long, long journey to support power and performance and manipulation.

17:43.840 --> 17:51.440
There are still missing some advanced graphic features, mainly for non-phones and non-laptops,

17:51.440 --> 17:57.520
like HDR and multi-plane and so on. Video with decoding accelerator is working

17:57.520 --> 18:04.880
progress. We're working with Qualcomm on it. Camera support is a big feature. Audio support,

18:04.880 --> 18:10.800
we still need to support DisplayPort audio. To support audio over the HDMI or the DisplayPort.

18:10.880 --> 18:17.680
Speaker protection, the sensor hub for the phones, feedback and the vibrator and the new

18:17.680 --> 18:24.240
platform because each year we have between two and three platforms to support either in computers

18:24.240 --> 18:32.800
or phones or IoT. Otherwise, it's keeping us working a lot. So we need help of the community

18:33.760 --> 18:41.440
because we need testing and we need to support more devices. Thanks to the community, we have the

18:41.440 --> 18:46.880
largest ARM 64 change in the last years. Every single release, we have a top change

18:48.080 --> 18:53.360
because it's really actively changing. We are really supporting mainstream devices, the phones,

18:53.360 --> 19:00.800
laptops, modems, accessories, converters. And we are working on new books. Qualcomm is

19:01.760 --> 19:09.760
porting new devices. It will simplify installing new distributions. And if you want to know the

19:09.760 --> 19:17.840
status of each SOC, you can go to this address in our GitHub IOMSM. It will give you a nice

19:18.560 --> 19:28.400
overview of the support. So like the last line is the standard on Gen 3. So all the yellow lines

19:28.400 --> 19:40.640
will be green in four weeks now. So for example, it's really kind of cool. We simply describe

19:40.640 --> 19:47.600
each feature with and it generates automatically a website. So it's really cool.

19:49.920 --> 19:57.200
So thank you for listening. I was happy to present the state of Qualcomm SST port and demo it

19:57.840 --> 20:01.760
in live. And it works fine. So no demo effect. Thank you very much.

20:10.160 --> 20:12.480
Very nice. Does anyone have any questions here?

20:14.400 --> 20:21.280
Yeah, hi. When can we expect Qualcomm to start upstream in support for the Linux that runs

20:21.280 --> 20:29.200
on the modems? On the modems? I have no idea. I'm sorry. Another question?

20:35.840 --> 20:42.080
Thank you. The question is actually first, is Linao or Qualcomm considering doing any

20:42.080 --> 20:46.800
upstreaming for legacy platforms? For what? For legacy platforms, for early edge upsets.

20:46.800 --> 20:53.680
We do it daily. Okay. So this is also happening? Okay. Yeah, we continue adding features for all

20:53.680 --> 21:01.520
platforms daily and the community helps a lot and we are testing it. And in fact, Qualcomm is

21:01.520 --> 21:11.120
pretty consistent in the firmware interfaces and APIs and registers. So we in fact support all

21:11.120 --> 21:17.440
devices quite constantly. And then the other thing you mentioned,

21:18.000 --> 21:22.720
specifically on camera, there's a lot of work on Android. Second, you have a lot of out of

21:22.720 --> 21:26.400
three drivers. Instead of a platform, Qualcomm, they actually get everything

21:26.400 --> 21:37.040
supported directly in upstream Linux. I hope so. And the question here, one second.

21:41.360 --> 21:45.600
Hello. Very nice talk. Any plans for Spectra ISP?

21:47.840 --> 21:51.600
So yeah, it's the same question. I don't know. It's not in our hands.

21:54.080 --> 21:56.240
Another one? Okay. I'll pass the mic.

22:02.640 --> 22:08.880
You talked about many distros already working. If we had, for example, a root FS from another

22:08.880 --> 22:17.280
distro, the boot loader situation, is it the same as in mobile phones and their SoCs? Or can we just

22:17.280 --> 22:26.080
expect to boot from UEFI or similar? So for the laptop, they have a functional UEFI shipped with

22:26.080 --> 22:33.360
the laptop. So there's no need for you boot. I think it's not perfect, but it works fine. So you

22:33.360 --> 22:39.040
can directly install Fedora in UEFI on the laptop when you open it. So it works.

22:46.080 --> 22:53.600
Thank you. So you mentioned something about video decoding. How will exactly that work?

22:53.600 --> 22:57.280
Will there be a VA API driver or will it use something else?

22:57.280 --> 23:06.560
Today, there is already a Venus v4l2 driver for the old platforms. And we are working to support

23:06.560 --> 23:14.560
the new platforms using v4l2. So Qualcomm wants to push support for the platform. So we need to

23:14.560 --> 23:21.920
find a way to merge it and make it more prettier. But yeah, v4l2. Okay. Thanks.

23:21.920 --> 23:27.280
Another question, anyone? Yeah, yeah.

23:30.880 --> 23:37.200
Hey, thanks for the talk. I had a question about availability of certain documents required to

23:37.200 --> 23:41.840
write a lot of the drivers. Is Qualcomm making those documents available to the public?

23:43.200 --> 23:49.280
So no, it's not the industry. They don't want to document the hardware publicly.

23:49.840 --> 23:54.320
So for regular people that want to help, it would be like reverse engineering or?

23:54.320 --> 24:02.640
Yeah, code. Okay. I mean, cool. I've implemented all the MLG support using code only. Almost no

24:02.640 --> 24:09.840
documentation. So it's hard. So we need documentation for more complex features. But most of the

24:09.840 --> 24:17.120
future, we use code, even us. Because documentation, you have registers, but you don't have the state

24:17.120 --> 24:24.560
machine. You don't have the behavior of the hardware. So. Okay, we could fit in another

24:24.560 --> 24:31.760
question if there is any. Otherwise, yeah. Okay. Yeah. I'd actually like to continue the question

24:31.760 --> 24:36.800
that the teacher's raised. So how is it working then? So you signed an NDA with Qualcomm, get the

24:36.800 --> 24:43.840
doc. Docs can write the code, but you're not allowed to document it. Yeah, speak about it. That's how

24:43.920 --> 24:50.240
it works. Yeah. Yeah. Gotcha. Please give another round of applause for our speaker.

24:58.000 --> 25:04.960
And it was really all running from this device here, the board. No laptop. Yeah.

