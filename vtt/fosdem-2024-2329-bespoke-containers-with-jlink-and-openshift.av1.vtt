WEBVTT

00:00.000 --> 00:11.440
Alright, good afternoon. My name is Jonathan Dowland. I'm a principal software engineer

00:11.440 --> 00:17.440
at Red Hat. I work on OpenJDK, in particular on containers. And I'm going to present some

00:17.440 --> 00:22.240
work for you today, which is a project team myself and Josh and Jay, who sadly can't be

00:22.240 --> 00:26.440
here today. I'm going to present some work we've been doing to look at integrating Java

00:26.440 --> 00:34.120
module technology with OpenShift. So I suspect you're all very familiar with Java modules,

00:34.120 --> 00:40.720
introduced to the JDK in 9 with Project Jigsaw, and perhaps less aware of what Red Hat OpenShift

00:40.720 --> 00:47.720
is. So OpenShift is Red Hat's enterprise distribution of Kubernetes, which is the de facto standard

00:47.720 --> 00:56.120
tool for doing container orchestration. So talking about containers. Red Hat, obviously

00:56.800 --> 01:02.440
probably heard of REL, Red Hat Enterprise Linux. Another project we have is the universal

01:02.440 --> 01:07.600
base image. And it's based on REL, and so it has some similar design principles, such

01:07.600 --> 01:12.640
as focus on quality and suitability for the enterprise. But it's different in the sense

01:12.640 --> 01:17.640
that it's available under the terms of a different end user license agreement. There's a short

01:17.640 --> 01:23.200
link at the top there to the full gory legal details. But unlike REL, you can, anybody without

01:23.240 --> 01:28.920
any kind of relationship to Red Hat can access UBI images, pull, push them and build upon

01:28.920 --> 01:34.080
them and distribute derivatives. So effectively it's a free image, and it's been designed

01:34.080 --> 01:39.560
to be useful as a base for any kind of containerized application. There's three flavors of the

01:39.560 --> 01:45.080
main UBI images. So there's UBI as it's called, and then there's minimal and then there's

01:45.080 --> 01:50.720
micro, and they're decreasing order size. So the full UBI image is about 200 megabytes

01:50.760 --> 01:55.840
uncompressed, and the minimal one's about 90, and the micro one, which is really small,

01:55.840 --> 02:01.840
has almost nothing in it, is about 20 megabytes, 20 megabytes of nothing somehow. You can get

02:01.840 --> 02:05.760
these, I mean those particular UBI containers are available, widely available, places like

02:05.760 --> 02:11.920
Docker Hub, but most or many Red Hat containers are not available from Docker Hub, and I'm

02:11.920 --> 02:15.480
not sure if you can see it in the room because of the positions of the tables, but the Red

02:15.480 --> 02:19.960
Hat ecosystem catalog is the place to go for Red Hat containers. So you can browse all

02:20.000 --> 02:27.000
of the UBI ones there. And the open JDK containers then, the thing I work on, they're part of

02:27.000 --> 02:31.800
the UBI family, so they're available under the same user license agreement, and you

02:31.800 --> 02:37.800
can pull and pull them freely without needing to be a customer or to have a developer subscription.

02:37.800 --> 02:43.280
I haven't included the full matrix of JDK containers we have now because it's grown

02:43.280 --> 02:48.040
too big for a slide. I think we have about 16 at last count, but the general URI form

02:48.080 --> 02:53.280
for the containers is there's two variants. There's build of images which contain the

02:53.280 --> 02:59.000
full JDK and developer tooling, the Java compiler and Maven, and that's the top one.

02:59.000 --> 03:04.000
And the second flavor we have is the runtime variants, which effectively suffix runtime,

03:04.000 --> 03:08.920
you get that. That has a slightly smaller subset of the JDK and doesn't include build

03:08.920 --> 03:15.920
tooling. I've included a link, which is probably at a better height now, to some, this is a

03:16.000 --> 03:20.680
page really, but we have a Gitub auto-generated documentation for all of the containers that

03:20.680 --> 03:25.560
we've shipped in recent times, so that's the place to go to see what's available. It has

03:25.560 --> 03:30.560
jumping off points to the ecosystem catalog, but it also includes information on how to

03:30.560 --> 03:36.240
actually configure the containers and to tailor them to your needs.

03:36.240 --> 03:42.480
So OpenShift has value add on top of Kubernetes. One of the concept ads is something called

03:42.520 --> 03:47.880
a build config and an instance of that is source to image. What OpenShift source to image

03:47.880 --> 03:54.880
is a process which allows you to define a workflow to consume an application source

03:55.080 --> 04:02.080
and produce a running deployable container automatically and automate the put-back process.

04:02.120 --> 04:07.360
By running a command like that, that's OC is the main OpenShift command line tool. You

04:07.400 --> 04:12.240
can create a whole load of objects inside OpenShift, which are interconnected to each

04:12.240 --> 04:18.740
other with triggers, so that in this particular example, if your application source URI is

04:18.740 --> 04:23.320
changes, if you push and you commit, or the base image upon which you're using for this

04:23.320 --> 04:28.280
process changes, then the workflow will pick that up and event up and automatically rerun

04:28.280 --> 04:32.960
and build a new deployment application, a deployment container. It's quite a simple

04:33.000 --> 04:40.000
workflow and the output image from this process is layered on top of the input image, which

04:40.360 --> 04:45.280
is the builder. The problem with that is the builder image is pretty big and customers

04:45.280 --> 04:51.080
want small containers and size of side, it also has stuff in you don't want necessarily

04:51.080 --> 04:56.880
in a runtime context, so the compiler, Maven, etc. So people with strong security concerns

04:56.880 --> 05:02.880
or with audit requirements want something else. The current state of the art in OpenShift

05:03.520 --> 05:08.120
for achieving that is multi-stage pipelines. You can chain these things together. The top

05:08.120 --> 05:13.920
part of this diagram is from the previous slide and you can chain that into a second

05:13.920 --> 05:19.000
build. In this case, the second build is using a different build conflict strategy called

05:19.000 --> 05:25.120
Docker strategy and basically it's a Docker file, which you may be familiar with. In this

05:25.120 --> 05:29.720
case, the output of the first stage is an intermediate image, which is used as one of the ingredients

05:29.720 --> 05:36.720
for the second stage and what we do basically, there we are. YAML, if you've ever dealt with

05:38.520 --> 05:44.320
Kubernetes, OpenShift is exactly the same, YAML, lots of YAML. The key piece here for

05:44.320 --> 05:48.480
that second stage is a Docker file, which in this case is embedded deep in the middle

05:48.480 --> 05:55.480
of YAML territory and it's a reasonably simple one. That's the state of the art today. I'm

05:55.760 --> 06:00.480
using Qwakus, I think you mentioned it on the side. For what follows, I've used Qwakus

06:00.480 --> 06:07.480
mostly for my experiments and for the examples. How big is it when you finish that process?

06:09.240 --> 06:14.720
It's pretty big. Unfortunately, the savings over the straightforward S2I process these

06:14.720 --> 06:21.720
days is pretty small, about 5%, not very good. If you look at the pie chart there, the thinnest

06:22.440 --> 06:29.440
slice on the slide is the application itself. The cost of doing business with this is quite

06:30.080 --> 06:35.680
high. The largest slice of the pie is the JDK itself and therefore that's the place

06:35.680 --> 06:40.000
we're focusing on trying to make space and size reductions. You can see another of the

06:40.000 --> 06:45.240
second biggest slice is the minimal base image itself. The open JDK container images based

06:45.240 --> 06:51.200
upon the UBI minimal image and that's about a quarter of the final payload for the application

06:51.200 --> 06:56.320
container here. First focus then is on trying to shrink the JDK and the second focus is

06:56.320 --> 07:03.320
to take a look at this base image. Our approach, what we're exploring is effectively the same

07:03.520 --> 07:09.360
basic shape of the workflow as before except we're going to extend the two build phases.

07:09.360 --> 07:16.360
The first extension is we're going to add at the application build stage, a post build,

07:16.440 --> 07:22.400
an analysis of the application using J-Link or J-Dep to determine which Java modules it

07:22.400 --> 07:28.120
uses. I should probably stress that the application itself does not need to use Java modules for

07:28.120 --> 07:32.160
this to function. We're looking at the Java modules that the application touches within

07:32.160 --> 07:39.160
the JDK. Then we use J-Link to strip the RedTap Open JDK that's provided in the container

07:40.160 --> 07:47.160
and create a bespoke VM which we then stash in the intermediate image. The second stage,

07:48.360 --> 07:53.760
the cherry picking stage then, we extend what we did before where we copied the application

07:53.760 --> 08:00.760
jar over into the runtime image and we additionally copy over the stripped JVM and a run script,

08:02.360 --> 08:06.840
basically the shell script entry point for the container which does some of the configuration

08:06.840 --> 08:12.200
at runtime and a small number of system dependencies we need to make the whole thing work. The reason

08:12.200 --> 08:16.480
we need to do these additional cherry picking things is because we've also switched out

08:16.480 --> 08:23.480
the image which we're layering on top of and we're now able to target the UBI micro image.

08:23.800 --> 08:30.800
I'm going to attempt something approximating a demo here. Let's have a look. If I was super

08:30.800 --> 08:37.800
brave, I would fire up an open shift cluster and give you a full blown web based exploration

08:38.400 --> 08:45.400
of that going on. I'm not that brave and subject to the constraints of operating on a laptop

08:45.400 --> 08:50.440
and FOSDEM Wi-Fi. I hope they'll forgive me for that. I mulled over exactly what I should

08:50.440 --> 08:55.920
show you and I could run through some of those build stages in isolation because in development

08:55.920 --> 09:00.160
we could do each of those stages separately. I figured perhaps what I'll do is I'll just

09:00.200 --> 09:07.200
show you the end stage if you like. What I have on this machine is a set of containers

09:07.560 --> 09:14.560
that have been built already. Scrolling off the bottom, let me fix that. Give the terminal

09:15.600 --> 09:22.600
a bit more read and state. I've got three containers here, container images on my machine.

09:23.600 --> 09:30.600
The first one running through the normal one stage S2I process has resulted, I've highlighted

09:32.240 --> 09:39.240
on the other window, perils of multi-mono. Here we are. So the plain S2I image then,

09:44.880 --> 09:51.880
this is a quarkus quick start and it ended up being 421 megs according to the podman.

09:52.920 --> 09:58.920
The multi-stage image, the current state of the art was a little bit smaller at 384. Actually

09:58.920 --> 10:03.640
that's better than the slides. Then the final image which has gone through our proof of

10:03.640 --> 10:10.640
concept jailing integration is down to 146. Let's run it.

10:10.640 --> 10:17.640
Run it, plonk, so that starts the app. Am I typing the right numbers here? Let's find

10:30.440 --> 10:36.640
out. I'm unable to connect, obviously not. Let me just borrow that window, fix it and

10:36.640 --> 10:43.640
put it back. Okay, there we go. Right, yeah, there you go, so the app works. So perhaps

10:52.680 --> 10:59.680
not the most exciting time you've seen today. That one, there we go. So yeah, in slightly

11:00.560 --> 11:07.560
more detail in the first phase when we extend the build process, this is opt in. We won't

11:07.560 --> 11:12.880
be doing it necessarily for every container build, so you have to enable it with an environment

11:12.880 --> 11:18.360
variable. As I said earlier, the general gist of it is run JDEPS and then JLink and there's

11:18.360 --> 11:25.360
an awful lot of pre- and processing going on to make that work. We're at the stage

11:25.800 --> 11:30.080
of this project where we're exploring a wider variety of applications to find all the edge

11:30.080 --> 11:36.200
cases. We have to add some modules that aren't picked up for whatever reason. We have to

11:36.200 --> 11:43.200
do some path fudging around when the class path is a bit unusual, et cetera. I've got

11:44.360 --> 11:48.640
a link to the source later if anyone really wants the gory details. So after this first

11:48.640 --> 11:55.640
stage, the intermediate image is pretty large. This is the second stage, the Docker file. Do

11:56.840 --> 12:01.520
not attempt to read this slide. The takeaway really is that it's grown more complicated

12:01.520 --> 12:05.000
than it was before. It was one or two lines before and we're doing quite a lot more work

12:05.000 --> 12:10.720
now. But yeah, there's four distinct things we copy in. We copy in the application, the

12:10.720 --> 12:16.440
stripped JVM, a run script and some system dependencies. At the moment, that's just

12:16.480 --> 12:23.480
grep and orc actually. But that might grow as we expand this. The results are pretty good.

12:27.160 --> 12:30.480
We're exploring a range of apps. This is not the best result. I've had all the worst. I've

12:30.480 --> 12:37.480
tried to be fair. It's about 43% the size of doing the multi-stage build. We've thrown

12:38.920 --> 12:45.280
away close to 70%. We're very happy with that. The new JVM is half the size of the older

12:45.280 --> 12:50.600
and the other significant saving is switching out to the micro-base image. We're happy with

12:50.600 --> 12:57.600
this and we're going to pursue it. A few bits and there are caveats. We've got to determine

13:00.400 --> 13:07.400
how, whether we're already serious blockers for real-world applications, more complicated

13:07.440 --> 13:12.080
applications than just quick starts. We've got some fun with JDK 11. At the moment, it

13:12.120 --> 13:16.560
grows the image. You get something twice as big instead of half the size. We know why

13:16.560 --> 13:22.160
and that's in trying to be fixed. Missing features. The reason it's getting smaller is

13:22.160 --> 13:26.520
because we're throwing stuff away. If you want FIPS support, if you're going to do stuff

13:26.520 --> 13:31.400
with time zone information or locales or you want debugging tools, that all needs to be

13:31.400 --> 13:35.480
added back in. We're trying to figure out a way that that would be practical for customers

13:35.480 --> 13:41.480
to actually do. The whole thing, our development works all in the open. If you want to do

13:42.280 --> 13:48.280
it, you can go to that address there and see all the gory details. It's on the bottom

13:48.280 --> 13:51.280
of that slide too. That's it. Thank you.

13:51.280 --> 13:58.280
I've got five minutes. I can't start the next one early. We've got five minutes of questions

14:02.480 --> 14:09.480
if anyone would like to. I don't know. I think the recording schedule would be broken. Any

14:09.480 --> 14:16.480
questions? Thank you. Sorry. Thanks.

14:16.480 --> 14:23.480
Sorry, I just want to hear me. Your previous slide there, you just talked a couple of things.

14:29.480 --> 14:34.880
You listed down TZD, locales, debugging information. One thing just to know is the TZD is actually

14:34.880 --> 14:39.840
in the base module. You don't get a choice. That will always be there. With your locales,

14:39.840 --> 14:43.880
there's actually a jailing plugin that actually allows you to select the locales. Maybe on

14:43.880 --> 14:50.880
your next step is something like that. By default, you just get US English. You can actually

14:51.920 --> 14:56.800
with the dash include locales, you can actually list out the locales that you want. That plugin

14:56.800 --> 15:02.560
will actually just take the resource data for those specific locales. That actually might

15:02.640 --> 15:09.640
be useful for you. More generally, the reason that locales are an issue for you is that

15:11.880 --> 15:15.800
it's what's called a service module. It's a service provider. There's nothing that directly

15:15.800 --> 15:22.800
depends on it. When you run JGEPs, you basically just sort of work out. That's basically doing

15:23.840 --> 15:28.600
static analysis to actually tell you what references there are. You never see static reference

15:28.640 --> 15:33.280
to something that's in a service provider module. Security providers is something you

15:33.280 --> 15:37.280
could actually list down there as well. J&DI providers is actually a bunch of those in

15:37.280 --> 15:40.680
the JDK that you never actually see a static reference to.

15:40.680 --> 15:45.840
Okay, thank you. That is really useful. I think we've made things... One of the modifications

15:45.840 --> 15:51.800
we do to the JDK in RHEL is to use the system time zone data. I think actually we've introduced

15:51.800 --> 15:57.320
this problem which you probably wouldn't have upstream. The information about the system

15:57.400 --> 16:04.400
data module is very useful. Thank you very much. Is there one right at the back?

16:16.200 --> 16:23.200
So, nice presentation, by the way. My question is, this seems to be optimizing for disk size.

16:23.640 --> 16:27.160
What about memory usage and stuff like that?

16:27.160 --> 16:34.160
Yes, so that's true. Size was the driver. I don't think it should make an appreciable

16:34.680 --> 16:40.720
difference to memory usage. I don't believe the Java will page in the modules it's not

16:40.720 --> 16:44.280
actually using or they'll page that out. I don't know, actually. We'll have to do some

16:44.280 --> 16:48.840
measurements. It's not been a driver for the project, but I wouldn't expect this to make

16:48.840 --> 16:52.000
significant gains in memory usage.

16:52.120 --> 16:58.120
Do you foresee that this could have a side effect on the memory side of things or not?

16:58.120 --> 17:03.440
Not loading stuff obviously consumes less memory. The fact that you don't load some

17:03.440 --> 17:08.240
stuff might make the system slower or something like that.

17:08.240 --> 17:12.560
I think... I don't know. We could add some measurements to our testing matrix, I think,

17:12.560 --> 17:19.560
and see what happens. For memory usage, the focus... The driver for that exploration is

17:20.400 --> 17:26.400
not in and Red Hat seems to have been towards Quarkus and Native Image. We've stuck to

17:26.400 --> 17:33.400
OpenJDK and the JVM for this work. We haven't really looked at memory, so it would be interesting

17:33.400 --> 17:35.240
to see. Thank you.

17:35.240 --> 17:42.240
Maybe I could just add to your reply just to that question. One of the side effects of

17:42.240 --> 17:49.240
having fewer modules in the runtime image is that you're actually memory mapping, you're

17:49.560 --> 17:56.560
mapping a smaller... It's called the G-image file. What actually happens is that that's

17:57.320 --> 18:01.840
actually completely memory mapped. You're not going to touch all the pages, so you may

18:01.840 --> 18:06.840
actually get some positive memory footprint benefits just because you're only going to

18:06.840 --> 18:11.240
have a small number of modules in the target image. It may help there.

18:11.240 --> 18:13.240
Great. Thank you.

18:13.240 --> 18:19.240
Cool. Okay. Thank you very much. Right. Next one.

18:19.560 --> 18:26.560
Thank you.

