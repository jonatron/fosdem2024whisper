WEBVTT

00:00.000 --> 00:12.880
Okay, thank you for showing up or for staying for my talk.

00:12.880 --> 00:19.480
Scratching an itch by patching KMS con or put another words how knowing open GL can actually

00:19.480 --> 00:23.200
to systems program, believe it or not.

00:23.200 --> 00:25.960
Before I continue, I want to set the stage.

00:25.960 --> 00:33.120
I see this talk as a partly being an experience report by somebody who did a drive by contribution

00:33.120 --> 00:34.360
to KMS con.

00:34.360 --> 00:35.720
Well, yeah, that's me.

00:35.720 --> 00:41.480
And also to some degree, call for help with testing and maybe poking upstream to review

00:41.480 --> 00:43.600
my pull requests.

00:43.600 --> 00:47.360
And on top of all that, the whole thing is running on KMS con, the patch version.

00:47.360 --> 00:50.440
So it's now a graphical output and it's basically one big live demo.

00:50.440 --> 00:53.320
So fingers crossed nothing is wrong.

00:54.320 --> 00:59.720
Here, there's a quick overview of what I'm going to be talking about the next 20, 25

00:59.720 --> 01:01.520
minutes.

01:01.520 --> 01:05.440
And so what is KMS con?

01:05.440 --> 01:13.080
For those who don't know, it is a systems console replacement meant to completely live

01:13.080 --> 01:15.000
in user space.

01:15.000 --> 01:16.600
It has a nice plugin architecture.

01:16.600 --> 01:20.960
It uses these plug-in architectures for actually implementing all its major features as shared

01:20.960 --> 01:22.200
library objects.

01:22.200 --> 01:28.320
It is unicode capable, meaning it has seroic support, Korean, Farsi, no emojis.

01:28.320 --> 01:32.760
But if you are bored and would like to contribute, I guess there might be five persons on this

01:32.760 --> 01:36.000
planet who would really welcome that.

01:36.000 --> 01:37.720
Two plugins I want to point out.

01:37.720 --> 01:43.720
One is the free type font support, which means you have vector-based fonts, open type, free

01:43.720 --> 01:44.720
type.

01:44.720 --> 01:48.960
And the other one, the most important one to me, is the rendering back end being based

01:48.960 --> 01:53.840
on OpenGLES, which actually allowed the stuff to be done to it that I wanted it to do to

01:53.840 --> 01:55.920
scratch my itch.

01:55.920 --> 01:56.920
It's kind of old.

01:56.920 --> 02:00.320
It was started 2012 by David Herrmann.

02:00.320 --> 02:04.760
Wanted to basically replace the in-curnal system console that's hiding behind config

02:04.760 --> 02:06.760
on a score YT.

02:06.760 --> 02:16.440
And it has a side of project where David extracted the whole terminal handling, sorry, the terminal

02:16.440 --> 02:19.040
handling stuff in its separate library.

02:19.040 --> 02:20.080
It's basically this Lipt.

02:20.080 --> 02:26.320
TSM is a toolkit, a neutral version of the Lipt.

02:26.320 --> 02:33.160
VTE that you might be knowing from GDK or GNOME.

02:33.160 --> 02:39.200
It was developed by David until about 2014, and then he magically probably vanished somewhere

02:39.200 --> 02:40.720
in the depths of Redhead.

02:40.720 --> 02:42.880
He didn't update his range anymore.

02:42.880 --> 02:47.960
And then from that point on, it kind of organically grew MnT to some other place, which is there

02:47.960 --> 02:50.240
at GitHub, AETF.

02:50.240 --> 02:58.080
That's the current most active fork of KMS-Con.

02:58.080 --> 02:59.600
So who am I?

02:59.600 --> 03:01.840
Usually when I do these talks, I just say, hey, I'm Xlo.

03:01.840 --> 03:03.880
I love computer graphics.

03:03.880 --> 03:09.280
Considering the circumstances, the venue, a little bit more context is in order, I think.

03:09.280 --> 03:12.760
I used to be a bit more visible and active in the open source community.

03:12.760 --> 03:14.840
Back in the day, I write Kyro Clock, Kyro Dock.

03:14.840 --> 03:16.000
I worked at Canonical.

03:16.000 --> 03:18.240
I implemented notify OSD.

03:18.240 --> 03:21.000
I always mess around with computer graphics.

03:21.000 --> 03:26.440
And you can contact me or ask questions if you don't get them in today.

03:26.440 --> 03:29.520
Later by email, the master don't thing on Twitter.

03:29.520 --> 03:35.840
And when I'm not hacking on computer graphic stuff, I like to race my motorcycles and skateboard.

03:35.920 --> 03:37.680
Enough about me.

03:37.680 --> 03:38.560
Motivation.

03:38.560 --> 03:40.440
Why I'm standing here.

03:40.440 --> 03:43.080
Why did I do what I did to KMS-Con?

03:43.080 --> 03:49.080
I have a kind of unusual monitor setup for a regular user, maybe not so unusual for a developer.

03:49.080 --> 03:54.480
I've got two 24-inch widescreen monitors, turn sideways, next to each other in portrait mode.

03:54.480 --> 03:59.800
That's not much an issue if you're running KDE agnome because they can easily rotate the output.

03:59.800 --> 04:03.360
When you have these moments where you don't want to be distracted by anything, you switch up

04:03.400 --> 04:07.240
every graphical output and just go to the systems console.

04:07.240 --> 04:09.520
That with a normal system console doesn't work very well.

04:09.520 --> 04:11.360
You see that in the picture in the corner.

04:11.360 --> 04:15.240
You sit there like that and after a minute you go like, fuck me.

04:15.240 --> 04:20.360
So I thought I can't be the only person on the planet who has this problem or use case.

04:20.360 --> 04:22.960
There's got to be something that solves my issue.

04:22.960 --> 04:23.920
I looked around.

04:23.920 --> 04:25.160
I couldn't find anything.

04:25.160 --> 04:27.520
So crap.

04:27.520 --> 04:30.160
During my research, I stumbled across KMS-Con.

04:30.160 --> 04:32.040
I said, ah, KMS-Con.

04:32.080 --> 04:33.440
Sounds interesting, intriguing.

04:33.440 --> 04:34.160
It's open source.

04:34.160 --> 04:35.600
Oh, that's good, sir.

04:35.600 --> 04:39.400
It has a pluggable rendering infrastructure and one of them is OpenGL.

04:39.400 --> 04:40.680
I know OpenGL.

04:40.680 --> 04:43.640
Rotating the output by 90 degrees with OpenGL.

04:43.640 --> 04:44.720
That's a piece of cake.

04:44.720 --> 04:49.240
I do that in the evening, maybe in the weekend best.

04:49.240 --> 04:50.560
Famous last words.

04:50.560 --> 04:54.160
It took me maybe one and a half weeks of some evenings.

04:54.160 --> 04:58.400
But that was last year, end of January, start of February.

04:58.400 --> 04:59.560
And I got it working.

04:59.560 --> 05:00.520
I said, oh, awesome.

05:00.520 --> 05:03.280
That's good topic for a lightning talk at FOSTA.

05:03.280 --> 05:06.960
Wrote the folks, I mean, two or three days before February.

05:06.960 --> 05:09.680
Ah, great idea for a lightning talk.

05:09.680 --> 05:10.760
I said, now, sorry, Merkel.

05:10.760 --> 05:13.200
Nice idea that everything's taken next year.

05:13.200 --> 05:14.000
So here we are.

05:18.400 --> 05:22.440
OK, so patch number one, the main edge to scratch.

05:22.440 --> 05:26.680
The OpenGL rendering back end that I touched, I didn't touch the rendering back ends like

05:26.680 --> 05:30.920
PIXMAN because, yeah, it technically would work, but it's not so nice.

05:30.920 --> 05:32.040
It's not so fast.

05:32.040 --> 05:38.160
I extended that with two entries in its V-table for all the methods that this plug-in provides.

05:38.160 --> 05:45.960
And one of them is the GL-Tex rotate that allows, oh, wait.

05:45.960 --> 05:48.360
Oops.

05:48.360 --> 05:50.600
So there.

05:50.600 --> 05:55.280
That allows to recalculate the aspect ratio, depending on the orientation that you want.

05:55.280 --> 06:03.800
And then it also recalculates the amount of columns and rows for the characters to fill the screen.

06:03.800 --> 06:06.800
And it does all that dynamically.

06:06.800 --> 06:12.520
Dynamically because of the third patch that I'll be talking about, but you'll see.

06:12.520 --> 06:17.120
And of course, talk is cheap.

06:17.120 --> 06:19.600
Let's do some more demos.

06:19.600 --> 06:21.640
I switch to another session.

06:21.640 --> 06:22.240
Log in again.

06:26.280 --> 06:27.280
T-Max.

06:27.280 --> 06:35.280
So I'll create two paints and make something happening in these paints.

06:35.280 --> 06:36.280
Oops.

06:36.280 --> 06:37.280
Oops.

06:37.280 --> 06:38.280
Hmm.

06:38.280 --> 06:52.160
Just as a stand-in, so there's stuff happening.

06:52.160 --> 06:57.640
And now I have a pre-configured hotkey that is super plus.

06:57.640 --> 06:59.000
And I'll rotate the output.

06:59.000 --> 07:03.800
It might make sense with this, but imagine your thing is turned around, right?

07:03.800 --> 07:09.160
So clockwise, counterclockwise.

07:09.160 --> 07:14.840
You can, of course, while you're doing that, resize the characters.

07:14.840 --> 07:15.840
Bigger.

07:15.840 --> 07:19.520
Keep rotating stuff.

07:19.520 --> 07:21.160
And make it smaller again.

07:21.160 --> 07:22.160
Oops.

07:22.160 --> 07:25.160
Ah, okay, something.

07:25.160 --> 07:27.160
Okie dokie.

07:27.160 --> 07:29.160
Come on.

07:29.160 --> 07:31.160
Hmm.

07:34.160 --> 07:38.160
So, so much for the output rotation.

07:38.160 --> 07:41.160
That was the main itch to scratch.

07:41.160 --> 07:46.160
Then I thought, well, okay, now I spent the time to learn the code base, its architecture,

07:46.160 --> 07:49.160
how stuff works.

07:49.160 --> 07:54.160
I also really like this GPM tool.

07:54.160 --> 08:01.160
If you maybe know GPM is this general pointer mouse deamon thing with the old console, it

08:01.160 --> 08:04.160
provides a text cursor, which is attached to your mouse.

08:04.160 --> 08:07.160
And then you can just select text and copy and paste stuff when you're really too lazy

08:07.160 --> 08:08.160
to type.

08:08.160 --> 08:10.160
That doesn't work with KMSCon.

08:10.160 --> 08:11.160
I don't know, fuck.

08:11.160 --> 08:12.160
I really like that.

08:12.160 --> 08:14.160
It cannot be that hard, right?

08:14.160 --> 08:17.160
So, okay, read the code again.

08:17.160 --> 08:23.160
And then, since KMSCon tries to keep its dependency over external libraries really, really slow,

08:23.160 --> 08:27.160
low, it implements its own event loop and timer system.

08:27.160 --> 08:28.160
So, you read up that.

08:28.160 --> 08:32.160
It's kind of documented in the code, but not like properly.

08:32.160 --> 08:33.160
But, yeah.

08:33.160 --> 08:34.160
So, I figured it out.

08:34.160 --> 08:40.160
I'm using the kernel input system for mice and basically implemented a new additional

08:40.160 --> 08:41.160
plug-in.

08:41.160 --> 08:44.600
Right now, I still compile it directly into the binary because I'm a bit lazy, but that

08:44.600 --> 08:47.160
needs to be extracted at its own shared library.

08:47.160 --> 08:55.160
So, it works then with mouse track points, the Bluetooth-based Apple Magic mousepad,

08:55.160 --> 09:00.160
maybe also with the first touch point for touch screens, but I don't have that hardware.

09:00.160 --> 09:03.160
So if anybody has that hardware, please download it, report to me.

09:03.160 --> 09:06.160
I'll try to make it work if it doesn't.

09:06.160 --> 09:10.160
Yeah, there's still this busy polling issue.

09:10.160 --> 09:17.160
I didn't hook that up to the event loop and the timer, so that's something I need to clean

09:17.160 --> 09:18.160
up.

09:18.160 --> 09:24.160
And the mouse plug-in is also the one that actually uses the TSM directly because the

09:24.160 --> 09:28.160
current paste is basically implemented in lib TSM.

09:28.160 --> 09:31.160
So, it allows you to select, oh, this is the start of the selection.

09:31.160 --> 09:32.160
There's the end.

09:32.160 --> 09:35.160
Copy it to a clipboard buffer, which TSM handles.

09:35.160 --> 09:38.160
You don't have to deal with that in your own application code.

09:38.160 --> 09:43.160
And then you just paste it wherever the cursor ends up being.

09:43.160 --> 09:45.160
And we can demo that too.

09:45.160 --> 09:49.160
So, let's cut and paste some file names.

10:02.160 --> 10:04.160
Okay, okay, here's the mouse pointer.

10:04.160 --> 10:09.160
So, I can just, ah, I think I found a new bug.

10:09.160 --> 10:10.160
That is interesting.

10:10.160 --> 10:16.160
Usually, that should not happen at that spot, but, yeah, pasting does work.

10:16.160 --> 10:19.160
So, I move it up to the fan above.

10:19.160 --> 10:25.160
The problem is I'm missing some recalculation when I resize the font.

10:25.160 --> 10:29.160
So, usually, if I would scale it down one more, then it should work again.

10:29.160 --> 10:32.160
But that works with regular Latin text.

10:32.160 --> 10:35.160
But, I mean, that's cheap.

10:35.160 --> 10:38.160
Okay, Scon supports Unicode.

10:42.160 --> 10:46.160
So, let's look for some, oh, that's, I think that's Greek.

10:46.160 --> 10:48.160
Yeah, I think that's Greek.

10:50.160 --> 10:52.160
You select the same way, yeah, okay.

10:52.160 --> 10:54.160
Imagine that would be correct.

10:54.160 --> 10:56.160
Correct.

10:56.160 --> 10:59.160
So, I drags there.

11:11.160 --> 11:14.160
I have no idea what type of language that is.

11:17.160 --> 11:22.160
So, yeah, it's Unicode, but it feels like a regular character.

11:22.160 --> 11:23.160
And it just works.

11:23.160 --> 11:24.160
That's the magic of K-Maskon.

11:24.160 --> 11:25.160
I really love it.

11:25.160 --> 11:28.160
I don't know why it's not shipped by default for every distribution.

11:28.160 --> 11:29.160
I don't know.

11:29.160 --> 11:31.160
It's really awesome.

11:31.160 --> 11:34.160
So, that is patch number two.

11:34.160 --> 11:39.160
The third patch is to make it a little bit more consistent with the way stuff works

11:39.160 --> 11:42.160
in a typical decimal environment, a graphical environment.

11:42.160 --> 11:46.160
I know from GNOME, when you have a driver sensor in the system

11:46.160 --> 11:48.160
and you turn the laptop, it recognizes that.

11:48.160 --> 11:52.160
And then it turns, if you allow it to be turned automatically, it turns your display.

11:53.160 --> 11:59.160
And I thought, well, if you have the sensor, well, if the graphical environment, GNOME, KDE,

11:59.160 --> 12:03.160
can read that, then, well, the system console should, too, right?

12:03.160 --> 12:05.160
I mean, be consistent.

12:05.160 --> 12:09.160
So, I sat down and looked around and implemented that.

12:09.160 --> 12:10.160
That was a bit more tricky.

12:10.160 --> 12:13.160
It was not that much work, but it was a little bit tricky.

12:13.160 --> 12:21.160
And I thought to myself, well, since the amount of external dependencies needs to be really low,

12:21.160 --> 12:25.160
I think I'm going to stick with the lowest level I can get along with,

12:25.160 --> 12:29.160
and that is the low-level D-Bus API, which even the D-Bus maintainers discourage you from using.

12:29.160 --> 12:30.160
I used it anyway.

12:30.160 --> 12:31.160
It works.

12:31.160 --> 12:33.160
I cannot show it on this laptop.

12:33.160 --> 12:36.160
I have another laptop with me, which has such a driver sensor.

12:36.160 --> 12:42.160
After the talk, either here or in the hallway, if you want to see that live come by,

12:42.160 --> 12:44.160
run into me, and I'll demo that.

12:44.160 --> 12:45.160
It's really fancy.

12:45.160 --> 12:53.160
It's like extra lead points for us when you show that to your geek friends.

12:53.160 --> 12:57.160
And then, at the end, there will be links to screencasts,

12:57.160 --> 13:02.160
where I show that for anybody who's not here or sees that as a recording in the future.

13:02.160 --> 13:08.160
Or just download the code, compile it, and use it yourself.

13:08.160 --> 13:13.160
So, the last patch, that's basically just messing around.

13:13.160 --> 13:15.160
The last patches kind of make sense.

13:15.160 --> 13:20.160
They improve existing functionality or add new functionality.

13:20.160 --> 13:24.160
Since I'm a computer graphics nut and I like to mess around with stuff,

13:24.160 --> 13:26.160
I thought, now I want to have fun.

13:26.160 --> 13:38.160
The best thing you can do with just a terminal-based text interface usually is, well, ASCII-Art.

13:38.160 --> 13:42.160
And there's this famous demo, and I think everybody knows that, this ASCII-Art stuff.

13:42.160 --> 13:46.160
It's basically a very clever way of doing very, very lower solution,

13:46.160 --> 13:52.160
ray tracing on the CPU, and then using the characters as the, let's say, brightness pixels.

13:52.160 --> 13:55.160
And then this creates the illusion of a 3D object running around.

13:55.160 --> 13:59.160
But with KMSCon, and we have openGL rendering back-end,

13:59.160 --> 14:01.160
surely we can do better these days.

14:01.160 --> 14:03.160
And so I did.

14:04.160 --> 14:12.160
So, I'll give you live GL SL shader backgrounds.

14:12.160 --> 14:16.160
This is a little bit my, I'm also a little bit active in the demo scene.

14:16.160 --> 14:19.160
I like to mess around with some demo events,

14:19.160 --> 14:24.160
and this type of scientist fields rendering is typically the stuff that you do.

14:24.160 --> 14:27.160
So you have now live shader backgrounds.

14:27.160 --> 14:31.160
And this actually, although taken to the next level, also implements

14:31.160 --> 14:37.160
an old initial to-do item from David Herrmann,

14:37.160 --> 14:41.160
because he wanted to have background images.

14:41.160 --> 14:44.160
Okay, it's animated. It's real time. Good.

14:51.160 --> 14:55.160
Okay, now, after all this, to upstream or not to upstream?

14:55.160 --> 14:57.160
Of course, to upstream, right?

14:57.160 --> 14:59.160
I mean, be a good open-source citizen.

14:59.160 --> 15:01.160
Upstream your work. You found something that you like.

15:01.160 --> 15:03.160
You improved a little bit to a scratcher edge.

15:03.160 --> 15:06.160
You put in the work to make it as clean as possible,

15:06.160 --> 15:10.160
fit with the coding style and the system software design and everything.

15:10.160 --> 15:14.160
Okay, so initially I brought my patches against the branch from David.

15:14.160 --> 15:19.160
Then I was contacted by a Debian maintainer, developer, Victor Vesterhuis,

15:19.160 --> 15:21.160
or something, Vicky, and he said,

15:21.160 --> 15:23.160
ah, no, no, don't do that.

15:23.160 --> 15:25.160
Use this fork here from somebody else.

15:25.160 --> 15:27.160
This is much more actively maintained.

15:27.160 --> 15:29.160
It has also a Mason build system.

15:29.160 --> 15:30.160
It's much nicer.

15:30.160 --> 15:32.160
Then the likelihood of your stuff being reviewed

15:32.160 --> 15:34.160
and actually moved upstream are much greater.

15:34.160 --> 15:41.160
I did that too, and then it sits there since about six months ago.

15:41.160 --> 15:43.160
Not anybody looked at it and touched it.

15:43.160 --> 15:47.160
I got two requests or questions on GitHub issues.

15:47.160 --> 15:50.160
Yeah, it's just sitting there.

15:50.160 --> 15:54.160
So this is also my hope to, let's say, mobilize the community.

15:54.160 --> 15:57.160
You say, if you really like that, if you use KMSCon, you like these features,

15:57.160 --> 16:00.160
please poke them so they review my stuff.

16:00.160 --> 16:03.160
I'm willing to put in the work to make it fit the coding style

16:03.160 --> 16:06.160
and everything as much as possible.

16:06.160 --> 16:11.160
And I've still got future ideas with truly multi-hat capable KMSCon.

16:11.160 --> 16:13.160
So it's not just mirroring the stuff.

16:13.160 --> 16:15.160
So I'm seeing the same here and here,

16:15.160 --> 16:22.160
but having actually per screen connected display one terminal session with KMSCon.

16:22.160 --> 16:26.160
And then, of course, you need the information of how other screens arranged.

16:26.160 --> 16:32.160
You could gather that information from any settings saved from KDE, Eugnome.

16:32.160 --> 16:36.160
To read that with KMSCon, you need the libraries from KDE, Eugnome to link.

16:36.160 --> 16:37.160
That's not so nice.

16:37.160 --> 16:43.160
Nice would be kind of an end-curses interface where you have then ASCII art graphics

16:43.160 --> 16:45.160
to arrange your layout of your screens.

16:45.160 --> 16:47.160
But I started actually doing that.

16:47.160 --> 16:51.160
It's not finished yet, but it would be really nice.

16:51.160 --> 16:56.160
So maybe it would be accepted upstream too.

16:56.160 --> 16:59.160
So links to the source code.

16:59.160 --> 17:04.160
Some blog posts where I talk about what worked, what didn't work, what was hard,

17:04.160 --> 17:07.160
some small milestones.

17:07.160 --> 17:11.160
Lots of screencasts where I try to spread the word a little bit,

17:11.160 --> 17:15.160
but the thing like and subscribe doesn't work because I'm always watching my stuff.

17:15.160 --> 17:18.160
So I put it there anyway.

17:19.160 --> 17:21.160
Are there any questions?

17:24.160 --> 17:25.160
Go.

17:25.160 --> 17:28.160
So just one one, I guess, with the mouse support.

17:28.160 --> 17:29.160
Yes.

17:29.160 --> 17:31.160
Were you actually like double-click to select?

17:31.160 --> 17:33.160
Is everything character is possible?

17:33.160 --> 17:34.160
Yes.

17:34.160 --> 17:37.160
So the question is to select, double-click.

17:37.160 --> 17:39.160
Yes, that does work.

17:39.160 --> 17:42.160
I implemented that, but it's a bit iffy.

17:42.160 --> 17:45.160
But usually it works.

17:45.160 --> 17:48.160
But there's some things I still need to iron out.

17:48.160 --> 17:50.160
But yes, yeah, it works.

17:50.160 --> 17:52.160
Is my phone your scene handle?

17:52.160 --> 17:55.160
Yes, basically that is my nickname forever and ever.

17:55.160 --> 17:57.160
It's not a pun on Apple systems.

17:57.160 --> 17:59.160
It's just make slow.

17:59.160 --> 18:01.160
Yeah, that is my scene.

18:01.160 --> 18:03.160
And you're part of a demo group?

18:03.160 --> 18:06.160
No, I'm a single person.

18:06.160 --> 18:10.160
I know the demo scene from forever,

18:10.160 --> 18:16.160
but I only got active about three, four years ago.

18:16.160 --> 18:22.160
And I'm not part of a demo group.

18:22.160 --> 18:27.160
I ran two times at revision and evoke into the folks

18:27.160 --> 18:29.160
from Logicoma.

18:29.160 --> 18:34.160
I'm kind of sometimes jumping on the stream from Hoffman.

18:34.160 --> 18:37.160
He's basically doing Amiga assembler stuff.

18:37.160 --> 18:42.160
And he's an awesome musician, but I'm not part of a demo group.

18:42.160 --> 18:44.160
But I love the demo scene.

18:44.160 --> 18:47.160
If you like computer graphics and you don't own a demo scene,

18:47.160 --> 18:49.160
you're seriously missing out.

18:49.160 --> 18:51.160
Can I just have a part of this as we make that?

18:51.160 --> 18:52.160
Yeah, I know.

18:52.160 --> 18:55.160
There's the gathering assembly and all that.

18:55.160 --> 18:58.160
No, wait, assembly is Finland.

18:58.160 --> 19:04.160
I still need to get to Scandinavia for sure, for demo scene.

19:04.160 --> 19:06.160
Can I ask on now?

19:06.160 --> 19:10.160
Yeah, I mean, it would be nice to make a bosomatic variation

19:10.160 --> 19:12.160
into KMSCon.

19:12.160 --> 19:14.160
Yeah.

19:14.160 --> 19:18.160
Sorry, your hand was a little bit fast.

19:18.160 --> 19:22.160
Does it support subpixel rendering for rendering the fonts?

19:22.160 --> 19:24.160
Does it support subpixel rendering for fonts?

19:24.160 --> 19:25.160
Yes.

19:25.160 --> 19:28.160
Well, whatever free type does.

19:28.160 --> 19:30.160
So it's using free type and through Pango.

19:30.160 --> 19:34.160
When you rotate the screen, then it takes into consideration

19:34.160 --> 19:38.160
or then it just broke it?

19:38.160 --> 19:41.160
It's rendering.

19:41.160 --> 19:43.160
No, it should be.

19:43.160 --> 19:44.160
It should work.

19:44.160 --> 19:46.160
If the app doesn't do the rotation, you do the rotation.

19:46.160 --> 19:47.160
I do the rotation.

19:47.160 --> 19:49.160
It's broken, maybe.

19:49.160 --> 19:53.160
I need, actually, that's good.

19:53.160 --> 19:55.160
I need to look, but I think it's not broken.

19:55.160 --> 19:57.160
But I need to look into that.

19:57.160 --> 19:58.160
That's good.

19:58.160 --> 20:00.160
Thanks a lot.

20:00.160 --> 20:01.160
Yeah.

20:01.160 --> 20:03.160
I mean, you missed the presentation,

20:03.160 --> 20:06.160
but is there any minimum version of OpenGL required?

20:06.160 --> 20:12.160
Minimum version of OpenGL required, I think.

20:12.160 --> 20:13.160
I would guess.

20:13.160 --> 20:15.160
Oh, my God.

20:15.160 --> 20:16.160
3.3.

20:16.160 --> 20:22.160
I mean, even OpenGL 4.0 something is like 10 or, I don't know,

20:22.160 --> 20:26.160
how many years old, but certainly any system should work.

20:26.160 --> 20:30.160
But I think 3.3 should be enough.

20:30.160 --> 20:31.160
Yeah.

20:31.160 --> 20:34.160
How does this compare to using a full-screen real-time

20:34.160 --> 20:36.160
compositor, such as page,

20:36.160 --> 20:42.160
compared with a lightweight terminal emulator?

20:42.160 --> 20:48.160
How does it compare to a lightweight compositor?

20:48.160 --> 20:50.160
That's a good question.

20:50.160 --> 20:51.160
I have no idea.

20:51.160 --> 20:52.160
I think it's more lightweight.

20:52.160 --> 20:55.160
It's much more simpler.

20:55.160 --> 20:58.160
It's certainly not a desktop environment,

20:58.160 --> 21:00.160
so it's nothing like Western.

21:00.160 --> 21:04.160
You can, at some point, easily make the jump to that

21:04.160 --> 21:07.160
if you keep pushing, but no, no, it's not.

21:07.160 --> 21:10.160
It's just one OpenGL context.

21:10.160 --> 21:13.160
You run your terminal screen into that, and that's it.

21:13.160 --> 21:14.160
There you go.

21:14.160 --> 21:15.160
Thank you.

21:15.160 --> 21:20.160
So two questions of first-of-end remos.

21:20.160 --> 21:22.160
Do you implement all the remos by yourself,

21:22.160 --> 21:25.160
or it can be waited until the editors, for example,

21:25.160 --> 21:28.160
some of the console editors handle mouse events?

21:28.160 --> 21:29.160
No.

21:29.160 --> 21:32.160
It's right now in process of KMSCon.

21:32.160 --> 21:33.160
Sorry.

21:33.160 --> 21:36.160
The question is if the mouse handling could be, for example,

21:36.160 --> 21:40.160
handled or actually be read in an editor,

21:40.160 --> 21:43.160
like Emacs, I guess, or Vim or something.

21:43.160 --> 21:44.160
No.

21:44.160 --> 21:48.160
It's not like it's a KMSCon version of GPM.

21:48.160 --> 21:49.160
That would be the next step.

21:49.160 --> 21:52.160
But that would be a nice patch.

21:52.160 --> 21:53.160
I'm sorry.

21:53.160 --> 21:54.160
Yeah.

21:54.160 --> 21:55.160
Okay.

21:55.160 --> 21:59.160
The second question is, so you are handling all the rotation

21:59.160 --> 22:00.160
inside your GAO.

22:00.160 --> 22:05.160
How do you talk about handling rotation for the KMS properties?

22:05.160 --> 22:10.160
Suggestion how to handle the rotation through KMS properties.

22:10.160 --> 22:12.160
I haven't considered that.

22:12.160 --> 22:16.160
I can look into that and then see if that makes sense,

22:16.160 --> 22:19.160
or if I can do it or change my patch.

22:19.160 --> 22:20.160
Sure.

22:20.160 --> 22:21.160
Yeah.

22:21.160 --> 22:22.160
Okay.

22:22.160 --> 22:25.160
Anything else?

22:25.160 --> 22:27.160
Well, if, yeah.

22:27.160 --> 22:28.160
Thank you.

22:28.160 --> 22:29.160
Thank you.

22:29.160 --> 22:30.160
Thank you.

22:30.160 --> 22:31.160
Thank you.

22:31.160 --> 22:32.160
Thank you.

22:32.160 --> 22:33.160
Thank you.

