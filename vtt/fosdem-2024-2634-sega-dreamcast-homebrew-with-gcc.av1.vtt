WEBVTT

00:00.000 --> 00:07.000
Okay, cool, cool.

00:07.000 --> 00:22.000
Okay, so up next is Falko Gurgis telling us I'm sure an entertaining story about Sega

00:22.000 --> 00:27.000
Dreamcast, how did you get this idea?

00:27.000 --> 00:32.000
I have an entertaining story about Sega Dreamcast Homebrew with GCC.

00:32.000 --> 00:33.000
That's true.

00:33.000 --> 00:38.000
Not this standard thing you would do.

00:38.000 --> 00:40.000
You ready?

00:40.000 --> 00:44.000
Alright, so I'm talking today on behalf of the Sega Dreamcast community.

00:44.000 --> 00:50.000
I'm actually a developer on the Homebrew independent SDK, SDK called Callisty iOS.

00:50.000 --> 00:53.000
And we're talking about how basically...

00:53.000 --> 00:56.000
Yeah, no problem.

00:57.000 --> 01:01.000
We good?

01:01.000 --> 01:03.000
Okay, yeah.

01:03.000 --> 01:07.000
So basically this entire Homebrew community is powered by GCC.

01:07.000 --> 01:14.000
And I'm just showing you kind of what the kind of stuff that being part of the GCC ecosystem is allowing us to do.

01:14.000 --> 01:16.000
So first of all, what is the Sega Dreamcast?

01:16.000 --> 01:20.000
Maybe some of you don't know because it had two years in the limelight.

01:20.000 --> 01:25.000
It was released in 1999 and it was only commercially viable until 2001.

01:25.000 --> 01:29.000
Despite that fact it had a substantial effect on the gaming industry.

01:29.000 --> 01:35.000
It left a huge legacy and it competed directly with the PlayStation 2.

01:35.000 --> 01:38.000
A little bit less the GameCube and Xbox because it didn't last that long.

01:38.000 --> 01:45.000
And then a little bit about it, it had Hitachi, which...SH4 CPU, which is now owned by Renaissance.

01:45.000 --> 01:52.000
An imagination PowerVR 2 GPU, which was the predecessor to what eventually got used in the iPhone.

01:52.000 --> 01:58.000
So that same technology actually for the GPU went on to do quite a lot of fancy stuff.

01:58.000 --> 02:00.000
And then there's a little bit extra about it.

02:00.000 --> 02:04.000
But the key thing here is the Hitachi SH4 CPU.

02:04.000 --> 02:08.000
And that's what has made our destinies intertwined with GCC.

02:08.000 --> 02:13.000
Because GCC is the only compiler that supports the Super-H architecture.

02:13.000 --> 02:16.000
So why the Sega Dreamcast?

02:16.000 --> 02:18.000
What's the big deal?

02:18.000 --> 02:20.000
So I think there's a lot of strong arguments for doing it.

02:20.000 --> 02:25.000
I think in like an era where people are into Raspberry Pi programming and embedded systems,

02:25.000 --> 02:29.000
it offers a really good middle ground between high performance because it's good at graphics,

02:29.000 --> 02:33.000
it's good at floating point operations and embedded programming.

02:33.000 --> 02:37.000
We have a lot of established tools that are really good.

02:37.000 --> 02:41.000
As you'll see we have really modern compiler support.

02:41.000 --> 02:43.000
We have a lot of language support.

02:43.000 --> 02:46.000
Thanks to Matt Godbolt we have SH4 and compiler Explorer.

02:46.000 --> 02:51.000
So you can actually check, look at what the disassembly of your Sega Dreamcast code looks like

02:51.000 --> 02:53.000
to make sure it's optimized.

02:53.000 --> 02:59.000
And as a beginner you can treat it like just kind of a weak PC using cross-platform APIs.

02:59.000 --> 03:04.000
Or as you mature in advance you can go down to the hardware level and optimize for it.

03:04.000 --> 03:07.000
There's also a lot of cool toys and peripherals.

03:07.000 --> 03:09.000
There's light guns, Samba De Amigo Maracas.

03:09.000 --> 03:11.000
There's the visual memory unit.

03:11.000 --> 03:15.000
And visual memory unit itself, the little VMU, has its own little homebrew scene.

03:16.000 --> 03:26.000
So as I was saying we have a pretty decent community and because our independent SDK uses no Sega code

03:26.000 --> 03:34.000
we're actually able to release our homebrew commercially and sell it online through retail stores and stuff like that.

03:34.000 --> 03:39.000
So this is how many we've released each year commercially and there's just a collage of different commercial games.

03:39.000 --> 03:43.000
So as you can see you're not going to get rich on Dreamcast,

03:43.000 --> 03:47.000
but you know if you're making a PC game within that spec range maybe you should check it out.

03:47.000 --> 03:52.000
So this is a little bit about Callisty iOS before I get really deep in some code stuff.

03:52.000 --> 03:54.000
This is a little bit about the architecture.

03:54.000 --> 04:00.000
So it's Callisty iOS, it's like a big SDK but it also is like an operating system.

04:00.000 --> 04:01.000
We have a kernel.

04:01.000 --> 04:06.000
We integrate with NewLib 440, which as far as I know is the latest one that's out there.

04:06.000 --> 04:10.000
That's where we do file I O, date time, malloc.

04:10.000 --> 04:14.000
We have a really cool virtual file system which abstracts the way the PC CD-ROM.

04:14.000 --> 04:16.000
You can stream from your PC.

04:16.000 --> 04:19.000
You can use the new SD card readers.

04:19.000 --> 04:22.000
Networking, we even have IPv6 on this thing.

04:22.000 --> 04:24.000
We have examples.

04:24.000 --> 04:27.000
We have add-ons and ports for OpenGL, OpenAL.

04:27.000 --> 04:36.000
The tool chains as you'll see we have GCC 1321, latest Benutils, GDB going on it.

04:36.000 --> 04:44.000
We're trying to take this retro game console and let you use the latest and greatest versions of the languages of your choice on it.

04:44.000 --> 04:47.000
That's kind of a little bit of what we're going to touch upon.

04:47.000 --> 04:49.000
This is a little bit about my Dreamcast.

04:49.000 --> 04:52.000
It's not going to go into too much detail but as you can see it's like a car.

04:52.000 --> 04:56.000
You can totally spend all your money on it if you want and go to town on it.

04:56.000 --> 04:58.000
You don't need to do any of this though to develop for it.

04:58.000 --> 05:03.000
That's another big point of it is as long as you can burn a CD-ROM,

05:03.000 --> 05:09.000
90% of the Dreamcasts out there can boot your homebrew game as long as it's burned a certain way.

05:09.000 --> 05:12.000
That's part of why the homebrew scene became so big.

05:12.000 --> 05:15.000
The first thing we're going to look at is C23.

05:15.000 --> 05:17.000
We wanted C23 on the thing.

05:17.000 --> 05:18.000
What did it take to get there?

05:18.000 --> 05:20.000
It didn't take as much as we thought.

05:20.000 --> 05:27.000
One of the first things that we had to do was support Atomics from C11 so that you can say atomic int, atomic bool,

05:27.000 --> 05:32.000
and have, since we have a preemptive multi-threading scheduler,

05:32.000 --> 05:36.000
you want to be able to have atomic variables that aren't interrupted and stuff.

05:36.000 --> 05:40.000
Unfortunately the SH4 is old so there's no hardware support for Atomics.

05:40.000 --> 05:42.000
But since it's single core it's not a big deal.

05:42.000 --> 05:46.000
You just disable interrupts around it, you load or store your value,

05:46.000 --> 05:49.000
and then you enable interrupts afterwards.

05:49.000 --> 05:54.000
So this is actually offered by the compiler, the SH compiler,

05:54.000 --> 05:57.000
as the soft imask model.

05:57.000 --> 06:01.000
What it did not offer is 64-bit and generic Atomics.

06:01.000 --> 06:04.000
So we had to implement that and there's the C code for,

06:04.000 --> 06:07.000
it's kind of an ugly C macro to do it, but you can basically see.

06:07.000 --> 06:12.000
We just disable the IRQ, we load or store a type, and then we enable it later.

06:12.000 --> 06:14.000
And that's the basis of our Atomic model.

06:14.000 --> 06:20.000
So if the scheduler can't get interrupted when you're accessing Atomic, then it's Atomic.

06:21.000 --> 06:23.000
Then we validated the Atomics.

06:23.000 --> 06:27.000
You'll see a bunch of the output there is from my Dreamcast.

06:27.000 --> 06:30.000
So we have a bunch of tasks we ran through, a bunch of different Atomics,

06:30.000 --> 06:34.000
an Atomic buffer, and yeah, the Atomics work now on the Dreamcast.

06:34.000 --> 06:36.000
It's pretty nice.

06:36.000 --> 06:40.000
Something that was much harder was adding thread local storage support.

06:40.000 --> 06:43.000
So in C and C++ there's a thread local keyword,

06:43.000 --> 06:45.000
and there's a lot of stuff you have to do for that.

06:45.000 --> 06:50.000
It's a delicate interplay between the compiler and the operating system.

06:50.000 --> 06:54.000
On the operating system end, don't worry if this code is a little dense,

06:54.000 --> 06:56.000
that's the whole point, this was actually a pain,

06:56.000 --> 06:59.000
and that's code just there to show you what a pain it was.

06:59.000 --> 07:03.000
You have to allocate with every thread,

07:03.000 --> 07:08.000
you have to allocate extra block for thread local storage with the T data

07:08.000 --> 07:14.000
and T BSS segments for thread local, and then you have to swap every time you swap context,

07:14.000 --> 07:18.000
you have to swap the thread pointer to point to a new thread chunk.

07:18.000 --> 07:22.000
So we did that, and this is some of the validation tests for it.

07:22.000 --> 07:29.000
What actually makes it hard is you can align your TLS storage arbitrarily,

07:29.000 --> 07:32.000
so we had to compensate for arbitrary alignment,

07:32.000 --> 07:36.000
that was all the extra logic that was more than just a malloc with a fixed size,

07:36.000 --> 07:39.000
you have to also align those segments.

07:39.000 --> 07:42.000
So yeah, now TLS works on the Dreamcast.

07:43.000 --> 07:46.000
And then that was pretty much it, we got C23,

07:46.000 --> 07:50.000
we have no pointer, auto, type of, all the cool stuff that C23 added.

07:50.000 --> 07:56.000
VAopt is now in C23, Align As, Static, Constexpr, Compound Literals,

07:56.000 --> 07:58.000
one of my new favorite things to use right there.

07:58.000 --> 08:03.000
This is just me throwing in a bunch of C23 with a Breakpoint API.

08:03.000 --> 08:07.000
Oh, Binary Literals, pretty nice, C23 edition.

08:08.000 --> 08:14.000
This is a little video, uh-oh, was a little video, it's not working.

08:14.000 --> 08:17.000
Okay, well, cool.

08:17.000 --> 08:22.000
Maybe after you can check out my Twitter, all the videos are on there in case they don't work.

08:22.000 --> 08:27.000
So C plus plus 20 and 23 is up next.

08:27.000 --> 08:31.000
What we got for free, we actually got a whole lot for free, it's kind of cool.

08:31.000 --> 08:35.000
Concepts, constraints, modules are not fully supported by GCC yet,

08:35.000 --> 08:39.000
but hey, everything that was supported worked fine for SuperH, we were pretty shocked.

08:39.000 --> 08:44.000
Ranges, look at that crazy range stuff that we can do with C plus plus 23 on the Dreamcast.

08:44.000 --> 08:48.000
Pretty sweet, standard format, and this thing, a static,

08:48.000 --> 08:51.000
variadic, multi-dimensional, overloaded subscript operator.

08:51.000 --> 08:54.000
You can do that on your Dreamcast now, it works.

08:54.000 --> 08:56.000
That was pretty awesome.

08:56.000 --> 09:00.000
What we had to earn with this, standard async did not just work for us

09:00.000 --> 09:03.000
because our kernel had a serious bug with once in it

09:03.000 --> 09:10.000
that nothing had exercised that code path with the ferocity that modern C plus plus did,

09:10.000 --> 09:12.000
and we found a race condition there.

09:12.000 --> 09:15.000
Standard random device took a little bit of work, I'm going to get into that.

09:15.000 --> 09:18.000
Standard file system is not quite supported.

09:18.000 --> 09:22.000
Yeah, that's a sore point for me right now, we're working on that, that's our fault.

09:22.000 --> 09:28.000
We're not propagating error now properly with NewLib, working on that.

09:28.000 --> 09:31.000
Standard time zone, well Dreamcast doesn't really have a time zone,

09:31.000 --> 09:35.000
so not much we can do about that, although I will say we gracefully don't support it,

09:35.000 --> 09:37.000
so it's not a big deal.

09:37.000 --> 09:42.000
Stack trace is one that doesn't look like there's much we can do about that.

09:42.000 --> 09:47.000
Yeah, C plus plus 20 stack trace, I got the library compiling for it,

09:47.000 --> 09:53.000
but it looks like deep within the library where it's trying to look for the binary path

09:53.000 --> 10:00.000
for reflecting over the L for executable to unwind the stack and look up the symbols

10:00.000 --> 10:04.000
there's just not really any way for us to tell it where to look over the network

10:04.000 --> 10:07.000
for a Dreamcast, so yeah, there's no stack trace right now.

10:07.000 --> 10:09.000
Maybe we can hack something up for that later.

10:09.000 --> 10:16.000
Standard random device, it actually works fine, so you can do all this crazy random stuff.

10:16.000 --> 10:20.000
This is the NewLib hook where we actually hooked into,

10:20.000 --> 10:24.000
we supplied the entropy from a bunch of uninitialized RAM,

10:24.000 --> 10:30.000
and that's what the entropy is coming from uninitialized RAM,

10:30.000 --> 10:35.000
which goes to standard random device, and then this is just a uniform distribution

10:35.000 --> 10:42.000
getting generated on the Sega Dreamcast and showing, you know, looks pretty uniform.

10:42.000 --> 10:47.000
Yeah, C plus plus concurrency meets the Dreamcast, this is pretty exciting.

10:47.000 --> 10:51.000
Yeah, there's a bunch of interesting C plus plus 20 stuff there,

10:51.000 --> 10:56.000
so I made a huge test thing that we're running on Dreamcast,

10:56.000 --> 11:02.000
which is just, it is running a bunch of standard, it's generating a bunch of standard async threads,

11:02.000 --> 11:09.000
testing everything from semaphores, latches, share locks, condition variables, barriers, and everything.

11:09.000 --> 11:12.000
And at this point, I guess I can't show it because the video is not loading,

11:12.000 --> 11:17.000
but it would just be like a big printf printout showing that all the tests are passing.

11:17.000 --> 11:24.000
So, yeah, as far as I know, including code routines, everything from the support for GCC up to C plus plus 23

11:24.000 --> 11:30.000
is working fine on the Sega Dreamcast because you definitely need that level of concurrency to work with this machine here.

11:33.000 --> 11:38.000
Alright, let's see. Yeah, I had another little video that's not, I don't know why they're not loading,

11:38.000 --> 11:42.000
but they're all on my Twitter. Alright, Objective C, there's a little more to this

11:42.000 --> 11:48.000
because there's a couple reasons. GCC, it looks like, doesn't quite support the latest version of Objective C.

11:48.000 --> 11:53.000
Objective C, too, I guess that's because Apple didn't want to fund it anymore, I'm not sure.

11:53.000 --> 12:01.000
So, we had to make do with what we had. It looks like Objective C might be a little broken right now for cross compilation.

12:01.000 --> 12:07.000
We had to patch a build script right now to get to cross compile for bare metal.

12:07.000 --> 12:14.000
It was failing a compilation stage and we just basically commented it out in one of the config files and then it worked.

12:14.000 --> 12:20.000
We were able to build LibObjective C. The problem with, you know, building plain Objective C is,

12:20.000 --> 12:25.000
LibObjective C is a C library that lets you access all of the object-oriented features of Objective C.

12:25.000 --> 12:30.000
It's not very pretty, it's not very idiomatic of Objective C, but that's the raw runtime.

12:30.000 --> 12:36.000
In order to do anything useful with Objective C or do anything that you normally associate with Objective C,

12:36.000 --> 12:41.000
you need the foundation standard library, which is typically associated with Apple.

12:41.000 --> 12:44.000
That's where your NS string, NS object, all that comes from.

12:44.000 --> 12:47.000
Luckily, GNUSTEP has an open source implementation of that.

12:47.000 --> 12:57.000
So, we tried to port that to the Sega Dreamcast to give you, you know, this very big, nice Apple API that you definitely want for your Sega Dreamcast homebrew.

12:58.000 --> 13:01.000
Oops, that went pretty well.

13:01.000 --> 13:10.000
So now you can, you've got data structures, you've got auto-release pool, you've got NS string, NS log, all that kind of stuff on the Sega Dreamcast.

13:10.000 --> 13:17.000
You know, that's just basically some Hello World stuff doing that from Objective C and that's the Dreamcast output.

13:17.000 --> 13:23.000
Now, what gets a little more interesting is the concurrency model for Objective C is actually pretty cool.

13:23.000 --> 13:29.000
We support the NS run loop, which has NS timer, which lets you schedule periodic timers.

13:29.000 --> 13:33.000
They're used for, like, GUI updating, you can use it for game engine logic.

13:33.000 --> 13:40.000
And then we're firing NS notification events asynchronously from that event loop.

13:40.000 --> 13:46.000
And the video was really just showing, like, a bunch of events firing asynchronously on a Dreamcast.

13:46.000 --> 13:47.000
I don't know why it's not working.

13:47.000 --> 13:50.000
But anyway, so you've got the Objective C concurrency model as well.

13:50.000 --> 13:56.000
And for the record, if you need Objective C++23 to get everything, that works too.

13:56.000 --> 13:58.000
If you want to mix both of them.

14:01.000 --> 14:05.000
Okay, so then we tried to get D on the Dreamcast.

14:05.000 --> 14:12.000
This was not done by me, this was done by someone who goes by Luna on the Luna Fox girl on Twitter.

14:12.000 --> 14:16.000
Thankfully, she helped us because I didn't know really much of anything about D.

14:16.000 --> 14:17.000
She did a great job.

14:17.000 --> 14:20.000
What was involved with bringing D to Dreamcast?

14:20.000 --> 14:23.000
Well, we used the GDC front end for GCC.

14:23.000 --> 14:25.000
We cross-compiled it for SHL.

14:25.000 --> 14:33.000
She wrote a custom run time to do some of the stuff that the D run time does, which I'm a little sketchy on.

14:33.000 --> 14:41.000
But I believe it's stuff like lifetime management, like allocation, deallocation, entry point.

14:41.000 --> 14:45.000
She did not use the garbage collector, not because it won't work on the Dreamcast,

14:45.000 --> 14:51.000
because we run Lua and it's fine, but she wanted manual lifetime management.

14:51.000 --> 14:55.000
And at this point, we did not try to do libfobos for the standard library.

14:55.000 --> 14:58.000
We actually are just binding to libc for that kind of stuff.

14:58.000 --> 15:05.000
And then that's kind of a folder view of what the project looks like.

15:05.000 --> 15:09.000
It's called DKOS, which is the D bindings for what we did.

15:09.000 --> 15:13.000
And as you can see, I was worried that a bunch of the low-level stuff we were doing in C

15:13.000 --> 15:15.000
and Callisty iOS would have to change.

15:15.000 --> 15:18.000
Like, hey, can you bind to inline assembly?

15:18.000 --> 15:20.000
Like, what are you going to do about the C macros?

15:20.000 --> 15:23.000
And actually, a D is quite capable.

15:23.000 --> 15:34.000
And here's some of the crazy stuff that she either rewrote or bound to from D.

15:34.000 --> 15:35.000
So there's inline assembly.

15:35.000 --> 15:40.000
It can handle flexible array members, inline functions, macros, versioned enumerations.

15:40.000 --> 15:44.000
I started getting a little jealous there as a C and C++ programmer, actually.

15:44.000 --> 15:47.000
It's really good stuff.

15:47.000 --> 15:49.000
So yeah, D meets the Dreamcast.

15:49.000 --> 15:58.000
So here's some fairly idiomatic looking D that had a video there that all it was doing was basically changing the color of the...

15:58.000 --> 16:04.000
It was animating the background color with the PowerVR on the Dreamcast, the frame buffer,

16:04.000 --> 16:07.000
and printing some stuff to standard out.

16:07.000 --> 16:09.000
And it worked great.

16:09.000 --> 16:11.000
And let's see.

16:11.000 --> 16:19.000
Here was one more video, which was a bunch of animated cubes showing 3D accelerated graphics with the D language.

16:19.000 --> 16:24.000
That's on her Twitter, actually.

16:24.000 --> 16:29.000
And then finally, everyone had been asking the entire time we were doing this on Twitter,

16:29.000 --> 16:30.000
hey, what about Rust?

16:30.000 --> 16:31.000
Hey, what about Rust?

16:31.000 --> 16:33.000
And we're just like, hey, man, I don't know what to tell you.

16:33.000 --> 16:38.000
LLVM doesn't support SH, SH4, like, take it up with them.

16:38.000 --> 16:42.000
And then GCCRS came along and happened.

16:42.000 --> 16:45.000
We weren't having any luck with Rust C at the time.

16:45.000 --> 16:48.000
We couldn't get it cross-compiling properly for SHL.

16:48.000 --> 16:55.000
So we started playing with GCCRS, even though it's like very, very new in its infancy.

16:55.000 --> 17:00.000
I mean, we were seeing like four loops being added almost in real time, you know,

17:00.000 --> 17:02.000
like we pulled down like, oh, you can use a loop now.

17:02.000 --> 17:04.000
It was pretty cool, you know?

17:04.000 --> 17:08.000
So this is not stuff that necessarily is ready to be played with, but we don't care.

17:08.000 --> 17:10.000
It's what we do here.

17:10.000 --> 17:13.000
There's no bar checker yet, so you'll notice everything is just unsafe,

17:13.000 --> 17:18.000
but it's still fun and it's still Rust.

17:18.000 --> 17:21.000
So this is, oh man, the video's not there.

17:21.000 --> 17:27.000
It's a rotating cube that is driven predominantly by Rust.

17:27.000 --> 17:29.000
It's unsafe, as you'll see.

17:29.000 --> 17:32.000
The main control flow is Rust.

17:32.000 --> 17:36.000
The OpenGL API is calling in to C for that.

17:36.000 --> 17:39.000
And then there's a mystery third language that you're about to see,

17:39.000 --> 17:48.000
which we implemented miscellaneous support utility functions for things that GCCRS wasn't able to cope with just yet.

17:48.000 --> 17:52.000
So, all right, we're going to go into that demo here.

17:52.000 --> 17:56.000
All right, so on the left we have the Rust, which is calling in to C.

17:56.000 --> 17:59.000
On the right we have the utility functions, which are Fortran.

17:59.000 --> 18:05.000
So we had C, Rust, and Fortran, all on the Dreamcast.

18:05.000 --> 18:08.000
And yeah, here was the rotating cube.

18:08.000 --> 18:13.000
So, yeah, I would say we inherited quite a good deal from the GCC ecosystem.

18:13.000 --> 18:20.000
And yeah, may your homebrew be powerful and good and fast, and yeah, that's it for us.

18:20.000 --> 18:24.000
I just want to say thank you to everyone who contributes to GCC,

18:24.000 --> 18:29.000
and to our GCC in general for supporting us, for supporting the SH backend.

18:29.000 --> 18:35.000
If you're interested in looking into any of this stuff, that is a link to our Wiki page,

18:35.000 --> 18:37.000
which is everything on how to set this up.

18:37.000 --> 18:39.000
You can do it from Windows, Mac, Linux.

18:39.000 --> 18:44.000
It's mostly just running a script that works in any POSIX environment that sets up the cross compiler.

18:44.000 --> 18:51.000
And I wanted to say that we are just one community that's powered by GCC and is modern.

18:51.000 --> 18:56.000
I'm friends with the guys who do the PSPSDK, the Sega Saturn stuff,

18:56.000 --> 19:02.000
Lib Dragon for Nintendo 64, SGDK, Sega Genesis, and the Vita SDK.

19:02.000 --> 19:04.000
I can tell you right now we're all using GCC.

19:04.000 --> 19:08.000
So, yeah, you guys are, there's a lot of people out there who owe you a lot.

19:08.000 --> 19:12.000
And if you like this kind of stuff and are interested in hearing more,

19:12.000 --> 19:15.000
you can follow me on X or Twitter or GitHub.

19:15.000 --> 19:17.000
And that's it. Any questions?

19:17.000 --> 19:29.000
Over there you have actually sitting, or one of the Fortran main tables.

19:29.000 --> 19:31.000
Really? Oh, it's awesome.

19:31.000 --> 19:34.000
We have a couple more in the room shortly.

19:34.000 --> 19:36.000
Oh, yeah, but...

19:36.000 --> 19:39.000
No, no, no, that's...

19:39.000 --> 19:42.000
Oh, I'm sorry.

19:43.000 --> 19:47.000
Our application at the moment is targeting the Lib Rome, basically.

19:47.000 --> 19:52.000
Oh, yeah, yeah. Which is a good library, but why that over Callistae OS?

19:52.000 --> 19:58.000
Because our app has been targeting the Dreamcast for that last 12, 15 years.

19:58.000 --> 20:01.000
It's developed by Marx, I think, in North Marx.

20:01.000 --> 20:03.000
Oh, my gosh. Oh, okay.

20:03.000 --> 20:05.000
Yeah, I know. Yeah, yeah.

20:05.000 --> 20:09.000
Accesses. I was wondering, it's fairly easy to install your GCC chain

20:09.000 --> 20:14.000
because trying to patch up GCC to a bit of Lib Rome character is a pain.

20:14.000 --> 20:16.000
Oh, you should totally use our tool chain.

20:16.000 --> 20:18.000
Yeah, our tool chain should definitely work.

20:18.000 --> 20:21.000
And our scripts, there's so many people in the Dreamcast community

20:21.000 --> 20:23.000
that by now they're pretty battle tested.

20:23.000 --> 20:28.000
Like, people will want it for Mac, Ubuntu, every flavor of Linux,

20:28.000 --> 20:33.000
Windows with StigWin versus Windows with WSL.

20:33.000 --> 20:35.000
You know, ours is pretty solid at this point.

20:35.000 --> 20:37.000
You should definitely check it out, actually.

20:37.000 --> 20:39.000
I'll definitely be trying to pull it.

20:39.000 --> 20:41.000
It's pretty nice, yeah, yeah.

20:41.000 --> 20:43.000
But, oh, that's really cool, though.

20:43.000 --> 20:45.000
Very nice.

20:45.000 --> 20:47.000
Anyone else? Yeah.

20:47.000 --> 20:50.000
Which version of NGL are you supporting?

20:50.000 --> 20:53.000
All right, so the latest you can get on the Sega Dreamcast is 1.1

20:53.000 --> 20:55.000
because we don't have any shaders.

20:55.000 --> 20:56.000
It's all fixed function.

20:56.000 --> 21:00.000
But I will say, it's one of the most epic end-

21:00.000 --> 21:04.000
end-late-stage kind of GPUs that's fixed function.

21:04.000 --> 21:08.000
We have a lot of the stuff that went into shaders in hardware.

21:08.000 --> 21:11.000
Like, we have hardware accelerated bump mapping.

21:11.000 --> 21:14.000
We have some things called modifier volumes,

21:14.000 --> 21:17.000
which are really cool that you can use for cheap shadows and stuff like that.

21:17.000 --> 21:19.000
So there's a lot of cool stuff you can play with,

21:19.000 --> 21:22.000
despite being an OpenGL 1.1.

21:22.000 --> 21:24.000
You guys ever heard of Raylib?

21:24.000 --> 21:28.000
Yeah, we actually just got a port of Raylib that sits on top of GL 1.1.

21:28.000 --> 21:31.000
So it's really cool being in the Raylib community right now.

21:31.000 --> 21:34.000
And like, someone makes a game for like PC and you're like,

21:34.000 --> 21:36.000
hey, sick out your game on my Dreamcast.

21:36.000 --> 21:37.000
It looks pretty good.

21:37.000 --> 21:40.000
And they're like, what's a Dreamcast?

21:40.000 --> 21:42.000
But yeah.

21:42.000 --> 21:44.000
Anyone else? Yeah.

21:44.000 --> 21:48.000
Well, as you know, I'm the SuperH Conal maintainer.

21:48.000 --> 21:49.000
I do know that.

21:49.000 --> 21:50.000
My hero, man.

21:50.000 --> 21:58.000
There's actually the SuperH backend and GCC is actually still in a questionable state.

21:58.000 --> 22:00.000
Oleg Endo is watching this.

22:00.000 --> 22:01.000
So yeah.

22:01.000 --> 22:05.000
Well, he hasn't been doing on it so much recently.

22:05.000 --> 22:06.000
Yeah, yeah, yeah.

22:06.000 --> 22:08.000
There used to be two people working on it.

22:08.000 --> 22:12.000
So if I'm seeing now there's so many people like working on SuperH,

22:12.000 --> 22:17.000
it would be nice if like kind of people came to the Debian community

22:17.000 --> 22:23.000
or like there's also a Linux SH RSE channel on my barrel.

22:23.000 --> 22:29.000
Because like doing this all alone, like what I'm doing in Debian is quite a burden.

22:29.000 --> 22:33.000
So there's like some people that would like to help like also improve GCC.

22:33.000 --> 22:34.000
Absolutely.

22:34.000 --> 22:39.000
So the Linux kernel almost dropped the SuperH architecture and he saved his life.

22:39.000 --> 22:42.000
So yeah, we owe this man a great debt.

22:42.000 --> 22:44.000
And yeah, I meant to reach out.

22:44.000 --> 22:52.000
Definitely.

22:52.000 --> 22:54.000
Anyone else?

22:54.000 --> 22:56.000
Oh, yeah.

22:56.000 --> 23:03.000
I wanted to ask, as I know the Dreamcast had sort of support for Windows C for Dreamcast.

23:03.000 --> 23:04.000
Yes.

23:04.000 --> 23:07.000
And was there any plan or something about that?

23:07.000 --> 23:11.000
Because I remember the vertical system run on the Windows C platform

23:11.000 --> 23:18.000
and if I'm not 100% mistaken, GCC might have a Windows C target.

23:18.000 --> 23:23.000
I'm not sure about that because when the Dreamcast was released, there were two SDKs.

23:23.000 --> 23:27.000
You could use the one that was Windows CE, which a lot of games used and it was very impressive.

23:27.000 --> 23:31.000
It supported a lot of the Windows kernel and there was one that was pure Sega.

23:31.000 --> 23:36.000
But the thing is we try to distance ourselves from that because those are official proprietary SDKs.

23:36.000 --> 23:40.000
They're not independently developed so you can't really sell your home brew with that stuff.

23:40.000 --> 23:43.000
So I don't know too much about that, to be honest with you.

23:43.000 --> 23:45.000
Yeah, sorry.

23:45.000 --> 23:46.000
Anyone else?

23:46.000 --> 23:47.000
Yeah.

23:56.000 --> 24:03.000
We have actually, there's a giant chart on that wiki page that I linked to.

24:03.000 --> 24:11.000
There's a giant chart going back to like GCC4, looking at, we are running one of our polygon benchmarks,

24:11.000 --> 24:15.000
looking at performance versus binary size versus a few other variables

24:15.000 --> 24:20.000
and it's kind of interesting how it's varied across versions of GCC.

24:20.000 --> 24:25.000
Definitely GCC 13 is not the best or the worst and it's not like a linear trend either.

24:25.000 --> 24:30.000
But yeah, you can definitely take a look at that and that's a very good question too.

24:33.000 --> 24:38.000
Yeah, please. If anyone wants to port anything else, we are very interested.

24:42.000 --> 24:44.000
Okay, thank you.

24:45.000 --> 24:47.000
Thank you.

