WEBVTT

00:00.000 --> 00:18.080
Yeah, hi, I'm Robert. I work for Collabora on rail and stuff. And yeah, I'm here to talk

00:18.080 --> 00:25.520
about video offloading on Linux. And I'm a bit nervous because I haven't got this many

00:25.520 --> 00:36.880
talks so far. But yeah, thanks for joining me here. I will give you a short introduction

00:36.880 --> 00:43.440
about what I'm even talking about. Then mainly talk about the current status and what happened

00:43.440 --> 00:54.960
in the recent time. I'll do one demo and show some benchmarks and then add some more notes

00:54.960 --> 01:08.320
and then hopefully we'll have time for questions. So for everyone using a Linux, most of you

01:08.320 --> 01:15.760
folks are probably used to or know what hardware decoding is and why it's good for your video

01:15.760 --> 01:26.160
decoding performance, like why you like the API and so on. Many of you probably don't know that

01:27.520 --> 01:35.760
there's a second step involved after decoding the video, like getting it into the right format

01:35.760 --> 01:43.680
and scaling to the right size, which we usually do using GL or Vulkan these days. But actually,

01:43.680 --> 01:50.000
most hardware does have hardware fast path to make this much faster and more efficient.

01:51.360 --> 02:02.080
And this is usually in the display controller. They often can also rotate and so on. And yeah,

02:03.040 --> 02:10.320
you would like to use them to get the maximum performance actually. And as you already already

02:10.320 --> 02:18.400
maybe hear from the name, display controllers, this one sits at the very end of the rendering

02:18.400 --> 02:27.600
pipeline. It's like after your app, after the compositor, at the very end before the buffer goes

02:28.560 --> 02:40.240
to the screen. And yeah, this is normally not quite much used on the Linux desktop.

02:42.000 --> 02:52.720
So what do we do in the embedded world? Over there, we have like lots of elements and lots of

02:53.440 --> 03:00.720
software which can already use the display controllers directly by not using a windowing

03:00.720 --> 03:11.360
system. Like you have like, yeah, things like the G-smart KMS sync. All kinds of apps have

03:11.920 --> 03:20.640
custom backends to use the KMS slash DIM slash GBM APIs of the kernel directly.

03:22.320 --> 03:30.800
And on X11, there was an extension to actually make that usable on the desktop. It's called Xvideo.

03:30.800 --> 03:42.800
It never really took off and I could jump over that. Now we have Wayland. And this is a picture

03:42.800 --> 03:53.360
from 2014, so mid 2014, which I think was the first presentation of showing a Wayland desktop

03:54.160 --> 04:01.520
with the windowing system where video was actually offloaded. This is Daniel Stone from Colever.

04:02.400 --> 04:11.680
Yeah, 10 years ago, we started using things, we started using Wayland and all this video

04:11.680 --> 04:19.600
offloading in the embedded world. There is G-Stymar elements and MPV back end and so on and so on.

04:20.560 --> 04:25.200
But practically this is still mostly limited to the embedded space.

04:27.760 --> 04:34.320
So what happened in the last 10 years is that as you probably know Wayland made a lot on the desktop.

04:34.320 --> 04:43.840
Now most people, I hope, are using it now. Apps actually started using hardware acceleration

04:43.840 --> 04:48.720
like GL and Vulkan. This only just happened in the last couple of years in many cases.

04:48.880 --> 04:57.040
And we got a lot of better kernel APIs. We got things like DMABuff modifiers.

04:57.680 --> 05:00.880
Lots of things happened over the years.

05:02.960 --> 05:14.800
So now what happened in the recent time? And especially in 2023 and also in the last couple

05:14.800 --> 05:23.520
of months. And I'll start with one of the big news which is like this year,

05:23.520 --> 05:37.760
Mada and Gnomescher finally got support to have short YUV buffers so apps can actually pass over

05:37.840 --> 05:44.640
video buffers to the compositor which is needed to then have the offloading step.

05:45.600 --> 05:54.880
And then GTK4, the GTK4 folks jumped in and made actually use of it and introduced a new

05:55.680 --> 06:05.200
widget which allows you to offload content like video to Wayland compositors and that is landed

06:05.200 --> 06:15.600
and it will ship in the upcoming 4.14 release. And we hope to have at least one actual video player

06:15.600 --> 06:25.520
out in the wild on Flatpak using that and also hope that the GTK4 Paintable sync which is used in

06:25.520 --> 06:34.800
a lot of GTK apps will more or less support that out of the box. Fingers crossed because it's all

06:34.800 --> 06:45.600
getting close now. And this also depended a lot of the G-Stu-MRO work that you saw in the previous

06:46.160 --> 06:55.440
presentation from Nicolas, the GL work there. So just to give you a short impression how this looks

06:56.560 --> 07:04.160
like you will have a video player and it can put the video into a so-called Wayland subsurface

07:05.680 --> 07:11.520
this is the case where the big bag bunny or the video is in front of the rest of the content

07:12.320 --> 07:18.240
but you can also have the other case where there's actually content on top of the video

07:18.880 --> 07:26.880
especially subtitles, controls, whatever. And yeah GTK is now able to do that

07:27.040 --> 07:35.120
via Wayland and the Wayland compositor is then possibly, I can then in many cases

07:35.120 --> 07:40.960
offload that directly to the hardware and I will show you that a little bit later in the demo.

07:42.960 --> 07:49.200
Further on, another big development happening in the Wayland world that many are not probably not

07:49.840 --> 07:57.760
so much aware of is that like Chrome OS is switching to Wayland, they are moving their main browser

07:58.480 --> 08:10.000
to use Wayland and also to offer support for Wayland apps and that means they ported their

08:10.000 --> 08:17.520
Wayland back end to support this kind of video offloading which they previously supported by

08:18.080 --> 08:24.000
having Chrome OS using their own private APIs and so on. They are now supporting

08:25.520 --> 08:31.200
the stuff using Wayland's APIs and this is mainly tailored for Chrome OS of course

08:31.840 --> 08:39.520
but it also works on other, it can be made to work on all other Wayland compositors

08:40.480 --> 08:48.320
and we have experimental patches for that and we hope that these will find their way upstream

08:49.760 --> 08:53.680
in the very, yeah in the near future.

08:56.560 --> 09:06.320
Yeah point is we have GTK 4 toolkit, we have Chrome, a browser which support this already

09:09.680 --> 09:19.280
shortly about compositors. By now like Western as a more embedded focus compositor has been

09:19.280 --> 09:26.880
supporting most of this for a long time, quite well but now we have Mada

09:29.120 --> 09:32.480
supporting video offloading in fullscreen cases already,

09:33.440 --> 09:41.200
Kwin just landed support for at least one such video format, NV12 which is the most common one,

09:41.200 --> 09:46.480
just landed a couple of weeks ago and will apparently ship in Plasma 6, I haven't tested

09:46.480 --> 09:53.200
that yet, it will probably also be limited to fullscreen only but it's there now so both big

09:54.160 --> 10:04.400
desktops are covered and on the WL routes front, Sway is very actively working on getting

10:05.920 --> 10:14.000
better hardware plane support so you can actually have the stacking of overlay over video however

10:14.320 --> 10:25.200
yeah just landed support for the most important APIs, that doesn't mean that all

10:25.200 --> 10:31.680
WL routes based compositors will support it automatically, like especially those with their

10:31.680 --> 10:39.920
custom 3D engines like Wayfire, Hyperland and so on will either have to adopt these APIs or

10:40.000 --> 10:48.320
will have to do their own stuff so yeah in the WL routes world it's a bit mixed between very well

10:48.320 --> 10:56.240
supported and not at all but yeah the big desktops environments are there

10:57.200 --> 10:59.200
yeah

11:02.160 --> 11:10.400
the biggest thing missing on the video offload side in the Wayland world is

11:12.080 --> 11:16.480
we don't yet have a proper protocol for the color representation

11:16.960 --> 11:27.760
which is needed like for example for HDR 10 or for 10 bits video content you often use a

11:28.640 --> 11:40.080
color space I hope I use the right word now which is called BT 2020 and we don't have a way yet to

11:40.560 --> 11:48.640
from clients to tear compositors now that you want this but it's in development for quite a while

11:48.640 --> 11:56.160
and will hopefully land in the not so distant future but this is one of the big missing part

11:56.160 --> 12:03.200
and it's kind of related to the color management protocol which is generally the big Wayland

12:03.200 --> 12:11.040
protocol needed for HDR stuff in general which has a lot more things there but all these stuff

12:11.040 --> 12:19.440
are falling coming into place maybe at least from protocol side we will have have everything this year

12:23.360 --> 12:32.080
so short conclusion on this part most desktops have at least basic support for graphics

12:32.080 --> 12:40.160
offloading now and yeah there's lots of developments in many places involved

12:41.680 --> 12:49.280
not everything is already supported but it's a good moment like to make your app or a framework

12:49.280 --> 12:59.200
toolkit whatever maybe look into this and adopt it because yeah then we can make things happen and

12:59.200 --> 13:11.360
get faster video playback so just because I'm so confident that everything works I even show you

13:11.360 --> 13:19.840
a live demo now or even though it's very small and I have no idea how much you will see here this is a

13:19.840 --> 13:29.760
Pinebook Pro with a very low power GPU but it has very good video decoder and a good display engine

13:30.480 --> 13:40.160
and what you see is the GTK4 demo player and we have overlays from the compositor enabled so

13:41.040 --> 13:50.160
opaque regions of the compo of the app are in green and transparent parts are overlaid in purple

13:51.200 --> 14:00.320
and what I quickly wanted to show you is like in this case here the video is now behind the actual

14:00.320 --> 14:09.840
GTK window and the GTK window has just has has some punched some holes so you can see through it

14:10.960 --> 14:17.600
and the cool thing is if I move it around I know now it's offloaded

14:19.120 --> 14:27.520
because it works and now if I go here we have rounded corners GTK4 detects that it can't offload

14:27.520 --> 14:35.520
things to Wayland it transparently changes to rendering itself so you can easily implement this

14:36.240 --> 14:41.200
or this things work picks up and every frame is perfect

14:43.680 --> 14:52.800
and yeah this is running matter and I make it quick now if I start the demo and as soon as

14:52.800 --> 14:58.720
the video just disappear you now see the overlay disappear the video plays this is now on a hardware

14:58.720 --> 15:05.920
plane with hardware scaling on matter highly efficiently it works in short

15:14.240 --> 15:23.600
okay I'm a quick now so I wanted to show you some nice quick new benchmarks from from intersystem

15:23.840 --> 15:33.280
Intel GPU top and when I tried this this happened on multiple devices and I wanted to include it here

15:33.280 --> 15:40.080
it means that the offloading works but it there's some bug somewhere in the stack outside and the

15:40.080 --> 15:47.680
reason why I want to show it to you okay is the the the important point I want to make here

15:48.160 --> 15:54.480
is that graphics folks are people working with graphics usually know that it's like graphics is

15:55.520 --> 16:02.880
really hard to to test and to prevent from regressing from time to time like this is on

16:02.880 --> 16:11.200
an Intel like this should work but somehow it regressed recently in some kernel and here I would

16:11.200 --> 16:19.920
like to make the point that getting this stuff to work on the desktop for if you work for some vendor

16:19.920 --> 16:27.600
or somebody who makes drivers is an awesome way to get lots of testing from lots of users who

16:27.600 --> 16:36.240
actually give like right issues and give you good yeah go ahead so if you actually want to sell

16:36.240 --> 16:42.240
things for embedded but want to have good driver quality just ensure you have a linux community

16:42.240 --> 16:51.840
which uses on a desktop and prevent cases like that um blah blah blah I'm skipping over that

16:51.840 --> 16:58.320
yeah yeah yeah better less watts and so on and so on and we are as good as the mpv native Wayland

16:59.120 --> 17:11.920
back end on gkk4 now um I skipped that um yeah it has video uploading has significant advantages

17:11.920 --> 17:18.400
for for battery life for resource consumption on the desktop as well as on that unembedded

17:21.280 --> 17:28.160
and you can implement this we have all the technology now to implement this in proper toolkits

17:28.240 --> 17:34.800
or complex apps like Chromium and it's worth it let's do it

17:37.280 --> 17:48.800
um I am one note I don't want to skip here which is a bit controversial like it is very controversial

17:48.800 --> 17:56.480
but I just wanted to know for everyone for transparency reasons talking about DRM like that DRM

17:58.560 --> 18:08.720
as you know or if you just so what we are doing here is pass through from the decoder to the display

18:08.720 --> 18:21.760
engine that actually means it becomes technically trivial to support hard DRM um I'm not saying we

18:21.760 --> 18:28.960
should do that I'm just saying that the technical limitation to do that is no more or less done

18:28.960 --> 18:37.600
and discussions should be heard about if you want it um but just like yeah this makes it very easy

18:37.600 --> 18:46.640
to do all this um yeah on the more positive side we have experimental patches for various

18:47.360 --> 18:56.400
things to to make it work also with real v4.2 decoders

19:00.000 --> 19:06.800
no I skip that ah yeah NVIDIA just added in the news beta driver a couple of days

19:07.600 --> 19:14.480
goes added support for something in that direction I'm not sure if it's GL if it's Vulkan if it's both

19:14.560 --> 19:18.560
but and even the proprietary NVIDIA driver seems to be on board

19:20.160 --> 19:27.920
ah nice it's both somebody just said yeah questions

19:31.440 --> 19:31.920
hi

19:37.280 --> 19:42.320
thanks a lot for the talk Chris one thing that kept me confusing wayland is the missing

19:43.120 --> 19:46.080
color management so you could use color profiles

19:47.360 --> 19:55.200
this is going to work similar later uh yeah the question was um or the the statement was that

19:57.840 --> 20:05.040
one thing preventing people from using wayland is missing color management and um yeah there's a

20:05.040 --> 20:12.320
lot of active work and a bunch of companies involved um who are very very actively working on that

20:12.320 --> 20:18.240
we had even had a hackfest last last year where lots of companies came together and will have

20:18.240 --> 20:25.200
another one in a couple of months I think and there's hopes that yeah things will come together

20:26.080 --> 20:33.680
right now in the x you can apply one profile to one display and another to the second display

20:34.160 --> 20:42.720
you just couldn't do that yeah but what what that color color color color big discussions can't

20:42.720 --> 20:46.800
handle that in here and a bit of too much off topic

20:57.200 --> 20:58.160
any more questions

21:04.000 --> 21:11.040
also yeah uh firefox is looking into there are using that they want to use it especially for

21:11.040 --> 21:18.960
10 bit video oh the question is what is the status for firefox and I've talked to some firefox

21:18.960 --> 21:24.000
folks who said they would yeah they are looking into it for 10 bit videos to get that working and

21:25.680 --> 21:33.280
yeah let's see I haven't seen any patches yet so but having it's working in GTK will probably

21:34.400 --> 21:36.880
be quite a good um

21:39.360 --> 21:44.080
yeah but make hopefully convince them to to put some more work into that

21:45.680 --> 21:52.480
yeah so you've explained the various strategies to be able to like the underlay strategy and

21:52.480 --> 21:58.800
overlay strategy where the video is under the uh compose and another where the video is over the

21:58.800 --> 22:04.960
controls so do you always pick the underlay strategy in GTK or do you because some hardware only

22:04.960 --> 22:10.880
supports underlays and some of our platforms only support overlays so it's how do you choose in

22:10.880 --> 22:20.320
GTK do you always do underlay for now or um so do you switch to underlay and do you overlay or something

22:20.560 --> 22:31.360
um so the question is very specific about um strategies how to layer things um

22:32.160 --> 22:42.880
and how this is done in um GTK for now uh in short um chromium has options for that

22:43.840 --> 22:54.800
um GTK for prefers overlay for the moment and um actually I personally would like to always use

22:54.800 --> 23:03.280
underlay when possible in the future so you don't have to switch the surface around but that would

23:03.280 --> 23:12.160
require a new protocol which I made um which we could discuss um yeah okay I think I'm out of time

23:12.880 --> 23:23.760
yeah you can find me later for more questions thank you lot

