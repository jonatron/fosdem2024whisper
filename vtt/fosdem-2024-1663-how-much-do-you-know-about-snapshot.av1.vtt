WEBVTT

00:00.000 --> 00:08.000
Okay, hello everyone.

00:08.000 --> 00:09.240
My name is Titi Ma.

00:09.240 --> 00:11.120
I'm from Redhead.

00:11.120 --> 00:19.280
And today my topic is about snapshot, especially for the implementation in open shift virtualization,

00:19.280 --> 00:21.280
open stack and LibWord.

00:21.280 --> 00:26.920
Actually, I'm a QE from QMU, which is very close to LibWord.

00:26.920 --> 00:34.200
And the main production of our LibWord is open shift virtualization and open stack.

00:34.200 --> 00:38.320
So I made some investigation here.

00:38.320 --> 00:40.840
And here is today's data.

00:40.840 --> 00:43.920
So first, what is a snapshot?

00:43.920 --> 00:51.840
A snapshot is a point in time representation or copy of data on the state of system, software,

00:51.840 --> 00:55.800
a disk, a virtual machine or any cells.

00:55.800 --> 01:00.600
But today I'm mainly focused on disk and virtual machine.

01:00.600 --> 01:09.360
And actually, snapshot plays a vital role in virtualization as it is used for data backup

01:09.360 --> 01:10.360
and recovery.

01:10.360 --> 01:15.560
We know that data is always imported for any users.

01:15.560 --> 01:24.480
And compared to the traditional data backup, snapshot can do a quicker backup and restore.

01:24.480 --> 01:32.640
And about the snapshot, we can also do different snapshots in different points in time.

01:32.640 --> 01:40.120
It means that we can restore to any historical value of our system in the state.

01:40.120 --> 01:44.000
So here are some general user cases about the snapshot.

01:44.000 --> 01:53.760
In our daily work, we mainly hit systems failures or data corruption.

01:54.040 --> 02:01.280
If they have a snapshot, we can use it to do the backup and the disaster recovery.

02:01.280 --> 02:07.440
And also it could be used for testing or developing environment.

02:07.440 --> 02:14.920
It means that in our data testing or in our development, we may destroy our system during

02:14.920 --> 02:15.920
our work.

02:15.920 --> 02:20.800
If we have a snapshot, we can make use of it for this scenario too.

02:20.800 --> 02:27.720
And also snapshots can be used for systems upgrade or software updates.

02:27.720 --> 02:35.760
If it fails, then we can roll back to the lower value of our system.

02:35.760 --> 02:40.600
And it can also be used for training on education scenarios.

02:40.600 --> 02:45.320
And that students may make mistakes during their learning.

02:45.320 --> 02:51.840
If there is a snapshot, we can also make use of it to roll back to the initial state of

02:51.840 --> 02:56.280
the system.

02:56.280 --> 03:02.520
And it also can be used to customer scenarios, customer issues, replication.

03:02.520 --> 03:07.480
It means that we can save customer environment as a snapshot.

03:07.480 --> 03:11.320
And we can use this snapshot to do the debug.

03:11.320 --> 03:17.000
It will accelerate the problems solved here.

03:17.000 --> 03:22.160
And a snapshot can also be used for security, incident recovery.

03:22.160 --> 03:27.000
In today's network world, malware is everywhere.

03:27.000 --> 03:32.840
So if our system is attacked by it, then we can make use of a snapshot for this scenario

03:32.840 --> 03:33.840
also.

03:33.840 --> 03:42.160
OK, from now on, I will talk about snapshots in that three platforms.

03:42.160 --> 03:47.880
First step is about snapshot in OpenShift virtualization.

03:47.880 --> 03:56.120
Actually, OpenShift virtualization is an add-on for OpenShift container platform.

03:56.120 --> 04:05.920
And about the snapshot in OpenShift virtualization, OpenShift provides robust capability for it.

04:05.920 --> 04:16.240
As it extends the base OpenShift snapshot feature to include the guest OS operation coordination

04:16.240 --> 04:19.280
and multi-disk management.

04:19.280 --> 04:25.440
And actually, from user space, there are two methods to create the snapshot.

04:25.440 --> 04:27.840
Next is through the web console.

04:27.840 --> 04:34.760
And next is created through the OS command line with YAML file.

04:34.760 --> 04:41.800
And in the YAML file, we need to define a virtual machine snapshot as a customer resource

04:41.800 --> 04:43.800
definition.

04:43.800 --> 04:51.160
And the snapshot, you open a shift virtualization, we can create when the guest is powered on

04:51.160 --> 04:55.560
or it is powered off, they are both supported.

04:55.560 --> 05:01.920
And when the guest is powered on, we are usually recommended to install guest agent, this software

05:01.920 --> 05:03.600
in the guest.

05:03.600 --> 05:10.360
The guest engine here is used to free file system of the guest.

05:10.360 --> 05:19.920
Then it gives time to flash memory data to the disk before the disk snapshot is created.

05:19.920 --> 05:24.800
So it here to guarantee the data consistency here.

05:24.800 --> 05:35.360
Okay, actually, the VAM snapshot in OpenShift virtualization, it makes use of a volume snapshot

05:35.360 --> 05:38.440
for VAM snapshot.

05:38.440 --> 05:44.160
The VAM snapshot here, yeah, VAM snapshot is a YAML file.

05:44.160 --> 05:52.360
It actually creates corresponding volume snapshots for all the supported volumes, either VAM.

05:52.360 --> 06:01.600
And actually, volume snapshots, the source of it usually from PBC, persistent volume claim.

06:01.600 --> 06:09.640
We know that the real data of the PBC is stored in a PBC persistent volume.

06:09.640 --> 06:16.400
And it could be classified into different storage classes based on different storage

06:16.400 --> 06:17.400
bank heads.

06:17.400 --> 06:21.920
It is the same as the same for volume snapshots.

06:21.920 --> 06:28.520
The real data of volume snapshot is stored in volume snapshot content, this object.

06:28.520 --> 06:34.320
And it also could be divided into different volume snapshot classes.

06:34.320 --> 06:35.320
Yeah.

06:36.200 --> 06:42.920
Okay, let's look at a general data flow for the snapshot in OpenShift virtualization.

06:42.920 --> 06:49.360
You already there is a user request line to create a volume snapshot.

06:49.360 --> 06:53.080
And the request will send it to the snapshot controller.

06:53.080 --> 06:58.880
This controller is deployed in the control plan of OpenShift.

06:58.880 --> 07:03.400
And here it is watching the volume snapshot, this object.

07:03.680 --> 07:13.920
Once it detects there is the object, then it will create the corresponding volume snapshot

07:13.920 --> 07:16.040
content here.

07:16.040 --> 07:25.080
And there is another component named CS9 snapshot, which is a sci-dicart container in CSI driver

07:25.080 --> 07:26.080
part.

07:26.080 --> 07:35.040
And it is watching the volume snapshot content, this object.

07:35.040 --> 07:41.160
Once it detects it, it will trigger the snapshot to create operations.

07:41.160 --> 07:47.840
And actually based on different storage bank heads, the issue in command loss is different.

07:47.840 --> 07:53.080
Like for RBD, it uses RBD snapshot related commands.

07:53.080 --> 07:58.280
And for NFS, it uses tar command to issue the snapshot here.

07:58.280 --> 08:04.280
And about the host pass for local file, it uses tar command also.

08:04.280 --> 08:11.000
And for the block, it uses DD related commands for the snapshot operations.

08:11.000 --> 08:12.000
Yeah.

08:12.000 --> 08:13.000
Okay.

08:13.000 --> 08:21.480
About the snapshot in OpenStack, like in OpenShift virtualization, there is also WAM

08:21.480 --> 08:24.560
snapshot and WALM snapshot.

08:24.560 --> 08:30.520
Actually WAM snapshot here is different from OpenShift virtualization.

08:30.520 --> 08:40.120
Here it actually creates several images, WALM, several image snapshots.

08:40.120 --> 08:47.080
And actually the image of the snapshot is also saved as an image file in OpenStack.

08:47.080 --> 08:54.320
It means that you like to restore from this snapshot, you need to relunch a new instance

08:54.320 --> 08:57.280
from the snapshot file.

08:57.280 --> 09:03.960
And also for data consistency, guest agent is also recommended to be installed before

09:03.960 --> 09:06.680
the snapshot is created.

09:06.680 --> 09:16.600
And for the WALM snapshot, OpenStack is similar as the OpenShift virtualization accepts the

09:16.600 --> 09:26.680
commands here is use OpenShift OpenStack related commands like OpenStack, WALM snapshot,

09:26.680 --> 09:31.840
create or for the restore it use sender related commands.

09:31.840 --> 09:32.840
Okay.

09:32.840 --> 09:36.040
Like in low end to the data flow here.

09:36.040 --> 09:41.200
For WALM snapshot in OpenStack, usually yes, it's the same.

09:41.200 --> 09:44.080
There is a user request from user space.

09:44.080 --> 09:49.080
The request will be sent to the sender component.

09:49.080 --> 09:51.720
And first it will send to the sender API.

09:51.720 --> 09:54.880
It will do some basic checks here.

09:54.880 --> 09:58.880
And then it will send it to the sender scheduler.

09:58.880 --> 10:06.440
And for the sender scheduler, it will schedule the request to different storage bankers.

10:06.440 --> 10:11.720
It's just like the OpenShift virtualization.

10:11.720 --> 10:18.800
And for the different storage bankers here is also the issue in commands is different.

10:18.800 --> 10:20.520
Like for RBD, it's the same.

10:20.520 --> 10:26.840
It use RBD related snapshot related commands here.

10:26.840 --> 10:29.280
And for OFS, it's different.

10:29.280 --> 10:34.840
It use the QMIL image, this QMIL tools to do the snapshot here.

10:34.840 --> 10:40.440
And for the LVM, it use LV related commands here.

10:41.440 --> 10:47.040
And about the VM snapshot in OpenStack, it's different.

10:47.040 --> 10:53.040
It's also different from the OpenShift virtualization.

10:53.040 --> 10:59.240
It does not make use of the WALM snapshot in OpenStack.

10:59.240 --> 11:03.640
Here is such code flow.

11:03.640 --> 11:07.040
It's mainly implemented in NOVA.

11:07.640 --> 11:15.640
And also it can divide into live snapshot or code snapshot.

11:15.640 --> 11:24.640
About live snapshot, the data flow first, it use the QMIL image to create a delta disk at first.

11:24.640 --> 11:34.640
And then it use the LibWord API block rebase to rebase this delta disk to the root FI file.

11:34.640 --> 11:42.840
And then it use the QMIL image to convert this delta to the snapshot.

11:42.840 --> 11:48.040
After the snapshot file is created, it will delete this delta disk.

11:48.040 --> 11:55.440
And about the code snapshot, it just use the QMIL image to convert directly to do the data transition.

11:55.440 --> 12:00.240
Actually, when I first saw this workflow, I'm confused.

12:00.240 --> 12:03.640
Why not use LibWord snapshot directly?

12:03.640 --> 12:11.240
Actually, the workflow here is just some LibWord APIs or QMIL related commands.

12:11.240 --> 12:15.640
Why not use LibWord snapshot?

12:15.640 --> 12:23.640
Actually, the reason here is that the LibWord snapshot from the current real release note

12:23.640 --> 12:29.240
that LibWord snapshot is not recommended to be used in that.

12:29.240 --> 12:33.840
OK, let's look at why it is not recommended to be used.

12:33.840 --> 12:40.840
What is the current status of the VAM snapshot in LibWord now?

12:40.840 --> 12:45.640
The LibWord snapshot now is using internal snapshot.

12:45.640 --> 12:48.040
So what is an internal snapshot?

12:48.040 --> 13:01.240
Internal snapshot means that the snapshot file itself is saved in the same base image file itself.

13:01.240 --> 13:08.040
We can image that the snapshot file and also the base file is merged in the same file.

13:08.040 --> 13:10.440
It will be hard to maintain.

13:10.440 --> 13:19.240
Actually, this feature is stopped developing in QMIL real level.

13:19.240 --> 13:27.040
It is planning to be disabled in the future.

13:27.040 --> 13:40.040
Another thing I'd like to highlight is that the VAM snapshot in LibWord is truly different from the VAM snapshot in OpelShift

13:40.040 --> 13:42.240
virtualization and OpelStack.

13:42.240 --> 13:52.240
In OpelShift virtualization, OpelStack is used as a guest agent to guarantee data persistence.

13:52.240 --> 14:03.040
But in LibWord snapshot, it will include the complete systems info.

14:03.040 --> 14:16.840
It will include the complete memory data and memory data and also the disk to see info into the snapshot file.

14:16.840 --> 14:21.240
So it can guarantee the data persistence here.

14:21.240 --> 14:29.840
And also for the LibWord snapshot, we can also do disk-only snapshot here.

14:29.840 --> 14:37.840
And regarding this advantage of the internal snapshot, LibWord appears as working on external snapshot now.

14:37.840 --> 14:47.440
And for the current status, we can create external snapshot now.

14:47.440 --> 14:58.440
But for restore and delete, it is still under developing and there is an issue tracking it now.

14:58.440 --> 15:04.840
And it is planning to be released in LibWord 10.

15:04.840 --> 15:14.840
And so eventually, when this feature is supported from data persistence,

15:14.840 --> 15:23.240
the perspective that this could be a perfect option for snapshot.

15:23.240 --> 15:32.640
But actually, there is still some limitations for the VAM snapshot in LibWord.

15:32.640 --> 15:40.240
As it should not source the storage bank assets that will.

15:40.240 --> 15:49.440
And the image format of the snapshot file in LibWord must be QQ2.

15:49.440 --> 16:02.240
While this QQ2 is not for some bank as a link from RBD bank as from the official documentation that we learned,

16:02.240 --> 16:10.840
QQ2 is not RAM-committed over RBD as there are some performance issues there.

16:10.840 --> 16:24.040
So, let's give a brief summary here that in high-level, we can divide the snapshot into two parts, code and live.

16:24.040 --> 16:27.640
For code, it means that the VAM is powered off.

16:27.640 --> 16:32.040
We can guarantee the data consistency.

16:32.040 --> 16:40.040
But actually, more customers may prefer live snapshots as there are still some other applications.

16:40.040 --> 16:44.440
If VAM is running in the VAM, they want to keep it running.

16:44.440 --> 16:49.040
They want to keep it running while doing a snapshot.

16:49.040 --> 16:56.040
So, about the live snapshot, we can also divide it into disk-only or volume-only snapshot.

16:56.040 --> 16:58.840
There is no memory data.

16:58.840 --> 17:05.640
It means that there is VMAH data in consistency here.

17:05.640 --> 17:11.440
And also, another choice is VAM snapshot, the whole VAM snapshot.

17:11.440 --> 17:21.040
There are two choices, like in OpenShift virtualization or OpenStack, they make use of guest agents, this component.

17:21.040 --> 17:23.840
It is used to file.

17:23.840 --> 17:32.640
But the question here is that it is just quite the file system as much as possible.

17:32.640 --> 17:37.640
It also depends on the workloads.

17:37.640 --> 17:49.840
It means that if there is a very heavy workload, in the VAM, there is still data loss, potential data loss here.

17:49.840 --> 17:54.840
And another choice is the live-watch snapshot.

17:54.840 --> 18:00.640
It will include a completely memory info in the snapshot file.

18:00.640 --> 18:07.840
But as I also told, there are some limitations for the different storage of backhands here.

18:07.840 --> 18:16.840
So, always based on your requirements or your environment to choose the one that suits your best.

18:16.840 --> 18:20.840
Okay, that's all of my presentation. Thanks for listening.

18:30.640 --> 18:32.840
Thank you.

