WEBVTT

00:00.000 --> 00:10.000
Okay, welcome to the next talk.

00:10.000 --> 00:18.000
Fabio Alessandro Fali Locati will tell us about private clouds do not need to be legacy.

00:18.000 --> 00:26.000
A warm welcome. Let's go.

00:26.000 --> 00:33.000
Thank you. So today we'll be look at mostly four things. First of all, what is a cloud?

00:33.000 --> 00:38.000
Because I think it's very important to define the scope of what we are going to talk about.

00:38.000 --> 00:44.000
Second thing is what can we learn from public clouds and we can learn lots of things from them.

00:44.000 --> 00:49.000
They have been a very successful business model and product for the last few years.

00:49.000 --> 01:10.000
So we can learn something from them. And then some technologies and consideration and best that you can do to have to create your own private clouds that is successful and then draw some conclusions with some more maybe names of projects that can help you.

01:10.000 --> 01:24.000
So very quickly about me, I have been around the Linux space for the last 20 odd years and I have done a lot of public cloud work, hyperscalar work.

01:24.000 --> 01:36.000
So I am both AWS and Google certified and I do work for Red Hat. So I also know the private cloud part as well.

01:37.000 --> 01:52.000
So why private clouds? Because obviously for many people here it's obvious why you want to have the private cloud but why do companies also nowadays are starting to look more into private clouds as well.

01:52.000 --> 02:05.000
So the first one is technical requirements. Public clouds, even though they seem like the perfect solution, the flexible solution for every kind of issue, actually they are hardware-sache software architecture.

02:05.000 --> 02:14.000
So if that specific architecture does not match your workload, then maybe the public cloud is not going to be the best suited architecture for you.

02:14.000 --> 02:25.000
Second point is legal requirement. Obviously public clouds are going to be external to your business unless you work in hyperscalar, that's a different conversation obviously for you.

02:25.000 --> 02:37.000
But for all the others, public clouds are going to be a different company. So in some situations this is not easily done or it can be complex.

02:37.000 --> 02:45.000
There are also financial considerations. Even though public cloud seems very cheap, you can buy everything for a few cents.

02:45.000 --> 02:58.000
When you start to have a lot of things that maybe are running 24-7, then expenses can become higher. So there might be financial reasons to look for a different model.

02:58.000 --> 03:09.000
And then obviously there is the most plain one, which is simply because someone in your organization decided that private cloud would be a better choice than the public one.

03:09.000 --> 03:18.000
So let's start from the very beginning. What exactly is cloud? I started as everyone from the Wikipedia definition.

03:18.000 --> 03:32.000
Wikipedia defines cloud computing as on-demand availability of computer system resources, especially data storage, cloud storage, or computing power without direct active management by the user.

03:32.000 --> 03:43.000
I personally don't really like that definition. I mean obviously it's the correct definition, but I don't think it highlights the most important parts about cloud.

03:43.000 --> 03:56.000
I prefer this one, which is mine, and I define cloud as a business model where one party runs to a second party, which could be parts of the same organization obviously.

03:56.000 --> 04:02.000
Computer system resources, especially data storage, computing power, with the smallest granularity possible.

04:02.000 --> 04:14.000
So the two big differences are first, the fact that I define it as a business model first, and second, the smallest granularity possible about the resources.

04:14.000 --> 04:31.000
And if we look at the history back before it was called cloud, you used to buy servers, rent servers, better say, in either yearly or monthly basis.

04:31.000 --> 04:41.000
Then with the cloud we moved to hours and then milliseconds, milliseconds nowadays with the functionalist things, serverless functions, and those kind of things.

04:41.000 --> 04:53.000
So time obviously is one of those aspects at even tiner granularity, but the other one is actually resources themselves.

04:53.000 --> 05:05.000
So before the cloud era we used to talk about CPUs or sockets or full systems. Nowadays we move to core and vcore and now fractional vCPUs.

05:05.000 --> 05:27.000
So effectively in this way the cloud can charge every single customer exactly for the amount of resources that they are using, but most interestingly I think it's the fact that they can also have very small prices per unit because the unit is very small as well.

05:28.000 --> 05:37.000
So what can we learn from public clouds? I think the first big bucket of things is going to be the separation of concern.

05:37.000 --> 05:45.000
Obviously public clouds are different companies from their customers, so it's very important to define a boundary.

05:45.000 --> 05:55.000
While in internal clouds or private clouds that is not always done. I think this is a key aspect that we need to learn from public clouds.

05:55.000 --> 06:08.000
And to be precise they have standardized the interface between the infrastructure which is what the public cloud provides and the workload which is your part.

06:08.000 --> 06:26.000
And by defining that clear card it's first of all easier to build, but secondly it's also easier to define which responsibilities are the provider responsibility and which responsibilities are the customer or user responsibility.

06:27.000 --> 06:46.000
Second is the scalability at workload level. Nowadays it's I would say obvious that your application needs to be the one that scales and the infrastructure might be there or not, but the reality is that your application needs to take care about that scalability part.

06:46.000 --> 07:01.000
Back in the days that was not obvious. Back in the days when you had more need for more resources than you had you would call your infraperson and they would provide you with a bigger server or whatever.

07:01.000 --> 07:11.000
So I think this is an important aspect that we need to bring into a successful private cloud as well.

07:12.000 --> 07:31.000
The third aspect is the obstruction of the physical architecture. This was a big change in the public cloud model. The public cloud was saying you don't care where my data centers are, how my server work, how many I have.

07:31.000 --> 07:38.000
The important thing for you is you have enough resources that you can use and those are very simple kind of resources that you can use.

07:39.000 --> 07:52.000
The second aspect that I think we should learn from them is to have a functional business model and by functional I mean economically sound business model.

07:53.000 --> 08:13.000
So by standardizing those interfaces between the infrastructure and the workload you can actually decide a charge for them and it's easier to define what that amount of money should be if you only have very limited amount of constructs.

08:13.000 --> 08:30.000
Now obviously if we are talking about the private cloud within a company you will not probably exchange real money internally between your departments but still you can do charge bags or virtual money, color money, whatever your company calls them.

08:31.000 --> 08:49.000
And this is very important because having a sustainable business model means that you are not a cost center. The IT is not a cost center anymore but it is part of the rest of the company having incomes as well as costs.

08:50.000 --> 09:08.000
Building back is critical as mentioned also for another reason because the risk of not building back is that all the other departments will look like they are absolutely in the positive even though maybe they are burning a huge amount of resources of the company.

09:08.000 --> 09:17.000
So it's very important to build back to the final customer to ensure that their accountability is also correct.

09:17.000 --> 09:32.000
And then the third aspect is keep the cost down. A lot of times in IT we have ignored the fact that things cost and we can justify costs only if we deliver enough value to the business.

09:33.000 --> 09:52.000
And therefore we had a lot of cost creeping around IT, internal ITs and that was also one of the advantages that companies saw in externalized IT to public clouds or other companies because they were like okay so those people will optimize costs.

09:53.000 --> 10:03.000
So it's very important if we want to have successful internal IT and private clouds to have them and run them in a cost aware way.

10:04.000 --> 10:12.000
The third aspect which I think is critical to learn from public clouds is to maintain the control.

10:12.000 --> 10:16.000
And by maintaining control I mean many different things.

10:16.000 --> 10:24.000
So first of all set some SLOs, measure, iterate and that is a critical point.

10:24.000 --> 10:37.000
If you don't have SLOs or SLAs or whatever different kind of indicators, objectives and so on you cannot have anything successful in the long term.

10:37.000 --> 10:41.000
And then of course measuring iterate is very important as well.

10:41.000 --> 10:46.000
But also it's very important to think about control in a moralistic way.

10:46.000 --> 10:54.000
So I would say do not use third party proprietary software if it's your own proprietary software that's a different conversation.

10:54.000 --> 11:05.000
But if it's someone else this is a big risk because when you create an architecture, a cloud for instance, you are going to host someone else workloads.

11:05.000 --> 11:12.000
And those someone else will probably want to run the workload for a long period of time which could be 10 years, 15 years, something like that.

11:12.000 --> 11:19.000
So you will need to ensure that you will be able to continue delivering that service for the next 10 to 15 years.

11:19.000 --> 11:30.000
If you rely on someone else software you know it could happen a lot of different things to that software provider that can make you put you in a difficult spot.

11:31.000 --> 11:36.000
There is also a big conversation in the IT by versus build.

11:36.000 --> 11:45.000
So effectively every time you decided to use a software you need to decide to either buy that software from someone else or build that software.

11:45.000 --> 11:53.000
I would say a lot of times for small tools mainly it's easier to build them than to buy them.

11:53.000 --> 12:09.000
I mean, to buy them means that they are readily available but building them means that you do have that knowledge and that ability to then maintain that software throughout the whole life of the platform.

12:11.000 --> 12:13.000
And then there is the big point about lockings.

12:13.000 --> 12:15.000
Lockings can be any kind of lockings.

12:16.000 --> 12:33.000
I do have my definition of lockings which is that lockings are the product between the probability that a component will require substitution during the life cycle of your solution which could be as I said 10, 15 more years and the total cost of that substitution.

12:33.000 --> 12:55.000
Now lockings are not something you can walk away from because if we go very basic the Linux kernel has APIs and that APIs are a lock-in because basically if you will want to move away from the Linux kernel you will have a lot of cost if you have your whole infrastructure on it.

12:56.000 --> 12:59.000
So obviously there is still a cost there.

12:59.000 --> 13:07.000
What is the probability though that you will want to walk away from Linux in the next 10, 15 years or that you will need to?

13:07.000 --> 13:12.000
Well, probably very low so I would say that is a low cost lock-in.

13:13.000 --> 13:17.000
But in the end, you know, every single decision brings a lock-in.

13:17.000 --> 13:25.000
You need to be aware of this and therefore manage your choices being aware of this point.

13:25.000 --> 13:30.000
So some technologies, consideration and bets, very simple.

13:30.000 --> 13:32.000
Let's start with the very basic one.

13:32.000 --> 13:34.000
Keep it simple as much as possible.

13:34.000 --> 13:37.000
Reduce the complexity of your system to a minimum.

13:37.000 --> 13:41.000
You have to maintain that stuff for the next many, many years.

13:41.000 --> 13:46.000
So try to keep it as simple as possible because it will become complex either way.

13:46.000 --> 13:49.000
So better to start easy.

13:49.000 --> 13:53.000
Second, prefer build time complexity over run time complexity.

13:53.000 --> 13:59.000
A big example I do about this is use VMs or bare metal stuff.

13:59.000 --> 14:04.000
I would prefer using bare metal things because obviously they are more complex to set up.

14:04.000 --> 14:09.000
They are going to be more complex in some scaling situation as well.

14:09.000 --> 14:14.000
But in the other hand, you will have one less layer to care about.

14:14.000 --> 14:24.000
And when you have a lot of layers, you start to have issues just because packages or stuff goes through a lot of layers.

14:24.000 --> 14:26.000
And it will be much harder to debug.

14:26.000 --> 14:32.000
So effectively, if you can, move your complexity to build time rather than run time.

14:32.000 --> 14:36.000
And then minimize the amount of services that you actually offer.

14:36.000 --> 14:42.000
So just offer the very basic services that your customer are requiring today.

14:42.000 --> 14:50.000
And then over time, if they will require more services, you might choose to give them as well.

14:50.000 --> 14:56.000
But if you start today with 1,000 different services, it will not make any sense

14:56.000 --> 15:02.000
because probably on a lot of those services, you will have very limited amount of customers.

15:02.000 --> 15:06.000
But still, you will not be able to drop them because you do have customers

15:06.000 --> 15:09.000
and your complexity will just skyrocket.

15:09.000 --> 15:12.000
Second, go for containers.

15:12.000 --> 15:18.000
Nowadays, there are still applications that are not fully containerized or containerizable.

15:18.000 --> 15:19.000
I understand that.

15:19.000 --> 15:26.000
But containers seems today to be a sensible unit of computing

15:26.000 --> 15:32.000
or way of transporting application and data throughout architectures.

15:32.000 --> 15:36.000
I would suggest going for a Kubernetes distribution.

15:36.000 --> 15:42.000
And by Kubernetes distribution, I mean something that implements the Kubernetes APIs.

15:42.000 --> 15:46.000
I think that Kubernetes APIs are going to be the next POSIX APIs.

15:46.000 --> 15:50.000
So basically, the whole world will standardize on them.

15:50.000 --> 15:56.000
And maybe there will have 10 different implementation of the Kubernetes APIs.

15:56.000 --> 16:05.000
But still, using those Kubernetes APIs will probably be a future proof choice.

16:05.000 --> 16:10.000
You can obviously go for a do-it-yourself installation of Kubernetes

16:10.000 --> 16:16.000
or any other application, community one, whatever you want to call it.

16:16.000 --> 16:18.000
Or you can go for a commercial one.

16:18.000 --> 16:20.000
There are not that many other choices.

16:20.000 --> 16:24.000
If you go for a commercial one, first of all, go for a fully open source one,

16:24.000 --> 16:30.000
as mentioned before, because if you have a proprietary third-party application,

16:30.000 --> 16:33.000
then you might incur some risk there.

16:33.000 --> 16:35.000
Go for a trustworthy company.

16:35.000 --> 16:38.000
And by trustworthy, I mean someone that you can trust,

16:38.000 --> 16:42.000
because in the end, it's you that are going to deploy and work on this stuff

16:42.000 --> 16:45.000
for the rest of the life of this application.

16:45.000 --> 16:50.000
Therefore, you need to trust that vendor, that vendor will still be there

16:50.000 --> 16:53.000
and support you in a sensible way.

16:53.000 --> 16:56.000
And then third, it needs to be valuable.

16:56.000 --> 16:59.000
And valuable is still from your perspective.

16:59.000 --> 17:06.000
So you have to see the do-it-yourself and that specific offering that you are looking at.

17:06.000 --> 17:09.000
Obviously, the offering will have some cost associated.

17:09.000 --> 17:16.000
All those advantages that commercial option is giving you more or less than the DIY.

17:16.000 --> 17:21.000
But this is a very critical choice, because then that becomes one of the key components

17:21.000 --> 17:23.000
of your whole infrastructure.

17:23.000 --> 17:31.000
And getting that choice wrong can be very costly in the course of the whole life of the application.

17:31.000 --> 17:35.000
And then another suggestion from my side.

17:35.000 --> 17:42.000
I come from an automation system administrator slash automation space.

17:42.000 --> 17:44.000
So automation is very important for me.

17:44.000 --> 17:49.000
First of all, go for a mutable approach to your infrastructure,

17:49.000 --> 17:51.000
bake your images, ship the images.

17:51.000 --> 17:57.000
When you have to do an update, just refresh the whole node with something new

17:57.000 --> 18:01.000
that continues to work and has all the changes.

18:01.000 --> 18:08.000
Second aspect is version everything, because hopefully you will never need to, you know,

18:08.000 --> 18:12.000
roll back anything and rolling back is always dangerous.

18:12.000 --> 18:17.000
But it's very important to see exactly what change from version X to version F soon

18:17.000 --> 18:23.000
so that effective you are ready to mitigate the issues.

18:23.000 --> 18:27.000
Then automate processes end to end.

18:27.000 --> 18:32.000
If you don't automate a process end to end, so effectively if you have like half process automated

18:32.000 --> 18:36.000
a human step and then half process automated afterwards,

18:36.000 --> 18:42.000
you are not getting the majority of the advantage of the automation, which is speed and reliability,

18:42.000 --> 18:47.000
because that human step is breaking those advantages for you.

18:47.000 --> 18:56.000
So a few conclusions that we can do and try to put together a possible solution and stack

18:56.000 --> 18:59.000
out of this whole conversation.

18:59.000 --> 19:06.000
We are going to have three aspects, the infraside, the API and the workload.

19:06.000 --> 19:12.000
So on the infraside create slash architects for multiple data centers,

19:12.000 --> 19:18.000
even though you are not really yet using them, start to think about multi-data center deployments

19:18.000 --> 19:21.000
because very probably you are going to need them.

19:21.000 --> 19:24.000
Your application will want them.

19:24.000 --> 19:29.000
Deploy Kubernetes container platforms cluster on Bermatel.

19:29.000 --> 19:34.000
As I said, having virtual machines in between can have advantages,

19:34.000 --> 19:39.000
but still it will give you a lot of headaches.

19:39.000 --> 19:44.000
Use a tool to obstruct the management of those clusters.

19:44.000 --> 19:48.000
There is open cluster management, which is a great open source tool.

19:48.000 --> 19:56.000
You can do it with many others, pick your own, but still don't try to manage 1,000 clusters manually.

19:56.000 --> 20:02.000
Set SLOs, measure, iterate, that is obviously a very important point,

20:02.000 --> 20:10.000
and automate all the pieces of your infrastructure and configuration.

20:10.000 --> 20:15.000
So on the API side, define discrete regions,

20:15.000 --> 20:19.000
not based on technically the data centers or that kind of things,

20:19.000 --> 20:22.000
but other reasons, that are business reasons.

20:22.000 --> 20:25.000
One example is, for instance, legal frameworks.

20:25.000 --> 20:29.000
Europe has a legal framework, US has a very different legal framework.

20:29.000 --> 20:36.000
Your application owners will probably want to choose if their application is running on the US part

20:36.000 --> 20:38.000
or the European part.

20:38.000 --> 20:45.000
We will probably not care a lot about if the data center is in Brussels, in Ghent or wherever.

20:45.000 --> 20:58.000
Standardize on Kubernetes APIs is the only kind of interface between your part, the infrastructure part,

20:58.000 --> 21:04.000
and the workload, so that it's a very easy way to do it.

21:04.000 --> 21:10.000
Start providing very, very few APIs to your user.

21:10.000 --> 21:16.000
My example would be, for instance, an OCI registry where you would want one, object storage,

21:16.000 --> 21:22.000
some kind of PV, PVC, so block storages,

21:22.000 --> 21:25.000
pause deployment stage, we said, comping mask secrets,

21:25.000 --> 21:29.000
but try to avoid databases or those kind of things,

21:29.000 --> 21:32.000
and then when your user actually asks for them,

21:32.000 --> 21:35.000
if you have enough users that ask for the same thing,

21:35.000 --> 21:39.000
then you can start to add additional services.

21:39.000 --> 21:50.000
So, on the workload side, create a simple UX to create, update, and delete workloads,

21:50.000 --> 21:54.000
and by simple UX, I mean a UX that is simple for your users.

21:54.000 --> 22:00.000
So, if your users are used for a certain kind of user experience,

22:00.000 --> 22:05.000
follow whatever your users are used to.

22:05.000 --> 22:10.000
Store every single version of your workloads configuration,

22:10.000 --> 22:18.000
and this way, for instance, in Ghent, this way, once issues will arise and they will,

22:18.000 --> 22:24.000
you can go back and say, look, you have changed this and that is what broke everything,

22:24.000 --> 22:32.000
but also this will allow you to do resource tests and that kind of things on real data.

22:32.000 --> 22:39.000
Require OCI with a knocked out if your workloads will require it,

22:39.000 --> 22:44.000
your application to be resilient to restart, replications, migrations,

22:44.000 --> 22:46.000
and all the other kind of operations.

22:46.000 --> 22:51.000
If you have some application that needs to be very sticky, that's a different conversation,

22:51.000 --> 22:56.000
but still don't put it as a default choice,

22:56.000 --> 23:02.000
make them choose to be a special application.

23:02.000 --> 23:08.000
So, with this, thanks a lot, and if we have question and time.

23:15.000 --> 23:20.000
Yeah, maybe we should have time for one or two questions.

23:20.000 --> 23:22.000
Thank you very much for the talk.

23:22.000 --> 23:24.000
Regarding immutable applications.

23:24.000 --> 23:30.000
Things with video, we are in some delay. Sorry for that.

23:30.000 --> 23:35.000
Regarding immutable applications, like it's something getting thrown around a lot,

23:35.000 --> 23:40.000
but like what exactly works to do this at scale?

23:40.000 --> 23:42.000
Like is there any recommendation on that?

23:42.000 --> 23:46.000
Sorry, don't catch.

23:46.000 --> 23:50.000
Immutable applications, you recommended this,

23:50.000 --> 23:55.000
but like as most applications are actually automated with Ansible or Puppet,

23:55.000 --> 23:57.000
which are very mutable.

23:57.000 --> 24:00.000
So, like what's the immutable approach?

24:00.000 --> 24:02.000
What's the tooling there?

24:02.000 --> 24:06.000
So, what is an immutable approach?

24:06.000 --> 24:11.000
I would say RPMOS 3, for instance, based distributions.

24:11.000 --> 24:18.000
So, there is Fedora, CoreOS, there is many others distribution that are doing the same thing.

24:18.000 --> 24:26.000
If you deploy, if you have your nodes that are only running Kubernetes,

24:26.000 --> 24:29.000
you don't need to manage them too much.

24:29.000 --> 24:37.000
You just need a very basic operating system and then enough to run a container runner.

24:37.000 --> 24:43.000
So, effectively, try to keep that one as small as possible, not to manage it too much,

24:43.000 --> 24:47.000
and then use any mutable operating system such as Fedora, CoreOS.

24:47.000 --> 24:52.000
Would be the Fedora one, there is CentOS, CoreOS, I think, or whatever it's called,

24:52.000 --> 24:54.000
the mutable version of it.

24:54.000 --> 25:00.000
I know that SUSE has one, Ubuntu has one as well and so on.

25:00.000 --> 25:04.000
A question from turning from public cloud to private cloud as you describe it,

25:04.000 --> 25:10.000
from an IT resource perspective, what does it mean for the companies who go back to private cloud?

25:10.000 --> 25:14.000
Do they need to build up new IT, scarce IT resources?

25:14.000 --> 25:22.000
Yeah, so from resources perspective, if the company has already dismissed all their data centers

25:22.000 --> 25:26.000
and moved to the public cloud and now it's like, oh, maybe we should go back,

25:26.000 --> 25:39.000
that's a little bit of a problem, but there are a lot of data centers that can rent you like square meters or racks

25:39.000 --> 25:44.000
in their data centers, but still you would manage the whole infrastructure.

25:44.000 --> 25:49.000
So, effectively, it just gives you space, power, and connectivity.

25:49.000 --> 25:53.000
So, that could be a way to start doing those kind of things.

25:53.000 --> 25:58.000
And then obviously if you have a lot of requirements, a lot of, you know, service to deploy,

25:58.000 --> 26:04.000
you can choose which path would be the best for you.

26:04.000 --> 26:07.000
Okay, thank you very much for the talk.

26:07.000 --> 26:10.000
Maybe one applause? Do we have applause for you?

