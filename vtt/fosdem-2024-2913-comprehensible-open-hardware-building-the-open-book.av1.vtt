WEBVTT

00:00.000 --> 00:08.000
Good morning everyone.

00:08.000 --> 00:13.000
As said, my name is Joey Castillo and I'm here to give a brief talk on, I guess,

00:13.000 --> 00:18.000
comprehensible open hardware, which for the record, I'm not a maker of open

00:18.000 --> 00:22.000
hardware tools. I'm just a humble user of them. But yeah, this talk comes from the

00:22.000 --> 00:26.000
perspective of someone using the tools made by the folks in this room to learn

00:26.000 --> 00:32.000
from open hardware designs and make some of my own. So one of the first things that

00:32.000 --> 00:37.000
I wanted to build when I got into open hardware was called the open book. This is

00:37.000 --> 00:42.000
an open hardware e-reader, more or less. And I wanted to make this for a long time,

00:42.000 --> 00:47.000
way back in like 2018, 2019, when I really wanted to make something like this. I

00:47.000 --> 00:52.000
didn't actually have the skills to make something like this. So to get there, I

00:52.000 --> 00:57.000
went online to steal as much as I could from folks like Adafruit, who make open

00:57.000 --> 01:01.000
source hardware. In opening up their designs for things like this e-paper

01:01.000 --> 01:06.000
driver board, they let me copy a lot of what they did for their gadget into my

01:06.000 --> 01:12.000
gadget. But getting ahead of myself here. The open book is the thing that I wanted

01:12.000 --> 01:18.000
to make, and I had some goals for the device. Those goals were pretty simple, or

01:18.000 --> 01:23.000
simply stated. I wanted to use it to read books. As I pitch it to new

01:23.000 --> 01:28.000
acquaintances, it's like a kindle that you build from scratch. I wanted it to

01:28.000 --> 01:33.000
support reading text in all the languages of the world. And I also wanted it to be

01:33.000 --> 01:40.000
affordable, accessible, and for lack of a better term kind of DIY-able. So just to

01:40.000 --> 01:44.000
give you an idea of what the device is and what it does, here is a short video of

01:44.000 --> 01:49.000
it in use. Here's a listing of books and short stories on the device. And I can

01:49.000 --> 01:54.000
launch this short story by Leo Tolstoy, which of course renders in Russian. The

01:54.000 --> 01:58.000
center button goes back home, where we can select a different work, like here the

01:58.000 --> 02:06.000
Tao Te Ching, rendered in Chinese. So I think it's pretty fun as projects go, but

02:06.000 --> 02:11.000
the fact is that's only half of it. The other half is I wanted the open book to

02:11.000 --> 02:16.000
be comprehensible to the person who builds and uses it. Like, it's through open

02:16.000 --> 02:20.000
hardware that I learned to build open hardware, and I really want to pay that

02:20.000 --> 02:25.000
forward to the people who have their own open book. To explain some of how I tried

02:25.000 --> 02:31.000
to do that, I have to flip it over to the back side. So there are a lot of issues

02:31.000 --> 02:35.000
with this first revision of the open book, but I'm showing it first because of this

02:36.000 --> 02:41.000
sort of dense silkscreen text that kind of became my trademark. Back when people

02:41.000 --> 02:45.000
were on Twitter, multiple folks at various times called me the Dr. Bronner's of

02:45.000 --> 02:52.000
PCB design. For this habit of filling every millimeter of my board with text.

02:52.000 --> 02:58.000
Up here, I'm narrating the entire soap opera of an ideal diode circuit giving

02:58.000 --> 03:04.000
five volts to a regulator, which is interesting, I guess. But why? Why should I pack

03:04.000 --> 03:10.000
my board silkscreen full of this kind of stuff? To answer that, I need to briefly

03:10.000 --> 03:16.000
do my ideology of why I got into open hardware. The problem, as I see it, is

03:16.000 --> 03:21.000
closed tech, especially as shipped by these big tech companies, fails to serve

03:21.000 --> 03:27.000
users of the technology. I tend to look at technology through the lens of power.

03:27.000 --> 03:32.000
Like, take this Kindle, for example. Who is this technology designed to empower?

03:32.000 --> 03:37.000
And while, yes, it does allow you to read books, I'd argue it is designed to empower

03:37.000 --> 03:42.000
Amazon. It's designed to push you into dark patterns that make you spend more money

03:42.000 --> 03:47.000
with Amazon. It's designed to surveil your taps and profile your habits for

03:47.000 --> 03:52.000
Amazon. It's designed to steal your attention and monetize it by selling ads

03:52.000 --> 03:58.000
for makeup or toasters. Meanwhile, the end user just wants to use the device on

03:58.000 --> 04:03.000
their terms without ads for toasters and is prevented from doing so by the platform

04:03.000 --> 04:10.000
owner. The big question for me, why does the tech get away with this? And the

04:10.000 --> 04:14.000
answer that keeps coming back to me is the technology is fundamentally

04:14.000 --> 04:19.000
incomprehensible to the end user. A device like this arrives fully formed as a slab

04:19.000 --> 04:24.000
of glass and plastic and it's meant to be used in the ways the platform owner

04:24.000 --> 04:29.000
sets forth. It's not meant to be understood or hacked or made to better serve the

04:29.000 --> 04:36.000
user. So what can we do about it? Well, I don't have all the answers, but in my

04:36.000 --> 04:42.000
practice at least, my goal is to make tech that folks can understand. My theory is

04:42.000 --> 04:47.000
if we can design well-documented open hardware that people can build on their

04:47.000 --> 04:53.000
own and understand, at least in the broad strokes, we can teach them that they don't

04:53.000 --> 04:58.000
have to accept technology that wasn't made with their best interests at heart.

04:58.000 --> 05:03.000
There is this fantastic quote from Bunny Wong in a blog post about hacking his

05:03.000 --> 05:08.000
Garmin smartwatch. He writes, the point of open hardware is not the ritual of

05:08.000 --> 05:13.000
compiling our stuff from source. It's the awareness that technology is not magic,

05:13.000 --> 05:17.000
that there's a trail of breadcrumbs that any of us could follow to liberate our

05:17.000 --> 05:23.000
digital lives. So with that in mind, what are the breadcrumbs? What trail am I

05:23.000 --> 05:30.000
laying down for users of my objects to follow? Over the course of a few years,

05:30.000 --> 05:34.000
I've had the opportunity to design several different versions of the open book and

05:34.000 --> 05:37.000
I think I've found three different sets of breadcrumbs for three different

05:37.000 --> 05:41.000
contexts. The first one has to do with helping the user understand how the

05:41.000 --> 05:44.000
gadget works, the second helping them understand how to build the gadget

05:44.000 --> 05:49.000
themselves, and third, explaining how to make use of the gadget. Let's take the

05:49.000 --> 05:54.000
first one first. This is one of the earliest open book prototypes and my vision

05:54.000 --> 05:58.000
back then was to use the silkscreen to narrate what each component on the board

05:58.000 --> 06:04.000
does. This has some benefits, I think. Like on the plus side, this could

06:04.000 --> 06:09.000
demystify the tech for someone who sat down and actually read the silkscreen.

06:09.000 --> 06:13.000
On the downside, I have to say, space is limited and I honestly left wondering

06:13.000 --> 06:18.000
if this is the most useful information to give the user. Like, I want to

06:18.000 --> 06:21.000
demystify the tech, I want them to feel like this is something they can understand,

06:21.000 --> 06:27.000
but is understanding how a MOSFET works the best way to do that? The best answer

06:27.000 --> 06:32.000
I can come up with is maybe. Still, there were a couple of bigger issues with this

06:32.000 --> 06:37.000
version of the open book. The parts are kind of small. These are 805 passives,

06:37.000 --> 06:41.000
which are pretty small for the average folk. They're fine-pitched parts. There's

06:41.000 --> 06:45.000
also parts like this microSD slot, which has its solderable connections hidden

06:45.000 --> 06:50.000
underneath a shield. I borrowed that footprint from Adafruit, which is open

06:50.000 --> 06:56.000
hardware and great, but they design for manufacturing, not hand-building. They're

06:56.000 --> 07:00.000
also honestly just way too many parts on this board. It's trying to do too many

07:00.000 --> 07:04.000
things and it's overwhelming to someone trying to build and understand it. So,

07:04.000 --> 07:09.000
yeah, this realization led to a new design that I called the abridged edition. This

07:09.000 --> 07:14.000
version cut the part count down considerably and tried to make it as simple as

07:14.000 --> 07:19.000
possible for people to build themselves. I used bigger passive components, 1206,

07:19.000 --> 07:24.000
and I picked parts with pins that are easily accessible like this new microSD slot.

07:24.000 --> 07:28.000
Instead of making folks solder down a fine-pitched microcontroller, I used the

07:28.000 --> 07:35.000
Raspberry Pi Pico module, which has a super-friendly 0.1-inch pitch. Yeah, some

07:35.000 --> 07:40.000
parts like this flex connector I could not buy on a module, but then I realized I

07:40.000 --> 07:44.000
can make my own module and have it preassembled. This little cast-related

07:44.000 --> 07:48.000
module, the green part, includes the e-paper connector as well as the whole

07:48.000 --> 07:53.000
supporting boost circuit. I ordered dozens of these for a few bucks a piece and I

07:53.000 --> 07:58.000
offered them alongside my main PCB. This meant that DIY makers only had to

07:58.000 --> 08:02.000
plop down one module to get the display working instead of a dozen densely packed

08:02.000 --> 08:08.000
fine-pitched parts. I also decided rather than using the silk screen to explain

08:08.000 --> 08:13.000
things, I could use it to explain how to build the thing. Adding step-by-step

08:13.000 --> 08:18.000
instructions alongside each of the parts on the board is a different trail of

08:18.000 --> 08:22.000
dreadcrumbs, but the upshot was you could follow the instructions, literally

08:22.000 --> 08:26.000
counter-clockwise around the board, and if you followed them all correctly, you

08:26.000 --> 08:32.000
would end up with a working device. Okay, so things I like about this set of

08:32.000 --> 08:37.000
dreadcrumbs, well, it is super effective. Since releasing this design, dozens of

08:37.000 --> 08:41.000
people around the world have assembled their own open book boards without any

08:41.000 --> 08:46.000
of my involvement. Like these photos are community builds that I never touched.

08:46.000 --> 08:49.000
I didn't even send them a board. These are people going in on group buys and part

08:49.000 --> 08:53.000
swaps and having enough success with the build that they've moved on to hacking

08:53.000 --> 08:58.000
on the firmware, which is exactly what I wanted to see. I'll also say we did a

08:58.000 --> 09:03.000
workshop at Hackaday Supercon in 2022, very ad hoc, not a formal workshop. We just

09:03.000 --> 09:07.000
sat on the floor of Supply Frame HQ and I guided a dozen people through building

09:07.000 --> 09:12.000
their own open books, and every single one walked away with a working device.

09:12.000 --> 09:19.000
Like, the plan worked. Still, after the abridged edition and doing these

09:19.000 --> 09:24.000
workshops kind of hands on, I realized to make the project scale to more people, I

09:24.000 --> 09:28.000
couldn't rely on everyone soldering it together themselves. I would have to have

09:28.000 --> 09:33.000
most of the thing done for them. This means I'm no longer using the silk screen to

09:33.000 --> 09:37.000
tell folks how to solder the thing together. Still, I did want to use it to do

09:37.000 --> 09:42.000
something useful. I still wanted to encourage that comprehensibility that we

09:42.000 --> 09:47.000
were talking about earlier. In this case, I kept something from the original open

09:47.000 --> 09:52.000
book, arranging the components in functional blocks, even if I can't fit room for

09:52.000 --> 09:58.000
narrative text to describe what they do. These blocks match what's in my schematic

09:58.000 --> 10:04.000
and how the components are grouped over there. This still gives people an

10:04.000 --> 10:08.000
overview of how the device works. You can see this is not a pile of parts arranged

10:08.000 --> 10:13.000
haphazardly. These parts work together in ways the user can understand. This is the

10:13.000 --> 10:19.000
battery charger. This is the power supply. Still, there is the question of what to do

10:19.000 --> 10:23.000
with the rest of the board space, and I can't leave it blank, so.

10:23.000 --> 10:32.000
The trail I'm finding most useful these days is the trail that leads to making use

10:32.000 --> 10:37.000
of the device. For this latest version of the open book, I'm including pin

10:37.000 --> 10:41.000
assignments as well as notes on how to develop firmware for the device right there

10:42.000 --> 10:47.000
on the circuit board itself. So, I'm going to be honest with you. I use this a

10:47.000 --> 10:52.000
ton when I'm writing my own firmware. Like, I am lazy, really. Sometimes I don't

10:52.000 --> 10:55.000
want to search my own documentation. Sometimes I didn't even write the

10:55.000 --> 11:00.000
documentation. If I don't want to open my schematic to try to decode what I was

11:00.000 --> 11:04.000
thinking when I designed this thing six months ago, what are the odds a user is

11:04.000 --> 11:09.000
going to go to all that effort themselves? Having the docs right there on the board

11:09.000 --> 11:14.000
is an affordance for people making use of my device, and as I found out, I am one

11:14.000 --> 11:20.000
of them. This also works on boards of many shapes and sizes. This is the circuit

11:20.000 --> 11:24.000
board for SensorWatch, the Casio wristwatch mod that I'm wearing on my wrist.

11:24.000 --> 11:29.000
Also, a shout out to Lucas, who is just up here. I learned everything about making

11:29.000 --> 11:33.000
a Casio board swap from your open hardware Pluto watch, so thank you for that.

11:33.000 --> 11:39.000
SensorWatch owes its existence to your project. Anyway, you can see here we're on

11:39.000 --> 11:44.000
the backside. This board is less than one inch in diameter, but we're still able to

11:44.000 --> 11:49.000
include notes about which pins are which, the capabilities, and even which on-chip

11:49.000 --> 11:56.000
peripherals I expect you to call on to make use of those pins. Self-documenting

11:56.000 --> 12:00.000
circuit boards like these attach relevant information to the hardware you already

12:00.000 --> 12:06.000
have physically in hand. This board doesn't just have pin labels. It has a narrative

12:06.000 --> 12:10.000
of how you wire it up. It doesn't just have component designators. It tells you

12:10.000 --> 12:18.000
what they mean for the device configuration. Oops. It creates a self-contained artifact.

12:18.000 --> 12:22.000
This is a prototype of a new version of SensorWatch. I'm still working on the pin

12:22.000 --> 12:26.000
assignments, and they may change before it's final, but even if I put this down and

12:26.000 --> 12:29.000
pick it up in six months, I don't have to cross-check a revision number with a

12:29.000 --> 12:33.000
schematic and a datasheet to get hacking. All the relevant information is literally

12:33.000 --> 12:40.000
in hand. Moreover, that information becomes available to the end user as well.

12:40.000 --> 12:44.000
Unlike closed-source objects, you have to painstakingly reverse engineer. Putting this

12:44.000 --> 12:49.000
information on the board itself makes the object hackable by default. We're throwing

12:49.000 --> 12:53.000
the doors open to the end user without forcing them to do so much as a web search,

12:53.000 --> 12:59.000
much less a deep dive into my repo. Also, just as a side note, this technique pairs

12:59.000 --> 13:03.000
very nicely with code that makes use of the same names. If your silkscreen says

13:03.000 --> 13:08.000
you named a pin button alarm, and the headers for your board support package also

13:08.000 --> 13:12.000
name that pin button alarm, you've made everyone's life easier, including,

13:12.000 --> 13:19.000
actually, maybe even especially your own. Once again, I am not someone who invents

13:19.000 --> 13:24.000
open hardware tools. I am just a humble user of them. And I don't have all the answers

13:24.000 --> 13:29.000
for when it comes to making or helping folks to rock the stuff that we make. Still,

13:29.000 --> 13:33.000
these are some of the ways that I have tried to make some of my stuff more transparent.

13:33.000 --> 13:37.000
And I just want to close with some questions that I can ask myself and we can

13:37.000 --> 13:42.000
ask ourselves as we finalize our designs and send them out into the world. Questions

13:42.000 --> 13:48.000
like, how would I imagine someone using this device? Am I offering affordances

13:48.000 --> 13:53.000
that make it likely they'll achieve what I hope that they'll achieve? What kind of

13:53.000 --> 13:57.000
information would I want to give a user of the device, both at a basic level and

13:57.000 --> 14:01.000
at a more advanced level? And also, I didn't put it on the slide, but what would I

14:01.000 --> 14:04.000
want to know if I'm picking this up after six months and I've forgotten most of my

14:04.000 --> 14:10.000
design choices? Most of all, can I tell the story that I'm trying to tell, the

14:10.000 --> 14:14.000
story of the device in a way that makes sense? Because if I can figure that out

14:14.000 --> 14:19.000
and print it right there on the board, both the artifact and its back story will

14:19.000 --> 14:24.000
live together forever. Anyway, that is what I wanted to share today. So I'm going

14:24.000 --> 14:28.000
to put up my info and I would love to take questions if we had any.

14:28.000 --> 14:43.000
Thank you. So first of all, I love the product and I love your philosophy in

14:43.000 --> 14:49.000
open source. So those open books support EPUB files right now?

14:49.000 --> 14:55.000
It does not. So the open book uses a ESP32 microcontroller. It's a very kind of

14:55.000 --> 15:00.000
resource constrained platform. At this time, I'm supporting plain UTF-8 text.

15:00.000 --> 15:05.000
That is my file format of choice. That might also be a bit of an ideological

15:05.000 --> 15:09.000
choice. I like the idea that a plain text file can represent a literary work.

15:10.000 --> 15:14.000
Plain text feels powerful. I think if space aliens come and see the ruins of

15:14.000 --> 15:17.000
our civilization in a millennium, they'd probably be able to figure out the

15:17.000 --> 15:22.000
UTF-8. I'm not sure if they'd be able to figure out the plethora of things that

15:22.000 --> 15:29.000
go into... EPUB is just a zip. Yeah, having said that, folks ask this

15:29.000 --> 15:33.000
question a lot and now that people are hacking on the firmware, I think it's

15:33.000 --> 15:38.000
entirely possible that I think the ESP32 is a capable microcontroller and I'd

15:38.000 --> 15:42.000
be curious to see what folks come up with in this space. So while it's not

15:42.000 --> 15:46.000
something I'm working on myself, this is the ethos of open source, right?

15:46.000 --> 15:50.000
Throwing the doors open to folks. Awesome, thank you. Thank you.

15:59.000 --> 16:07.000
Yes, but for me the problem is microvision in the sense, so because there

16:07.000 --> 16:13.000
is a lot of SMD, surface-mountain device, and for me it's not practical. You

16:13.000 --> 16:23.000
need an installation of a big house to have a fire and this precision

16:23.000 --> 16:29.000
soldering and so it's not for everybody, this kind of thing. So I know hardware,

16:29.000 --> 16:35.000
but hardware is now in the past, it was easy. Now it's very difficult. So if

16:35.000 --> 16:40.000
you can do a book format, it's little also. I prefer a large format and to

16:40.000 --> 16:45.000
chance to make a chance to come annotation and so on. So what do you

16:45.000 --> 16:50.000
say about that? I think you're absolutely right and I think this is the reason

16:50.000 --> 16:54.000
that I'm starting to move toward getting it PCBA assembled and maybe people just...

16:54.000 --> 16:58.000
maybe the experience of building your own book is like taking a circuit board

16:58.000 --> 17:01.000
that's assembled and putting it into a case of your choosing or 3D printing a

17:01.000 --> 17:04.000
case and maybe that's the larger things that you're putting together, but I

17:04.000 --> 17:08.000
totally understand not everyone is going to be able to solder these fine-pitched

17:08.000 --> 17:15.000
parts and yeah, I think maybe my appetite for DIY got ahead of my understanding

17:15.000 --> 17:20.000
of everyone's capability or desire to DIY. So I think you're totally right and

17:20.000 --> 17:23.000
yeah, I'm probably moving toward more PCBA in the future.

17:23.000 --> 17:26.000
Can you pass the microphone back to Andy?

17:26.000 --> 17:37.000
Hi, thanks. It's really great. A couple of questions. So the

17:37.000 --> 17:42.000
sales screen can mess up your board now if you make a mistake in the documentation.

17:42.000 --> 17:49.000
That is correct. I think it makes me very diligent about triple checking things

17:49.000 --> 17:53.000
before I send it off, but no, I will not lie, that has happened to me before.

17:53.000 --> 17:57.000
No way of automating that?

17:57.000 --> 18:01.000
I'm very curious and maybe some of the folks in this room have ideas, but I do

18:01.000 --> 18:06.000
like the idea of if I know I want to annotate, for example, a line on my

18:06.000 --> 18:10.000
microcontroller symbol, I want that to be on my sales screen. That would be very

18:10.000 --> 18:13.000
interesting to see if there are ways to link those things together. I haven't yet

18:13.000 --> 18:18.000
run across ways to do that, but if anyone in this room knows tools that can help

18:18.000 --> 18:21.000
me with that, I would love to do more of that.

18:21.000 --> 18:26.000
Can you do field substitution in KeyCAD in the sales screen?

18:26.000 --> 18:29.000
Okay, cool. I've been told I can do field substitution in KeyCAD in sales screen,

18:29.000 --> 18:33.000
so that is awesome. As a user of KeyCAD, I will check that out.

18:33.000 --> 18:40.000
Any plans for having a camera on the book that you can scan the board and show

18:40.000 --> 18:44.000
the schematics and the documentation on the ebook itself?

18:45.000 --> 18:48.000
Interestingly, not only in the ebook itself, but I have a colleague who's

18:48.000 --> 18:53.000
working on using kind of QR style codes to get a better sense of the assembly

18:53.000 --> 18:57.000
of various devices. I think there's a lot of possibilities there.

18:57.000 --> 19:01.000
I also had a slide about the idea of, I like the idea of putting things like

19:01.000 --> 19:06.000
QR codes that contain text, not URLs, but if I could put a basic readme in a

19:06.000 --> 19:11.000
QR code and you scan it and you get the full text of a pinout or a description,

19:11.000 --> 19:16.000
that would be very interesting. But yeah, possibilities.

19:16.000 --> 19:18.000
I see one more in the back.

19:18.000 --> 19:24.000
There's a question on the line on the ETA.

19:24.000 --> 19:29.000
So, yeah, the question is, am I planning to offer the open book online or is there

19:29.000 --> 19:33.000
an ETA? And I hope to do a crowd supply campaign at some point this year.

19:33.000 --> 19:37.000
I'm just, yeah, it's hard to find the time to do all the things I want to do,

19:37.000 --> 19:41.000
but hopefully by the end of the year, hopefully in the next few months I'll

19:41.000 --> 19:45.000
have a pre-launch page up and we'll be able to, yeah, put something out there.

19:45.000 --> 19:47.000
Okay, so thank you, Joey.

19:47.000 --> 19:49.000
Thank you. Thank you all.

