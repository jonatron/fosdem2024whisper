WEBVTT

00:00.000 --> 00:10.400
Thank you, everyone. I see the defactmentation rules are now learned and people are following

00:10.400 --> 00:15.160
it. If you are not familiar with the defactmentation rules, go as much to decide as possible. That

00:15.160 --> 00:30.080
way we can fit more people who are entering through there. We are amazing door people.

00:30.080 --> 00:36.680
Our next speaker is Dennis and he is presenting a more controversial title than was on the

00:36.680 --> 00:43.280
initial proposal. In this case I would not have accepted the kidding. I heard the second

00:43.280 --> 00:49.840
time today that make fires are horrible. Again that is a personal opinion but maybe they are.

00:49.840 --> 00:53.440
Because this is the second time somebody mentioned this and this is the first time somebody

00:53.440 --> 01:00.440
proposed a solution for it. I have to be fair, I already use GoReleaser. Anyone else?

01:00.440 --> 01:01.440
Okay.

01:01.440 --> 01:09.040
It is no introduction anymore. Everybody knows you already. They go away. Thank you.

01:09.040 --> 01:16.040
Hi, everyone. My name is Denis Germain. I am a French music streaming service. I am

01:20.040 --> 01:26.040
also a tech blogger and if I am telling you this, all the slides, links, related stuff

01:26.040 --> 01:32.040
can be found on the blog. We are on the blog right now. You can find exactly everything.

01:32.040 --> 01:37.160
As you have guessed by now, by my beautiful accent, I am French but hopefully everyone

01:37.200 --> 01:40.680
will understand what I am going to say.

01:40.680 --> 01:47.680
So yeah, the title is a bit controversial. Okay. Putting an end to make files in Go projects

01:47.880 --> 01:54.880
with GoReleaser. Why is this talk? 15 years ago I started my career as a systems engineer

01:57.720 --> 02:04.160
and I haven't wrote a lot of code during that time. I wrote a bit of Python script

02:04.160 --> 02:11.160
and there are a lot of infrastructure as code but not compiled code. Last year I fell

02:12.040 --> 02:19.040
in love with Go. Many of you perhaps as well. But if you know site reliability engineer,

02:21.520 --> 02:27.360
you know that we are the laziest persons on earth. Like literally. We don't ever want

02:27.360 --> 02:32.560
to do anything boring. We don't want to do anything manually. We want to automate everything

02:32.560 --> 02:39.560
to keep drinking coffee instead of working. And I found out that compiled programs are

02:40.080 --> 02:45.360
boring because you have to compile them. Which is not a problem I had when I was writing

02:45.360 --> 02:52.360
Python. And I also started to contribute and to maintain open source projects, little things

02:53.200 --> 02:59.200
here and there. And I found that there were also other tasks really boring that I didn't

02:59.280 --> 03:05.440
want to do by hand. Among those tasks is cross compiling. You just don't have to compile

03:05.440 --> 03:11.680
your binary into one OS and one architecture. With Go you can do it quite easily for many

03:11.680 --> 03:17.960
architectures and many OSes but you have to do it. Building Docker images, obviously you

03:17.960 --> 03:24.960
probably want your users to be able to run this in a container. Making a bunch of packages

03:25.120 --> 03:32.120
like Debian packages, flat packs and so on. And if you create all those artifacts you will

03:32.200 --> 03:38.480
probably also want to check some and sign them so that your user can make sure that

03:38.480 --> 03:44.560
the binaries have not been altered during the downloading process. And last but not

03:44.560 --> 03:50.880
least you will probably release versions of your software if it's complex enough. And

03:50.960 --> 03:56.960
making those releases on your favorite SEM like GitLab or GitHub can be tedious as well.

03:56.960 --> 04:03.960
So, first solution. And I have to say that all those solutions are valid and work. When

04:06.560 --> 04:13.000
I was in engineering school I learned about make and make file. And it worked really great.

04:13.000 --> 04:19.160
I was using it for C programs and when you have to compile something you just create

04:19.200 --> 04:25.200
a simple make file and then you run your task and it's awesome. If you work in an

04:25.200 --> 04:32.200
industrialized environment you probably heard of Jenkins. And if you love Groovy I'm not

04:32.280 --> 04:39.280
judging. But you can automate all those tasks in various Jenkins files. If you run on some

04:40.840 --> 04:47.120
let's say modern SEMs like GitHub or GitLab you will probably use the GitLab CI or the

04:47.360 --> 04:54.360
GitHub Action to help you with this. And the last one is a bit of a joke and you probably

04:54.480 --> 05:01.480
want to understand it if you don't know. But you can do bash scripts. But what I'm going

05:04.400 --> 05:09.720
to show you today and I hope I'm going to convince you is that you can do all this and

05:09.720 --> 05:16.080
much more with a software that is called Gorillazer. Gorillazer is an open source software.

05:16.200 --> 05:21.200
It's an open source open core. Most of the features are open source but if you want more

05:21.200 --> 05:28.200
features you have to pay the maintainer for them. Today we are going to use the open source

05:28.640 --> 05:35.640
version. And it's an awesome software written in Go for Go. Okay. Now it's time to the demo.

05:36.640 --> 05:43.640
Okay. Some of you got that joke. Okay. So for this demo I have written a very super small

05:50.840 --> 05:57.840
program in GoLonger. It's a bit of a joke as well. I don't know if that's the case in

05:58.280 --> 06:05.280
Belgium or in other countries but hairdressers tend to put funny names or play on words in

06:07.640 --> 06:14.160
the name of the shop. So to give you an example that anyone will be able to understand, one

06:14.160 --> 06:21.160
may call it shop hair force one but with an H instead of the hair instead of the plane.

06:21.840 --> 06:28.840
Okay. And in France nearly all hairdressers do that. And so someone made a database of

06:29.920 --> 06:36.920
all those funny names in shops, put it in a JSON database, hosted it on the government

06:36.920 --> 06:43.920
data.gov.fr and I used it, created a program that picks randomly an entry in this database

06:44.840 --> 06:51.840
and output it. So that's what the program is doing basically. It's really silly and I

06:52.320 --> 06:59.320
like silly things. Okay. So no, that's not what I want to show you. Yeah. Is it big enough

07:03.520 --> 07:10.520
for those really? No, not big enough. Okay. Let's increase. It's going to be hard to see

07:11.360 --> 07:18.360
but let's try it like that. So what we are doing in this make file to build this program

07:18.720 --> 07:25.720
to save me some time because my time is precious. I start by doing a prepare which is going to

07:25.720 --> 07:30.720
do the go mod tidy and then I'm going to build which is calling the prepare obviously and

07:30.720 --> 07:37.720
then calls my command to build my software. I give it some environment variables. So I

07:38.000 --> 07:45.000
give it some environment variables to build it for my laptop and some LD flags because

07:46.520 --> 07:53.520
I write the version as an art coded variable. Okay. Let's try to run it. 0.0.1. Make, build.

07:53.520 --> 08:00.520
Okay. So you can see I'm really lazy because it's not that difficult but bear with me. Okay,

08:13.040 --> 08:20.040
diminutive or some. Okay. Great. Let's declare. Okay. Real funny. I'm going to do a little

08:23.520 --> 08:30.520
bit of a demo. I'm pretty sure the French speakers are enjoying it's much more than the

08:30.520 --> 08:37.520
other ones. Okay. And if I want to build a Docker image for this, for this binary, I have also

08:38.080 --> 08:45.080
made a task in my make file. The Docker file looks like this. So I use a multi-stage build.

08:46.080 --> 08:53.080
So in the first stage, in the builder stage, I'm going to download all the necessary dependencies

08:54.080 --> 09:00.080
to build my software and then I copy it in a new container containing only the binary.

09:00.080 --> 09:07.080
So the attack surface is way smaller and it's better for maintenance and size. I'm pretty

09:08.080 --> 09:14.080
sure it won't work because I have some networking issue but we'll try. Nevertheless. Okay. I forgot

09:15.080 --> 09:22.080
to add the version. I'm pretty sure you have always seen how Docker is built and it's going

09:26.080 --> 09:33.080
to fail. So I'm not going to continue here and skip to the rest of the demo. Maybe I have one here.

09:36.080 --> 09:43.080
So in there. Okay. So it's going to be a little bit more complicated. So I'm going to do a

09:44.080 --> 09:50.080
bit of, it works just like the other one. The version is displayed and then a random entry. Okay. Cool.

09:52.080 --> 09:59.080
How can we do better with Gorillazer? Let's say you don't have any idea how Gorillazer works. So there

10:01.080 --> 10:05.080
is a command for you which is called Gorillazer init. One which is going to create a default

10:05.080 --> 10:08.680
create a default Correlizer file,

10:08.680 --> 10:10.480
a default configuration file.

10:10.480 --> 10:12.600
I'm going to remove most of the stuff.

10:13.640 --> 10:14.480
Okay.

10:18.360 --> 10:21.400
Up, and then we will talk about it.

10:23.200 --> 10:24.040
Great.

10:25.240 --> 10:27.360
Okay, so what does this do?

10:28.360 --> 10:30.120
As you can see, there are before hooks

10:30.120 --> 10:33.160
that we can call before doing the actual building.

10:34.080 --> 10:36.280
So here we do the go-mode ID,

10:36.280 --> 10:41.120
just like I was doing before with my prepare in my make.

10:41.120 --> 10:43.480
And then the builds come.

10:43.480 --> 10:48.480
So I can also add environments, variables.

10:49.080 --> 10:53.520
I can tell Correlizer which architectures and OSs

10:53.520 --> 10:55.920
I want to build on.

10:55.920 --> 10:59.760
So let's say I want to build on

11:00.760 --> 11:05.760
ARM64 and AMD64 and on Linux and Mac OS as well.

11:08.640 --> 11:09.560
Okay.

11:09.560 --> 11:11.520
And I'm going to cheat a little bit

11:11.520 --> 11:14.400
to gain some precious seconds here.

11:15.760 --> 11:18.240
I'm going to have the famous LD flags

11:18.240 --> 11:23.240
that I was hard before to hard code my version variable.

11:24.920 --> 11:27.400
And as you can see, I'm not going to pass it

11:27.400 --> 11:30.440
as an un-variable as I did before,

11:30.440 --> 11:32.800
but I'm going to use an automated variable

11:32.800 --> 11:34.960
coming from Correlizer.

11:34.960 --> 11:38.240
Because what I haven't told you is that Correlizer,

11:38.240 --> 11:43.080
as this name says, is going to help us making releases.

11:43.080 --> 11:45.320
And obviously when you release software,

11:45.320 --> 11:48.800
you are going to add a new version for it.

11:48.800 --> 11:52.560
So we are going to leverage the power of Git tags.

11:52.560 --> 11:54.360
We are going to tag our code

11:54.360 --> 11:58.280
and the tag is going to give us our version.

11:58.280 --> 12:00.080
So, okay.

12:00.080 --> 12:05.080
So to make an example, I'm going to add commit.

12:13.960 --> 12:17.840
Then I'm going to tag my code with a new version

12:17.840 --> 12:19.640
being 0.0.1.

12:20.640 --> 12:24.360
I think that's correct.

12:26.360 --> 12:27.400
Okay.

12:27.400 --> 12:29.640
And then, oh no.

12:30.600 --> 12:31.720
Okay.

12:31.720 --> 12:34.400
And then I'm going to try to build my software

12:34.400 --> 12:35.880
with Correlizer.

12:36.880 --> 12:40.480
So Correlizer, there is a sub command called build,

12:40.480 --> 12:42.480
which is going only to make the build.

12:42.480 --> 12:44.000
We'll show you the rest later.

12:44.960 --> 12:46.480
And if I have, okay.

12:47.480 --> 12:50.240
So what is Correlizer doing?

12:50.240 --> 12:51.360
As you can see, it's really quick

12:51.360 --> 12:53.200
because my program is really small.

12:53.200 --> 12:56.840
But if you have some more complex program,

12:56.840 --> 12:58.680
if you try to cross compile,

12:58.680 --> 13:01.480
it's going to take obviously more time.

13:01.480 --> 13:06.480
So Correlizer detected our version with the Git tag.

13:06.640 --> 13:11.640
It ran the, the gomotid with the before hooks.

13:12.200 --> 13:15.200
And then it cross compiled our binary

13:15.360 --> 13:18.640
in on four different targets

13:18.640 --> 13:21.320
just by adding a few lines in my YAML.

13:22.280 --> 13:23.120
Okay.

13:23.120 --> 13:25.200
And just to show you that I haven't cheated,

13:25.200 --> 13:28.860
we are going to try to run it once again

13:28.860 --> 13:32.120
because I never tire of hairdresser jokes.

13:34.920 --> 13:36.280
Okay.

13:36.280 --> 13:39.040
Imaginaire artistif.

13:39.040 --> 13:39.880
Real funny.

13:40.600 --> 13:41.800
Okay.

13:41.800 --> 13:42.720
Okay. So cool.

13:42.720 --> 13:47.720
So now we have something that helps us build software,

13:49.600 --> 13:50.880
but can we do more?

13:50.880 --> 13:52.120
Obviously, yes.

13:52.120 --> 13:55.520
Or else I wouldn't have been selected to talk,

13:55.520 --> 13:56.680
to talk to you today.

13:58.680 --> 14:01.200
So I'm, I have some time left,

14:01.200 --> 14:04.320
but I'm not going to be able to show you step by step.

14:04.320 --> 14:09.320
So I'm going to cheat and take the final configuration file

14:10.800 --> 14:12.520
with all I want to show you.

14:12.520 --> 14:14.640
Just bear with me one second.

14:14.640 --> 14:16.800
I'm just going to modify one or two things.

14:16.800 --> 14:20.520
And then I'm going to say what I'm doing.

14:24.280 --> 14:25.120
Okay.

14:26.200 --> 14:27.040
So,

14:28.800 --> 14:32.600
so here I'm going to tag and push my code

14:32.600 --> 14:34.600
with one little script.

14:36.160 --> 14:38.280
Okay. So what did I change?

14:39.280 --> 14:41.720
So we were there.

14:41.720 --> 14:45.720
So we had my binary and the version.

14:45.720 --> 14:46.640
Okay.

14:46.640 --> 14:49.800
I added one section, which is called archives.

14:49.800 --> 14:53.920
Archives is going to make archives for us.

14:54.880 --> 14:57.320
And we are going to add overrides

14:57.320 --> 14:59.480
because it's possible to override the most,

14:59.480 --> 15:04.080
most functions in Gorillazer for specific arch.

15:04.080 --> 15:07.320
Obviously in Windows, you don't usually,

15:07.320 --> 15:11.800
don't always have something to open our GZ files.

15:11.800 --> 15:14.120
So for Windows, I'm going to override

15:14.120 --> 15:15.560
and put a zip instead.

15:17.080 --> 15:22.080
If you are working in regulated environments, sorry,

15:22.760 --> 15:24.840
you probably will want to have a software

15:24.840 --> 15:27.200
bill of material, S-BOM.

15:27.200 --> 15:30.880
So Gorillazer is going to be able to create

15:30.880 --> 15:33.320
SIFT S-BOMs for you.

15:34.120 --> 15:37.640
You are going to want to check some everything.

15:39.200 --> 15:41.360
And then you are going to want to be able

15:41.360 --> 15:43.080
to create Docker images.

15:43.080 --> 15:47.600
Here I use buildx to cross compile my image.

15:47.600 --> 15:52.240
So here I'm compiling it for Linux, AMD64.

15:52.240 --> 15:55.960
I'm going to push it to GitLab registry.

15:57.600 --> 15:59.720
Oh, I forgot to show you here.

15:59.720 --> 16:01.720
I'm using another variable,

16:01.720 --> 16:04.040
which is a project name,

16:04.040 --> 16:07.040
which is all automatically created by Gorillazer

16:07.040 --> 16:11.120
and it's going to help us to reuse our Gorillazer files

16:11.120 --> 16:12.260
between projects.

16:13.800 --> 16:16.320
I can use the version here as well.

16:16.320 --> 16:18.440
Okay, and last but not least,

16:18.440 --> 16:21.600
I'm going to run an announce on Mastodon

16:21.600 --> 16:25.120
to tell the world about my awesome new version

16:25.120 --> 16:25.960
of my software.

16:27.520 --> 16:28.880
Okay.

16:28.880 --> 16:31.720
And I'm not going to do it on my laptop.

16:31.720 --> 16:34.240
In fact, it's already run on GitLab

16:34.240 --> 16:38.560
because I have a GitLab CI running configured

16:38.560 --> 16:40.000
that I haven't showed you.

16:41.520 --> 16:45.520
So here the GitLab CI YAML file just runs

16:46.520 --> 16:48.240
a Docker image of Gorillazer

16:48.240 --> 16:52.440
with the correct environment, variable and secrets.

16:52.440 --> 16:54.740
And does the build for me.

16:55.620 --> 16:56.460
Okay.

16:56.460 --> 16:57.660
Okay, okay, okay.

16:59.660 --> 17:03.660
Oh, and I also modified the Docker file

17:03.660 --> 17:07.260
because I don't need the builder step,

17:07.260 --> 17:09.380
the multistake build because that's Gorillazer

17:09.380 --> 17:11.340
that does it for me as well.

17:12.500 --> 17:15.460
Okay, so now is the time.

17:15.460 --> 17:18.420
I'm really afraid that the demo failed.

17:19.420 --> 17:22.380
So I'm going to check if my job launched correctly

17:22.380 --> 17:23.460
and if it worked.

17:25.740 --> 17:27.460
Oh, it's still running.

17:27.460 --> 17:29.940
Okay, let's try to see.

17:29.940 --> 17:32.940
Let's try to see if it's running correctly.

17:36.140 --> 17:36.980
Okay.

17:38.740 --> 17:39.900
It looks promising.

17:40.980 --> 17:45.980
So the GitLab CI has detected

17:45.980 --> 17:48.980
that I pushed a new tag, the 0.0.2.

17:49.940 --> 17:52.820
It launched an image, Gorillazer.

17:55.060 --> 17:58.180
It has detected that my tag is 0.0.2

17:59.300 --> 18:01.540
has run the Gomad tidy,

18:01.540 --> 18:05.740
has built my software in many OSes and many architectures

18:05.740 --> 18:09.740
because I have not explicitly told it which one I wanted.

18:09.740 --> 18:13.320
So by default, it does it on like eight targets.

18:14.740 --> 18:18.020
We can also see that it has created archives

18:19.540 --> 18:22.740
and Sbombs for each.

18:23.740 --> 18:27.180
It has created two Docker images.

18:28.780 --> 18:31.420
Someone has seen my student post

18:32.140 --> 18:35.740
and pushed them to the GitLab registry.

18:35.740 --> 18:40.740
And then it has uploaded all the artifacts, sorry,

18:44.500 --> 18:48.700
to the GitLab.

18:49.900 --> 18:50.900
Okay.

18:50.900 --> 18:52.020
And last but not least,

18:52.020 --> 18:54.500
we are going to check on Mastodon if something happened.

18:54.500 --> 18:57.140
But as I can see, I already have some messages

18:57.140 --> 18:58.500
telling me that it's okay.

19:00.140 --> 19:02.140
So if I click on the link,

19:02.140 --> 19:05.060
I'm redirected to my release page

19:05.060 --> 19:08.040
which has been created for me,

19:08.040 --> 19:11.460
containing the various assets,

19:14.660 --> 19:19.420
the change log with all the commits on this release.

19:21.380 --> 19:23.180
And if I try to take a look,

19:24.180 --> 19:25.860
I'm not going to open the binaries

19:25.860 --> 19:28.380
because obviously it works.

19:28.380 --> 19:31.580
If I take a look at the package registry,

19:32.380 --> 19:35.060
no, the container registry, sorry.

19:37.460 --> 19:38.300
Okay.

19:38.300 --> 19:40.620
We can see that we have the Docker images

19:40.620 --> 19:44.060
and they have been created two minutes ago

19:44.060 --> 19:45.660
so I haven't cheated.

19:47.660 --> 19:49.300
Okay, great.

19:49.300 --> 19:50.460
So the demo works.

19:51.900 --> 19:54.140
Okay.

19:54.140 --> 19:59.140
So I was a bit stressed so I spoke really fast.

20:01.820 --> 20:03.980
But what I wanted to show you today

20:03.980 --> 20:06.140
and I hope you are convinced

20:06.140 --> 20:09.300
is that GoReleaser is an awesome tool.

20:09.300 --> 20:11.220
You can do cross-compilation,

20:11.220 --> 20:12.900
you can do Docker images,

20:12.900 --> 20:17.180
you can do signature and checksoming GitLab releases,

20:17.180 --> 20:18.820
you can post on social media

20:18.820 --> 20:21.180
or other communication channels.

20:21.180 --> 20:22.460
There are many more options

20:22.460 --> 20:25.100
that I haven't even all explored.

20:27.140 --> 20:30.340
Obviously you could have done that with a make file

20:30.340 --> 20:32.100
or just in file or so on

20:32.100 --> 20:37.100
but you have to create most of the steps by yourself.

20:38.180 --> 20:40.820
And I think there's nothing wrong

20:40.820 --> 20:45.040
in leveraging the work of someone else to do it for you.

20:46.040 --> 20:48.040
That's it for me.

20:48.040 --> 20:51.400
You can leave me some comments

20:51.400 --> 20:54.800
and tell me if I was good

20:54.800 --> 20:58.920
or if you will learn something using the QR code.

20:58.920 --> 21:01.100
And thanks everyone.

21:01.100 --> 21:06.100
.(audience applauding and cheering loudly.)

21:11.400 --> 21:12.520
If you have any questions,

21:12.520 --> 21:15.280
I'm not sure I will be able to answer all.

21:17.160 --> 21:19.520
I'll come hand you the microphone real quickly.

21:20.720 --> 21:22.240
No difficult questions please.

21:22.240 --> 21:23.080
Thank you.

21:27.480 --> 21:29.480
Thank you for the talk and for the tool.

21:30.480 --> 21:31.320
My question is,

21:31.320 --> 21:34.360
is there a possibility to remove in Go project

21:34.360 --> 21:35.800
from the title?

21:35.800 --> 21:40.920
I mean, is it possible to make the tool not,

21:40.920 --> 21:44.160
so Go oriented let's say?

21:44.160 --> 21:46.160
Because I see there is a potential for it

21:46.160 --> 21:48.520
to be like a structure for something bigger

21:48.520 --> 21:49.840
or generic let's say.

21:49.840 --> 21:50.680
Yes, okay.

21:50.680 --> 21:51.520
That's the word I want to say.

21:51.520 --> 21:52.360
Okay, I get it.

21:52.360 --> 21:53.400
But good stuff anyway.

21:53.400 --> 21:58.400
So you, it's really Go oriented.

21:58.540 --> 22:01.660
You can't cheat because there is an option

22:01.660 --> 22:06.500
to change the binary used to compile it

22:06.500 --> 22:11.500
but it's really hacking the tool.

22:11.660 --> 22:13.980
In fact, I use it as well for,

22:13.980 --> 22:16.300
with in conjunction of another tool

22:16.300 --> 22:17.420
which is called FINE,

22:17.420 --> 22:22.420
FINE which is a tool that helps create UIs with Go,

22:23.940 --> 22:25.860
FINE, F, Y, N, E.

22:26.980 --> 22:30.580
And FINE has its own cross builder,

22:30.580 --> 22:31.660
cross platform builder.

22:31.660 --> 22:34.740
And I try to make them work together.

22:34.740 --> 22:37.180
And it was a bit like, okay,

22:37.180 --> 22:40.660
I add some scripts and put some glue to make it work.

22:40.660 --> 22:43.060
So it's going to work much better

22:43.060 --> 22:45.460
in a fully Go environment.

22:49.700 --> 22:51.980
Any more questions?

22:53.020 --> 22:53.860
Right in front.

22:55.660 --> 22:57.380
Thanks, I think you forgot to mention

22:57.380 --> 22:58.780
the limitations of Go release.

22:58.780 --> 23:02.660
As I remember, it doesn't support in open source version

23:02.660 --> 23:06.100
that multiple projects built in one repo.

23:06.100 --> 23:07.940
So I'm sorry, I didn't hear?

23:07.940 --> 23:09.500
So basically Go release doesn't support

23:09.500 --> 23:10.660
in open source version,

23:10.660 --> 23:13.960
release of multiple binaries from one repo.

23:15.580 --> 23:18.820
Okay, I don't know the answer, but okay.

23:18.820 --> 23:20.300
Thanks for the...

23:21.540 --> 23:23.620
We can't know everything.

23:23.620 --> 23:25.460
Is that a wave for...

23:25.460 --> 23:26.540
I need a mic.

23:26.540 --> 23:28.620
I can ask my question this way.

23:28.620 --> 23:30.740
Okay, but I will have to repeat it.

23:30.740 --> 23:31.660
Excellent.

23:31.660 --> 23:34.060
So, great work on Go release there.

23:34.060 --> 23:37.420
My question is, what about using it for things

23:37.420 --> 23:38.660
that are Go based,

23:38.660 --> 23:41.100
that have a more complex compilation tool

23:41.100 --> 23:43.660
in things like C.Ga?

23:43.660 --> 23:47.660
I know that Go STL is using Go release now.

23:49.780 --> 23:51.780
Did you comment on this?

23:52.780 --> 23:54.060
Is this an idea?

23:54.060 --> 23:55.100
No, I'm not sure.

23:55.100 --> 23:56.100
Can you repeat the question?

23:56.100 --> 23:56.940
Okay.

23:56.940 --> 23:58.260
I can repeat if you want.

23:58.260 --> 23:59.100
Yeah, okay.

23:59.100 --> 24:02.180
Can you use Go release for very much complex

24:02.180 --> 24:05.940
Go project, Sdl and C.Ga?

24:05.940 --> 24:10.220
Well, I have not worked on a very complex Go project yet.

24:12.580 --> 24:15.300
But it would...

24:15.300 --> 24:17.540
Obviously there are limitations

24:17.540 --> 24:21.820
and it's going to sometimes be hard

24:21.820 --> 24:23.780
to glue things together.

24:23.780 --> 24:26.180
But for small to medium project,

24:26.180 --> 24:27.540
I think it's an awesome tool.

24:30.100 --> 24:30.940
Thank you.

24:30.940 --> 24:32.380
Another round of applause.

