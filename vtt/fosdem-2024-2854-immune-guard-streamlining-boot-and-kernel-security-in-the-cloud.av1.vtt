WEBVTT

00:00.000 --> 00:10.000
I'm here today to represent a completely different talk normally from Firmware.

00:10.000 --> 00:14.600
I mean, I'm probably some people know me from the Firmware world, so I did a lot of open

00:14.600 --> 00:16.160
source Firmware stuff.

00:16.160 --> 00:21.560
But like there was another topic on the CFP was TPM in attestation and I thought like,

00:21.560 --> 00:26.680
okay, we had to start up for three years, it failed, but we built an attestation product.

00:26.680 --> 00:29.600
So I thought like, okay, let's make it open source.

00:29.600 --> 00:32.360
So my co-founder Kai is here as well.

00:32.360 --> 00:36.200
And so we thought like we just make it public and probably also like integrated and some

00:36.200 --> 00:37.200
other stuff.

00:37.200 --> 00:40.240
So I'm giving today a presentation about it.

00:40.240 --> 00:44.800
I first thought I give you a lot of insights and architectural information, but we worked

00:44.800 --> 00:46.840
with three people on that for three years.

00:46.840 --> 00:48.520
Yes, plenty of code.

00:48.520 --> 00:51.600
So I decided not to use that.

00:51.600 --> 00:53.760
So I just give you today a high level overview.

00:53.760 --> 00:57.760
But if you're interested, you can just go to GitHub and look at the project.

00:57.760 --> 01:02.520
So yeah, streamlining boot and kernel security in the cloud is basically the topic I hope.

01:02.520 --> 01:05.120
Oh, sorry, I hope it works.

01:05.120 --> 01:06.120
Sorry.

01:06.120 --> 01:07.200
Ah, no, it works.

01:07.200 --> 01:08.200
So who I am.

01:08.200 --> 01:10.320
Yeah, I'm now a consultant.

01:10.320 --> 01:14.800
I'm doing a lot of firmware and like firmware security and trusted computing stuff.

01:14.800 --> 01:16.880
I also did a lot of open source firmware.

01:16.880 --> 01:19.160
Can see me with some Facebook servers there.

01:19.160 --> 01:20.160
I'm holding.

01:20.160 --> 01:25.160
Yeah, and I did a three year startup journey at Immune that was unfortunately directly

01:25.160 --> 01:27.000
in COVID.

01:27.000 --> 01:32.320
And so that wasn't that great, but I can share some information about the journey in terms

01:32.320 --> 01:35.360
of attestation and TPMs.

01:35.360 --> 01:39.320
And we also like have a booth at open source, you know, foundation booth at K2.

01:39.320 --> 01:42.600
So if you want to come over to talk a bit more, I would just leave after this to just

01:42.600 --> 01:44.080
go to the booth to talk to the people.

01:44.080 --> 01:45.080
So feel free.

01:45.080 --> 01:47.320
I worked a lot of open source projects.

01:47.320 --> 01:48.320
Yeah.

01:48.320 --> 01:51.200
So the story at all in total is that we had the startup.

01:51.200 --> 01:54.560
We built a SAS product like like all these startups do, right?

01:54.560 --> 01:59.880
And so the idea was basically you do endpoint security with this product.

01:59.880 --> 02:04.720
And what we wanted to achieve is basically one secure endpoint systems like Linux, Windows

02:04.720 --> 02:11.400
systems securing them with an additional layer of security for specific type of attacks.

02:11.400 --> 02:13.040
So that was our goal.

02:13.040 --> 02:17.880
And it should like be integrated with the standard endpoint protection mechanism of nowadays

02:17.880 --> 02:23.520
like most of the Windows guys probably use endpoint protection like antivirus, what Windows

02:23.640 --> 02:25.720
defender, whatever is built in.

02:25.720 --> 02:30.200
But the Linux guys for sure have also other stuff like integrity measurement architecture,

02:30.200 --> 02:31.680
it's more open things.

02:31.680 --> 02:32.680
And so that's great.

02:32.680 --> 02:37.960
So we built this type of SAS, which gives you observability.

02:37.960 --> 02:39.440
And yeah, what does it do?

02:39.440 --> 02:43.720
Yeah, basically it protects everything from the power on over the security configuration

02:43.720 --> 02:45.120
over the firmware itself.

02:45.120 --> 02:48.560
So there we come back to the firmware topic.

02:48.560 --> 02:53.240
We also protect the boot loader, the operating system and the drivers.

02:53.280 --> 02:56.000
And we also protect the endpoint protection or EDR.

02:56.000 --> 03:00.440
That's really business words, but let's say you can have that on Linux with open source

03:00.440 --> 03:01.440
stuff.

03:01.440 --> 03:04.920
So that's what is possible.

03:04.920 --> 03:11.520
So if you ask Chattivity nowadays, what does the malware first do if you have a system

03:11.520 --> 03:16.840
and it invades the system through an exploit or whatever, it will basically try to hide

03:16.840 --> 03:21.040
itself if possible from the antivirus or whatever kind of detection software protection

03:21.040 --> 03:25.160
software is there, or it will try to disable the antivirus.

03:25.160 --> 03:26.760
So that is the most common thing.

03:26.760 --> 03:32.360
So nowadays they really kill off all this snake oil stuff.

03:32.360 --> 03:37.960
And so what we try to build is something much better than that.

03:37.960 --> 03:40.840
So for that we can look at the problem at the moment.

03:40.840 --> 03:46.680
So there were a lot of attacks in the 2000, 2016, which basically targeted apps and a

03:46.680 --> 03:48.280
little bit of hypervisor.

03:48.280 --> 03:51.840
But nowadays the attacks going to more into the firmware direction.

03:51.840 --> 03:58.560
And the reason for that is basically that there is a lot of growth inside the firmware

03:58.560 --> 03:59.560
ecosystem.

03:59.560 --> 04:06.520
So for example, we had in 2000, I think 32 kilobytes or 64 kilobytes of firmware, probably

04:06.520 --> 04:08.720
a little bit more on some systems.

04:08.720 --> 04:11.040
But nowadays we have 64 megabytes on a laptop.

04:11.040 --> 04:15.560
This laptop probably comes with still 32, but the newer one and there's other Thunderbolt

04:15.560 --> 04:17.600
firmware and other of other things.

04:17.600 --> 04:21.520
There's tons of attack surface on the firmware level now.

04:21.520 --> 04:26.320
And so that means companies like Dell start to make cloud services for their BIOS.

04:26.320 --> 04:29.120
So they attach the BIOS to the cloud.

04:29.120 --> 04:31.080
And that was quite prominent.

04:31.080 --> 04:34.400
It was, I think, in 2021 summer.

04:34.400 --> 04:40.760
And it was super fun because what basically happened here is that they had a TLS connection

04:40.760 --> 04:43.560
into the FI itself.

04:43.560 --> 04:48.000
And the certificate, the PKI was broken for whatever that was like a bug.

04:48.000 --> 04:53.040
So you could basically hijack 30 million devices over the internet.

04:53.040 --> 04:54.480
That's kind of funny.

04:54.480 --> 04:58.360
And the funny part is if you do that over the firmware, you have full access on everything.

04:58.360 --> 05:02.400
No hypervisor, no antivirus, nothing will protect you from that.

05:02.400 --> 05:04.920
So that's really crazy.

05:04.920 --> 05:07.000
And I mean, this you have also on Linux systems.

05:07.000 --> 05:08.680
It's not like it's disabled.

05:08.680 --> 05:09.680
It's there.

05:09.680 --> 05:10.800
You just don't know.

05:10.800 --> 05:15.440
And so we thought we need to close somehow the security gap from hardware firmware to

05:15.440 --> 05:17.720
hypervisor operating system core.

05:17.720 --> 05:22.400
Because apps protected nowadays with tons of security mechanism in Linux as well to do

05:22.400 --> 05:24.480
that even if you use proprietary software.

05:24.480 --> 05:28.160
You can just do open source things to do that.

05:28.160 --> 05:31.960
You can just go to any security conference for Linux and check that out.

05:31.960 --> 05:32.960
But that's easy.

05:32.960 --> 05:33.960
It's already solved.

05:33.960 --> 05:35.480
It's starting to get solved.

05:35.480 --> 05:36.840
This is like, that's easy.

05:36.840 --> 05:39.040
So we try to do the hard thing.

05:39.040 --> 05:40.760
So how do we do that securely?

05:40.760 --> 05:44.960
How do we really make sure that the attacker is not disabling us, right?

05:44.960 --> 05:49.080
Because it didn't disable any other type of antivirus.

05:49.080 --> 05:53.760
So what we try to do then is we want to use the security chip.

05:53.760 --> 05:58.600
So there are a lot of security chip nowadays out there, especially in the server ecosystem,

05:58.600 --> 06:01.080
but also on laptops like these ones.

06:01.080 --> 06:05.520
Either they are in firmware or they are in real dedicated hardware.

06:05.520 --> 06:08.000
Or they come as part of the system on ship.

06:08.000 --> 06:10.160
So the processor itself.

06:10.160 --> 06:14.360
And the most prominent one is the TPM2, which is now everywhere in every laptop.

06:14.360 --> 06:16.800
So probably every one of you has at least the TPM2.

06:16.800 --> 06:20.400
Or if you have a MacBook, you have a security chip, it's not the TPM, but there's a chip

06:20.400 --> 06:21.400
security chip.

06:21.400 --> 06:23.880
So everything is there.

06:23.880 --> 06:26.880
And so we have that TPM stuff quite long.

06:26.880 --> 06:27.880
It's everywhere.

06:27.880 --> 06:31.360
You can also have that in data center devices.

06:31.360 --> 06:36.320
And so what we did now is basically we built a product where you have like as us, you have

06:36.320 --> 06:39.960
the security operation center and they do insight and remediation.

06:39.960 --> 06:41.400
And then you have the employee laptops.

06:41.400 --> 06:46.240
I mean, in the open source world, you probably have like your own fleet you want to manage,

06:46.240 --> 06:49.880
and then you have like some kind of monitoring tool, a monitoring system which tells you

06:49.880 --> 06:52.960
what's going on and then you can act if something happens on your system.

06:52.960 --> 06:55.440
That's what you want to do because you never know what happens.

06:55.440 --> 06:57.800
Because there can be vulnerabilities you don't know.

06:57.800 --> 07:02.880
They're all talking about risk mitigation, but the reality is even with all the known

07:02.880 --> 07:05.080
risk, there are tons of unknown risk.

07:05.080 --> 07:07.920
So this is difficult.

07:07.920 --> 07:09.800
So how do we do that in detail?

07:09.800 --> 07:13.760
I try to not to explain it too deep completely.

07:13.760 --> 07:15.480
So what we use is the TPM chip.

07:15.480 --> 07:18.160
It has a secure credential storage.

07:18.160 --> 07:22.240
It's basically on the most of the devices and we do remote attestation.

07:22.240 --> 07:28.600
Remote attestation is basically the idea of asking the TPM chip, give me the state of

07:28.600 --> 07:30.040
this platform.

07:30.040 --> 07:31.040
And that's what we're doing.

07:31.040 --> 07:36.080
So we ask the TPM chip, give me the state of the platform and thanks to the current

07:36.080 --> 07:41.240
situation in the firmware world, it gives you the state of the platform in a specific

07:41.240 --> 07:47.920
type of let's say artificial binary blob which is signed, which is publicly parsable.

07:47.920 --> 07:49.400
You can write a parser for that.

07:49.400 --> 07:51.280
There are tons of parsers out there already.

07:51.280 --> 07:52.600
And it's signed.

07:52.600 --> 07:54.080
It has the timestamp and the nonce.

07:54.080 --> 07:59.520
It has all the hashes of the executed code down to the, at the moment for Linux, it's

07:59.520 --> 08:01.880
down to the Linux kernel.

08:01.880 --> 08:06.080
And from there, if you start the integrity measurement architecture, they are like, it's

08:06.080 --> 08:07.400
enabled in all distros.

08:07.400 --> 08:10.840
You can just enable that and it hashes everything which has been executed.

08:10.840 --> 08:13.800
You can also write a policy for that technology stack.

08:13.800 --> 08:16.560
It's more like an endpoint protection replacement for Linux.

08:16.560 --> 08:17.840
So it's kind of super interesting.

08:17.840 --> 08:18.840
Most people don't know.

08:18.840 --> 08:22.520
There you Ubuntu, Fedora, whatever is able to do that.

08:22.520 --> 08:27.160
You just need to place a configuration thanks to system D and Linux.

08:27.160 --> 08:29.120
For doing that, so super easy.

08:29.120 --> 08:34.560
Anyway, and so what we do then is we gaze all this information with the open source

08:34.560 --> 08:35.560
tool.

08:35.560 --> 08:40.440
This open source tool is basically gazing information, putting that into the attestation,

08:40.440 --> 08:42.440
signing everything, making everything super secure.

08:42.440 --> 08:46.920
You can even bind the TLS keys for the encryption and everything to the TPM.

08:46.920 --> 08:50.080
So it basically is secured also over the TPM.

08:50.080 --> 08:52.040
So everything is clear.

08:52.040 --> 08:53.040
It's also clear.

08:53.040 --> 08:54.800
The platform is identifiable.

08:54.800 --> 08:59.080
And then we send everything back to the cloud and do our crazy cloud analysis with our

08:59.080 --> 09:00.040
check engine.

09:00.040 --> 09:01.280
That's what we basically do.

09:01.280 --> 09:05.040
Quite similar to a normal endpoint protection, except that we do tofu.

09:05.040 --> 09:11.120
We don't do like what they do is like they try to find specific patterns for more.

09:11.120 --> 09:19.200
What we do is we check if this is a legumintate action by having smart decision tree to say,

09:19.200 --> 09:24.080
okay, this change in array where we know this can be secure.

09:24.080 --> 09:27.800
And thanks to this architecture is quite fine granular.

09:27.800 --> 09:31.560
That means we can do it quite deep and in a good way.

09:31.560 --> 09:34.920
So how does it look like?

09:34.920 --> 09:40.200
So if you run our software, you can find now on GitHub, you basically have a dashboard.

09:40.200 --> 09:42.360
It looks like that with all the risk and incidents.

09:42.360 --> 09:45.960
This is all like more business like, but we sort like customer wants to buy it, right?

09:45.960 --> 09:50.120
It needs to look like shiny, not like there's another project called KeyLime.

09:50.120 --> 09:51.120
It's also nice.

09:51.120 --> 09:56.080
They are more focused on container for attestation, but they do it with less good UI stuff.

09:56.080 --> 10:02.760
So we try to have a really big focus on UI and that was kind of super important for us.

10:02.760 --> 10:06.720
And so what we built in as key features is basically the secure device identification.

10:06.720 --> 10:09.240
We can identify the device securely.

10:09.240 --> 10:12.040
We know the integrity of all the software components.

10:12.040 --> 10:16.680
We execute until the endpoint protection or the kernel takes off with that drivers.

10:16.680 --> 10:21.600
And we have also the secure monitoring which runs all the time, right, remotely.

10:21.600 --> 10:28.120
And you can just like build that into your data center operation or whatever.

10:28.120 --> 10:31.000
You can even do it on endpoint operation.

10:31.000 --> 10:36.320
And so additionally to that, we gained storing credentials in HATRA and the trust income.

10:36.320 --> 10:42.760
You can additionally, we didn't do that, but you can also like push credentials to the platform for VPN and other stuff.

10:42.760 --> 10:45.480
That would be the next step in the future.

10:45.480 --> 10:48.520
And also access revocation by incident.

10:48.520 --> 10:52.680
So then you can, okay, 10 minutes left, but I'm already quite far.

10:52.680 --> 10:57.960
So yeah, the incidents, if you run the system because it's super complex,

10:57.960 --> 11:02.600
that's why I didn't want to explain it in detail because it's like a lot of code and everything.

11:02.600 --> 11:07.160
It's basically giving a list of incidents on multiple affected devices.

11:07.160 --> 11:09.400
And there you can see specific type of incidents.

11:09.400 --> 11:12.600
It has documentation for all this type of incidents.

11:12.600 --> 11:14.040
You can check it out.

11:14.040 --> 11:15.040
You can extend it.

11:15.040 --> 11:16.680
You can improve it, whatever.

11:16.680 --> 11:19.720
If you want to work with a project, it's super.

11:19.720 --> 11:22.120
We are quite open for contributions.

11:22.120 --> 11:32.960
So and it has also an extended feature list, which is quite, yeah, let's say it was quite experimenterial because we are start-ups.

11:32.960 --> 11:33.960
So we tried out a lot.

11:33.960 --> 11:35.760
So we added entity to support.

11:35.760 --> 11:41.400
This is for, so in order to make really that the firmware is coming from the vendor,

11:41.400 --> 11:44.200
you can have some service from Intel to verify that.

11:44.200 --> 11:46.200
And we added the service that's there.

11:46.200 --> 11:49.200
And then there's, finally, it's there famous for firmware vulnerabilities.

11:49.200 --> 11:51.200
We did the scan over the firmware as well.

11:51.200 --> 11:56.200
So we extracted the firmware from the system, put that in the data we sent to the, to the analyst system.

11:56.200 --> 11:59.200
And then we could also find their vulnerabilities and everything.

11:59.200 --> 12:08.200
We added LVFS integration, which was kind of nice because then you can check also for firmware which is there in LVFS and check if hashes matches up.

12:08.200 --> 12:13.200
And if it's the same, because the biggest problem of all this attestation story is basically the firmware.

12:13.200 --> 12:16.200
But still it's got much, much better than before years ago.

12:16.200 --> 12:17.200
I did it like 15 years ago.

12:17.200 --> 12:21.200
It was horrible because the firmware implementation were all buggy.

12:21.200 --> 12:22.200
And now we have UFI.

12:22.200 --> 12:27.200
I don't like it, but it's much better than what BIOS provides in terms of security.

12:27.200 --> 12:31.200
And so the hashes are somehow can be pre-calculated.

12:31.200 --> 12:34.200
You can evaluate them and say, okay, this change or that's changed, right?

12:34.200 --> 12:36.200
So that's the only important thing.

12:36.200 --> 12:41.200
You want to know what changed basically by seeing the hash and having additional information.

12:41.200 --> 12:43.200
We have built an engine for doing all this checks.

12:43.200 --> 12:45.200
This is like trust on first use.

12:45.200 --> 12:48.200
So the first time you install it, it's basically then trusted.

12:48.200 --> 12:52.200
And when something then changes, it's tried to automatically evaluate.

12:52.200 --> 12:56.200
This is like the PCS is a hashes basically platform configuration.

12:56.200 --> 13:05.200
We just check it up and looks and sees, okay, this change, for example, the bootloader changed and specifically the hash of the certificate changed.

13:05.200 --> 13:08.200
And we know, okay, this certificate changed.

13:08.200 --> 13:18.200
And this is normally a sign, for example, for an attack because if you have a bootloader and it's updated, it's super rare that the 10 years valid certificate changes, right?

13:18.200 --> 13:21.200
So you can add additional checks to the engine.

13:21.200 --> 13:23.200
You have also a wireless engine.

13:23.200 --> 13:31.200
So if something you won't really allow, you can just accept and then it's like, it's a trust-based then or the trusted computing-based.

13:31.200 --> 13:34.200
And we also have risk detection protected by the attestation.

13:34.200 --> 13:35.200
That's also part of it.

13:35.200 --> 13:40.200
And there's a nice view for incident-risk and device views.

13:40.200 --> 13:43.200
It looks like this for a single laptop.

13:43.200 --> 13:48.200
So you can see it, for example, for my Lenovo SyncPad X1 Carbon.

13:48.200 --> 13:54.200
And you can basically see what kind of device integrals stepped past and where it stopped.

13:54.200 --> 13:56.200
So that's what we did.

13:56.200 --> 14:03.200
So we could see from the supply chain to the device configuration overhost firmware bootloader operating system and to the endpoint protection.

14:03.200 --> 14:05.200
So you could directly see what's going on.

14:05.200 --> 14:12.200
And if you like, here you can see this in all the picture, but you basically could like open it up and then you see a lot of detail what happens there.

14:12.200 --> 14:17.200
So you can see, okay, this hash of this file changed with this certificate and whatever.

14:17.200 --> 14:19.200
And so you can investigate that.

14:19.200 --> 14:30.200
Additionally for security stuff, if someone just wants to use the code or get some insight, we opened up CME into CME measurements, which wasn't public yet.

14:30.200 --> 14:32.200
There's RIM certificate support.

14:32.200 --> 14:37.200
This is like for the TPM RIM certificate, for the supply chain security stuff.

14:37.200 --> 14:41.200
Current drivers for firmware extraction for Linux and Windows.

14:41.200 --> 14:48.200
Then we added IMA support similar to KeyLine and AZ support, as it's an antivirus.

14:48.200 --> 14:51.200
And for Windows, generic endpoint protection support.

14:51.200 --> 14:54.200
So you can also use it with any generic endpoint protection.

14:54.200 --> 14:57.200
Mostly we tested it on Windows Defender.

14:57.200 --> 15:00.200
We added Intel ME API support.

15:00.200 --> 15:02.200
It's like the management engine of Intel.

15:02.200 --> 15:05.200
We can talk with it and find a lot of information out there.

15:05.200 --> 15:06.200
It's super helpful.

15:06.200 --> 15:08.200
So if you need code there, just grab it.

15:08.200 --> 15:20.200
And we can also verify the TPM itself that is coming from the vendor and not like someone exchange the TPM or whatever and try to take the system.

15:20.200 --> 15:24.200
So you could download that for Ubuntu Fedora and generic Linux and Windows.

15:24.200 --> 15:27.200
And then there's an OS open source agent.

15:27.200 --> 15:31.200
It's more like a tool you can just install with the system descript.

15:31.200 --> 15:33.200
Execute that and this one gives us the data.

15:33.200 --> 15:39.200
It has really low memory footprint, so it just runs every one minute you can say and delivers the information.

15:39.200 --> 15:45.200
Push only to the system, which is kind of good because we don't have a back channel executing stuff on the system.

15:45.200 --> 15:47.200
There's another security hole.

15:47.200 --> 15:50.200
So it's super easy to use.

15:50.200 --> 15:53.200
Yeah, and that's also available.

15:53.200 --> 15:54.200
How long?

15:54.200 --> 15:55.200
Still five minutes?

15:55.200 --> 15:56.200
Okay.

15:56.200 --> 15:57.200
Thank you.

15:57.200 --> 15:59.200
And yeah, this is a repository.

15:59.200 --> 16:00.200
You can find it on GitHub.

16:00.200 --> 16:04.200
We probably move it maybe under another org or we maybe keep it.

16:04.200 --> 16:08.200
I'm not sure, but you can find it now there and feel free to check it out.

16:08.200 --> 16:10.200
This is BSC licensed.

16:10.200 --> 16:14.200
So everyone can use it and build also products from it.

16:14.200 --> 16:19.200
What I want to do the next few months is that I want to do more code cleanup.

16:19.200 --> 16:23.200
I've already thrown out a lot of stuff, but we still have some leftovers,

16:23.200 --> 16:28.200
especially for business features and so on for accounting and all this nonsense and no one needs.

16:28.200 --> 16:33.200
So I'm just ripping that out and adding CI support,

16:33.200 --> 16:38.200
pre-built releases for Windows and Linux so you can just install it directly on the system

16:38.200 --> 16:43.200
and ease up the deployment because currently it's there's an instruction to do so,

16:43.200 --> 16:47.200
but it's like super complicated stuff is Kubernetes and all those things.

16:47.200 --> 16:54.200
Maybe we can make it a little bit easier and there might be other features where we can integrate it directly into system D and other stuff.

16:54.200 --> 16:58.200
So yeah, that's basically the idea.

16:58.200 --> 16:59.200
And now I have a demo.

16:59.200 --> 17:01.200
I hope it works.

17:01.200 --> 17:05.200
Please work.

17:05.200 --> 17:09.200
So I can probably, can I?

17:09.200 --> 17:10.200
Yeah, we have.

17:10.200 --> 17:13.200
Can we make it with sound?

17:13.200 --> 17:14.200
No, I don't need.

17:14.200 --> 17:15.200
I explain.

17:15.200 --> 17:23.200
So this is Windows 11 with all security features on all this super crazy Windows 11 stuff you can know from Microsoft and their marketing.

17:23.200 --> 17:26.200
And then we are in our tool here, right?

17:26.200 --> 17:30.200
It's just like, it's a little bit like probably that could be also done better instead of tokens.

17:30.200 --> 17:43.200
But anyway, we just like bind this system to our system and it installs it and takes a while when it's done.

17:43.200 --> 17:44.200
Come on.

17:44.200 --> 17:45.200
Okay.

17:45.200 --> 17:49.200
So and then on some points the device shows up.

17:49.200 --> 17:50.200
It takes a while.

17:50.200 --> 17:55.200
But of course the engine needs to like analyze it and then it's trust on first use.

17:55.200 --> 17:58.200
Basically it's protected.

17:58.200 --> 18:01.200
And this demo is based on Black Lotus malware.

18:01.200 --> 18:03.200
So I got Black Lotus malware.

18:03.200 --> 18:05.200
So we won and tried it out.

18:05.200 --> 18:14.200
And the funny part is, so what you can see in a few minutes is basically that you install Black Lotus and Microsoft doesn't.

18:14.200 --> 18:17.200
So they know the signature because I didn't repackage it.

18:17.200 --> 18:19.200
So that's what you normally do with malware.

18:19.200 --> 18:22.200
So they can check the signature anymore.

18:22.200 --> 18:25.200
And so, but you can see that I execute the malware.

18:25.200 --> 18:31.200
Then the anti-rials saying, yeah, I know the signature because it's known, but this is quite easy to fix.

18:31.200 --> 18:39.200
But I didn't do that for the demo anyway, because I don't want to to mess around with packaging P32 binaries.

18:39.200 --> 18:44.200
Anyway, and then I just executed on the system.

18:44.200 --> 18:54.200
And what happens is that it over overwrites a bootloader which is before Windows and injects code into the kernel and turns off all security.

18:54.200 --> 19:00.200
But everything in terms of endpoint protection after the reboot tells you everything is fine.

19:00.200 --> 19:06.200
And if you looked in the detailed information, see all the security what they built is completely disabled.

19:06.200 --> 19:10.200
So that means attacks going into the deeper level are not covered by Windows.

19:10.200 --> 19:13.200
They cannot be protected with all their security stack.

19:13.200 --> 19:21.200
And so our system basically detected the malware, as you can see with the red information, the bootloader manipulated.

19:21.200 --> 19:25.200
And then it takes a while until Microsoft gets, I don't know what it does there.

19:25.200 --> 19:33.200
Like I'm a Linux user, but this thing shows in few seconds that everything in terms like secure.

19:33.200 --> 19:35.200
Oh yeah, now it shows nothing, right?

19:35.200 --> 19:39.200
And then you go to details like advanced protection or whatever.

19:39.200 --> 19:42.200
And then yeah, everything's turned off.

19:42.200 --> 19:44.200
So yeah, that's how it goes.

19:44.200 --> 19:47.200
That was my presentation.

19:47.200 --> 19:48.200
Thanks for listening.

19:48.200 --> 19:50.200
Oh yeah, say it's all I have to return to.

19:50.200 --> 19:53.200
But anyway, that's it.

20:00.200 --> 20:01.200
So any questions?

20:01.200 --> 20:03.200
I hope I have some time.

20:03.200 --> 20:05.200
Yeah.

20:05.200 --> 20:11.200
My question is you are mostly focused on malware type of attack.

20:11.200 --> 20:18.200
But could this software somehow prevent an attacker with a physical access?

20:18.200 --> 20:28.200
Like if someone manipulates my laptop, for example, if you could temporarily disconnect TPM in boot

20:28.200 --> 20:31.200
and you could install this malicious bootloader.

20:31.200 --> 20:36.200
So you disconnect the TPM, you boot the malicious code and then you submit all the right hashes.

20:36.200 --> 20:40.200
And you pretend TPM seems that it's a valid right.

20:40.200 --> 20:43.200
We cannot protect against bus attacks on the TPM.

20:43.200 --> 20:45.200
I mean, this is like hardware attacks.

20:45.200 --> 20:47.200
You cannot do anything against hardware attacks.

20:47.200 --> 20:49.200
There's no real security against hardware attacks.

20:49.200 --> 20:56.200
Even in a confidential computing environment, side channel attacks and what power glitching attacks and all this stuff is always possible.

20:56.200 --> 20:59.200
So we don't say we can protect against hardware attacks.

20:59.200 --> 21:04.200
We can probably detect like if you plug in in USB stick, right?

21:04.200 --> 21:09.200
If you try to execute something else or if you try to modify things on the system, that's what we can detect.

21:09.200 --> 21:15.200
But we are not like claiming that we can really do it low level on the bus system.

21:15.200 --> 21:20.200
I think you can provide that by there's like a way to authenticate the TPM.

21:20.200 --> 21:25.200
So you can have an authenticated session which is encrypted and then you cannot do this type of attack anymore.

21:25.200 --> 21:28.200
But that's what is currently missing.

21:28.200 --> 21:30.200
I think in the goal in TPM library.

21:30.200 --> 21:31.200
But yeah.

21:31.200 --> 21:32.200
And then Oscar.

21:32.200 --> 21:33.200
Yeah.

21:33.200 --> 21:36.200
Please repeat the questions because you know, oh yeah, sorry.

21:36.200 --> 21:37.200
I'm sorry.

21:37.200 --> 21:38.200
Yeah.

21:38.200 --> 21:39.200
Okay.

21:40.200 --> 21:47.200
So from your previous question, I think we can also protect from supply channel attacks.

21:47.200 --> 21:48.200
Right?

21:48.200 --> 21:49.200
We can.

21:49.200 --> 21:54.200
So what, so if you can, can we protect against supply channel attacks?

21:54.200 --> 22:00.200
We cannot completely protect against it, but we can probably detect modification on the firmware side.

22:00.200 --> 22:04.200
It's because there's also signature verification and this is all measured.

22:04.200 --> 22:05.200
So you can do that.

22:05.200 --> 22:12.200
What you can also do is to detect if the TPM is the same TPM and if it's really a TPM from the vendor.

22:12.200 --> 22:13.200
This is also possible.

22:13.200 --> 22:16.200
But yeah, sure, there are limitations in the threat model.

22:16.200 --> 22:18.200
But I think that's a good trade off.

22:18.200 --> 22:21.200
I mean, for me, it doesn't have to be perfectly secure.

22:21.200 --> 22:24.200
But yeah, probably we could extend it, make it better, improve it.

22:24.200 --> 22:26.200
But yeah, that's the current state.

22:27.200 --> 22:34.200
Yeah, some of these questions are like, security is a binary state.

22:34.200 --> 22:35.200
Security is not a binary state.

22:35.200 --> 22:45.200
It's a spectrum which we kind of travel and we can be either, and it depends how much we have, we can lose, how much we can pay for that, then that much we can do.

22:45.200 --> 22:46.200
Yeah.

22:46.200 --> 22:49.200
That's what I think also security is not a binary state.

22:49.200 --> 22:50.200
Not zero and one.

22:50.200 --> 22:53.200
It's somewhere in between, unfortunately.

22:53.200 --> 22:55.200
Yeah.

22:55.200 --> 22:56.200
I have a question.

22:56.200 --> 22:58.200
You mentioned your presentation here.

22:58.200 --> 23:02.200
Do you plan to cooperate with the TPM support?

23:02.200 --> 23:11.200
So if you can at the TPM support depends or if we cooperate with the TPM project depends on like, we are open source project, right?

23:11.200 --> 23:13.200
If we can like support that, why not?

23:13.200 --> 23:16.200
If someone makes a pull request, feel free to do so.

23:16.200 --> 23:18.200
We will just integrate it, right?

23:18.200 --> 23:20.200
So there's no reason why we shouldn't integrate that.

23:20.200 --> 23:25.200
I think I just want to have the three years of work we made, not completely a loss.

23:25.200 --> 23:31.200
So sure, probably it's not taking off as open source project, but that's always how it is.

23:31.200 --> 23:35.200
But we thought like it may help some people and give them some more insight what we did.

23:35.200 --> 23:40.200
And yeah, maybe they can reuse that for business or for personal reasons.

23:50.200 --> 24:04.200
So malicious agent attacks, this is a good question.

24:04.200 --> 24:11.200
So the problem is with the TPM, you cannot forge the stuff from the TPM itself.

24:11.200 --> 24:18.200
And since the quoted data basically has a nonce and timestamp and everything, you can forge it.

24:18.200 --> 24:21.200
That means the agent can definitely try to connect to our system,

24:21.200 --> 24:24.200
but if we don't get the blob, we don't talk with the agent anymore.

24:24.200 --> 24:28.200
So this is like, sure, you can say we don't talk back to the system.

24:28.200 --> 24:34.200
That's one option you just completely go silent, but we have for like a counter and there if it's 50-minute over whatever

24:34.200 --> 24:37.200
or like specific amount of time, it doesn't call back to us.

24:37.200 --> 24:39.200
Then we say the system is unknown state.

24:39.200 --> 24:44.200
So I mean, that's a trade off attestation, but I think it's fine.

24:45.200 --> 24:47.200
Yeah?

24:47.200 --> 24:50.200
If anyone is interested in TPM hardware attacks,

24:50.200 --> 24:53.200
stack smashing just post that thing doing that in like a minute,

24:53.200 --> 24:55.200
one of the actual carbon.

24:55.200 --> 25:00.200
So just put a snap for hardware on top of the TPM stuff and there you go.

25:00.200 --> 25:03.200
But yeah, part of the protect against it.

25:03.200 --> 25:06.200
Yeah.

25:06.200 --> 25:09.200
So we did it for more of their protection basically.

25:09.200 --> 25:11.200
That's software-based attacks mostly.

25:11.200 --> 25:16.200
But if you can detect it, at some point, and somebody is sniffing something,

25:16.200 --> 25:21.200
and you can somehow detect that, you can do something like wipe remotely or whatever, right?

25:21.200 --> 25:23.200
So all data doesn't bring up too much.

25:23.200 --> 25:25.200
Yeah. That's true.

25:25.200 --> 25:29.200
Especially with the carbon that automatically unbox.

25:29.200 --> 25:33.200
So that just happens because some other passions match,

25:33.200 --> 25:37.200
and then later you will be aware that we give you a scenario.

25:38.200 --> 25:43.200
Yeah. Any other question or anything we have done?

25:43.200 --> 25:46.200
I don't want to play more time here.

25:46.200 --> 25:48.200
Thank you very much.

