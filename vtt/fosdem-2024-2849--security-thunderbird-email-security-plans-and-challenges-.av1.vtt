WEBVTT

00:00.000 --> 00:12.720
So, welcome.

00:12.720 --> 00:13.840
My name is Kai Engert.

00:13.840 --> 00:19.200
I have been working with Mozilla and contributing to the Mozilla code since 2001, also including

00:19.200 --> 00:20.840
email.

00:20.840 --> 00:26.760
And I've been a full-time employee of Thunderbird since 2019.

00:26.760 --> 00:31.840
And today I want to talk about Thunderbird email security and some of the plans and challenges

00:31.840 --> 00:35.000
on that topic.

00:35.000 --> 00:38.440
We all know, yes, there are some creatures who could read our email.

00:38.440 --> 00:44.760
So, they sit on the service and some robots scanning some mass surveillance monsters and

00:44.760 --> 00:45.760
cybercriminals.

00:45.760 --> 00:47.280
Okay, we don't like that.

00:47.280 --> 00:52.360
So, the problem is that there is no protection while emails are stored on service.

00:52.360 --> 00:58.120
We do have some TLS transport security in the infrastructure, but it's not enforced.

00:58.120 --> 00:59.920
And it's...

00:59.920 --> 01:03.880
So I think we need more than TLS transport security.

01:03.880 --> 01:05.240
We heard about that earlier.

01:05.240 --> 01:12.320
Of course, we want and need end-to-end security for both encryption and digital signatures.

01:12.320 --> 01:16.280
So Thunderbird supports two separate technologies.

01:16.280 --> 01:17.840
There's been S-MIME.

01:17.840 --> 01:21.880
I've worked on that in 2001 before Thunderbird were born.

01:22.480 --> 01:26.280
And, yeah, we have...

01:26.280 --> 01:28.480
It's still supported.

01:28.480 --> 01:33.480
And we also have OpenPGP, which was previously supported using the Enigmail add-on, which

01:33.480 --> 01:40.640
is now fully integrated using an integrated code since 2020.

01:40.640 --> 01:44.680
I want to briefly mention some of the things we did in the recent past.

01:44.680 --> 01:51.040
We implemented unified status feedback so you get similar UI for both S-MIME and PGP

01:51.040 --> 01:53.160
emails when reading an email.

01:53.160 --> 01:59.280
When you compose an email, we also have some similar controls to enable or disable encryption.

01:59.280 --> 02:05.080
We have made it a bit easier to resolve the problem when you want to send an email, but

02:05.080 --> 02:07.560
you're missing the recipient's PGP key.

02:07.560 --> 02:12.960
So we have some interactive UI code to help you find the missing keys.

02:12.960 --> 02:16.000
We also added some reminders when you try to...

02:16.000 --> 02:22.880
When you start composing an email and Thunderbird detects that it can encrypt, then it will remind

02:22.880 --> 02:25.000
you if you want to enable it.

02:25.000 --> 02:32.600
And just most recently, in the new version from last summer, 115, we have added a long-ass

02:32.600 --> 02:38.120
feature which is you can tell Thunderbird optionally to please enable it automatically.

02:38.120 --> 02:40.600
If you see, we can encrypt just enable it.

02:40.600 --> 02:50.080
Some people have also asked to automatically disable it, but I think it's a necessity to

02:50.080 --> 02:55.720
pay attention so we have the option to have some warnings here shown to the user.

02:55.720 --> 03:02.120
So other things we did, activists asked for and people who are sharing their computers

03:02.120 --> 03:07.480
with others, they have asked that we do support some individual part phrase for the secret

03:07.480 --> 03:08.480
keys.

03:08.880 --> 03:09.880
We did that.

03:09.880 --> 03:11.880
There's some parts missing.

03:11.880 --> 03:15.240
We need to make it more convenient by adding a cache.

03:15.240 --> 03:23.720
We also implemented the auto-crypt compatible key distribution mechanism which simplifies

03:23.720 --> 03:30.960
group conversations by including all the keys of all participants of an email conversation

03:30.960 --> 03:32.560
that's called Gossip.

03:32.560 --> 03:34.040
We have that recently added.

03:34.280 --> 03:38.080
I think we will have it in the stable version soon also.

03:38.080 --> 03:42.600
And we added support of publishing keys to keysopentpgp.org.

03:42.600 --> 03:44.920
Let's look at the sum.

03:44.920 --> 03:51.760
I want to also mention a few general challenges that we've just recently seen.

03:51.760 --> 03:57.480
Since some providers now add fmime on the server-side infrastructure, we are now seeing

03:57.480 --> 03:59.920
messages coming up which mix two technologies.

03:59.920 --> 04:00.920
So people complain.

04:00.920 --> 04:07.160
They have a user has composed a pgp message to them and now the whole thing is suddenly

04:07.160 --> 04:10.080
wrapped in another fmime layer.

04:10.080 --> 04:14.720
And so that's a challenge for the user interface presentation, how you deal with that.

04:14.720 --> 04:21.880
What I have one idea is if it's just a signature layer out her most, maybe you just ignore

04:21.880 --> 04:24.520
that one, but I'm not sure it's the best solution.

04:24.520 --> 04:29.600
So we are still open for discussions if you have better ideas.

04:29.640 --> 04:36.480
So there was discussion, what should we do if a message arrives with a digital signature

04:36.480 --> 04:40.360
that we cannot completely validate as being good?

04:40.360 --> 04:41.360
What should we do?

04:41.360 --> 04:51.160
Currently, we do say, well, this has a bad signature, but some people say maybe that's

04:51.160 --> 04:53.000
not worth in a plain text email.

04:53.000 --> 04:57.080
Maybe we should just stop not showing any bad status at all and just treat it the same

04:57.080 --> 04:59.320
as a plain text email.

04:59.520 --> 05:05.120
So that's also a pending thing we should do because there was some agreement to do that

05:05.120 --> 05:10.600
in a recent pgp community meeting with other developers.

05:10.600 --> 05:18.520
And another big unresolved area is if you combine emails with digital signatures and

05:18.520 --> 05:25.120
where the content is nice and shiny with HTML and CSS, which many users want to have, the

05:25.120 --> 05:32.520
problem is that HTML can be used to manipulate what's shown on screen.

05:32.520 --> 05:39.240
So the sender of the email might have seen something different when composing than you

05:39.240 --> 05:40.840
as a reader see.

05:40.840 --> 05:43.520
So that can lead to confusion.

05:43.520 --> 05:45.200
Researchers have shown that.

05:45.200 --> 05:47.880
So what should we do about that?

05:47.880 --> 05:54.000
I don't have a good solution because nobody agreed to my suggestion to just revert to

05:54.000 --> 05:56.600
plain text whenever we have signatures.

05:56.600 --> 06:00.520
So but maybe we should show weaker signatures.

06:00.520 --> 06:02.160
I'm looking for ideas here.

06:02.160 --> 06:06.120
If you have ideas, please, please send them in.

06:06.120 --> 06:10.320
So now let's look at some more broader scale.

06:10.320 --> 06:18.520
We have the problem that only a small portion of all emails are using S My more pgp at all.

06:18.520 --> 06:23.760
They're not used much because there are barriers of entry to use them like Tobias presented.

06:23.760 --> 06:26.360
You have to get a third and it's difficult.

06:26.360 --> 06:28.880
And then when you have keys, it's complicated to manage.

06:28.880 --> 06:32.800
And using email encryption at all can have unexpected consequences.

06:32.800 --> 06:38.000
If you just set it up on one device, you have maybe a problem to access your encrypted email

06:38.000 --> 06:40.080
from a secondary device.

06:40.080 --> 06:42.480
Users can lose their secret keys.

06:42.480 --> 06:45.760
They will also lose to the archive of encrypted email.

06:45.760 --> 06:51.440
So I think it's still necessary to, we must involve the user.

06:51.440 --> 06:55.080
That means user must be willing to accept the consequences.

06:55.080 --> 07:00.640
Also user must be willing to take care of the secret key file or lose their archive.

07:00.640 --> 07:02.040
So what should we do?

07:02.040 --> 07:07.520
How could we get more people, many more people to use email encryption and signature?

07:07.520 --> 07:13.080
I think fully automatism is not possible because we have an heterogeneous ecosystem and we

07:13.080 --> 07:15.600
need the user to be involved.

07:15.600 --> 07:19.240
That means I think that we must better assist users.

07:19.240 --> 07:23.120
And that leads me to the question, which technology is easier to use?

07:23.120 --> 07:30.960
The past five years, Thunderbird Focus was open PGP in that area because it was necessary

07:30.960 --> 07:35.320
because we had to integrate it to ensure it's still usable.

07:35.320 --> 07:42.400
But now the question is, is that still a good idea to continue to focus on PGP?

07:42.400 --> 07:52.400
As we heard from Daniel, there is currently some, there are currently some disagreements.

07:52.400 --> 07:57.000
What's the future of PGP should look like?

07:57.000 --> 08:01.600
Daniel has presented a very optimistic outlook for the future.

08:01.600 --> 08:06.280
And I agree, many of the things he said would be nice and great to do.

08:06.280 --> 08:14.080
But we have the problem that there is a group of PGP in the ecosystem which is difficult

08:14.080 --> 08:16.480
to ignore.

08:16.480 --> 08:24.400
So I'm, and that's the problem because they are, Daniel suggested maybe everyone should

08:24.400 --> 08:25.400
do both.

08:25.400 --> 08:33.960
But well, that would also require that client applications support both keys from both specifications.

08:33.960 --> 08:38.160
And I see that as a big complication for users to have to manage different keys for

08:38.160 --> 08:39.960
different recipients.

08:39.960 --> 08:45.160
And I have suggested, I've tried to bring the group together with many discussions and

08:45.160 --> 08:48.760
I've suggested even introducing a common key format.

08:48.760 --> 08:52.080
But there have been no positive reactions from that.

08:52.080 --> 08:59.800
Well, from the IETF side, I usually get lots of good ideas and willingness to discuss.

08:59.800 --> 09:08.560
But both sides would have to agree and I don't see the, I don't need much openness to support

09:08.560 --> 09:12.560
these ideas from the PGP side right now.

09:12.560 --> 09:15.040
So I don't know what will the future bring, of course.

09:15.040 --> 09:17.280
No final word has been made.

09:17.280 --> 09:23.960
But at this time, to me, I have the worry that the future of PGP is a little uncertain.

09:23.960 --> 09:27.800
There are a little, there are conflicting specifications.

09:27.800 --> 09:32.480
There might be incompatible implementations.

09:32.480 --> 09:35.400
And I don't know how much hope there is for a unified specification.

09:35.400 --> 09:36.960
I still hope for it.

09:36.960 --> 09:42.400
I think it would be best and we really should see it, but it's not clear whether it will

09:42.400 --> 09:43.960
happen or not.

09:43.960 --> 09:50.400
And if that's the case, I'm worried that PGP might become less interoperable and more complicated

09:50.400 --> 09:52.480
to use in the future.

09:52.480 --> 10:01.480
And with that, is PGP the right way to go right now in West Moin PGP when we don't know

10:01.480 --> 10:04.160
what the future will bring?

10:04.160 --> 10:11.960
My suggestion is maybe we should wait a little and see how the developments in the PGP side

10:11.960 --> 10:16.880
go and whether there will be some more agreements in the future.

10:16.880 --> 10:18.680
And maybe we should, Sunderberg should wait.

10:18.680 --> 10:21.960
I think what we have right now is working.

10:21.960 --> 10:24.320
Both specifications have a common base.

10:24.320 --> 10:28.040
So PGP is working and you can interoperate right now.

10:28.040 --> 10:31.640
It's just that I'm not sure how quickly we should jump on these new ideas and implement

10:31.640 --> 10:32.640
them.

10:32.640 --> 10:33.640
Maybe it's time to wait.

10:33.640 --> 10:39.520
And I suggest Sunderberg should continue to both support both PGP and SMIME.

10:39.520 --> 10:43.160
But maybe one idea is I'm presenting that as a suggestion.

10:43.160 --> 10:47.080
I'm not saying we will do that and I'm looking for your feedback.

10:47.080 --> 10:49.720
Please provide feedback afterwards.

10:49.720 --> 10:51.840
And here's a suggestion.

10:51.840 --> 10:55.520
We could try to make SMIME easier to use for everyone.

10:55.520 --> 11:01.320
We could try to eliminate the barriers of entry that are currently there.

11:01.320 --> 11:07.240
And we could say maybe SMIME is an OK technology for users with a limited threat model.

11:07.240 --> 11:13.960
And we could say open PGP is more targeted for users with a broad threat model.

11:13.960 --> 11:19.360
And as a consequence, they will currently have to accept that there is a slightly higher

11:19.360 --> 11:20.360
complexity.

11:20.360 --> 11:21.520
Well, why is that?

11:21.520 --> 11:23.280
Well, let's look at SMIME.

11:23.280 --> 11:25.960
I think it's more widely available in email applications.

11:25.960 --> 11:31.160
And if you trust, as a user that certificate authority, do that job right, then SMIME

11:31.160 --> 11:35.840
is easier to use than PGP because you don't have to do manual checking of keys.

11:35.840 --> 11:40.760
And we don't have the transparency stuff yet that was mentioned.

11:40.760 --> 11:41.760
Maybe we can do it in the future.

11:41.760 --> 11:44.320
But right now, it's not there yet.

11:44.320 --> 11:47.440
And it might be appropriate for people with a limited threat model.

11:47.440 --> 11:50.960
It protects against passive reading, SMIME.

11:50.960 --> 11:54.320
There is a remaining risk that there are falsely issued certificates.

11:54.320 --> 11:57.400
We have seen digital notar in the past.

11:57.400 --> 12:00.040
But CAs are regulatory audited.

12:00.040 --> 12:02.080
And of course, they don't want to lose their reputation.

12:02.080 --> 12:07.760
So I think the risk of falsely issued certificates is not that big.

12:08.760 --> 12:12.040
Also, we certify transparency making it even harder.

12:12.040 --> 12:14.880
So I think that remaining risk might acceptable for many.

12:17.480 --> 12:25.520
So but we would have, in order to follow that idea, we really would have to find a way to get certificates to everyone for free.

12:25.520 --> 12:31.360
We would require, like Tobias implemented in his demo, to find a way to automatically obtain and

12:31.360 --> 12:33.960
refresh certificates from inside the email client.

12:34.960 --> 12:42.040
And then also, we would need something better for looking up the certificates of your correspondence.

12:42.040 --> 12:46.600
Maybe we could implement certificate transparency like way for

12:46.600 --> 12:50.480
SMIME certificates where we maybe even to protect against the spammers.

12:52.240 --> 12:57.240
I'm not fully up to date if the certificate, what's the PPP specifications as,

12:57.240 --> 12:59.600
if it's also redacting email addresses already.

12:59.600 --> 13:02.160
But yeah, maybe that would be necessary.

13:02.160 --> 13:06.920
And if we have some kind of cloaking with a hash, then we could maybe implement

13:06.920 --> 13:11.240
a certificate directory that is like a key server and

13:11.240 --> 13:14.920
that could consume the information from the transparency logs.

13:14.920 --> 13:20.520
And maybe we could use that to make discovery of correspondence certificates easier.

13:21.720 --> 13:28.560
So yeah, and PPP could be more dedicated or

13:28.560 --> 13:34.680
declared as the preferred technology who don't want to accept that remaining risk of false issues as my certificates.

13:38.200 --> 13:46.000
Yeah, and they could still do the manual key verification at the cost of having a little bit more complex technology.

13:46.000 --> 13:53.680
So if that idea, if we get a positive reaction to that idea,

13:53.680 --> 13:57.840
maybe we could say making PPP easier to use in Thunderbird.

13:57.840 --> 14:01.240
Maybe that could become a little less priority and

14:01.240 --> 14:07.040
rather focus for PPP on the higher, on the security improvements and

14:07.040 --> 14:10.760
interoperability parts of that.

14:10.760 --> 14:14.600
And rather focus on making SMIME easier to use and

14:14.600 --> 14:20.240
I plan to post some suggestions in the new future

14:21.120 --> 14:24.080
towards the Thunderbird email discussion this way,

14:24.080 --> 14:28.920
I present this idea in more detail and I will be looking for your feedback.

14:28.920 --> 14:30.560
Thank you.

14:30.560 --> 14:31.560
Thank you very much.

14:31.560 --> 14:39.080
I just want to add one more thing.

14:39.080 --> 14:42.600
I somehow expect that there will be many questions.

14:42.600 --> 14:45.440
So after this is finished, I will go outside and

14:45.440 --> 14:49.120
I'm waiting for your question and to have follow up discussions outside as well.

14:51.200 --> 14:52.160
Hi Kai.

14:52.160 --> 14:59.200
May I ask why are you still using R&P over the Sequoias version octopus like the crypto library?

15:03.200 --> 15:07.840
Well, your question implicates that I should prefer one side or the other.

15:07.840 --> 15:10.000
I don't prefer one side of the other.

15:10.000 --> 15:14.840
I think I don't want to give any of these conflicting specifications and advantage.

15:14.840 --> 15:17.960
In my opinion, Thunderbird should remain neutral.

15:18.360 --> 15:21.520
In my opinion, so conflicting parties should get together and

15:21.520 --> 15:24.960
find a unified specification and I would like to wait for that.

15:26.400 --> 15:31.960
And that if that switching implementation doesn't give me an advantage because

15:31.960 --> 15:35.800
I don't know what's the intention of the Sequoia.

15:35.800 --> 15:38.560
Will they fully support both specifications?

15:40.560 --> 15:41.640
I don't know.

15:41.640 --> 15:42.160
There's Nio.

15:42.160 --> 15:43.160
Okay.

15:43.160 --> 15:44.160
Rush.

15:44.160 --> 15:46.160
All right.

15:49.160 --> 15:54.160
Are you saying that if we implement V5, then you'll use Sequoia?

15:54.160 --> 15:56.160
I'm not making some promises.

15:56.160 --> 16:02.160
I'm just saying that additional other alternatives currently are not

16:02.160 --> 16:07.160
wearable and if things change, we can re-evaluate our thinking.

16:08.160 --> 16:19.160
You mentioned that S-MIME can have a lower barrier of entry than open PGP.

16:19.160 --> 16:27.160
To my understanding, the primary problem with encryption is that the user loses the key

16:27.160 --> 16:30.160
and he cannot read this email anymore.

16:30.160 --> 16:36.160
I don't see how S-MIME has any advantage over PGP in the sense because if I can just as well lose the key,

16:37.160 --> 16:42.160
the certificate authority cannot regenerate my key unless you want them to do so much rather than the key.

16:42.160 --> 16:44.160
I don't see the advantage.

16:44.160 --> 16:47.160
So I think the problem exists with both technologies.

16:47.160 --> 16:49.160
That's the same.

16:49.160 --> 16:53.160
But yeah, maybe we could introduce a key inscription key.

16:53.160 --> 16:58.160
Maybe we could introduce concepts that Thunderbird generates a key encryption key for users.

16:58.160 --> 17:05.160
They make it back up with a path race, maybe 20 words writing down which just a randomly generated

17:05.160 --> 17:11.160
symmetric key which we back up in paper form with 20, 24 words written down.

17:11.160 --> 17:18.160
And then maybe Thunderbird could encrypt all the users' private keys with that single symmetric key.

17:18.160 --> 17:25.160
A possible idea that could probably be used for both technologies.

17:25.160 --> 17:27.160
So I didn't spend it...

17:27.160 --> 17:33.160
Yeah, that's a general idea which we could do which would help both technologies.

17:36.160 --> 17:39.160
Alright, any final question in the room?

17:45.160 --> 17:52.160
Have you looked at the secure join standard and do you think it might be an option for Thunderbird users to have

17:52.160 --> 17:55.160
guaranteed internet encryption with verified fingerprints in a very user-

17:55.160 --> 18:02.160
I have not seen the project you mentioned yet so you would have to point me to it and we can have a follow-up discussion.

18:02.160 --> 18:05.160
Alright, so thank you again.

