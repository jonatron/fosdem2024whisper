WEBVTT

00:00.000 --> 00:16.760
Hi, I'm Eunice and I work for SNCF Rizzo and the OSRD project.

00:16.760 --> 00:23.240
So standard disclaimer, the opinion in this presentation I'm maum and not those of the

00:23.240 --> 00:28.480
OSRD project SNCF Rizzo or the Open Relay Association.

00:28.480 --> 00:29.480
So what's OSRD?

00:29.480 --> 00:34.960
It's a railway design toolbox built around microscopic simulation.

00:34.960 --> 00:42.760
So it allows to perform operational studies and also to find last minute pass through

00:42.760 --> 00:47.080
the infrastructure without creating any new conflicts.

00:47.080 --> 00:54.360
It's a licensed under our GPL V3 and funded by SNCF Rizzo, the European Union and the

00:54.360 --> 00:57.760
French state.

00:57.760 --> 01:00.400
So a short signaling primer.

01:00.400 --> 01:06.440
The main goal is that trains do not crash into each other or derail.

01:06.440 --> 01:09.080
The problem is trains are very hard to stop.

01:09.080 --> 01:15.080
They take a very long time to slow down and they need to know that they should slow down

01:15.080 --> 01:17.400
very much in advance.

01:17.400 --> 01:23.760
To do that we use signals and in order to actually use the signals we need to know where

01:23.760 --> 01:25.920
the trains are.

01:25.920 --> 01:30.680
So for that we use track circuits and the axle contours.

01:30.680 --> 01:36.920
But basically we divide the infrastructure into zones and in each zone we can know if

01:36.920 --> 01:41.760
a train is there or isn't there.

01:41.760 --> 01:53.320
We call the space between signal blocks and the block detection zones.

01:53.320 --> 01:59.360
Another thing is that train must not go over a switch that isn't set for them.

01:59.360 --> 02:06.360
So for that they need to have actually an itinerary through the infrastructure.

02:06.360 --> 02:09.040
We call that a route.

02:09.040 --> 02:13.920
And the route need to be established which means that the switches must be locked in place

02:13.920 --> 02:19.280
before a train can pass the signal at the start of the route.

02:19.280 --> 02:25.720
So for example this is using your ball signalings which is the French main signal system.

02:25.720 --> 02:32.760
So here we have a train and behind it this route is set so you have one red light, one

02:32.760 --> 02:38.240
yellow light that signals that this is a red light and then it's okay it's a green light.

02:38.240 --> 02:43.600
But up above the route isn't set this switch is dangerous so there is not only one red

02:43.600 --> 02:45.200
light there is two red lights.

02:45.200 --> 02:49.320
This means that under no circumstance a train must pass the signal.

02:49.320 --> 02:55.960
Here a train can pass it but very slowly.

02:55.960 --> 03:00.800
So we have a number of challenges.

03:00.800 --> 03:05.600
Every European country has its own signalling system and actually multiple.

03:05.600 --> 03:12.400
And there is standardization which is called ERTMS which is actually three levels of signalling

03:12.400 --> 03:18.560
system and even more complicated than that but it's not widely deployed yet and it probably

03:18.560 --> 03:25.080
never will be because nobody is going to upgrade an online for no reason.

03:25.080 --> 03:33.080
But we need to cover every single one of those cases so far as it's just another standard.

03:33.080 --> 03:41.080
We also need to not simulate the infrastructure every time we make a small change in a train

03:42.080 --> 03:51.080
for example departure time or in a forest EDCM for example it use an ASTAR through the graph

03:51.080 --> 03:58.080
of time, space and speed in order to find the pass that doesn't conflict with another

03:58.080 --> 04:05.080
train and every iteration of that ASTAR we cannot simulate the whole infrastructure it

04:05.080 --> 04:07.000
would just one scale.

04:07.000 --> 04:14.000
So we need to be able to model the capacity needs of a train while only simulating it.

04:14.600 --> 04:20.800
And also most of the application should not have 15 implementation of everything because

04:20.800 --> 04:25.520
of 50 signalling system it should be very much abstracted.

04:25.520 --> 04:30.760
So our approach is that signalling system have a very restricted view of the infrastructure

04:30.760 --> 04:37.760
the only thing that only see in front of it and it see linear pass until the next signal.

04:39.680 --> 04:46.680
So they see the state of the zones they protect and they also see the state of the next signals.

04:49.560 --> 04:54.400
We give them other metadata such as the speed of the approaching train or the kind of train

04:54.400 --> 04:59.240
this is useful in some special case.

04:59.240 --> 05:06.240
And we also separate the concept of signalling system such as BAL or RTMS and signalling the

05:07.040 --> 05:14.040
rival which is the actual code that implement the behavior of a signal.

05:14.240 --> 05:21.240
For example, yeah, so they depend on the output and input signalling system.

05:22.240 --> 05:29.240
So for example, here we have the BAL signal that followed either by a T-VM signal or by

05:32.640 --> 05:34.760
a BAL signal also.

05:34.760 --> 05:41.760
And we have two drivers, so two modules that under every BAL to BAL signals and every BAL

05:44.000 --> 05:45.600
to T-VM signals.

05:45.600 --> 05:52.600
And we inject BAL parameters because this is actually a BAL signal since the actual lights

05:52.680 --> 05:56.480
are using the BAL signalling system.

05:56.480 --> 06:03.480
So from that we can actually feed along the path of the train the state of the preceding

06:04.640 --> 06:11.640
signal here, get a state and feed it forward and we have signalling.

06:12.640 --> 06:15.000
But there is a number of problems with this.

06:15.000 --> 06:21.120
It's very cool but as you can see the actual signal reacts after the passage of the train

06:21.120 --> 06:25.840
which is quite normal because that's how it is in the real world.

06:25.840 --> 06:30.320
Our problem is actually trains need to see green before them.

06:30.320 --> 06:33.920
Their actual needs are before them and not after them.

06:33.920 --> 06:35.680
They don't really care.

06:35.680 --> 06:41.360
And we linearize the path but what is the path of the train that follow our train?

06:41.360 --> 06:47.240
We don't know because as we said earlier we are simulating each train alone.

06:47.240 --> 06:52.840
So we need to model the capacity requirement of a train but only knowing that this train

06:52.840 --> 06:55.200
pass.

06:55.200 --> 06:56.680
So why do train conflict?

06:56.680 --> 07:03.520
Either they are following too close to each other in which case they need the zone in front

07:03.520 --> 07:10.200
of them to be free or they have incompatible routes which means that they need the zone

07:10.200 --> 07:16.320
before them to have some specific switch configuration in order to proceed.

07:16.320 --> 07:23.320
There are other reasons why train conflicts such as power delivery needs and many other

07:24.200 --> 07:28.920
reasons but we don't handle those and they have nothing to do with signalling.

07:28.920 --> 07:31.560
So what's the spacing requirements?

07:31.560 --> 07:33.480
We have a zone, a begin time and end time.

07:33.480 --> 07:34.480
It's quite simple.

07:34.920 --> 07:39.600
For a route we have a set deadline which is the begin time.

07:39.600 --> 07:42.560
We have the actual switch configuration.

07:42.560 --> 07:49.560
So in order to set a route you need to know in which direction you are going to traverse

07:50.240 --> 07:55.400
the zone and what is the switch configuration you traverse it.

07:55.400 --> 07:58.320
So how do we get this?

07:58.320 --> 08:04.080
Every time a train encounters a signal we start by assuming the zone in front of the

08:04.080 --> 08:11.080
signal is occupied and we probe the infrastructure linearly until that signal becomes green again.

08:12.320 --> 08:19.320
And then we know that all the zones where the signal wasn't green basically are part

08:21.400 --> 08:28.400
of that signal requirement and we can adjust the begin time of the zone to match the time

08:29.400 --> 08:32.640
at which the train saw the signal.

08:32.640 --> 08:37.640
And every time a train leaves the zone it doesn't require it anymore.

08:37.640 --> 08:42.960
In terms of routing requirements most of the parameters only depend on the path of the

08:42.960 --> 08:43.800
train.

08:43.800 --> 08:50.800
So if we go earlier the route, the traverse zone, the detectors which basically indicate

08:51.640 --> 08:58.640
the direction in the zone and the switch configuration only depend on the path of the train.

08:58.920 --> 08:59.680
We know that.

08:59.680 --> 09:03.280
We are simulating the train.

09:03.280 --> 09:09.160
But in order to find the setting deadline which means we need to know which signal protects

09:09.160 --> 09:11.680
the entry of the route.

09:11.680 --> 09:18.680
And not only that signal but the signal before it because as we saw trains can see a signal

09:20.800 --> 09:25.440
being packed by signal before the actual protecting signal.

09:25.440 --> 09:32.440
So basically we probe in the other way so we set all the zones in the route as incompatible

09:33.520 --> 09:39.200
which means that the route isn't set and then we iterate through the signals until we find

09:39.200 --> 09:43.280
a signal that's green.

09:43.280 --> 09:48.800
Good so now for a train we have its conflict and spacing requirements and the good thing

09:48.800 --> 09:55.800
with those is they are indexable by zone so we can simulate every train once and then

09:56.920 --> 10:03.920
keep a database of each requirement and we simply need to check for every zone if all

10:04.040 --> 10:05.600
the requirements match.

10:05.600 --> 10:12.600
So the spacing requirements are never compatible if they overlap and the routing requirements

10:12.760 --> 10:18.600
are compatible if they go in the same direction and have the same switch configuration.

10:18.600 --> 10:23.880
And if we had a new train we only need to check its requirement and same thing in the

10:23.880 --> 10:30.880
ASTAR of STDCM if we had a train we only need to check that the new zones that are

10:32.880 --> 10:37.880
traversed by ZC ASTAR iteration are actually conflicted.

10:37.880 --> 10:44.380
So in the future we want to implement TVM support.

10:44.380 --> 10:51.380
We are actually in the process of doing that and it should be done by the end of the month.

10:54.580 --> 10:57.060
We want to implement support for overlaps.

10:57.060 --> 11:04.060
The main problem is friends doesn't use overlaps which basically are zones that must be free

11:05.260 --> 11:11.940
after the rest of the signal in case a train doesn't stop there.

11:12.020 --> 11:19.020
Friends doesn't use that but for example Germany do and we do not have any German on the team.

11:20.980 --> 11:26.100
And same thing for other countries signaling systems we want to implement those and the

11:26.100 --> 11:28.380
contribution are very welcome.

11:28.380 --> 11:35.380
There are also moving block support with basically the ERTMSV3 and in order to implement those

11:35.380 --> 11:42.380
we probably need another model specifically for moving block systems.

11:45.540 --> 11:46.540
Thank you for listening.

11:46.540 --> 11:49.540
Do you have any question?

11:49.540 --> 11:52.540
Five minutes question.

11:52.540 --> 11:55.540
Here.

11:55.540 --> 12:00.540
Thanks.

12:00.540 --> 12:07.540
Another one?

12:07.540 --> 12:14.540
You mentioned the different signaling systems and the different operational rules.

12:14.540 --> 12:21.540
Can you move this quite flexibly or as you said the implementation of TVM as a manual

12:22.900 --> 12:24.540
coding?

12:25.540 --> 12:30.540
Manual coding of the signaling system on the driver.

12:30.540 --> 12:33.540
The signaling system is quite simple.

12:33.540 --> 12:37.540
It's not actually a JSON file but it could be.

12:37.540 --> 12:44.540
So it's just declaring what properties the signal may have and there is actually code

12:44.540 --> 12:49.540
to check when we actually construct the blocks that they are correct.

12:49.540 --> 12:56.540
So basically sanitization of user input and in order to make the driver you just decide

12:57.540 --> 13:04.540
what are the possible transitions for your system and you implement those it's basically

13:04.540 --> 13:06.540
one function class.

13:06.540 --> 13:11.540
So it's actual code but it's quite simple.

13:11.540 --> 13:18.540
So when you do the root planning you know of course what rules you train such as post-created

13:18.540 --> 13:23.540
times but I can imagine that the train will occupy is on for a short time and the other

13:23.540 --> 13:28.540
will have to wait a little bit for that to become available.

13:28.540 --> 13:32.540
So there is an optimization problem there like what do we do?

13:32.540 --> 13:36.540
So this is a system how does it tie in with the actual timetable planning?

13:36.540 --> 13:41.540
So the timetable planning in operational studies are done manually.

13:41.540 --> 13:49.540
So because the people doing operational studies actually do this manually or want to do this manually

13:49.540 --> 14:03.540
for now and in the case of SCD-CM we cannot change the path of any train because they are already sold.

14:04.540 --> 14:13.540
So we cannot make a new train but it must not interact with any other train.

14:13.540 --> 14:15.540
So essentially this gives you a yes or no?

14:15.540 --> 14:21.540
Yeah it gives you a yes it's possible and this is the fastest path.

14:21.540 --> 14:23.540
Again for now.

14:23.540 --> 14:25.540
For now yeah.

14:26.540 --> 14:30.540
What's the difficulty?

14:30.540 --> 14:32.540
Was it a challenge for TVN's?

14:32.540 --> 14:37.540
Because there is this big limit on blocks with the speeds before?

14:37.540 --> 14:42.540
Well it's yeah but this was a challenge to integrate in the design.

14:42.540 --> 14:48.540
But for now it's not a challenge it's just a developer bandwidth.

14:49.540 --> 14:57.540
Does the conductor of the train see some kind of nice map that they can see how fast they can still be going?

14:57.540 --> 15:05.540
Or do they just see the green light red light, orange light, double red light and they just kind of react to these very basic signals?

15:05.540 --> 15:09.540
So on BAL signalling they only see the green light, white light, etc.

15:09.540 --> 15:13.540
On TVM it's actually a cab signalling system.

15:13.540 --> 15:17.540
So the driver sees in the train what speed he should go.

15:17.540 --> 15:21.540
But yeah on BAL I don't think.

15:21.540 --> 15:29.540
There is no connection so the driver just look outside the window and see what he has to do.

15:29.540 --> 15:33.540
What challenges do you have now?

15:33.540 --> 15:45.540
Or how does this simulation help in case of delays and dynamically reallocating paths or timetables where the delays are in a cabin at a scale?

15:45.540 --> 15:53.540
So we do not currently support any dynamic simulation but we plan to.

15:53.540 --> 15:55.540
We hope so.

15:56.540 --> 16:05.540
And well in order for dynamic simulation you pretty much have the same constraint and simulating.

16:05.540 --> 16:21.540
You need to actually simulate what state it's in at any point but you also need to know the.

16:21.540 --> 16:25.540
The resource needs in front of a train.

16:25.540 --> 16:30.540
So the situations are for now resolved manually like from the control center?

16:30.540 --> 16:39.540
Oh yeah OSRD actually is not used in real operations in real time for them.

16:39.540 --> 16:48.540
So I think at SNSF most of it is done by experience of the regulator.

16:48.540 --> 16:52.540
This one last question maybe short.

16:52.540 --> 16:54.540
Yes please.

16:54.540 --> 16:56.540
What is the safety requirement of the company?

16:56.540 --> 16:58.540
No.

17:02.540 --> 17:04.540
Thanks.

17:04.540 --> 17:06.540
No no no.

17:10.540 --> 17:12.540
That's it.

17:18.540 --> 17:20.540
Thank you.

