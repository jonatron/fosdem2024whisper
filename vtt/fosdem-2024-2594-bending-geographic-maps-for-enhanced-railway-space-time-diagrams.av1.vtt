WEBVTT

00:00.000 --> 00:12.400
Hello everyone.

00:12.400 --> 00:18.680
So my name is Alexis and I developed data visualization web applications at Westware.

00:18.680 --> 00:24.560
We do a lot of open source things and I'm totally not a trained person initially.

00:24.560 --> 00:28.920
I'm still not a trained person actually.

00:28.920 --> 00:36.120
But since early 2021 we started working for SNCF Rezo who is a firm in charge of handling

00:36.120 --> 00:42.360
the French train infrastructure.

00:42.360 --> 00:49.520
And we started to contribute on OSRD which is I guess it's been advocated here today

00:49.520 --> 00:50.520
already.

00:50.520 --> 00:51.520
Not yet.

00:51.520 --> 00:52.520
Not yet.

00:52.520 --> 00:53.520
Okay.

00:53.520 --> 00:55.760
So OSRD is an open source railway designer.

00:55.760 --> 01:04.400
It's an open source application to simulate trains on real or edited infrastructures.

01:04.400 --> 01:08.080
That's kind of amazing.

01:08.080 --> 01:09.920
The interface is web based.

01:09.920 --> 01:12.080
The project is kind of huge.

01:12.080 --> 01:16.360
The team is a good part of the team must be in the room I guess.

01:16.360 --> 01:19.240
And yeah, you can check it out.

01:19.240 --> 01:24.920
And at some point we, Westware, we've been tasked to actually enhance the space time

01:24.920 --> 01:27.800
diagrams.

01:27.800 --> 01:30.000
What are space time diagrams?

01:30.000 --> 01:34.280
First of all, everybody do not agree on what it should be named.

01:34.280 --> 01:41.920
So it might be circulation diagrams or graphical timetables or train graphs, which is actually

01:41.920 --> 01:49.880
nice train graph, but I'll stay on space time diagrams.

01:49.880 --> 01:56.400
It's probably been invented by a French engineer, Charles Hibry in the early 1840s.

01:56.400 --> 02:01.160
This engineer was in charge of scheduling the trains between Paris and Rouen.

02:01.160 --> 02:06.440
And he used this very smart chart I described right after.

02:06.440 --> 02:10.760
Some people think it's actually a Russian military guy.

02:10.760 --> 02:12.720
No, you remember?

02:12.720 --> 02:13.720
No.

02:13.720 --> 02:14.720
Okay.

02:14.720 --> 02:16.320
There's another lead and it's not clear.

02:16.320 --> 02:17.640
It's been invented by these people.

02:18.400 --> 02:20.880
Let's stay on this track.

02:20.880 --> 02:23.960
So horizontally you see the time.

02:23.960 --> 02:25.360
It's hours of the day.

02:25.360 --> 02:31.280
And vertically you see the list of the stations from Paris to Rouen.

02:31.280 --> 02:33.080
Basically it works.

02:33.080 --> 02:35.520
A train, can I zoom in?

02:35.520 --> 02:37.000
Okay, nice.

02:37.000 --> 02:44.200
The train is aligned and, no, sorry.

02:45.200 --> 02:48.560
Okay, each train is aligned on this diagram.

02:48.560 --> 02:55.480
And you can read a lot of information in this type of diagram just with those lines on this

02:55.480 --> 02:56.480
scale.

02:56.480 --> 03:02.360
So basically the more vertical is aligned, the faster the train goes.

03:02.360 --> 03:07.000
When the line is horizontal, it means that during different time, the train is at the

03:07.000 --> 03:09.960
same position, so it doesn't move.

03:09.960 --> 03:14.240
When two lines are crossing, it means that there are two trains at the same position

03:14.240 --> 03:18.440
on the line at the same time, which means that it's possible.

03:18.440 --> 03:23.520
So if I read this map, for instance, I can know that there are probably two different

03:23.520 --> 03:27.080
tracks, one for each direction, and probably no more.

03:27.080 --> 03:32.400
I know this because trains that don't go in the same direction can cross kind of anywhere,

03:32.400 --> 03:36.640
here or here or here.

03:36.640 --> 03:41.280
But when they are in the same direction, one train has to stop in a station like here

03:41.280 --> 03:45.600
or like somewhere around here, et cetera.

03:45.600 --> 03:50.720
This is kind of crazy, all the information that are just displayed in a so simple diagram.

03:50.720 --> 03:53.920
The thing is, I'm not a train person, but I know this diagram for long because it's

03:53.920 --> 03:58.680
actually on the cover of one of the DataVis reference book, Visual Display of Quantitative

03:58.680 --> 04:01.320
Information by Tuftor.

04:01.320 --> 04:03.920
And it's still used today.

04:04.200 --> 04:09.000
There are reasons why it's screen shot from OpenTrack and not from OSRD.

04:09.000 --> 04:10.800
I'll come back on it later.

04:10.800 --> 04:16.200
But OpenTrack is another open source software to handle trains, and they still use this

04:16.200 --> 04:18.880
kind of diagrams.

04:18.880 --> 04:22.400
And it becomes actually even better once we introduce blocks.

04:22.400 --> 04:29.520
So when they started using trains on tracks, it was kind of easy because basically there

04:29.520 --> 04:32.040
were not enough trains to consider collisions.

04:32.040 --> 04:38.400
But at some point, a train goes fast enough and is heavy enough that when an operator

04:38.400 --> 04:45.360
sees a danger stopped on the track, if he starts braking, he won't be stopped before

04:45.360 --> 04:46.600
the collision.

04:46.600 --> 04:48.960
So people had to find solutions for this.

04:48.960 --> 04:57.160
And so easy, since I'm going to sum up how it works, but I'm not a train person.

04:57.160 --> 05:03.160
So basically, the track is split into blocks, and only one train can be at one block at

05:03.160 --> 05:06.560
any given time, and there's a signal at the entrance of the block.

05:06.560 --> 05:11.880
If there's a train inside the block, the signal is red, so you cannot enter it.

05:11.880 --> 05:16.760
If the signal is orange, it means that you must stop because there is a train in the

05:16.760 --> 05:20.320
next block, basically.

05:20.320 --> 05:27.160
The thing is, when a block is occupied by a train, it means that during a time and on

05:27.160 --> 05:33.280
a distance, there cannot be other trains in this block.

05:33.280 --> 05:37.840
So basically, the occupancy of a block by a train is a rectangle, and when two rectangle

05:37.840 --> 05:40.400
collides, that's bad.

05:40.400 --> 05:45.240
And in OSRD, here is what it looks like in OSRD.

05:45.240 --> 05:52.280
So the red rectangles are the blocks occupied by a train, and here in OSRD, I started a

05:52.280 --> 05:56.920
simulation, and I dragged this train so that there was a collision.

05:56.920 --> 06:01.800
And yeah, it's really easy, graphically, to see that there will be two trains in the same

06:01.800 --> 06:03.440
block at some point.

06:03.440 --> 06:07.560
And I think as a data-vis person that it's kind of amazing.

06:07.560 --> 06:10.760
But how can we make this even more informative?

06:10.760 --> 06:15.200
So people from OSRD asked us, yeah, basically vertically, we just have the list of three

06:15.200 --> 06:21.160
stations or the list of point of interest, but we would like to bring more information

06:21.160 --> 06:22.160
in this.

06:22.160 --> 06:26.400
And we thought, let's start digging.

06:26.400 --> 06:28.680
Who does this kind of things?

06:28.680 --> 06:36.200
So we started looking into other transportations where people have to see how they travel along

06:36.200 --> 06:37.920
kind of a line.

06:37.920 --> 06:42.040
So here is what it looks like when you are inside the RORD.

06:42.040 --> 06:46.640
So this is a train that goes from northern Paris suburb to southern Paris suburb, going

06:46.640 --> 06:48.000
through Paris.

06:48.000 --> 06:53.560
And when you are inside this train, you have this synthesized diagram.

06:53.560 --> 06:58.200
So it's nice because it brings only the information you need, the list of stations, but also some

06:58.200 --> 07:05.000
interesting things like where can you switch to other transportation systems, et cetera,

07:05.000 --> 07:06.080
et cetera.

07:06.080 --> 07:11.880
And this is nice, but the thing is what LoÃ¯c wanted us to do was to have the exact

07:11.880 --> 07:18.800
infrastructure and to see exactly what are the tracks on the lines at any given point.

07:18.800 --> 07:24.720
And this would have needed us to actually know the whole infrastructure and to do heavy

07:24.720 --> 07:25.720
computations.

07:25.720 --> 07:31.280
And at this point, we planned to do this as a front end only feature.

07:31.280 --> 07:33.400
So we kept digging, sorry, yeah.

07:33.400 --> 07:37.760
So we can run there anything we want, but we need to know the exact topology and do heavy

07:37.760 --> 07:38.760
computations.

07:38.760 --> 07:42.280
And we kept digging to find something else.

07:42.280 --> 07:44.680
OK, sorry.

07:44.680 --> 07:50.680
So on top of this is the actual map of the bus in Paris.

07:50.680 --> 07:52.180
OK.

07:52.180 --> 07:56.200
When you take the bus 58 in Paris, you have this map.

07:56.200 --> 08:04.400
And the thing is, as you can see on the top map, this line, it appears absolutely straight

08:04.400 --> 08:05.400
here, you see.

08:05.440 --> 08:11.960
And this is kind of amazing because we cannot bend things in cartography, but that's what

08:11.960 --> 08:13.880
they did probably by hand.

08:13.880 --> 08:19.840
And they obtained this nice map where there are very identifiable areas.

08:19.840 --> 08:20.840
You can see all the streets.

08:20.840 --> 08:22.640
You can see a lot of information.

08:22.640 --> 08:27.840
But still, you know that you are going basically from left to right or from right to left.

08:27.840 --> 08:29.800
And it works.

08:29.800 --> 08:33.320
So yeah, we have to show everything a map would show.

08:33.320 --> 08:38.000
So we cannot just terrific exactly what we would like to display as we did with the schema

08:38.000 --> 08:40.840
because we have to take everything.

08:40.840 --> 08:44.400
But the good point is that we show everything a map would show, which means that we have

08:44.400 --> 08:45.920
all the context around.

08:45.920 --> 08:52.760
For a train, it would be the cities, the buildings, the places that are near the train, but not

08:52.760 --> 08:56.040
exactly on it, et cetera.

08:56.040 --> 08:57.520
It's actually called a strip map.

08:57.520 --> 08:59.480
And it exists for quite a long time.

08:59.480 --> 09:03.160
We've seen some very old examples like this one.

09:03.160 --> 09:07.320
And it's actually already been used within space-time diagrams already.

09:07.320 --> 09:10.200
So this one comes from the Russian military.

09:10.200 --> 09:15.400
It's trains between St. Petersburg and Moscow.

09:15.400 --> 09:20.080
And on top of it, not vertically aligned on the left, but you can see the whole itinerary

09:20.080 --> 09:22.640
with a lot of information surrounding.

09:22.640 --> 09:25.960
Like you can see the sea next to St. Petersburg.

09:25.960 --> 09:29.160
You can see other identifiable points, et cetera.

09:29.160 --> 09:31.240
And it brings a lot of context.

09:31.240 --> 09:35.120
So let's bend geographic maps.

09:35.120 --> 09:40.680
The strategy we used was to generate a grid made of triangles along the path.

09:40.680 --> 09:44.200
And then we generate another grid, which is totally flat.

09:44.200 --> 09:49.080
And when we want to translate a coordinate from the normal geographic system to the bent

09:49.080 --> 09:55.240
system, we just find in which triangle am I, and then I will translate it from one triangle

09:55.240 --> 09:56.240
to another.

09:56.240 --> 09:58.480
And this is something that is easy to do.

09:58.480 --> 10:00.280
So let's take a path.

10:00.640 --> 10:04.320
This is from Nantes to Angers in France.

10:04.320 --> 10:05.960
Then we generate a grid around it.

10:05.960 --> 10:11.040
So basically, I just simplify a bit the path, and I take regular steps.

10:11.040 --> 10:15.320
And I draw a line crossing it at a perpendicularly.

10:15.320 --> 10:17.560
And then I draw triangles, that kind of.

10:17.560 --> 10:19.720
But I have two problems here.

10:19.720 --> 10:22.600
First of all, there are points that are in multiple triangles.

10:22.600 --> 10:24.040
And this is bad.

10:24.040 --> 10:28.040
And another issue is that I have large triangles touching really small triangles, which means

10:28.040 --> 10:33.160
that in my final map, I know that if I have this kind of distortions, it wouldn't be very

10:33.160 --> 10:34.720
smooth.

10:34.720 --> 10:39.600
So we smoothen the grid with some, we just run some steps.

10:39.600 --> 10:45.480
I move each point to the barycenter of its neighbors, basically, something like this.

10:45.480 --> 10:47.920
Then we index all the triangles to get a quadtree.

10:47.920 --> 10:53.680
So it's really, really fast to know if I have a point, what are the nearest triangles.

10:53.680 --> 10:58.280
So in this nearest triangles, which is the one that contains my point, et cetera, et cetera,

10:58.280 --> 11:01.280
I do the regular grid on the right.

11:01.280 --> 11:03.960
So each triangle exists in both grids.

11:03.960 --> 11:06.680
And at this point, yay, we have a projection.

11:06.680 --> 11:08.400
So that's what I said.

11:08.400 --> 11:14.480
If I have a point P, I find the quad that contains P. I look for all the triangles that collide

11:14.480 --> 11:15.480
with this quad.

11:15.480 --> 11:18.440
I find the one that contains my point.

11:18.440 --> 11:22.200
Then there's a triangle with the same ID in the straight grid.

11:22.200 --> 11:28.760
So I just find this triangle, and I use barycentric coordinate system to translate from one triangle

11:28.760 --> 11:30.760
to the other.

11:30.760 --> 11:35.080
Also, I had to actually develop something.

11:35.080 --> 11:38.880
So we use the ReactMapGL and MapLibre.

11:38.880 --> 11:43.520
MapLibre and ReactMapGL because it's already used inside OSRD.

11:43.520 --> 11:49.920
So for this prototype, basically, we render a hidden map that contains the whole grid,

11:49.920 --> 11:51.760
but we don't show it into the screen.

11:51.760 --> 11:53.640
We just load every feature we can.

11:53.640 --> 11:59.160
We use layers from OpenStreetMap for the context and OSRD to have the actual infrastructure

11:59.160 --> 12:01.320
and signals, et cetera.

12:01.320 --> 12:03.960
Then we wait for the idle events that says, OK, I have loaded everything.

12:03.960 --> 12:04.960
I'm ready.

12:04.960 --> 12:06.720
So I take all the features.

12:06.720 --> 12:08.480
I transpose them.

12:08.480 --> 12:10.320
So I project them, actually.

12:10.320 --> 12:11.600
It's a projection.

12:11.600 --> 12:16.320
I also have to clip them if they go through or if they come from outside the grid and

12:16.320 --> 12:18.120
enter it, et cetera.

12:18.120 --> 12:22.560
Then I can render a new map with the projected features, which looks like this with the grid

12:22.560 --> 12:24.920
and like this without the grid.

12:24.920 --> 12:28.120
And we can look to the two maps side by side.

12:28.120 --> 12:30.120
Yeah, that's it.

12:30.120 --> 12:40.240
We have what we wanted, a map that shows the full itinerary from Nantes to Angers.

12:40.240 --> 12:42.040
We can still identify things.

12:42.760 --> 12:47.840
What I really like with StreetMap is that locally, if I'm going from Nantes at some

12:47.840 --> 12:52.800
point here, I know that I have Laloir on my right and the Scarke-Fou on my left.

12:52.800 --> 12:57.440
And those local information remain true in the BENT map.

12:57.440 --> 13:01.600
At some point, the Scarke-Fou on my left, the Laloir on my right, et cetera.

13:01.600 --> 13:08.200
You preserve local context at the price of having BENT lines around.

13:08.200 --> 13:11.760
In OSRD, this is how it looks like.

13:11.760 --> 13:12.840
This is a screenshot.

13:12.840 --> 13:17.680
I hope to show you something that works better in a minute.

13:17.680 --> 13:19.840
So yeah, it brings a lot of context.

13:19.840 --> 13:27.040
But when you zoom in precisely inside to the train in OSRD, you can see the exhaustive

13:27.040 --> 13:29.480
infrastructure, all the tracks.

13:29.480 --> 13:34.840
We didn't have signals yet, but it will come soon.

13:34.840 --> 13:39.400
And yeah, so it works for almost any path.

13:39.400 --> 13:44.360
It's known there's no loops, right?

13:44.360 --> 13:46.960
And it does bring context.

13:46.960 --> 13:49.760
With the current instantiation, we lose the Mabel data.

13:49.760 --> 13:54.400
It means that we have to load everything at once and render the map at once.

13:54.400 --> 13:59.480
But we cannot, like, if I zoom in, I will see more things with a better definition.

13:59.480 --> 14:01.920
It might come sometimes later.

14:01.920 --> 14:05.360
And it's a bit slow at the moment because we have to load everything and translate it

14:05.360 --> 14:06.360
at once.

14:06.800 --> 14:09.800
Yeah, demo, that's going to be really quick.

14:09.800 --> 14:11.720
So there's just a storybook.

14:11.720 --> 14:15.720
So it's on the OSRD UI project.

14:15.720 --> 14:18.880
If you want, you can just ask to the OSRD people.

14:18.880 --> 14:22.880
This is the project that's been moved out of the OSRD, which means that you can actually

14:22.880 --> 14:24.800
use it without OSRD data.

14:24.800 --> 14:29.960
It's just a react component that embeds some dependencies.

14:29.960 --> 14:35.960
And yeah, this is from Nantes to Marseille.

14:35.960 --> 14:39.600
Think with path.

14:39.600 --> 14:44.000
You have, yeah, on your right, you will first have this big ocean.

14:44.000 --> 14:50.600
And then later, there's Toulouse, there's the Pyrenees, and then the Mediterranean Sea.

14:50.600 --> 14:53.200
So it works as we wanted, lots of context.

14:53.200 --> 14:57.400
And also in OSRD, Roulmante-Tembourg, drumrolls.

14:57.400 --> 14:58.960
OK.

14:58.960 --> 15:01.680
This is the path I showed earlier.

15:01.680 --> 15:09.720
The trains, when I over train on the graph, I can see it on my strip map.

15:09.720 --> 15:16.680
And when I zoom in, I will have the actual infrastructure.

15:16.680 --> 15:19.240
They should be, yeah, OK.

15:19.240 --> 15:24.600
I see that the train changes swaps tracks here.

15:24.600 --> 15:25.840
That's nice.

15:25.840 --> 15:27.960
OK.

15:27.960 --> 15:29.840
That's going to be it for the demo.

15:29.840 --> 15:30.840
Thank you very much.

15:30.840 --> 15:31.840
Thank you.

15:31.840 --> 15:32.840
Thank you.

15:32.840 --> 15:33.840
Thank you.

15:33.840 --> 15:34.840
Thank you.

15:34.840 --> 15:35.840
Thank you.

15:35.840 --> 15:36.840
Thank you.

15:36.840 --> 15:37.840
I can probably take one or two questions.

15:37.840 --> 15:38.840
I'll need two minutes.

15:38.840 --> 15:39.840
So one or two questions.

15:39.840 --> 15:40.840
Sorry.

15:40.840 --> 15:51.840
Does this projection look good with photos of satellite imagery, or would it look really

15:51.840 --> 15:52.840
strange?

15:52.840 --> 15:59.760
Yes, it might look a bit strange.

15:59.760 --> 16:04.080
But actually, when the grid is quite smooth, like the one I showed earlier, where the triangles

16:04.080 --> 16:07.440
are just slightly bent, it might work.

16:07.440 --> 16:10.640
The thing is, I only work with vector data right now.

16:10.640 --> 16:12.400
But I could actually project pixels.

16:12.400 --> 16:16.200
But if I project pixels, you will have larger pixels.

16:16.200 --> 16:18.840
Yeah, a real sharp turn.

16:18.840 --> 16:21.160
It would skew things.

16:21.160 --> 16:22.160
Yes.

16:22.280 --> 16:27.160
LoÃ¯c has tried with some path that starts somewhere and goes just next to this somewhere

16:27.160 --> 16:30.160
later, and this is bad.

16:30.160 --> 16:32.160
For now.

16:32.160 --> 16:33.160
For now.

16:33.160 --> 16:39.160
Do you know how these maps were made before by bus maps in Paris, at some point?

16:39.160 --> 16:40.160
By hand.

16:40.160 --> 16:41.160
I'm quite sure it's by hand.

16:41.160 --> 16:42.160
But I don't have any proof.

16:42.160 --> 16:48.160
But I know that when I saw the amazing schematics maps of the infrastructure inside SNCF, and

16:48.160 --> 16:50.760
I asked, wow, what's the algorithm?

16:50.760 --> 16:52.760
What algorithm?

16:52.760 --> 16:56.760
So I bet it's by hand.

