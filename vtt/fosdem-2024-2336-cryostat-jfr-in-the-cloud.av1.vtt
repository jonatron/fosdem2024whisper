WEBVTT

00:00.000 --> 00:13.480
Hello everyone. My name is Chris Ma and I am the manager of the Java monitoring team

00:13.480 --> 00:19.960
at Red Hat. Back in 2020, if you had come to this Java

00:19.960 --> 00:29.560
Dev Room here at Fosdom, my colleagues talked about a project called ContainerJFR. And that

00:29.560 --> 00:36.200
today is, Cryostat is the direct evolution of that project. Today I want to share with

00:36.200 --> 00:43.960
you guys the progress of that, the project. Before I jump into Cryostat, I just wanted

00:43.960 --> 00:51.440
to share a screenshot that depicts a demo of a sample pet clinic application that you've

00:51.440 --> 00:57.840
probably all seen before. And for the purposes of this demo, that pet clinic application

00:57.840 --> 01:06.120
is deployed in the cloud. So here's that pet clinic application. It does everything that

01:06.120 --> 01:13.760
you would expect a sample pet application to do. Now let's just say as a developer, this

01:13.760 --> 01:20.240
application has performance issues such as having abnormally high resource consumption

01:20.240 --> 01:28.560
or abnormally high response latency. What would you do? Now I kind of spoiled it with

01:28.560 --> 01:40.240
my title with Java Flight Recorder, but JFR is the first thing that pops into my mind.

01:40.240 --> 01:44.520
I know my colleague Robert talked a little bit about JFR and his early presentation,

01:44.520 --> 01:52.320
but as a quick refresher, for those who don't know what JFR Flight Recorder is, JFR is a

01:52.320 --> 01:59.360
profiling and event collection framework for Java. It gathers low level application behavior

01:59.360 --> 02:06.280
such as garbage collection metrics, memory allocation, and much more. It is built into

02:06.280 --> 02:12.400
the JDK, is low overhead, and therefore is suited for production environments. You can

02:12.440 --> 02:20.880
also use the low overhead recording infrastructure for your own event types. It pairs well with

02:20.880 --> 02:27.320
JDK, JMC, which is JD Commission Control, which is an analysis tool used to visualize

02:27.320 --> 02:38.080
JFR recordings in flame graphs, histograms, and many other visualizations. So going back

02:38.120 --> 02:44.120
to the pet clinic application, how do I use Java Flight Recorder with this application?

02:44.120 --> 02:56.320
Well, you might think I'll go into my trusty terminal, start JCommand, but then await. This

02:56.320 --> 03:03.200
pet clinic application is actually deployed in the cloud. And so herein lies a number

03:03.240 --> 03:16.240
of problems. I don't necessarily have access to the root terminal. Where and how do I access

03:16.600 --> 03:23.600
the JFR outputs files? I don't have any place to store them. What if I have multiple applications

03:24.120 --> 03:31.120
that I want to profile with JFR? Using JFR locally, I can only start it on one application

03:31.680 --> 03:38.680
at a time. And then lastly, what if my application shuts down unexpectedly? There is no records

03:42.680 --> 03:49.680
on spontaneous shutdown, and all of the JFR data would be wiped. So this is where I would

03:53.520 --> 04:00.520
introduce CrowdStat, and how can CrowdStat help? So CrowdStat can be added to help manage

04:01.120 --> 04:08.120
JFR recordings in the form of a web view. It is designed to work with Kubernetes pods,

04:08.520 --> 04:15.520
and it used Kubernetes persistent volumes to backup recordings. It also has functionality

04:15.720 --> 04:22.720
to capture JFR recordings if an application shuts down unexpectedly. Some additional benefits

04:22.920 --> 04:29.920
is that we can also define rules to automatically create recordings for matching JVMs, view time

04:34.720 --> 04:41.720
series metrics in Grafana dashboards. You can also export the JFR recordings for more

04:41.720 --> 04:48.720
detailed analysis in JMC, and then it can be used for applications also developed on

04:49.080 --> 04:56.080
frameworks such as Quarkis and Spring Boot to name a few. So I have a picture here of

05:00.920 --> 05:07.920
the web console view when I first start CrowdStat. And in this example, as you can see on the

05:10.000 --> 05:16.680
left-hand panel, is starting at the topology view. And this topology view gives you a sort

05:16.680 --> 05:22.680
of a bird's-eye view of all the applications CrowdStat can connect to. Starting from the

05:22.680 --> 05:29.680
bottom, you'll see that it is using the Kubernetes API. So it also works for Podman. So you would

05:30.800 --> 05:37.800
see Podman in that, I guess, configuration. The second, my apps, is the namespace that

05:38.800 --> 05:45.800
I have defined CrowdStats to be able to connect with applications within that namespace. And

05:50.120 --> 05:57.120
then you can see the Spring PetClinic acts application there. The reason why in this

05:57.600 --> 06:04.600
topology view you see that there's two PetClinic nodes is because I've scaled up the number

06:05.000 --> 06:12.000
of PetClinic pods just to give you a flavor of the ability in scale deployments that CrowdStat

06:18.520 --> 06:25.520
would be able to also access the multiple replicas. In the top view, you'll see there's

06:25.680 --> 06:32.680
some filtering. So in a large, maybe large scale deployment, you might want to narrow

06:34.560 --> 06:41.560
in on certain applications. These filtering capabilities allow you to specifically hone

06:44.000 --> 06:51.000
in on our target application. One thing I would like to note is that you might be

06:52.000 --> 06:59.000
wondering how I sort of ended up at this page and to sort of set up some context as

06:59.920 --> 07:06.920
to how I was able to set up CrowdStats to work with these PetClinic applications. I have

07:07.840 --> 07:14.840
a couple steps or a couple configuration that needed to happen in the background to get

07:14.840 --> 07:21.840
a demo or this setup working. So one of the things I did was I installed the CrowdStat

07:22.000 --> 07:29.000
operator on Operator Hub and installing the operator basically is a way of automating

07:31.080 --> 07:37.200
the CrowdStat deployment. Another notable sort of configuration responsibility of the

07:37.200 --> 07:43.720
operator is that it can help define the namespace boundaries in which CrowdStat can be used.

07:43.720 --> 07:49.680
So in my particular example, I configured it in sort of the most basic simple case,

07:49.680 --> 07:56.680
CrowdStat in a single namespace. CrowdStat does have the capabilities for multi namespace

07:58.280 --> 08:05.280
support. So if you have applications that span across multiple namespaces, CrowdStat

08:06.200 --> 08:13.200
can be used in those scenarios as well. And lastly, in order for CrowdStat to sort of

08:15.960 --> 08:22.960
communicate with the target applications, there are two methods of connectivity. And

08:23.880 --> 08:30.880
the first, I guess, methodology is using RemoteJMX. This requires setting up various

08:31.600 --> 08:38.600
JMX environment variables, also potentially configuring TLS or SSL, and then also exposing

08:41.960 --> 08:48.960
a port on the route of the Petcom link service. The other option is the CrowdStat agent. And

08:49.080 --> 08:56.080
so this is the recommended approach. This would involve basically, we provide a CrowdStat

09:02.360 --> 09:07.880
agent jar that you would build with your container image, and that would allow sort of auto

09:07.880 --> 09:14.880
discovery of that target applications. So what we're going to do is we're going to

09:18.960 --> 09:25.960
do a little bit of a demo. One of the next things that I wanted to show that's CrowdStat

09:25.960 --> 09:32.960
is capable of is, of course, the sort of bread and butter of CrowdStat, which is creating,

09:33.760 --> 09:40.760
creating JFR, well, starting JFR recordings. And so this is a sort of a simple simplistic

09:41.760 --> 09:48.760
UI of how you would define the creating that JFR recording. You set the duration. You can

09:48.960 --> 09:55.960
set the template. And this is synonymous to a JFR configuration file that you would use

09:55.960 --> 10:02.960
when using JFR locally. Out of the box, it comes with the standard configuration files,

10:06.840 --> 10:13.840
such as profiling it continuous. But you can also define your own sort of custom JFR configuration

10:14.840 --> 10:21.840
files if there are specific events that you want to look for. Lastly, at the bottom, you'll

10:23.720 --> 10:30.720
see there's show metadata options, and I haven't actually sort of expanded that a little bit.

10:31.720 --> 10:38.160
There is the ability, we have added the ability to add labels to your recordings, and this

10:38.200 --> 10:43.520
just allows users, you know, if you have a lot of recordings, you can sort of annotate

10:43.520 --> 10:50.520
or add metadata to these recordings so that you can search for them quicker.

10:57.080 --> 11:04.080
Once you create a recording, so when the recording is created, you can see that I've created

11:05.080 --> 11:12.080
a recording one. It's put duration for 200 seconds. It's still running. What we've added

11:12.560 --> 11:19.560
here is the automated analysis page from JMC. So if you've used JMC before, we basically

11:20.120 --> 11:27.120
took sort of the guts of that automated analysis, like its library, and we've basically just

11:28.440 --> 11:33.840
added it here for simpler access so that you don't have to switch between, you don't have

11:33.840 --> 11:40.840
to necessarily switch between JMC and Criostat. You also see archived recordings in the top,

11:44.400 --> 11:51.400
and that's basically if you create an active recording and you want to put it into storage,

11:52.960 --> 11:59.960
that gives you that ability to do so.

12:00.960 --> 12:07.960
So, as part of gathering the JFR recordings, we do have some, I guess, dashboards to have

12:16.600 --> 12:23.600
a quick look at some of the data coming out from the JVM. Now what I would say is that

12:24.200 --> 12:29.760
the data that you're seeing here is from the MBIN. These are MB metrics and not actual

12:29.760 --> 12:36.760
data from the JFR recording. And so these can actually be, I guess, received in real

12:38.480 --> 12:45.480
time or visualized in real time because the JVM is already, we're just basically visualizing

12:46.000 --> 12:48.040
this data.

12:48.160 --> 12:55.160
I did mention that there are some Grafana dashboards that are also available. And so here's an

12:59.240 --> 13:06.240
example of a, I guess, a JFR snapshot with, I guess, certain metrics. We have some canned

13:08.760 --> 13:15.760
templates that, on Grafana, that you can, when you create a JFR recording, you can open

13:16.760 --> 13:23.760
this and you can see data specific to that, those sort of buckets. Similarly, you can

13:28.320 --> 13:35.320
a little bit more detailed information about heaps. Heap memory, other threads as well,

13:35.840 --> 13:42.840
are available within the Grafana dashboards. One quick thing I want to highlight here is

13:43.120 --> 13:50.120
going back to the Polys view. As you can see, you can do bulk actions, meaning if you have

13:55.960 --> 14:02.960
multiple, if you select multiple applications, you can start recordings for multiple pods

14:06.520 --> 14:12.520
at the same time rather than doing them individually. That kind of simplifies things a little bit.

14:13.560 --> 14:20.560
This is the page for automated rules. It follows the same mindset of bulk actions, but instead

14:28.640 --> 14:33.480
you can sort of query the target application that you want to start the recording for. This

14:33.480 --> 14:40.480
just allows a little bit more granularity when searching for a target JVM.

14:41.480 --> 14:48.480
To kind of just wrap up where we're at with cryostat and what's next, there's a couple

14:51.320 --> 14:58.320
things that we want to sort of focus on. One of them is smart triggers. Smart triggers,

14:58.560 --> 15:03.800
to give you some context about that, smart triggers is a way of dynamically starting

15:03.800 --> 15:10.480
JFR recordings. This would be done through the Java agent or the cryostat agent. Right

15:10.480 --> 15:17.480
now we do have a preview feature where you can specify the metric and the metric value

15:18.000 --> 15:25.000
on when you want the JFR recording to start and then using what kind of JFR configuration

15:25.960 --> 15:32.960
file. What we would like to do with this feature is ultimately maybe make it more user-friendly

15:36.560 --> 15:43.560
so that you don't have to add, say, arguments to the Java agent to start this.

15:44.560 --> 15:51.560
The second thing was just cryostat agent auto configuration. We would like to have the

15:56.240 --> 16:02.520
operator streamlined in the installation for the installation process with the cryostat

16:02.520 --> 16:09.520
agent. I'd say those are the two main things to look out for. We have some upstream sites.

16:09.880 --> 16:16.880
If you want to ask some questions or have any feedback for us, we're always listening

16:19.520 --> 16:22.080
and that concludes my presentation.

