WEBVTT

00:00.000 --> 00:14.720
I will just slowly start as I will today try to give some kind of brief overview of

00:14.720 --> 00:20.960
SPDX tooling. There's a lot out there and I will try to capture some of that,

00:20.960 --> 00:29.160
especially the stuff that is inside the SPDX org on GitHub. So I'm max, maybe

00:29.160 --> 00:35.560
someone saw me already somewhere, that's my coordinates. Pick me if you have questions.

00:35.560 --> 00:46.480
So let's talk about SPDX tooling. I think the first part that I want to go

00:46.480 --> 00:54.960
through are the tools that are provided in the SPDX org and I think we all call

00:54.960 --> 01:00.400
them tools, but they are all libraries and tools and the first one that we just saw,

01:00.400 --> 01:08.440
a wonderful presentation of are the Java tools and I think they are still the most

01:08.440 --> 01:17.800
complete and most actively developed library for SPDX. Thanks to Gary, really a great job.

01:17.800 --> 01:29.560
And if you are unsure, I think the Java tools are a good starting point. They provide the

01:29.560 --> 01:36.920
possibility to implement or to use them low level to implement usage of SPDX in a Java

01:36.920 --> 01:46.000
JDK-based project or they provide a set of command line tools or tools that allow you to do some

01:46.200 --> 01:54.560
easy tasks like converting between formats and view stuff and generate stuff. So that's always a good

01:54.560 --> 02:04.520
starting point. I will be too fast, so there will be time for questions and I went fast through the

02:04.520 --> 02:12.040
Java tools as we just saw them. The next set of tools are the Python tools. I think they have a

02:12.080 --> 02:22.400
similar structure similar to the Java tools. They are also libraries and CLI tools and so

02:22.400 --> 02:29.480
there's a library part. If you have a Python project that you want to generate SPDX, pass

02:29.480 --> 02:40.760
SPDX, work with SPDX, they have the possibility or you can use them in your project to interact with

02:40.840 --> 02:51.640
SPDX. And similar to Java tools, also the Python tools have the CLI part that provides some common

02:51.640 --> 03:02.120
functionality like verifying and validation and converting of documents and files. Maybe a more

03:02.520 --> 03:11.720
interesting thing related to the Python tools is where are they with adoption of SPDX3 and the

03:11.720 --> 03:21.800
Python tools implement the current state of RC1 of the currently latest release candidate, but that

03:21.800 --> 03:30.520
will soon change and it was implemented by hand, not generated from the model. So it's a good starting

03:30.600 --> 03:40.360
point if you want to try out SPDX3 and try how it behaves and how it looks like. And it has

03:41.000 --> 03:47.080
functionality that if you start with an SPDX2 document, it bumps that to an SPDX3 document. So

03:47.640 --> 03:55.240
if you want to experiment with SPDX3, you could also use that to take an SPDX2 document and

03:55.240 --> 04:02.280
just convert it to SPDX3 and look at how it looks like. It has an implementation of the

04:02.280 --> 04:06.360
JSON-LD civilization so you can also see how the serialized format looks.

04:08.920 --> 04:18.760
And what's next with that? I think the big change that is up on the horizon is to migrate that

04:19.320 --> 04:29.000
manually wrote written model to an automatically generated model like we have seen in Gary's

04:29.000 --> 04:39.560
presentation. We also want to use the shackle as an input and get the model as an output to have,

04:39.560 --> 04:51.320
to don't make errors. The next, a pretty new part of the ecosystem that is provided in this

04:51.320 --> 04:57.000
GitHub org is the TypeScript tools. They are called TypeScript since they are written in TypeScript,

04:57.000 --> 05:04.280
but they actually work also with JavaScript and there's a pretty generic build system

05:04.280 --> 05:08.680
behind that so that it should work in every related ecosystem.

05:11.480 --> 05:19.480
What's different to the previous libraries here is that they are not trying to be the complete

05:19.480 --> 05:26.760
universal tool that can do everything and that can convert in every direction, but instead they are

05:27.480 --> 05:34.120
built with a use case in mind like I want to generate a software build of material of a

05:34.120 --> 05:45.080
dependency tree so they do not yet fully implement SPDX. They do not, they can't pass files. They are

05:45.960 --> 05:51.720
very small in lightweight to generate SPDX documents which is fairly helpful especially in the

05:52.280 --> 05:58.840
JavaScript ecosystem where small libraries are usually preferred and based on that

05:59.640 --> 06:07.000
there are already two plugins implemented. For example, there's a yarn plugin that allows you

06:07.000 --> 06:13.880
with two lines of code to generate a software build of material of a yarn project and that's,

06:13.880 --> 06:18.760
so one line is please install that plugin and the second line is please generate an

06:18.760 --> 06:29.160
S-Bomb and then you have an S-Bomb and the second thing is plugin for rollup. Rollup is

06:29.160 --> 06:35.080
one of these build tools in the JavaScript ecosystem that builds a single JavaScript

06:35.080 --> 06:44.600
file from a lot of files and here we use SPDX to encode which files from the source site went

06:44.600 --> 06:51.160
into the output so that you have traceability on the build process. So that's the second current

06:52.440 --> 06:59.160
plugin that is also on GitHub and just as a side note to mention it also the MPM tool

07:00.120 --> 07:08.840
recently got native support for S-Bomb generation for SPDX and CDX. That's why we didn't bother to

07:09.800 --> 07:16.840
to implement it there but maybe at some point we can get them to use the SPDX library and therefore

07:16.840 --> 07:20.360
they might get SPX free support at some point automatically.

07:24.280 --> 07:33.880
The last big library in the SPDX arc are the tools for Go. They are modular, they have a lot of

07:33.880 --> 07:40.600
the same functionality. I'm not very deep into Go development. There are probably other people

07:40.600 --> 07:50.920
that can answer the questions there but we also have tooling in Go. So that was the first part of

07:50.920 --> 08:00.600
tools from the tool overview. The next thing is there's also SPX free meta tooling. As we heard

08:00.600 --> 08:06.440
in the previous presentation there's a tool that takes the spec and generates machine readable

08:06.440 --> 08:16.120
output that can be used and Joshua wrote something that takes one of these outputs, the shackle,

08:16.120 --> 08:24.440
and already generates Python code from that. So there's already the first building block to

08:24.440 --> 08:30.280
generate code out of the model and it's with templating and it's generic so hopefully it will

08:30.280 --> 08:36.040
be soon expanded with a lot of other programming languages and that might be a very valuable tool

08:36.040 --> 08:45.960
in the future. And there are also other projects as you can imagine. That's a huge list. There's a

08:47.960 --> 08:56.120
page where tools supporting SPDX are listed. I think I copied it rather complete but I think

08:56.120 --> 09:02.200
I missed some of them. If you don't see yourself there, check on that list if you have a tool that

09:02.200 --> 09:09.240
supports SPDX and I think on the page there's also described how you can add yourself to this list.

09:15.000 --> 09:19.960
Maybe. Yeah and that's it. That's tooling and that's questions.

09:20.920 --> 09:33.320
Hi. So I'm working on a project called Z-Hypervisor and it's based on a C and it uses C, YAML,

09:33.320 --> 09:38.360
RST. I want to understand from a new view perspective that how do I make the project

09:38.360 --> 09:45.240
compatible with SPDX B.O overnight? Where do I start and what changes do I need to do?

09:46.200 --> 09:52.680
Okay so you're working on Z-Hypervisor and you want to know how to

09:53.400 --> 09:59.000
generate SPDX for this project and it's a C project.

09:59.000 --> 10:03.720
It's a C-Bus project so there is a hypervisor, there are tools and there are some documents.

10:03.720 --> 10:08.360
I want to know how to generate SPDX. How to make it compatible?

10:09.320 --> 10:16.280
I think that depends a lot on which build systems, what is happening in the build

10:16.280 --> 10:23.080
and how can you trace what's happening. Is it hardcoded somewhere? Is it C-Make or I don't know.

10:23.080 --> 10:28.920
And then you need to look for the right tools that can extract that information

10:29.560 --> 10:35.080
and maybe I think there's for example you could place if they're.

10:38.760 --> 10:41.080
Zephyr has.

10:49.560 --> 10:53.400
I need to repeat that answer. The Zephyr repository contains

10:54.600 --> 11:01.080
user C-Make and can produce SPDX so that might be a good point to look at.

11:01.080 --> 11:04.520
I also say right now it's 2.3 but we will be moving into 3.0.

11:04.520 --> 11:07.000
Right now it's 2.3 but it will be moving to 3.0.

11:10.280 --> 11:15.880
There are a bit different flavors of S-Bombs from just source files all the way to runtime and

11:15.880 --> 11:19.720
how many of the tools are supporting all the different types of S-Bombs.

11:20.440 --> 11:26.280
The question is there are many many different format or different S-Bombs types like runtime,

11:26.280 --> 11:31.080
build and so on and how many tools are supporting the different formats. I think

11:31.080 --> 11:37.080
my good position is that all these libraries are fairly generic. They are what you use in a tool

11:37.080 --> 11:44.520
that would generate a build S-Bombs or would generate a runtime S-Bombs. So it's a tooling

11:44.520 --> 11:55.720
question or usage question but I think it's there are many tools that are doing one or the other

11:55.720 --> 11:59.480
of the formats.

