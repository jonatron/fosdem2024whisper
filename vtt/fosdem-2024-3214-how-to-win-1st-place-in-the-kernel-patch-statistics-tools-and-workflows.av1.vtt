WEBVTT

00:00.000 --> 00:05.000
First talk is by Uwe.

00:05.000 --> 00:10.000
How to win first place in the kernel patch statistics.

00:10.000 --> 00:12.000
Good morning.

00:12.000 --> 00:16.000
Soundcheck seems still good.

00:16.000 --> 00:21.000
I'll talk to you about how to get many patches in the kernel.

00:21.000 --> 00:28.000
The starter for the talk is the LWN patch statistics.

00:28.000 --> 00:33.000
That is presented after each kernel release where you get statistics.

00:33.000 --> 00:37.000
But actually this shouldn't be your motivation to get patches in the kernel.

00:37.000 --> 00:39.000
This is just a nice side effect.

00:39.000 --> 00:44.000
But it was a good starter for the talk.

00:44.000 --> 00:47.000
First about me and my employer.

00:47.000 --> 00:49.000
I'm Uwe Kleinekunig.

00:49.000 --> 00:55.000
I work at Pangotronics as a kernel engineer since 2008.

00:56.000 --> 01:01.000
I have several jobs in the kernel.

01:01.000 --> 01:04.000
I'm a PWM maintainer.

01:04.000 --> 01:11.000
But I already contributed patches through all the kernel subsystems.

01:11.000 --> 01:16.000
You can reach me via IRC and PGP if you have questions after the talk.

01:16.000 --> 01:20.000
If you are interested in the tools I present,

01:20.000 --> 01:25.000
I didn't create a repository for that.

01:25.000 --> 01:28.000
If you have questions or want to use the tools,

01:28.000 --> 01:30.000
just contact me.

01:30.000 --> 01:34.000
My email address isn't listed here, but you should be able to Google it.

01:34.000 --> 01:39.000
Pangotronics is a company that exists a bit longer than I'm with them.

01:39.000 --> 01:46.000
We're doing embedded Linux consulting, mostly for German industrial customers.

01:47.000 --> 01:52.000
In the kernel, my colleagues and me,

01:52.000 --> 01:57.000
we have several, we're listed several times in the maintainer's file.

01:57.000 --> 02:04.000
So we're working with our customers also in the mainlining business.

02:04.000 --> 02:07.000
We're selling them that mainlining is a good idea.

02:07.000 --> 02:09.000
Yeah.

02:10.000 --> 02:15.000
So if you have a good idea of what to change in the kernel,

02:15.000 --> 02:18.000
this is the process you have to work with.

02:18.000 --> 02:23.000
You put your changes in the end in a mail

02:23.000 --> 02:28.000
and send them to subsystem specific mailing list.

02:28.000 --> 02:35.000
Then ideally you get prompt review by the maintainers who are responsible for the code.

02:36.000 --> 02:41.000
Then the patches are picked up and sent to Linux Torward through in the end,

02:41.000 --> 02:44.000
creates a release from it.

02:49.000 --> 02:56.000
If you have a big series, you have to apply the same things.

02:56.000 --> 02:59.000
You have to do for single patches too.

02:59.000 --> 03:07.000
This is the usual or a short list of things you have to care for.

03:07.000 --> 03:16.000
These are not very hard rules, but this is what I think is the sensible set I use next as a base.

03:16.000 --> 03:23.000
Next is the integration tree for the upcoming kernel release.

03:23.000 --> 03:29.000
This is a good idea because if you send patches based on what is in Linux Torward's tree,

03:29.000 --> 03:33.000
you often get feedback that there is already some development happening

03:33.000 --> 03:37.000
and that your patch doesn't apply, so you have to rebase.

03:37.000 --> 03:40.000
If you use next, this is minimized.

03:40.000 --> 03:48.000
Even if you think you are a good kernel developer and you don't do the beginners mistake,

03:48.000 --> 03:56.000
use check patch. This is a small Perl tool that catches the obvious errors you can do with your patches.

03:56.000 --> 04:00.000
You forget your sign off or there are spelling mistakes and things.

04:02.000 --> 04:09.000
It's much nicer to get these things said to you by check patch then if you send the patches out

04:09.000 --> 04:12.000
and people tell it to you.

04:13.000 --> 04:18.000
The same applies for build testing.

04:18.000 --> 04:24.000
Do build tests ideally on several architectures because even for trivial patches,

04:24.000 --> 04:27.000
it's quite easy to break the build.

04:27.000 --> 04:31.000
The same reasoning as with check patch.

04:31.000 --> 04:37.000
For single patches, it's good to describe the change as well.

04:37.000 --> 04:44.000
The idea is that you want the maintainer to understand your motivation and the things you are changing.

04:44.000 --> 04:50.000
You want to make it easy for them to apply the patches to understand the benefit.

04:50.000 --> 04:55.000
This is still more important if you do massive patch sanding

04:55.000 --> 05:00.000
because you are adding much more burden to the maintainers.

05:00.000 --> 05:04.000
Also, addressing the right people.

05:04.000 --> 05:08.000
You don't want to miss the important people obviously,

05:08.000 --> 05:11.000
but you also don't want to annoy the others.

05:11.000 --> 05:19.000
I once sent a 600 patch series to the kernel mailing list and several people were annoyed.

05:19.000 --> 05:22.000
Don't repeat that.

05:23.000 --> 05:37.000
To get a big project, you have to pick something that applies to many drivers.

05:37.000 --> 05:45.000
What I did in the past is the remove callback for SPI drivers returned an integer,

05:45.000 --> 05:50.000
but that value is ignored by the core,

05:50.000 --> 05:57.000
which resulted in many drivers returning an error code

05:57.000 --> 06:02.000
in the expectation that there is some error handling in the upper layers,

06:02.000 --> 06:08.000
but which is wrong and this resulted in several resource leaks.

06:08.000 --> 06:10.000
The same for platform devices.

06:10.000 --> 06:15.000
This is my current quest, which is a bit more massive

06:15.000 --> 06:22.000
because there are more than 2,000 platform drivers that I have to touch.

06:22.000 --> 06:29.000
I am in the middle approximately, so there are still a few more patches to come.

06:29.000 --> 06:39.000
I have a few further ideas, but I will come to that when I am gone with this quest

06:39.000 --> 06:46.000
because doing more than one such quest at one time is really hard.

06:46.000 --> 06:52.000
Usually it is not hard to find something new to patch.

06:52.000 --> 07:00.000
If you touched all platform device drivers, you have seen quite some stuff

07:00.000 --> 07:05.000
and there is always something you can fix.

07:05.000 --> 07:12.000
What is very helpful to generate the patches is the tool Coxinell.

07:12.000 --> 07:22.000
It allows to describe a patch in a very high level form where you can...

07:22.000 --> 07:33.000
For example, this is a small version of a patch where I first try to identify...

07:33.000 --> 07:43.000
...platform drivers that have a remove function that does not return zero,

07:43.000 --> 07:48.000
which is the first step before converting them to return void.

07:48.000 --> 07:52.000
Maybe I can...

07:52.000 --> 08:01.000
The syntax is just that you say, OK, I have any expression that is not zero

08:01.000 --> 08:07.000
and I just want to patch that in all remove functions of a platform driver,

08:07.000 --> 08:14.000
changes the return value from that non-zero value to zero.

08:14.000 --> 08:23.000
This is just to find the drivers that are affected by the quest.

08:24.000 --> 08:33.000
It is very hard to create a Coxinell patch that does the right thing for all drivers already.

08:33.000 --> 08:37.000
There is always some handwork that you have to find.

08:37.000 --> 08:46.000
For example, for indention, which is usually get wrong by Coxinell.

08:46.000 --> 08:54.000
With Coxinell, you don't have a tree where all drivers are adopted in the end.

08:54.000 --> 09:01.000
If you have 2,000 affected files, you don't want to commit by hand.

09:01.000 --> 09:12.000
You have to apply some shell scripting to make a commit for each file,

09:12.000 --> 09:14.000
which I think is the right thing.

09:14.000 --> 09:21.000
For some maintainers, they prefer to convert all their drivers in their subsystem in a single patch.

09:21.000 --> 09:29.000
But at least for sending it out and for review, it's easier to have one patch per driver.

09:29.000 --> 09:37.000
What I then do is I iterate overall changed files and commit it.

09:37.000 --> 09:42.000
The challenge here is to pick the right subject prefix.

09:42.000 --> 09:47.000
In the first approach, I just put the file name here.

09:47.000 --> 09:58.000
Then I go several times over my branch and use Filter Branch to adapt the subject prefix.

09:58.000 --> 10:05.000
This is depending on the subsystem, how they want it, if they want a capital or a small letter here,

10:05.000 --> 10:18.000
and if the separator is a colon or a hyphen, you have to check all the commits for the subsystem to get this right.

10:18.000 --> 10:24.000
I have a script that I keep in a scratch file.

10:24.000 --> 10:35.000
You see a short part of it where for some common drivers, I can adapt the subject prefix accordingly.

10:35.000 --> 10:41.000
This is much quicker than doing it by hand.

10:41.000 --> 10:49.000
Then here comes my usual workflow for formatting the patches in a mail and sending them out.

10:49.000 --> 10:54.000
This is the usual format patch call.

10:54.000 --> 11:02.000
I always put it in a sub-directory that I always call w. I don't know what it stands for.

11:02.000 --> 11:09.000
Then I have a script that I pass all my patches.

11:09.000 --> 11:12.000
I'll come to that in a moment.

11:12.000 --> 11:19.000
I edit the cover letter, which is a quite important part of patch theories,

11:19.000 --> 11:32.000
where you have to describe the overall idea of what you want to do and to show the benefit of the patch theories.

11:32.000 --> 11:41.000
This is the, I think, or I hope, the first thing that people will read about my patch theories.

11:41.000 --> 11:49.000
This has to be a good description to, again, make it easy for the maintainers to pick it up.

11:49.000 --> 11:54.000
Then I edit the list of recipes.

11:54.000 --> 12:00.000
I edit the recipes to the individual patches and send it out.

12:00.000 --> 12:05.000
Then what is a critical thing for tracking later,

12:05.000 --> 12:18.000
if I note for every patch that I send out in the commit, the message ID I used to send the patch out.

12:18.000 --> 12:21.000
This is important later.

12:21.000 --> 12:34.000
If your patch doesn't get applied, I can quickly find the conversation in my mail client to send a ping or to ask what's up.

12:34.000 --> 12:50.000
Then I put the commits I sent out in a dedicated branch near the top to track all the patches I have already sent out.

12:50.000 --> 12:54.000
This is the L file.

12:54.000 --> 13:00.000
This is generated using the getMaintainer script,

13:00.000 --> 13:07.000
which helps you to identify the interested persons for a given patch.

13:07.000 --> 13:12.000
This is, well, in the end, it's shell script.

13:12.000 --> 13:17.000
Usually you really have to adapt the list of people.

13:17.000 --> 13:25.000
For example, if I send out a patch series adapting several SPI drivers,

13:25.000 --> 13:31.000
I usually want that the SPI maintainer takes the patch series as a whole.

13:31.000 --> 13:44.000
What getMaintainer gives you, however, is that for the, or in this case, for the upmail PWM driver,

13:44.000 --> 13:53.000
that the upmail maintainers are listed as contacts.

13:53.000 --> 14:05.000
What I do then here, of course, one step back, this address append is another script that takes a list of patches

14:05.000 --> 14:12.000
and adds the people listed with minus t to two, to the two header in these patches,

14:12.000 --> 14:19.000
and the addresses on persons with a pass to option c to cc.

14:19.000 --> 14:25.000
So what I usually do for, well, this is a PWM series now,

14:25.000 --> 14:36.000
what I usually do is I replace with editor magic all minus t by minus c to first have them all on the cc list,

14:36.000 --> 14:48.000
and then I change individual lines back to minus t to just address the maintainer.

14:48.000 --> 14:57.000
And then I have a longer VIM command here to fix the syntax because currently it doesn't work.

14:57.000 --> 15:05.000
I start a quote here and I have the descriptions from getMaintainers here in the end,

15:05.000 --> 15:14.000
and this command above just throws away the parented expression and adds the closing quote.

15:14.000 --> 15:20.000
And then I can execute it and have all the people in the right mails.

15:20.000 --> 15:32.000
And what I'm doing here also is for each patch, I add the cover letter here to ensure that each person or each list that gets a patch

15:32.000 --> 15:37.000
also receives the cover letter to give the right context.

15:37.000 --> 15:46.000
This is also important if you have a patch series where you have dependencies where I introduce a helper in the first patch,

15:46.000 --> 15:55.000
and then this is used in the second. It's a good idea to also at least carbon copy the recipe for the second patch

15:55.000 --> 16:06.000
with the patch that introduces the helper such that they can easily understand the second patch.

16:07.000 --> 16:17.000
Here is a short snippet of my git config which is important for sending out or which I rely on.

16:17.000 --> 16:27.000
One is I blind carbon copy me all patches to make sure that I have all patches I send out in my index

16:27.000 --> 16:32.000
to be able to reply later to it.

16:32.000 --> 16:42.000
This is a good idea if you get sent email. This makes git send email ask before sending out each mail,

16:42.000 --> 16:50.000
which is if you have a big folder of patches, you don't want to accidentally send it out.

16:50.000 --> 17:01.000
So this gives you a chance to look again over the list of recipes and abort maybe if there is a problem.

17:01.000 --> 17:12.000
This setting is important for the nodes I added to the commits I had here.

17:12.000 --> 17:30.000
If I rebase them to be included in my tracking branch, the information doesn't get lost, so the nodes are copied on rebase.

17:30.000 --> 17:41.000
For sending patch series out and addressing the right people, it's beneficial to add one series per subsystem.

17:41.000 --> 17:54.000
That means not less. Don't mix several subsystems in a single series and also don't send several series with a similar

17:54.000 --> 18:00.000
or the same topic to the same subsystem. This is maybe a bit subjective.

18:00.000 --> 18:09.000
Some people, for example, NetDev is an example, they say don't send big series if you have say 30 patches,

18:09.000 --> 18:23.000
better use two or three series. It's a bit of experience to know this, but in general it's a good idea to do one series per subsystem.

18:23.000 --> 18:33.000
To save time and communication overhead, it's a good idea to be explicit about the expectations, how your patch series should be merged.

18:33.000 --> 18:40.000
For example, you can write into it, I expect this series to be taken by the SPI maintainer as a whole,

18:40.000 --> 18:46.000
even if there are maybe one or two patches which doesn't fix this topic.

18:47.000 --> 18:57.000
This doesn't have to be fixed and people can disagree, but this is better than if you have, you get no feedback and you don't get your series applied,

18:57.000 --> 19:01.000
and then you have to ask who will apply.

19:01.000 --> 19:12.000
So state your idea and, yeah, such that people can know what you think should be the best path.

19:13.000 --> 19:28.000
Another good idea is a slow start. What I mean by that is if you have a patch quest and you have to address drivers in 50 subsystems,

19:28.000 --> 19:35.000
don't send them all out at once. Start with the first one, pick something actively maintained,

19:35.000 --> 19:43.000
and then take the feedback to improve what you send to the other subsystems.

19:43.000 --> 19:49.000
So first send out one and then you can slightly increase your speed.

19:49.000 --> 19:57.000
But the effect is that you get better descriptions, people ask questions what they don't understand,

19:57.000 --> 20:02.000
and you can improve on what you write to the next maintainers.

20:06.000 --> 20:13.000
Good. I already presented you, I have a branch for all patches in my quest.

20:14.000 --> 20:22.000
I base this on the latest RC1 release. This is a bit smoother than basing it on next,

20:22.000 --> 20:30.000
where there's much more movement and it's easier to rebase from one RC1 to the next RC1,

20:30.000 --> 20:36.000
because this is all linear and you know what patches are really in.

20:36.000 --> 20:41.000
Occasionally it happens that you get a patch into next and it is dropped again,

20:41.000 --> 20:50.000
and in such cases you would lose patches, because they fall out of your tracking branch

20:50.000 --> 20:56.000
as they are included below, and then if you rebase the next time they are just missing.

21:01.000 --> 21:09.000
My tracking patch looks as follows, it's somewhere down below, there is the RC1 release,

21:09.000 --> 21:24.000
and then I have all the patches I sent out, and the few top commits is a collection of the remaining drivers that I have to adopt.

21:24.000 --> 21:31.000
This is one commit for all remaining patches, for all remaining drivers.

21:31.000 --> 21:38.000
In this case it's two such commits, because some drivers are a bit more complicated,

21:38.000 --> 21:53.000
they are not correctly adapted by Coxinell, so I track them separately to be able to take the necessary care.

21:53.000 --> 22:00.000
The top commit is where I rely on all platform drivers being converted,

22:00.000 --> 22:10.000
where I change the remove callback to actually return void, which is only possible after all changes are made.

22:10.000 --> 22:15.000
So it's the top commit to have the series still bisectable.

22:16.000 --> 22:27.000
What is really useful is the cherry command line parameter to lock, which marks all patches with a plus or an equal sign,

22:27.000 --> 22:37.000
and the difference is that the patches marked with an equal sign are already included in the left hand side of the expression here.

22:37.000 --> 22:47.000
So the mailbox patches were already applied in next, but not in the last RC1 yet, so they are still included in my branch,

22:47.000 --> 22:54.000
and the Macintosh patches are not yet included, so they are plus the work in progress patches,

22:54.000 --> 22:59.000
obviously I also have a plus bit, but that's less important.

23:00.000 --> 23:17.000
There's a similar option cherry pick, which has the effect that it lists only the patches that are marked with a plus in this syntax.

23:17.000 --> 23:23.000
This is the one I usually go through if I want to track which patches need some more care,

23:23.000 --> 23:29.000
which need a pin to make the maintainer act on them.

23:29.000 --> 23:39.000
I have this below each patch, ideally I have this marking I added that I already talked about in an earlier slide,

23:39.000 --> 23:55.000
and with not much, which is a full text mail indexer, it's quite easy to open a mailbox that contains the mail with the given message ID,

23:55.000 --> 24:01.000
and all the mails in the same thread.

24:01.000 --> 24:11.000
So if I open the virtual mailbox, well the thread belongs here actually, this is broken in a strange way,

24:11.000 --> 24:21.000
I see the patches I sent out, and in this case I can see, okay there was no reply,

24:21.000 --> 24:30.000
maybe it fell through the cracks at the maintainer or I added the wrong person,

24:31.000 --> 24:45.000
in this case I see it's also nearly a month old, so maybe it's time to send a ping and ask are there any problems or what's the state of the series.

24:45.000 --> 24:51.000
This is very useful to have an easy connection from the git commit to your mail,

24:51.000 --> 24:57.000
and not much integration of much really helps here.

25:00.000 --> 25:09.000
Occasionally it happens that you get feedback where you have to adapt things where things are not so optimal.

25:09.000 --> 25:27.000
In this case B4 is a great tool that I really recommend to use, even if you're not a maintainer, it's quite handy to collect the reviewed by and the act by text.

25:28.000 --> 25:35.000
Occasionally it happens that you already did some restructuring of your branch,

25:35.000 --> 25:43.000
and then git range div is very useful where you can compare the two different histories,

25:43.000 --> 25:52.000
the one that you already adopted, and the one recreated by B4 based on your previous submission,

25:52.000 --> 25:57.000
where you can see the difference where are texts, where are no texts, where did you change the code,

25:57.000 --> 26:06.000
and this really helps to create a single series that has all the improvements that you created on both sides.

26:06.000 --> 26:10.000
This is what I wanted to present to you.

26:10.000 --> 26:18.000
If you have questions either here in the forum or later, don't hesitate to ask me,

26:18.000 --> 26:25.000
or after FOSDEM contact me by email or ISE, send me your questions.

26:25.000 --> 26:30.000
I'm happy to help you for your next quest.

26:30.000 --> 26:31.000
Thank you.

26:37.000 --> 26:40.000
We have time for questions.

26:49.000 --> 26:51.000
I don't know who was first.

26:55.000 --> 27:02.000
I was looking at my send emails and have seen a lot of my patches sent to you

27:02.000 --> 27:07.000
because of GitMaintenors collecting your address often.

27:07.000 --> 27:21.000
Is it a challenge for you now to deal with all these emails because GitMaintenors will do to your many commits everywhere,

27:21.000 --> 27:23.000
often collect your email address?

27:23.000 --> 27:27.000
This is indeed an effect I wasn't aware of.

27:28.000 --> 27:38.000
If you attached all 2,500 platform drivers, you'll get a massive amount of patches in the next few releases.

27:38.000 --> 27:44.000
It's not very helpful to...

27:48.000 --> 27:55.000
If you submit it, it's not helpful to send patches to the person who just do cleanup on the driver

27:55.000 --> 28:01.000
who don't have the real interest in this driver, which also applies to me.

28:02.000 --> 28:09.000
I don't have interest in some obscure IDE driver that I just touched

28:09.000 --> 28:15.000
because it happens to be a platform driver and I changed the remove callback.

28:15.000 --> 28:23.000
On the other hand, it's also really hard to separate the list of people you get from GitMaintenors.

28:23.000 --> 28:30.000
Don't hesitate to keep me in the list. I'm very good at ignoring emails.

28:30.000 --> 28:35.000
I just archived some and it's quite usual to...

28:35.000 --> 28:41.000
If you send patches to, say, 10 people, that you don't get feedback from at least 9 of them.

28:41.000 --> 28:50.000
So this is life and I have a very big mailbox, but I usually can handle it.

28:52.000 --> 28:54.000
Thank you for your presentation.

28:54.000 --> 29:01.000
You have described your send workflow and you're not using B4.

29:01.000 --> 29:11.000
Have you talked to Konstantin, who has developed B4, because you have some special needs about CC and tool handling and cover letter and so on?

29:11.000 --> 29:23.000
No, I didn't. Mark already knows. I don't use B4 because with B4 you cannot individually change the recipients

29:23.000 --> 29:26.000
for the patches in the series.

29:26.000 --> 29:33.000
So what I like to do is if I have a series that touches, again, SPI drivers,

29:33.000 --> 29:44.000
I don't want to send the patch touching the iMix SPI driver to the Atmel SPI driver maintainer.

29:44.000 --> 29:53.000
So the list of persons is really hand-picked, which patch is sent to which parties.

29:53.000 --> 29:59.000
And with B4, at least last time I checked, you can only define the recipients globally.

29:59.000 --> 30:04.000
So you have to send all patches to the same set of people.

30:04.000 --> 30:07.000
No, I didn't talk to Konstantin.

30:08.000 --> 30:20.000
I have little motivation to do that because my patchwork works and I think it's a bit special for these big series

30:20.000 --> 30:32.000
and I'm not sure that there's a big benefit for extending B4 to that because for most people it's the right thing what B4 does.

30:32.000 --> 30:47.000
And the added flexibility for my use case results in a complication for tracking and for usage for all people which is questionable, I think.

