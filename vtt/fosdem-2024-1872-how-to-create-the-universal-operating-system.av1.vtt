WEBVTT

00:00.000 --> 00:14.920
Welcome everyone. My name is Erotra. I'm glad my somewhat pretentious title has a lourd

00:14.920 --> 00:24.440
you all inside. I hope not to disappoint. Hence the disclaimer that I have way too many

00:24.440 --> 00:34.480
disclaimers to elaborate on. What is an operating system? I had to look it up on Wikipedia. I

00:34.480 --> 00:40.560
did have some imagination of what it could be, having used one for a few years. But it

00:40.560 --> 00:48.200
turns out, and it's slightly paraphrased because their definition is too long for me, it's a

00:48.200 --> 00:53.000
software platform providing access to resources and services to run computer programs. Okay,

00:53.000 --> 01:00.960
great. I knew that. That's what I use it for. Excellent. The title is about the universal

01:00.960 --> 01:09.240
operating system. And universal to me would imply more generalisation. I've always felt that the

01:09.240 --> 01:17.160
computer should evolve or computing should evolve. And I hope that we can move towards

01:17.160 --> 01:27.480
freely sharing, using, combining, understanding whatever we do with the computer. And from my

01:27.480 --> 01:34.200
personal perspective, from my day job, one aspect would be something about safety. And I've added

01:34.240 --> 01:40.440
security, but I'm definitely not a security expert in all the automation that we may computers do

01:40.440 --> 01:46.600
these days and hopefully in the near future. Because apparently we are dealing with a few

01:46.600 --> 01:56.520
crises here and there. And I believe we have ideas to get those addressed using information

01:56.520 --> 02:05.760
technology. I hope to learn from Jonathan at the level of representing information, how this

02:05.760 --> 02:16.480
could be used in the future. But I'm sticking to this bit. I'm more operationally oriented,

02:16.480 --> 02:25.440
so you could say, imperatively. And I know this is the declarative minimalist computing room. So

02:25.720 --> 02:35.440
I'll try to bridge that. The ingredients that I hope that the future universal operating system

02:35.440 --> 02:46.920
might incorporate is definitely the microkernel. Richard Stolman proposed for the GNU system a

02:46.920 --> 02:53.600
few years back that it could have a microkernel. I would still love to see that happen. In the

02:54.120 --> 03:01.040
community, work is being done on that. I hope to start to contribute to that. From a software

03:01.040 --> 03:08.480
point of view, I believe everything should be modular. Small pieces because I'm just a human.

03:08.480 --> 03:16.520
My head is limited and my understanding and time are short. Things should be definitely

03:16.640 --> 03:27.160
decentralized. Client and server would be a natural way to go in the interaction between things. But

03:27.160 --> 03:34.000
I want to focus on language semantics that might help us to move towards such a universal operating

03:34.000 --> 03:41.480
system. Because I think if we add all of these ingredients, we're going to incur enormous complexities.

03:42.120 --> 03:49.880
And I'm not really sure that if we go on in software development the way we do, it will actually

03:49.880 --> 03:55.400
scale to the level that we need our information technology and our operating system to scale.

03:59.160 --> 04:05.960
And I'm going to do that using a very silly example. This is actually the control of my

04:06.040 --> 04:10.440
cruise controller in my car. The picture comes from the internet, of course.

04:14.440 --> 04:19.560
I'm guessing most of you have heard about a cruise controller. Basically it's an

04:19.560 --> 04:24.360
electronic device in a car and it runs a bit of software. But I want to use it as a metaphor to

04:25.000 --> 04:33.080
talk to you about small modular things that can work in a larger environment with other small

04:33.160 --> 04:39.640
modular things. And if you add and combine them enough complexity goes up and we need to figure

04:39.640 --> 04:47.960
out a way to deal with that. So what is a cruise controller? I'm just going to read this out

04:47.960 --> 04:55.640
because I haven't memorized this. Basically when it's not enabled, hence it's disabled,

04:56.200 --> 05:00.760
the throttle, which is the thing under the hood that is normally controlled with your gas paddle,

05:03.080 --> 05:06.920
is fully controlled by the driver if he or she pushes the gas paddle.

05:08.360 --> 05:14.920
When it is enabled and you apply the set button, it captures the current velocity and uses that

05:14.920 --> 05:19.720
to maintain that velocity over the course of time.

05:23.880 --> 05:29.800
There are exceptions. In my car if I go uphill and I've set it at the lower limit,

05:29.800 --> 05:35.880
it will drop down and just drop the cruise controller. And there are other reasons for it to

05:36.600 --> 05:43.320
refer back to the human control instead of doing it automatically. One of them is if you press

05:43.320 --> 05:50.760
the brake pedal or the clutch pedal, it has to stop because it would be very annoying if your car

05:50.760 --> 05:56.360
continues moving while you don't want to. And of course as a human you can cancel it. Okay,

05:56.360 --> 06:03.320
this is all really boring. But basically if we would put this declaratively, we just want the

06:04.120 --> 06:14.360
damn thing to control our velocity. Done. Very abstractly. And I think this is a way in the future,

06:14.360 --> 06:19.560
a declarative way to do that future automation.

06:19.560 --> 06:28.280
But I've just been listing all of these pointless details which are still very abstract. If you

06:28.280 --> 06:34.600
look at the car in greater detail, there's a lot of imperative stuff going on, stateful stuff.

06:36.360 --> 06:42.760
And that's what we're trying to figure out a solution for. So we've been working on a language

06:42.840 --> 06:47.480
which we call also pretentiously designed, spelled incorrectly.

06:50.840 --> 06:56.040
Because if you look on the internet for the normal word design, you'll either find us. So

06:56.040 --> 07:05.960
at least this alternate spelling helps search engines. The semantics of our language allow us to,

07:06.680 --> 07:13.320
well, our language consists of interfaces and components basically. Interfaces are

07:14.600 --> 07:21.480
behavioral specifications. So they record the protocol. I'll show you an example in a minute.

07:22.280 --> 07:26.360
And these protocols are actually contracts of interaction between two components.

07:27.320 --> 07:32.920
And our components are of course modular. So they are completely isolated from the world by

07:32.920 --> 07:39.320
interfaces. And they are composable. You can stick them together and know that while they

07:39.320 --> 07:47.320
maintain the protocol, therefore they can cooperate properly. We have a formal definition of our

07:47.320 --> 07:55.160
semantics, meaning we actually express it in a formal process algebra. And I'll get back to that.

07:56.360 --> 08:00.120
We can simulate our behavior at the interface level and the component level.

08:00.680 --> 08:03.720
We can actually implement running code through code generation.

08:04.520 --> 08:11.320
And we can actually automatically verify a bunch of aspects of interfaces and components. And

08:12.600 --> 08:16.040
I'll try that to do that by example.

08:19.960 --> 08:21.800
So let's start with an interface.

08:24.040 --> 08:26.600
The pick. Sorry.

08:27.560 --> 08:36.840
Something like this. The picture of the buttons on my steering wheel I showed you is

08:37.800 --> 08:44.280
captured in terms of syntax here. There's the enable, disable button. The select, the current

08:44.280 --> 08:52.920
velocity to be maintained. As a resume button or resume function, a cancel. And on the dashboard,

08:53.000 --> 08:57.160
there's this LED that indicates that it's active or not.

08:59.720 --> 09:05.320
But the human is expected to interact in a specific way with the rest of the car.

09:05.320 --> 09:13.160
And that has been captured in this behavior bit. And our language takes a imperative approach.

09:13.160 --> 09:22.280
So we define state. I just scrolled across that. So we have two state iterations and we

09:22.360 --> 09:29.080
maintain that in variables, state and set point. And now we describe the interaction of the human

09:29.640 --> 09:38.440
with the cruise controller in the car behaviorally. In other words, if the initial state is disabled,

09:38.440 --> 09:46.520
we would accept an enable and become enabled. So dive into this further. I'll show you a picture

09:46.520 --> 10:01.480
of what this could look like. Let's see. Sorry. So if I show you the state diagram

10:03.560 --> 10:08.280
of the text I was just showing you, this is generated from that definition. This is what it

10:08.280 --> 10:13.400
would look like. This slightly more human readable. And we have sort of an intuition for this, I think.

10:14.280 --> 10:18.680
I'm going to make it slightly more complicated. Let's look at the

10:20.680 --> 10:29.480
component, the cruise controller component itself. It is specified similarly. Almost there.

10:31.000 --> 10:41.000
Yeah. We use the same language or the same concept. We define the behavior of the component

10:41.000 --> 10:48.200
itself, but now it receives its messages through ports and the cruise controller is supposed to

10:48.200 --> 10:55.880
interact with the different actors in the system, which is the human behind the human machine

10:55.880 --> 11:01.960
interface, the pedals, the throttle, and we have a timer, which I will not go into.

11:02.840 --> 11:13.800
I won't go through in all details through this behavior. I just want to show you the following.

11:22.520 --> 11:30.360
Sorry. I have to give one more example. The thing that I really want to add,

11:30.360 --> 11:37.400
which we have recently done, is an extension. Let me start over.

11:44.600 --> 11:53.800
This is what it looks like in, this is the formal semantics of that behavior,

11:54.600 --> 12:01.560
which we can actually feed to a model checker and check properties. And let me feed it to the model

12:01.560 --> 12:16.360
checker. It checks all of our default properties and the user defined properties, which I will now

12:16.360 --> 12:24.040
show you. So what we have just checked is that the component adheres to all of the interface

12:24.040 --> 12:31.320
contracts and it actually adheres to the invariant predicates. One of the invariant predicates,

12:31.320 --> 12:36.520
which is, you may have heard, there are cruise controllers who accelerate unwontantly. I have

12:36.520 --> 12:43.800
tried to encode that in the state of the environment, which the cruise controller is trying to control.

12:44.440 --> 12:49.320
And in this case, it would be, if the human has not activated the cruise controller,

12:49.320 --> 12:56.040
it should never actively control the throttle. So that's recorded like this. And I can actually

12:56.040 --> 13:09.240
make that fail by commenting out a throttle reset. And then that property will help us find a sequence

13:09.240 --> 13:17.160
of events that would lead to this illegal behavior, this unwanted behavior. Okay, this was very detailed.

13:18.120 --> 13:19.240
I'll try to wrap it up.

13:23.320 --> 13:33.160
Oops. So I have to make the link to the universal operating system ahead. I want to foresee that

13:33.160 --> 13:38.760
we will build a modular operating system. And because of the modularity and the distribution,

13:40.280 --> 13:48.760
the cooperative complexity goes up. And I think we've figured out a way to leverage model checking

13:48.760 --> 13:56.680
to help us there in the future. In the near future, trying to, I'm looking forward to adding that to

13:57.640 --> 14:07.000
her development, engaged development. In the coming year, we already, we had already planned

14:07.880 --> 14:13.160
to extend the scope of verification, including data contracts. But

14:15.800 --> 14:21.720
if you want to know more, just come and find us online. Here are the details.

14:21.720 --> 14:24.760
Excellent. Thank you.

14:24.760 --> 14:36.760
So this system is GPL, it's out of the open.

14:36.760 --> 14:44.600
Yes, you can find us on Savannah. It runs on gigs, a gigs install design.

14:44.600 --> 14:52.520
Can you tell a little bit more about the automatic verification of the model?

14:52.520 --> 14:53.320
Right.

14:53.320 --> 14:55.320
That's the magic board.

14:55.320 --> 15:05.800
Yes. We actually transform the model into MCRL2, which is a model calculus that allows you to do

15:05.800 --> 15:10.920
specify formal properties and capture the formal behavior. So what we effectively do,

15:11.880 --> 15:21.080
the execution semantics of the code that we generate is modeled in MCRL2. We verify the

15:21.080 --> 15:27.480
entire state space of that code, which is more efficient than trying to test all the code.

15:27.480 --> 15:31.720
And we have a composition guarantee.

15:33.240 --> 15:37.800
So when it finds nothing wrong, that there is really nothing wrong. And it's not a matter of,

15:38.760 --> 15:41.720
we didn't already have a time to find something at once.

15:41.720 --> 15:49.640
Exactly. But there are always aspects that you cannot represent, which are also important.

15:53.320 --> 15:53.800
You're welcome.

15:54.520 --> 15:55.160
More questions?

15:57.080 --> 16:03.160
Is it a result or possible outcome for the model? Does it commute to the whole solution space?

16:03.960 --> 16:05.320
At the component level now.

16:05.320 --> 16:06.760
You should repeat the question.

16:06.760 --> 16:15.720
Sorry. Your question was to verify all of the properties, does it expand the entire solution

16:15.720 --> 16:24.280
space? Exactly what we do at the component level. So the interfaces allow a certain behavior.

16:26.040 --> 16:31.640
And you want to expand that entire behavior, synthesize that, and go through it and figure out

16:32.680 --> 16:34.120
if there are any problems hiding there.

16:35.400 --> 16:36.200
That's what we do.

16:36.200 --> 16:38.280
Final question, is it used in production?

16:38.280 --> 16:44.120
It's used in production. Oh, yes. Our biggest customer currently is a thermo-efficient scientific.

16:44.120 --> 16:51.480
They make these huge electron microscopes. And I believe they've got about 1.2 million lines

16:51.480 --> 16:52.280
of our code running.

16:56.360 --> 16:57.000
Another question?

16:57.960 --> 17:02.680
Yes. Thank you. Is it also possible to create distributed systems with design?

17:03.080 --> 17:11.960
Currently, no. But I hope to integrate with what Christine will be talking about very soon.

17:12.600 --> 17:13.960
And that will solve that bit.

17:20.120 --> 17:20.840
Great. Thank you.

