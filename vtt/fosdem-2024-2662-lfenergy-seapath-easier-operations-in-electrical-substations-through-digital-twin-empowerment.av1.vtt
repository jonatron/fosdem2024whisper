WEBVTT

00:00.000 --> 00:07.520
So, hello everyone.

00:07.520 --> 00:09.840
I am Paul Le Guin de Carnaison.

00:09.840 --> 00:14.760
I am an embedded software engineer at Sauvard Fair Linux.

00:14.760 --> 00:21.440
And today I'm going to speak a little bit about the C-PASS project and how we brought

00:21.440 --> 00:46.600
in.

00:46.600 --> 00:48.440
My company Sauvard Fair Linux.

00:48.440 --> 00:53.760
We are based both in Montreal and in France.

00:53.760 --> 01:00.200
And we are experts in embedded software and free open source engineering.

01:00.200 --> 01:07.040
And we've been working on the C-PASS project since the last couple of years.

01:07.040 --> 01:11.040
So what is the C-PASS project?

01:11.040 --> 01:16.520
C-PASS means software enable automation, platform and artifacts for the line.

01:16.520 --> 01:18.760
What is it?

01:18.760 --> 01:23.540
We are in a context of energy transition, as you all know.

01:23.540 --> 01:28.960
And there is a lot of constraints with this new energy.

01:28.960 --> 01:34.840
And the main constraint is that we have a multiplication of distributed controls.

01:34.840 --> 01:37.440
We have more and more power stations.

01:37.440 --> 01:44.360
And so we have an increase of the data management's need into this power station.

01:44.360 --> 01:52.920
And so the idea is how can we bring some free and open source into this power station.

01:52.920 --> 01:56.560
And this is where C-PASS is here.

01:56.560 --> 02:03.720
So to remind a quick reminder on the aim of C-PASS, the goal of C-PASS is to develop

02:03.720 --> 02:10.480
a reference design with an industrial grade on open source and real-time platform.

02:10.480 --> 02:18.800
C-PASS allows us to also virtualize platform and inside this virtualize platform we can

02:18.800 --> 02:22.920
run automation platform for our power station.

02:22.920 --> 02:31.920
And so we can share multi-application provider and this combines performance and safety.

02:31.920 --> 02:37.600
For 10 minutes presentation, I can present in deeper the C-PASS project, but my colleague

02:37.600 --> 02:41.480
Erwan already did it last year at 4.10.25.

02:41.480 --> 02:46.780
So if you're interested, you can see his presentation.

02:46.780 --> 02:53.200
So the main idea of this presentation is how did we bring some functional tests to the

02:53.200 --> 02:55.320
C-PASS project.

02:55.320 --> 03:00.280
And for this, I want to take a simple case 2D.

03:00.280 --> 03:05.200
So here is the power lines you can see in the campaign.

03:05.200 --> 03:11.440
And you have a tree after the storm that falls on your power lines and there is two lines

03:11.440 --> 03:13.720
that touch each other.

03:13.720 --> 03:19.240
And this is a big issue in your electricity system.

03:19.240 --> 03:25.400
And so you have systems that must cut the current very quickly to avoid any other on

03:25.400 --> 03:29.160
people or on the infrastructure.

03:29.160 --> 03:37.880
And so how can you have all this safety equipment with C-PASS?

03:37.880 --> 03:42.920
So I have a very simple representation of all of this is working.

03:42.920 --> 03:49.120
We have first a protection algorithm that makes a decision if there is or not a situation

03:49.120 --> 03:51.440
where there is another or not.

03:51.440 --> 03:57.640
And this algorithm is running inside a virtual machine and this is where we have the C-PASS

03:57.640 --> 04:04.120
project because this is running inside a C-PASS cluster, inside a hypervisor, et cetera.

04:04.120 --> 04:14.880
And we have on the opposite side an hardware which is doing the monitoring of our architecture.

04:14.880 --> 04:23.640
And the communication between the C-PASS cluster and this hardware is done with a protocol.

04:23.640 --> 04:32.080
And you know it, it's the ISC 61850 and this is a protocol which is based on TCP and it

04:32.080 --> 04:40.240
generates packets that we call sample value and this is the communication between the

04:40.240 --> 04:44.200
C-PASS cluster and our hardware.

04:44.200 --> 04:48.120
And so why did we need functional tests?

04:48.120 --> 04:54.120
C-PASS as you see is designed to work on a very critical infrastructure which is a

04:54.120 --> 05:01.640
power distribution and if we are some issue on the power distribution there is a need

05:01.640 --> 05:07.640
of the protection of the people and the protection of the infrastructure because we have electricity

05:07.640 --> 05:09.400
as that.

05:09.400 --> 05:16.080
And so in case of failure the safety protection must react as soon as possible.

05:16.080 --> 05:23.520
And so this is why we need a very, very, very low latency transit of this sample value that

05:23.520 --> 05:27.640
transit into the C-PASS cluster.

05:27.640 --> 05:33.640
And the last thing is that your power distribution in your country is running every time you

05:33.640 --> 05:40.400
have electricity in your home every time and so we are context of 24 hours and seven a

05:40.400 --> 05:42.160
day context.

05:42.160 --> 05:47.800
And so we have to ensure that this latency as low as possible every time.

05:47.800 --> 05:56.040
And so we are in a deterministic system where determinism is the primary goal.

05:56.040 --> 06:04.160
And so we have a big infrastructure, we have expensive items and so maybe you are wondering

06:04.160 --> 06:13.400
how can we in our labs at our desktop or can we simulate all of this chain simply.

06:13.400 --> 06:18.160
So this is the work we've been working on.

06:18.160 --> 06:27.120
And so I represent here a very simple scheme about how can we reproduce this protection

06:27.120 --> 06:29.480
chain in our lab.

06:29.480 --> 06:35.280
The first piece is what we call the Publisher Machine and the goal of the Publisher Machine

06:35.280 --> 06:41.640
is to generate the IEC 61850 sample values.

06:41.640 --> 06:46.920
And then we have the C-PASS cluster and the C-PASS cluster is composed of two parts.

06:46.920 --> 06:53.640
The first is the IPI Vizer which are running virtual machine and we have the virtual machines

06:53.640 --> 07:00.760
which runs all of the software which are an SV client receiver that will proceed the

07:00.760 --> 07:06.200
sample values that have been sent by the Publisher and a protection algorithm which

07:06.200 --> 07:11.440
takes the decision based on this sample value if we are an issue or not.

07:11.440 --> 07:19.280
I took here a presentation with two IPI Vizer and three VM but it could be a totally different

07:19.280 --> 07:22.040
architecture.

07:22.040 --> 07:26.280
So what tool did we use to do that?

07:26.280 --> 07:31.560
First on the Publisher Machine we use the pick up format.

07:31.560 --> 07:39.080
This is a very ideal of a format because we can reproduce some TCP traffic generation

07:39.080 --> 07:48.360
and for example we can reproduce what could be happen on electricity infrastructure for

07:48.360 --> 07:54.880
example a 50 hertz electrical signal and then we replace them with some tools.

07:54.880 --> 08:02.920
Here I use a TCP replay to send this packet with the spacing we want.

08:02.920 --> 08:11.440
We can use some PTP packets to synchronize all of this but keep in mind that it's not

08:11.440 --> 08:14.320
a recroid, it's not an obligation to use.

08:14.320 --> 08:23.920
PTP is only used on C-PASS when you wish to use some C-PASS features such as VM synchronization

08:23.920 --> 08:34.240
and VM migration but this is not an obligation to be used.

08:34.240 --> 08:44.040
And then on the C-PASS cluster we have first the IPI Vizer side and we have to have very

08:44.040 --> 08:45.680
low latency.

08:45.680 --> 08:53.800
First we have some CPU core isolation so we have done some work to dedicate some core

08:53.800 --> 09:00.440
only for the Linux system that is running on the IPI Vizer and isolate some core only

09:00.440 --> 09:07.200
for the VM which are running and do also some IEQ and processor isolation inside the

09:07.200 --> 09:13.880
Linux kernel to be sure we have some priority for some application etc.

09:13.880 --> 09:21.240
We also did some biosoptimization which is very hardware dependent but there is a lot

09:21.240 --> 09:22.240
to do.

09:22.240 --> 09:30.240
There is a thing like the multi-EPF reading feature that are very bad for determinism

09:30.240 --> 09:36.080
and you have to disable this kind of feature.

09:36.080 --> 09:43.640
And then on the virtual machines we have also it's kind of the same work that we did on

09:43.640 --> 09:51.040
the IPI Vizer side which is all of the isolation and CPU and IEQ etc.

09:51.040 --> 09:58.360
We use what is called the PTI path view and this is a very interesting feature because

09:58.360 --> 10:05.440
it allows us to directly inside the VM to take the packets which are received on the

10:05.440 --> 10:12.040
network interface of the IPI Vizer and this brought some good performance.

10:12.040 --> 10:19.560
And finally we can also use some SAIOV that can be used if you have multiple virtual machines

10:19.560 --> 10:28.000
but keep in mind that even if you have better results this is an optional feature.

10:28.760 --> 10:33.120
Thank you for your attention and please let me know if you have a question and I will answer

10:33.120 --> 10:34.120
to it.

10:34.120 --> 10:35.120
Thank you.

10:35.120 --> 10:52.480
Have you got any examples of real world adoption of this?

10:52.480 --> 10:58.680
Let's say Karin A. Ronan.

10:58.680 --> 11:05.440
So you are asking if we have concrete implementation of the C-PASS project.

11:05.440 --> 11:10.240
Currently no.

11:10.240 --> 11:15.280
We don't have any concrete implementation because C-PASS is currently near in early

11:15.280 --> 11:23.600
adoption but we have a good opportunity to be in the future.

11:23.600 --> 11:30.480
But currently it is not in production if it's your question but it's the goal of the C-PASS

11:30.480 --> 11:36.640
project.

11:36.640 --> 11:42.480
If you don't have a ground master clock what is the source of time?

11:43.480 --> 11:52.400
Matthew I will let maybe answer this question about PTP.

11:52.400 --> 11:59.040
In production we have to have a ground master clock but for testing we use just Linux PTP

11:59.040 --> 12:04.440
as a PTP clock.

12:04.440 --> 12:21.560
Thank you.

