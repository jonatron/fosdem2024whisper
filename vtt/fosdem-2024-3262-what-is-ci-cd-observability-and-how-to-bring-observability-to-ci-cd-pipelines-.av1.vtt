WEBVTT

00:00.000 --> 00:15.920
Okay, next Dimitris and Geo will show us what CI-CD system observability looks like and

00:15.920 --> 00:20.040
how observability in CI-CD system pipelines works.

00:20.040 --> 00:21.760
Yes, that's right.

00:21.760 --> 00:25.000
And hello everybody.

00:25.000 --> 00:30.000
Can you hear me?

00:30.000 --> 00:31.000
Awesome.

00:31.000 --> 00:33.000
So thanks for having us here.

00:33.000 --> 00:38.080
It's like actually the second ever talk we're having for them because the first one was

00:38.080 --> 00:39.400
three hours ago.

00:39.400 --> 00:44.320
So for you who were there, we really saw it's going to be kind of repetitive.

00:44.320 --> 00:46.200
But like, yeah, let's get started.

00:46.200 --> 00:51.080
So what is CI-CD observability and how to bring it to CI pipeline?

00:51.080 --> 00:52.520
So this is our abstract.

00:52.520 --> 00:54.360
We're not going to go through that because it's huge.

00:54.360 --> 01:01.120
We know so in a nutshell, this talk is about enhancing our pipelines reliability and performance

01:01.120 --> 01:04.760
by bringing observability at every stage of software delivery.

01:04.760 --> 01:09.480
So we're going to answer two questions like how we can identify flakiness and bottlenecks

01:09.480 --> 01:13.200
and try to envision a future of effortless visibility.

01:13.200 --> 01:20.280
We're also going to talk about the pivotal role that OpenTelemetry plays in the thing

01:20.280 --> 01:22.520
we're trying to solve.

01:22.520 --> 01:27.200
And then how we want to shape CI-CD's future and explore the challenges and opportunities

01:27.200 --> 01:28.200
ahead.

01:28.200 --> 01:30.520
A little bit about us.

01:30.520 --> 01:35.520
I am Dimitris, a software engineer at the Platform Productivity Squad at Grafana Labs.

01:35.520 --> 01:39.640
And I'm Gio, a software engineer in the Explore Squad.

01:39.640 --> 01:40.640
Yes.

01:40.640 --> 01:41.640
And Grafana Labs.

01:41.640 --> 01:42.640
Yes.

01:42.640 --> 01:44.960
And with that, let's go through the agenda.

01:44.960 --> 01:48.480
So we're going to start talking about what is CI.

01:48.480 --> 01:50.880
And this is with CI-CD systems.

01:50.880 --> 01:54.040
And then introduction to OpenTelemetry, some under conventions.

01:54.040 --> 01:57.120
Why is it important to own your data?

01:57.120 --> 02:00.760
And then where we are now, practical use cases and what's next.

02:00.760 --> 02:03.120
So we're going to start with a question.

02:03.120 --> 02:06.600
Like what is CI basically for everyone?

02:06.600 --> 02:08.840
And we're talking about the definition here.

02:08.840 --> 02:13.880
So definition of continuous integration may vary depending on who is the author.

02:13.880 --> 02:18.280
So for example, we have a few experts talking about that in two different books.

02:18.280 --> 02:22.600
And they are talking about something similar, but using different words.

02:22.600 --> 02:29.200
The only thing we can make sure about is that, we may be sure about is that, like, the word

02:29.200 --> 02:30.920
continuous is always going to be there.

02:30.920 --> 02:34.960
Because we're talking about something, you know, a never ending feedback loop, something

02:34.960 --> 02:42.160
which continuously run in order to identify flakiness, may help us like, you know, improve

02:42.160 --> 02:43.720
our processes and all that.

02:43.720 --> 02:50.760
So all that being said, we go to the next question, which is yes, but like what is CI

02:50.760 --> 02:51.960
for real this time?

02:51.960 --> 02:55.160
And as we said, CI can mean different things.

02:55.160 --> 02:57.560
Like it's a list of things basically.

02:57.560 --> 03:00.360
And for every person, for each person means different things.

03:00.360 --> 03:05.480
Like it may be a mechanism to reduce repetitive manual processes or like enable better project

03:05.480 --> 03:11.880
visibility in some cases or find the resolved flaky tests and builds and, you know, try

03:11.880 --> 03:17.880
to prevent paging people at 3 AM in the morning because, you know, human hours are important.

03:17.880 --> 03:24.040
So the next slide is how a typical CI CD pipeline looks like in a modern company.

03:24.040 --> 03:28.280
So I think this is the same for some of us here.

03:28.280 --> 03:32.400
So it's like, we start from testing, building to deploying.

03:32.400 --> 03:37.960
And by the way, we know that we haven't talked a lot about CD, but we believe that like CI

03:37.960 --> 03:40.080
CD observability should come as a whole.

03:40.080 --> 03:44.040
There's no CD observability without CI observability basically and vice versa.

03:44.040 --> 03:50.800
So we're talking about deploying to pro like waiting for 3 AM maintenance until we deploy

03:50.800 --> 03:54.200
to pro and then get error or downtime start panicking.

03:54.200 --> 03:59.280
And then when we resolve all of those things, you know, go and add them as assets in our

03:59.280 --> 04:04.840
LinkedIn profiles, like I'm an automation master engineer and all that stuff.

04:04.840 --> 04:10.880
So we're going to the next question, which is the most like important one.

04:10.880 --> 04:11.880
What is CI?

04:11.880 --> 04:15.400
But like for real, real this time.

04:15.400 --> 04:18.160
And what we're looking for is just a word.

04:18.160 --> 04:19.360
Anyone there to guess?

04:19.360 --> 04:22.560
Someone who wasn't in the previous room, by the way.

04:22.560 --> 04:24.560
No one.

04:24.560 --> 04:26.880
You dare to guess?

04:26.880 --> 04:29.680
I would say alerting.

04:29.680 --> 04:30.680
That's right.

04:30.680 --> 04:32.920
So CI is alerting.

04:32.920 --> 04:38.200
So CI and alerting actually serve a common purpose and we should see like CI and alerting

04:38.200 --> 04:40.000
as like one component.

04:40.000 --> 04:45.400
So when a if alerting is integrated into CI, we can catch issues early in the development

04:45.400 --> 04:51.040
process and like effective alerting within CI ensures that threshold bridges and potential

04:51.040 --> 04:53.460
problems are identified before deployment.

04:53.460 --> 05:00.120
So if we see CI is the left shift of alerting, we can have as I said, early detection in

05:00.120 --> 05:06.120
the development or shifting focus to proactive monitoring, preemptive issue resolution and

05:06.120 --> 05:07.120
stuff like that.

05:07.120 --> 05:11.680
As you can see in the picture as well, it's like they need to hold hands like for as long

05:11.680 --> 05:14.000
they are alive, I think.

05:14.000 --> 05:19.080
So for the next slide, so we're presenting a few things about what CI does basically

05:19.080 --> 05:25.080
and CI, we define CI like is the guard in early stages of the development.

05:25.080 --> 05:31.840
So it detects changes, it maintains builds health and constantly monitor system signals.

05:31.840 --> 05:36.440
So CI catches issues before they appear in production.

05:36.440 --> 05:38.520
So alerting on the other side.

05:38.520 --> 05:42.680
So this is not a slide to compare continuous regression alerting.

05:42.680 --> 05:47.040
We just want to show how like tightly coupled they are.

05:47.040 --> 05:51.040
So alerting is our alerting system like in later stages.

05:51.040 --> 05:56.000
So if something slips through CI, alerting should be there to catch that.

05:56.000 --> 06:01.480
But the most important thing is that we have to remember CI and alerting are not two things

06:01.480 --> 06:02.760
working in parallel.

06:02.760 --> 06:03.760
It's different components.

06:03.760 --> 06:07.760
CI and alerting is just one component and we should regard these as a whole.

06:07.760 --> 06:12.520
So we need like for alerting, we need to make sure to create actionable items.

06:12.520 --> 06:16.560
So if something slips through CI, alerting is going to catch that and we should have

06:16.560 --> 06:22.120
like enough run books, documentation or stuff like that to make sure that everyone can

06:22.120 --> 06:25.600
find the solution to a problem real quick.

06:25.600 --> 06:30.080
So where we are now and what is this whole talk about it too?

06:30.080 --> 06:32.920
So observability so far, what we have.

06:32.920 --> 06:38.040
So from manually trying to search through the logs and traces, trying to find the root

06:38.040 --> 06:44.440
codes and going from a GitHub or like GitLab or whatever you're using to your CI vendor

06:44.440 --> 06:49.360
which may be something different to Grafana or any other observability tool you may have,

06:49.360 --> 06:55.000
like trying to colorate to go from one to another for the same error maybe hard.

06:55.000 --> 07:00.480
So we want to make sure that you can, we can like create a centralized way of dealing with

07:00.480 --> 07:01.480
these problems.

07:01.480 --> 07:07.280
So if observability is so late like at that stage of the run stage of our development

07:07.280 --> 07:12.880
and deployment life cycle, we have limited visibility during early stages, difficulty

07:12.880 --> 07:18.720
in root cause analysis, increase, meantime to recovery and you know this is something

07:18.720 --> 07:22.800
that Gio is going to talk to you more about that and also you can miss optimization opportunities

07:22.800 --> 07:27.680
like it's really hard to say what I have to fix if I want to improve my build times for

07:27.680 --> 07:32.400
example if you don't have observability in your CI pipelines.

07:32.400 --> 07:37.680
So how it looks like now when something catches fire, there's this meme, we all know that

07:37.680 --> 07:42.720
meme, we would expect it to like you know someone to go there and like take out all the fires

07:42.720 --> 07:49.400
but instead what happens if you have the testing, if you don't have CI CD observability and

07:49.400 --> 07:50.680
alerting this happens.

07:50.680 --> 07:55.160
So it's too late to go and resolve anything, you may lose money, customers, you know how

07:55.160 --> 07:56.120
it goes.

07:56.120 --> 08:02.840
So if we want to get data out of CI CD we have to focus our shift a little bit to the left.

08:02.840 --> 08:06.320
So we have to focus our shift to build testing and deployment.

08:06.320 --> 08:11.720
This way we can like address issues before they escalate in production environment or

08:11.720 --> 08:17.240
we can enhance efficiency by catching like problems early in the process or have like

08:17.240 --> 08:22.200
enhanced system reliability and robustness and also it is a huge asset when it comes

08:22.200 --> 08:24.640
to cost reduction.

08:24.640 --> 08:29.200
So what is this amounted to is this slide which is my favorite.

08:29.200 --> 08:34.960
So the thing is that instead of having this fire and you know the developer like the engineer

08:34.960 --> 08:39.440
sitting in the middle and waiting until someone gets there to like take out all the fires

08:39.440 --> 08:40.840
we may be proactive.

08:40.840 --> 08:46.200
So we may be proactive and mitigate the fire before it appears and do something about that

08:46.200 --> 08:47.200
problem right.

08:47.200 --> 08:50.480
So we tried to make it easy for people.

08:50.480 --> 08:55.200
So for new joiners, for people who are not familiar with the CI vendor we use.

08:55.200 --> 09:01.560
So we tried to make it easy and neutral for everyone to go and use like CI CD observability

09:01.560 --> 09:02.560
output.

09:02.560 --> 09:04.560
So for that reason we used open telemetry.

09:04.560 --> 09:06.160
So we tried to define standards.

09:06.160 --> 09:08.000
Geo is going to talk to you more about that.

09:08.000 --> 09:14.680
We tried to define standards and certain patterns which are going to be used widely by everyone

09:14.680 --> 09:16.960
no matter what they really use.

09:16.960 --> 09:21.600
And without handing over to Geo to talk to you more about open telemetry.

09:21.600 --> 09:22.600
Thank you.

09:22.600 --> 09:23.600
I don't know how this works.

09:23.600 --> 09:24.600
I'm going to just...

09:24.600 --> 09:25.600
Whatever.

09:25.600 --> 09:26.600
Hello everyone.

09:26.600 --> 09:27.600
So yeah.

09:27.600 --> 09:28.600
Give me a second.

09:28.600 --> 09:29.600
There is.

09:29.600 --> 09:39.800
So first of all, one question.

09:39.800 --> 09:41.680
Here is familiar with open telemetry.

09:41.680 --> 09:44.680
Or of course.

09:44.680 --> 09:49.400
I want to give a quick definition for where it is not familiar.

09:49.400 --> 09:55.480
So open telemetry is a framework designed to create and manage telemetry data such as

09:55.480 --> 09:57.680
logs, traces and metrics.

09:57.680 --> 10:02.920
Of course the definition is way more comprehensive and accurate.

10:02.920 --> 10:07.080
It's on their website and I'm about to take a look.

10:07.080 --> 10:12.000
But for the context of this presentation I would like to focus on two bits of the definition

10:12.000 --> 10:21.560
which is semantic conventions or we can call them standards and owning the data regenerate.

10:21.560 --> 10:24.000
First of all standards.

10:24.000 --> 10:29.440
That's pretty much I think in topic.

10:29.440 --> 10:38.080
When you talk about standards we always think about the way in which we want to know about

10:38.080 --> 10:39.600
our data.

10:39.600 --> 10:43.920
Standards I think are a great thing or defining as a semantic convention and a standard.

10:43.920 --> 10:49.400
A great way of knowing what data you are storing.

10:49.400 --> 10:50.400
What to query for.

10:50.400 --> 10:52.480
What to query for the data.

10:52.480 --> 10:58.600
And semantic conventions in this context can be divided by, let's say in two categories.

10:58.600 --> 11:04.520
And we can divide them by signal type such as logs, metrics and traces or by the area

11:04.520 --> 11:12.240
they belong to such as generic semantic conventions, databases, exceptions or whatever.

11:12.240 --> 11:16.400
There is one thing that we think is missing here which is continuous integration and continuous

11:16.400 --> 11:18.640
delivery.

11:18.640 --> 11:23.920
And we think however that this is the perfect fit for this.

11:23.920 --> 11:26.920
Why?

11:26.920 --> 11:30.400
Let's take a look at three different CICD systems.

11:30.400 --> 11:35.840
GitHub Actions, Drone and GitLab CI.

11:35.840 --> 11:38.040
They tend to call things differently.

11:38.040 --> 11:46.640
I have highlighted here three specific bits which is duration, job names and outcome for

11:46.640 --> 11:47.640
three different pipelines.

11:47.640 --> 11:54.800
The idea here is that the data behind those three pictures is actually the same.

11:54.800 --> 11:57.040
Duration is duration.

11:57.040 --> 12:02.360
The job name, I guess here Drone calls it stage or job, I don't know.

12:02.360 --> 12:03.840
Like there is a different name.

12:03.840 --> 12:07.320
Like every CI tool calls something differently.

12:07.320 --> 12:08.640
Same thing for the outcome.

12:08.640 --> 12:14.760
Status can be outcome, can be, I don't know, I'm not good at English, but it's the same

12:14.760 --> 12:16.600
data.

12:16.600 --> 12:23.480
And by defining standard we can define a single common way of referring to this data.

12:23.480 --> 12:31.360
So what happened was that at some point I wanted to investigate why a test that we had

12:31.360 --> 12:36.160
in one of our pipelines sometimes was taken three minutes and some other times nine.

12:36.160 --> 12:37.440
Which didn't make sense.

12:37.440 --> 12:38.440
There was no code changes.

12:38.440 --> 12:42.840
Like rerunning the same pipeline, the same job would result in different times.

12:42.840 --> 12:45.480
So yeah, I started writing some Go code.

12:45.480 --> 12:48.800
I'm a front-end engineer by the way, so not.

12:48.800 --> 12:50.640
But it was pretty good.

12:50.640 --> 12:51.640
No?

12:51.640 --> 12:52.640
Okay.

12:52.640 --> 12:53.640
It was.

12:53.640 --> 12:54.640
It did the job.

12:54.640 --> 12:55.640
It did the job.

12:55.640 --> 13:04.480
And I was able to get the data we needed from our drone CI system into Lockheed, Ampo and

13:04.480 --> 13:05.980
Minere.

13:05.980 --> 13:06.980
It worked.

13:06.980 --> 13:11.680
We were able to ask the questions we were curious about.

13:11.680 --> 13:13.400
Why that was happening?

13:13.400 --> 13:16.080
We found something.

13:16.080 --> 13:20.080
But before finding these answers, I shared the news with my team.

13:20.080 --> 13:22.920
I guess they got a bit excited about it.

13:22.920 --> 13:28.920
And what I mean by that was that another colleague was asking me to write the same thing but

13:28.920 --> 13:31.280
put the logs into elastic search.

13:31.280 --> 13:36.280
Another colleague of mine was trying to want to get the same things for GitHub Batch instead

13:36.280 --> 13:37.280
of drone.

13:37.280 --> 13:41.440
Yeah, I mean, like, I'm very good at Go.

13:42.440 --> 13:43.440
I don't know.

13:43.440 --> 13:50.360
I didn't feel like there was a very scalable way of doing that for me.

13:50.360 --> 13:55.400
The question here is, how can we prevent ourselves from writing the same code that does the same

13:55.400 --> 13:58.800
thing but for different systems and for different databases?

13:58.800 --> 14:01.760
And it may sound like a silly question.

14:01.760 --> 14:10.880
None of us, I think, uses 16 different databases to put their metrics, logs, or traces in.

14:11.240 --> 14:16.160
The point is that if we ever wanted to do that as a community, like not as a Grafana,

14:16.160 --> 14:23.280
not as me, we would have to write, I don't know, I didn't count them, 80 different things

14:23.280 --> 14:29.160
only for those databases and only for those three CI systems.

14:29.160 --> 14:30.160
And yeah.

14:30.160 --> 14:35.000
No, there was no way I was going to do that.

14:35.000 --> 14:39.240
One of the things I want to talk about is the importance.

14:39.240 --> 14:41.600
That is important.

14:41.600 --> 14:47.840
There is a bit of the definition that we didn't talk about, which is owning your data.

14:47.840 --> 14:53.480
Now when I started thinking about owning my data, what I always thought was having ownership

14:53.480 --> 14:58.520
of the hard drive that I was going to be stored in or having ownership of the machine that

14:58.520 --> 15:01.080
my database was running on.

15:01.080 --> 15:05.000
In reality, I think that this definition was a bit beyond.

15:05.000 --> 15:09.920
This definition goes, I think, in deciding what to do with the data you generate, where

15:09.920 --> 15:12.360
to store it, where to send it.

15:12.360 --> 15:15.560
We can very well be using a cloud provider.

15:15.560 --> 15:22.160
The idea is that I decide and I know where my data and what data I'm storing where.

15:22.160 --> 15:25.120
Open telemetry helps with that.

15:25.120 --> 15:30.280
Open telemetry defines standards, defines a way of doing this.

15:30.280 --> 15:36.560
It's a common language, if you want, to send data everywhere and to get data from basically

15:36.560 --> 15:38.880
everywhere.

15:38.880 --> 15:46.400
Now what we built was, in this case, an open telemetry collector distribution, a very

15:46.400 --> 15:51.520
small distribution that was meant to solve our specific use case.

15:51.520 --> 15:57.600
And specifically, we wrote a drone receiver, which was listening to a web book that was

15:57.600 --> 16:05.840
written by a drone that would receive data about completed pipelines and generate traces,

16:05.840 --> 16:13.200
logs, and metrics and then export them to logitm.com and Prometheus.

16:13.200 --> 16:16.160
The idea here is that we didn't have to write any of the other components.

16:16.160 --> 16:19.480
Those are all open source components that are available.

16:19.480 --> 16:22.080
They work with everything.

16:22.080 --> 16:25.440
We didn't have to write any of that code.

16:25.440 --> 16:28.800
We just had to configure it.

16:28.800 --> 16:34.480
There are some other practical examples, which is Jenkins plugin, another GitHub action that

16:34.480 --> 16:40.600
generates trace data, and our own one if you want the link.

16:40.600 --> 16:46.600
Now in practice, I try to be fast because I think we're running out of time.

16:46.600 --> 16:48.400
What does it mean in practice?

16:48.400 --> 16:52.840
What we were able to do by implementing CSE observability in our own pipelines and in

16:52.840 --> 16:59.360
our own software delivery process and software lifecycle in general was to identify a flake

16:59.360 --> 17:03.360
test that we were having in Grafana that was sometimes popping up.

17:03.360 --> 17:10.520
We didn't know why and what was happening.

17:10.520 --> 17:16.560
By pushing the logs of our CSE system into logitm, we were able to identify where and

17:16.560 --> 17:24.120
when that logline, that test output, appeared for the first time.

17:24.120 --> 17:32.080
From there, we found out that the build number on-drawn, from which we jumped to the GitHub

17:32.080 --> 17:37.480
action that for the first time caused access to fail, which meant that we were able to solve

17:37.480 --> 17:38.480
the actual issue.

17:38.480 --> 17:45.560
It was some code pushed to someone else, totally different test that apparently was,

17:46.560 --> 17:51.880
shouldn't have caused any issue, but it caused this test to be flaky.

17:51.880 --> 17:58.680
Another thing we did was we built our own custom experience of the Grafana.

17:58.680 --> 18:05.320
First one is just a, let's say, fancier way to look at CI logs.

18:05.320 --> 18:09.560
Second one, I think, is a bit more important and that's something that Dimitri was using

18:10.560 --> 18:19.560
in his job, is still using, which is monitoring at any given time which one of the build,

18:19.560 --> 18:22.840
of the branches, as a failing build.

18:22.840 --> 18:23.840
Why that?

18:23.840 --> 18:29.680
Because in Grafana, we have to support quite a lot of different release branches, when

18:29.680 --> 18:34.560
we have security fixes to make or when we want to release all their versions of Grafana.

18:34.560 --> 18:39.680
We need to be sure that our builds are passing because not having them passing means that

18:39.680 --> 18:45.240
we have to spend time first fixing the issue and then doing the release.

18:45.240 --> 18:51.840
By having an alert on these status, we were able to know beforehand when something was

18:51.840 --> 18:58.840
going to fail because the build itself was failing and prepare ourselves to fix it beforehand.

18:58.840 --> 19:01.840
So, what else it unlocks?

19:02.120 --> 19:04.120
Really, a lot of things.

19:04.120 --> 19:05.800
The idea here is that you own your data.

19:05.800 --> 19:10.760
Owing your data means that you can ask the question you want, ask the question that you

19:10.760 --> 19:17.760
feel are right for your use case, which can span from security, flakiness detection, performance

19:17.760 --> 19:21.840
improvements or door metrics.

19:21.840 --> 19:22.840
I don't know.

19:22.840 --> 19:23.840
Honestly, we don't know.

19:23.840 --> 19:28.680
We feel like there are all opportunities here that can be investigated.

19:29.680 --> 19:34.680
But we feel like this is adding a lot of value.

19:34.680 --> 19:41.680
All in all, we liked having everything within Grafana and production metrics and NCI metrics.

19:42.680 --> 19:43.680
Now, what's next?

19:43.680 --> 19:47.680
This is, as I said, very early stage.

19:47.680 --> 19:53.680
Our proposal got accepted by the Open Telemetry Technical Committee.

19:53.680 --> 19:54.680
We formed a working group.

19:54.680 --> 19:59.680
We want to define standards to work on and to move forward.

19:59.680 --> 20:01.680
So, please join the conversation.

20:01.680 --> 20:04.680
We would really like to hear different use cases.

20:04.680 --> 20:08.680
So, yeah, reach out on the CNCF Slack channel.

20:08.680 --> 20:13.680
And the second link is the Open Telemetry Proposal for CI CDO observability.

20:13.680 --> 20:14.680
Yeah.

20:14.680 --> 20:16.680
Thank you all.

20:16.680 --> 20:23.680
Thanks to you.

20:23.680 --> 20:26.680
Thanks, Dimitris.

20:26.680 --> 20:29.680
Do we have any questions so far?

20:29.680 --> 20:32.680
Can you please wait?

20:32.680 --> 20:35.680
We have still five minutes for Q&A.

20:35.680 --> 20:40.680
Okay.

20:40.680 --> 20:47.680
Are there any plans to release this feature on Grafana for public?

20:47.680 --> 20:52.680
How much do we have to wait to use this kind of stuff?

20:52.680 --> 20:56.680
Well, I think...

20:56.680 --> 21:01.680
So, the thing you can do right now is just use Open Telemetry, maybe take what we did.

21:01.680 --> 21:06.680
The thing we did with Collector Create, your own Collector, use our Collector,

21:06.680 --> 21:11.680
use the thing that exists already for GitHub or Jenkins,

21:11.680 --> 21:16.680
and then make sure that you export all the valuable information for you.

21:16.680 --> 21:21.680
And then you can still use Grafana as your visualization tool, of course.

21:21.680 --> 21:25.680
But like I said, plug-in, it's not ready yet.

21:25.680 --> 21:30.680
I mean, all these things came up like a hackathon project, essentially.

21:30.680 --> 21:33.680
So, we are still unsure.

21:33.680 --> 21:35.680
But you can do it yourself.

21:35.680 --> 21:36.680
That's my...

21:36.680 --> 21:40.680
If you set everything up, if you set the Open Telemetry exporter and stuff,

21:40.680 --> 21:43.680
it should be piece of cake.

21:43.680 --> 21:50.680
Any further questions?

21:50.680 --> 21:57.680
Does the collection of Metric itself impact on the CI?

21:57.680 --> 22:02.680
I didn't get the question, sorry.

22:02.680 --> 22:09.680
Does the Metric's collection itself impact on the time execution of the CI?

22:09.680 --> 22:13.680
I mean, if it has a performance impact, oh, okay.

22:13.680 --> 22:18.680
Our doesn't, because the way it works,

22:18.680 --> 22:24.680
it's a long-running process that waits for a CI to complete and listen to a webbook.

22:24.680 --> 22:27.680
So, the whole thing happens after and in...

22:27.680 --> 22:31.680
I think it's even a completely different server machine than the CI system.

22:31.680 --> 22:34.680
So, it's not really... it doesn't impact anything.

22:34.680 --> 22:38.680
It really depends on your CI system and how you collect those Metric's logs and traces.

22:38.680 --> 22:46.680
So, in our case, no, but it really depends on how you implement the collector.

22:46.680 --> 22:49.680
One more?

22:49.680 --> 22:52.680
I don't see your hand.

22:52.680 --> 22:55.680
And that's it. Thank you.

