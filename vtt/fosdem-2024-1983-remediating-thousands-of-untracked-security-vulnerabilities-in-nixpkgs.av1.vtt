WEBVTT

00:00.000 --> 00:08.600
Okay, up next we have Del Roth.

00:08.600 --> 00:13.000
He's going to be talking about improving security in Nix packages.

00:13.000 --> 00:14.000
Thank you.

00:14.000 --> 00:17.000
It's a microphone actually working.

00:17.000 --> 00:18.000
Yes, good.

00:18.000 --> 00:19.000
So I'm Del Roth.

00:19.000 --> 00:23.000
I've been working on Nix packages for a few years now.

00:23.000 --> 00:30.000
I've been involved in some security mediation events and recently working on Nix source infrastructure.

00:30.000 --> 00:34.000
So it all comes from a story.

00:34.000 --> 00:37.000
So let's start with a story.

00:37.000 --> 00:43.000
Sometime last year, this vulnerability dropped kind of silently.

00:43.000 --> 00:50.000
Chrome released an update saying, hey, we released an update saying, hey, we released an update.

00:50.000 --> 01:00.000
You should really update today because people have actually been exporting to the world and it's giving code execution.

01:00.000 --> 01:14.000
So the interesting thing is we actually patched that in Chrome really quickly, but also what Nix packages, Nix OS and some other distros started realizing that that's not actually a Chrome vulnerability.

01:14.000 --> 01:25.000
It was reported everywhere as a Chrome vulnerability at the time, but it was actually vulnerability like a dependency of Chrome, which is WebP, which is an image parsing library.

01:25.000 --> 01:30.000
So we patched WebP and not just Chrome and everything is solved.

01:30.000 --> 01:37.000
Everyone depends on WebP, so whenever the version is updating Nix packages, they'll pick up the update.

01:37.000 --> 01:38.000
It gets rebuilt.

01:38.000 --> 01:43.000
Everything is magical and we don't have to do anything else.

01:44.000 --> 01:50.000
So then it's viewed about a month of work to actually make this happen.

01:50.000 --> 02:04.000
So this is the tracking bugs that I actually linked at the bottom for trying to actually fix this vulnerability in Nix packages, not just in Chrome, not just in WebP itself, but in actually everything else that's in Nix packages.

02:05.000 --> 02:10.000
I've highlighted part of it here, which is that some applications bundle their own version of WebP.

02:10.000 --> 02:14.000
Each of these need to be updated separately by Nix packages' maintainers.

02:14.000 --> 02:27.000
And that's not just Chrome, that's including some other web browsers, for example, that was not including Firefox, but for example including Thunderbird, because the packaging was slightly different, etc.

02:27.000 --> 02:31.000
See Bigo for a guess of all the non-applications that need an update in their status.

02:31.000 --> 02:33.000
So this is Bigo.

02:35.000 --> 02:39.000
And yeah, so as you can see, this was about a month of work.

02:39.000 --> 02:42.000
I'm not going to go through the whole list, but there's a lot of stuff.

02:42.000 --> 02:53.000
This list is probably not complete, because as I'm going to get to, we lack tooling on this, we lack statistics, we lack data.

02:53.000 --> 03:08.000
And so this talk is trying to, given overview of this problem, try to bring awareness to it and try to bring up a few solutions and how we could actually do things better.

03:08.000 --> 03:09.000
So why is this happening?

03:09.000 --> 03:11.000
Why did we have to fix so many things?

03:11.000 --> 03:15.000
So this is a phenomenon known as vendering.

03:15.000 --> 03:32.000
Vendering is when a piece of software decides that instead of depending on the library that they get through, like, you know, package config or through the general build environment providing to it, the software is just going to copy the source code of that library,

03:32.000 --> 03:39.000
put it somewhere in their own source directory, and then, you know, it's easier to build because people don't have to install dependencies.

03:39.000 --> 03:56.000
The problem with that is, since they've pinned the version of the dependency, whenever there's an update that needs to happen to it, then the update doesn't just need to happen to the dependency, it needs to happen to everyone who has pinned the version of the dependency by copying it into their source repository.

03:56.000 --> 04:01.000
To some extent, vendering also happens with rock files.

04:02.000 --> 04:17.000
Rock files aren't exactly the same thing because technically you're not copying the source code, you're just enforcing that your software can only build with one specific version of a library, and sometimes even if you're providing the hash of the source code or the binaries that you need to use to build the software,

04:17.000 --> 04:27.000
which means that in practice, you're not copying the source code, you're just copying the hash of the source code, you're still basically pinning it and making it impossible to do any kind of update.

04:28.000 --> 04:37.000
So, for this specifically web people ability, so we spent about a month on this, we did not, but it should fix everything.

04:37.000 --> 04:48.000
So that's a sad part of this, is that tens of people, I don't actually have a full list here, but tens of people spent probably hundreds of hours combined on this,

04:48.000 --> 05:08.000
trying to fix software that we have index packages but maintainers weren't super active on or just chased on upstream, because if upstream has copied the version of a package of a webp into the source code, then you need them to actually go and fix the problem,

05:08.000 --> 05:14.000
or you need to apply patches, but patches are fragile, they'll just break on the next update, etc.

05:15.000 --> 05:20.000
And yeah, even though we spent hundreds of hours on this, we did not actually fix everything.

05:20.000 --> 05:33.000
We fixed, I think about like 50% by count of a new number of packages, but what we did actually is we spent some time categorizing and saying, okay, these are the actual high risk stuff that's likely to get exploited,

05:34.000 --> 05:49.000
that's connected to the internet, pulsing and trusted input, and then there is the rest, which is like, you know, maybe we can get away with not updating it now and sometime in the future upstream will realize that they actually are vulnerable to something and we'll maybe fix it.

05:50.000 --> 05:59.000
Even if you look at only the high risk stuff that we categorize as high risk, we had some packages in there that we did not actually get fixed.

05:59.000 --> 06:17.000
We had to mark them as insecure index packages because even though they are like internet facing software that passes and trusted image files, for example, like email clients, they did not get an update within a month for critical vulnerability that Chrome people were saying was exploited in the world.

06:20.000 --> 06:28.000
So, let's play a little game. Let's have some maybe, well, I don't know if we'll do audience participation.

06:28.000 --> 06:46.000
Give WebP copies index packages. So I've counted, I've actually been building some tooling as part of the remediation for this Give WebP vulnerability and we have a better idea now of how many packages are copying libraries that we have in Ex packages.

06:46.000 --> 06:54.000
So for Give WebP, we had about 116 different packages and by packages here, you know, we had a whole talk about what the package is.

06:54.000 --> 07:08.000
I'm talking about something that is built by Hydra. So, next package is stuff that is not non free, that is not insecure and not marked as insecure.

07:09.000 --> 07:16.000
And I'm not counting like, I'm counting only one architecture, I'm like grouping by package name.

07:16.000 --> 07:24.000
So we have about 116 Give WebP copies, but I think WebP is actually fairly recent. WebP is a modern image format.

07:24.000 --> 07:29.000
What about the PNG, which is significantly older?

07:29.000 --> 07:38.000
2037 WebP JPEG, which is maybe even more common than with PNG, 2053.

07:38.000 --> 07:52.000
ZGib. So ZGib is a really small C library that people have been using for maybe 30 years to decompress gz files and zip files and stuff like this.

07:53.000 --> 08:00.000
We have about 761 of those in Expack, copied throughout multiple Ex packages things.

08:00.000 --> 08:08.000
So let's say that for example, there would be like a vulnerability in the PNG. How do we go and fix it?

08:08.000 --> 08:18.000
Well, given that we took about a month for 116 packages in WebP and we got 250% of them, I guess the PNG would take about like two months maybe and we get also 250% of them.

08:18.000 --> 08:20.000
It's not really a great outcome.

08:24.000 --> 08:30.000
So is this actually a problem? How often do these libraries actually have vulnerabilities?

08:30.000 --> 08:36.000
Also, okay, we have copies of them, but maybe they're actually being kept up to date and it's not actually that bad.

08:36.000 --> 08:42.000
So here is actually for gpng, this is a grouping by version.

08:43.000 --> 08:51.000
It's another that we actually have enough information that we can figure out what version of the PNG is being embedded within all the packages in the next packages.

08:51.000 --> 09:00.000
And you'll see that the top of the distribution is very much like recent versions 1637, 1639, 1640.

09:00.000 --> 09:02.000
That's actually pretty good.

09:02.000 --> 09:07.000
Next packages unsurprisingly is at 1640 right now. We have the gate.

09:07.000 --> 09:14.000
Well, I don't know if it's a gate version because you want 170 in there and I don't actually know it's definitely not as used as the others.

09:14.000 --> 09:22.000
What I've also looked at is the biggest date for some of these versions and these are also versions really small than 10 years ago.

09:22.000 --> 09:31.000
So we actually have two packages in next packages right now using a gpng version from 2004, which is kind of impressive.

09:32.000 --> 09:37.000
It's like, you know, was x6664 even a thing at the time? I don't know.

09:37.000 --> 09:43.000
But somehow it works. I don't know actually I've not tested it, maybe it doesn't work, but it's in there.

09:43.000 --> 09:47.000
You can next build it and you'll get a binary that has a gpng from 2004.

09:47.000 --> 09:50.000
Does it have vulnerabilities? Yes.

09:50.000 --> 09:55.000
There's like about like 12 different critical CVs that give code execution, buffer overflows.

09:55.000 --> 10:02.000
Some of this might be might be mitigated these days because we have vulnerability mitigation that's part of operating system.

10:02.000 --> 10:04.000
That's part of compilers and stuff like that.

10:04.000 --> 10:09.000
So it's not exactly clear how many vulnerabilities apply to these old versions.

10:09.000 --> 10:16.000
Another thing is that there isn't really anyone right now who like finds a new vulnerability in gpngs and goes and say,

10:16.000 --> 10:18.000
oh, I'm going to test it on this version from 2004.

10:18.000 --> 10:20.000
Just to see if it actually applies.

10:20.000 --> 10:27.000
So a lot of the vulnerability databases out of date and doesn't really contain the right information to even check against that.

10:30.000 --> 10:32.000
I've mentioned block files.

10:32.000 --> 10:34.000
So block files are kind of a new problem.

10:34.000 --> 10:41.000
It turns out if you go back to 10 years ago, we didn't have software in Rust and go in JavaScript.

10:41.000 --> 10:44.000
At least we didn't have as much as we do now.

10:44.000 --> 10:49.000
Java kind of did block files a bit with Maven even at the time.

10:49.000 --> 10:51.000
But it's mostly a new phenomenon.

10:51.000 --> 10:59.000
And the good thing with block files is it's actually really easy to get a full transitive list of all the dependencies because they're in the rock file.

10:59.000 --> 11:09.000
That doesn't mean that people are any better at actually managing their dependencies unfortunately, even though there is good tool game to do so.

11:09.000 --> 11:12.000
So for example, for Rust, there is this tool called Calgo Audit.

11:12.000 --> 11:21.000
And Calgo Audit is a tool that takes a Calgo.rock file and tells you all of the vulnerabilities that apply in this Calgo.rock file.

11:21.000 --> 11:30.000
So I used some tools that I wrote as well to go through every single Rust package, current index packages.

11:30.000 --> 11:38.000
And that's kind of like looking at every single derivation that has a Calgo.debs in it, correcting the rock file from that.

11:38.000 --> 11:49.000
And what we find by doing this is that there is 62% of all Rust packages in the next packages right now that have at least one vulnerable dependency locked in a rock file.

11:49.000 --> 11:53.000
This is, I mean, I'm describing as an X packages problem.

11:53.000 --> 11:56.000
The problem is it's not entirely an X packages problem.

11:56.000 --> 11:58.000
We're just fetching it from upstream.

11:58.000 --> 12:00.000
It's just people are locking dependencies.

12:00.000 --> 12:02.000
We don't really have control over that.

12:02.000 --> 12:05.000
We did for Python, C, C++ dependencies.

12:05.000 --> 12:12.000
And upstream is just not doing as good a job as distributions were doing.

12:12.000 --> 12:18.000
I mentioned a thousandth and a hundredth vulnerable dependencies.

12:18.000 --> 12:27.000
About 750 of these are actually higher critical severity based on CVSS score, which is a third metric, but it's about as good as we have.

12:27.000 --> 12:38.000
So yeah, if you get a Rust packages in X packages at random, you have a 40% chance that one of these dependencies has at least one known critical, like higher critical vulnerability.

12:38.000 --> 12:48.000
Doesn't mean it's exploitable, but let's say that even like one percent of this is exploitable, that's seven packages in X packages with higher critical vulnerabilities exploitable.

12:48.000 --> 12:49.000
That's still not good.

12:49.000 --> 12:54.000
And one percent is just a random number I picked.

12:54.000 --> 12:57.000
Yeah, so as I mentioned, it's an ecosystem.

12:57.000 --> 12:59.000
It's a general open source ecosystem problem.

12:59.000 --> 13:05.000
I don't know that this specific log files thing is something that we can fix at the next packages site.

13:05.000 --> 13:07.000
Next packages has some fault.

13:07.000 --> 13:09.000
We have some rust software that's just out of date, for example.

13:09.000 --> 13:13.000
And so when we do that, you know, well, the log file is also out of date.

13:13.000 --> 13:18.000
But from the ones that I've manually inspected, this is not the majority of these cases.

13:18.000 --> 13:29.000
In the majority of cases, this is that next package is packaging the latest version from upstream and is just containing insecure dependencies.

13:29.000 --> 13:32.000
What is causing vendor in X packages?

13:32.000 --> 13:34.000
A few things.

13:34.000 --> 13:36.000
We don't actually try to prevent it.

13:36.000 --> 13:38.000
I've checked.

13:38.000 --> 13:44.000
I was really surprised next packages does not have any documentation, any policy against vendor.

13:44.000 --> 13:52.000
There's nothing that says, you know, if a software has an option to use system with PNG itself using its own empty version,

13:52.000 --> 13:56.000
there's actually no documentation that says that we should prefer using that option.

13:56.000 --> 13:59.000
A lot of people do it because it's good practice.

13:59.000 --> 14:00.000
Not everyone does.

14:00.000 --> 14:09.000
We don't really have, yeah, like we don't really have a way to prevent it for newer language ecosystems like for Goura, JavaScript, as I mentioned.

14:09.000 --> 14:10.000
You don't have a choice.

14:10.000 --> 14:16.000
You just have to vendor stuff because we don't have a way to, we don't have Rust libraries in X packages.

14:16.000 --> 14:18.000
We just have the GIF software.

14:18.000 --> 14:20.000
Same for Go, same for JavaScript.

14:20.000 --> 14:22.000
Well, now same for JavaScript.

14:22.000 --> 14:30.000
We used to have Node 2.x for a while, which kind of added NICS derivations for libraries, but it was automatically generated anyway.

14:30.000 --> 14:33.000
So it's not like we could really do much about it.

14:33.000 --> 14:38.000
And finally, like until recently, we didn't actually have any tooling to try and detect and measure this problem.

14:38.000 --> 14:42.000
So it was just like hidden, big of the water.

14:42.000 --> 14:48.000
And we couldn't really go and say, oh, hey, there's a new derivation that's being proposed by someone.

14:48.000 --> 14:50.000
Like a new package has been added into NICS packages.

14:50.000 --> 14:52.000
Is it actually rendering anything?

14:52.000 --> 14:54.000
People would have to go and manually check.

14:54.000 --> 15:00.000
And nobody was doing this when reviewing packages because it's just a lot of effort.

15:00.000 --> 15:07.000
This potentially stuff we could do now automatically with some newer tooling that I've been writing.

15:07.000 --> 15:12.000
As I mentioned, we don't have policies against rendering, but it's even wasn't that in X packages.

15:12.000 --> 15:15.000
We don't have really policies against even building from source.

15:15.000 --> 15:19.000
It's preferred, but there's actually no preference expressed anywhere.

15:19.000 --> 15:22.000
I've checked again today and I could not find it.

15:22.000 --> 15:25.000
So people just go and fetch things from app images, for example.

15:25.000 --> 15:27.000
Upstream this with an app image.

15:27.000 --> 15:28.000
It's too complicated to build.

15:28.000 --> 15:33.000
I'm just going to fetch the app image, run patch health to fix a path to dependencies.

15:33.000 --> 15:38.000
And then the problem is, well, you don't really know what libraries,

15:38.000 --> 15:41.000
what dependencies upstream has been using to build these app images.

15:41.000 --> 15:43.000
It's usually not great.

15:43.000 --> 15:52.000
So this is something we had with WebP, for example, where I think Anki, for example,

15:52.000 --> 15:54.000
like the flashcard software is using.

15:54.000 --> 15:57.000
We just using the app image for it.

15:57.000 --> 16:03.000
And it was vulnerable because it was using some build environment from 2018 or something.

16:03.000 --> 16:06.000
That was, of course, not receiving any security updates.

16:06.000 --> 16:07.000
We fetched dev files.

16:07.000 --> 16:08.000
We fetched...

16:08.000 --> 16:11.000
People are very creative about how to get binaries.

16:11.000 --> 16:13.000
We fetched targz.

16:13.000 --> 16:16.000
We fetch static go binaries.

16:16.000 --> 16:17.000
We...

16:17.000 --> 16:22.000
Let's not even talk about JavaScript because you can just fetch a targz and unpack it somewhere.

16:22.000 --> 16:26.000
And it's fine because when would JavaScript software ever have vulnerabilities?

16:27.000 --> 16:29.000
And, yeah.

16:29.000 --> 16:33.000
So some of the distros have famously strong preferences for building from source.

16:33.000 --> 16:39.000
Debian has really good policies regarding rendering, which have always been kind of the gold standard,

16:39.000 --> 16:41.000
I think, in the distribution world.

16:41.000 --> 16:43.000
We should probably do some of that.

16:46.000 --> 16:49.000
How do we address Rust, GoNPM, et cetera?

16:49.000 --> 16:51.000
I don't think we can.

16:51.000 --> 16:53.000
I think it's an upstream problem.

16:53.000 --> 16:59.000
But what we could probably do is make it clearer to users that they're actually using intellectual software.

16:59.000 --> 17:02.000
It's not really a problem that any other big distros have been...

17:02.000 --> 17:05.000
Has been hitting much because just...

17:05.000 --> 17:07.000
NICS packages are much bigger in terms of scope.

17:07.000 --> 17:09.000
We put everything in NICS packages.

17:09.000 --> 17:11.000
We don't have a UR.

17:11.000 --> 17:19.000
I mean, we have any UR, like some people use, but like the bar for what goes into NICS packages is very low, right?

17:19.000 --> 17:22.000
We don't actually have many policies against like, you know, this...

17:22.000 --> 17:26.000
Let's just keep this out of NICS packages because it's not well maintained by upstream.

17:26.000 --> 17:28.000
We don't really do this much.

17:28.000 --> 17:37.000
So, you know, by being a huge package set, we have the problem that we have pretty bad software that's not really being kept up to date.

17:37.000 --> 17:40.000
We have stuff that's just not maintained anymore by upstream.

17:40.000 --> 17:43.000
And I feel like this is some...

17:43.000 --> 17:46.000
Like the way we should fix this in NICS packages is like,

17:46.000 --> 17:52.000
lockfile insecurity problem is just by making sure that if upstream is actually maintaining the lockfiles,

17:52.000 --> 17:59.000
we should probably inform the users and make them actually aware of the risks.

17:59.000 --> 18:01.000
We currently have this non-rune...

18:01.000 --> 18:04.000
Like non-runeabilities bit that we can put in the package.

18:04.000 --> 18:08.000
The problem is that it's extremely cold and it's extremely annoying to work around.

18:08.000 --> 18:10.000
Like, people have to manually...

18:10.000 --> 18:11.000
It stops evaluation.

18:11.000 --> 18:12.000
It's not a warning.

18:12.000 --> 18:13.000
It's like a critical error.

18:13.000 --> 18:15.000
You're using like an insecure package.

18:15.000 --> 18:23.000
And so what people do is they just allow every insecure package because the easiest way to work around the error.

18:23.000 --> 18:25.000
So, yeah.

18:25.000 --> 18:29.000
Tool Gang, as I mentioned, until recently, we didn't really have any way to detect this.

18:29.000 --> 18:36.000
I have actually written a bunch of things to try and detect rendering.

18:36.000 --> 18:42.000
So, one tool which is called GrepNICSOS Cache, and what it does is get rid of GrepNICSOS Cache.

18:42.000 --> 18:47.000
It goes and it takes a list of store paths which we get from Hydra.

18:47.000 --> 18:50.000
And it runs...

18:50.000 --> 18:53.000
It will just go and fetch every single store path that Hydra has built,

18:53.000 --> 18:56.000
which is like a few, usually 100,000,

18:56.000 --> 18:58.000
and it just runs some signatures on it.

18:58.000 --> 19:02.000
It looks for some strings that you find as part of the implementation of some libraries.

19:02.000 --> 19:06.000
And if the library has been vended or statically ganked,

19:06.000 --> 19:07.000
you will find a string in there.

19:07.000 --> 19:11.000
And sometimes you can even get version numbers and stuff like this.

19:12.000 --> 19:15.000
And some other projects I've been working on is...

19:15.000 --> 19:18.000
I've kind of called it NICS packages Vendor Drone Scan

19:18.000 --> 19:22.000
because I wanted to also make it include the above, like, new rendering thing.

19:22.000 --> 19:25.000
But this one is currently specifically doing log file analysis.

19:25.000 --> 19:29.000
So, finding all of the log files for Rust, JavaScript,

19:29.000 --> 19:36.000
and doing automatic vulnerability detection based on the log files.

19:36.000 --> 19:38.000
Conclusion.

19:38.000 --> 19:40.000
We have new tool gang.

19:40.000 --> 19:43.000
We have a better idea of how rendering goes in NICS packages,

19:43.000 --> 19:45.000
and it's not great.

19:45.000 --> 19:50.000
And it's a problem because we cannot actually fix

19:50.000 --> 19:53.000
security vulnerabilities in base libraries right now.

19:53.000 --> 19:57.000
We tell ourselves that we did by, you know, fixing the library itself,

19:57.000 --> 20:00.000
and we say, I have 100 different instances of the library being unpatched.

20:00.000 --> 20:01.000
How to fix it?

20:01.000 --> 20:02.000
Well, awareness.

20:02.000 --> 20:04.000
Now all of you probably know about this,

20:04.000 --> 20:07.000
and when you review new packages,

20:07.000 --> 20:10.000
and maybe look at whether this is happening,

20:10.000 --> 20:11.000
more discipline.

20:11.000 --> 20:13.000
I think we should have policies about this.

20:13.000 --> 20:15.000
I have not thought about the exact policy we should have yet,

20:15.000 --> 20:17.000
but we should probably have one.

20:17.000 --> 20:20.000
And better reporting for cases that we cannot fix ourselves,

20:20.000 --> 20:23.000
which is the insecure log files, most of the time.

20:23.000 --> 20:24.000
Yeah.

20:24.000 --> 20:25.000
Here we go.

20:25.000 --> 20:27.000
If you have any thoughts or comments,

20:27.000 --> 20:28.000
please ask any questions now.

20:28.000 --> 20:31.000
Otherwise, this is a contact info and some links to tooling.

20:31.000 --> 20:32.000
Thank you.

20:32.000 --> 20:41.000
Thank you for that.

20:41.000 --> 20:45.000
That was terrifying as someone who's come from the Debian world.

20:45.000 --> 20:47.000
Exciting as well.

20:47.000 --> 20:52.000
It's a really simple social approach that we could take to this

20:52.000 --> 20:56.000
to add another tick box to the default pull request template to say,

20:56.000 --> 20:58.000
have you checked that there's no vended crap

20:58.000 --> 21:02.000
that you could be using a system library for?

21:02.000 --> 21:03.000
I think it would help.

21:03.000 --> 21:05.000
At some point, if we just continue adding check boxes,

21:05.000 --> 21:06.000
people are just going,

21:06.000 --> 21:08.000
people are already ignoring a lot of them.

21:08.000 --> 21:11.000
They say, has anyone actually checked the sandbox thing

21:11.000 --> 21:13.000
in the pull request template anytime soon?

21:13.000 --> 21:17.000
It's like, you know, I see two people check, raise their hands.

21:17.000 --> 21:21.000
The rest of us have never touched a check box.

21:21.000 --> 21:24.000
Yeah, I kind of, I'd prefer if it was automated through tooling,

21:24.000 --> 21:27.000
if we could detect some of it automatically.

21:27.000 --> 21:31.000
And I'd prefer if at least we fix the policy first

21:31.000 --> 21:35.000
and then, you know, maybe figure out the actual edge cases

21:35.000 --> 21:38.000
before we start taking people to look for stuff

21:38.000 --> 21:40.000
without actually being accurate about what to look for.

21:40.000 --> 21:56.000
But yes, we probably should be doing some valiant of this.

21:56.000 --> 22:00.000
One of my favorite things to do is package and archive

22:00.000 --> 22:02.000
and preserve old software.

22:02.000 --> 22:05.000
And some of that work has been done as a pull request

22:05.000 --> 22:06.000
in next packages.

22:06.000 --> 22:08.000
Sometimes it doesn't get merged because, you know,

22:08.000 --> 22:11.000
it's got an old dependency on like Qt4 or something.

22:11.000 --> 22:13.000
So they say, oh, no, we can't merge this.

22:13.000 --> 22:16.000
And it does prevent some software from getting into next packages,

22:16.000 --> 22:19.000
but there is still a lot of software still in there

22:19.000 --> 22:21.000
that managed to sneak in.

22:21.000 --> 22:23.000
And since we don't have a policy,

22:23.000 --> 22:24.000
it's kind of like ad hoc,

22:24.000 --> 22:26.000
like some things get in, some things don't.

22:26.000 --> 22:28.000
Some people launch Crusades against like old Python,

22:28.000 --> 22:30.000
and they don't want that there.

22:30.000 --> 22:32.000
And yeah, it's kind of, yeah, messy.

22:32.000 --> 22:33.000
So what do you think about it?

22:33.000 --> 22:35.000
Because I think there's like a real value proposition

22:35.000 --> 22:37.000
for archiving old software,

22:37.000 --> 22:39.000
because Table is not nix-source.org,

22:39.000 --> 22:40.000
will archive the source code.

22:40.000 --> 22:41.000
It will be around forever.

22:41.000 --> 22:44.000
You'll be able to reproduce it in 20 years.

22:44.000 --> 22:47.000
Yeah, so what do you think about like, you know,

22:47.000 --> 22:50.000
banning old stuff and only striving for perfection

22:50.000 --> 22:53.000
versus keeping everything in next packages

22:53.000 --> 22:55.000
and just accepting everything?

22:55.000 --> 22:57.000
Yeah, I don't think we should be striving

22:57.000 --> 22:58.000
necessarily for perfection.

22:58.000 --> 23:00.000
Like, I don't think we can anyway,

23:00.000 --> 23:02.000
but the problem right now is,

23:02.000 --> 23:04.000
so for the case of old software, for example,

23:04.000 --> 23:06.000
usually one of the things that's blocking old software

23:06.000 --> 23:09.000
is when they use library versions that, you know,

23:09.000 --> 23:11.000
when they have so many dependencies in next packages

23:11.000 --> 23:17.000
that having this old software will induce costs

23:17.000 --> 23:19.000
on other maintainers, because they have to care

23:19.000 --> 23:22.000
about this old software that will never actually be updated

23:22.000 --> 23:26.000
to, like, you use a new API or something like that in the library.

23:26.000 --> 23:28.000
And so I think that we should figure out a way

23:28.000 --> 23:30.000
to include this old software or it can use this,

23:30.000 --> 23:32.000
like, you know, less-maintained software

23:32.000 --> 23:35.000
in a way that doesn't use a bandwidth of all the maintainers.

23:35.000 --> 23:38.000
Right now, we don't have a way to distinguish this software

23:38.000 --> 23:40.000
from, you know, stuff that more people care about,

23:40.000 --> 23:42.000
more people use, which means that whenever there is

23:42.000 --> 23:44.000
security radiation that needs to happen,

23:44.000 --> 23:46.000
the people doing the security radiation

23:46.000 --> 23:48.000
don't have a way to distinguish these things.

23:48.000 --> 23:50.000
And we use our bandwidth on stuff that maybe is, like,

23:50.000 --> 23:52.000
your old software and stuff like this.

23:52.000 --> 23:55.000
That's why I think that we should have better query

23:55.000 --> 23:58.000
categorization, better ways to inform the users

23:58.000 --> 24:01.000
about which category a given software falls into.

24:01.000 --> 24:03.000
We don't really have any of this right now in next packages.

24:03.000 --> 24:07.000
And I think it's, I don't know how we've managed to survive

24:07.000 --> 24:09.000
that long without having such a system.

24:09.000 --> 24:11.000
I think we just burn a bunch of maintainer time

24:11.000 --> 24:14.000
on stuff that, really, we shouldn't.

24:14.000 --> 24:16.000
And we should just accept to be broken.

24:21.000 --> 24:26.000
Hi.

24:26.000 --> 24:29.000
As you went around interacting with upstream

24:29.000 --> 24:31.000
to have these sorts of issues fixed,

24:31.000 --> 24:34.000
I'm pretty sure some of these things were also things

24:34.000 --> 24:37.000
that other distros were also dealing with and working with.

24:37.000 --> 24:41.000
As you encountered them, what sorts of things did you see

24:41.000 --> 24:44.000
in terms of those interactions with dealing with upstream,

24:44.000 --> 24:47.000
where you had maybe requests coming from other people,

24:47.000 --> 24:50.000
kind of a similar position as you, but just from other distros?

24:50.000 --> 24:52.000
Yeah.

24:52.000 --> 24:55.000
So a lot of the cases where I've actually had to contact

24:55.000 --> 24:58.000
upstream myself were stuff that was not actually packaged

24:58.000 --> 25:01.000
in other distros, just because, you know,

25:01.000 --> 25:04.000
Debian doesn't actually package .NET software, for example,

25:04.000 --> 25:07.000
or doesn't package much Go software, surprisingly.

25:07.000 --> 25:09.000
Like, if you want to get Grafana from Debian,

25:09.000 --> 25:11.000
I think they still won't have that in every repository.

25:11.000 --> 25:13.000
I mean, it's not free anymore, so they have a good reason now,

25:13.000 --> 25:17.000
but, you know, they never did, right?

25:17.000 --> 25:19.000
Do they even package Prometheus?

25:19.000 --> 25:20.000
Right?

25:20.000 --> 25:22.000
Like some pretty base software that people would expect

25:22.000 --> 25:23.000
to be able to apt-get.

25:23.000 --> 25:25.000
You have to use some external repositories because they don't

25:25.000 --> 25:27.000
have the right tools to package Go codes.

25:27.000 --> 25:32.000
So I think because the next package is much broader in scope,

25:32.000 --> 25:34.000
we have a lot more things to care about,

25:34.000 --> 25:38.000
and we've had to do a lot more of the talking to upstream.

25:38.000 --> 25:42.000
There is stuff that has been useful to all these distros

25:42.000 --> 25:45.000
and, like, you know, we, like, other distros have contacted

25:45.000 --> 25:47.000
upstream before us in some cases,

25:47.000 --> 25:49.000
and usually when we do contact upstreams,

25:49.000 --> 25:51.000
they are receptive to this.

25:51.000 --> 25:53.000
The problem is when they just don't reply.

25:53.000 --> 25:57.000
So, for example, for WebP, we had the issue that the main

25:57.000 --> 26:00.000
libraries that people are using to use WebP in Go

26:00.000 --> 26:03.000
was just unmaintained, and we failed the bug,

26:03.000 --> 26:06.000
and the maintainer has just still not replied to it to this day.

26:06.000 --> 26:09.000
So you have 500 users of this library that indirectly

26:09.000 --> 26:11.000
has a vanduid, vulnerable WebP version.

26:11.000 --> 26:12.000
What do we do?

26:12.000 --> 26:15.000
So we had to go and manually contact some other users of this

26:15.000 --> 26:18.000
and say, like, hey, you use a vulnerability that's not actually

26:18.000 --> 26:19.000
maintained anymore.

26:19.000 --> 26:20.000
You should fix that.

26:20.000 --> 26:23.000
And suddenly it's like, you know, like, the tree of things

26:23.000 --> 26:25.000
you need to contact grows and grows.

26:25.000 --> 26:27.000
It's a complicated problem.

26:27.000 --> 26:29.000
But does that value?

26:29.000 --> 26:30.000
It does.

26:30.000 --> 26:31.000
It does add value.

26:31.000 --> 26:32.000
Yes.

26:32.000 --> 26:34.000
I mean, it's general, like, you value to, like,

26:34.000 --> 26:35.000
the whole software ecosystem.

26:35.000 --> 26:38.000
It's just not the next packages thing, but it's tiring, right?

26:38.000 --> 26:42.000
You know, it's not feasible that we would be the only people

26:42.000 --> 26:46.000
caring about this for every single vulnerability.

26:46.000 --> 26:47.000
Great.

26:47.000 --> 26:49.000
Let's have another round of applause for Delo.

26:49.000 --> 26:50.000
Thank you.

26:50.000 --> 26:51.000
Thank you.

