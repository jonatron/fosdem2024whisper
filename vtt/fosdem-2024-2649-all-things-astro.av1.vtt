WEBVTT

00:00.000 --> 00:24.960
Hello everyone, so our next speaker is one of my very good friends, a BGS team member

00:24.960 --> 00:32.240
and an Astro core team member as well. His name is Elian and he's going to talk about

00:32.240 --> 00:34.960
guests. Astro.

00:34.960 --> 00:41.200
Hey, who wasn't that a surprise?

00:41.200 --> 00:45.680
Alright, let me check that I'm not in the screen. Okay, hello everyone. Hope you're

00:45.680 --> 00:50.000
doing good. I'm doing good, I'm just a little bit tired. I just flew in from Poland over

00:50.240 --> 00:55.600
Zurich because I had a conference yesterday as well. So if I sometimes struggle with words,

00:55.600 --> 01:01.440
I'm sorry I'm tired. Also I'm in Astro core. Astro is this framework. I'll talk about that

01:01.440 --> 01:06.480
in a minute. But also in the React Brussels and the BGS team, I don't know if you've ever been

01:06.480 --> 01:09.840
to our conferences. That's here in Belgium. I was actually born here in Brussels and now

01:09.840 --> 01:14.960
living in Ghent. But also those guys are the same ones that actually organized this dev room. So

01:14.960 --> 01:21.200
maybe let's give them a quick round of applause as well. Yes. And they actually both left so

01:21.200 --> 01:25.680
they have no idea. But that's good. I also do my own meetups in Ghent. So if you live in Ghent

01:25.680 --> 01:29.520
or in Belgium overall, you're always welcome at our meetups. They're free. If you want to follow

01:29.520 --> 01:33.600
me after this or want to ask some question that you didn't get time to, feel free to follow me

01:33.600 --> 01:39.840
online. It's at Alien Coats on all platforms. So that should be easy. Okay, let's address the

01:39.840 --> 01:47.040
elephants in the room. What is Astro? Who has heard of Astro? Oh, wow. That is a lot. I asked the

01:47.040 --> 01:53.280
same question yesterday. We're like three hands. Who has actually used Astro? Okay, that's also a

01:53.280 --> 01:59.680
lot. Who is on the latest release of Astro? Okay, still good, still good. And who is using Astro

01:59.680 --> 02:06.400
professionally? Nice. Okay. No, that's what I was expecting. That's fine. That's fine. Cool. Okay,

02:06.400 --> 02:13.440
so it's a personal experience probably. Okay, that's good. Okay, cool. So we call Astro the

02:13.440 --> 02:18.160
framework for content-driven development. There are a couple of reasons that we say that. And

02:18.160 --> 02:24.640
I hope that will be clear to you after the talk. See it as being a comparable framework to Next

02:24.640 --> 02:28.720
or Next. It's a meta framework as we sometimes call them. There is a lot of discussion over

02:28.720 --> 02:34.480
should we call them meta frameworks. But let's call it that for now. We can later discuss on Twitter

02:34.560 --> 02:39.440
if it's, well, on X, if it's actually called a meta framework or not. This is what it looks like.

02:39.440 --> 02:45.040
This is the Astro syntax. Basically, everything that you want to write in JavaScript or in

02:45.040 --> 02:48.800
TypeScript, we support TypeScript, goes in between the front, the top, the dashes.

02:50.000 --> 02:54.240
That's always server-side. I'll explain that a little bit later. But it's a very familiar

02:54.240 --> 02:59.440
syntax. It's basically JavaScript at the top or TypeScript if you prefer. And below it's just,

02:59.600 --> 03:06.960
JSX likes syntax. It's not really JSX. It looks like JSX. But you can use class. So it's an improved

03:06.960 --> 03:15.680
JSX. Why is it ideal for content-driven? Well, it is because it's better for SEO and for meta tags

03:15.680 --> 03:20.960
and all of that stuff. Because we ship zero kilobytes of JavaScript by default. There is a

03:20.960 --> 03:27.200
few catches with that. We were one of the first frameworks to take this approach. But by now,

03:27.200 --> 03:33.280
we're surely not the only one. And sometimes a better tool fits a better use case or there is

03:33.280 --> 03:37.200
a different tool that's totally fine. If you want to discuss that, we can totally do that after

03:37.200 --> 03:44.880
this talk. Think of your traditional framework application approach. You write something in,

03:45.520 --> 03:51.920
let's say, next JS or in next. It typically looks like this. It doesn't always, we have now,

03:51.920 --> 03:56.800
React Server components and stuff. But I'm not going to account for that. All of these components

03:56.800 --> 04:01.440
require JavaScript or TypeScript and compile to JavaScript. And that is actually really weird

04:01.440 --> 04:05.040
because there is a couple of stuff here that is completely static and doesn't need JavaScript.

04:05.040 --> 04:11.120
For instance, the footer. It's just basic A tags, whatever. The header, maybe it's just an A tag

04:11.120 --> 04:15.520
that refers to your home page or an image. Why do I need JavaScript to render an image? That

04:15.520 --> 04:21.440
doesn't make sense. So what we do with Astro is basically we compile it all down to static HTML,

04:21.440 --> 04:28.640
CSS and JavaScript if you want to. More on that later. Basically, you have to remember HTML first.

04:30.000 --> 04:35.360
So what if you need JavaScript? You probably want some interactivity, right? You probably want to

04:35.360 --> 04:40.800
add a button, a hamburger button, drop downs, all of that stuff. What if you need interactivity?

04:40.800 --> 04:45.360
Well, of course, that is possible. We have a directive for that. It's called client. And that

04:45.360 --> 04:50.720
gives you a few options on how to control interactivity and tell the compiler when and how to

04:50.720 --> 04:57.760
hydrate components. I listed a couple. There are more. But I'm going to quickly just go over these.

04:57.760 --> 05:01.920
Client only is very easy. It just skips our compiler completely and ships JavaScript,

05:01.920 --> 05:07.360
as you would in React. And client media will only hydrate a component when a given media query is

05:07.360 --> 05:13.600
met. Think of it like mobile only buttons, hamburger buttons, all of those don't require

05:13.600 --> 05:19.040
JavaScript to render on our desktop side because you don't even see them. We have client idle,

05:19.040 --> 05:23.360
which will only hydrate components when the main thread is idle, when it's doing nothing. So basically,

05:24.000 --> 05:29.520
free for your CPU. Client load will just say, hey, I need JavaScript to send it to me. Then we also

05:29.520 --> 05:34.320
have a couple others like client visible that will only hydrate when a component is actually in the

05:34.320 --> 05:41.760
viewport. That makes sense. So what we actually can do in Astro, think of this as the basic HTML

05:41.760 --> 05:46.560
page I was talking about earlier, we can ship JavaScript to just a couple of components. Maybe

05:46.640 --> 05:53.600
an image slider, we need some things there. Maybe we need some header links, whatever, that are dynamic.

05:53.600 --> 06:00.720
We can do that. Of course, we are an open source thing. So you can build your own stuff. You can

06:00.720 --> 06:05.920
put that into Astro. And of course, you all know, as developers, if you let them free, they will

06:05.920 --> 06:12.400
come up with weird shit. One of those is Astro client when it's raining in New York. This will

06:12.400 --> 06:17.440
basically, like it says in the name, it will hydrate your component, but only when it's raining in

06:17.440 --> 06:23.520
New York. Cool stuff. Ben built this. Ben of the Astro core team has an implementation to show

06:23.520 --> 06:29.440
off how it works. But it's possible. It's fun. It's cool. There is a lot of creativity to be

06:29.440 --> 06:36.080
explored here. We call that concept islands. Islands basically referring to a component that's

06:36.080 --> 06:43.600
completely isolated from your other components. But we come with one twist. We have seen the

06:43.600 --> 06:49.440
astro syntax. But the components that you want on your client side, you can actually build in other

06:49.440 --> 06:56.160
frameworks. You say, add react to my Astro website. And then you can use react components inside of

06:56.160 --> 07:01.200
your Astro website. Or you want to use view or you want to use felt or maybe both of them together.

07:01.200 --> 07:05.920
That is possible. I won't say that it's a recommended thing to do. My thing disconnected here.

07:05.920 --> 07:11.760
Okay. It's not a recommended thing to do, but it is possible. But by default, without the client

07:11.760 --> 07:17.680
hydration, if you use a react component on Astro, it will still compile down to static HTML at build

07:17.680 --> 07:25.600
time by default. That's basically what makes Astro fast. There is, of course, a lot more.

07:26.400 --> 07:31.680
What I show you now is basically only the static generation side of things. That's the default.

07:31.680 --> 07:36.800
But we have so much more. And just in 2023, that was a crazy year for us. We did a lot of stuff.

07:36.800 --> 07:42.160
We shipped three major versions. And we have reasons for that. And I'll go over them like very

07:42.160 --> 07:49.200
quickly. I'll show you what we did and how we improved the life of Astro developers. So in January,

07:50.080 --> 07:54.080
I did my first real international Astro talk at JS world.

07:54.080 --> 07:59.440
Amy, you were there, right? With Omar? Yes. We just shipped Astro too. Astro looked completely

07:59.440 --> 08:05.840
different from the Astro that it is now. What we shipped, we shipped more than just the features

08:05.840 --> 08:11.600
that I'm going to share. But basically, these are the important ones. We shipped the new CLI.

08:12.240 --> 08:19.520
RCLI? I think it's crazy. It's crazy good. It's super clear. It's really easy. We just asked you

08:19.520 --> 08:25.280
a couple of questions. And on those questions, we set up a template for you. A couple of questions

08:25.280 --> 08:29.520
are, of course, do you plan to use TypeScript? Yes. What kind of TS config do you want? Do you want

08:29.520 --> 08:37.040
strict, strictest, loose default? Whatever you call it. You can do all of that. But also,

08:37.040 --> 08:41.760
since we are so open source minded, we also have released that as a client library. Well,

08:41.760 --> 08:47.040
not a client library. CLI library on its own. That's called CLAC. That's built by Nate, one of our

08:47.040 --> 08:51.760
core members, built in a weekend. And now it's used in different projects and it's actually amazing.

08:52.640 --> 08:57.280
Cool to see that there is like a couple of different projects that came from Astro.

08:58.720 --> 09:01.520
We shipped content collections. That was actually one of the biggest ones.

09:02.320 --> 09:08.080
Content collections give you a type safe way of working with markdown, MDX and all of the other

09:08.080 --> 09:15.760
markdown flavors. Even markdoc, for instance. This is probably very familiar to you. This is Zod.

09:15.760 --> 09:21.600
And Zod is this client, well, not client. This is library that basically checks your types on

09:21.600 --> 09:27.520
Eskimo. That's what you do here. And because that's type safe, we can also error check way better

09:28.480 --> 09:31.920
that I'm going to show you in a minute. This is how it looks like. So you get all the

09:31.920 --> 09:35.840
intelligence goodies. You get all the auto completion and all of that good stuff.

09:37.760 --> 09:43.440
We added hybrid rendering. So I was speaking about, as super clear, you can instantly see what's wrong.

09:44.000 --> 09:49.840
In your blog, the astrotutorial.mdx frontmetter does not match collection scheme. You instantly

09:49.840 --> 09:57.120
know what's wrong. What file is it? Oh, its title is required in astrotutorial.mdx. You instantly

09:57.120 --> 10:03.680
know what's wrong and where it's wrong. You fix it, done. Then we launched astrotutorial.mdx3.

10:04.480 --> 10:09.920
I think that was in August, if I remember correctly. We shipped view transitions. View transitions are

10:09.920 --> 10:15.200
a super, super cool thing. Who has ever used view transitions? A couple of people, not too much.

10:15.200 --> 10:20.240
Who knows about view transitions? Okay, that's a couple more. What's the reason that you didn't use

10:20.240 --> 10:29.920
them? Yell something. Time. Okay. Okay, yes, browser support. I was going to expect that one.

10:30.480 --> 10:35.120
Yes, it's not supported by all browsers yet. But what we do with astrotutorial is we polyfill a little

10:35.120 --> 10:39.680
and then it works. At least the basics work. And what view transitions are for the ones that didn't

10:39.680 --> 10:45.040
put their hand up, it actually looks like this. So astrotutorial basically does this SSG MPA page.

10:45.040 --> 10:50.800
But they actually, with view transitions, you can make an MPA with basically all static HTML files

10:50.800 --> 10:55.280
feel like SPA with client-side navigation, even though you're not shipping that to the browser.

10:55.280 --> 11:00.240
The browser will always do this by its own. Basically, really simply explain it takes a

11:00.240 --> 11:04.720
screenshot and the screenshot of your next page and transitions in between both of them.

11:05.280 --> 11:10.160
But you can do crazy shit with that and about the demo with me. It's not built by me,

11:11.120 --> 11:18.400
but I have it with me. Can I do it like that? Okay, give me a second here.

11:23.600 --> 11:31.680
You can all see this? Okay, okay, okay. Switch page. Yes. So as I was saying,

11:33.200 --> 11:39.840
browser support is a hard thing, but you can do shit like this. So this is multi-page application.

11:39.920 --> 11:42.960
Still, when I press North, look what happens.

11:51.360 --> 11:57.360
Okay, let me fix that. I wasn't expecting that to happen actually.

12:00.640 --> 12:05.680
Will it work? Yes. Okay, now it's there. So if I go back to South page, it's basically

12:05.680 --> 12:12.640
South.html. Look what happens. All of that animation is coming from the browser. There's no client-side

12:12.640 --> 12:17.120
hydration happening here. This is insane. I don't know if you're excited as I am.

12:18.720 --> 12:23.760
Yes, some people. Okay, okay. Not too much. It's fine. It's fine. But still, it works also with

12:23.760 --> 12:28.880
like the navigation API. So if at the top, I don't know how well you know ARC, but at the top I have

12:28.880 --> 12:37.280
just the basic buttons forward, backwards. That also should work. Yes. That's amazing.

12:42.000 --> 12:46.240
Okay, okay. Now let me go back to the presentation if I can get that back here.

12:49.680 --> 12:50.960
Okay, okay. There we are.

12:51.920 --> 13:00.160
And connecting. Yes. The craziest about all of that is actually from you as an end user. Well,

13:00.160 --> 13:04.400
end users are typically the clients that use the website. I mean, as a developer that will use

13:04.400 --> 13:10.240
that feature. It's only two lines of code. It's really easy to implement and we make it so easy

13:10.240 --> 13:15.920
for you to ensure that you have the best developer experience possible. A couple of other things,

13:15.920 --> 13:19.680
of course, if you think statically, you don't have middleware, you don't have all of this

13:19.680 --> 13:24.240
edge stuff. We added that as well. And the good thing is you can always create faster responses

13:24.240 --> 13:28.640
for your users anywhere in the world, wherever they are. But those are always like the catch words

13:28.640 --> 13:32.880
with edge stuff, right? It's also a little bit of a smaller runtime. So it's a little bit more

13:32.880 --> 13:38.800
difficult than that. But you get the point. Image optimizing. Images are hard. Can be hard.

13:39.600 --> 13:45.360
Can be really hard like in the browser sometimes. What we did is actually we released a virtual

13:45.360 --> 13:50.240
module, actually, which is astroassets. And you basically just import your image,

13:51.040 --> 13:55.760
just like you would do with a component, then use it as a source and it will automatically output

13:55.760 --> 14:00.960
a optimized WebP image. But of course, a lot of people came complaining and were like,

14:00.960 --> 14:06.160
where is picture? We need picture. We brought picture. And then actually you can do formats

14:06.160 --> 14:12.480
with it. So if you want to use Aviv, because that's even faster and actually not supported in all

14:12.480 --> 14:17.040
browsers, but you have a fallback to WebP, which is supported in all browsers, then we'll take

14:17.040 --> 14:21.520
care of that for you. So it's really easy for you to define and optimize the small bits of your

14:21.520 --> 14:27.280
website that are lacking behind. That's at least how you get. Also, we did a major refactoring of

14:27.280 --> 14:32.800
our internals, the JSX internals. And because of that, we also got another 75 performance

14:32.800 --> 14:38.160
improvement, which is great. We also brought this. I don't know how many of you are familiar with

14:38.160 --> 14:44.000
fast refresh. It's amazing. If you don't see what's happening here, that's good because then you're

14:44.000 --> 14:51.600
living a good life. What actually happens is, does anyone ever like build a dialogue, for instance?

14:51.600 --> 14:55.520
You click on it, you have the dialogue goes open, then you change some text and suddenly it's gone

14:55.520 --> 15:00.640
again and you have to re go through the whole flow again. That's the problem with state. Actually,

15:00.640 --> 15:07.680
what fast refresh does for all JSX in our, in our case, it will actually remind the state. So

15:07.760 --> 15:13.760
while you're typing, the state will update and you won't like have to go through the flow all over

15:13.760 --> 15:21.120
again. So it's basically quality of life upgrade for you as a developer. Page partials. It wasn't

15:21.120 --> 15:28.720
intentionally built for it, but of course we have all the HTMLX hype. And actually, this is

15:28.720 --> 15:33.760
possible now with Astro because of page partials. You just ship one thing, no HTML tag, no head tag,

15:33.760 --> 15:39.200
no body tag, just what you wrote in HTML and that makes using HTMLX in Astro possible.

15:40.800 --> 15:43.440
Then we'll have Starlight. Who has heard of Starlight?

15:45.440 --> 15:51.360
Less people than Astro. Okay. But there were a lot of people about Astro. What is one thing that

15:51.360 --> 15:58.560
you can name about Astro that is good? Documentation. I know you were going to say that. I just said

15:58.640 --> 16:06.240
it for you. Starlight is actually a, I want to say theme slash library slash framework.

16:06.240 --> 16:12.640
It's basically a great theme for Astro. But one important thing is that it actually ships

16:12.640 --> 16:18.400
everything that we have learned from writing docs for Astro and brought that to a framework for other

16:18.400 --> 16:22.800
people. And I was actually talking backstage a little bit earlier with Nicholas and he's using

16:22.800 --> 16:27.200
Starlight at work a lot and says it's amazing. Like you have all these built-in features that

16:27.840 --> 16:32.240
take care for you like the search. You can change that with Page Search or Algolia or

16:32.240 --> 16:36.880
anything you want. Really it's very pluggable. It's really good. And of course you have all

16:36.880 --> 16:43.600
the Astro goodies. You can use React, you can use felt, you can compile everything to native languages.

16:43.600 --> 16:50.320
You can do anything you want. But then we launched Astro 4. Astro 4 is cool. Why? We have a DevTool

16:50.320 --> 16:56.160
bar now and DevTool bars are something underrated sometimes. In our case, you can see your islands.

16:56.160 --> 17:01.520
You can see where your JSX is located. You click on the file, it will open. You can see that in

17:01.520 --> 17:07.120
this case it's not hydrated or it is hydrated. What's the text? How does it work? You can see

17:07.120 --> 17:12.560
all of that just in the browser like without leaving the browser. But also we shipped accessibility

17:12.560 --> 17:16.320
tools. Accessibility is getting more and more and more important and it is. And that's why we

17:16.320 --> 17:20.800
integrated that. So basically you click on the audit tool and it will tell you oh an image alt tag

17:20.880 --> 17:27.600
is missing. Oh these are misconfigured area roles. All of that will just show you. Really easy. But

17:27.600 --> 17:34.320
also it's super pluggable. So open source first. You can just write your own DevTool bar plugin

17:34.320 --> 17:38.960
and build it. For instance we have the Astro Tailwind Config Viewer which is basically you can see

17:38.960 --> 17:45.440
your whole Tailwind configuration inside of your Astro website or inside the DevTool bar. So basically

17:45.440 --> 17:51.200
if you do this well or there is a lot of more features you can actually just build everything

17:51.200 --> 17:57.120
inside the browser and never leave it except for developing code. Then we have built incremental

17:57.120 --> 18:02.320
content caching. A question I got yesterday for instance was what if I want to use Astro with

18:02.960 --> 18:08.320
thousands of pages? Where are the paints? And there are some of course like if you want to use

18:08.560 --> 18:16.400
SSG and you're constantly pushing new files then your build pipeline will just be very slow because

18:16.400 --> 18:20.560
it's always building and it's always building all of those pages. Even though sometimes they never

18:20.560 --> 18:25.040
change. If you change one file while building all the others basically that's why what incremental

18:25.040 --> 18:29.760
content caching does. It sees one file has changed and will only change that file. That makes sense

18:29.760 --> 18:34.240
right? But with doing that just for our own documentation it's still experimental but we

18:34.240 --> 18:39.600
tested it of course. We had a performance gain just for our documentation which is like 3,000 pages

18:39.600 --> 18:46.720
of 80% gain. That's a lot. The improvement is insanely good. And then we also redesigned our

18:46.720 --> 18:50.960
documentation to Starlight. Now it looks like this. I don't know if you've ever seen the previous one.

18:50.960 --> 18:56.880
It was also good. It was also like kind of built very hacky. We didn't have internationalization

18:56.880 --> 19:02.000
support before and such. We all have that now in Starlight and such in Astro docs. It's really

19:02.000 --> 19:08.400
great doc footing for both projects. Then we announced the ecosystem fund. It's a really cool

19:08.400 --> 19:14.080
thing that I'm very proud of. Actually what we do is we have dedicated the funding that we get as in

19:14.080 --> 19:19.920
GitHub sponsors and such things like that. We dedicated a hundred thousand dollars of that

19:19.920 --> 19:26.080
to give to other open source projects that are empowering Astro users. For instance one of those

19:26.640 --> 19:31.360
that got the grant was LuciaAuth. You know if you've ever done LuciaAuth it's basically an

19:31.360 --> 19:36.560
authentication library. That's also framework agnostic. But also they enable a lot of Astro

19:36.560 --> 19:41.760
users to build cool websites with authentication. And for that they deserve an award. Well they

19:41.760 --> 19:47.760
deserve at least some money to keep working on it. For instance we also gave 10,000 dollars to

19:48.640 --> 19:54.240
a team builder. They create themes for Astro and they output like one team per month or something.

19:54.240 --> 19:59.600
But that means that a lot of users get drawn to Astro because there are so many themes. So that's

19:59.600 --> 20:06.080
really makes it work. Of course that's not all of it. This was just like basically it was a ramble

20:06.080 --> 20:11.760
of features and how it works. There is more and there is more to it. And the question I always get

20:11.760 --> 20:17.680
is but what is next? What is the next thing that we are going to ship? Well I don't know. We have an

20:17.680 --> 20:23.360
open roadmap. So basically you decide. Our users decide. We have an open GitHub repository which is

20:23.360 --> 20:28.320
just a roadmap. And you can just make an issue there. We'll comment on it. We'll discuss about it.

20:28.320 --> 20:33.600
And then we'll get into an RFC. It's accepted. And then we'll actually build a feature. And if you

20:33.600 --> 20:39.680
can help in that, that's awesome. Cool. If you want to stay updated you can go to Astro.Build which

20:39.680 --> 20:44.720
is the website. If you want to join our Discord where we are very active both in development but

20:44.720 --> 20:50.160
also in support and questions you have if you can't pose them here today. Go there. There is

20:50.160 --> 20:55.120
probably someone super eager to help you out there. And Astro.Build says chat. And we also built a

20:55.120 --> 21:00.960
newsletter like actually was launched this week or last week. And that's Astro.Build slash newsletter.

21:00.960 --> 21:19.520
Cool. Thank you. Questions or is that another thing? If there are none I did a good job.

21:19.840 --> 21:31.680
Did you try creating... Is it hydrate only when it's raining in Brussels?

21:31.680 --> 21:39.680
Yeah. Because it's always hydrates. That would just be client side. I didn't. But I should. You should.

21:40.640 --> 21:45.680
It would be easy. It's just an equals truth.

21:45.680 --> 21:51.680
Big round of applause for Elio. Thank you.

