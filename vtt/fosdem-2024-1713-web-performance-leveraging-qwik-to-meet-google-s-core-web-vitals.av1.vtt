WEBVTT

00:00.000 --> 00:15.760
Okay, so our next speaker is Ayub who is tech lead at Serview, company based in Paris, I

00:15.760 --> 00:16.760
think, right?

00:16.760 --> 00:17.760
Yes.

00:17.760 --> 00:26.120
And he's going to talk about how to leverage quick to improve performance in the web.

00:26.120 --> 00:31.120
So big round of applause for Ayub.

00:31.120 --> 00:36.000
Hello, so like you see here, my name is Ayub Elhuan.

00:36.000 --> 00:40.640
I'm a software engineer working, so I'm a rocking engineer, but I'm working in Paris

00:40.640 --> 00:42.520
for two years now.

00:42.520 --> 00:49.160
And today it's my first time giving a talk here in Brussels, and I was here for two times

00:49.160 --> 00:54.160
to attend to a BJS conf in the react Brussels, but this is my first time giving a talk here.

00:54.160 --> 00:59.960
So I'm so happy about that, and I'm so happy that there is a packed room here, and I'm

00:59.960 --> 01:02.680
so stressed with your questions.

01:02.680 --> 01:06.520
By the way, so let's start.

01:06.520 --> 01:11.040
Before starting talking about quick, let's make some context here.

01:11.040 --> 01:18.480
So imagine you're in a restaurant waiting for a dish, for example, for Moroccan couscous.

01:18.480 --> 01:21.120
Do you know couscous or not?

01:21.120 --> 01:22.120
Okay.

01:22.120 --> 01:23.120
Good.

01:23.120 --> 01:26.680
So you are in a restaurant and you are waiting for your Moroccan couscous, but the waiter

01:26.680 --> 01:30.800
said that you should wait 45 minutes.

01:30.800 --> 01:34.880
That's a lot, but for Moroccan one, no, you should wait.

01:34.880 --> 01:35.880
Okay.

01:35.880 --> 01:41.280
But it's a lot of time, so you can't wait for it, and what you will do, you will maybe

01:41.280 --> 01:46.160
go for another restaurant, you will write bad reviews, you will talk to your friends

01:46.160 --> 01:51.960
and say, maybe they have a good Moroccan couscous, but you should wait 45 minutes.

01:51.960 --> 01:52.960
That's a lot of time.

01:52.960 --> 01:53.960
I can't do that.

01:53.960 --> 01:54.960
Okay.

01:54.960 --> 02:00.840
So imagine that you're working on websites and you're having the same issue.

02:00.840 --> 02:06.880
You should wait for it to download all these JavaScript and show it to you.

02:06.880 --> 02:12.240
So before talking about JavaScript, let's talk about the core web vitals, who are the

02:12.240 --> 02:20.320
metrics that Google use to try to measure the performance of your websites.

02:20.320 --> 02:24.400
So we'll start, for example, with LCP, largest contentful pens.

02:24.400 --> 02:26.400
What is largest contentful pens?

02:26.400 --> 02:33.840
It's the time that your website will take to show the most large content to the user.

02:33.840 --> 02:34.840
Okay.

02:34.840 --> 02:39.080
So if it takes more than 2.5 seconds, you need to improve it.

02:39.080 --> 02:41.440
If it's more than four seconds, that's a lot.

02:41.440 --> 02:42.440
Okay.

02:42.440 --> 02:45.160
We have also the first input delay.

02:45.160 --> 02:48.320
It's the time that take, for example.

02:48.320 --> 02:49.640
For example, you have a button.

02:49.640 --> 02:50.640
Okay.

02:50.640 --> 02:55.680
But this button is not working and it's waiting for its JavaScript to work.

02:55.680 --> 02:56.680
Okay.

02:56.680 --> 03:02.520
The time that will take between showing the button and the button will work.

03:02.520 --> 03:04.120
It's the first input delay.

03:04.120 --> 03:10.120
If, for example, I show you a button and you should wait more than 300 milliseconds to work

03:10.120 --> 03:14.040
with it, that's not a good thing to do in your website.

03:14.040 --> 03:15.040
Okay.

03:15.040 --> 03:16.960
And Google are calculating that.

03:16.960 --> 03:19.560
We have also cumulative layout shift.

03:19.560 --> 03:22.000
So what is cumulative layout shift?

03:22.000 --> 03:27.720
Imagine, for example, you have your website and you want to click on login.

03:27.720 --> 03:35.320
But in this time you click on login, you have an ad bar that's shown in the website and

03:35.320 --> 03:37.160
you click on the ad bar.

03:37.160 --> 03:38.360
That's a problem.

03:38.360 --> 03:41.840
And Google is measuring that for our websites.

03:41.840 --> 03:46.560
If you do that, they will lower your ranking in Google.

03:46.560 --> 03:47.560
Okay.

03:47.560 --> 03:48.560
In Google search.

03:48.560 --> 03:50.680
I'm talking about Google search.

03:50.680 --> 03:52.880
Now let's talk about performance.

03:52.880 --> 03:55.840
Why your website should be performance.

03:55.840 --> 04:03.960
Here Google's done some study cases about some websites that try to improve the performance

04:03.960 --> 04:05.200
of their websites.

04:05.200 --> 04:07.200
For example, we have here MOBIFI.

04:07.200 --> 04:11.600
They improve their websites only, only with 100 milliseconds.

04:11.600 --> 04:14.320
And they had 1% more conversion.

04:14.320 --> 04:15.320
That's a lot.

04:15.320 --> 04:16.320
Okay.

04:16.320 --> 04:21.200
We have Cook, for example, with improving only 850 milliseconds.

04:21.200 --> 04:22.400
It's not a second.

04:22.400 --> 04:25.480
It's only 850 milliseconds.

04:25.480 --> 04:28.720
They had 7% more conversion.

04:28.720 --> 04:31.200
That's why performance matters.

04:31.200 --> 04:32.200
Okay.

04:32.200 --> 04:37.760
So by the question here that we have, why we have these problems with performance in

04:37.760 --> 04:38.760
our websites?

04:38.760 --> 04:43.200
Imagine, for example, you want more interactivity in your website.

04:43.200 --> 04:44.640
What you should add.

04:44.640 --> 04:46.160
You will add more JavaScript.

04:46.160 --> 04:47.160
Okay.

04:47.160 --> 04:49.440
So that your website will be more interactive.

04:49.440 --> 04:56.320
And when you will add more JavaScript, you should download more JavaScript and that will

04:56.320 --> 04:58.480
impact your performance.

04:58.480 --> 04:59.480
Okay.

04:59.480 --> 05:06.520
So here I will try to show a short about how SPA, single page application, works and

05:06.520 --> 05:09.960
how we tried in these last years to improve it.

05:09.960 --> 05:18.000
So when you have a website that you did with the SPA framework, you will send your HTML

05:18.000 --> 05:23.560
to the browser and you will show a blank page.

05:23.560 --> 05:32.560
And maybe because I'm experimenting that a lot with the websites to reserve my flight,

05:32.560 --> 05:34.080
to register my flight.

05:34.080 --> 05:37.160
And I had to, I will not say the name of it.

05:37.160 --> 05:42.200
And I should wait for, I think, 3, 4 seconds.

05:42.200 --> 05:46.720
And after that, in this 3, 4 seconds, I will get a blank page.

05:46.720 --> 05:50.360
And after my 4 or 5 seconds, I will get my page.

05:50.360 --> 05:51.360
Why?

05:51.360 --> 05:56.040
Because the browser is trying to download the JavaScript, trying to execute this JavaScript.

05:56.040 --> 06:01.080
And after that, it will render a page that is working.

06:01.080 --> 06:02.080
Okay.

06:02.080 --> 06:03.280
That you can work with.

06:03.280 --> 06:06.320
So to improve this process, what we tried to do?

06:06.320 --> 06:10.400
We tried to have something that's called hydration.

06:10.400 --> 06:12.160
What is hydration?

06:12.160 --> 06:16.200
We will send more HTML because here we didn't send a lot of HTML.

06:16.200 --> 06:18.880
It's only an index.html with nothing.

06:18.880 --> 06:21.000
This is why we show blank page.

06:21.000 --> 06:22.000
Okay.

06:22.000 --> 06:27.760
So now we will try to send a lot of HTML to show something to our user.

06:27.760 --> 06:28.760
Okay.

06:28.760 --> 06:34.440
But this thing that we will show, it's not working because there is no JavaScript.

06:34.440 --> 06:41.720
You should also wait and download the JavaScript, try to execute it, and now, doing the reconciliation

06:41.720 --> 06:45.240
process to have a working page.

06:45.240 --> 06:51.000
So maybe we will wait more time than before, but we are trying here to trick our user.

06:51.000 --> 06:55.440
The website will not work, but we'll show it to him.

06:55.440 --> 06:56.440
Okay.

06:56.440 --> 06:57.440
That's the thing.

06:57.440 --> 06:58.440
And we should wait.

06:58.440 --> 06:59.440
He can do nothing.

06:59.440 --> 07:10.000
And if you're now on Twitter or on YouTube, you will find a lot of people who are talking

07:10.000 --> 07:19.160
about these React server components, partial hydration, partial pre-rendering, streaming

07:19.160 --> 07:21.760
HTML, streaming that.

07:21.760 --> 07:23.000
Why they are trying to do that?

07:23.000 --> 07:28.160
They're trying to do that to improve this process and to try to show to the user something

07:28.160 --> 07:29.400
that works.

07:29.400 --> 07:33.720
Like for example, streaming SSR, they will try to, this will work and you should wait

07:33.720 --> 07:36.480
and we will download the JavaScript, execute this part.

07:36.480 --> 07:39.600
They are trying to improve this process.

07:39.600 --> 07:42.680
Here what I will talk about today is about Qwik.

07:42.680 --> 07:48.040
So Qwik has another approach to improve the problem of hydration.

07:48.040 --> 07:55.800
What Qwik will do will not have hydration, but it will have another concept that's called

07:55.800 --> 07:56.800
resumability.

07:56.800 --> 07:57.800
What is resumability?

07:57.800 --> 08:02.840
Here we will send the same HTML that have a lot of HTML.

08:02.840 --> 08:06.800
We can show a page and boom, the page is working.

08:06.800 --> 08:07.800
It's interactive.

08:07.800 --> 08:14.240
The problem that you can say now, does your page will be interactive without JavaScript?

08:14.240 --> 08:15.240
That's not the case.

08:15.240 --> 08:18.240
But there is a trick.

08:18.240 --> 08:24.800
The page is working, but because we sent a little bit of an event listener here, a global

08:24.800 --> 08:32.080
event listener who will listen to the interaction of the user and he will go and download the

08:32.080 --> 08:37.400
necessary JavaScript that your website needs for this part.

08:37.400 --> 08:41.720
Imagine you have a chart, a lot of data tables, a footer.

08:41.720 --> 08:46.600
If you are using another framework, you will download all the JavaScript for this page and

08:46.600 --> 08:49.200
maybe you will never use these JavaScripts.

08:49.200 --> 08:50.600
But you will download it.

08:50.600 --> 08:53.160
Here with resumability, you will not do that.

08:53.160 --> 08:55.960
You will download on demand.

08:55.960 --> 09:01.720
So the question that you can ask here is every time the user will click on a button, we should

09:01.720 --> 09:06.960
send a request to the server and we should wait for this request, execute the little

09:06.960 --> 09:09.160
JavaScript and it will work.

09:09.160 --> 09:14.360
So because Quick has a mechanism, what is this mechanism?

09:14.360 --> 09:19.640
Quick is using a service worker to download these chunks of JavaScript.

09:19.640 --> 09:20.760
That's the thing here.

09:20.760 --> 09:26.120
When you are using SBA, you have one single file of JavaScript that have all the JavaScript

09:26.120 --> 09:27.720
needed for our page.

09:27.720 --> 09:29.040
It's one thing.

09:29.040 --> 09:34.200
If you are doing, for example, lazy loading, it will have more and more chunks, but for

09:34.200 --> 09:37.800
other pages that are not shown for the first time.

09:37.800 --> 09:41.640
You can't do this for pages that are shown in the first time.

09:41.640 --> 09:49.840
Here Quick is using a Quick optimizer who tried to chunk all your websites.

09:49.840 --> 09:55.320
All these pieces of interactivity here, you will have for each piece of interactivity

09:55.320 --> 09:57.520
GS file.

09:57.520 --> 09:59.840
And the framework, what you will do?

09:59.840 --> 10:06.840
It will start to download in the background these files and store them in the cache, but

10:06.880 --> 10:08.880
it will execute nothing.

10:08.880 --> 10:12.720
So the DOM here, the DOM will be free.

10:12.720 --> 10:14.280
Will not have a lot of JavaScript.

10:14.280 --> 10:17.960
I will show you that in the demo code.

10:17.960 --> 10:19.240
So that is the resumability.

10:19.240 --> 10:23.880
You will have your page faster and also interactive.

10:23.880 --> 10:28.480
And with using this concept of resumability, you will need maybe for your website more

10:28.480 --> 10:35.120
JavaScript because you need more interactivity, but you will keep the same performance.

10:35.120 --> 10:36.120
Why?

10:36.120 --> 10:38.960
Because you will not have more files to download.

10:38.960 --> 10:43.680
You can scale as you want and you will download on demand.

10:43.680 --> 10:44.680
That's the thing.

10:44.680 --> 10:45.680
Okay?

10:45.680 --> 10:51.160
So what I will show you here, I will do the demo and I hope that it will work because

10:51.160 --> 10:54.640
always live coding, you're in front of people, problems come.

10:54.640 --> 10:56.920
Okay, I will try.

10:56.920 --> 11:00.240
I'm stressed for that, but maybe it will work.

11:00.240 --> 11:01.280
Okay?

11:01.280 --> 11:03.120
So you can see my VS Code.

11:03.120 --> 11:04.520
I'm a VS Code guy.

11:04.520 --> 11:05.520
I don't use Vim.

11:05.520 --> 11:07.520
It's too complicated for me.

11:07.520 --> 11:08.520
Okay?

11:08.520 --> 11:15.640
So here I created a file in our roots for our new page.

11:15.640 --> 11:16.640
Okay?

11:16.640 --> 11:21.560
I called it FOSDEM and here I will create a quick component.

11:21.560 --> 11:23.320
Okay?

11:23.320 --> 11:31.080
What you will see here is that the quick components, there is a resumblance with the react.

11:31.080 --> 11:32.080
Okay?

11:32.360 --> 11:33.360
Why?

11:33.360 --> 11:35.360
Because quick is using also GSX.

11:35.360 --> 11:41.200
Here what I will do, I will create a simple button.

11:41.200 --> 11:56.560
I will name it console and here I will go click and console, log, test login.

11:56.560 --> 11:58.400
Okay?

11:58.400 --> 12:02.240
So here I have my page.

12:02.240 --> 12:09.120
I have my button and if you see in the network, I don't have the VT files because it will

12:09.120 --> 12:15.760
not have them in production and I have the GS files and if I click on refresh, I will

12:15.760 --> 12:16.760
have nothing.

12:16.760 --> 12:21.000
I will not have my GS files that I should download with SPI frameworks.

12:21.000 --> 12:22.000
Okay?

12:22.000 --> 12:27.120
Not only SPI if you use hydration, also you will need to download the GS files needed

12:27.120 --> 12:28.120
for your first page.

12:28.120 --> 12:29.120
Okay?

12:29.120 --> 12:32.120
But here you will not have GS files.

12:32.120 --> 12:39.800
When I will click on console, I will download the GS file needed only for that.

12:39.800 --> 12:40.800
Okay?

12:40.800 --> 12:42.000
So I will do another thing.

12:42.000 --> 12:44.480
I will create second button.

12:44.480 --> 12:45.480
Okay?

12:45.480 --> 12:51.600
I do the same thing with login 2.

12:51.600 --> 12:53.600
Okay?

12:53.600 --> 12:56.040
So I will click here.

12:56.040 --> 13:00.040
I will have this file for only this interaction.

13:00.040 --> 13:01.960
I will click on console, log 2.

13:01.960 --> 13:05.480
I will download the second file for this interaction.

13:05.480 --> 13:06.480
Okay?

13:06.480 --> 13:08.560
That's the thing about Qwikis.

13:08.560 --> 13:12.800
They have chance for all your interactions in your website.

13:12.800 --> 13:13.800
Okay?

13:13.800 --> 13:22.120
So here I will create a account to have some simple example.

13:22.120 --> 13:25.680
Keep it simple because I have 20 minutes.

13:25.680 --> 13:29.680
And here I will create that.

13:29.680 --> 13:42.800
And here I will have a count button.

13:42.800 --> 13:45.240
And I will name it count.

13:45.240 --> 13:50.960
And here I will display this count.

13:50.960 --> 13:52.960
Okay?

13:52.960 --> 14:04.640
So here I will click on the count.

14:04.640 --> 14:07.680
I will have this JavaScript needed for this count.

14:07.680 --> 14:08.680
Okay?

14:08.680 --> 14:09.680
It's working.

14:09.680 --> 14:10.680
That's good.

14:10.680 --> 14:15.160
And here it's only the file for the framework, for Qwikis.

14:15.160 --> 14:16.240
What I will do here?

14:16.240 --> 14:22.400
I will go and create another button.

14:22.400 --> 14:23.400
Okay?

14:23.400 --> 14:28.880
We do simple console log.

14:28.880 --> 14:30.120
And I will name it here.

14:30.120 --> 14:32.600
I will do condition verified.

14:32.600 --> 14:33.880
Why?

14:33.880 --> 14:44.360
In this button, I will have a condition.

14:44.360 --> 14:51.360
I will not show this console log only if the count is more than 14.

14:51.360 --> 14:52.360
Okay?

14:52.360 --> 14:53.360
Okay?

14:53.360 --> 14:56.360
That's good.

14:56.360 --> 15:01.360
So it's not count.

15:01.360 --> 15:07.360
It's count value.

15:07.360 --> 15:08.360
That's great.

15:08.360 --> 15:09.360
Okay?

15:09.360 --> 15:16.120
So I will click on, I will name it console.

15:16.120 --> 15:17.120
Console.

15:17.120 --> 15:23.120
I will click on console and I will get the condition verified.

15:23.120 --> 15:24.120
Okay?

15:24.120 --> 15:29.920
But I will show nothing because I should wait for it to become 15 and now it will work.

15:29.920 --> 15:34.480
But the thing here is that we didn't use this condition.

15:35.160 --> 15:41.960
First, when we had the count, when we had our count 12 and we clicked on console, we

15:41.960 --> 15:45.040
didn't use it but we downloaded this JavaScript.

15:45.040 --> 15:46.040
That's a problem.

15:46.040 --> 15:51.160
Here with Qwik, we can do lazy execution.

15:51.160 --> 15:53.000
So what I will try to do here?

15:53.000 --> 15:56.920
I will try to lazy load this line because I don't need it.

15:56.920 --> 16:00.200
I need it only if the condition is verified.

16:00.200 --> 16:01.200
Okay?

16:01.200 --> 16:02.480
So what I will do?

16:02.480 --> 16:18.800
I will create a function here and I will wrap it with a dollar sign.

16:18.800 --> 16:20.680
Okay?

16:20.680 --> 16:24.040
And I will call this function.

16:24.040 --> 16:29.160
So I used only a dollar sign to do what?

16:29.160 --> 16:38.040
When I will click on console, I will get my file but without the console log and I will

16:38.040 --> 16:44.080
get this only with a link to this console log because I don't need it.

16:44.080 --> 16:53.160
So what I did here with this dollar sign is lazy executes a line because I need this line

16:53.160 --> 16:55.960
only if the condition is verified.

16:55.960 --> 17:03.440
Even when I will have the condition verified, I will click on console and I will get this

17:03.440 --> 17:11.520
file with this condition verified and Qwik will take this file and it will use it to

17:11.520 --> 17:14.640
the console log because now it will use it.

17:14.640 --> 17:15.640
Okay?

17:15.640 --> 17:28.480
I have really a loud voice.

17:28.480 --> 17:31.760
I was working without you.

17:31.760 --> 17:38.560
I have really a loud voice.

17:38.560 --> 17:39.560
That's too much.

17:39.560 --> 17:43.400
Maybe in the recorder recording, we will not get my voice but there is no problem.

17:43.400 --> 17:44.400
They can hear me.

17:44.400 --> 17:45.400
That's good.

17:45.400 --> 17:46.400
That's good.

17:46.400 --> 17:47.400
So, yes.

17:47.400 --> 17:48.400
Thank you.

17:48.400 --> 17:58.640
So here, like you see with me, what I did is only lazy load this line of code.

17:58.640 --> 17:59.640
Okay?

17:59.640 --> 18:06.440
So imagine this line of code is a lot of things to do and you can't do it in your front end.

18:06.440 --> 18:08.320
You can't do it on the client side.

18:08.320 --> 18:09.320
Okay?

18:09.320 --> 18:11.120
You need to do it in this server.

18:11.120 --> 18:16.800
What I didn't tell you is that Qwik has something called Qwik City.

18:16.800 --> 18:18.480
It's metaframework.

18:18.480 --> 18:20.320
Like for example, you have React.

18:20.320 --> 18:24.480
You have with React, Next.js, remix, Gatsby, other things.

18:24.480 --> 18:25.640
I don't know.

18:25.640 --> 18:28.320
And with Qwik, you have Qwik City.

18:28.320 --> 18:31.920
And with using Qwik City, we can do the back end for Qwik.

18:31.920 --> 18:32.920
Okay?

18:32.920 --> 18:36.600
Here, what I will try to do is this condition verified.

18:36.600 --> 18:41.760
There's a lot of things to do.

18:41.760 --> 18:44.200
So maybe I should do that in the server side.

18:44.200 --> 18:45.200
Okay?

18:45.200 --> 18:46.200
I will come here.

18:46.200 --> 18:56.440
I will call server function and now I will go to my client side.

18:56.440 --> 18:59.200
I will click on console.

18:59.200 --> 19:02.720
Notifies it's Qwik City because I'm using the server.

19:02.720 --> 19:05.120
I will get nothing in my console log.

19:05.120 --> 19:06.120
Okay?

19:06.120 --> 19:07.520
It will count more.

19:07.520 --> 19:09.040
Now I have 16.

19:09.040 --> 19:11.320
So the console log should work.

19:11.320 --> 19:13.000
I will click here.

19:13.000 --> 19:14.120
I will have nothing.

19:14.120 --> 19:16.160
It's only some things here.

19:16.160 --> 19:17.920
And I have nothing in the console log.

19:17.920 --> 19:18.920
Why?

19:18.920 --> 19:22.840
Because the console log will be in the server side.

19:22.840 --> 19:23.840
Okay?

19:23.840 --> 19:30.640
With only adding server to your line, you will execute all your code in the server side.

19:30.640 --> 19:33.280
Imagine you're using Java, for example, for the back end.

19:33.280 --> 19:34.720
You have on-giraffe for the front end.

19:34.720 --> 19:39.320
You should refactor your verifications of a form and you want to do that in the back

19:39.320 --> 19:46.040
end so you should do all of it, refactor all of the code, write it another time in Java

19:46.040 --> 19:47.040
and all that.

19:47.040 --> 19:52.320
Here with using Qwik, you can, you will also add a server function and it will work.

19:52.320 --> 19:56.960
Here for example, I will say you should return me a result.

19:56.960 --> 19:57.960
Okay?

19:57.960 --> 19:59.160
This console log is good.

19:59.160 --> 20:03.600
But after doing your work in the server, you should give me a return.

20:03.600 --> 20:04.600
Okay?

20:04.600 --> 20:10.920
So here I will give him a return from the server.

20:10.920 --> 20:16.120
You will come here, have a const result.

20:16.120 --> 20:19.440
Wait for it.

20:19.440 --> 20:23.360
We'll have a thank in here.

20:23.360 --> 20:30.280
You will cancel log your result.

20:30.280 --> 20:31.280
Okay?

20:31.520 --> 20:35.200
So like you see with me here, what I have?

20:35.200 --> 20:43.960
I have this cancel log in the back end and I should return this thing to the client side.

20:43.960 --> 20:44.960
Okay?

20:44.960 --> 20:51.600
So here I should have the, I should have the condition verified.

20:51.600 --> 20:52.600
Okay?

20:52.600 --> 20:53.920
Its count is 16.

20:53.920 --> 21:00.000
When I will click on cancel log, I will get my condition verified here and on my console

21:00.000 --> 21:02.960
log, I will get my return from the server.

21:02.960 --> 21:08.200
And here I'm trying to work with the server, the client in the same file, in the same file,

21:08.200 --> 21:09.440
like I said.

21:09.440 --> 21:10.840
And that's it.

21:10.840 --> 21:12.040
This was my demo.

21:12.040 --> 21:16.080
I think I didn't do more than 20 minutes.

21:16.080 --> 21:26.800
So happy to be here and thank you so much.

21:26.800 --> 21:28.800
I will keep the couscous image.

21:28.800 --> 21:36.800
Speaking of couscous, if you want to avoid the 45 minutes, you can try Tunisian couscous.

21:36.800 --> 21:37.800
It's way better.

21:37.800 --> 21:39.800
He's saying that because he's Tunisian.

21:39.800 --> 21:42.800
No, it's the Moroccan one.

21:42.800 --> 21:43.800
So questions?

21:43.800 --> 21:44.800
Yes.

21:44.800 --> 22:04.280
Your question is that you're worried about the size of the framework here.

22:04.280 --> 22:07.240
So for example here, I will use only the count.

22:07.240 --> 22:10.000
You will get the framework.

22:10.000 --> 22:19.000
So I think it's 15 or something like that of kilobyte.

22:19.000 --> 22:20.000
I can't see it.

22:20.000 --> 22:21.000
I'm stressed.

22:21.000 --> 22:22.000
In the button?

22:22.000 --> 22:23.000
Yes, 56.

22:23.000 --> 22:27.000
That's it.

22:27.000 --> 22:32.000
And if you will not need quick CT, it will not download it.

22:32.000 --> 22:34.000
It download it only on demand.

22:34.000 --> 22:55.000
You can deploy it simply with Versa, for example, or with the, it's like, it's a Node.js

22:55.000 --> 22:59.000
version that is included in the quick framework.

22:59.000 --> 23:06.000
You will not have the work of going searching for server trying to, no, you take the framework,

23:06.000 --> 23:12.000
you add the only simple adapter here.

23:12.000 --> 23:17.000
I don't have a good connection.

23:17.000 --> 23:33.000
Here in the docs, you will get your references, deployments, and there is, in the documentation,

23:33.000 --> 23:36.000
you have files, adapter files for each environment.

23:36.000 --> 23:40.000
You can only use it, and it's really, really simple.

23:40.000 --> 23:46.000
If you use, for example, Versa, you add only some configs in your files and it works.

23:46.000 --> 23:47.000
Okay.

23:47.000 --> 23:48.000
Yeah.

23:48.000 --> 23:57.000
Since you allow for the code from the front end to the back end, how do you deal with code

23:57.000 --> 23:58.000
injection?

23:58.000 --> 23:59.000
How do you deal with?

23:59.000 --> 24:00.000
Code injection.

24:00.000 --> 24:01.000
Code injection.

24:01.000 --> 24:07.000
From the front end to the back end, for example, in process of testing.

24:07.000 --> 24:08.000
It's like I showed in the demo.

24:08.000 --> 24:12.000
It's only, it's only with playing with, with your hooks that you have.

24:12.000 --> 24:17.000
There is, if I had time for that, you have, for example, use resource, you have wrote

24:17.000 --> 24:18.000
loader, you have wrote action.

24:18.000 --> 24:20.000
It's only hooks that you deal with.

24:20.000 --> 24:25.000
You take this code that is in the client side, you do it in this hooks or with using

24:25.000 --> 24:27.000
server function, and it works.

24:27.000 --> 24:29.000
In the same file, that's the thing.

24:29.000 --> 24:34.000
You will not need to add another file for the back end, file for the client side.

24:34.000 --> 24:41.000
No, you should only use the right hooks that you want, and it works.

24:41.000 --> 24:45.000
Is it also possible to unit test your components?

24:45.000 --> 24:50.000
I, I, I didn't, I didn't try, I didn't try to unit testing yet because I'm working on,

24:50.000 --> 24:53.000
on a project now with, with Quick.

24:53.000 --> 25:03.000
I didn't do that yet, but you can use, use, I think, it's the C-Press or the tools that

25:03.000 --> 25:06.000
we are using for framework, for front end framework.

25:06.000 --> 25:07.000
Yes.

25:07.000 --> 25:08.000
Yes.

25:08.000 --> 25:10.000
I, I didn't, I didn't do that yet.

25:10.000 --> 25:12.000
I didn't do that yet.

25:12.000 --> 25:14.000
There are other questions.

25:14.000 --> 25:16.000
We still have time for one question.

25:16.000 --> 25:17.000
Oh yeah.

25:17.000 --> 25:20.000
Is there a way to pre-fetch the JavaScript files?

25:20.000 --> 25:25.000
For example, if you have like the button click, and there would be more code to that, and

25:25.000 --> 25:29.000
there's the console lock, and you might have a bad network connection if you do that in

25:29.000 --> 25:33.000
the background, while the user's not clicking the button, is there a way to instruct the

25:33.000 --> 25:36.000
user to download as long as your runtime is here?

25:36.000 --> 25:37.000
Yes.

25:37.000 --> 25:41.000
That's what it's doing with the, with the, with the service worker.

25:41.000 --> 25:44.000
It's trying to download in the background the files.

25:44.000 --> 25:45.000
Yes.

25:45.000 --> 25:48.000
With Quick, you will not need to, to, to send another request to the server.

25:48.000 --> 25:55.000
And the good thing about is that Quick has, has, has now, has now a new tool that works

25:55.000 --> 25:59.000
with EI that you, you can use in your production, for example.

25:59.000 --> 26:05.000
If you, you deploy your website after a month, you will get some data of, of how it works

26:05.000 --> 26:10.000
and how users click on the buttons and which buttons they click first.

26:10.000 --> 26:15.000
For example, if you're using e-commerce website, the first button is add, add the article,

26:15.000 --> 26:20.000
and the second button is show the, the category or something like that.

26:20.000 --> 26:26.000
So Quick after using it, after, after being in the production for, for example, one month,

26:26.000 --> 26:34.000
they collect data and, and the second deployment, it will take the, this data and the, the,

26:34.000 --> 26:40.000
the download in the background with the files that maybe the user will need.

26:40.000 --> 26:41.000
Okay.

26:41.000 --> 26:46.000
They will change the way how it download JavaScript and they will start with the files that maybe

26:46.000 --> 26:48.000
you will need on, on your, on your website.

26:48.000 --> 26:49.000
Thank you.

26:49.000 --> 26:50.000
Yeah.

26:50.000 --> 26:54.000
We don't have time for more questions, but you can find a, you will be around.

26:54.000 --> 26:56.000
So big round of applause for you.

26:56.000 --> 26:57.000
Thank you.

