WEBVTT

00:00.000 --> 00:05.000
How is it possible?

00:05.000 --> 00:10.000
About interactive live streaming in a very worse.

00:10.000 --> 00:13.000
How is this possible or is it possible?

00:13.000 --> 00:22.000
To me, I'm Enrico and I'm interested in interactive live streams.

00:22.000 --> 00:25.000
Sorry.

00:25.000 --> 00:30.000
So, now it's better. I'll take it so.

00:30.000 --> 00:34.000
Sorry.

00:34.000 --> 00:43.000
Here are my contactless and I worked for different companies

00:43.000 --> 00:50.000
and even most likely in a conference system topics.

00:50.000 --> 00:55.000
And now we're talking about lessons.

00:55.000 --> 01:00.000
And in the 30 versus is quite interesting situation.

01:00.000 --> 01:03.000
When you're in a 30 versus for example when you're in Macedon,

01:03.000 --> 01:06.000
you read in post.

01:06.000 --> 01:11.000
The interesting point here is the post came to you.

01:11.000 --> 01:19.000
Means you have an app in Macedon or inclined and you don't care who posted the post

01:19.000 --> 01:26.000
on which instance the post itself is cloned from instance to instance

01:26.000 --> 01:28.000
through the further worst.

01:28.000 --> 01:32.000
Means you get a copy or a clone of this post.

01:32.000 --> 01:35.000
This is a quite interesting concept.

01:35.000 --> 01:39.000
So the instance in the background communicating to each other.

01:39.000 --> 01:41.000
How is he doing this?

01:41.000 --> 01:46.000
Of course with activity part, we had to talk right before this.

01:46.000 --> 01:51.000
So I will not go deep in it but the main idea of activity part is like

01:51.000 --> 01:54.000
you have an inbox and an outbox.

01:54.000 --> 02:01.000
And everyone in the 30 versus in terms of activity part is an actor.

02:01.000 --> 02:05.000
The users are actors, the servers are actors.

02:05.000 --> 02:13.000
And on the end you can send to every actor in the 30 versus a message or a post.

02:13.000 --> 02:16.000
And that's the way how it works.

02:16.000 --> 02:22.000
So activity we describe the things like in activities, it's like activity part,

02:22.000 --> 02:25.000
like subscription, follow and so far.

02:25.000 --> 02:28.000
And the other topic is content.

02:28.000 --> 02:31.000
It's all described in JSON.

02:31.000 --> 02:36.000
And how I said, the instances in the background communicating to each other

02:36.000 --> 02:42.000
and the content is flowing through the 30 versus.

02:43.000 --> 02:46.000
Activity part and live streams.

02:46.000 --> 02:53.000
They are in the 30 versus already implementation of activity part like

02:53.000 --> 02:57.000
OWNcast or PeerTube are the main famous.

02:57.000 --> 03:03.000
But the thing is we want a little bit more.

03:03.000 --> 03:10.000
I mean you have in OWNcast and PeerTube live streams but not interactable.

03:10.000 --> 03:12.000
It is not possible.

03:12.000 --> 03:18.000
It means without leaving your PeerTube instance or leaving your OWNcast instance

03:18.000 --> 03:22.000
you cannot interact with another stream or another instance.

03:22.000 --> 03:24.000
It's not possible.

03:24.000 --> 03:26.000
Yeah.

03:26.000 --> 03:28.000
That leads to a problem.

03:28.000 --> 03:32.000
It's called scaling in the 30 versus.

03:32.000 --> 03:39.000
That means on the end more or less the...

03:39.000 --> 03:47.000
More or less every instance provider in the 30 versus responsible for himself,

03:47.000 --> 03:50.000
you have to scale by your own.

03:50.000 --> 03:54.000
You have the possibility of course with hardware

03:54.000 --> 03:59.000
where you make an HLS CDN on top of this or this object storage.

03:59.000 --> 04:06.000
Those are the common ways how you can increase the amount of users that can watch you.

04:06.000 --> 04:09.000
But on the end you stay alone more or less.

04:09.000 --> 04:13.000
PeerTube try to solve this problem with PeerTube mail loader.

04:13.000 --> 04:14.000
It's quite awesome.

04:14.000 --> 04:16.000
Sometimes you see it.

04:16.000 --> 04:21.000
You're watching a video and then you see that other people are watching you as well.

04:21.000 --> 04:27.000
This means PeerTube Peer exchanging the chunks of HLS files.

04:27.000 --> 04:30.000
We are bit torrent and over-verb.

04:30.000 --> 04:33.000
It means you make a real PeerTube Peer connection to the other viewers.

04:34.000 --> 04:43.000
I put it on the top because this is the most common way in the 30 versus to share live streams.

04:43.000 --> 04:49.000
There are other ways as well, but most likely the basement PeerTube here in the browser.

04:49.000 --> 04:52.000
There's another way, it's web torrent in the background.

04:52.000 --> 04:56.000
Of course they can clone...

04:56.000 --> 05:00.000
Even PeerTube can clone videos from one server to another server.

05:00.000 --> 05:01.000
This is possible.

05:01.000 --> 05:04.000
And the new concept is remote runners.

05:04.000 --> 05:05.000
This is quite awesome.

05:05.000 --> 05:07.000
You can scale PeerTube with a remote runner.

05:07.000 --> 05:13.000
It means you can run other services that do the transcoding for you.

05:13.000 --> 05:15.000
Quite often it's re-expensive.

05:15.000 --> 05:20.000
This is the possibilities you have to scale your application or your instance.

05:20.000 --> 05:23.000
Oncast has a quite interesting feature.

05:23.000 --> 05:26.000
Oncast has a general concept.

05:26.000 --> 05:31.000
Oncast is you have a server and you only stream for yourself like this.

05:31.000 --> 05:33.000
But they have a dashboard.

05:33.000 --> 05:37.000
On the dashboard you can see every live stream in this time.

05:37.000 --> 05:41.000
But this dashboard is nothing else than an HTML page.

05:41.000 --> 05:43.000
They are linked to the live server.

05:43.000 --> 05:45.000
It means it's like a list of links.

05:45.000 --> 05:52.000
It's not really scaled because when you're watching there a stream, you're watching it from the server as well.

05:52.000 --> 05:58.000
This is the current state of it.

05:58.000 --> 06:03.000
But what we have now, we have ActivityPub.

06:03.000 --> 06:08.000
It is possible to share the information there as a live stream.

06:08.000 --> 06:10.000
This already worked as PeerTube as well.

06:10.000 --> 06:14.000
There's a live stream but you cannot share the stream itself.

06:14.000 --> 06:19.000
And what we want is we want to share a live stream.

06:19.000 --> 06:23.000
So in the live stream you want to have it interactive.

06:23.000 --> 06:30.000
Means an interactive live stream is a little bit more as if you have a stream with a track like a video and audio.

06:30.000 --> 06:31.000
No.

06:31.000 --> 06:38.000
We want to have it, you have a stream with a track and the tracks inside of the streams can change.

06:38.000 --> 06:44.000
You added new tracks, you added removed tracks, you enabled tracks, you disabled tracks

06:44.000 --> 06:49.000
and the tracks coming from different sources, different instances.

06:49.000 --> 06:54.000
When we can reach this, then we have interactive live streams in the Furryverse.

06:54.000 --> 06:59.000
It's not only that you share a stream, a static stream, it's a little bit more.

06:59.000 --> 07:02.000
This is what you want to achieve.

07:02.000 --> 07:09.000
It's like a conference in the Furryverse.

07:09.000 --> 07:11.000
And we already talked today about it.

07:11.000 --> 07:15.000
There's a protocol, it's called WIP and WAP.

07:15.000 --> 07:18.000
Of course we need a real-time protocol.

07:18.000 --> 07:20.000
It's clear we need WIP and WAP.

07:20.000 --> 07:23.000
It's a real-time protocol, it's a moment.

07:23.000 --> 07:29.000
And on the other side, there's another interesting approach, WIP and WAP.

07:29.000 --> 07:32.000
In short words, what is WIP and WAP?

07:32.000 --> 07:39.000
You make an HTTP request to a server and receive a WAP-ATC resource.

07:39.000 --> 07:41.000
That's it.

07:41.000 --> 07:44.000
No complicated signaling, only an HTTP request.

07:44.000 --> 07:47.000
It's a little bit like an activity path.

07:47.000 --> 07:51.000
You make a request and you get a resource back.

07:51.000 --> 07:53.000
This is written there.

07:53.000 --> 07:57.000
For the first one, you make a request to offer a resource.

07:57.000 --> 07:59.000
Hey, I have a resource here you can have.

07:59.000 --> 08:06.000
And for the second one, you make a request, you subscribe to the resource.

08:06.000 --> 08:08.000
This is only the different.

08:08.000 --> 08:10.000
This is the main idea.

08:10.000 --> 08:14.000
When you have this, here's a little bit more in detail,

08:14.000 --> 08:20.000
you can ignore this one, the eyes, only this two are important.

08:20.000 --> 08:24.000
You offer something with an HTTP, of course, and you get something back.

08:24.000 --> 08:28.000
And then you have all what you need for the resource.

08:28.000 --> 08:30.000
Finish.

08:31.000 --> 08:35.000
And then you have such kind of architecture.

08:35.000 --> 08:37.000
You can do something like this.

08:37.000 --> 08:42.000
A, you are sent off a resource like a client.

08:42.000 --> 08:45.000
You offer this to an endpoint.

08:45.000 --> 08:49.000
And the endpoint offers to the next endpoint.

08:49.000 --> 08:53.000
This is for WIP and for WAP, turn around as well.

08:53.000 --> 08:57.000
It's like you can make an, you can establish like a pipe.

09:01.000 --> 09:05.000
Yeah, sounds, it's really great.

09:07.000 --> 09:10.000
And then you can do this, you can clone streams.

09:10.000 --> 09:14.000
Because when you clone streams, only you send a request to an endpoint.

09:14.000 --> 09:20.000
Give me this and send this to another endpoint and clone this to another site.

09:20.000 --> 09:22.000
That's it.

09:23.000 --> 09:26.000
However, there's a problem.

09:27.000 --> 09:30.000
WIP and WAP is static.

09:30.000 --> 09:32.000
You cannot update the resource.

09:32.000 --> 09:37.000
When you one time have offer and the resource as a miss a request,

09:37.000 --> 09:40.000
you get an STP and you cannot update the STP anymore.

09:40.000 --> 09:42.000
It is static.

09:42.000 --> 09:46.000
Means you will receive a track, all the tracks that insert in the stream

09:46.000 --> 09:49.000
and nothing more, no way.

09:49.000 --> 09:53.000
Means you have a static resource.

09:53.000 --> 09:57.000
It's cool for a live streaming, but we want interactive live streaming

09:57.000 --> 09:59.000
where the resource are changed.

09:59.000 --> 10:01.000
This is quite important.

10:01.000 --> 10:05.000
So we want a little bit more dynamically inside WIP and WAP.

10:05.000 --> 10:08.000
This is not enough for us.

10:08.000 --> 10:13.000
And our trick sources is two things, two important things.

10:13.000 --> 10:18.000
A little bit smaller things, but the two main ideas behind us is like this.

10:18.000 --> 10:25.000
When you subscribe an egress endpoint and receiving a resource,

10:25.000 --> 10:28.000
you have to subscribe as well a channel.

10:28.000 --> 10:29.000
It is so opposite.

10:29.000 --> 10:31.000
You get a channel as well.

10:31.000 --> 10:36.000
Because you need a channel to get the information that the egress resource,

10:36.000 --> 10:38.000
the receiving a resource is updated.

10:38.000 --> 10:40.000
This is the first thing, what you need.

10:40.000 --> 10:42.000
Without is not possible.

10:42.000 --> 10:45.000
Normally you do it in a conference system.

10:45.000 --> 10:49.000
Perhaps you do it with a signaling server, your resources update,

10:49.000 --> 10:51.000
you get a new STP.

10:51.000 --> 10:55.000
But we only want rest.

10:55.000 --> 10:58.000
We have no WebSocket server.

10:58.000 --> 11:05.000
You need established an extra resource like a channel to receive this information.

11:05.000 --> 11:12.000
The second point is you have to annotate the tracks.

11:12.000 --> 11:16.000
You have to know what this track is.

11:16.000 --> 11:20.000
For example, this is the main track or it's a guest track.

11:20.000 --> 11:25.000
And here, Schick is using the STDP attribute media title.

11:25.000 --> 11:29.000
It's not used normally, some people are using it,

11:29.000 --> 11:32.000
but it's there for title of the track, for example.

11:32.000 --> 11:35.000
Here it's used for some meta information.

11:35.000 --> 11:39.000
For example, it's the track that you received as muted first,

11:39.000 --> 11:44.000
but the track is the main track or another track.

11:44.000 --> 11:47.000
And the rest is activity problem.

11:47.000 --> 11:51.000
You rely on the things.

11:51.000 --> 11:59.000
Yeah, Schick itself is an instance written in Go, based on PyM.

11:59.000 --> 12:02.000
It came with the JavaScript SDK.

12:02.000 --> 12:06.000
You get in front end, it's a web component, not an iframe.

12:06.000 --> 12:09.000
You get in web component.

12:09.000 --> 12:15.000
And this SDK is implemented in PeerTube plugin.

12:15.000 --> 12:23.000
Because Schick itself can nothing, only makes this exchanging.

12:23.000 --> 12:26.000
And it looks like this.

12:26.000 --> 12:29.000
You have a PeerTube instance on the left side,

12:29.000 --> 12:32.000
and you have a PeerTube instance on the right side.

12:32.000 --> 12:34.000
You are here starting your stream,

12:34.000 --> 12:39.000
and you want invite people on the form another instance.

12:39.000 --> 12:43.000
This PeerTube instance has a possibility to a Schick instance,

12:43.000 --> 12:45.000
and this is a complete other Schick instance.

12:45.000 --> 12:48.000
They are not related to each other.

12:48.000 --> 12:51.000
And this user is on his, and with this Schick instance,

12:51.000 --> 12:54.000
and with this protocol and background,

12:54.000 --> 12:57.000
he can exchange and communicate with each other,

12:57.000 --> 13:03.000
like a conference, but this is a stream.

13:03.000 --> 13:06.000
And then on this side, he is the owner of this,

13:06.000 --> 13:08.000
he is in streaming this one.

13:08.000 --> 13:10.000
It's then transcoded in RTMP,

13:10.000 --> 13:13.000
because from RTMP then in HLS.

13:13.000 --> 13:17.000
At the moment, I have not the direct HLS transcoding.

13:17.000 --> 13:20.000
But theoretically, you can, from verbiage,

13:20.000 --> 13:23.000
directly in HLS transcoding, but it's not implemented yet.

13:24.000 --> 13:27.000
Yeah, and let us look how it's looked.

13:27.000 --> 13:31.000
I think I have, yeah.

13:31.000 --> 13:34.000
For this one.

13:37.000 --> 13:39.000
Yeah.

13:41.000 --> 13:48.000
So, I have here the two PeerTube instances.

13:48.000 --> 13:52.000
I make it like this, and so like this.

13:53.000 --> 13:59.000
It depends on the time I already created a live stream,

13:59.000 --> 14:04.000
but you can do it directly now, because we have more time.

14:05.000 --> 14:07.000
Sorry.

14:19.000 --> 14:24.000
When you're looking, I'm not sure how familiar you with PeerTube.

14:24.000 --> 14:33.000
Here, inside of PeerTube, I have the chick plug-in.

14:35.000 --> 14:41.000
This is this one, and you can configure the chick plug-in,

14:41.000 --> 14:47.000
and you have here, this one is relating to the chick server.

14:47.000 --> 14:51.000
It's called stream.chick, means he knows this one.

14:51.000 --> 14:53.000
Yeah.

14:53.000 --> 14:56.000
Here's an ASESC, okay.

14:56.000 --> 14:58.000
Theoretically, you can use this.

14:58.000 --> 15:00.000
This is, okay.

15:01.000 --> 15:07.000
And the other one, let me see.

15:07.000 --> 15:11.000
Yeah, this is the other one.

15:11.000 --> 15:14.000
Yes, as well.

15:14.000 --> 15:17.000
That plug-in.

15:17.000 --> 15:24.000
But he is related to forstem.chick, is another chick instance.

15:24.000 --> 15:25.000
It's a complete different.

15:25.000 --> 15:28.000
They are in different servers.

15:28.000 --> 15:31.000
Yeah, they are complete separate from each other.

15:31.000 --> 15:37.000
See, this PeerTube instance,

15:37.000 --> 15:42.000
follow this PeerTube.

15:42.000 --> 15:44.000
You see?

15:44.000 --> 15:49.000
Means this one get all live videos from the other one, cloned.

15:49.000 --> 15:57.000
And, of course, this one has his own chick is following this instance.

15:57.000 --> 16:03.000
The communication between chick and the PeerTube is over activity pub.

16:03.000 --> 16:08.000
So when this chick, when the PeerTube instance get a new live,

16:08.000 --> 16:12.000
the chick get it as well as copy over activity pub.

16:12.000 --> 16:14.000
That's the idea behind it.

16:14.000 --> 16:16.000
The implementation is stored,

16:16.000 --> 16:19.000
steal from owncast is exactly the same,

16:19.000 --> 16:23.000
because owncast has a cool implementation for it.

16:23.000 --> 16:25.000
Yeah.

16:25.000 --> 16:28.000
That's a good idea, owncast and PeerTube together.

16:28.000 --> 16:31.000
I only want to mention.

16:31.000 --> 16:40.000
So, and what we can do now is,

16:40.000 --> 16:45.000
we can create a live stream right now.

16:45.000 --> 16:47.000
It's like this.

16:47.000 --> 16:49.000
I hope I have time.

16:49.000 --> 16:52.000
Yeah, I have time.

16:52.000 --> 16:57.000
Make it permanent, makes no difference.

16:57.000 --> 17:00.000
Yeah.

17:00.000 --> 17:03.000
One interesting point when you create a live stream,

17:03.000 --> 17:07.000
it should be short as possible.

17:07.000 --> 17:11.000
PeerTube can nine second delay something like this.

17:11.000 --> 17:15.000
Nine, fifteen seconds, something like this is the shortest what PeerTube arrives.

17:15.000 --> 17:17.000
I mean, when we're talking about interactive,

17:17.000 --> 17:22.000
it's definitely not take 30 seconds or 60 seconds.

17:22.000 --> 17:24.000
It's too much.

17:24.000 --> 17:25.000
Okay.

17:25.000 --> 17:29.000
So what we can do as well is,

17:29.000 --> 17:33.000
let us invite the other guy from the other instance.

17:33.000 --> 17:39.000
What you have to know is the activity pub ID from this guy.

17:39.000 --> 17:41.000
Yeah, this one.

17:41.000 --> 17:48.000
Now we create a live stream.

17:48.000 --> 17:52.000
I hope so.

17:52.000 --> 17:58.000
No, we don't create a live stream.

17:58.000 --> 18:05.000
I have to update the live stream.

18:05.000 --> 18:10.000
Sorry.

18:10.000 --> 18:14.000
My mistake.

18:14.000 --> 18:18.000
So now we have a live stream.

18:18.000 --> 18:20.000
Here's online.

18:20.000 --> 18:25.000
And in the back,

18:25.000 --> 18:32.000
I have to take this one because I'm not figure out how I can find this live stream

18:32.000 --> 18:37.000
than on the other side.

18:37.000 --> 18:42.000
Maybe someone will explain.

18:42.000 --> 18:45.000
Now activity pub has synced to both.

18:45.000 --> 18:48.000
So we have the live stream as well on the other instance.

18:48.000 --> 18:52.000
So when I have this one, I'm logged in as user one to three.

18:52.000 --> 18:55.000
I can assess now here.

18:55.000 --> 18:58.000
I'm now in.

18:58.000 --> 19:01.000
Now I'm in the web component.

19:01.000 --> 19:05.000
It's a web component rendered in peer tube from the plug-in.

19:05.000 --> 19:08.000
It's not an iframe.

19:08.000 --> 19:13.000
And I can do this here as well.

19:13.000 --> 19:18.000
So now two guys in two different stream, but they are not connected at the moment.

19:18.000 --> 19:21.000
First, they have to join.

19:21.000 --> 19:23.000
He's joining.

19:23.000 --> 19:28.000
And he's joining as guest.

19:28.000 --> 19:31.000
Takes a while.

19:31.000 --> 19:34.000
So let me see.

19:34.000 --> 19:37.000
So now we can do it.

19:37.000 --> 19:47.000
And of course we want the other guy is seeing something.

19:48.000 --> 19:51.000
So now the internet is a little bit slow.

19:51.000 --> 19:53.000
Sorry about this.

19:53.000 --> 19:57.000
Now they're both on different check instance, different SFOs.

19:57.000 --> 20:03.000
And the SFOs communicating with them and established with only rest endpoint.

20:03.000 --> 20:08.000
And the information like mute and unmute what you need.

20:08.000 --> 20:16.000
And exchanged like, sorry.

20:16.000 --> 20:21.000
Like the channel that for the web egress component is established.

20:21.000 --> 20:27.000
And even when I, let me come back.

20:27.000 --> 20:32.000
And even I can do this one.

20:32.000 --> 20:35.000
Sorry.

20:35.000 --> 20:37.000
No, I can't.

20:37.000 --> 20:39.000
Sorry, the connection is bad.

20:39.000 --> 20:41.000
So you see the other side.

20:41.000 --> 20:43.000
Now I have the track mixed.

20:43.000 --> 20:46.000
So I can even mix the live stream.

20:46.000 --> 20:48.000
And then all is working fine.

20:48.000 --> 20:51.000
Theoretical wise, and my internet goes not down.

20:51.000 --> 20:53.000
I can online goes as well.

20:53.000 --> 20:56.000
I can go live with this.

20:56.000 --> 21:02.000
Let me see that he can see this live as well.

21:02.000 --> 21:04.000
One moment.

21:04.000 --> 21:07.000
I think it's here.

21:07.000 --> 21:11.000
Yeah, it was here.

21:11.000 --> 21:13.000
Somewhere here.

21:13.000 --> 21:16.000
This one should be.

21:16.000 --> 21:18.000
Yeah, now we are live as well.

21:18.000 --> 21:21.000
Okay, sorry the internet is not so good.

21:23.000 --> 21:25.000
Yeah, that's it.

21:25.000 --> 21:32.000
And so we have established a clone stream between two instances in the first bus.

21:32.000 --> 21:34.000
That's it.

21:34.000 --> 21:36.000
Yeah.

21:36.000 --> 21:47.000
Yeah, question.

21:47.000 --> 21:49.000
I'm curious.

21:49.000 --> 21:53.000
I've worked a little bit with Activity Pub, but not Super Induct.

21:53.000 --> 21:57.000
I'm curious if there's like a, is there a live stream post type in Activity Pub,

21:57.000 --> 22:05.000
such that like other implementations like a master.on server or something could play this live stream,

22:05.000 --> 22:07.000
or does it look like just a link to a live stream?

22:07.000 --> 22:09.000
How does that go this way?

22:09.000 --> 22:21.000
The question is, is there an Activity Pub attribute or something like inside, right?

22:21.000 --> 22:23.000
I'm not sure.

22:23.000 --> 22:31.000
You have the content type of video inside, and you have as well the annotations that it's a live video or not.

22:31.000 --> 22:34.000
This came from PeerTube itself alone.

22:34.000 --> 22:41.000
So, inside of the JSON is only the host server inside.

22:41.000 --> 22:50.000
It means when you share this JSON to another PeerTube instance, you get a description like who is the owner,

22:50.000 --> 22:55.000
which actor is the owner of this live stream, and where is the home server,

22:55.000 --> 22:58.000
the home instance for this live stream.

22:58.000 --> 23:00.000
This is all what we have inside.

23:00.000 --> 23:09.000
And then, Schick annotates this with extra attributes like who is the guest,

23:09.000 --> 23:14.000
and this has the host server at Schick instance.

23:14.000 --> 23:23.000
Because you can only follow with Schick another instance when your own instance has as well a Schick instance.

23:23.000 --> 23:29.000
When you not have a Schick instance, the button to join, you have to go then to the other instance.

23:29.000 --> 23:32.000
This is the main. This is the mechanisms behind it.

23:32.000 --> 23:34.000
I think, what's the question?

23:34.000 --> 23:35.000
Yeah.

23:35.000 --> 23:36.000
Okay.

23:36.000 --> 23:37.000
Yeah.

23:37.000 --> 23:42.000
This only works when both instances implement in Schick instance.

23:42.000 --> 23:47.000
And this is supposed to work as well for own cast, because it makes no difference.

23:47.000 --> 23:51.000
Only the front is needed for own cast.

23:51.000 --> 24:03.000
And this is the main idea behind it, that you have a way to scale your streams in the background with extensions.

24:03.000 --> 24:06.000
Yeah, based on activity.

24:06.000 --> 24:08.000
Perhaps an interesting point.

24:08.000 --> 24:10.000
It's like a little bit controversial.

24:10.000 --> 24:18.000
You can use such kind of technology for, I will not say advertisement, but for recommendations.

24:18.000 --> 24:24.000
When you have a live streams, often you have the problem you want inform other people that you have as well live streams.

24:24.000 --> 24:26.000
Other people didn't know about you.

24:26.000 --> 24:34.000
And here you have something like a pool where you can add streams and then you can chat doing the live streams.

24:34.000 --> 24:46.000
Because in a back, a live streams and an active live streams, nothing else as that you have different kind of sources from different kind of furry growth instances.

24:46.000 --> 24:51.000
And such kind of things are then possible.

24:51.000 --> 24:54.000
Okay.

24:54.000 --> 24:55.000
Okay.

24:55.000 --> 24:56.000
Yeah.

24:56.000 --> 25:00.000
You mentioned that you're using data channels to change information about back of this.

25:00.000 --> 25:03.000
What exactly is set up the data channel?

25:03.000 --> 25:07.000
Renegeration, the STP.

25:07.000 --> 25:09.000
I have the egress endpoint.

25:09.000 --> 25:16.000
I mean, the receiving end point needs a data channel from the offer of the resource.

25:16.000 --> 25:22.000
The question was what came through the channel, the STP.

25:22.000 --> 25:28.000
The STP and the mute event as well.

25:28.000 --> 25:29.000
Yeah.

25:29.000 --> 25:31.000
This is coming soon.

25:31.000 --> 25:32.000
Yeah.

25:32.000 --> 25:36.000
What's the reason for the delay so much lately?

25:36.000 --> 25:43.000
Here in this one, I think also what's the reason for the delay in the latest thing?

25:43.000 --> 25:46.000
First, the network here, I guess.

25:46.000 --> 25:52.000
Second one, no, most likely the network.

25:52.000 --> 25:56.000
I have this one here.

25:56.000 --> 25:57.000
One moment.

25:57.000 --> 26:01.000
When you have this one, I hope I'll be online still.

26:01.000 --> 26:04.000
I'm not sure.

26:04.000 --> 26:08.000
This delay, what you have here, this is more bigger.

26:08.000 --> 26:13.000
This came from the transcoding form.

26:13.000 --> 26:15.000
VapRTC to RGMP.

26:15.000 --> 26:17.000
That is at the moment not optimized.

26:17.000 --> 26:20.000
This is the reason for this delay where you have such kind of, yeah.

26:20.000 --> 26:23.000
But the rest, I think it's the network.

26:23.000 --> 26:24.000
I guess.

26:24.000 --> 26:27.000
So it's not VapRTC to VapRTC.

26:27.000 --> 26:31.000
It's converted somewhere?

26:31.000 --> 26:32.000
It's like this.

26:32.000 --> 26:36.000
You have a VapRTC to VapRTC converted.

26:36.000 --> 26:40.000
Which one you mean between the server or between the?

26:40.000 --> 26:44.000
On the right-hand side, the video is quite delayed.

26:44.000 --> 26:45.000
Yeah.

26:45.000 --> 26:46.000
Where did the left?

26:46.000 --> 26:48.000
Yeah.

26:48.000 --> 26:50.000
This one.

26:50.000 --> 26:54.000
Yeah, there's a big delay at the moment.

26:54.000 --> 26:56.000
Yeah.

26:56.000 --> 26:59.000
Yeah.

26:59.000 --> 27:06.000
Now, the thing is, in this case, you have three VapRTC connections now.

27:06.000 --> 27:08.000
One is from the client.

27:08.000 --> 27:19.000
Maybe I can show you this here in the slides.

27:19.000 --> 27:32.000
Sorry.

27:32.000 --> 27:34.000
You have three connections.

27:34.000 --> 27:38.000
One to your chic instance.

27:38.000 --> 27:41.000
One from the chic instance to this one and one to this one.

27:41.000 --> 27:43.000
It's like a pipe.

27:43.000 --> 27:55.000
And I guess this was this quite fast because they are in the same location.

27:55.000 --> 28:00.000
But I guess this one makes a trouble at the moment.

28:00.000 --> 28:07.000
I guess.

28:07.000 --> 28:08.000
Yeah.

28:08.000 --> 28:11.000
Some other question?

28:11.000 --> 28:12.000
Yeah.

28:12.000 --> 28:15.000
I missed part of the presentation, sorry about that.

28:15.000 --> 28:21.000
As far as I understood, you are using Weep and Web as a way to get those two to communicate with each other.

28:21.000 --> 28:30.000
So, as I was saying before, in the last year, the view of what specification basically forces you to create an offer for that as well.

28:30.000 --> 28:34.000
So it makes changing Weep and Web impossible within the specification.

28:34.000 --> 28:39.000
Are you using the old mode where you were expecting an offer to do something?

28:39.000 --> 28:45.000
How are you dealing with this synchronization where you have to wait for an offer and stuff like this?

28:45.000 --> 28:46.000
Yeah.

28:46.000 --> 28:48.000
I try to repeat the question.

28:48.000 --> 28:52.000
Weep and Web, I think, have two options.

28:52.000 --> 28:56.000
First, you send an offer and get an answer back.

28:56.000 --> 29:00.000
And second, the second option is you say, hey, I want an offer from you.

29:00.000 --> 29:03.000
Then you get an offer and you send the answer back.

29:03.000 --> 29:06.000
What is the difference between this one?

29:06.000 --> 29:09.000
For the first, you need only one request.

29:09.000 --> 29:12.000
It's like, give me one post request.

29:12.000 --> 29:15.000
You send an offer and get an answer back inside the post request.

29:15.000 --> 29:23.000
For the second option, you send first a post request, get an offer, and send again a post, a patch.

29:23.000 --> 29:25.000
I think it's a patch afterwards.

29:25.000 --> 29:26.000
Yeah, something like this.

29:26.000 --> 29:38.000
I implemented the second one because I implemented it in June and I think now is a new version out where they are supposed only one request.

29:38.000 --> 29:39.000
Yeah.

29:39.000 --> 29:46.000
For Web, for Weep in one, for Weep, I only need one request.

29:46.000 --> 29:47.000
Yeah, that's right.

29:47.000 --> 29:58.000
But because we are not here, I not use Weep and Web how it's supposed to be because I need to dynamically, so I established Web at the C Channel as well.

29:58.000 --> 30:01.000
So that is additional.

30:01.000 --> 30:03.000
Okay.

30:03.000 --> 30:05.000
Yeah.

30:05.000 --> 30:10.000
Yeah, if no questions anymore, then thank you for watching.

30:17.000 --> 30:40.000
Thank you.

30:40.000 --> 30:41.000
Quite interesting.

30:41.000 --> 30:45.000
Yeah, because you're talking about this problem already.

30:45.000 --> 30:48.000
I wrote a long post because I liked the old mode.

30:48.000 --> 30:50.000
I liked the way that we are doing things.

30:50.000 --> 30:55.000
Federation is possible thanks to the mode.

30:55.000 --> 30:57.000
Just leave a couple of minutes to sit down.

30:57.000 --> 30:58.000
Yeah.

31:15.000 --> 31:16.000
Yeah.

31:45.000 --> 31:47.000
Yeah.

