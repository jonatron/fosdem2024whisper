WEBVTT

00:00.000 --> 00:02.000
I

00:24.500 --> 00:26.500
am

00:30.000 --> 00:32.000
working with

00:37.000 --> 00:39.000
Apache James.

00:40.000 --> 00:42.000
Basically, first, a few words I'm working at

00:46.000 --> 00:48.000
Lina Gora. Our mission is to promote data sovereignty and

00:48.000 --> 00:50.000
especially give the tools for organization to communicate

00:54.000 --> 00:56.000
together without using big gaps.

00:57.000 --> 00:59.000
So we are working on a suit called twig workplace with

01:01.000 --> 01:03.000
twig mail for e-mail, twig that is relying on matrix for the

01:04.000 --> 01:06.000
chat and also file sharing.

01:07.000 --> 01:09.000
So as part of this development effort, we were looking back in

01:10.000 --> 01:12.000
the days for an e-mail server that is easy to scale, at the

01:14.000 --> 01:16.000
time we were looking for a file sharing.

01:17.000 --> 01:19.000
So we are looking for a file sharing.

01:20.000 --> 01:22.000
So we are looking for a file sharing.

01:23.000 --> 01:25.000
So we are looking for an e-mail server that is easy to

01:26.000 --> 01:28.000
scale.

01:29.000 --> 01:31.000
At the time we did not hear yet the talk about aerogram.

01:34.000 --> 01:36.000
We were looking for a modern e-mail protocol.

01:38.000 --> 01:40.000
Hopefully we already heard about Ricardo's stuff called

01:42.000 --> 01:44.000
J-Map protocol.

01:46.000 --> 01:48.000
And we also needed to be able to do deep integrations inside

01:49.000 --> 01:51.000
the mail server.

01:52.000 --> 01:54.000
So we started with the protocol.

01:55.000 --> 01:57.000
I am sorry, I am a bit frustrated.

01:58.000 --> 02:00.000
I did not get to speak about J-Map so we will take one minute

02:01.000 --> 02:03.000
to do so.

02:05.000 --> 02:07.000
We started implementing J-Map into Apache James back in

02:10.000 --> 02:12.000
2015.

02:13.000 --> 02:15.000
Before even the normalization effort started within the IETF.

02:17.000 --> 02:19.000
We are big fans of I-Map.

02:20.000 --> 02:22.000
We implemented twig mail client in Flutter.

02:25.000 --> 02:27.000
So Odriga is using it.

02:28.000 --> 02:30.000
The Dart dependency to write J-Map CLI for instance.

02:32.000 --> 02:34.000
Basically we are able to take a mobile team that is not an

02:37.000 --> 02:39.000
expert at all about e-mail and get them to implement a mail client.

02:42.000 --> 02:44.000
The things work fine, works fast.

02:45.000 --> 02:47.000
Synchronization is easy.

02:48.000 --> 02:50.000
Most of the pains of I-Map are lifted.

02:53.000 --> 02:55.000
So twig mail works on multiple platforms, iOS, Android, Web.

02:59.000 --> 03:01.000
And it is also used on top of other mail servers like

03:05.000 --> 03:07.000
StoreWart Labs.

03:10.000 --> 03:12.000
So about the mail server itself, because it is a track about mail

03:13.000 --> 03:15.000
servers, Apache James is part of the Apache foundation.

03:18.000 --> 03:20.000
So it is a track about mail servers.

03:23.000 --> 03:25.000
To my knowledge, it is the only e-mail server that is part of

03:28.000 --> 03:30.000
the foundation and has an open governance model.

03:33.000 --> 03:35.000
It started back in 2003 from Project Jakarta.

03:38.000 --> 03:40.000
So it is kind of a cousin of Tomcat and projects like that.

03:44.000 --> 03:46.000
It is surprisingly influential in the Java world.

03:48.000 --> 03:50.000
The mail that I will present later is kind of the servlet of mail.

03:53.000 --> 03:55.000
So a generic way to write e-mails.

03:58.000 --> 04:00.000
Some of the important people within the Apache Software Foundation

04:02.000 --> 04:04.000
did actually contribute at some point to Apache James.

04:07.000 --> 04:09.000
And Neti Network Library, which is very influential in Java.

04:12.000 --> 04:14.000
Norman Mauer is a previous contributor of Apache James.

04:18.000 --> 04:20.000
So regarding the overall setup, what I recommend actually to use

04:25.000 --> 04:27.000
is the distributed setup for Apache James,

04:30.000 --> 04:32.000
where basically we host metadata in Cassandra.

04:36.000 --> 04:38.000
Big binaries into S3, distributed search with open search.

04:41.000 --> 04:43.000
There was a little licensing problem with Elasticsearch.

04:47.000 --> 04:49.000
And last but not least, RabbitMQ for messaging, things like IMAAP,

04:52.000 --> 04:54.000
IDOL and stuff like that.

04:55.000 --> 04:57.000
Of course, we orchestrate everything and run it on top of Kubernetes

05:00.000 --> 05:02.000
and are integrated with metric systems like Grafana.

05:06.000 --> 05:08.000
So now let's look inside the code.

05:09.000 --> 05:11.000
This is more or less the classical e-mail server architecture.

05:14.000 --> 05:16.000
You've got protocols on the left, SMTP,

05:17.000 --> 05:19.000
IMAAP, which would call the mailbox where the mails are being stored.

05:23.000 --> 05:25.000
And you will submit emails to a mail queue and apply mail processing.

05:28.000 --> 05:30.000
So what's important here to notice is that you've got green dots.

05:33.000 --> 05:35.000
It's not updated the slides, but now you've got a green dot here

05:37.000 --> 05:39.000
that allows you to depend on simple interfaces in Java.

05:40.000 --> 05:42.000
Write Java code in a completely separated project, compile it,

05:45.000 --> 05:47.000
and embed it into Apache James.

05:48.000 --> 05:50.000
Configure it. You have a set of extensions that already exist.

05:51.000 --> 05:53.000
You can use James APIs. You can inject your own component.

05:55.000 --> 05:57.000
And then basically have your code run inside the mail server

05:59.000 --> 06:01.000
without touching the mail server.

06:03.000 --> 06:05.000
And then you can run it on the mail server.

06:06.000 --> 06:08.000
And then you can run it on the mail server.

06:09.000 --> 06:11.000
And then you can run it by switching a single line within that e-mail server.

06:16.000 --> 06:18.000
So sorry that might be complicated to see from the back of the room.

06:21.000 --> 06:23.000
I did not thought about that when I copy and pasted those rectangles.

06:26.000 --> 06:28.000
But basically the mailet container, you take things from within the mail queue.

06:32.000 --> 06:34.000
And the overall design is to have mailets, which is an action,

06:34.000 --> 06:36.000
applied conditionally by a matcher.

06:39.000 --> 06:41.000
So you have two little interfaces that you work with.

06:42.000 --> 06:44.000
The matcher represents a condition.

06:45.000 --> 06:47.000
And you would organize a pair of mailets, a matcher,

06:50.000 --> 06:52.000
inside a processor, which is a stream of execution.

06:54.000 --> 06:56.000
You have a specific mailet that allows to switch a processor.

06:59.000 --> 07:01.000
And a couple of various basic implementations.

07:05.000 --> 07:07.000
All of that is defined in XML and is fully customizable.

07:12.000 --> 07:14.000
I will give you a little example.

07:17.000 --> 07:19.000
So a hello world mailet that is kind enough to look up for the language

07:24.000 --> 07:26.000
and print hello world based on that.

07:27.000 --> 07:28.000
So a mailet would get the mail and applies an action to it.

07:31.000 --> 07:32.000
You can modify the mail.

07:32.000 --> 07:34.000
You can trigger some external APIs and so on and so on.

07:36.000 --> 07:38.000
All I need is to depend on the mailets API.

07:40.000 --> 07:42.000
From there, I compile my project, I get a job,

07:44.000 --> 07:46.000
and I just register it somewhere into my XML configuration,

07:55.000 --> 07:56.000
put the job into external jobs and go.

07:59.000 --> 08:01.000
So back into there, I can just go back to the mailets.

08:02.000 --> 08:03.000
I can just go back to the mailets.

08:04.000 --> 08:05.000
So it's actually quite powerful and you can connect

08:08.000 --> 08:09.000
the different sets of extensions together.

08:11.000 --> 08:12.000
We've been speaking a bit with Daniel about push.

08:14.000 --> 08:15.000
We received a contribution lately to have an IMAP extension

08:18.000 --> 08:19.000
to for push for iOS application.

08:24.000 --> 08:25.000
And basically you are able to plug a mailbox listener

08:28.000 --> 08:29.000
that listens to the mailbox events, register an IMAP app,

08:33.000 --> 08:34.000
and you can get an extension that creates the registrations

08:36.000 --> 08:37.000
and you would be able to get the push working like that.

08:42.000 --> 08:43.000
So that's quite powerful, but James is written in Java.

08:48.000 --> 08:49.000
You have interfaces for everywhere.

08:50.000 --> 08:51.000
Everything has an interface and we rely on inversion

08:55.000 --> 08:56.000
of control with a library called JUSON,

08:59.000 --> 09:00.000
which means that basically you can assemble

09:02.000 --> 09:03.000
your JUSON modules the way you want.

09:05.000 --> 09:06.000
And of course you can reuse existing modules,

09:09.000 --> 09:10.000
which means that you can make your own

09:11.000 --> 09:12.000
tailor-made server with Apache James.

09:15.000 --> 09:16.000
As an example, so because we need to follow the Apache way,

09:22.000 --> 09:23.000
we need to be in open governance.

09:25.000 --> 09:26.000
At Lina Gora, we decided to clearly split the project,

09:29.000 --> 09:30.000
which is Apache James.

09:30.000 --> 09:31.000
That's where open standards go.

09:33.000 --> 09:34.000
That's where the distributed mailbox is.

09:37.000 --> 09:38.000
That's where everything related to modularity,

09:40.000 --> 09:41.000
extensibility is.

09:42.000 --> 09:43.000
And we reuse that as a framework to bundle

09:45.000 --> 09:46.000
our own twig mail servers that have a couple more extensions,

09:50.000 --> 09:51.000
things like autocomplete for email addresses

09:54.000 --> 09:55.000
and stuff like that that are not part of the JMAP standard.

09:57.000 --> 09:58.000
So that we reuse to actually build the JMAP standard

10:00.000 --> 10:01.000
and build our product.

10:03.000 --> 10:04.000
This is a very nice contribution that we did get

10:07.000 --> 10:08.000
back in 2020.

10:09.000 --> 10:10.000
So this is to give you an idea of how you could use James.

10:14.000 --> 10:15.000
The idea is to validate GPG key.

10:17.000 --> 10:18.000
So basically, using the Web Key protocol,

10:23.000 --> 10:24.000
I would submit my key to that modified Apache James

10:25.000 --> 10:26.000
that will send me an email encrypted with the private key

10:30.000 --> 10:31.000
that I've just been uploading.

10:33.000 --> 10:34.000
I would reply to that email,

10:36.000 --> 10:37.000
which would validate the key and serve it there.

10:40.000 --> 10:41.000
So it's proof of concept.

10:42.000 --> 10:43.000
It had not been merged part of James,

10:44.000 --> 10:45.000
but it's to show you that you can really play

10:47.000 --> 10:48.000
and do interesting things with deep integrations.

10:52.000 --> 10:53.000
Who is doing pop free?

10:54.000 --> 10:55.000
It's the guy in the room doing pop free.

10:56.000 --> 10:57.000
Pop free is an awesome protocol

10:59.000 --> 11:00.000
because you don't have a UID

11:02.000 --> 11:03.000
and it's really, really, really simple.

11:05.000 --> 11:06.000
So in France, when you go and see a practitioner,

11:08.000 --> 11:09.000
you would get a repayment order

11:10.000 --> 11:11.000
that would be sent to the National Healthcare Insurance

11:15.000 --> 11:16.000
that of course transits by email.

11:19.000 --> 11:20.000
And every insurance would get a mailbox

11:22.000 --> 11:23.000
receiving millions of dollars.

11:24.000 --> 11:25.000
So you would have emails a day.

11:27.000 --> 11:28.000
And of course, you need to have a damn thing,

11:29.000 --> 11:30.000
geo-replicated on three different locations

11:31.000 --> 11:32.000
and so on and so on.

11:33.000 --> 11:34.000
So I map the latency, it would go crazy.

11:35.000 --> 11:36.000
At least we don't use aerogram.

11:40.000 --> 11:41.000
Volumetry is big.

11:42.000 --> 11:43.000
And of course, they have a very crappy description

11:46.000 --> 11:47.000
of homegrown custom formats

11:49.000 --> 11:50.000
that you need to, that slide, don't do justice.

11:51.000 --> 11:52.000
It's actually a couple thousands of lines of code

11:56.000 --> 11:57.000
to get all of that fitting in Apache James.

12:00.000 --> 12:01.000
The point here, when I arrived on the project,

12:04.000 --> 12:05.000
they were actually able to write tons of mail-in

12:08.000 --> 12:09.000
matchers, listeners and so on and so on themselves

12:11.000 --> 12:12.000
and plug it in together.

12:15.000 --> 12:16.000
So we were also able to rewrite

12:18.000 --> 12:19.000
the storage engine.

12:20.000 --> 12:22.000
And we also had a lot of different

12:23.000 --> 12:24.000
design to be able to leave some

12:26.000 --> 12:27.000
where Cassandra restrictions on

12:28.000 --> 12:29.000
dumpstones and listing millions of

12:32.000 --> 12:33.000
emails.

12:35.000 --> 12:36.000
Another project that we did was actually

12:39.000 --> 12:40.000
to also integrate within MSS Santé.

12:42.000 --> 12:43.000
So that's the mailing system

12:44.000 --> 12:45.000
for French health practitioners.

12:47.000 --> 12:48.000
It has some specific security restrictions

12:50.000 --> 12:51.000
that are related to it.

12:54.000 --> 12:55.000
So we were able to have also some specific

12:58.000 --> 12:59.000
integrations for that customer, like

13:01.000 --> 13:02.000
upload directly, attachments received

13:04.000 --> 13:05.000
into their drive.

13:08.000 --> 13:09.000
So basically, we quite a bunch of extensions

13:11.000 --> 13:12.000
and modularity going on in there.

13:16.000 --> 13:17.000
And surprisingly, even things like

13:18.000 --> 13:19.000
banking applications, that's also email.

13:21.000 --> 13:22.000
And it's very specific.

13:23.000 --> 13:24.000
They have millions of users with very,

13:25.000 --> 13:26.000
very, very tiny mailboxes and it needs

13:27.000 --> 13:28.000
to be cheap.

13:29.000 --> 13:30.000
And they have custom SOAP APIs to

13:31.000 --> 13:32.000
access the messages.

13:33.000 --> 13:34.000
That's also the kind of other things

13:35.000 --> 13:36.000
that you can do with Apache James.

13:39.000 --> 13:40.000
So I did not cover much of the technical

13:42.000 --> 13:43.000
details.

13:44.000 --> 13:45.000
I did do a hands-on session back in

13:46.000 --> 13:47.000
the day in 2019 in the Apache conference

13:50.000 --> 13:51.000
in Berlin.

13:52.000 --> 13:53.000
So if you are interested in getting

13:54.000 --> 13:55.000
more information on the code and

13:56.000 --> 13:57.000
watching some hopefully live coding

13:58.000 --> 13:59.000
that did not go too wrong,

14:00.000 --> 14:01.000
you can do it.

14:02.000 --> 14:03.000
The talk is online.

14:05.000 --> 14:06.000
Thank you very much.

14:07.000 --> 14:08.000
Do you have some questions?

14:09.000 --> 14:10.000
Thank you very much.

14:10.000 --> 14:11.000
Okay.

14:12.000 --> 14:13.000
Let's see your first hand.

14:16.000 --> 14:17.000
Thank you.

14:19.000 --> 14:20.000
So are there any pre-existing

14:21.000 --> 14:22.000
modules for spam filtering

14:23.000 --> 14:24.000
directly with Apache James?

14:25.000 --> 14:26.000
So you need to speak louder because

14:28.000 --> 14:29.000
I did not understood the middle of

14:30.000 --> 14:31.000
the question.

14:32.000 --> 14:33.000
Are there any existing modules for

14:34.000 --> 14:35.000
spam filtering so that you can

14:36.000 --> 14:37.000
use the same language as you

14:37.000 --> 14:38.000
did with Apache James?

14:39.000 --> 14:40.000
So basically we are integrated

14:41.000 --> 14:42.000
with spam assassin and air spam

14:43.000 --> 14:44.000
D, especially with spam assassin

14:45.000 --> 14:46.000
because we are an air spam D

14:47.000 --> 14:48.000
because we have mailbox listeners.

14:49.000 --> 14:50.000
We are able to

14:52.000 --> 14:53.000
live train based on the way you

14:54.000 --> 14:55.000
move messages, your spam filters.

14:56.000 --> 14:57.000
So I think that's a good point.

14:58.000 --> 14:59.000
So I think that's a good point.

15:00.000 --> 15:01.000
So I think that's a good point.

15:02.000 --> 15:03.000
So I think that's a good point.

15:04.000 --> 15:05.000
So I think that's a good point.

15:05.000 --> 15:06.000
So I think that's a good point.

15:07.000 --> 15:08.000
So I think that's a good point.

15:09.000 --> 15:10.000
So my answer is yes, there's

15:11.000 --> 15:12.000
already some integrations.

15:14.000 --> 15:15.000
All right.

15:16.000 --> 15:17.000
Further questions?

15:18.000 --> 15:19.000
So here's somebody.

15:20.000 --> 15:21.000
Yeah, I have a question.

15:22.000 --> 15:23.000
You were talking about these

15:24.000 --> 15:25.000
examples from the health system

15:26.000 --> 15:27.000
and from the banking.

15:28.000 --> 15:29.000
And I'm not sure if I understand

15:30.000 --> 15:31.000
it correctly.

15:32.000 --> 15:33.000
It looked to me like this is very

15:33.000 --> 15:35.480
email as sort of an API in a certain way, right?

15:35.480 --> 15:38.480
For very specific procedures and processes.

15:41.440 --> 15:45.160
And if that's somehow right, you might fix me anyway.

15:45.160 --> 15:49.040
Do you also do special processing of these emails?

15:49.040 --> 15:51.720
I mean, is there any special mind parsing involved

15:51.720 --> 15:54.920
or maybe you can say a few words?

15:54.920 --> 15:59.160
So first your understanding is correct.

15:59.160 --> 16:01.440
Apache James is very modular

16:01.440 --> 16:05.120
and of course it works as a regular email server,

16:05.120 --> 16:09.880
but you can use it for all various corner cases

16:09.880 --> 16:13.600
that could be hard to handle with other technologies.

16:13.600 --> 16:16.760
Regarding mind parsing, I'm also the maintainer

16:16.760 --> 16:21.000
of the Apache MIME 4G parsing library

16:21.000 --> 16:23.960
that of course you can do some pretty complicated

16:23.960 --> 16:27.720
mind parsing within Apache James.

16:27.720 --> 16:29.760
Does it play a role in these use cases,

16:29.760 --> 16:31.640
in this medical or banking one?

16:31.640 --> 16:32.480
Yes.

16:34.440 --> 16:37.440
All right, let's see two more hands.

16:37.440 --> 16:39.040
Maybe first the other guy and you.

16:44.120 --> 16:46.640
Yes, related to the previous question.

16:48.440 --> 16:53.440
Are the emails handled by the healthcare encrypted or?

16:55.520 --> 16:58.480
So they are encrypted and it is transparent

16:59.120 --> 17:02.240
mostly transparent to the work that we are doing

17:02.240 --> 17:04.560
with Apache James for them.

17:04.560 --> 17:08.160
Okay, so is this like transport encrypted

17:08.160 --> 17:10.840
or pay-due encrypted?

17:10.840 --> 17:15.360
Depends, but there's a lot of things going on with S-MIME.

17:15.360 --> 17:16.880
Oh, okay, thanks.

17:23.760 --> 17:26.720
Have you seen any maillets be created

17:26.720 --> 17:31.160
in programming languages like Scala, Groovy, Closure,

17:31.160 --> 17:32.840
those ones based on Java?

17:32.840 --> 17:37.840
So yes, yes, we have a couple of example of Scala mailets.

17:38.320 --> 17:42.760
We use Scala at some parts within Apache James.

17:42.760 --> 17:45.000
For example, the J-Map stack is completely

17:45.000 --> 17:47.160
written in Scala, so yes.

17:49.120 --> 17:50.880
All right, we would still have time

17:50.880 --> 17:53.280
for a quick question if there is any.

17:53.280 --> 17:54.120
One here.

17:54.120 --> 17:56.120
Oh, sorry I didn't.

17:56.560 --> 17:57.400
Ah, sorry.

17:57.400 --> 17:58.240
Yes, okay.

18:00.000 --> 18:02.200
Misunderstanding of mine.

18:02.200 --> 18:04.440
You mentioned POP3, it's very nice,

18:04.440 --> 18:07.200
but I suppose you have IMAP as well.

18:07.200 --> 18:11.200
Is it ready for standard IMAP usage or do I have to?

18:13.320 --> 18:15.120
Sorry, it's a misunderstanding.

18:15.120 --> 18:17.440
POP3 is a horrible protocol,

18:17.440 --> 18:20.600
but it's that one given use case of needing

18:21.600 --> 18:26.240
highly available protocol that can be multi-data centered.

18:26.240 --> 18:28.360
It's so simple that it fits the bills.

18:28.360 --> 18:30.080
Okay, and IMAP is a separate?

18:30.080 --> 18:34.480
We support IMAP, the big range of IMAP extensions.

18:34.480 --> 18:37.000
IMAP is fully supported and we also implement

18:37.000 --> 18:40.480
J-Map as a protocol, so very wide range

18:40.480 --> 18:42.000
of protocols implemented.

18:42.000 --> 18:42.840
Okay, fine.

18:44.080 --> 18:47.520
Thank you, and thank you again, also Benoit.

18:47.520 --> 18:49.520
I hope I didn't see anything.

18:50.520 --> 18:51.520
Thank you.

18:51.520 --> 18:52.360
Thank you.

18:52.360 --> 18:53.200
Thank you.

18:53.200 --> 18:54.040
Thank you.

18:54.040 --> 18:57.200
And yeah, we have one more talk into service session,

18:57.200 --> 18:59.360
which will be Mikkel about MOX.

