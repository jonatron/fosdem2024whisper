WEBVTT

00:00.000 --> 00:14.000
Okay, thank you everyone for coming. I'm going to read because it's easier. So this is Nojan.

00:14.000 --> 00:21.000
Yes. And his talk is liquid prompt. Yes, we can drastically rethink the design of the shell prompt because

00:21.000 --> 00:36.000
command lines are interfaces too. Isn't it? Yeah. People forget that. So take it away. Thank you.

00:36.000 --> 00:41.000
Thank you. So this is challenging of course to come after this very interesting presentation by

00:41.000 --> 00:49.000
interesting people, interesting and new interfaces while I'm here talking about this old piece of

00:49.000 --> 01:02.000
software that's kind of specific if not the niche, the prompt. Right. So who here is using the terminal

01:02.000 --> 01:11.000
or know what is a prompt? Okay. Okay. Okay. Okay. So I was seeing myself working on a niche

01:11.000 --> 01:20.000
problem but maybe it's less the case. So of course I did introduction about what was shell prompt because I

01:20.000 --> 01:29.000
thought that it was interesting but then maybe it would go fast on that since most of you should know what it is.

01:29.000 --> 01:37.000
What's interesting is that the default prompt looks like that. That's a bash prompt in many distribution.

01:37.000 --> 01:47.000
And its purpose of these default systems are to indicate where, when there are problems and follow the state of the

01:47.000 --> 01:59.000
work. Right. So that's what we would want a prompt to do. I started working on that because I have many students

02:00.000 --> 02:08.000
every year with whom I work and they would show me that when I said, okay, let's work. In my line of work, we are using a

02:08.000 --> 02:17.000
lot of command lines and we're working on HPC cluster so that SSH is the only entry point on that in many

02:17.000 --> 02:27.000
case and that's what my students are showing me. And honestly, the trick is do you know where the prompt is, for

02:27.000 --> 02:37.000
instance, in such a case. That's the default these SSH prompt on my system. I just don't know where to look at.

02:37.000 --> 02:48.000
So of course, people had the same problem for years now and there's a couple of existing prompts that you can install on

02:48.000 --> 03:00.000
your system and just start using right away. These are the seven most known. And I happen to be the author of this one,

03:00.000 --> 03:07.000
Liquid Prompt, which is historically the first one actually, but not the one that got the most successful at the end.

03:08.000 --> 03:20.000
But I did a study recently because with the guy who was working on Liquid Prompt, we were wondering should we continue working on

03:20.000 --> 03:29.000
that since there is this very well-known software. So we did an extensive study on the feature set and the design of all those

03:29.000 --> 03:39.000
prompt systems. And I wrote an article that I will not explain in detail here because it's talking a lot of features and going into much details.

03:39.000 --> 03:48.000
I will just show you those two tables. The first one is about the feature sets of those systems. And what I want to advertise, of course,

03:48.000 --> 03:59.000
is that Liquid Prompt has, if not the best, the largest feature set, at least the one that are the most interesting, which I call the essentials,

03:59.000 --> 04:08.000
the one that are tied up to the shell. Because many prompt systems are actually interested in listing as much environment as possible,

04:08.000 --> 04:14.000
which is like the versions of tools, basically, like all the compilers. They would show you the version when they're...

04:14.000 --> 04:26.000
But Liquid Prompt shows much more information tied up to how you use the shell, actually. So if you want to know more, you can go on the article.

04:28.000 --> 04:35.000
As today, I want to talk about design. In the same article, I'm also talking about design.

04:36.000 --> 04:45.000
So there's a couple of ideas we wanted to follow while designing Liquid Prompt. And we paid a lot of attention on that.

04:45.000 --> 04:57.000
And they are summarized with those words. A good prompt should be what we call focus. I tried to use single words, so of course they are not completely the right choice,

04:57.000 --> 05:05.000
but meaning that the prompt should target states that are actually useful to the user during a work session.

05:05.000 --> 05:15.000
And it's not actually useful in most of, at least, my work session to know all the versions of my tools, for instance. Not always.

05:15.000 --> 05:26.000
It should be seamless, which in a prompt basically means it should be fast and not showing too much information.

05:26.000 --> 05:40.000
It should target the states of your system that actually change. You maybe are not interested in a state that you know from the beginning of your session to the end of the session that's the same.

05:41.000 --> 05:54.000
It should embrace the fact that some states change less often than others. So there's states that you are willing to know more often, to look at more often.

05:54.000 --> 06:00.000
And of course, those important information, they should be really visible.

06:00.000 --> 06:06.000
And I'm not defining configuration because you know what that means.

06:07.000 --> 06:15.000
So we did this extensive study again on the design across all those other prompt systems.

06:15.000 --> 06:19.000
And here again, of course, I'm advertising my work.

06:19.000 --> 06:24.000
But really, I want to emphasize that that's not a post hoc justification, right?

06:24.000 --> 06:29.000
That we really wondered whether we should continue working on a liquid prompt.

06:29.000 --> 06:32.000
And that's what came out at the end.

06:32.000 --> 06:39.000
Okay, but you don't have to believe me, but you can read still the article to get more information.

06:39.000 --> 06:47.000
Okay, so those other prompt systems that I'm making fun of with these tables, they look like that.

06:47.000 --> 06:55.000
So this is a very classical. Those are screenshots of the Omaiposh system, which is another prompt system, which is quite good.

06:56.000 --> 06:59.000
Technically, it's a good piece of software.

06:59.000 --> 07:04.000
And each line, basically, or couple of lines is a different theme.

07:04.000 --> 07:09.000
This one is the prompt with the more teams.

07:13.000 --> 07:21.000
So basically, the approach to design of all those other prompt systems are like a sequence of colored segments,

07:21.000 --> 07:25.000
which I call that segment rainbow.

07:27.000 --> 07:32.000
And of course, for a prompt, there can be a lot of information to display.

07:32.000 --> 07:38.000
If you have the feature set of liquid prompt, for instance, there's a hell of a lot of stuff you can show on the screen.

07:38.000 --> 07:46.000
I did make this theme for liquid prompt not for everyday use, but of course, if you fancy it, you can use it.

07:46.000 --> 07:50.000
That shows all the information we can actually show.

07:50.000 --> 07:56.000
So of course, there's no question. You should not display that at all time.

08:00.000 --> 08:04.000
I will not go into detail about everything.

08:04.000 --> 08:12.000
So of course, we can do better than those rainbow of segments that just change every time you do something,

08:12.000 --> 08:16.000
and it's difficult to spot where the information is.

08:16.000 --> 08:21.000
The first idea is that we can show the important information first.

08:21.000 --> 08:25.000
We can help visual passing.

08:25.000 --> 08:28.000
We can avoid this list of segments, of course.

08:28.000 --> 08:33.000
We can be colorblind friendly, of course, having a rainbow or stuff that's difficult.

08:33.000 --> 08:37.000
And the guy with whom I'm working is actually colorblind friendly.

08:37.000 --> 08:39.000
Is he friendly? He's colorblind.

08:39.000 --> 08:44.000
Of course, he's friendly to other colorblind people.

08:44.000 --> 08:46.000
I'm sorry.

08:46.000 --> 08:53.000
And also, we want to avoid text overload, which happened very often also with those systems.

08:53.000 --> 09:02.000
And another thing that I will be talking today is we can have logical sequences of information,

09:02.000 --> 09:07.000
things that are linked together while you're reading them.

09:07.000 --> 09:11.000
And I will also talk at the end on semantic threshold.

09:11.000 --> 09:14.000
But it's difficult to introduce. I will just show you.

09:14.000 --> 09:23.000
So to do that, LiquidPront comes with a default prompt, which is kind of the well-designed prompt you would think,

09:23.000 --> 09:29.000
you know, text mode with some colors, but close to the classical approach.

09:29.000 --> 09:35.000
But we did the dot matrix 10 theme, which is a theme for LiquidPront, that completely changes that.

09:35.000 --> 09:40.000
It doesn't look at all like a classical prompt.

09:40.000 --> 09:43.000
It looks like that, basically.

09:43.000 --> 09:50.000
I'm going to show you a little bit of features and explain that.

09:50.000 --> 09:58.000
The first thing is that it takes three lines, which may seem a lot,

09:58.000 --> 10:06.000
but we thought that nowadays we are using these terminals in high resolution screen anyway.

10:06.000 --> 10:08.000
So we have some room.

10:08.000 --> 10:15.000
So the first thing is that we prioritize the information based on the location on the screen.

10:15.000 --> 10:17.000
And we try to make it stable.

10:17.000 --> 10:19.000
It doesn't change of places.

10:19.000 --> 10:24.000
If you have this sequence of segments, every time an information or a state changes,

10:24.000 --> 10:26.000
everything is moving around.

10:26.000 --> 10:30.000
Here it's not the case. It's more stable, a lot more stable.

10:30.000 --> 10:39.000
So we have just to say a few, the type of connection, who is connected, the name of the machine, where you are at.

10:39.000 --> 10:46.000
Here you have the right align section that shows some sensors, the temperature, the CPU load, whatever.

10:46.000 --> 10:49.000
We have this line that separates sections.

10:49.000 --> 10:54.000
I'm going to show why we have that and shows everything that's stable.

10:54.000 --> 11:01.000
But you would want to display, like I don't know if you're working in containers or you want to know these versions of this and that.

11:01.000 --> 11:03.000
You can show them here.

11:03.000 --> 11:13.000
And here we have the big version system repository management or display with the left side for the remote server,

11:13.000 --> 11:18.000
the remote repository and the right side for the local repository.

11:18.000 --> 11:20.000
I'm also going to explain that.

11:20.000 --> 11:26.000
And here, very near to where you type the important stuff like errors.

11:26.000 --> 11:31.000
Here you have an error code that's displayed.

11:31.000 --> 11:40.000
So while this, for instance, these section lines, it's because if I display the same screen that I show you at the very beginning of the presentation,

11:40.000 --> 11:43.000
but with dot matrix, you would see that.

11:43.000 --> 11:46.000
It's a lot easier to parse, of course.

11:46.000 --> 11:54.000
And for instance, in my line of work, we're working with a big build step that takes a lot of screens on the terminal.

11:54.000 --> 12:00.000
And I'm very often scrolling up and down to find back where does that start, where does that end.

12:00.000 --> 12:10.000
So of course, having these sections easily easy to spot, it's a good help.

12:10.000 --> 12:20.000
As for the colors, you've noticed surely right now that we decided to go for these black and white segments,

12:20.000 --> 12:27.000
which of course is easy or it's color blank friendly, right, for most of the case.

12:27.000 --> 12:39.000
And we use only two colors, one for what we call notes, the blue one in the default system and yellow for the warnings or the errors.

12:39.000 --> 12:45.000
And with those two colors, it's kind of enough to display what we want as an information.

12:45.000 --> 12:55.000
And of course, you can switch depending on your color blindness, you can switch the pair of colors that you would need.

12:55.000 --> 13:07.000
We're still working on the 256 color space, so not RGB, for compatibility reasons,

13:07.000 --> 13:15.000
because there's not that much terminal emulator that supports the RGB color space, surprisingly.

13:15.000 --> 13:27.000
But then we stick with that, which in our case, since we are only using four colors, black, white and two warning colors, is more than enough.

13:27.000 --> 13:36.000
We did develop a tool that helps you select couples of colors based on the contrast.

13:36.000 --> 13:43.000
So you would just, that's kind of a side note, but you can say, I want to have a good contrast with this color,

13:43.000 --> 13:53.000
and it will find in the NC, there is very niche color space, what other color you can use in combination.

13:53.000 --> 14:02.000
Okay, so now I will highlight a couple of design features of dot matrix.

14:02.000 --> 14:07.000
I will not go over all the details, but just to name a few.

14:07.000 --> 14:15.000
The first one that I liked is that to avoid having too much text and too much icons popping up,

14:15.000 --> 14:25.000
we used negative space, which is actually actual space in the prompt that appears when there is some state that changed.

14:25.000 --> 14:35.000
So here, for instance, on the first one, there's an SSH connection, and you can see that the user is actually disconnected from the left-most side.

14:35.000 --> 14:42.000
Right, so you're not connected on your laptop, there is a space.

14:42.000 --> 14:50.000
The same goes for the root user here, which also appears in the warning color.

14:50.000 --> 15:05.000
Here, you have the user which is disconnected from the path, meaning that you don't have the right, right, right, I'm sorry, my accent is different.

15:05.000 --> 15:08.000
You cannot write in this directory.

15:13.000 --> 15:28.000
Another interesting idea, in my humble opinion, is the use of these logical sequences that you can see on the VCS section, so the last line.

15:28.000 --> 15:37.000
It reads from right to left, so you are at the right, that's where you type your comments, right, you are doing git comments.

15:37.000 --> 15:47.000
And what you can see, how do you interpret the first line, for instance, you have a commit, you have changes ongoing, that's the blue section with the numbers.

15:47.000 --> 15:53.000
That's the number of lines that have been changed against the head state.

15:53.000 --> 16:01.000
And there's an arrow on the left, meaning you can surely do a commit with that on the master branch.

16:01.000 --> 16:04.000
So that's what the second here is doing.

16:04.000 --> 16:10.000
Here, I picked up a part of the diff and I did a commit and it appears here.

16:10.000 --> 16:16.000
What this section means is that the remote repository has seven commits on its own.

16:16.000 --> 16:30.000
So you're going for a conflict here, which is you should have pulled before, you should have, you know you should pull before starting a new branch, but if you forgot, then LiquidPump is warning you.

16:30.000 --> 16:42.000
There's probably a problem going ahead, but you can still push another commit and so on and so forth.

16:42.000 --> 16:57.000
Yeah, okay. I cut the slide where I solved the commit issue because it was quite long, but you get the idea, for instance, that you have these commit paintings and if you add another commit, it would be there.

16:57.000 --> 17:05.000
And then when you push, it would just disappear. You have nothing left to do, so there's no more warning to show you.

17:05.000 --> 17:19.000
Here, what I'm showing is that we use these two colors, these pairs of colors, to give you a semantic hint on the urgency of what you're doing.

17:19.000 --> 17:33.000
So since you have something going on, some work, some diff in your repository, if it becomes too long and you can, of course, tune the threshold as you want, it becomes yellow in the warning color.

17:33.000 --> 17:43.000
And the same goes for the commit. Here, I've put the threshold at five. I know that if I have five commits, probably I want to push or pull or do something like that.

17:43.000 --> 17:48.000
Surely your commit limit is higher than mine.

17:48.000 --> 17:53.000
And that's it.

17:53.000 --> 18:03.000
So I did not talk about everything. That's the summary of all the features that we can display with dot matrix.

18:03.000 --> 18:14.000
So there's many, many, many things. I have shown about the space system around the kind of connection that we have.

18:14.000 --> 18:25.000
You have a space for a team of screen connection, for instance, the read only. We saw that and so on and so forth.

18:25.000 --> 18:35.000
And there's the diverse warning. For instance, if you're connected with telnet, there's this big yellow arrow that shows.

18:35.000 --> 18:51.000
Anyway, the same goes for shrewd and so on and so forth. You can also summarize if you don't want to see the numbers of lines or commits, you can just get one icon and be done with it.

18:51.000 --> 19:04.000
If you want to, again, in this article, we detailed a couple of thoughts on the design that you can go and read.

19:04.000 --> 19:06.000
And thank you.

19:06.000 --> 19:13.000
10 minutes for questions.

19:13.000 --> 19:14.000
Perfect.

19:14.000 --> 19:19.000
10 minutes for questions. So, if you make sure you repeat the question.

19:19.000 --> 19:21.000
Yeah, I noticed that.

19:21.000 --> 19:26.000
Thank you. Very nice to hear someone in line.

19:26.000 --> 19:37.000
I was wondering if you ever did, like with your last example, for when you're telling someone it has to do something that might be expressed.

19:37.000 --> 19:42.000
So do you do any user testing or at least student testing with your phone?

19:42.000 --> 19:50.000
Yeah, so that's a good question. That's actually part of the reason why I decided to do, oh, yes, sorry.

19:50.000 --> 19:55.000
Every time I saw the, why do they do it? It's obvious.

19:55.000 --> 20:10.000
So the question is, did we do user testing to test the prompt and in particular the level of stress while we are telling them to do something?

20:10.000 --> 20:14.000
So the answer is no.

20:14.000 --> 20:23.000
Because I'm not a designer. I'm an obvious designer. I just happened to discover that quite recently.

20:23.000 --> 20:37.000
And I liked it. So I read a lot and all, but I'm not a designer and I decided to come and force them in part because I thought, oh, maybe in this room there would be some designer that would have some idea and that would be able to answer my question.

20:37.000 --> 20:44.000
I have a couple of questions. What would be best? Where to display the error stuff like that?

20:44.000 --> 20:50.000
So yeah, no, no, but that would be, also because our user base is nothing compared to the previous talker, right?

20:50.000 --> 21:01.000
We are not talking millions or we are talking a couple of thousand at most and most of them don't answer, communicate or...

21:01.000 --> 21:08.000
So yeah, I have three users with whom I'm discussing basically. Myself comprised.

21:08.000 --> 21:32.000
Yeah, so to continue on the design, it's really elegant with the negative space and everything, but how do you, if there are at least some good documentation to say what each icon or each sign represents

21:32.000 --> 21:41.000
and how do you convey because sometimes I might forget what's the difference between one big arrow and two small arrows?

21:41.000 --> 21:49.000
Yeah, yeah, yeah. Well again, the answer is no. There's no good... Yeah, sorry, sorry.

21:50.000 --> 22:07.000
So the question was, is there a good documentation to remind the users what the features are and most precisely what does mean the negative space which is not completely obvious in itself?

22:07.000 --> 22:19.000
So yeah, no, there's this kind of summary and there's a readme that lists all the features and all. I would not count that as a very good documentation.

22:19.000 --> 22:21.000
Yeah.

23:19.000 --> 23:48.000
So again, that's a tricky question. I did not manage to solve that myself except by playing with less. We did a single line version of the prompt though, or either two lines,

23:48.000 --> 24:02.000
this one, sorry, two lines, in single line that's really not possible, which is a little bit more dense, but yeah, no, I did not find a good way to solve that either.

