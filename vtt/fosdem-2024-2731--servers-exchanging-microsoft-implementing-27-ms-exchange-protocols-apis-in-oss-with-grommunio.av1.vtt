WEBVTT

00:00.000 --> 00:07.000
which is, as you introduced, a complete groupware suit.

00:10.720 --> 00:16.880
And I will start by pointing out the corner piece of all of this, which is map-ed map,

00:16.880 --> 00:22.760
the messaging application programming interface, something that has started around in the early

00:22.760 --> 00:29.760
90s, let's say, by Microsoft. And it can actually refer to a multitude of things, including

00:30.880 --> 00:36.640
the data models. You have inboxes, folders, messages, attachments, and a relation between

00:36.640 --> 00:43.640
one another. And then you also have the programming interface. So, for example, this is what Outlook

00:43.840 --> 00:50.840
uses a C API that is in some DLL. But as we may see in the specifications, map is also

00:51.040 --> 00:58.040
used to refer to network protocols, which makes this a bit confusing. Because a program

01:00.800 --> 01:07.800
like Outlook could use the programming interface without ever talking map on the network. Or

01:08.440 --> 01:14.440
we could have the inverse where there is no map programming interface, but there's map

01:14.440 --> 01:21.440
token at the network. And so the leading map-ed product is, well, there's no question about

01:23.600 --> 01:30.600
it, is just Microsoft, so exchange and exchange online, which is the, the first is the on-premise

01:32.680 --> 01:37.800
server, which you can install in your own hardware. And exchange online is just this magic cloud

01:37.800 --> 01:44.800
service that you have no more site into what happens. There's an extra interface provided

01:45.320 --> 01:52.320
by the online services, which is Graph API, another rehash on how to access your own mailbox.

01:53.840 --> 01:59.840
And maybe that will, in the future, be added to the on-premise version as well. We don't

01:59.840 --> 02:06.840
know. And the coverage of the on-premise version is, well, it's not a problem. But it's a problem

02:07.800 --> 02:14.720
of exchange is quite broad. There's over 100 documents, over 8,000 pages of documentation

02:14.720 --> 02:21.720
that they've written in the past 10 plus years on the matter. And of course, because we have

02:22.200 --> 02:29.200
our Unix mailbox formats and internet mail formats that were defined by, well, let's say

02:30.200 --> 02:34.360
the internet community, the text-based formats that we all know and love. You also have to

02:34.400 --> 02:41.400
support them in such a mappy world, because that's what everybody else talks in the transport.

02:42.640 --> 02:48.360
And so coming to Grimunio itself, for the audience at Foster, it's probably easiest to say Grimunio

02:48.360 --> 02:55.160
is a product and it's also something of a Linux distribution with various components.

02:55.160 --> 03:01.040
We have our core central server, so what we call the information store, which holds the

03:01.080 --> 03:06.120
mail and provides a basic API, like give me this message, give me that message. And then

03:06.120 --> 03:13.120
we have added components such as the postfix that's well known for just handling most of

03:13.320 --> 03:20.320
the SMTP delivery part. For file sharing, for example, we have also reused more software

03:20.520 --> 03:27.520
because why invent your own? If you can make something else work rather well, and we can

03:27.640 --> 03:34.640
use either own cloud or next cloud, they are pretty much the same still.

03:39.000 --> 03:46.000
For chat, for chat we've used Mattermost and all of the integrated with, for example,

03:47.000 --> 03:54.000
the user database that we utilize. It may be hard to see on the screen right now, so feel

03:56.560 --> 04:03.560
free to click on the PDFs in the schedule. So our information server is called Gromux.

04:05.880 --> 04:10.320
It wasn't really meant as an acronym, but if you find something that fits, feel free

04:10.400 --> 04:17.400
to just make whatever you want of it. And it implements, so the first slide alluded to

04:17.800 --> 04:25.040
27 protocols, it's a bit more, but it's still not all of them, all of the 100 documents.

04:25.040 --> 04:30.440
And we just used and implemented the bits of the specifications that we needed to get

04:30.440 --> 04:37.440
email clients running in the expected functionality, which is mail, calendar, contacts, meetings,

04:38.160 --> 04:45.160
which is a part of calendaring. And so at the end of the list, you can see, for example,

04:48.160 --> 04:55.160
PST and CFP, so we can import from most, so like 80% of the Microsoft's very own formats.

04:55.360 --> 05:00.960
I'm still working on something more, but I need to see where that leads me, because

05:01.040 --> 05:08.040
that's not documented. So when we do reimplementation of the protocols, what you more or less do

05:12.320 --> 05:16.960
is you set up an SSL interceptor on either the local machine or, for example, a Linux

05:16.960 --> 05:23.960
machine, use the same SSL certificate or redirect. The tools for this are Fiddler, which is something

05:24.440 --> 05:31.440
of a wireshark in its own right, but more web-oriented. And then you just compare to

05:33.240 --> 05:39.240
the specs if it matches them or not. And you've write your usual marshalling code, which is

05:39.240 --> 05:45.480
serialization and deserialization to network protocols, because the Microsoft ecosystem

05:45.480 --> 05:52.480
is very binary format heavy. So, yeah. Using MFCMAP and OutlookP1 can trigger the data

05:53.960 --> 05:59.240
and the various actions on the mailbox and then look at what the requests look like. Again,

05:59.240 --> 06:06.240
this screenshot doesn't do justice on this laptop, so please excuse that. So you see

06:07.200 --> 06:14.200
the individual requests and can analyze them. So people have already written large amounts

06:14.400 --> 06:21.400
of dissectors in the past, and one can use that. Furthermore, once you get the decoding

06:21.400 --> 06:28.400
of the network bytes right, one can look at the logical structure at which point. It's

06:29.680 --> 06:36.680
beneficial to just turn on request logging at whatever level there might be one issue

06:36.760 --> 06:43.760
remaining. For example, when you just return the wrong data or unlocks are broken once

06:44.160 --> 06:51.160
again. That's then where you can also step in with the buggers, for example.

06:51.800 --> 06:57.800
We also implemented EWS. It's the exchange web services. It's more of an XML kind of

06:57.800 --> 07:04.800
access protocol once again for the mailbox. Again, we start Outlook or other mail clients.

07:06.680 --> 07:13.680
Look what the requests are, trying to make sense of it using specifications. And then

07:14.480 --> 07:20.160
possibly replay those requests to an exchange server, because when you start out, you let

07:20.160 --> 07:27.160
the Outlook connect to an exchange and see what is it going over the wire, and then it's

07:27.680 --> 07:34.680
re-implemented in our own. So that's a bit of, it's a laborious task, but eventually

07:35.560 --> 07:42.560
that too was finished. The tool we used here is called Postman. It's something like a

07:42.680 --> 07:49.680
graphical lip curl if you want. And so we now have a little bit of a problem.

07:50.520 --> 07:56.520
With the help of EWS, connectivity for Mac clients, for example. So this is Outlook for

07:56.520 --> 08:03.520
Mac with my sample inbox here, just one attachment. And it also works with Mac mail, it's called,

08:05.840 --> 08:12.840
which is Apple's own implementation of a group web client, I guess.

08:13.840 --> 08:20.840
And so you have now access to exchange-ish calendars, but using of course our implementation

08:22.440 --> 08:24.040
instead of Microsoft's.

08:24.040 --> 08:29.240
A very small technical interrupt, sorry for that. I got some feedback from the back of

08:29.240 --> 08:34.160
the room that it's quite hard to understand speakers in general. Is that right? Can probably

08:34.160 --> 08:38.840
raise your hand if it's a little bit hard to listen. Okay, that's nice. I was with a

08:38.840 --> 08:43.520
technical team at the sets that cannot amplify the speakers in that room because the acoustics

08:43.520 --> 08:47.860
in these rooms generally is a problem. So what can be done is that we keep the doors

08:47.860 --> 08:53.480
closed first of all, that people keep a little bit silent because it will reduce surrounding

08:53.480 --> 08:58.040
noise at all and probably also as a speaker, you can try to speak up a little bit because

08:58.040 --> 08:59.040
that would work.

08:59.040 --> 09:00.040
Bring the mic.

09:00.040 --> 09:02.040
If you might. Maybe just use one.

09:02.040 --> 09:03.040
Turn it off.

09:03.040 --> 09:06.040
Yes. Thank you.

09:06.240 --> 09:08.240
So this works.

09:08.240 --> 09:09.440
Seems to work better.

09:09.440 --> 09:16.440
So in the course of doing that, I have and my team have found a number.

09:17.040 --> 09:20.720
Like so. Directional microphones.

09:20.720 --> 09:27.720
So in the course of all that work, we have identified multiple problems and specifications.

09:27.720 --> 09:34.160
Things being underspecified or omitted outright. And so we just send a bunch of pull requests

09:34.160 --> 09:40.280
to Microsoft in that regard and they've been accepted so far.

09:40.280 --> 09:47.280
And so Dromot is the information store that we have. It uses SQLite. So it's also quite

09:47.680 --> 09:54.680
snappy. I would have a demonstration, but this is a presenter laptop, so I didn't really

09:55.240 --> 10:02.240
depend on it. So we can do all these various protocols, including the traditional RPC.

10:03.120 --> 10:10.120
So Samba was a great help in that. On top of that is MAPI HTTP and it's EMS MDB.

10:12.720 --> 10:17.240
These are all the binary formats that the classic outlook speak that you can run on

10:17.240 --> 10:24.240
Windows. And as said, the Mac ecosystem uses EWS and your mobile phone. This is then on

10:24.640 --> 10:31.040
the right hand side. It uses actually EAS, the active sync. So yet another protocol for

10:31.040 --> 10:37.040
mailboxes. I think I'll be here implementing even more protocols for the next 10 years.

10:37.040 --> 10:44.040
As I said, as I alluded to earlier, Graph API is the next hot thing on Microsoft. Yeah,

10:44.520 --> 10:51.520
let's see where that goes. Yeah, some components are implemented in PHP 8. If you want, you

10:54.240 --> 11:00.600
can also run them on 7, but who would want that? This comes from that there was existing

11:00.600 --> 11:07.600
software that could be reused once again. And so that's our main binding if you don't want to interact with C++.

11:14.560 --> 11:21.060
What does the feature hold? We would like to work on better utilization of accessing one

11:21.060 --> 11:28.060
mailbox, like carrot mailboxes. You've never really seen any until you have a lot of

11:30.600 --> 11:37.600
one store where a thousand users at once try to access it. Better improved support for

11:39.480 --> 11:45.480
the internet formats would be very well done. We have some old internet mail pauses in there

11:45.480 --> 11:52.480
for the RFC 2822 stuff and so on. I've started working on that using more of LibVmime, also

11:53.240 --> 12:00.240
already properly realized by some other open source projects of the past. And of course,

12:03.080 --> 12:09.080
reporting more errors in the specifications as I move along and find some time to deal

12:09.080 --> 12:16.160
with the Microsoft paper. Because not all of the specifications are actually published

12:16.160 --> 12:20.920
on GitHub, so all you can really do is make a normal issue here. I'd like to have that

12:20.920 --> 12:27.920
in that paragraph edited and see where that goes. Thanks, that's my time. If you have

12:28.240 --> 12:31.240
any questions, now's the time.

12:31.240 --> 12:38.240
Maybe we'll change again. Thank you. Is there any questions? I see one here. Wait a second.

12:38.240 --> 12:45.240
The current Outlook clients. Which one? Yes, the new one in the web one and the one right

12:57.320 --> 13:02.160
before that was still the C implementations, the two for Windows. Which protocols do they

13:02.160 --> 13:05.840
use? They're unused right now.

13:05.840 --> 13:13.440
The Windows Outlook client as of today, so 2019, 2021, offers the classic binary protocols,

13:13.440 --> 13:20.440
EMS, MDB and NSP. It can run them over DCR obviously or MAP HTTP depending on which features

13:22.120 --> 13:29.120
the server advertises. So it can be proxied these days since 2013. And you can also configure

13:29.120 --> 13:36.120
the Windows Outlook to use ActiveSync instead if you so want. But that way you don't really

13:37.400 --> 13:44.400
have access to public folders or shared mailboxes right now.

13:45.400 --> 13:51.400
A question about these various protocols that Microsoft made, how old are they and do you

13:51.400 --> 13:56.400
think some of them are well designed or not?

13:56.400 --> 14:03.400
What's your feeling about this? I would like to say at first I said, oh, well, this is

14:06.320 --> 14:13.320
horrible, but then there's a bit of a storm, where you get into, oh, so that's what they

14:15.040 --> 14:22.040
must have for that time. Certainly, so the DCE stuff comes from OSF as some of you might

14:23.040 --> 14:30.040
know. So the people that invented X.400, the very terrible version of LDAP. So that's

14:30.560 --> 14:37.560
the worst I guess. Rest is kind of sensible at some point. There's a bit of legacy baggage

14:41.640 --> 14:48.640
and times when you think, but why? You got to do what you got to do. It's specified and

14:49.560 --> 14:54.720
if you want to make it work with the various clients, you just have to do it and then move

14:54.720 --> 14:59.280
on. And do you have client interoperability issue that different clients do it differently

14:59.280 --> 15:06.280
or are the clients somewhat consistent? So under Windows at least, everyone uses mappi32.dll,

15:08.120 --> 15:13.480
that's the C interface. That's, oh, how long has it been here? So mappi started, I believe,

15:13.480 --> 15:20.480
in 92 in its very first incantation and then they, at some point, it was what it was today

15:20.640 --> 15:27.640
about 96, I guess, outlook 97, maybe everyone remembers. That's where it, it still looks

15:28.800 --> 15:35.800
the same like back then. So that's the approximate age of it. As said, you have the C interface

15:35.840 --> 15:42.280
for programming or even visual basic interfaces. And then there's the network parts, how the

15:42.280 --> 15:46.520
network protocols are, I don't really know because Microsoft only started specifying them

15:46.520 --> 15:52.360
after the EU legislation, antitrust things and so on and so on. So you can see in the

15:52.360 --> 15:59.360
documentation, the documentation was an afterthought as always, which isn't all that wrong in practice.

15:59.840 --> 16:05.840
I mean, Perl is not really specified by its interpreter. Python is kind of specified by

16:05.880 --> 16:12.880
its C Python interpreter until someone said, we need to improve that. So all good. But specification

16:15.320 --> 16:22.320
is really like manual pages. You can't read it like a book. But if you try to find something

16:23.000 --> 16:29.240
out, you use the index or just search function for a keyword and then go to all those places

16:29.240 --> 16:35.120
where the keyword appears and then just read and then maybe magically you get a bright idea

16:35.160 --> 16:42.160
what it was that it's supposed to be. It seems to me like in any large business, the people

16:44.720 --> 16:50.320
go in and go out of jobs over the years and then, okay, so this paragraph has almost nothing

16:50.320 --> 16:55.320
to do with the next one, but it's correct what's in there.

16:55.320 --> 17:02.320
All right, we still have time for questions. Is there any? There's one.

17:05.440 --> 17:12.440
I see here on the table of the C++ 70 protocols, there's also IMAP and POP3. Are they actually

17:15.200 --> 17:22.200
re-implemented on the project or you're using another backend server to actually implement

17:22.520 --> 17:25.480
over them, exchange and so on?

17:25.480 --> 17:32.080
We have an IMAP POP3 gateway on top of the information stores because I would love to

17:32.080 --> 17:39.080
throw the one out that we've inherited over the years and use something like Dov and write

17:39.200 --> 17:46.200
a plugin for Dovcott, for example. Unfortunately, Dovcott is not documented at all.

17:50.880 --> 17:57.880
So right now I'd prefer, well, we have what we have, so that's that.

18:03.000 --> 18:07.000
All right, thank you very much for your talk again.

18:07.000 --> 18:08.000
Thanks.

