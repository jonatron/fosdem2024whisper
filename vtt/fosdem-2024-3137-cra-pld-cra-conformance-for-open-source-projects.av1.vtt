WEBVTT

00:00.000 --> 00:14.560
Our next speaker for today is Marta Rybczynska and I probably didn't manage to pronounce

00:14.560 --> 00:19.560
her last name so I will be asking her to do that again and show how I was almost right

00:19.560 --> 00:26.960
but not quite. Marta will be talking about CRA conformance and the thinking that Eclipse

00:26.960 --> 00:33.200
has been doing around this and she has a background for a number of years developing different

00:33.200 --> 00:38.960
solutions but I think she also closely followed the CRA. You may have seen her article on

00:38.960 --> 00:43.720
the Linux Weekly News months back which was a very good summary of where things were at

00:43.720 --> 00:54.160
at that time. So without further ado this is Marta and enjoy her talk.

00:54.160 --> 00:58.920
Thank you Marta and you pronounced my name quite correctly in fact. My name is Marta Rybczynska

00:58.920 --> 01:07.440
and I'd like to do a test implementation of a Siri in five minutes today. So let's go.

01:07.440 --> 01:14.480
The example open source ecosystem that is quite standard one with a physical product

01:14.480 --> 01:20.280
to make things easier. Starting from the end we have the final product that is sold to

01:20.280 --> 01:26.360
customers and we have the device manufacturer of that product and that device manufacturer

01:26.360 --> 01:33.360
is assembling multiple open source and preparatory elements adding their own software to the whole

01:33.360 --> 01:42.680
thing to build their product. This device manufacturer can of course have multiple product and they

01:42.680 --> 01:48.440
are not integrating one open source project they are integrating upstream project A and

01:48.440 --> 01:57.720
of course a hundred other open source projects that upstream project A develops a project

01:57.720 --> 02:07.080
under an open source license and they have dependencies. They have a dependency B that

02:07.080 --> 02:16.360
is another open source project working in a similar way. So okay here enter open source

02:16.440 --> 02:24.280
towards you have already probably seen the definition I highlighted the important parts for me.

02:26.280 --> 02:35.320
Legal person that has a purpose of objective to provide support of open source. Okay so what

02:35.320 --> 02:45.000
comes out of it was towards pop in in the whole thing. They pop up for the dependency B. They pop

02:45.560 --> 02:57.080
for the upstream project A. That's that's pretty expected and then a few remarks in there.

02:58.760 --> 03:06.120
Very likely stewards will be foundations especially if they have trademark to the project name. That

03:06.120 --> 03:15.080
is quite quite obvious situation but we also have situations that are little less obvious.

03:17.000 --> 03:26.360
When we can think between stewards or manufacturers or none of those for example if there are four

03:26.360 --> 03:35.720
profits that are supporting projects that are not critical to their income like open sourcing

03:35.720 --> 03:44.680
CI scripts, open sourcing, programming, tooling for their board. Things that are absolutely not

03:44.680 --> 03:52.520
critical that they are absolutely not monetizing. And we also have consulting companies not giving

03:52.520 --> 04:01.320
names. They are many consulting companies that are contributing to open source projects in a

04:01.320 --> 04:10.840
sustainable way for years. So how do they qualify? And when we add this

04:13.240 --> 04:19.160
can we have multiple stewards for a single project? If we just take that definition of a steward

04:20.360 --> 04:27.000
why not? There may be a foundation and there may be a company that actually donated the code to the

04:27.000 --> 04:34.440
foundation that's still contributing. If it's if they are not monetizing why not?

04:37.480 --> 04:46.760
And then interesting case stewards. There's a definition by stewards also have some obligations

04:47.160 --> 04:57.160
and what happens if the stewards cannot force the project or they want to force the project but

04:57.160 --> 05:05.480
the main developer say I'm not going to implement that. Pay someone to do that work. What do you do?

05:06.440 --> 05:18.600
Question mark. Okay and then we finish adding the CRA elements to our scenario. We add due diligence

05:18.600 --> 05:25.960
or that the device manufacturer should do about the open source projects they are implementing. We

05:25.960 --> 05:34.280
have the conformity assessment that they should do while releasing their product and we have the

05:34.360 --> 05:45.400
final user documentation that they are expected to release. And well mostly for the con we have

05:45.400 --> 05:52.600
some challenges for the conformity assessment. Changes and opportunities for the open source world.

05:52.920 --> 06:00.520
A final product includes dozens of hundreds of open source projects usually.

06:02.840 --> 06:15.080
So manufacturers quite often use the same project in many different places and many manufacturers

06:15.080 --> 06:24.280
use the same open source project in different places. So what makes sense and what is logical

06:24.280 --> 06:31.560
to do the conformance work, to do the paperwork all together in an open source way and release it

06:31.560 --> 06:39.000
open source license? Oh there's an alternative. The big ones will be able to pay the whole work on

06:39.000 --> 06:46.440
their own. The small ones I'm not absolutely sure if they include a hundred projects.

06:47.640 --> 06:53.960
So that will be it for me. Thank you.

