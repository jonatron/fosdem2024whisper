WEBVTT

00:00.000 --> 00:09.040
So, hello, good afternoon.

00:09.040 --> 00:13.400
Then we are going to start the next talk with Tina Mueller.

00:13.400 --> 00:16.560
And the topic is, do you know Yamu?

00:16.560 --> 00:18.200
Quite interesting topic.

00:18.200 --> 00:20.720
So Tina, this stage is yours.

00:20.720 --> 00:22.720
Thank you.

00:22.720 --> 00:23.960
Hello.

00:23.960 --> 00:30.440
Can everyone hear me as well in the back?

00:30.440 --> 00:32.440
OK.

00:32.440 --> 00:36.000
So who of you knows Yamu?

00:36.000 --> 00:38.120
OK, are you sure you know Yamu?

00:41.960 --> 00:46.040
So something about me, I'm doing Pearl since 1998.

00:46.040 --> 00:51.160
And I'm also intensively doing Yamu since 2017.

00:51.160 --> 00:54.240
So I guess I just have a weakness for misunderstood languages.

00:57.520 --> 01:01.000
Yes, the topics, some introduction, some history,

01:01.000 --> 01:06.120
Yamu usage, versions, new libraries,

01:06.120 --> 01:09.680
and Yamu test infrastructure.

01:09.680 --> 01:14.400
Oh, I got one extra minute because the timer wasn't started.

01:14.400 --> 01:18.160
So Yamu, it all started in 2001.

01:18.240 --> 01:22.560
I think 2004 was the first specification.

01:22.560 --> 01:27.080
It was invented by Orin Benkiki, Clark Evans, and Ingy.net.

01:27.080 --> 01:29.280
And Ingy says hi.

01:29.280 --> 01:33.600
And he's also the one who's still actively working on Yamu

01:33.600 --> 01:35.960
and relate things.

01:35.960 --> 01:39.080
And here's actually a mini talk that he sent me.

01:39.080 --> 01:41.480
He wants you to know about.

01:41.480 --> 01:43.280
So there's Yamu script.

01:43.280 --> 01:46.000
Many people try to do programming things in Yamu,

01:46.000 --> 01:48.040
but Yamu wasn't designed for that.

01:48.080 --> 01:52.200
Ingy has been working on a new Yamu-based programming language.

01:52.200 --> 01:55.160
It's complete and general purpose, best when embedded

01:55.160 --> 01:57.600
in plain old Yamu files.

01:57.600 --> 02:00.600
Excellent interpolation features, merge, filter,

02:00.600 --> 02:02.920
concatenate, any functions you can imagine,

02:02.920 --> 02:06.480
define your own functions, solves most programming things

02:06.480 --> 02:10.920
that people want to do with Yamu.

02:10.920 --> 02:17.120
So here you have a Yamu file, people and places.

02:17.120 --> 02:19.560
And this is the Yamu script.

02:19.560 --> 02:21.880
You can see the header.

02:21.880 --> 02:25.440
And you load the Yamu file.

02:25.440 --> 02:28.720
Then you get people from it and the list of places.

02:28.720 --> 02:33.840
Here you define a function with interpolation.

02:33.840 --> 02:38.520
And here you go over the arguments of the command line.

02:38.520 --> 02:44.040
Shuffle until you iterate over the list.

02:44.040 --> 02:46.920
And the output is this.

02:46.920 --> 02:48.320
And it just works.

02:48.320 --> 02:49.320
It's fast.

02:49.320 --> 02:51.880
And it's really easy to try it out.

02:51.880 --> 02:53.080
Just go to the web page.

02:53.080 --> 02:56.360
And there's a code command which executes a bash.

02:56.360 --> 02:59.640
And then you have it installed.

02:59.640 --> 03:03.000
And yeah, there's a link to it in the slides.

03:03.000 --> 03:04.640
And the slides are already online.

03:04.640 --> 03:06.720
So have fun with it.

03:06.720 --> 03:09.560
And that's the end of the talk in my talk.

03:09.560 --> 03:10.760
And I'll go on.

03:10.760 --> 03:12.960
So what does Yamu stand for?

03:17.440 --> 03:23.400
No Yamu ain't market language.

03:23.400 --> 03:26.040
It's a state-of-the-realization language.

03:26.040 --> 03:28.720
It's a superset of JSON.

03:28.720 --> 03:32.840
It has block style and also flow style, which many people also

03:32.840 --> 03:36.480
call JSON style because it's similar.

03:36.480 --> 03:38.640
And there are many ways to write a string.

03:38.640 --> 03:43.400
But they are all kind of useful in certain areas.

03:43.400 --> 03:47.640
It has aliases, like references or pointers, and commons.

03:47.640 --> 03:51.440
And there's an allowed comma after the last item.

03:51.440 --> 03:53.720
Hello, Jason.

03:53.720 --> 03:56.640
Multiple documents in one file.

03:56.640 --> 03:59.840
And really powerful tags for loading objects

03:59.840 --> 04:03.600
are doing customized loading.

04:03.600 --> 04:11.040
And I started this Yamu.info page, which gives you also

04:11.120 --> 04:15.800
the right words to actually talk about these.

04:15.800 --> 04:18.600
Like, for example, some documentation

04:18.600 --> 04:21.120
referred to Yamu's references.

04:21.120 --> 04:23.120
But it's called aliases and anchors.

04:23.120 --> 04:26.640
And I think it's good to have the right terminology

04:26.640 --> 04:29.440
because then you can actually find

04:29.440 --> 04:32.480
the right documentation for it.

04:32.480 --> 04:39.440
So the history is Yamu 1.1 was implemented by Pi Yamu

04:39.440 --> 04:43.240
and Lip Yamu with some divergence to the spec.

04:43.240 --> 04:47.800
And the decisions were with good intent.

04:47.800 --> 04:50.720
But it had other problems because if you diverge

04:50.720 --> 04:54.320
from the spec and others do not, then it's problematic.

04:54.320 --> 04:58.240
And many other libraries ported this or used Lip Yamu

04:58.240 --> 05:00.000
as a binding.

05:00.000 --> 05:04.520
And 1.2, the version 1.2 was not widely adopted for a long

05:04.520 --> 05:05.600
while.

05:05.600 --> 05:07.560
Many people just didn't know about it.

05:07.560 --> 05:12.040
And there is a prerequest for adding 1.2 for Pi Yamu.

05:12.040 --> 05:16.280
I created it some time ago, but there are some issues.

05:16.280 --> 05:17.800
So it can't be merged yet.

05:17.800 --> 05:19.800
And Lip Yamu and Pi Yamu were even

05:19.800 --> 05:24.800
used in the NASA Mars helicopter mission.

05:24.800 --> 05:30.520
And so this is something you can say these days.

05:30.520 --> 05:32.520
Yeah, as mentioned, 1.1 implementations

05:32.520 --> 05:34.000
were really widely adopted.

05:34.000 --> 05:37.880
And there was no clear change lock for 1.2.

05:37.880 --> 05:42.640
And there hadn't been a test suite until 2016.

05:42.640 --> 05:47.440
So before 2016, updating a library to 1.2

05:47.440 --> 05:51.000
would have just to be sitting down and read the news back

05:51.000 --> 05:55.800
and start from scratch, mostly.

05:55.800 --> 05:58.080
So this is about the history.

05:58.080 --> 06:01.200
And now from a different angle, how do people actually

06:01.200 --> 06:02.920
get in touch with Yamu?

06:02.920 --> 06:06.040
So usually you're using an application that

06:06.040 --> 06:10.280
is using Yamu or some kind of Yamu,

06:10.280 --> 06:14.000
starting with examples from the documentation.

06:14.000 --> 06:17.160
So here's a salt stack.

06:17.160 --> 06:22.320
So you have these funny curly braces here.

06:22.320 --> 06:24.080
And is this a Yamu file?

06:26.800 --> 06:28.880
No, it's an SLS file.

06:28.880 --> 06:30.800
It's not a valid Yamu.

06:30.800 --> 06:35.200
And you cannot use a linter or anything on it,

06:35.200 --> 06:38.640
because first it has to run through ginger templating.

06:38.640 --> 06:42.760
And then the result is Yamu, hopefully.

06:42.760 --> 06:46.720
And many people think this syntax belongs to Yamu,

06:46.720 --> 06:49.520
but it does not.

06:49.520 --> 06:51.520
And the intro on their website doesn't even

06:51.520 --> 06:58.480
say which version it's using, which Yamu version.

06:58.480 --> 07:00.600
And here we have an answerable example.

07:00.600 --> 07:04.120
And here we also have these syntax,

07:04.120 --> 07:06.760
but inside of the string.

07:06.760 --> 07:10.680
That's also ginger templating.

07:10.680 --> 07:14.680
But it happens after you load the Yamu.

07:14.680 --> 07:16.560
So I think that's a better way.

07:16.560 --> 07:20.680
It has disadvantages and advantages, of course.

07:20.680 --> 07:24.440
But also here, many people think this is part of the Yamu.

07:24.440 --> 07:26.840
And they come to our Yamu channel and talk about it.

07:27.560 --> 07:33.520
The website also doesn't say anything about the Yamu version.

07:33.520 --> 07:39.280
Or yeah, it has some links at the bottom.

07:39.280 --> 07:42.720
And the GitHub workflow uses this syntax.

07:42.720 --> 07:46.080
And that's quite nice, because the dollar sign at the beginning

07:46.080 --> 07:49.200
is not special in Yamu, so you don't need to quote it, actually.

07:52.480 --> 07:56.480
And many people think this is part of Yamu, but it's not.

07:56.520 --> 08:03.480
And also no Yamu version information.

08:03.480 --> 08:05.720
So they don't document it.

08:05.720 --> 08:12.280
And I tested GitHub, and I think it's doing Yamu 1.2.

08:12.280 --> 08:18.080
Also, they learn Yamu in why minutes is mentioned,

08:18.080 --> 08:22.960
but it's also not saying anything about Yamu 1.2.

08:22.960 --> 08:25.840
So what are the actual changes?

08:25.840 --> 08:31.160
So they can be divided in syntax and in schema changes.

08:31.160 --> 08:36.240
And the syntax changes are really probably not important.

08:36.240 --> 08:39.240
There are also a few backward incompatible changes,

08:39.240 --> 08:44.000
but affecting even less people.

08:44.000 --> 08:46.200
But the schema changes are important.

08:46.200 --> 08:48.600
So the schema is about deciding if something

08:48.600 --> 08:53.240
is a Boolean, number, null, or string.

08:53.240 --> 08:58.800
And in 1.1, there are 22 values that are resolved as Booleans.

08:58.800 --> 09:02.840
On, off, yes, no.

09:02.840 --> 09:05.880
And you probably all know the Norway problem,

09:05.880 --> 09:08.200
so no is the same as false.

09:08.200 --> 09:15.600
So if you have a list of country codes like ES, DE, and O,

09:15.600 --> 09:21.840
then you will not get what you think.

09:21.840 --> 09:24.320
This is unexpected, and this has been fixed.

09:24.320 --> 09:30.280
So the 1.2 schema just has a lot less values,

09:30.280 --> 09:32.760
a lot less unexpected things happen.

09:32.760 --> 09:37.240
The sex-agasable numbers, base 60, are also gone.

09:37.240 --> 09:43.160
Who knows what sex-agasable numbers are?

09:43.160 --> 09:46.960
Wow, like a handful.

09:46.960 --> 09:49.040
No underscores and numbers allowed anymore,

09:49.040 --> 09:51.800
and the base 2 is also gone.

09:51.800 --> 09:56.760
And you can also click on the link in the slides

09:56.760 --> 10:02.960
to see these differences here.

10:02.960 --> 10:06.960
So only six values for Booleans.

10:06.960 --> 10:09.800
And yeah, it's a lot cleaner.

10:09.800 --> 10:13.360
But still, of course, there is this problem.

10:13.360 --> 10:16.520
When is this a number or not?

10:16.520 --> 10:18.760
So here we have a number.

10:18.800 --> 10:21.480
That's a string, and that's also a string.

10:21.480 --> 10:23.880
The thing is, what do you want?

10:23.880 --> 10:28.200
Like, you don't have to quote, and that's actually nice

10:28.200 --> 10:30.080
in many cases.

10:30.080 --> 10:33.880
And you can't have everything.

10:33.880 --> 10:36.680
So we have to live with the problem

10:36.680 --> 10:42.880
that sometimes we don't know exactly if it is a number or not.

10:42.880 --> 10:45.880
But what you can do and what you should do in many cases

10:45.880 --> 10:47.280
is actually validate.

10:47.800 --> 10:52.000
So who is using JSON schema or something like that

10:52.000 --> 10:54.400
for their YAML files?

10:54.400 --> 10:57.040
Come on.

10:57.040 --> 11:00.960
OK, you should think about it.

11:00.960 --> 11:04.640
And same actually goes for JSON.

11:04.640 --> 11:07.960
At least sometimes you can make mistakes in JSON.

11:07.960 --> 11:12.200
And you don't just send out your JSON or YAML files

11:12.200 --> 11:14.960
and think that it will just work.

11:15.000 --> 11:17.400
We have tests, hopefully.

11:17.400 --> 11:20.720
So use a validator.

11:20.720 --> 11:26.600
And we're using that in openSUSE for openQA.

11:26.600 --> 11:29.800
It can also protect you from processing unexpected data

11:29.800 --> 11:32.640
structure with a recursive tree of aliases, which

11:32.640 --> 11:36.120
is known at the Billion Lafs attack, which is actually

11:36.120 --> 11:40.880
not a real problem of YAML because they're just aliases.

11:40.880 --> 11:43.600
But if you process it or dump it with JSON,

11:43.640 --> 11:46.960
it will be huge.

11:46.960 --> 11:48.400
Yeah, use the right tools.

11:48.400 --> 11:51.880
So who of you knows YAML lint?

11:51.880 --> 11:52.600
OK, great.

11:52.600 --> 11:55.880
So that's a great tool.

11:55.880 --> 12:00.680
And it can tell you if you have unnecessary quotes.

12:00.680 --> 12:03.360
But the thing is I hate typing.

12:03.360 --> 12:06.600
So if you have an extremely limited number of fingers,

12:06.600 --> 12:08.440
you really hate typing.

12:08.440 --> 12:10.880
And so I wrote a YAML tidy, which

12:10.880 --> 12:13.480
is removing the quotes for me.

12:14.480 --> 12:16.840
I don't have to do it manually.

12:16.840 --> 12:20.040
And you are using often four meters for other languages,

12:20.040 --> 12:22.320
too, right?

12:22.320 --> 12:26.120
So here's a YAML tidy configuration.

12:26.120 --> 12:28.400
And here you can say the default scalar style

12:28.400 --> 12:30.640
should be plain.

12:30.640 --> 12:34.800
Here's a YAML file with unnecessary quotes.

12:34.800 --> 12:39.760
And this is what it looks like after YAML tidy.

12:39.760 --> 12:43.680
This would have been a number, so it's the quoted.

12:43.680 --> 12:45.800
And the curly brace here is problematic.

12:45.800 --> 12:50.480
So OK.

12:50.480 --> 12:54.120
YAML lint currently supports 1.1.

12:54.120 --> 13:01.320
And Adrian is working on it to actually support 1.2.

13:01.320 --> 13:06.280
And I also want to support 1.1.

13:06.280 --> 13:10.320
What else can we do to improve the situation?

13:10.320 --> 13:11.960
So there's a YAML test suite.

13:14.560 --> 13:17.000
Started in 2016, like I said.

13:17.000 --> 13:21.440
And Felix implemented NIMYAML and added a lot of cases.

13:21.440 --> 13:24.440
I started with YAMLPP and added test cases.

13:24.440 --> 13:26.160
We have 400 test cases.

13:26.160 --> 13:30.040
And 12 libraries are using it.

13:30.040 --> 13:33.000
But I would like to mention specifically a couple of libraries

13:33.000 --> 13:34.720
that's libfyaml.

13:34.720 --> 13:38.040
And it can be used as a replacement for libfyaml.

13:38.040 --> 13:40.200
It passes all tests.

13:40.200 --> 13:42.400
That's really rare.

13:42.400 --> 13:43.120
It's fast.

13:43.120 --> 13:44.560
It's actively developed.

13:44.560 --> 13:46.400
It can run through YAML comments.

13:46.400 --> 13:49.280
It's still experimental.

13:49.280 --> 13:51.600
And bindings to several languages are planned.

13:54.480 --> 13:58.920
There's also a new JavaScript library.

13:58.920 --> 14:03.520
It passes, I think, all tests by now.

14:03.600 --> 14:06.280
It's actively developed.

14:06.280 --> 14:07.800
Sorry.

14:07.800 --> 14:11.120
It can run through YAML with comments and blank lines.

14:11.120 --> 14:14.600
And it supports 1.2 and 1.1 and the merge key.

14:14.600 --> 14:17.880
And it's really good.

14:17.880 --> 14:21.280
And yeah, just because it's by me, YAMLPP

14:21.280 --> 14:25.680
passes most of the tests, except some things that

14:25.680 --> 14:30.840
are not relevant in ProL anyway, like arrays as hash keys.

14:30.840 --> 14:33.720
It also supports both YAML versions

14:33.720 --> 14:35.040
and comes with a nice highlighter.

14:38.320 --> 14:42.120
So YAML containers, I will go a bit faster

14:42.120 --> 14:43.480
through the last slides.

14:47.680 --> 14:50.880
So Engi started to put things in YAML containers.

14:54.160 --> 14:59.440
And you can actually look at the YAML playground right now.

14:59.440 --> 15:04.040
So here you have to start a Docker container locally.

15:04.040 --> 15:08.280
And now you can live edit YAML here.

15:08.280 --> 15:12.880
And now we just added something that is not valid.

15:12.880 --> 15:16.800
And there's one library which actually thinks it's valid.

15:16.800 --> 15:17.800
But OK.

15:21.720 --> 15:26.560
The test matrix is this one.

15:26.560 --> 15:29.680
And it really looks very red.

15:29.680 --> 15:30.600
Don't be scared.

15:30.600 --> 15:33.640
The test suite contains many edge cases.

15:33.640 --> 15:36.080
So that's why it's so red.

15:36.080 --> 15:40.840
And yeah, we're trying to actually make it better.

15:40.840 --> 15:46.280
And so you can also visit us on our matrix channel.

15:46.280 --> 15:49.000
There is some kind of construction going on,

15:49.000 --> 15:53.640
because Engi is moving the server.

15:53.640 --> 15:57.320
But if it's not there, then there's a fallback on IRC.

15:57.320 --> 15:58.400
So please contact us.

15:58.400 --> 16:01.680
We are really trying to improve YAML and everything around it.

16:01.680 --> 16:04.880
And thank you very much.

16:04.880 --> 16:05.880
Thank you.

16:05.880 --> 16:06.880
Thank you.

16:06.880 --> 16:07.880
Thank you.

16:07.880 --> 16:08.880
Thank you.

16:08.880 --> 16:09.880
Thank you.

16:09.880 --> 16:10.880
Thank you.

16:10.880 --> 16:11.880
Thank you.

16:11.880 --> 16:12.880
Thank you.

16:12.880 --> 16:13.880
Thank you.

16:13.880 --> 16:14.880
Thank you.

16:14.880 --> 16:15.880
Thank you.

16:15.880 --> 16:16.880
Thank you.

16:16.880 --> 16:17.880
Thank you.

16:17.880 --> 16:18.880
Thank you.

16:18.880 --> 16:19.880
Thank you.

16:19.880 --> 16:20.880
Thank you.

16:20.880 --> 16:21.880
Thank you.

16:21.880 --> 16:22.880
Thank you.

16:22.880 --> 16:23.880
Thank you.

16:23.880 --> 16:24.880
Thank you.

16:24.880 --> 16:25.880
Thank you.

16:25.880 --> 16:26.880
Thank you.

16:26.880 --> 16:27.880
Thank you.

16:27.880 --> 16:28.880
Thank you.

16:28.880 --> 16:29.880
Thank you.

16:29.880 --> 16:30.880
Thank you.

16:30.880 --> 16:31.880
Thank you.

16:31.880 --> 16:32.880
Thank you.

16:32.880 --> 16:33.880
Thank you.

