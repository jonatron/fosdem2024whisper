WEBVTT

00:00.000 --> 00:10.000
Get rid of all those pesky words and use images instead.

00:10.000 --> 00:12.000
Which I'm on board with actually.

00:12.000 --> 00:16.000
Yeah. And over to Frank. Thank you very much.

00:16.000 --> 00:26.000
Thank you. So, maybe hold off with the applause till I'm finished and then make up your mind.

00:26.000 --> 00:30.000
So I'm Frank van Bever and I'm here to talk.

00:30.000 --> 00:31.000
Well, I have this talk.

00:31.000 --> 00:38.000
Drop the docs and embrace the model with G4, which might be an incendiary statement in this room.

00:38.000 --> 00:39.000
Louder.

00:39.000 --> 00:42.000
Louder? OK. I'll try.

00:42.000 --> 00:44.000
Can we also put a mic down?

00:44.000 --> 00:49.000
I think people are deciding.

00:49.000 --> 01:00.000
So, yeah, and so it's going to be a quick introduction to what model based systems engineering is using free and open source tools.

01:00.000 --> 01:03.000
That's what we're here for on Fosdham.

01:03.000 --> 01:07.000
So first real quick, because this is not the interesting part.

01:07.000 --> 01:08.000
I'm Frank, father of two.

01:08.000 --> 01:10.000
If I look tired, that explains it.

01:10.000 --> 01:11.000
I'm a bass player.

01:11.000 --> 01:15.000
I've been successfully daylighting as a software developer for the last 10 years.

01:15.000 --> 01:18.000
I trained as an electrical engineer.

01:18.000 --> 01:29.000
I actually had my digital systems like my DSP courses, so digital signal processing on this floor in this building.

01:29.000 --> 01:36.000
And so, yeah, I'm specialized in embedded systems, but I like to think I'd know just enough of the rest of the stack to be dangerous.

01:36.000 --> 01:38.000
I work for a company called Mind.

01:38.000 --> 01:43.000
We do embedded software for well, free and open source software for embedded systems.

01:43.000 --> 01:50.000
If you enjoy the referencing pointers as a job, then come talk to me later if you're looking for a job.

01:50.000 --> 01:59.000
And so currently I am a software architect in a robotics company, a company that makes autonomous guided vehicles.

01:59.000 --> 02:04.000
So with that out of the way, quick outline of what I will be talking about.

02:04.000 --> 02:12.000
So first, if we talk about model based systems engineering, I, well, I can't talk about what modeling is without explaining what model based systems engineering is.

02:13.000 --> 02:18.000
There's three pillars to MBC, modeling language, modeling method and modeling tool.

02:18.000 --> 02:23.000
And then I'm going to be talking about G4, free and open source application.

02:23.000 --> 02:33.000
There's a modeling tool and then how you can also use it for documentation and additional tooling that you can build around your model.

02:33.000 --> 02:37.000
So first of all, what is a model?

02:37.000 --> 02:39.000
And it's a bit abstract.

02:39.000 --> 02:47.000
It's an abstraction of a system aimed at understanding, communicating, explaining or designing aspects of that system.

02:47.000 --> 02:56.000
And so a model really is a central repository for design decisions you make about a system.

02:56.000 --> 03:02.000
And these are captured as model elements and the relationships between these elements.

03:02.000 --> 03:10.000
Typically, you have, you use these graphical languages and you have a set of views that describe this, the described model.

03:10.000 --> 03:18.000
However, and that's an easy trap to fall into these views of the model don't represent the model itself.

03:18.000 --> 03:23.000
Really, the model is like the entire containment tree and the view is just like the single thing.

03:23.000 --> 03:25.000
And yeah, well, I'm from Belgium.

03:25.000 --> 03:33.000
This painter, RenÃ© Magritte, he painted this thing called the Trison des images, which translates to the treason of images.

03:33.000 --> 03:38.000
That's exactly the same thing that you have with these views.

03:38.000 --> 03:42.000
The view is not the model.

03:42.000 --> 03:47.000
Then expanding on that, what is model-based systems engineering?

03:47.000 --> 03:55.000
And so model-based systems engineering is like a formalized application of modeling to support really capturing system requirements,

03:55.000 --> 04:02.000
doing system design analysis, and then also the verification and validation of a system.

04:02.000 --> 04:13.000
And this is throughout the entire lifecycle of a system from the initial concept through the development, then commissioning of a system and decommissioning of a system.

04:13.000 --> 04:22.000
And actually, this is as an alternative to what is called a document-based approach, and that's where the drop the docs comes from.

04:22.000 --> 04:26.000
So I'm most definitely not against documentation.

04:26.000 --> 04:29.000
The more documentation, the better.

04:30.000 --> 04:44.000
But so typically these, well, it's a different approach from writing large amounts of prose to describe what a system should do and instead use these more formal graphical languages.

04:44.000 --> 04:52.000
And I'm thinking that most of you will be involved in documentation in some way or another, otherwise you wouldn't be here.

04:52.000 --> 04:57.000
And my idea is doesn't describe all your documentation efforts.

04:57.000 --> 05:00.000
So these three pillars.

05:00.000 --> 05:04.000
First, there's a modeling language that you need to describe your system.

05:04.000 --> 05:08.000
There's multiple options that exist, typically graphical.

05:08.000 --> 05:12.000
I will be talking about a system specifically today.

05:12.000 --> 05:18.000
Modeling methods is then the way you organize your model.

05:19.000 --> 05:28.000
And once again, there's also plenty of options out there, and this is really dependent on the processes of your organization.

05:28.000 --> 05:38.000
And so because of this really, if I have to talk about modeling methods, then I would probably need the rest of the day and tomorrow as well.

05:38.000 --> 05:40.000
So it's beyond the scope of this presentation.

05:40.000 --> 05:42.000
Really what I want to do is just give a quick introduction.

05:42.000 --> 05:52.000
And then finally, you need a modeling tool to bring together your modeling language and your modeling method and really build this model.

05:52.000 --> 05:59.000
And so mostly these very large, very commercial, close source tools with like a six month.

05:59.000 --> 06:09.000
Well, if you want to buy it, you need to first make, well, these very large tools from IBM, from the SOH system seem to be very popular.

06:09.000 --> 06:18.000
But I'm here talking about G4 as like a free and open source alternative for these tools.

06:18.000 --> 06:26.000
So, and then Napoleon, he had this quote that a good sketch is better than a long speech.

06:26.000 --> 06:34.000
And I think that might actually make him the first model based systems engineering practitioner besides he did some other stuff too.

06:34.000 --> 06:37.000
But OK.

06:37.000 --> 06:44.000
And so the good sketch, SysML is the systems modeling language.

06:44.000 --> 06:54.000
It's a graphical language and it's actually a profile, which is like the extension mechanism of UML, which you may or may not have heard of.

06:54.000 --> 06:58.000
There are some differences though between UML and SysML.

06:58.000 --> 07:02.000
First of all, UML really is software focused.

07:02.000 --> 07:06.000
It has this concept of a class and everything is built around that.

07:06.000 --> 07:12.000
SysML on the other hand, moves it an abstraction layer higher and talks about blocks.

07:12.000 --> 07:24.000
Another thing that we, well, that the organization that I work for that we really like about SysML is that it has this built in concept of a requirement of requirements.

07:24.000 --> 07:32.000
And that requirements can be, well, basically you have these requirements, they can be refined, they can, you can have derived requirements.

07:32.000 --> 07:36.000
And then these requirements can be assigned to different parts of a system.

07:36.000 --> 07:45.000
And generally, this is like a good way to make sure that the necessary information gets to the people doing the actual development work.

07:46.000 --> 07:56.000
So yeah, point is it really, the SysML has like a systems focus, whereas UML is more of a, really more of a software focused thing.

07:56.000 --> 07:59.000
And so there's nine types of diagrams.

07:59.000 --> 08:09.000
These activity sequence, state machine and use case diagrams, those are all just lifted from UML, put into SysML, these are the same thing.

08:09.000 --> 08:15.000
The requirements diagram is where you describe your, well, where you describe the requirements of a system.

08:15.000 --> 08:20.000
You do derivation, basically build up a tree of requirements.

08:20.000 --> 08:23.000
And then these structure diagrams, these have analogs in UML.

08:23.000 --> 08:30.000
But so you have a block definition diagram where you decompose the system into the blocks that make up the system.

08:30.000 --> 08:39.000
And you have the internal block diagram where you then take these blocks and makes show how these are interconnected, how these are interconnected.

08:39.000 --> 08:51.000
And what the interfaces between these blocks are, you have the package diagram, which is really about, well, which is the tool that you would use for your modeling methodology.

08:51.000 --> 08:58.000
It allows you to split off different parts of your model into packages to keep the overview.

08:58.000 --> 09:04.000
And then finally there's also a parametric diagram, which is a special case of the internal block diagram.

09:04.000 --> 09:09.000
And this is usually used for when you want to do systems simulation.

09:09.000 --> 09:19.000
G4 doesn't do this, so I'm not going to go into this too much, but from, well, I've read some things on the developer chat.

09:19.000 --> 09:24.000
And so it's something that is being worked on, so that's exciting.

09:25.000 --> 09:30.000
Well, I think some of you might be thinking, haven't we tried this before?

09:30.000 --> 09:34.000
And, well, sometimes I feel old, sometimes I feel young.

09:34.000 --> 09:44.000
It depends really, but so I was a kid back in the 90s, but UML really, we tried, I think you might have like a reaction of, haven't we tried this before?

09:44.000 --> 09:49.000
UML, alderage.com boom and whatnot.

09:49.000 --> 10:00.000
If we can believe Vogue magazine, Y2K is entirely back, so yeah, that's, and so, yes, actually, this is UML.

10:00.000 --> 10:07.000
It's an extension of UML, but there's some observations that I've made in the field.

10:07.000 --> 10:10.000
Well, there's some observations that I've made.

10:10.000 --> 10:14.000
First of all, we have this Myro board proliferation.

10:14.000 --> 10:24.000
So Myro is this application that is like a digital whiteboard and, yeah, well, it's natural for people if they want to explain something.

10:24.000 --> 10:31.000
The most natural thing if you want to explain something is you go stand next to a whiteboard, you draw some boxes on it, you draw arrows between those boxes,

10:31.000 --> 10:35.000
and you try and explain what is going on in a system.

10:35.000 --> 10:43.000
And so Myro is being used a lot, but these things, well, if you don't have the context of the human sitting next to it,

10:43.000 --> 10:49.000
doing the explanation, then you start getting these problems of like, okay, what did they exactly mean here?

10:49.000 --> 10:52.000
What is the grammar? What are the semantics?

10:52.000 --> 11:02.000
I don't really understand, well, it's hard to understand what this means without having a lot of pros next to it or the actual human being doing the explanation.

11:02.000 --> 11:13.000
And so actually the block diagrams that SysML has, they already map to what people are doing informally as well.

11:13.000 --> 11:17.000
So, and a bad model is still good documentation.

11:17.000 --> 11:22.000
Bad not in the sense that it is describing a system different from the actual system,

11:22.000 --> 11:27.000
but bad in the sense that it's not a perfect application of the SysML specification,

11:27.000 --> 11:30.000
because that's what people are already doing.

11:30.000 --> 11:36.000
Another thing, of course, is that software architecture is basically systems engineering,

11:36.000 --> 11:40.000
and that mostly every developer is also kind of a bit of an architect.

11:40.000 --> 11:45.000
I don't know of a lot of people that don't have, well, that really lack that level of agency in their job,

11:45.000 --> 11:49.000
that they can't make some architectural decisions from themselves.

11:49.000 --> 11:54.000
And that is where a free and open source tool like the four also comes in nicely,

11:54.000 --> 12:01.000
because it is widely available, it's easy to trojan horse it into your organization.

12:01.000 --> 12:05.000
Which brings me to G4.

12:05.000 --> 12:10.000
It's a multi-platform graphical modeling application.

12:10.000 --> 12:17.000
It's written in Python, uses a GTK UI, and it supports multiple modeling languages,

12:17.000 --> 12:24.000
UML and then SysML, RA, ML and C4 as extensions of, implemented as extensions of UML.

12:24.000 --> 12:29.000
It's Apache 2 licensed, free and open source software, otherwise I wouldn't be standing here.

12:29.000 --> 12:32.000
And it's extensible in multiple ways.

12:32.000 --> 12:40.000
It has a plugin, well, it supports plugins, but you can also extend it in other ways.

12:40.000 --> 12:48.000
And a quick thing, I'm not affiliated in any way with the project, I'm just a fan.

12:48.000 --> 12:51.000
I really like what they're doing.

12:51.000 --> 12:56.000
I have some ideas for development work that I can do, but I need to find the time.

12:56.000 --> 13:06.000
And so one of the nice features that I really like is that it integrates very nicely with Sphinx.

13:06.000 --> 13:14.000
So if you've ever seen like a read the docs website, it's Sphinx on the back end.

13:14.000 --> 13:22.000
And so it, if you basically can have your model sitting in a repository,

13:22.000 --> 13:30.000
sitting in a repository, you push your changes, it rebuilds it, your CI system then can just rebuild the website

13:30.000 --> 13:37.000
and take these diagrams that you've drawn inside of your model and plug them into this page,

13:37.000 --> 13:42.000
well into this Sphinx static website automatically.

13:42.000 --> 13:51.000
So, yeah, we found that that is like a good way to communicate architecture to downstream engineering.

13:51.000 --> 13:59.000
So you have, you basically can have all your diagrams specifying a specific part of a system.

13:59.000 --> 14:05.000
And so you draw these diagrams, you maybe add a bit of words in between, even though I said like drop the docs,

14:05.000 --> 14:12.000
but there's still some sense in writing a bit of prose to introduce it.

14:12.000 --> 14:19.000
But you have these formally defined things that show that, okay, this is the idea that we have, this is what we're going to build.

14:19.000 --> 14:27.000
And so it's a good way to communicate these decisions and the IDs to downstream engineering.

14:27.000 --> 14:37.000
Also, we, so we intend to use this for like these architectural decision records.

14:37.000 --> 14:45.000
So if like an architecture decision is made, you, we put it into the Sphinx site and you do, well, basically,

14:45.000 --> 14:52.000
if everybody reviews it in the CI before, before it gets merged, then you've basically, well,

14:52.000 --> 15:00.000
the necessary people can sign off on it before the decision actually becomes like a written law.

15:00.000 --> 15:10.000
Let's say, yeah, another thing that's really nice is that so because before it's a graphical, it's Python,

15:10.000 --> 15:15.000
it's a graphical application, but you can also just use it as a Python module.

15:15.000 --> 15:23.000
So it integrates very nicely with Jupyter notebooks, which is like this interactive programming environment model.

15:23.000 --> 15:34.000
Your model has an API, so it's perfectly possible to just query your model and ask questions of, well,

15:34.000 --> 15:42.000
basically ask the model questions and get answers from it in this, in this interactive environment.

15:42.000 --> 15:50.000
The Jupyter itself also is like a little programming tool, so you can also add some, well,

15:50.000 --> 16:02.000
you can display diagrams inside of your notebook, add text and really create like a narrative structure inside of your Jupyter notebook,

16:02.000 --> 16:04.000
and also serve as documentation.

16:04.000 --> 16:09.000
So, yeah, you can explore your model and collaborate with other people.

16:09.000 --> 16:12.000
Very nice, very nice feature.

16:12.000 --> 16:20.000
And then finally, because the thing, well, because your model has an API,

16:20.000 --> 16:28.000
it's perfectly possible to have it be, well, to, if it has an API, you can test it.

16:28.000 --> 16:34.000
And so if you, we've combined before with PyTest in our CI system,

16:34.000 --> 16:39.000
and basically what we do is we run a bunch of tests against our model,

16:39.000 --> 16:45.000
or this is like a screenshot that I took from the single test that runs against it.

16:45.000 --> 16:50.000
So, and it's test, if all the requirements, if all these requirements are satisfied,

16:50.000 --> 16:54.000
so you can have a block which can have, well, you can have a requirement,

16:54.000 --> 16:58.000
and then there's a satisfies relationship that define in SysML that you can say,

16:58.000 --> 17:03.000
okay, we have this block satisfies this requirement.

17:03.000 --> 17:08.000
And ideally, if you have a set of requirements, all of these should be satisfied.

17:08.000 --> 17:14.000
This is something that you can test, and the plan of your system is, well,

17:14.000 --> 17:18.000
the plan for your system basically should satisfy all these requirements.

17:18.000 --> 17:21.000
If that's not the case, then you have a problem.

17:21.000 --> 17:26.000
Another thing that you can test for is, does every block have a reason to be there?

17:26.000 --> 17:32.000
So, one of the things that Gaford does for you already is that if a block is no longer represented on any view,

17:32.000 --> 17:35.000
then it's automatically deleted.

17:35.000 --> 17:38.000
But if a block does not have any requirements associated with it,

17:38.000 --> 17:42.000
they might also raise some questions like, okay, does this thing really need,

17:42.000 --> 17:44.000
does this need to be there?

17:44.000 --> 17:48.000
Other examples of things that you can test against is like interfaces.

17:48.000 --> 17:51.000
Two blocks are connected, and they have ports.

17:51.000 --> 17:54.000
These ports expect certain things.

17:54.000 --> 17:58.000
Are both parts of the system expecting the same thing?

17:58.000 --> 18:02.000
If not, then you have a conflict of the contract between those two blocks.

18:02.000 --> 18:09.000
And, yeah, well, basically, it allows you to detect those types of problems before the development starts,

18:09.000 --> 18:16.000
and then, yeah, potentially, you can reduce some wasted effort there.

18:16.000 --> 18:21.000
And so, yeah, you know that it's a real CI system because, well, it's in red.

18:21.000 --> 18:28.000
But, anyway, that is basically all I wanted to say today.

18:28.000 --> 18:35.000
I hope I gave you an okay introduction, at least, to this concept of model-based systems engineering

18:35.000 --> 18:40.000
and then how Gaford can help you with that.

18:40.000 --> 18:43.000
I don't know how much time I have left, but...

18:43.000 --> 18:44.000
Two minutes.

18:44.000 --> 18:45.000
Two minutes.

18:45.000 --> 18:46.000
Two minutes.

18:46.000 --> 18:47.000
Sorry.

18:47.000 --> 18:49.000
Whoa, three in a row.

18:49.000 --> 18:50.000
Oh, four.

18:50.000 --> 18:51.000
Okay, left there.

18:51.000 --> 18:56.000
I think the key question is, are you going to stay in this room after this talk, or are you leaving?

18:56.000 --> 18:59.000
So I would like to ask you several questions.

18:59.000 --> 19:01.000
We can go in the hallway.

19:01.000 --> 19:02.000
You can ask me.

19:02.000 --> 19:04.000
That was a very good question.

19:04.000 --> 19:05.000
Right.

19:05.000 --> 19:13.000
Do you use it for modeling software systems, or mechanical systems, or electrical systems, or everything?

19:13.000 --> 19:18.000
So it supports modeling all of those.

19:18.000 --> 19:22.000
For us, mainly, we've been using it.

19:22.000 --> 19:31.000
So one model I have built includes electrical components, like off-the-shelf components that we buy,

19:31.000 --> 19:37.000
software components that interact with those things.

19:37.000 --> 19:46.000
So the system in itself has support as well, except multiple voltages for powering it.

19:46.000 --> 19:53.000
So it can be like 24 volts DC, but also 230 volts AC wall power.

19:53.000 --> 20:00.000
It's all stuff that you can put inside of your model.

20:00.000 --> 20:02.000
Very, very quick one.

20:02.000 --> 20:05.000
I guess you use the model to generate those.

