WEBVTT

00:00.000 --> 00:10.000
All right, good morning everybody.

00:10.000 --> 00:13.340
Welcome to the session on SNAP.

00:13.340 --> 00:19.520
My name is Jens, and with me is my colleague and friend Yadka.

00:19.520 --> 00:22.440
We're here to present SNAP, build your own blocks.

00:22.440 --> 00:26.440
But it's not just Yadka and me who are working on SNAP.

00:26.440 --> 00:28.680
We're just the ones presenting it today.

00:28.680 --> 00:32.320
There's a larger community and more people involved.

00:32.320 --> 00:35.360
There's Benat Ramagosa down there.

00:35.360 --> 00:39.400
There's Simon Walters from the SNAP community here.

00:39.400 --> 00:43.440
There's John Maloney, Turgut Gunezu.

00:43.440 --> 00:46.080
The whole blocks gang is here.

00:46.080 --> 00:50.440
And all of those have been more or less also involved

00:50.440 --> 00:52.760
in the development of SNAP.

00:52.760 --> 00:56.000
I've brought also Olanzah, who's very involved in SNAP,

00:56.000 --> 00:58.760
our mascot.

00:58.760 --> 01:02.120
I keep saying this for people who might not

01:02.120 --> 01:04.680
have heard it before.

01:04.680 --> 01:07.520
Every once or so often we get somebody who says,

01:07.520 --> 01:09.240
take down SNAP.

01:09.240 --> 01:12.440
It's a copy of Scratch.

01:12.440 --> 01:14.560
And so I just want to point out, yes,

01:14.560 --> 01:18.480
you know this is also a mascot on Scratch.

01:18.480 --> 01:20.920
It's called Gobo in Scratch.

01:20.920 --> 01:23.560
And we're friends with the Scratch team.

01:23.560 --> 01:26.680
And we're allowed to use Gobo.

01:26.680 --> 01:32.560
And our friend and collaborator, co-author Brian Harvey,

01:32.560 --> 01:38.280
mutated Gobo with this funny haircut that, of course,

01:38.280 --> 01:40.360
everybody in this room knows about.

01:40.360 --> 01:41.560
It's a lambda.

01:41.560 --> 01:45.440
So SNAP is Scratch on lambda.

01:45.440 --> 01:46.960
This is what it's about.

01:46.960 --> 01:50.280
It's about building your own blocks.

01:50.280 --> 01:53.800
And so what Yatka and I are planning for today

01:53.800 --> 01:59.640
is kind of not so much a talk as a demo.

01:59.640 --> 02:00.600
It's a walk.

02:00.600 --> 02:02.200
It's a lab visit.

02:02.200 --> 02:06.320
And we'd like to invite you to a visit of our lab.

02:06.320 --> 02:09.360
So when we say SNAP, the title is Build Your Own Blocks,

02:09.360 --> 02:14.320
it used to be called BYOB for Build Your Own Blocks,

02:14.320 --> 02:18.760
until some parents in the US who didn't

02:18.760 --> 02:23.240
have a sense of humor decided that it also

02:23.240 --> 02:26.040
means something else, like bring your own bottle.

02:26.040 --> 02:28.720
Usually there's alcohol in it.

02:28.720 --> 02:31.800
And the implication that there is alcohol

02:31.800 --> 02:34.080
might entice children to try it.

02:34.080 --> 02:37.800
So we had to give it a different name.

02:37.800 --> 02:39.880
So this is why it's called SNAP.

02:39.880 --> 02:42.280
We're still calling it Build Your Own Blocks.

02:42.280 --> 02:45.480
But to us, and what we'd like to show you today,

02:45.480 --> 02:49.440
it is as much about learning to code

02:49.440 --> 02:52.760
or learning about technology than it

02:52.760 --> 02:56.040
is about building one's own mind,

02:56.040 --> 02:58.360
about learning something about society,

02:58.360 --> 03:01.640
about the surroundings, about the environment.

03:01.640 --> 03:05.600
And we'd like to kind of give you

03:05.600 --> 03:08.640
a little overview of not just our technology,

03:08.640 --> 03:13.360
but also our pedagogy.

03:13.400 --> 03:17.040
So just very quickly, this is SNAP.

03:17.040 --> 03:21.120
How many of you know SNAP or have used SNAP?

03:21.120 --> 03:22.440
OK, about one third.

03:22.440 --> 03:26.520
So just very quickly, I'm just going to show you so in SNAP.

03:26.520 --> 03:28.200
One thing that we have, when you open it,

03:28.200 --> 03:30.360
this is kind of pure vanilla SNAP.

03:30.360 --> 03:36.440
You can, here's a block, you can move something.

03:36.440 --> 03:39.080
You can also kind of stick blocks together

03:39.080 --> 03:40.200
like these puzzle pieces.

03:40.720 --> 03:44.720
There are different kind of categories

03:44.720 --> 03:46.720
with control structures.

03:46.720 --> 03:48.720
You have kind of these control structures.

03:48.720 --> 03:50.720
This is a repetition.

03:50.720 --> 03:53.320
So when you have kind of four times this,

03:53.320 --> 03:55.320
and you click on this, everything is live.

03:55.320 --> 03:56.320
It moves.

03:56.320 --> 03:58.320
You can see what it does.

03:58.320 --> 04:02.320
You can, you have a drawing pen.

04:02.320 --> 04:05.320
You can get the pen down, pen up.

04:05.320 --> 04:07.320
So now you can draw a square.

04:08.080 --> 04:10.080
And always the question is how you get rid of it.

04:10.080 --> 04:11.600
So there's a clear block.

04:11.600 --> 04:12.600
You can click on these things.

04:12.600 --> 04:16.600
You don't really have to think that much ahead to do something.

04:16.600 --> 04:17.600
And it's called build your own blocks,

04:17.600 --> 04:21.600
because you can build your own blocks.

04:21.600 --> 04:23.600
So you can make a new block.

04:23.600 --> 04:26.600
I want to make a block in the motion category.

04:26.600 --> 04:31.600
It's a square block, and it has as input a size.

04:31.600 --> 04:34.600
It's really hard to build a block with one block.

04:34.880 --> 04:38.880
It's really hard to build a block with one hand.

04:38.880 --> 04:40.880
And so I'm getting this editor.

04:40.880 --> 04:43.880
I can say the size should be an input.

04:43.880 --> 04:45.880
It should be kind of a number.

04:45.880 --> 04:50.880
So now I can say, oh, this part is this thing that makes a square.

04:50.880 --> 04:55.880
I can drag this in here, and the size is an input.

04:55.880 --> 04:58.880
And I can say the size is how much it should move.

04:58.880 --> 05:01.880
So now I've made my own block.

05:02.560 --> 05:05.560
Wait, did I make my own block?

05:05.560 --> 05:06.880
Or did it?

05:06.880 --> 05:08.560
Oh, look at it.

05:08.560 --> 05:09.440
It didn't work.

05:09.440 --> 05:13.720
OK, see, this is the fun of doing it with one hand.

05:13.720 --> 05:20.160
OK, you guys, this is a collaborative coding environment.

05:20.160 --> 05:22.320
Let's try this again.

05:22.320 --> 05:25.160
Oh, I need to even make size and input again.

05:28.040 --> 05:31.720
So as we were just hanging out with a bunch of teachers

05:31.720 --> 05:36.640
is that the repetition is the mother of all learning.

05:36.640 --> 05:39.040
So now I have the square block.

05:39.040 --> 05:42.440
Let's try to make a square of 100 again.

05:47.720 --> 05:48.280
It works.

05:48.280 --> 05:51.960
And then we can do things like, now we can build around this.

05:51.960 --> 05:56.080
We can say, OK, let's do, let's clear this,

05:56.080 --> 06:04.880
and let's maybe say, OK, i times 10.

06:04.880 --> 06:15.360
And we also want to turn a little bit, like maybe 36.

06:15.360 --> 06:19.480
And we can kind of build things.

06:19.480 --> 06:23.600
This is kind of the technology part that isn't really new.

06:23.600 --> 06:24.280
It's great.

06:24.280 --> 06:25.240
We love it.

06:25.280 --> 06:27.880
But the thing is that we want to build blocks,

06:27.880 --> 06:30.520
but we also want to build ourselves.

06:30.520 --> 06:33.920
We want to interact with our surroundings.

06:33.920 --> 06:36.200
And so we want to look at data.

06:36.200 --> 06:37.720
We want to look at the world.

06:37.720 --> 06:43.240
And through programming, as I think Mitchell says it,

06:43.240 --> 06:46.480
learn to program and program to learn.

06:46.480 --> 06:50.800
But not just learn about technology,

06:50.800 --> 06:52.000
but learn about something else.

06:52.000 --> 06:55.160
So here's a little example of that a while ago.

06:55.160 --> 06:59.920
John and I were also working on and we're

06:59.920 --> 07:02.440
thinking about how we could express things that

07:02.440 --> 07:03.880
are really important.

07:03.880 --> 07:05.440
And here's a little puzzle.

07:05.440 --> 07:08.000
You can make an educator.

07:08.000 --> 07:11.720
You can kind of make a project and give it to your students.

07:11.720 --> 07:16.400
And in this project, I've downloaded a bunch of data

07:16.400 --> 07:19.640
from the internet, from GitHub.

07:19.640 --> 07:30.800
This is the population data of 195 countries

07:30.800 --> 07:37.200
over a span from the year 1800 to today.

07:37.200 --> 07:39.000
It's the population development.

07:39.000 --> 07:40.920
It's a lot of data.

07:40.920 --> 07:45.280
I've also downloaded the life expectancy data.

07:45.280 --> 07:47.520
And for some periods, there isn't one.

07:47.520 --> 07:52.800
But it's the life expectancy in each of these countries.

07:52.800 --> 07:58.800
And also, the gross domestic product adjusted for inflation

07:58.800 --> 08:03.640
and broken down per person living in that country.

08:03.640 --> 08:09.120
And that might tell us something about life conditions

08:09.120 --> 08:11.560
and how life conditions in countries

08:11.560 --> 08:13.040
have evolved over time.

08:13.040 --> 08:18.800
And some of you who can read it probably already know this.

08:18.800 --> 08:21.400
There's the GapMinder project by Hans Rosling.

08:21.400 --> 08:22.520
Who knows this?

08:22.520 --> 08:24.360
GapMinder.

08:24.360 --> 08:27.560
And so we thought, it's great to work with this.

08:27.560 --> 08:29.760
It's great to look at it.

08:29.760 --> 08:32.960
And we thought it's also really great to use coding,

08:32.960 --> 08:36.480
not just to use it, but to interact with the stator

08:36.480 --> 08:37.880
yourself.

08:37.880 --> 08:41.720
And so what we like to give people

08:41.720 --> 08:45.360
is an imperfect project that has something like here.

08:45.360 --> 08:48.160
It's something that already has a slider built in.

08:48.160 --> 08:50.640
And you can configure that slider,

08:50.640 --> 08:52.480
kind of give it some numbers.

08:52.480 --> 08:56.880
And then it emits a broadcast, like the slider changed.

08:56.880 --> 09:00.280
And now we could say, OK, in this project,

09:00.280 --> 09:05.080
like when this receives the slider changed,

09:05.080 --> 09:07.480
me, we might want to hide it.

09:07.480 --> 09:11.720
And we might want to go to some coordinate,

09:11.720 --> 09:16.000
like go a little bit to the left and down.

09:16.000 --> 09:23.040
And we might want to set a color to something light

09:23.040 --> 09:26.200
and write the value of the slider.

09:26.200 --> 09:28.680
So we're going to query the value of the slider.

09:29.480 --> 09:31.720
But it should be big.

09:31.720 --> 09:35.240
Let's make it big, probably at some point,

09:35.240 --> 09:38.360
before we also want to clear it.

09:38.360 --> 09:41.720
So now, as I move the slider, I'm

09:41.720 --> 09:43.720
getting a readout of the numbers.

09:43.720 --> 09:47.520
But I want it to be the numbers from 1800 until now.

09:47.520 --> 09:50.920
So I probably should have some kind of formula in here

09:50.920 --> 09:53.720
where I say it's not the value of the slider,

09:53.720 --> 09:55.520
but the value of the slider.

09:55.560 --> 09:59.160
Plus 1799.

09:59.160 --> 10:03.280
That's about as much math as I'm allowed to do.

10:03.280 --> 10:08.240
OK, so now I have a sort of a timeline, an interactive timeline.

10:08.240 --> 10:15.440
And now I want to kind of map all of this data

10:15.440 --> 10:17.480
and sort of scatter it in there.

10:17.480 --> 10:21.280
So I'm going to make a new, I'm going to draw a little bit

10:21.280 --> 10:22.280
of data.

10:22.280 --> 10:28.360
So I'm going to draw actually a new object.

10:28.360 --> 10:34.480
I'm going to use a vector pen and draw something like a,

10:34.480 --> 10:38.480
oops.

10:38.480 --> 10:41.960
Sorry.

10:41.960 --> 10:46.920
Draw just a little dot, which is about my drawing things.

10:46.920 --> 10:49.040
I'm going to call this a country.

10:49.040 --> 10:54.560
And a country is going to, I'm going to add another variable.

10:54.560 --> 10:56.320
That's just a name.

10:56.320 --> 10:58.560
So it's sort of a, OK.

10:58.560 --> 11:04.120
And actually, I don't need to show that.

11:04.120 --> 11:06.920
And so when the green flag is pressed,

11:06.920 --> 11:12.280
I can just set the name to nothing.

11:12.280 --> 11:16.280
And actually, what I want to do is now I want to do something

11:16.280 --> 11:18.800
for all the countries.

11:18.840 --> 11:21.240
So I can take out, so if I look at all the countries,

11:21.240 --> 11:23.080
they're all in the first column.

11:23.080 --> 11:30.560
So I could say, OK, this is the first item of the columns

11:30.560 --> 11:33.600
of this table.

11:33.600 --> 11:34.720
And as you can see, it's always live.

11:34.720 --> 11:37.000
So these are all the countries.

11:37.000 --> 11:39.600
So I can loop through them.

11:39.600 --> 11:43.640
We could say for all of these, I want to make a new clone.

11:43.640 --> 11:45.840
So I'm telling a new clone.

11:45.840 --> 11:54.400
I just want to assign the name to whatever is in that list.

11:54.400 --> 11:55.840
And I want to do this really fast.

11:55.840 --> 11:59.520
I don't want to wait for it to take long.

11:59.520 --> 12:02.640
And when I'm done, I want to do something.

12:02.640 --> 12:04.760
I want to broadcast that something has changed.

12:04.760 --> 12:07.120
So I'm going to broadcast the slider change.

12:07.120 --> 12:11.360
And now what I want to do is that when each of these clones

12:11.360 --> 12:15.760
receives the slider change, it should align itself to the data.

12:15.760 --> 12:18.440
And here's something that we're saying, build your own block.

12:18.440 --> 12:23.440
So here's a block that we made that you can already use.

12:23.440 --> 12:26.760
So we give this block that arranges a record.

12:26.760 --> 12:29.920
So the record here is indicated by the name.

12:29.920 --> 12:31.680
And we're selecting in these records,

12:31.680 --> 12:34.480
we're selecting the year indicated,

12:34.480 --> 12:37.040
which is dependent on our slider.

12:37.040 --> 12:38.600
It's the value of the slider.

12:39.600 --> 12:48.000
And so we want to map the wealth, kind of, you know, the money.

12:48.000 --> 12:52.840
We want to map that to the x-axis on a logarithmic scale.

12:52.840 --> 12:57.440
The life expectancy, we want to map to the y-axis.

12:57.440 --> 13:04.400
And the size of the bubble, we want to map to the population.

13:04.400 --> 13:07.720
And let's actually try this.

13:07.720 --> 13:10.120
Do you think this could work?

13:10.120 --> 13:11.080
OK.

13:11.080 --> 13:13.360
Wait, I wanted to do one more thing.

13:13.360 --> 13:16.440
I wanted to make them a little transparent.

13:16.440 --> 13:20.560
So we could set the ghost effect to something like 60.

13:20.560 --> 13:23.920
So we see the ones that are underneath.

13:23.920 --> 13:25.200
Let's try this again.

13:25.200 --> 13:25.720
Yeah.

13:25.720 --> 13:26.320
OK.

13:26.320 --> 13:31.840
So here's a map of the world of 200 countries in the year 1800.

13:31.840 --> 13:35.240
And now we can see some interesting things.

13:35.240 --> 13:41.120
As we move the slider, we can see how the countries develop.

13:41.120 --> 13:43.480
We can see how life expectancy rises,

13:43.480 --> 13:46.000
how kind of things are distributed.

13:46.000 --> 13:49.680
Now, it would be fun to see which country is which.

13:49.680 --> 13:52.960
So we could also add some other interactive elements,

13:52.960 --> 13:59.160
like we could say, when I am, mouse entered,

13:59.160 --> 14:01.640
we could say, you know, say my name.

14:01.640 --> 14:02.600
Say my name.

14:02.600 --> 14:03.200
Say my name.

14:03.200 --> 14:04.200
OK.

14:04.200 --> 14:05.120
Say my name.

14:05.560 --> 14:09.200
When I'm, again, when the mouse goes out,

14:09.200 --> 14:15.640
like when the mouse is departed, just stop saying whatever it's saying.

14:15.640 --> 14:17.560
Say nothing.

14:17.560 --> 14:18.280
Does it work?

14:18.280 --> 14:18.480
Yeah.

14:18.480 --> 14:19.520
We don't have to restart it.

14:19.520 --> 14:20.840
So this is China, the big thing.

14:20.840 --> 14:22.280
This is the US.

14:22.280 --> 14:23.600
And now we can do interesting things.

14:23.600 --> 14:27.120
Like now we know this big blob is China.

14:27.120 --> 14:29.120
We can see what happened to China.

14:29.120 --> 14:29.600
Whoops.

14:29.600 --> 14:33.440
Here there's a famine in the early 60s.

14:33.440 --> 14:37.360
Or we can see, we can look for other spectacular things

14:37.360 --> 14:41.320
like right at the beginning, like here in 1880.

14:41.320 --> 14:45.160
And there's a problem in Tunisia, the last case of the Black Plague.

14:45.160 --> 14:50.200
And with all this data, it's already interesting now to use this

14:50.200 --> 14:55.800
and to use Google and to find out what happened at certain periods of time.

14:55.800 --> 15:01.880
For example, we can go, let's go to the early 20th century here.

15:01.880 --> 15:10.160
1904, the first genocide committed by Germans in Namibia of the 20th century.

15:10.160 --> 15:14.600
We can see how, oops, here you probably know this.

15:14.600 --> 15:16.880
It's not World War I.

15:16.880 --> 15:22.640
It's a drop in life expectancy almost everywhere except in Denmark.

15:22.640 --> 15:24.640
Nobody knew that before COVID.

15:24.640 --> 15:26.400
Nobody knew that before COVID.

15:26.400 --> 15:27.520
Now everybody knows it.

15:27.520 --> 15:28.680
It's right.

15:28.680 --> 15:34.640
That's the Spanish flu, which wasn't Spanish, but it's the flu epidemic.

15:34.640 --> 15:37.160
And so this is what we're talking about.

15:37.160 --> 15:42.040
It is as much about looking at data, finding out how to work with tables,

15:42.040 --> 15:47.360
how to model things, but also about really discovering things

15:47.360 --> 15:50.040
that are fun to discover with a computer.

15:50.040 --> 15:55.040
This is much more fun to discover with a computer than with a textbook.

15:55.040 --> 15:57.000
And it's also way more interactive.

15:57.000 --> 16:01.160
And even the learning can be more self-directed because now I want to know

16:01.160 --> 16:04.120
what happens at this bubble at this time.

16:04.120 --> 16:12.320
And so it's about building blocks, but also building knowledge very much

16:12.320 --> 16:17.240
in the constructivist, constructionist way.

16:17.240 --> 16:20.920
And so one thing that's really cooking that we're working on right now

16:20.920 --> 16:26.960
for the next version is, so with these abstractions,

16:27.000 --> 16:28.680
we're building up.

16:28.680 --> 16:35.760
We're sticking together blocks to build up abstractions that let us do

16:35.760 --> 16:38.800
more awesome things with less blocks.

16:38.800 --> 16:43.040
Now the question always comes, especially conferences like this,

16:43.040 --> 16:50.840
but at the core, at the bottom, there's got to be some real language.

16:50.840 --> 16:56.640
And the real language has to be text-based because everything is text-based.

16:57.360 --> 17:02.800
And even artificial intelligence uses large language models,

17:02.800 --> 17:06.720
so obviously there must be something to textual language that is very powerful.

17:06.720 --> 17:07.800
And it is.

17:07.800 --> 17:10.440
But here's something that we're working on.

17:10.440 --> 17:12.520
And we've had several projects.

17:12.520 --> 17:15.560
John and I were working on a project where we tried to make a,

17:15.560 --> 17:19.640
and we actually went pretty far to build a block-space language

17:19.640 --> 17:23.240
that was completely written in itself.

17:23.280 --> 17:26.760
Snap is not completely written in itself, but we're trying this.

17:26.760 --> 17:27.240
Look at this.

17:27.240 --> 17:30.480
This is something that's in the development version.

17:30.480 --> 17:32.600
Here's a new thing we're working on.

17:32.600 --> 17:36.560
It says blocks all the way.

17:36.560 --> 17:43.720
And if I click blocks all the way, now I can look at all these blocks

17:43.720 --> 17:47.240
that are called primitives that are actually written in JavaScript,

17:47.240 --> 17:49.880
but I can edit them.

17:49.880 --> 17:57.840
I can edit them and I see blocks, how they could be written in Snap itself.

17:57.840 --> 18:00.640
And here's a block that is a primitive block,

18:00.640 --> 18:05.480
which means we're actually, we're calling up a native JavaScript function.

18:05.480 --> 18:10.800
But we could turn this off, and then it would run this,

18:10.800 --> 18:14.560
and it would totally do the right thing.

18:14.560 --> 18:17.600
And if you actually look at this code, you might be astonished

18:17.600 --> 18:20.640
because this is probably not what you were expecting.

18:20.640 --> 18:26.000
It has sort of a NumPy APL-ish way to deal with coordinates

18:26.000 --> 18:29.240
in a way that uses vectors.

18:29.240 --> 18:34.320
And it's really fun to check out how things work.

18:34.320 --> 18:36.520
Like, for example, here's the glide block.

18:36.520 --> 18:39.760
So there's glide written in Snap itself.

18:39.760 --> 18:46.120
There is, of course, if an edge bounds, and this is way more complicated.

18:46.160 --> 18:51.480
But we can even go to other things, and like, obviously,

18:51.480 --> 18:53.240
the control category is very interesting.

18:53.240 --> 18:57.080
Now, we can look how forever loop is done.

18:57.080 --> 19:00.600
If you look at forever loop, it's implemented recursively.

19:00.600 --> 19:04.840
It's a higher order function that calls the function it is given,

19:04.840 --> 19:06.440
and it calls it recursively.

19:06.440 --> 19:13.040
But, or here's how repeat until would be,

19:13.040 --> 19:15.360
and repeat until is interesting,

19:15.400 --> 19:17.440
because it also uses if.

19:17.440 --> 19:20.040
Now, what about if?

19:20.040 --> 19:27.880
So here's how if is done, or things like not.

19:27.880 --> 19:34.640
And if you look at if, if again uses if else.

19:34.640 --> 19:39.200
So it's almost sort of like a not really infinite,

19:39.200 --> 19:43.640
but kind of it goes not all the way down to the metal,

19:43.640 --> 19:48.640
but it goes down some more subterranean stories.

19:48.640 --> 19:56.240
And what we're hoping to achieve with that is to let kids and learners explore the system,

19:56.240 --> 20:00.520
and find out it's not about one language versus the other,

20:00.520 --> 20:05.000
but it's about how to express your ideas and how to do these.

20:05.000 --> 20:10.920
So let's actually try to really find something,

20:10.920 --> 20:14.000
which is we're at a hackers conference.

20:14.000 --> 20:20.040
So what if we said, you know, move?

20:20.040 --> 20:26.600
Let's break move and say, okay, I don't want to go to something,

20:26.600 --> 20:28.280
I don't want to use the primitive.

20:28.280 --> 20:31.840
Actually, I want to see how it moves.

20:31.840 --> 20:37.080
I want to glide something like not so long.

20:37.200 --> 20:43.920
And so what I'm going to do is I'm going to run the glide block.

20:43.920 --> 20:50.200
I'm going to leave the coordinates empty, which turns it turns them into implicit parameters.

20:50.200 --> 20:54.240
I'm going to put in this vector in here.

20:54.240 --> 20:59.560
So now I've really fine move.

20:59.560 --> 21:06.200
And now if I run this, I can see that I changed the way how move works.

21:06.320 --> 21:11.040
And I've now made it such that I'm using glide instead of going to.

21:11.040 --> 21:16.200
And this is going to be fun because it sort of gives you agency to even change the way

21:16.200 --> 21:19.920
snap works because all of this is now editable.

21:19.920 --> 21:22.280
All of this is really a system that is malleable.

21:25.480 --> 21:26.960
So this is what it's about.

21:26.960 --> 21:28.160
Build your own blocks.

21:28.160 --> 21:35.360
I'm now going to hand over to Yatka to tell you some more about our kind of the pedagogy

21:35.360 --> 21:38.200
and the kinds of things we're working on.

21:38.200 --> 21:39.400
Yeah, thanks.

21:39.400 --> 21:44.400
So we do this thing together with people at UC Berkeley.

21:44.400 --> 21:47.280
And it's also a lot about education.

21:47.280 --> 21:52.600
So it's used at universities around the globe and also in a lot of schools by now.

21:52.600 --> 21:56.440
And if you have a school that you want to use, snap, feel free to reach out.

21:56.440 --> 21:59.920
We're always looking for more collaborators.

21:59.920 --> 22:04.360
And as you already saw, you can program snap in different ways.

22:04.360 --> 22:07.680
And that's also something that's really important to us that we can.

22:07.680 --> 22:10.560
So there's not one way to the solution, but there's several ways.

22:10.560 --> 22:19.800
And we also accommodate the boring ways, like using all the four loops that kids are required

22:19.800 --> 22:21.200
to learn in school.

22:21.200 --> 22:27.720
But we also want to elevate the mind to new ideas about programming, like the stuff that

22:27.720 --> 22:31.000
Jens has just been showing you.

22:31.000 --> 22:33.680
And I just wanted to give a short, can I close that?

22:35.360 --> 22:36.600
Oh, I'll go over here.

22:36.600 --> 22:37.800
Yeah, great.

22:37.800 --> 22:40.680
So, no, not right now.

22:40.680 --> 22:42.080
Thanks.

22:42.080 --> 22:48.640
So I wanted to do a short, oh, have we tried whether we can record something on the thing?

22:48.640 --> 22:50.120
No, but we'll try.

22:50.120 --> 22:50.800
OK, we'll try.

22:50.800 --> 22:55.720
I record a sound and see whether it works.

22:55.720 --> 22:58.280
Hello.

22:58.280 --> 22:59.520
OK, let's try to play it.

23:03.160 --> 23:04.240
OK, it doesn't.

23:04.240 --> 23:05.240
Good.

23:05.240 --> 23:06.360
Ah, OK, it comes out of here.

23:06.360 --> 23:08.160
Yeah, OK.

23:08.160 --> 23:08.880
Hello.

23:08.880 --> 23:10.440
So we can record sounds.

23:10.440 --> 23:15.920
This is something that's also really important to us that we can extend projects beyond the

23:15.920 --> 23:18.080
working with numbers.

23:18.080 --> 23:22.200
So I personally am not a developer.

23:22.200 --> 23:24.600
Like, I didn't study programming.

23:24.600 --> 23:26.960
I am a developer now, but I studied biology.

23:26.960 --> 23:33.680
And until I was 25, I thought programming is, can I say that shit and boring?

23:33.680 --> 23:37.360
Then I tried it out and I used Snap for it and it is actually fun.

23:37.360 --> 23:40.200
I mean, you guys all know that, but it's awesome.

23:40.200 --> 23:43.520
So I'm not that much of a math person.

23:43.520 --> 23:47.520
So I really love that you can extend Snap using media, using data.

23:47.520 --> 23:50.840
And now I want to show something using this recording.

23:50.840 --> 23:58.600
So you can access the samples of a sound file that I recorded by using this block from the

23:58.600 --> 23:59.480
sound category.

23:59.480 --> 24:03.760
So you can see we have different categories here with differently colored blocks that

24:03.760 --> 24:08.240
helps to structure the programs and also to read the code.

24:08.240 --> 24:14.480
And if I click on that, it's also a list with 51,840 samples.

24:14.480 --> 24:17.320
At the beginning, I didn't say anything, so it's all zeros.

24:17.320 --> 24:23.280
But then when we move down, we see that it's negative values, but very small negative values.

24:23.280 --> 24:28.040
So the samples are the amount that a membrane swings either to the left or the right.

24:28.040 --> 24:32.280
In our ear, for example, or in a speaker or something like that.

24:32.280 --> 24:34.720
And now I could try to modify that sound.

24:34.720 --> 24:39.400
So let me grab one more recording that we can always play it.

24:39.400 --> 24:44.880
And I could do it the traditional way using the for loop that I've just mentioned.

24:44.880 --> 24:48.520
Because as Yen said, in German schools, kids are required to learn loops.

24:48.520 --> 24:50.440
And this is really important.

24:50.440 --> 24:54.640
So for I from, we start lists with one.

24:54.640 --> 25:01.160
So let me start at one for I from one to the length of the samples of my recording.

25:01.160 --> 25:02.520
I want to do something.

25:02.520 --> 25:07.240
And the something I want to do is let's make it louder, maybe.

25:07.240 --> 25:09.200
Let's try this.

25:09.200 --> 25:12.000
So I want to create a new sound.

25:12.000 --> 25:18.560
And I call this new sound.

25:18.560 --> 25:23.360
And I set the new sound to an empty list.

25:24.320 --> 25:29.200
Okay, now maybe I do want to.

25:29.200 --> 25:31.040
So I set the sound to an empty list.

25:31.040 --> 25:33.840
And now I want to add stuff to my sound.

25:33.840 --> 25:37.840
And what I want to add is the value that I had before.

25:37.840 --> 25:43.840
So item I of the samples of the recording.

25:43.840 --> 25:46.200
And I want to multiply them with the factor.

25:46.200 --> 25:52.880
So increasing the number that's in the in the sample makes the sound louder times.

25:53.880 --> 25:59.760
So let's try times five maybe and hope I don't fry anything.

26:01.400 --> 26:03.760
And then I want to add that to my new sound.

26:05.520 --> 26:08.240
When I do it like that, it's pretty slow.

26:09.240 --> 26:12.520
So as you see, this runs rather slowly.

26:12.520 --> 26:16.840
So we have this, what we call the warp block that just speeds up things.

26:16.840 --> 26:18.880
So let me wrap this around here.

26:18.880 --> 26:22.240
And now I can have my new sound.

26:22.240 --> 26:23.960
And I hope that it's louder than the one before.

26:23.960 --> 26:25.160
So this was the one before.

26:25.160 --> 26:26.160
Hello.

26:26.160 --> 26:28.040
Can you even hear that?

26:30.360 --> 26:30.880
Hello.

26:32.400 --> 26:34.120
Okay, now let's try the louder one.

26:38.960 --> 26:40.440
Hello.

26:40.440 --> 26:41.200
Definitely louder.

26:41.200 --> 26:44.920
So we can use that way to change media.

26:44.920 --> 26:48.120
But we also want to support, as I mentioned, other ways of thinking.

26:48.120 --> 26:51.800
So what we have down here, and this is where the lambda that Alonso has,

26:51.800 --> 26:55.360
comes into play is the map block.

26:55.360 --> 26:59.320
So this is a higher order function, a function that takes another function as an input.

26:59.320 --> 27:02.640
And we represent this function with these gray rings.

27:02.640 --> 27:05.920
This is like a lot of the rings, one ring to rule them all metaphor.

27:05.920 --> 27:11.440
So this is what gives the power to one of the powers to snap.

27:11.440 --> 27:15.480
And we can use data here in the second input slot.

27:15.480 --> 27:20.520
So what I could use is again, let me just duplicate that, the samples of my sound.

27:20.520 --> 27:25.240
And now I can add another function down here.

27:25.240 --> 27:28.280
Let's do the apps function maybe.

27:31.440 --> 27:34.480
So this gives back the absolute value.

27:34.480 --> 27:36.640
And now I can play that sound as well.

27:40.440 --> 27:40.920
Hello.

27:42.960 --> 27:47.400
So you can hear that I sound more like when I don't have air through my nose.

27:47.400 --> 27:50.120
So you can make sound effects like that.

27:50.120 --> 27:52.880
And then the last way is the one that Jens already mentioned, and

27:52.880 --> 27:55.080
I didn't come up with the third effect.

27:55.080 --> 27:58.320
So I'm just going to use apps again.

27:58.320 --> 28:03.760
You can just drop lists like vectors into functions directly.

28:03.760 --> 28:10.800
So I could just drop this one in here to create the exact same effect.

28:12.280 --> 28:14.200
You could use floor.

28:14.200 --> 28:15.080
I could use floor.

28:16.040 --> 28:16.560
What?

28:18.480 --> 28:19.760
Let's try that.

28:27.920 --> 28:28.600
Beautiful.

28:28.600 --> 28:36.360
Okay, so this is just, I think this is just negative ones, zeros and ones.

28:36.360 --> 28:40.440
So with only three different values, you can still kind of understand the sound.

28:40.840 --> 28:48.800
Because what I said, because the pattern is represented by the way the samples are arranged.

28:48.800 --> 28:51.680
And not by the actual values in the samples.

28:51.680 --> 28:56.080
Okay, and you can also do that with more complex data.

28:56.080 --> 28:58.560
So we can also access the webcam from Snap.

28:58.560 --> 29:00.760
And I can try the same thing with the camera.

29:02.760 --> 29:04.400
Maybe I can try the same thing with the camera.

29:05.400 --> 29:10.560
Maybe we'll just unplug this real quick and I take a picture.

29:30.080 --> 29:31.240
Okay, we broke the webcam.

29:34.880 --> 29:38.560
So let's leave it at that.

29:38.560 --> 29:42.080
So let's go over and I tell you you can do it with graphic effects.

29:42.080 --> 29:46.480
And if you want, we have a workshop later come by and I'll show you how it works with

29:46.480 --> 29:49.320
graphic effects or photos.

29:49.320 --> 29:53.800
Okay, and then stuff that we are currently working on is AI.

29:53.800 --> 29:58.160
Since this is the big thing and the schools wanted, universities wanted.

29:58.160 --> 30:03.280
So we had to come up with resources that they could use to teach artificial intelligence.

30:03.280 --> 30:06.000
And I wanted to show you one that we've developed last year and

30:06.000 --> 30:08.120
it's available in German and English.

30:08.120 --> 30:11.800
You can download it from the internet.

30:11.800 --> 30:20.240
And it's a detailed walkthrough guide on how you can use that in a classroom setting.

30:20.240 --> 30:23.680
And how to program the whole thing, some ideas on what you could do with it.

30:23.680 --> 30:27.120
And we call it grant gestures.

30:27.120 --> 30:32.520
So it's a simple gesture recognizer program based on the $1 gesture

30:32.560 --> 30:33.360
recognizer.

30:33.360 --> 30:38.680
I don't know whether you know that, but it's a prototyping gesture

30:38.680 --> 30:43.480
recognizer for Unistro gestures, things that you can draw in one line.

30:43.480 --> 30:47.520
And I already prepared something like a TV cook.

30:47.520 --> 30:53.120
So I have this project here already and this is a simple drawing program.

30:53.120 --> 30:56.680
When I click on the stage, so we call this window here the stage, then it'll

30:56.680 --> 30:59.360
broadcast the word sketch.

30:59.480 --> 31:02.800
And when I receive the word sketch here, I'm reacting to that and

31:02.800 --> 31:04.880
I can actually draw something.

31:05.880 --> 31:11.240
Yeah, since some of you are sitting really far away,

31:11.240 --> 31:13.640
let's just increase the pen size a bit.

31:15.600 --> 31:18.440
Yeah, so I can draw stuff here.

31:18.440 --> 31:22.800
And what I already also prepared is I'm storing values in a variable.

31:22.800 --> 31:26.800
What you can see here is I have the sketch variable that I can also show.

31:26.800 --> 31:31.920
It's 164 points and it's the position that my sprite,

31:31.920 --> 31:34.680
the object that I'm programming went to.

31:36.240 --> 31:41.800
And now I also have this examples variable here where I already

31:41.800 --> 31:48.400
stored a few examples and this is always a path and a word that's attached to

31:48.400 --> 31:51.200
this path, so basically a label for that path.

31:51.200 --> 31:56.680
And now I want to create a few more things and then we're going to animate them.

31:56.680 --> 31:58.280
Can you hold the microphone again, please?

31:58.280 --> 31:59.120
Thanks.

32:01.120 --> 32:04.600
So to create an animation, let's start with the animation.

32:04.600 --> 32:09.160
We gave you a block here that we call animate and here you can also see again

32:09.160 --> 32:10.640
one of the awesome things in Snap.

32:10.640 --> 32:12.760
You can make your own control structures.

32:12.760 --> 32:17.120
So this is a C-shaped block like control structures, some control

32:17.120 --> 32:18.960
structures look in Snap.

32:18.960 --> 32:23.520
And this is a custom block that runs actions that you can put here into

32:23.520 --> 32:27.680
the C-shaped input slot and we made this block.

32:27.680 --> 32:32.560
And what it does is it takes what I've drawn and puts it on as a costume.

32:32.560 --> 32:38.120
So the costume is an image that the sprite is wearing and then it does something.

32:38.120 --> 32:41.920
So when I draw a heart, I want it to have a heartbeat.

32:41.920 --> 32:46.280
So increase the size a bit and then decrease the size in one step.

32:46.280 --> 32:51.800
So increasing the size, I do with the change size by 10 block and

32:51.800 --> 32:56.800
I do that 10 times and then I reset the stage.

32:56.800 --> 33:02.200
And since hearts are bumping like twice, I want to do this two times.

33:02.200 --> 33:07.240
And if I put that into the animate block, you see that I can do that with the drawing

33:07.240 --> 33:08.080
that I just made.

33:08.080 --> 33:13.560
So I can draw something and it takes this actual drawing and does something with it.

33:13.560 --> 33:18.800
And now I want to trigger this reaction whenever I receive the message heart.

33:19.800 --> 33:25.520
Okay, this is what's supposed to happen, but now I need to identify this heart.

33:25.520 --> 33:30.440
So we want to find out how these paths work and

33:30.440 --> 33:34.680
to see that I can render what I've drawn.

33:34.680 --> 33:38.920
So this is also a block we prepared and I can just put my sketch in here and

33:38.920 --> 33:43.600
I can render that and I see that the points through my path are not very well

33:43.600 --> 33:44.320
distributed.

33:44.320 --> 33:47.480
So I draw really slowly at the beginning and the end and

33:47.480 --> 33:48.960
then I was really fast here.

33:48.960 --> 33:53.480
So to really make them comparable, it's important that we have, we normalize them.

33:53.480 --> 34:01.120
So we have this resample block here and now I could resample my sketch to 64 points.

34:01.120 --> 34:07.760
And this evenly distributes the path between my,

34:07.760 --> 34:09.440
like the points on the path.

34:09.440 --> 34:17.320
Yeah, so now I can use that to train my algorithm here a bit more on my

34:17.320 --> 34:18.480
program a bit more.

34:18.480 --> 34:21.120
So here this is what I've drawn was a heart.

34:22.640 --> 34:28.480
So let me draw a new one and I can now add that to my examples.

34:28.480 --> 34:29.560
Let's add another one.

34:30.680 --> 34:37.680
Okay, and now I need to recognize this heart in all my examples.

34:39.000 --> 34:42.720
We also prepared a block for that, but you could build it yourself if you wanted to.

34:42.720 --> 34:45.280
This is the recognized block.

34:45.280 --> 34:52.040
And this recognized block looks for the smallest difference between two shapes.

34:52.040 --> 34:57.480
Like it's measuring the distance between the first point in the first path and

34:57.480 --> 34:59.680
the first point in the second path.

34:59.680 --> 35:04.280
And then adds up all the differences between the points and reports the one

35:04.280 --> 35:08.640
that has like the label of the one that has the smallest difference.

35:08.640 --> 35:12.800
And we can just use that as an input to the broadcast block.

35:12.800 --> 35:14.680
So let me just show this real quick.

35:16.120 --> 35:22.800
I'm recognizing my resampled sketch which is the heart that I've just drawn

35:22.800 --> 35:24.240
in all my examples.

35:24.240 --> 35:29.120
And since this is the heart that I've just stored,

35:29.120 --> 35:32.240
it should report back the heart which it does.

35:32.240 --> 35:34.840
I can try another thing.

35:36.040 --> 35:37.360
So this is also the heart.

35:37.360 --> 35:39.120
I also wrote down FOSSTEM.

35:39.120 --> 35:41.120
So let me try to write FOSSTEM.

35:42.520 --> 35:44.840
Writing is really hard on a touchpad.

35:44.840 --> 35:46.000
So this reports FOSSTEM.

35:46.000 --> 35:47.200
Great, seems to work.

35:48.400 --> 35:52.520
And now I can just broadcast this thing.

35:53.680 --> 35:59.080
And we want kids, people who use that to tell stories with it.

35:59.080 --> 36:02.640
So this is supposed to be an interactive storytelling project.

36:02.640 --> 36:08.280
And the story that I just came up with was, how did it work again?

36:08.280 --> 36:09.120
Let me check.

36:11.120 --> 36:12.160
Ah, yeah, okay.

36:12.160 --> 36:14.720
The weather in Brussels is not really nice.

36:14.720 --> 36:15.880
It's raining all day.

36:17.200 --> 36:19.880
And I'm sitting in dark buildings all day.

36:24.760 --> 36:31.120
But still, I love to be with you at FOSSTEM.

36:36.960 --> 36:37.960
Okay.

36:37.960 --> 36:45.760
So this is a resource that we've been working with again to also inspire people who might

36:45.760 --> 36:49.240
not be the traditional audiences for programming.

36:49.240 --> 36:52.320
But it's also pretty cool if you are a programmer and love math,

36:52.320 --> 36:53.840
you can still do stuff with it.

36:53.840 --> 36:59.440
And now I would hand over to Jens to tell you what we're venturing for next.

37:00.840 --> 37:02.040
Thank you, Jette Gah.

37:02.040 --> 37:04.080
I also love to be at FOSSTEM.

37:04.080 --> 37:05.080
This is so cool.

37:05.480 --> 37:16.000
So you might see, you know, this isn't really about an algorithm about using AI,

37:16.000 --> 37:19.440
about using a large language model.

37:19.440 --> 37:27.360
What we're trying to do is to sort of at least lift the lid a little bit to let you see a

37:27.360 --> 37:29.920
little bit underneath the hood.

37:29.960 --> 37:39.000
So for us, it's not about upskilling youth to be employable, but it's about bringing

37:39.000 --> 37:44.960
across a sense of awe and wonder about what you can do and maybe letting you reflect about

37:45.160 --> 37:45.560
things.

37:45.560 --> 37:53.840
So now, since it's been mentioned for two years, generative AI is this big thing with

37:53.840 --> 37:55.760
chat, GPT being everywhere.

37:56.320 --> 38:04.120
And it really boils down to, as we've seen before, language, even textual language being

38:04.120 --> 38:05.240
the basis for everything.

38:05.240 --> 38:11.680
And we thought, well, yeah, that's nice, but it's, we love language, but we also love

38:11.680 --> 38:12.640
structure.

38:13.240 --> 38:23.040
And so one thing that we've tried to come up is with a activity that is more on the basis

38:23.080 --> 38:28.400
of these language projects, which really is a next token prediction system.

38:28.800 --> 38:33.840
And that might lead us up to experiencing and learning something about the really

38:33.840 --> 38:36.360
generality of AI.

38:36.720 --> 38:40.760
So it's all inspired by a wonderful little project.

38:40.760 --> 38:48.640
I have to kind of give them credit by Michael Hilsche from Peha, Schweiz, who, this wonderful

38:48.640 --> 38:52.080
project, Zykia GPT, you all have to look at it.

38:52.480 --> 38:59.400
And so this is what we're trying to do is now build something like chat GPT ourselves

38:59.960 --> 39:01.600
and on little data.

39:01.640 --> 39:04.440
So we don't actually have to use chat GPT.

39:04.760 --> 39:11.000
So here's something I scourged the internet for 30 fairy tales of the brother's

39:11.000 --> 39:11.320
grim.

39:11.320 --> 39:13.800
And here's the English version of these 30 fairy tales.

39:13.800 --> 39:16.440
It's not a huge corpus, but 30 fairy tales.

39:17.120 --> 39:18.680
And it's just a text.

39:19.080 --> 39:25.160
And in order to work with this and turn this into an AI, I need to split these 30 fairy

39:25.160 --> 39:27.760
tales into a list of words.

39:29.920 --> 39:33.720
So now I've got a list of words like 58,000 words.

39:34.920 --> 39:38.160
And so sevens, waybians were once together.

39:38.200 --> 39:42.680
OK, so just a list of words doesn't give us a lot.

39:42.680 --> 39:50.240
So in order to use this in a language AI, we have to do some statistical analysis.

39:50.240 --> 39:56.720
And the way we do statistical analysis is by we're grouping these words by their sequences.

39:58.000 --> 40:04.440
They're called like pairs or triples or bigrams, trigrams, tetragrams.

40:04.760 --> 40:06.800
So, you know, it's build your own blocks.

40:06.800 --> 40:10.480
So I'm going to, can you please hold again, I'm going to make a category.

40:10.480 --> 40:10.920
Wow.

40:11.160 --> 40:17.600
I'm going to make a category that's called, be called generative AI.

40:17.920 --> 40:22.840
And I want to build this one function that I'm using.

40:22.920 --> 40:26.120
And it's the, it's going to be a function.

40:26.160 --> 40:31.040
It's going to be the n grams of a corpus.

40:32.160 --> 40:35.400
And n is going to be an input.

40:35.400 --> 40:37.880
It's going to be a number like two or three or five.

40:38.240 --> 40:41.840
And the corpus is what's going in the language thing.

40:41.840 --> 40:43.000
It's a list of words.

40:44.320 --> 40:53.840
So what I want to do is I want to get the numbers from zero to the length of the corpus to go through all of this.

40:54.400 --> 40:57.920
But I don't need the full length.

40:57.920 --> 41:05.640
I can decrease it by the n that I'm looking for minus one.

41:06.360 --> 41:09.560
Now I want to take this as an input to map.

41:11.920 --> 41:15.600
So I'm taking these numbers and for every of these numbers.

41:16.920 --> 41:25.080
So when I have a list, list of the numbers one to ten, item one is the number one.

41:25.080 --> 41:34.920
But if I put in a list of, of, of items to check, like three or six, I'm getting a list of, of individual items in there.

41:34.920 --> 41:36.480
So I can slice my input.

41:36.920 --> 42:03.120
So what I want to do is I want to get the item, whichever the number is, the numbers, whichever the numbers is, two n minus one of my corpus.

42:04.000 --> 42:04.960
This is what I want to do.

42:04.960 --> 42:08.440
So this is the function, the n-gram function.

42:08.440 --> 42:09.400
Let's actually try this.

42:10.280 --> 42:15.560
Here's the n-grams, like let's, let's go to the bigrams of my 30 fairy tales.

42:16.560 --> 42:17.360
Click on this.

42:17.880 --> 42:19.800
See, oh, seven Swabians.

42:19.920 --> 42:22.120
Swabians were, were once.

42:22.520 --> 42:23.040
You get it?

42:23.040 --> 42:24.200
It's kind of broken up.

42:24.600 --> 42:27.320
I can also do this for four.

42:28.040 --> 42:28.840
So now I'm getting seven.

42:28.840 --> 42:30.040
Swabians were once.

42:30.080 --> 42:31.320
Swabians were once together.

42:31.720 --> 42:32.680
You get the idea, right?

42:32.680 --> 42:38.000
So, so, so this breaks up the corpus into these little sequences of words.

42:38.440 --> 42:40.720
Now I want to do a statistical language model.

42:41.120 --> 42:45.840
So to do a model, I'm going to make a variable called model.

42:46.680 --> 42:58.400
And what the model should do is the model should be, let's actually hide this, should be several variants of this, not just bigrams or trigrams, but let's go all the way to five.

42:58.880 --> 43:03.360
So I'm going to say the model is going to be another map block.

43:04.760 --> 43:07.600
Map the n-grams.

43:07.600 --> 43:11.960
I'm going to leave this blank over the numbers from one to five.

43:12.240 --> 43:15.160
So let's actually just run this once.

43:15.880 --> 43:17.960
So now let's look at this model.

43:18.320 --> 43:20.880
Now this model is a kind of weird looking table.

43:20.880 --> 43:25.400
If I format this a little bit different, you can see it's a five item list.

43:25.400 --> 43:27.640
The first item is like though.

43:29.400 --> 43:32.840
Unigrams, bigrams, trigrams.

43:33.560 --> 43:35.240
Five is great because tetragrams.

43:35.240 --> 43:38.600
That sounds like diabolic pentagrams, right?

43:39.320 --> 43:39.960
Pentagrams.

43:40.800 --> 43:42.920
So it's a sort of a cascade of a model.

43:43.080 --> 43:52.160
And I can also try this like the item one of the model, you know, is a list with one, the item three of the models list with three.

43:52.280 --> 43:52.520
Okay.

43:53.120 --> 43:57.080
So this is really the heart of a statistical language model.

43:57.600 --> 44:00.960
Because now, for example, let's take a list.

44:01.040 --> 44:03.280
Let's take a list of words.

44:04.040 --> 44:14.560
Let's say the king's daughter.

44:16.080 --> 44:22.480
So we want to see what's a good way to find out how to complete a sentence that starts with the king's daughter.

44:22.880 --> 44:34.000
So we could look for, you know, in all these, in these four grams, whether anything starts with the first words like, oh, the king's daughter and then find out which words come.

44:34.120 --> 44:35.080
Let's actually do this.

44:35.440 --> 44:44.600
So this is keep in my model of four, something that is equal to the king's daughter.

44:45.480 --> 44:53.400
And we want to find out the items with the numbers from one to four.

44:53.880 --> 44:54.440
Okay.

44:54.440 --> 44:56.400
Let's, let's try this.

44:59.120 --> 44:59.920
One, two, three.

45:00.440 --> 45:00.880
You see.

45:01.360 --> 45:03.800
So we see, oh, there's a bunch of sentences.

45:03.840 --> 45:07.440
The king's daughter came is began, love said again came.

45:07.440 --> 45:12.440
So you see, there are several times sometimes the same thing in there.

45:12.680 --> 45:26.520
So we could say, okay, we could just take, you know, the last item of a random element of these things that we get to complete that sentence.

45:26.520 --> 45:29.720
So we can say the king's daughter came, the king's daughter laugh.

45:30.160 --> 45:38.840
And this is basically finding next token, something that has been used in that context before.

45:38.960 --> 45:43.720
So I've made a little block for that, which I'm going to import that does that.

45:43.760 --> 45:46.320
It's the next token block.

45:46.360 --> 45:48.000
It's literally just that.

45:48.040 --> 45:51.560
And now we could build something like chat to PTRself.

45:51.560 --> 45:56.680
So we could say, okay, when the green flag is clicked, ask.

45:59.600 --> 46:06.480
Enter the beginning of a tail and wait.

46:06.600 --> 46:13.000
And then when the user enters said, we're setting, oh, we need to make a new variable.

46:15.000 --> 46:16.960
That is going to be a tail.

46:17.480 --> 46:28.600
And we're going to set the tail to what the user entered, which is the answer.

46:29.880 --> 46:31.960
And we're going to split that by the word.

46:32.960 --> 46:45.440
And then what we want to do is we want to take the next token in that tail based on the model.

46:46.440 --> 46:51.440
And we want to add that to the tail.

46:55.440 --> 46:57.960
And then we want to say the thing, right?

46:57.960 --> 47:07.960
So we want to say the text of the tail, that just so we don't see a list, but we see a nice text.

47:07.960 --> 47:09.960
We want to say that.

47:09.960 --> 47:18.960
And we could say, okay, how about we do this when I receive next.

47:19.960 --> 47:21.960
And here we broadcast next.

47:22.960 --> 47:29.960
And then whenever the user presses space key, we also broadcast next.

47:29.960 --> 47:30.960
Okay.

47:30.960 --> 47:35.960
So, well, let's try this.

47:35.960 --> 47:36.960
Does it work?

47:36.960 --> 47:38.960
Enter the beginning of a new tail.

47:38.960 --> 47:45.960
Once upon, ah, once upon a time.

47:45.960 --> 47:56.960
So now whenever I press space, it is continuing this and it creates fairy tales.

47:56.960 --> 48:04.960
Sometimes it'll stick to one fairy tale pretty long, but since it only has a context of about five words,

48:04.960 --> 48:11.960
it keeps forgetting which fairy tale it's in and then just finds something else that is plausible linguistically,

48:12.960 --> 48:14.960
but maybe not from the story.

48:14.960 --> 48:18.960
And so you all know, right?

48:18.960 --> 48:26.960
This is not how chatGPT really works, but it's a statistical language model and the similarities are actually striking.

48:26.960 --> 48:30.960
This is what they call a Markov text generator, Markov chain text generator.

48:30.960 --> 48:39.960
And it has like a GPT model, a transformer model is just this except a little bit more complicated.

48:39.960 --> 48:45.960
It has a longer context and it has some neural networks that makes itself aware,

48:45.960 --> 48:52.960
so it kind of doesn't just take the last n words, but kind of knows, has a little more memory and distinguishes,

48:52.960 --> 48:56.960
which things are more important, but it's literally just making up stuff.

48:56.960 --> 49:00.960
It doesn't have any idea about the language it is written in.

49:00.960 --> 49:17.960
So when, for example, I take 30 fairy tales in German and instead of these 30 fairy tales in English,

49:17.960 --> 49:26.960
I'm doing the model in German and now, yeah, I'm just saying, you know, I don't care.

49:26.960 --> 49:31.960
So now it's going to speak German, right?

49:31.960 --> 49:35.960
Because it's been trained on these German fairy tales.

49:35.960 --> 49:39.960
And so it's not about language, it's about statistics.

49:39.960 --> 49:45.960
And so again, we could think that this is all about language, but at the core,

49:45.960 --> 49:51.960
it's about finding things that correlate with other things.

49:51.960 --> 50:01.960
So we thought, well, wouldn't it be nice if this were also a good pedagogical model for an AGI,

50:01.960 --> 50:06.960
for something that is more general, not really super intense, but more general.

50:06.960 --> 50:09.960
So there's lots of sequential data.

50:09.960 --> 50:15.960
One thing that I think every hacker loves, I don't know, is music.

50:16.960 --> 50:22.960
So here's, I transcribed 20 songs.

50:22.960 --> 50:27.960
And these songs aren't just words, they're notes.

50:27.960 --> 50:34.960
And so the notes are, you know, there's a pitch, a mini-pitch, and there's a duration, how many beats.

50:34.960 --> 50:44.960
So what if instead of these words, we just took these notes and shopped them up into a bunch of n-grams

50:44.960 --> 50:49.960
and, well, okay, so I prepared this little script that does that.

50:49.960 --> 50:54.960
It's the music improvisation script.

50:54.960 --> 51:03.960
So this takes the 20 songs, chops it up, uses the exact same blocks, like the n-grams, and the next token block.

51:03.960 --> 51:08.960
The exact same thing. And remember, the data is differently dimensioned.

51:08.960 --> 51:11.960
It's not a single list. It's a multi-dimensional list.

51:11.960 --> 51:14.960
I'll try whether it does something.

51:27.960 --> 51:32.960
So you sort of see, it's like me whistling, you know, ah, there's this, oh no, there's this other thing.

51:32.960 --> 51:37.960
Let's kind of go and do some funny associations.

51:38.960 --> 51:41.960
But it's already beyond language.

51:41.960 --> 51:46.960
It's already generalizing the principle of finding the next meaningful token.

51:46.960 --> 51:49.960
So we thought, okay, wow, this is nice.

51:49.960 --> 51:52.960
So what about pictures?

51:52.960 --> 51:54.960
Could it work with pictures?

51:54.960 --> 51:57.960
I mean, pictures aren't sequences.

51:57.960 --> 52:00.960
They're a plane with multi-dimensional.

52:00.960 --> 52:02.960
But you know what's a sequence.

52:02.960 --> 52:05.960
Sketching something is a sequence.

52:05.960 --> 52:09.960
So we thought, why don't we take the sketching thing?

52:09.960 --> 52:21.960
But instead of mapping coordinates, we remember for each line segment the direction it went to.

52:21.960 --> 52:31.960
So let me again kind of write something like an honor of, so, hello.

52:32.960 --> 52:37.960
So now I have the sketch in this model.

52:37.960 --> 52:48.960
And let's try to find out if we do the exact same thing that we did with the music by now doing a sketch program,

52:48.960 --> 52:50.960
training it on just this little data.

52:50.960 --> 52:56.960
Oh, it tries to imitate my handwriting and does something that sort of looks like I'd written it.

52:56.960 --> 53:00.960
And there's, it's going to be different kind of the next time.

53:00.960 --> 53:02.960
And it's sort of fun.

53:02.960 --> 53:06.960
It is finding some meaningful next tokens.

53:06.960 --> 53:09.960
And at this time we were really, really having fun.

53:09.960 --> 53:12.960
And we thought, well, what if we don't just write something?

53:12.960 --> 53:20.960
What if we, like Bernat's idea was, what if we, for example, draw something that already kind of makes sense?

53:20.960 --> 53:29.960
Like, let's draw something that looks like a tower, something that looks like a castle.

53:30.960 --> 53:36.960
Whatever, a roof and a moat.

53:36.960 --> 53:39.960
So here's a little thing that I drew.

53:39.960 --> 53:46.960
Let's try to find out how we can do a skyline.

53:46.960 --> 53:47.960
Isn't that cool?

53:47.960 --> 53:53.960
And that's almost, you know, a glimpse of, it doesn't matter about language.

53:53.960 --> 54:00.960
The secret is to seek when

54:23.960 --> 54:28.960
you're in a building.

54:28.960 --> 54:31.960
You can't get out of the building.

54:31.960 --> 54:33.960
You can't get out of the building.

54:33.960 --> 54:35.960
You can't get out of the building.

54:35.960 --> 54:37.960
You can't get out of the building.

54:37.960 --> 54:39.960
You can't get out of the building.

54:39.960 --> 54:41.960
You can't get out of the building.

54:41.960 --> 54:43.960
You can't get out of the building.

54:43.960 --> 54:45.960
You can't get out of the building.

54:45.960 --> 54:47.960
You can't get out of the building.

54:47.960 --> 54:49.960
You can't get out of the building.

54:49.960 --> 54:51.960
You can't get out of the building.

54:52.960 --> 54:53.960
No, you can't get out of the building.

54:54.960 --> 54:56.960
You can't get out of the building.

54:56.960 --> 55:15.960
like you want to edit it.

55:15.960 --> 55:26.960
How do you visualize what change?

55:26.960 --> 55:42.960
This is a list of numbers.

55:43.960 --> 55:52.960
What do you want to do?

55:52.960 --> 56:08.960
Do you think the delta between the change of your graph and the numbers?

56:08.960 --> 56:21.960
How do we do the software engineering spiel?

56:21.960 --> 56:33.960
We don't teach children about version control. We teach children powerful ideas.

56:33.960 --> 56:43.960
There is a version that is called SMURGE.

57:03.960 --> 57:27.960
We are mixing up the graphics towards refining the code.

57:27.960 --> 57:37.960
Do you have examples of the SNAP?

57:37.960 --> 57:47.960
We have the gesture recognizer including all the materials you need for school.

57:47.960 --> 58:06.960
We are working on the SNAP GPT thing that will be published in a few weeks.

58:06.960 --> 58:22.960
If you want, you can search for projects like the grand gestures.

58:22.960 --> 58:32.960
Here is the project.

58:32.960 --> 58:52.960
Go to snap.berkeley.edu and use the search bar.

59:02.960 --> 59:26.960
I am not aware of any other block space programming language offering the notion of procedure as data.

59:26.960 --> 59:46.960
We have data. We are more like researchers.

59:46.960 --> 59:56.960
We do not teach kids lambda. We use lambda to build blocks that kids can use.

59:56.960 --> 01:00:06.960
In higher classes, there is a curriculum that is used as an advanced placement course.

01:00:06.960 --> 01:00:16.960
We will use higher order functions totally.

01:00:16.960 --> 01:00:36.960
We have a high school version of that. They have a middle school curriculum for seventh graders.

01:00:36.960 --> 01:00:46.960
Thank you everybody. See you next year.

