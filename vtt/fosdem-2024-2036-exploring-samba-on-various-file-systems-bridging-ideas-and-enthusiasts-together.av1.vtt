WEBVTT

00:00.000 --> 00:12.840
Hello everyone, I am Shweta, I work under work in IBM, I come from Bangalore, India.

00:12.840 --> 00:18.960
I started work, I started my profession working with GlusterFS, Gluster file system and I

00:18.960 --> 00:27.080
gradually moved on to Glustergeore application and I maintained that for Red Hat.

00:27.080 --> 00:32.160
On behalf of IBM, I started work, I started exploring new projects.

00:32.160 --> 00:35.040
One of them is Samba on Kubernetes.

00:35.040 --> 00:40.200
So here is the introductory talk on the same.

00:40.200 --> 00:43.580
So the title is exploring Samba on various file system.

00:43.580 --> 00:46.220
So bridging ideas and enthusiasts together.

00:46.220 --> 00:50.280
So yeah, let's try to understand what is Samba.

00:50.280 --> 00:55.240
So first of all, you might have heard the last talk or if at all now, then I will just

00:55.240 --> 00:57.040
start from the introduction.

00:57.040 --> 01:00.360
Samba stands for server message block.

01:00.360 --> 01:04.720
It's a protocol used for sharing resources over a network.

01:04.720 --> 01:12.320
So in other words, I can simply say that it is what NFS to the UNIX, it is same to the

01:12.320 --> 01:13.400
Windows word.

01:13.400 --> 01:16.920
So both are different protocols.

01:16.920 --> 01:19.880
And NFS stands for network file system.

01:19.880 --> 01:21.560
So this is basically the same.

01:21.560 --> 01:24.680
We can share the resources over a network.

01:24.680 --> 01:29.760
That is, user on a client can access the file, as if he is accessing the file from a local

01:29.760 --> 01:31.360
storage.

01:31.360 --> 01:36.400
So these are the two terms that we had to be aware of.

01:36.400 --> 01:40.720
So next, so we just came to know about two different protocols used by Windows and UNIX

01:40.720 --> 01:41.720
systems.

01:41.720 --> 01:44.000
Now, here comes a question.

01:44.000 --> 01:48.280
So what if we want to use two different operating systems in the same network?

01:48.280 --> 01:55.120
What if we want to share a same resource with a Windows server and a Linux client or a Linux

01:55.120 --> 01:56.960
server and Windows client?

01:56.960 --> 01:59.720
We know they use different protocols for communication.

01:59.720 --> 02:03.360
That is, it's just like they speak two different languages.

02:03.360 --> 02:06.520
Now how can they communicate with each other?

02:06.520 --> 02:13.760
So this was the problem statement that Dr. Andrew Trigel found interesting to work on.

02:13.760 --> 02:20.600
So he just wanted to connect his UNIX server with his wife's Windows machine.

02:20.600 --> 02:24.800
So he just started exploring what is SMB.

02:24.800 --> 02:26.400
He wrote a packet sniffer.

02:26.400 --> 02:32.160
With this packet sniffer, he could analyze what is going on in this network, at what

02:32.160 --> 02:37.440
frequency the packets are passed, what he could also intercept the logs and understand

02:37.440 --> 02:42.760
what is the pattern in which these data packets are traveling in the network.

02:42.760 --> 02:48.040
So with all the insights he got from this network sniffer, he just wrote a software

02:48.040 --> 02:56.560
that could help make his UNIX server look like a Windows server so that Windows client

02:56.560 --> 03:03.400
could access files from a UNIX server.

03:03.400 --> 03:10.040
So basically this turned out to be a project where it was an inter-polarability project

03:10.040 --> 03:18.840
where a Windows system as well as a UNIX system could communicate with each other and share

03:18.840 --> 03:20.800
the resources together.

03:20.800 --> 03:26.400
So here, majorly he could solve his own problem of sharing his house printer with his wife

03:26.400 --> 03:28.400
who was owning Windows PC.

03:28.400 --> 03:32.840
So this is how the project Samba was born.

03:32.840 --> 03:38.560
He just wanted to use the words SMB, the server message block, and create a word.

03:38.560 --> 03:41.560
That was Samba.

03:41.560 --> 03:45.720
Now let's come to the implementations of it.

03:45.720 --> 03:50.800
So firstly, how Samba is set up with file system.

03:50.800 --> 03:54.760
So here you can see that we are talking about a clustered file system.

03:54.760 --> 03:59.280
So these are basically the server and each server is installed with file system.

03:59.280 --> 04:03.520
It can be cluster, CFFS or any file system.

04:03.520 --> 04:07.400
And as you know that they are clustered, that means they are internally connected with the

04:07.400 --> 04:08.400
private network.

04:08.400 --> 04:12.240
They might be following their own principle for that.

04:12.240 --> 04:20.000
And once we install this file system, we will be installing CTDB on top of it and we will

04:20.000 --> 04:21.480
be configuring this CTDB.

04:21.480 --> 04:26.240
CTDB is nothing but a clustered TBD, clustered trivial database.

04:26.240 --> 04:28.000
It is basically written for Samba.

04:28.000 --> 04:35.000
It stores some of the temporary data that is used by Samba.

04:35.000 --> 04:41.880
This could be information about leases, logs, or some IP addresses and such stuff.

04:41.880 --> 04:47.280
And it also will make sure that all this data required by Samba is highly available.

04:47.280 --> 04:49.600
So that is basically the work of CTDB.

04:49.600 --> 04:53.120
And upon CTDB, we will have to configure Samba.

04:53.120 --> 05:01.200
So in Samba, you will have to configure a share, username, user password, etc.

05:01.320 --> 05:08.560
Share will be nothing but a mount which you will be using and where the resources will

05:08.560 --> 05:09.560
be.

05:09.560 --> 05:18.720
And user and password are necessary because this Samba can also act as domain controller.

05:18.720 --> 05:23.840
That is it can control the security-wise decisions.

05:23.840 --> 05:27.480
Like which user can I allow to access this resource?

05:27.920 --> 05:33.720
So that is what it is doing.

05:33.720 --> 05:35.120
And next, okay.

05:35.120 --> 05:40.440
So we just learnt what is Samba and how it is installed and how it works with the FILE

05:40.440 --> 05:41.440
system.

05:41.440 --> 05:46.160
So basically it is a business solution.

05:46.160 --> 05:55.680
So we know that in an enterprise level solution, we do not see that only Unix servers or only

05:55.680 --> 05:57.760
Windows server communicating with each other.

05:57.760 --> 06:00.080
So there can be a lot of clients.

06:00.080 --> 06:02.920
There can be a Windows client, there can be a Unix client.

06:02.920 --> 06:07.560
Everyone trying to communicate or everyone trying to use the resource from a particular

06:07.560 --> 06:08.560
server.

06:08.560 --> 06:11.040
And they can be again Windows or Linux.

06:11.040 --> 06:21.400
So in this case, SITE is an Test Integration Environment that is basically set up to test

06:21.400 --> 06:25.560
this Complicment Setup of Samba.

06:25.560 --> 06:30.120
This will include a lot of servers, a lot of clients and a lot of projects like maybe

06:30.120 --> 06:35.200
GlucidFS, CFFS, CTDB or Samba itself.

06:35.200 --> 06:40.800
And it can also include multiple configurations of Samba, multiple configurations of FILE

06:40.800 --> 06:41.800
system.

06:41.800 --> 06:45.800
So it was very convenient to automate this.

06:45.800 --> 06:51.080
If we might spend a lot of manhours to manually create this setup.

06:51.080 --> 06:56.760
So this was very convenient way for us to create an automated environment.

06:56.760 --> 07:04.840
So any system that has the softwares like Vagrant, Libvert and Ansible can help you

07:04.840 --> 07:05.840
run this project.

07:05.840 --> 07:07.760
That is SITE environment.

07:07.760 --> 07:14.920
And we might need a minimal resources like 2 to 4 GB for storage VMs and a minimum 1 GB

07:14.920 --> 07:15.920
for other VMs.

07:15.920 --> 07:21.800
We can also have other VMs which act as clients or which contain the scripts that are required

07:21.800 --> 07:24.320
to run this test.

07:24.320 --> 07:32.040
So also we can use this, as I said, we can use this for creating custom Samba environment.

07:32.040 --> 07:34.360
We can experiment stuffs on it.

07:34.360 --> 07:36.600
Basically it can create your Samba playground.

07:36.600 --> 07:42.120
You can play it with it, you can use your favorite file system, you can write your favorite

07:42.120 --> 07:49.200
test or you can manually go and run some commands and learn more about Samba.

07:49.200 --> 07:54.920
And apart from this SITE environment is used for periodically triggering the test we use

07:54.920 --> 08:01.920
nightly runs and also whenever there is a new change in the project, this SITE environment

08:01.920 --> 08:03.400
runs the SITE test cases.

08:03.400 --> 08:10.880
So it is like, it progressively checks that all the components that are involved are in

08:10.880 --> 08:11.880
sync.

08:12.640 --> 08:17.680
So we are not encountering any issues before it is given to the user.

08:17.680 --> 08:22.960
Before getting to the user we make sure that everything are working in sync and there are

08:22.960 --> 08:25.600
no issues among them.

08:25.600 --> 08:28.280
So also we are using the most recent code from the main.

08:28.280 --> 08:35.400
So that means that it is always, we make sure that the main is always compatible with all

08:35.400 --> 08:39.520
the projects which are involved are compatible with each other.

08:39.520 --> 08:41.960
So now why SITE?

08:41.960 --> 08:48.040
So I said, I said to you that we will be using the file system and these file system like

08:48.040 --> 08:51.680
maybe say a safe file system.

08:51.680 --> 08:58.600
So this, the resource, the file shared by it is not only used by a Linux system, it can

08:58.600 --> 09:00.560
be used by Windows system as well.

09:00.560 --> 09:06.480
So that is exactly the use case where SITE came up.

09:06.480 --> 09:14.880
So with SITE we can very easily configure this file system, not just whatever, we can

09:14.880 --> 09:19.160
just configure for safe, we just configure for Glastor Dive, whatever file system we

09:19.160 --> 09:25.040
can configure the number of servers, number of clients and we can make our environment

09:25.040 --> 09:26.040
ready for testing.

09:26.040 --> 09:35.320
With this we can also find out compatibility issues within Samba and file system and also

09:35.560 --> 09:45.240
we can find about bugs and unexpected behavior of the file system and issues in Samba.

09:45.240 --> 09:49.680
And now what are SITE test cases?

09:49.680 --> 09:52.720
I had briefly told, I had just mentioned about this.

09:52.720 --> 09:56.080
So this is basically a GitHub repository.

09:56.080 --> 09:58.240
This is run by SITE environment.

09:58.240 --> 10:00.600
It houses number of tests.

10:00.600 --> 10:08.600
So currently we have consistency test, container test, miscellaneous test and SMB test.

10:08.600 --> 10:13.280
So the consistency tests are just mounting the share, writing the data onto the share

10:13.280 --> 10:16.680
and unmounting it.

10:16.680 --> 10:21.560
So we will just make sure that the exact data is written and read.

10:21.560 --> 10:26.680
And the container tests are, it is just exploring the possibility of running these tests on

10:26.680 --> 10:28.440
a containerized environment.

10:28.480 --> 10:32.600
So we just need to write more of these tests.

10:32.600 --> 10:36.200
So we have still scope for improvement in this.

10:36.200 --> 10:39.960
And miscellaneous test, these are the IO based test.

10:39.960 --> 10:42.600
We have basic IO like read, write.

10:42.600 --> 10:51.200
We have a database IO where we import a database and simulate a database related input output,

10:51.200 --> 10:58.600
maybe like querying from the DB, storing the data in the DB, etc.

10:58.600 --> 11:07.920
And then we have a stress IO, which is we are creating a lot of stress with the large

11:07.920 --> 11:13.800
GB of data and we are just testing stress load on the system.

11:13.800 --> 11:16.480
And lastly and most importantly, we use SMB test.

11:16.480 --> 11:20.520
These are part of SMB torture.

11:20.520 --> 11:28.800
These analyze the packet level rules and regulations.

11:28.800 --> 11:35.560
So these also have this SMB1 test, SMB2 test, which is nothing but CIFS test.

11:35.560 --> 11:43.160
And also they test this RPC level compatibilities or incompatibilities and whatsoever.

11:43.160 --> 11:47.440
Now how does SIETE works?

11:47.440 --> 11:52.400
So as I have already told, we use LibWord and Zibliu might have already guessed we will

11:52.400 --> 11:53.960
be dealing with the virtual missions.

11:53.960 --> 12:02.640
So a host mission will create number of virtual missions and these can be servers, clients.

12:02.640 --> 12:09.920
So basically this is a screenshot from virtual mission manager.

12:09.920 --> 12:16.040
So these were the missions created by a basic setup where client 0, setup 0 and storage

12:16.040 --> 12:18.440
0, 3 VMs were set up.

12:18.440 --> 12:21.880
Setup 0 basically contains the Ansible script.

12:21.880 --> 12:25.920
Storage 0 is the machine which stores the file system.

12:25.920 --> 12:31.160
It is the server where file system is imported.

12:31.160 --> 12:37.520
Client 0 are the, this is the client from which we access the files.

12:37.520 --> 12:43.000
So as it is an automation, so we do not have a lot of things.

12:43.000 --> 12:50.040
I will just explain how it is, what, yeah I will just explain you what happens during

12:50.040 --> 12:51.040
this automation.

12:51.040 --> 12:58.040
It is very simple, we just run a make.

12:58.040 --> 13:07.320
So with the default file system like XFS or whatever we set as default will be setup.

13:07.320 --> 13:15.120
The vagrant VMs are setup and then inventory is created.

13:15.120 --> 13:19.280
So we can see that client 0, client 1 and setup 0 was setup.

13:19.280 --> 13:31.480
And then as a, yeah so we install the Ansible, we install the packages that are required by

13:31.480 --> 13:33.680
the file system on the server.

13:33.680 --> 13:40.400
And also yeah we have this configurations related to SSH and also all the back and specific

13:40.400 --> 13:41.400
tasks.

13:41.400 --> 13:45.800
We set up the permissions.

13:45.800 --> 13:47.520
I just move forward quickly.

13:47.520 --> 13:51.920
Yeah we also have to deal with the SNX permissions.

13:51.920 --> 14:01.120
Yeah finally once all the packages are set up like CDB setup, Sambai setup, we will run

14:01.120 --> 14:10.400
the test from the SID test cases.

14:10.400 --> 14:17.240
So yeah these test results will be present in test.io out and you can examine them.

14:17.240 --> 14:20.040
So I will just move on to the next slide.

14:20.040 --> 14:24.440
Yeah this is a very, it is a pretty simple execution.

14:24.440 --> 14:43.080
We just run make and let me move on to the next slide.

14:43.080 --> 14:47.400
So we can list the virtual machines that were created with the worst list.

14:47.400 --> 14:48.400
So these are the machines.

14:48.400 --> 14:56.000
You can even, we can stop this and we can even SSH to them and manually use this as

14:56.000 --> 14:58.040
a playground for our executions.

14:58.040 --> 15:03.880
As of now I am just showing you the automation stuff.

15:03.880 --> 15:09.240
So yeah so we just run make clean that will destroy the VMs once we are done with the

15:09.240 --> 15:12.680
things once all the automations of tests are done.

15:12.680 --> 15:25.200
So it just destroys the VMs and we get back the clear end environment again.

15:25.200 --> 15:31.420
So we see that no VMs are left.

15:31.420 --> 15:39.400
So this is basically how we can pass the extra variables like which OS you want to use, which

15:39.400 --> 15:40.400
file system you want to use.

15:40.400 --> 15:46.720
In this case we are using a GlucidFS file system and there are the file system specific

15:46.720 --> 15:58.520
tasks that are taking place and we download the recent code from GlucidFS and we use basically

15:58.520 --> 16:04.160
the same things that are taken in the first demo will be taking place specifically for

16:04.160 --> 16:05.560
the GlucidFS file system.

16:05.560 --> 16:17.760
Obviously it was for XFS and now there will be different, sorry.

16:17.760 --> 16:21.600
So this will be just different, difference will be just in the creation of setup of

16:21.600 --> 16:22.600
server.

16:22.600 --> 16:41.560
But then everything will be similar.

16:41.560 --> 16:46.800
We also check if the cluster is in a healthy state and we also as I said you can just recall

16:46.800 --> 16:51.000
our installation of file system, CTDB and Samba.

16:51.000 --> 17:01.400
So that is basically done here.

17:01.400 --> 17:06.880
Yes so now about custom backends and tests.

17:06.880 --> 17:11.640
So now do you want to add your favorite backend or file system to SIT environment?

17:11.640 --> 17:20.120
As of now we support XFS, GlucidFS, CIFFS but we also have scope to add in more and

17:20.120 --> 17:21.600
more backends.

17:21.600 --> 17:23.160
So how will you do it?

17:23.160 --> 17:25.840
So the first thing we will have to define a background.

17:25.840 --> 17:30.680
So you will include, it is basically the Ansible script.

17:30.680 --> 17:35.960
You will have to make sure that how many missions are needed and what test you want to run on

17:35.960 --> 17:36.960
them.

17:36.960 --> 17:38.280
So basically declare them.

17:38.280 --> 17:40.600
That is called as defining the background.

17:40.600 --> 17:44.120
Then next you will have to know what are the installations you need, what are the packages

17:44.120 --> 17:47.040
you would need to install your file system.

17:47.040 --> 17:51.840
So that will be the next part you will have to decide about.

17:51.840 --> 17:56.480
And then finally you will have to create the backend role which will actually include the

17:56.480 --> 18:02.160
steps required to set up the file system and make it work on your machine.

18:02.160 --> 18:07.160
And then we will have to configure CTDB, then you will have to configure Samba.

18:07.160 --> 18:13.880
So a detailed description about it can be found in docs backend.

18:13.880 --> 18:17.800
Then do you want to add the custom test to this project?

18:17.800 --> 18:21.560
You can add any of the, there is a docs test.

18:21.560 --> 18:26.960
You can refer to that and it explains in detail how this can be done.

18:26.960 --> 18:32.920
As of now we have a project SIT test cases that is also a repository on GitHub.

18:32.920 --> 18:39.160
You can just add your test and get it merged and that automatically runs this test on SIT

18:39.160 --> 18:40.160
environment.

18:40.160 --> 18:44.760
Yeah, this is it.

18:44.760 --> 18:46.660
So this is the reference.

18:46.660 --> 18:47.680
So yeah.

