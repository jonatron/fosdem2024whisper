WEBVTT

00:00.000 --> 00:02.060
you

00:30.000 --> 00:52.080
Okay, so now it's Federico's turn unfortunately Daniel from the Camarillo project couldn't be with us today

00:52.080 --> 00:59.800
but Federico will talk, will talk to us about steer and shake and maybe tell us why I'm getting all those robocalls from an energy hour

00:59.800 --> 01:04.800
Good evening everyone can you hear me?

01:04.800 --> 01:11.800
Yes, okay, thank you, so thank you Lorenzo for the introduction.

01:11.800 --> 01:19.800
Yeah, my name is Federico Cavidu, I am a voice lead developer at Libon, it's a voice application developed in France

01:19.800 --> 01:31.800
and I am contributor of the Camarillo project and this presentation should have seen also Daniel but he couldn't make it today

01:31.800 --> 01:35.800
and Daniel Constantinierla is the co-founder of the Camarillo project

01:35.800 --> 01:56.800
and today we are here to speak about sexy PIDX, which is a library CLI tool and REST API server implementing steer shaken

01:56.800 --> 02:12.800
So first of all, steer shaken, steer stand for secure telephony identity revisited and shake and stand for secure handling of a certain information using tokens

02:12.800 --> 02:27.800
They are a suit of protocols and procedure that have been designed to try to fight against robocalls and colliding spoofing

02:27.800 --> 02:42.800
which is a huge problem in certain countries and the name shake and it was inspired by James Bond and his predilection for Martini drinks steer and not shake

02:42.800 --> 02:57.800
and so the name shake and since steer was already existing was created as someone said torturing English language to get this acronym

02:57.800 --> 03:01.800
So basically how does steer shake and work?

03:01.800 --> 03:07.800
Basically when an originating provider receive and invite, so a call

03:07.800 --> 03:20.800
First thing I decided is to decide which level of attestation, which level, how we can, one of the three level of attestation that can give to the caller

03:20.800 --> 03:37.800
So there is a full attestation which is the service provider has authenticated the calling party and can be sure that the entity using the phone number is authorized to do this

03:37.800 --> 03:51.800
The more simple example is a landline subscription or an operator running a mobile network or a VoIP network where the devices are directly connected

03:51.800 --> 03:59.800
Basically any way else to physically verify that the user is who claims to be

03:59.800 --> 04:17.800
And we have a partial attestation and so the service provider can identify the caller origination but he cannot confirm that the caller, say the call source is authorized to use the phone number

04:17.800 --> 04:27.800
So the call number would be an example, an calling number behind an extension of an enterprise PBX

04:27.800 --> 04:32.800
And then we have the third level which is the gateway attestation level

04:32.800 --> 04:51.800
And when the service provider can authenticate the call origins but he cannot verify the source, this could be the case for example of an international gateway provider receiving a call from an international gateway

04:51.800 --> 05:02.800
So once decided the level, the attestation level, the originating provider can create a CIP identity either, we will see later how it is formed

05:02.800 --> 05:16.800
Which contains information about the calling number, the call number, the attestation level, the call origination and the certificate that it has been used for signing the identity

05:16.800 --> 05:30.800
And the CIP invite is sent to the receiving the destination provider which in terms using the information of the CIP identity can verify that the identity is itself

05:31.800 --> 05:51.800
So the global shake and steer framework includes several components, several entities and a whole layer of governance which is being public infrastructure

05:51.800 --> 06:13.800
And we need a way to trust each one's certificate, so we have some policy administration which is responsible to delegate to identify which are the certificate authority that are allowed to enable to issue certificate for this infrastructure

06:14.800 --> 06:33.800
And where it is used today, as today is deployed and forced in US, in Canada and since a few months in France where it goes under the name of man, mechanism d'authentification d'anime

06:34.800 --> 06:42.800
But it's basically using the steer shake and it's just the governance layer is slightly different and more centralized

06:42.800 --> 07:02.800
Ok so let's quickly look at how this CIP identity either is built, this is the, you could say here, I was in search of it, in a message and let's have a look

07:02.800 --> 07:22.800
Basically the CIP identity header contains a JSON web token and three parameters, the JSON web token has three sections, header is highlighted in blue and red we have the payload and then the signature is the green part

07:22.800 --> 07:42.800
And then we have three, the identity header has finally three parameters, they say what are these attributes and parameters, so sorry I forgot to say that both header and payloads are based on 64 URL and encoded JSON

07:43.800 --> 08:05.800
So this is how they look, the other part is encoded and decoded and it has five attributes, the algorithm, the encryption algorithm which must be ES256, the extension PPPT, the extension used, in this case shaken, the token type, the passport

08:05.800 --> 08:17.800
And the X5U which is the location of the certificate used to sign the token or whether the public certificate is used to validate the signature

08:17.800 --> 08:43.800
And while the payload part contains information about the attestation level, the information about the destination, the timestamp and the original ID which is a unique way for the provider to identify the actual sender

08:47.800 --> 09:12.800
And finally the signature part which is obtained by base 64 URL link, the encryption, ES256 encryption of the concatenation of the JWT header and JWT payload both in their base 64 URL encoded

09:12.800 --> 09:41.800
And finally the parameters, the three parameters of the identity are the info, so again the location of the certificate must correspond to the X5U attribute of the JWT header, the algorithm used again must be ES256 and the extension used that must be shaken

09:42.800 --> 10:07.800
So all of these said, so how can you implement a steer shaken in your infrastructure, not only from the SIP, not only the SIP part but also the other component that you need for the certificate, the validation service, the signature service, etc.

10:08.800 --> 10:25.800
At least my knowledge there are two open source projects just focused on steer shaken, one is the SignalY libsteer shaken library and the second one is SIPDiax

10:26.800 --> 10:28.800
Did you make this slide?

10:29.800 --> 10:30.800
Sorry?

10:30.800 --> 10:32.800
Did you make this slide or did Daniel write it?

10:32.800 --> 10:33.800
No I did

10:34.800 --> 10:35.800
Why?

10:36.800 --> 10:38.800
I'll ask again, I think it's okay

10:38.800 --> 10:39.800
Okay

10:43.800 --> 11:05.800
So SIPDiax is a project created by Daniel and it's the GitHub repository and it has three components, the SIPD Go library, the main component is the library exporting the common function

11:05.800 --> 11:27.800
CSEC PID which is a C library wrapper to build dynamic or static libraries and the H files and that what it uses, we'll see later in Camelio to build the SIP module

11:28.800 --> 11:41.800
And then we have SSEC CPIDiax which is the CLI tool and the HTTP server for checking or building SIP identities

11:44.800 --> 11:47.800
So why a standalone project first?

11:48.800 --> 11:57.800
So first was the idea of starting developing a extension for Camelio in goal language

11:58.800 --> 12:08.800
Also the idea was to have an HTTP API service that could be used by many SIP server nodes

12:08.800 --> 12:20.800
Also it is an easier way to integrate with older releases that doesn't have native support for Steershaken

12:21.800 --> 12:28.800
And finally it has the command line tool could be useful when you're in the bug phase

12:29.800 --> 12:49.800
There were some examples with a command line you can generate a full identity header passing the parameter of the header

12:49.800 --> 13:08.800
An example there you can check here, you can check here an identity header stored in a file, this is more useful for a command line for debugging

13:08.800 --> 13:33.800
But you can also run SSEC CPIDiax as an HTTP server and it exposes this way or as an HTTP server and use it to validate the identity header of your traffic

13:34.800 --> 13:47.800
Or at the same time or generate them, so as I said you don't need to have the full Steershaken stack in your SIP server, you could use external services

13:47.800 --> 14:05.800
And also it can be used to serve the certificate publicly, to serve the certificate so that when you are sending an invite with an identity header the certificate will be retrieved from this URL

14:05.800 --> 14:33.800
And as I said in Camelio the SSEC CPID module is implemented using the SSEC CPID wrapper and it exposes basically all the functionality that you need to implement Steershaken in your server

14:33.800 --> 14:47.800
There are various, you can check, get, add, build and assign identities and all these functions accept several variables in various forms

14:47.800 --> 15:16.800
And finally a simple example of how it can be used in a Camelio typical routing script, so loading it, a couple of parameters about the expires of the JWT or the time outages, the time out, you want to configure a rule to retrieve the certificates in case you don't have them cached locally

15:17.800 --> 15:36.800
And that's it, I should have any questions, I want to remind Camelio World Conference division that will take place this year in April 18, 19 in Berlin

15:47.800 --> 15:50.800
Is there a HVP to the server behind the scenes?

15:50.800 --> 15:55.800
No, no, there is a, okay, I go back

15:56.800 --> 16:15.800
Okay, so it has three components, the library is in a go, but it has also a C wrapper, so Camelio is using the library for the moment, you have to compile it and use it statically because it's still not packaged in any distribution

16:15.800 --> 16:18.800
But instead, yeah

16:18.800 --> 16:22.800
This isn't looking to go code directly via a wrapper, okay

16:24.800 --> 16:26.800
Yeah, sorry

16:26.800 --> 16:29.800
I'll go back to my 31

16:29.800 --> 16:35.800
So have you dealt with your shake-a-friend with MAN?

16:35.800 --> 16:43.800
Yeah, and, yeah, so he's asking if, sorry if I am...

16:43.800 --> 16:57.800
I have a complete application here, so we found out that they have this different requirement of the original telephone number and destination telephone number where you can go past the E164 link

16:57.800 --> 16:59.800
Yeah

16:59.800 --> 17:05.800
He does sexy things, like have a...

17:05.800 --> 17:14.800
So, okay, so he's asking about, as I said, there are some differences because it's French implementation, so

17:14.800 --> 17:26.800
And honestly, I'm starting to look at the actual implementation, a large total specification of the MAN because, yeah, there are some differences

17:26.800 --> 17:31.800
And, yeah, we will have probably to adapt

17:31.800 --> 17:45.800
Yeah, sorry about your intervention, I was just, as I was saying, if I realized that our implementation of this is in the library

17:45.800 --> 17:49.800
The study was about open source libraries, not about open source information

17:49.800 --> 17:55.800
No, it was exclusively about a library that you can use outside of

17:55.800 --> 18:01.800
The secure zip is done as a library, so is that why it's...

18:01.800 --> 18:03.800
It's nice

18:03.800 --> 18:05.800
Thank you

18:05.800 --> 18:09.800
Is there also a CLI or something that you can use?

18:09.800 --> 18:10.800
Sorry

18:10.800 --> 18:12.800
Is there a CLI, a command line?

18:12.800 --> 18:14.800
Yes, I don't think...

18:14.800 --> 18:15.800
Sorry

18:15.800 --> 18:19.800
Yeah, so the same...

18:19.800 --> 18:23.800
So the CLI is called sexy PIDX

18:23.800 --> 18:34.800
And you can use it, let's say the same binary can be used as a command line to check or generate identity headers

18:34.800 --> 18:39.800
Or as an HTTP server, which can...

18:39.800 --> 18:44.800
Yeah, which has both the two APIs for generating and validating

18:44.800 --> 18:51.800
And the path for the X5U to download the certificate for

18:51.800 --> 18:52.800
Thank you

18:55.800 --> 19:00.800
There's not so much of a question, just look to see how I do it finally

19:00.800 --> 19:06.800
I'm hoping on the presentation and we hope to see you guys from OpenCypher

19:09.800 --> 19:16.800
Because I was trying to call Daniel here, so I was coming

19:16.800 --> 19:22.800
There's some sort of sharing in the way, but nobody is needed

19:22.800 --> 19:24.800
I know you needed

19:24.800 --> 19:26.800
Yes, sorry

19:26.800 --> 19:32.800
When you went back to one of your earlier slides, you were showing that there is a part of this third-stake in model

19:32.800 --> 19:37.800
Is that you go and contact some regulatory authority

19:37.800 --> 19:41.800
But all you see here is that you are just signing a JWT

19:41.800 --> 19:47.800
So how is that verification service integrating into this picture?

19:47.800 --> 19:49.800
For me, I...

19:49.800 --> 19:55.800
The dot of line on the bottom that you're showing here, how is this being taken into...

19:55.800 --> 20:00.800
This is simply the call, one sign

20:03.800 --> 20:07.800
That's an HTTP request to some regulatory authority or what?

20:07.800 --> 20:15.800
Yeah, but the regulatory authority is for the certificate

20:15.800 --> 20:18.800
Okay, so the authority gives you a certificate and after that...

20:18.800 --> 20:23.800
Yeah, so authority decides which certificate the authorities can generate

20:23.800 --> 20:30.800
You are allowed to generate a certificate and actually there is another

20:30.800 --> 20:40.800
A third level of governance which is the political governance

20:40.800 --> 20:42.800
So basically you go through that and you get your certificate

20:42.800 --> 20:45.800
I want you to have a certificate that you can sign all the calls

20:45.800 --> 20:52.800
And it's fully your responsibility to make sure you sign things with the correct attestation

20:52.800 --> 20:54.800
Yes, exactly

20:56.800 --> 21:00.800
Is the certificate any different from a normal S519 certificate?

21:00.800 --> 21:01.800
No

21:01.800 --> 21:05.800
So you can have a self-imgenerated certificate then?

21:05.800 --> 21:08.800
For testing, yes, but then not for running

21:08.800 --> 21:12.800
For any entity that requests?

21:12.800 --> 21:14.800
Yeah, for testing

21:15.800 --> 21:16.800
Yeah

21:21.800 --> 21:26.800
Another small difference just because we were speaking, I believe you were asking

21:26.800 --> 21:34.800
According to MAN operator should report to a kind of centralized database

21:34.800 --> 21:42.800
All the attempt to have a kind of global security mechanism

21:46.800 --> 21:51.800
Any other question?

21:54.800 --> 21:56.800
Does the library have a...

21:56.800 --> 22:04.800
I heard the mention right before this question about the S519 certificate being standard

22:04.800 --> 22:13.800
But I also noted that there is a small extension to the right, the end of this extension

22:13.800 --> 22:15.800
Sorry, I could not

22:15.800 --> 22:21.800
The check and framework, this end of this extension to the S519

22:21.800 --> 22:25.800
Where you put kind of a range of numbers that the certificate is for

22:25.800 --> 22:29.800
So my question was does the library...

22:29.800 --> 22:30.800
Still not

22:30.800 --> 22:32.800
Care at all about the thing?

22:32.800 --> 22:34.800
No, not for them, no

22:34.800 --> 22:36.800
We don't care about it either

22:37.800 --> 22:44.800
It might be required according to the nation

22:44.800 --> 22:49.800
It's not required in France for the MAN map, but it may...

22:49.800 --> 22:54.800
If some other country decide to implement it, they could choose to

22:58.800 --> 23:03.800
So kind of related to the extent, you know, a longer number allowed on the France one

23:03.800 --> 23:09.800
Is there any provisions in the state system at all to allow for the tax prefixes?

23:09.800 --> 23:11.800
Sorry, two

23:11.800 --> 23:13.800
To allow for tax prefixes

23:13.800 --> 23:17.800
And you can put this pre-candidate to the dial number to signify the route that it's going to go through

23:17.800 --> 23:19.800
Is there any capabilities of sign...

23:19.800 --> 23:21.800
No, because it...

23:21.800 --> 23:23.800
We are all...

23:23.800 --> 23:25.800
We are all...

23:25.800 --> 23:27.800
But this is not the end

23:27.800 --> 23:28.800
Yeah

23:28.800 --> 23:33.800
I'm assuming that's why the number would be a longer than France one

23:33.800 --> 23:35.800
To allow for the tax prefixes

23:35.800 --> 23:36.800
Yeah

23:46.800 --> 23:47.800
Okay

23:49.800 --> 23:50.800
That's it

23:52.800 --> 23:54.800
Okay, thank you

23:58.800 --> 23:59.800
Thank you

