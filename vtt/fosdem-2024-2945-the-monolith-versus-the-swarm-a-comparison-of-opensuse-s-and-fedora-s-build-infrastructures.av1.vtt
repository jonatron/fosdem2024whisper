WEBVTT

00:00.000 --> 00:12.040
Hi, everyone. Thanks for coming to my talk, the monolith versus the swarm. This is not

00:12.040 --> 00:19.640
about Starcraft. This is about build infrastructures. First about me, I'm Dan Cermak. I work at

00:19.640 --> 00:26.800
SUSE. I interact a lot with open SUSE and SUSE's build system, the open build service.

00:26.800 --> 00:32.200
Since I'm also a Fedora contributor, I also interact with Fedora's build system. Every

00:32.200 --> 00:36.280
time I switch between them, I get annoyed because of things that are in one and not

00:36.280 --> 00:40.840
in the other, and vice versa. At some point, I thought, well, maybe I could give a talk

00:40.840 --> 00:49.960
about that. Why, actually? Open SUSE and Fedora are very interesting in one regard, in my

00:49.960 --> 00:57.480
opinion. These are very similar distributions. They're both RPM based, and they look and

00:57.480 --> 01:05.280
feel kind of similar. For a certain amount of time, I also ran both from the same config.

01:05.280 --> 01:11.400
They work kind of the same, look kind of the same, but they have absolutely no common ancestry.

01:11.400 --> 01:16.920
They both use the RPM package manager, but SUSE started initially, I think, from Slackware,

01:16.920 --> 01:22.960
and then it became its own thing, switched to RPM, and Fedora came from the whole Red

01:22.960 --> 01:32.640
Head site, but there was never some kind of common path, and that also reflects itself

01:32.640 --> 01:38.680
in the completely different build systems, whereas open SUSE uses the open build service,

01:38.680 --> 01:45.160
which is the monolith in this talk, and one giant thing that makes everything. Fedora has

01:45.800 --> 01:51.080
50 million different services, some of every single one doing something else, or sometimes

01:51.080 --> 01:59.640
similar things, to which we'll get, and hopefully, maybe, we can also learn from each other,

01:59.640 --> 02:07.360
because each approach has advantages and disadvantages. But let's first take a look what you actually

02:07.360 --> 02:15.480
need for a distro build system. So this is a very, very simplified graph of what you

02:15.480 --> 02:19.000
need to do if you have, if you want to build a distribution, you need some kind of source

02:19.000 --> 02:26.280
control where you store your package sources. Usually, you would pick it, but that's not

02:26.280 --> 02:30.160
always the case, as we'll see with the open build service, and you have some kind of service

02:30.160 --> 02:36.520
that builds your RPM packages. Since we're talking about RPM based distributions, yes,

02:36.560 --> 02:41.920
we want to build RPMs, but if this was about a one-two, you could also build depths, whatever.

02:41.920 --> 02:48.680
At some point, you want to build your repositories, images, containers, all the other deliverables.

02:48.680 --> 02:53.960
You want to take a look, and you want to monitor all the package builds, find out if things

02:53.960 --> 03:00.840
start breaking. Then you want to push all the same thing to QA. I'm not going to talk

03:00.880 --> 03:07.480
about the QA part because, kindly enough, this part is the same. Both distros use open

03:07.480 --> 03:11.480
QA, and if you're not neither from Fedora nor the open Suzerworld, and you don't use

03:11.480 --> 03:17.200
open QA, you should. There's enough open QA people around here, and by that, I have

03:17.200 --> 03:24.080
fulfilled my contractually obliged commercial part for open QA, but still please do. It's

03:24.080 --> 03:30.760
cool. Yeah, and then you push all your deliverables to some mirrors, and you have your distro

03:31.680 --> 03:38.680
nice and simple, right? So, in practice, I'm going to breeze through very, very quickly

03:39.360 --> 03:43.680
through the open build service, and this whole thing, it deserves at least five lectures,

03:43.680 --> 03:48.040
so it's probably not going to be complete. Sorry for those of you who are not familiar

03:48.040 --> 03:53.320
with it. So, the open build service is what I would call the distro building Swiss Army

03:53.320 --> 04:00.320
Knife because if you decide you want to build a new Linux distro that's based on something

04:01.520 --> 04:08.520
Fedora, open Suzer, DBN, Arc Linux-ish, you can do that with OBS more or less immediately.

04:10.200 --> 04:14.880
The whole thing's been around for a long time, so I think what I've been able to pick

04:14.880 --> 04:21.880
up from the historical documents of which there are unfortunately not many, it started

04:22.040 --> 04:29.040
out as a replacement of a service called OrderBuild. The design phase began around

04:29.160 --> 04:36.160
something 2005, probably 2006, it started becoming used, and it was introduced to open

04:39.000 --> 04:46.000
Suzer factory, which then became open Suzer Tumble with the rolling distro in 2009, and

04:46.320 --> 04:52.480
it started to get more and more extended, so initially it was just building RPMs, and

04:52.480 --> 04:58.880
that was it. But nowadays it couldn't build not only RPMs, but DBN packages, Arc Linux,

04:58.880 --> 05:05.280
web packages, you can build containers, you can build virtual machines, it will build,

05:05.280 --> 05:12.280
it will create repositories, it will publish everything, and so on and so on. So, essentially

05:13.200 --> 05:18.240
everything that you need to build a distribution, the open build service will do for you. The

05:18.240 --> 05:24.400
one big feature of the open build services that it will give you automated rebuilds,

05:24.400 --> 05:28.720
so that's something that's unfortunately not there in the Fedora infrastructure, and one

05:28.800 --> 05:35.000
thing that annoys me very, very much, and I think other people as well. The thing that

05:35.000 --> 05:38.720
annoys me very much in the open build service is the custom version control system, which

05:38.720 --> 05:45.720
is unfortunately not gates. Yeah, and then as I said, OBS, there's a ton of features

05:48.640 --> 05:52.800
that are, so one thing that I'd like to mention that's especially useful for distro building

05:52.880 --> 05:59.880
is a so-called staging area, which you can use if you want to, if you send in stuff into

06:00.040 --> 06:06.160
the distribution, you can create a sub-project. If you're familiar with the Koji world, it

06:06.160 --> 06:10.680
would be something like an automated side tag where you rebuild everything that depends

06:10.680 --> 06:17.680
on your change, and if it's all green, you merge it into the distro, and that's nicely,

06:18.520 --> 06:24.520
nicely possible in OBS. So, when I said it's a monolith, I was actually lying, it's two

06:24.520 --> 06:31.520
monoliths. You have monolith number one, that's the OBS front-end, that's a giant Rails application

06:33.360 --> 06:39.640
that talks to MariaDB database, and the actual magic with the interesting parts that's written

06:39.640 --> 06:46.760
in Perl, please don't run away, but yes, but it works relatively nicely, and that's really

06:46.800 --> 06:52.000
where the scheduler is, where the dependencies are resolved, this thing, signs your packages,

06:52.000 --> 06:59.000
publishes packages, but the actual building part is related to the workers, which invoke

06:59.080 --> 07:06.080
the bespoke OBS build script, and that will build your RPMs, DBN packages, containers,

07:07.160 --> 07:14.160
and so on. But as the user, you really just talk to the front-end, which has an XML API,

07:15.080 --> 07:22.080
so you see it's from the early, early odds, it's no JSON, so too early for that, or you

07:24.200 --> 07:31.200
interact via the OSC command line. So let's take a look how this actually looks, though

07:31.200 --> 07:38.200
this is an example of the OBS web UI, remind you a little bit of copper from Fedora, and

07:39.200 --> 07:45.200
the whole open build service is organized in projects, a project is more or less a collection

07:45.400 --> 07:52.400
of individual packages, that then OBS will rebuild for you. So here, let's just make

07:54.840 --> 08:00.280
a hypothetical example, you create yourself, you have some Python projects, there you have

08:00.280 --> 08:06.440
some Python packages, and OBS will happily keep rebuilding those once there's some kind

08:06.440 --> 08:13.440
of dependency change. And that, to all of you who know copper, that looks exactly like

08:13.760 --> 08:20.200
copper, but the real magic of OBS comes in, that you can automatically, that you can add

08:20.200 --> 08:27.200
dependencies between your different projects. So imagine I now decide that I want to test

08:27.920 --> 08:34.920
out some change in pandas, but I need special dependencies for that, and I have found them

08:35.480 --> 08:42.480
in some other project, and now I will include them in my build route in this home-danned

08:42.880 --> 08:49.880
project. And then OBS will do the dependency tracking recursively across projects, which

08:50.600 --> 08:57.600
gives me a whole ton of flexibility for experimentation. And it will also do all the rebuild these

08:57.840 --> 09:04.840
stuff across that. So as you can already see, this is a very simple, very simple, very

09:05.000 --> 09:12.000
simple, very simple, very simple, very simple, very simple, very simple. And this causes,

09:12.000 --> 09:17.000
so every time someone for instance decides to rebuild GCC, and you take a look at the

09:17.000 --> 09:24.000
monitoring page of OBS, you see a giant spike, because every single person, more or less,

09:24.720 --> 09:31.720
in either some way, depends on GCC. And it also means, when I was showing this picture,

09:31.720 --> 09:37.000
I realistically only retained the last build, because otherwise it would run out of this

09:37.000 --> 09:44.000
space now. The version control, now we're getting to the Nasty part of OBS, unfortunately,

09:48.840 --> 09:55.840
so if you start interacting with OBS via OSC, which is the command line client, it

09:56.520 --> 10:01.920
will behave like subversion, but you will very quickly realize it's not subversion. It's

10:01.920 --> 10:08.920
something completely custom that is weird and wonky, and it's actually just communicated

10:12.120 --> 10:19.120
via an XML API. It does things like there's not really subfolders, there's also no branches,

10:20.120 --> 10:27.120
and I hope we can rip this out. Well, I hope we would have ripped it out 2009, but it's

10:27.120 --> 10:31.880
still there, because that's the one disadvantage of a huge monolith, ripping out individual

10:31.880 --> 10:38.880
parts is very, very hard. And then another thing, which is, I'm not going to give it

10:41.520 --> 10:48.520
the full justice. So, on OBS, you have the option to branch packages. So, you can do

10:49.120 --> 10:54.080
this, and if I say branch, I actually mean it's more like a fork. So, let's say you find

10:54.080 --> 10:59.120
a package and opens with a tumbleweed, and it's not behaving like you would want, for

10:59.120 --> 11:05.840
instance, it's twold. So, you branch it, i.e. it makes a fork, and what actually happens

11:05.840 --> 11:12.840
underneath it creates a so-called link, which behaves kind of like a floating rebase of

11:13.680 --> 11:19.680
the changes you made locally on top of the changes that are in the distro. And if you

11:19.680 --> 11:26.680
think this makes no sense, you are not the only one, it kind of makes sense, it's a

11:27.600 --> 11:34.600
three-way merge, but getting it right is a nightmare. There are cases where this is

11:35.360 --> 11:42.360
very, very useful, because it allows you to have downstream patches that are continuously

11:45.560 --> 11:50.160
rebased, and you don't have to do the rebase yourself, and that all sounds nice, until

11:50.160 --> 11:54.320
your patch doesn't apply cleanly anymore, and the whole thing breaks down and OBS doesn't

11:54.320 --> 11:59.680
tell you. I'm sorry I can't give this whole thing justice, because I think there's like

11:59.680 --> 12:04.000
four people who really understand this, and I'm not one of them. And the other four are

12:04.040 --> 12:10.520
not here, and two of them will not admit that they understand it. So, a very nice feature

12:10.520 --> 12:17.400
of OBS is the project con for one thing that allows you to configure how projects are built

12:17.400 --> 12:23.600
and published, that's just a config file, but the other thing is you can tweak macros.

12:23.600 --> 12:29.600
So you can really tweak RPM macros. So let's take a look at an example. Here if you would

12:29.720 --> 12:36.720
look at the upper two lines, that's just some config stuff, but below there you can really

12:36.760 --> 12:40.760
set macros, and once you change them, OBS will rebuild this project, because it will

12:40.760 --> 12:45.360
not try to do macro tracking, at least I hope so. And this gives you as a release engineer

12:45.360 --> 12:50.320
a lot of flexibility, because if you suddenly find out, okay, but I now want to quickly

12:50.320 --> 12:57.320
change this, you don't have to edit redhead RPM config, and then rebuild manually everything

12:57.720 --> 13:04.720
yourself, OBS will do this for you. And at last, let me just quickly mention submit

13:04.720 --> 13:11.720
requests, so this is essentially the equivalent of a merge request. If you have branched,

13:12.920 --> 13:18.880
i.e. forked the project, you can send your changes back, but what's also possible, you

13:18.880 --> 13:25.880
can do full submissions of a new package into a project. And that's also a very nice feature

13:27.320 --> 13:33.280
how you submit new packages into open source at umbilweed, which in my opinion is a much

13:33.280 --> 13:38.320
better user experience than in fedora, where you go to bugzilla, you upload your source

13:38.320 --> 13:44.120
RPM somewhere on the internet, then you make a packaging request, then you make a new repo

13:44.120 --> 13:50.800
request, and if you haven't given up at that point, then you'll eventually get a repo.

13:50.800 --> 13:57.240
And this makes it much, much simpler. So as I said, I haven't given OBS full justice,

13:57.440 --> 14:03.480
but we're nearly approaching already 15 minutes, so let's switch over to the swarm. As I said,

14:03.480 --> 14:10.480
this is not Starcraft, but so first part of fedora, Paga, that's the Gitforge, so this

14:13.200 --> 14:19.880
is really, this is really your classical Gitforge, sadly not as maintained anymore as we all

14:19.920 --> 14:26.920
would wish. It's a Python based, it's a Python based GitHub inspired Gitforge, looks a little

14:28.480 --> 14:35.320
bit like GitHub from 10 years ago and feature wise, it's unfortunately not much further.

14:35.320 --> 14:42.320
It started also as a very great idea, because every repo in Paga is I think four repos in

14:42.440 --> 14:49.400
total, you get your own Git repo, you get your repo for your issues, for your merge requests,

14:49.440 --> 14:56.400
for your metadata, for your wiki, you can do remote pull requests on Paga, so if you

14:56.520 --> 15:00.920
don't have a Paga account and you decide I still want to make a pull request and I don't

15:00.920 --> 15:05.400
want to put it up on Paga, you can put it somewhere else into a Git repository and make

15:05.400 --> 15:11.440
a pull request to that remote repository. I don't know if any other Gitforge that would

15:11.480 --> 15:18.480
support that, but sadly this thing has been mostly written by Pingu, sadly he can't work

15:21.600 --> 15:26.680
on that anymore and so development has been very slow and it's more or less just a question

15:26.680 --> 15:33.680
of time until this will be replaced with GitLab. The build system of Fedora, that's Koji, that's

15:34.680 --> 15:41.680
really just a, it's a very, I'd say relatively simple RPM build system that uses Mock to

15:43.040 --> 15:50.040
build your RPMs and in contrast to OBS, which gives you a lot of flexibility, Koji doesn't,

15:51.840 --> 15:57.560
which gives Koji the big advantage that it's very, very simple to understand, because you

15:57.600 --> 16:03.720
can't do fancy things. You have one build route, there's your packages and then you

16:03.720 --> 16:10.320
build your package with a fixed NEVR, so name, Epoch version release in that build route

16:10.320 --> 16:17.320
and once it's built, it stays there forever. So Koji persists, builds forever, at least

16:17.840 --> 16:24.840
real builds. There's ways how you can test changes, so there are side tags and you can

16:24.960 --> 16:31.160
also do build route overrides and nowadays Koji can also talk to the, to Pega, to the

16:31.160 --> 16:38.160
Fedora disk Git, but it's in itself, it's relatively, it's a relatively simple thing

16:38.200 --> 16:42.680
and it's relatively simple to understand, which is a great advantage for release engineers,

16:42.680 --> 16:49.080
because that's all what they have to interact with and it's not, I'd say Koji is not that

16:49.120 --> 16:56.120
hard to grasp. OBS, it's a different beast. So then, Pangee, what I've heard Pangee apparently

17:00.480 --> 17:07.480
gives a few people PTSD, but then, or at least the configuration file, but Pangee itself

17:07.600 --> 17:14.040
is really just a distro composition tool, so yeah, it creates the Fedora composes, all

17:14.040 --> 17:20.080
the centers composes and Pangee itself is just, is again, just a tool that executes

17:20.080 --> 17:25.880
a bunch of other tools, but you can summarize it essentially. It assembles first all your

17:25.880 --> 17:32.880
packages from Koji from the current state, checks which packages you need to create the

17:33.000 --> 17:39.640
current snapshot that is called a compose, then it runs the repo creation, also OS tree

17:39.680 --> 17:44.920
repo creation, but that's just a different repo and then all your images are built. And

17:44.920 --> 17:50.600
this is kind of interesting because this is different than it's done on OBS, so in this

17:50.600 --> 17:56.440
step you create your images from the created repos and then the whole thing is published

17:56.440 --> 18:02.680
or not if it fails. On the open build service, these two steps are separate from each other

18:02.720 --> 18:09.720
and also the repo creation of stable distribution or stable distributions like Fedora is done

18:09.960 --> 18:16.960
differently and I don't want to say that this approach is much better, but the approach

18:17.320 --> 18:24.320
that's done on OBS has the slight disadvantage because the steps are independent of each

18:24.920 --> 18:30.760
other, you can publish your images and not publish a repo or you publish them at slightly

18:30.760 --> 18:37.760
different times and then they are not exactly the same and you suddenly, you publish your

18:37.880 --> 18:44.640
images, you run a zipper up or zip it up and suddenly there's changes also there shouldn't

18:44.640 --> 18:51.640
be. So that's I'd say a release engineering main difference.

18:52.880 --> 18:57.140
Now we come to the real swarm part of the Fedora infrastructure, that's image and container

18:57.140 --> 19:03.740
building because there's not one service, there's at least four that I know of, OSBS,

19:03.740 --> 19:09.980
the open shift build service, image factory which I think many people pray that it will

19:09.980 --> 19:16.980
go away very, very soon, then Kiwi, that's the main image builder that's also used in

19:17.700 --> 19:24.700
OBS and OS build, that's the new thing. These all are kind of wired all into Koji,

19:27.140 --> 19:34.140
where they grabbed RPMs from Koji and built images and built images from that. So at least

19:37.820 --> 19:43.220
with OSBS every time I look at it I run away because it includes far too many fancy words

19:43.220 --> 19:50.220
that I don't understand if I just want to build containers or images. There's too many.

19:50.500 --> 19:57.500
MBS, that's the module build service, unfortunately it will go away so let's not waste our time

19:59.180 --> 20:06.180
with that. Koji is a very interesting thing, it's kind of a workaround in the Fedora infra

20:11.740 --> 20:16.900
for not having automated rebuilds because it does exactly that. So what you can see here

20:16.900 --> 20:23.100
is a screenshot from Koshai where it will track every time there's a dependency change

20:23.100 --> 20:30.100
of your packages in either Fedora or height or one of the other variants, it will tell

20:30.260 --> 20:37.260
you what exactly changed between a compose, it will run a scratch build, so that's a kind

20:38.260 --> 20:45.260
of non-production build in Koji that can be removed and if it succeeded everything fine,

20:45.540 --> 20:52.540
if it breaks it will tell you. And it will also tell you if your dependency suddenly

20:53.380 --> 20:59.460
failed to resolve. And everyone who's worked with OBS will know that the worst thing that

20:59.460 --> 21:03.660
can happen is if your packages dependencies failed to resolve because that's the one thing

21:03.660 --> 21:10.660
you don't get a notification about. And that's what really Koji does. And sadly the one thing

21:11.660 --> 21:18.660
that Koji cannot do is kick off real builds which would make automated rebuilds happen

21:18.740 --> 21:25.740
in the Fedora infra but that's then the problem that there's not enough build power available.

21:25.860 --> 21:32.860
Another thing that really does not a clear equivalent in the open SUSE world, that's

21:33.420 --> 21:40.420
Bodhi, this is an updates testing facility. So this is primarily meant for end users to

21:41.380 --> 21:48.380
test package updates. You can just log in, check out an update to your favorite package

21:49.540 --> 21:53.580
and you can vote on updates and if you suddenly realize this update breaks my system you

21:53.580 --> 22:00.580
can give it negative karma and it will not go into the distro on the next compose.

22:03.580 --> 22:10.080
And nowadays it's also used to gate draw height which might or might not be a great idea.

22:10.080 --> 22:17.080
I've heard both sides of that equation. So one thing that I'd like to also mention that's

22:18.660 --> 22:25.660
Fedora messaging. That's an AMQP based notification bus where every single of those hundreds of

22:26.100 --> 22:33.100
Fedora services sends their notifications to. Open SUSE has something as well but sadly

22:33.180 --> 22:39.180
what opens SUSE doesn't have is the equivalent of the Fedora message notifications which is

22:39.180 --> 22:45.180
where you can configure on which kinds of events you want to get notified and then it will

22:45.180 --> 22:50.820
send you messages on matrix or messages via email which might or might not be a great

22:50.820 --> 22:57.820
idea. It's a bad idea during a mastery build because rip inbox. Last thing, what about

22:57.820 --> 23:04.820
copper? That wasn't me. I'm going to pretend that doesn't happen. So I hope it's not the

23:04.820 --> 23:11.820
smoke alarm. So what about copper? Copper is a community build system and really not the

23:21.460 --> 23:28.460
main part of the bad of the build system. And now for my favorite part and because I talked

23:29.460 --> 23:35.460
too long, it's going to be quick. The good, the bad and the ugly of each of them. I'd

23:36.180 --> 23:43.180
say the good parts are on OBS. It's very flexible and if you want to carry out large scale

23:44.140 --> 23:51.140
changes that's the place to go because it's much, much simpler than to do it in Koji.

23:51.140 --> 23:57.180
And you have one place where you go and you do everything there and not 500 places like

23:57.180 --> 24:03.660
in Fedora. In Fedora on the other hand you have a bunch of simple individual systems.

24:03.660 --> 24:08.100
So every one of these things is pretty easy, pretty easy to grog by themselves and if you

24:08.100 --> 24:15.100
have to work with just one of them, it's pretty simple. And it's relatively easy to extend

24:15.860 --> 24:21.140
at least in the sense that one of those services doesn't do what you want to do, just write

24:21.140 --> 24:28.140
a new one because that's sometimes like it appears has been done in the past. The bad,

24:29.060 --> 24:36.060
getting started, it sucks on both sides. It sucks in individual ways, in different ways,

24:36.900 --> 24:43.620
but I must confess I didn't find the getting started experience in either of them good.

24:43.620 --> 24:50.300
On OBS it's the version control. It's terrible. I hope we can replace it. And handling of something

24:50.300 --> 24:55.780
like a release distribution is really weird because OBS has been built around the idea

24:55.780 --> 24:59.740
you want to constantly rebuild everything. And if you try to shoehorn something where

24:59.740 --> 25:06.740
you don't try to rebuild everything all the time, it starts to become ugly. And then the

25:06.980 --> 25:13.980
OBS dependency result. Okay, everyone who is clapping has probably worked with OBS.

25:14.660 --> 25:21.660
Short explanation for those of you who haven't. OBS does its own dependency resolution, doesn't

25:23.060 --> 25:28.660
use the package manager for that. And the dependency resolver is stupid and if there's

25:28.660 --> 25:35.660
a possibility to make a choice, it won't make it. And that's when you get this error. Yeah,

25:36.740 --> 25:42.500
no automatic rebuilds on Fedora. It sucks. I hate it. Please, can we fix that? And sometimes

25:42.540 --> 25:49.540
systems get misused. Yeah, and then the ugly. So on OBS the whole thing is just so darn

25:50.260 --> 25:55.780
complex. It's impossible to understand. There's maybe half a dozen of people who really know

25:55.780 --> 26:01.100
most of the things. And given that it's a giant monolith, it's impossible to extend

26:01.100 --> 26:08.100
unless you really know all the details. And on Fedora you have just far too many systems

26:08.660 --> 26:15.660
and far too ugly glue that then also leads to ugly things where you can't extend things

26:16.460 --> 26:23.460
and you have just duplication. So who's better? No one. Both setups just have their advantages

26:26.220 --> 26:32.820
and disadvantages. If you want to do development, do OBS. If you want to do stable distributions,

26:32.820 --> 26:37.900
Fedora. That's my personal preference. I haven't worked ever on Rails, so I don't know if it

26:37.940 --> 26:42.540
was set like in production. If you want to do both, oh, I wish we could just combine it

26:42.540 --> 26:49.540
and it would work, but I haven't found it. So I hope we start time for questions if there

26:51.780 --> 26:58.780
are. I'm sorry. You can send the hate mail to me when you find me. I'm going to run away.

27:07.900 --> 27:08.900
Thank you.

