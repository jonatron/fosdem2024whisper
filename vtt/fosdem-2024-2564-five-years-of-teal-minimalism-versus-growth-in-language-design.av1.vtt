WEBVTT

00:00.000 --> 00:16.360
Alright, so let's get started. Thank you for sticking around during lunchtime. This is

00:16.360 --> 00:27.680
going to be five years of till, minimalism versus growth in language design. Okay, here

00:27.720 --> 00:33.400
we go. Okay, quick introductions. I'm Hisham. I've been doing free software for a long time

00:33.400 --> 00:38.920
with involved in many projects. I work at Kong where we do free software like free

00:38.920 --> 00:43.520
open source API gateway using mostly Lua. I'm currently working on the team that's

00:43.520 --> 00:48.360
having web assembly support in Kong and some of my other projects are LuaRocks,

00:48.360 --> 00:54.920
package manager, Google Linux, the weirdest distro ever and Htop, the process monitor.

00:55.720 --> 01:01.600
So, but here I'm here to talk about like the project that I'm most recently excited about,

01:01.600 --> 01:09.240
which is till. Till is a statically typed dialect of the Lua language. Right, so if you know like

01:09.240 --> 01:15.640
what type script is to JavaScript, you can think it's the same, right till is to Lua,

01:15.640 --> 01:20.720
what type script is to JavaScript, but let's not go too far with that analogy because here we're

01:20.760 --> 01:25.640
trying to keep to Lua's spirit, which is like a very minimal, a very tiny language and like I

01:25.640 --> 01:31.440
don't have the backing of Microsoft and hundreds of developers working on as they do on type script,

01:31.440 --> 01:39.120
but essentially we have a compiler, till that outputs Lua files. And so here's a quick taste of

01:39.120 --> 01:44.640
what till looks like. This is just like a random function I picked like from the source code of

01:45.240 --> 01:54.560
the latest version of till that I'm working on. And so what's lighter here like is what is not Lua,

01:54.560 --> 01:59.840
essentially the parts of till that are different from Lua. So we have a couple of different

01:59.840 --> 02:05.320
operators, you can add types there, but otherwise as you can see it's it's mostly regular Lua.

02:05.320 --> 02:12.880
I made the mistake of talking about till before without showing lots of search code. So this time

02:13.120 --> 02:18.200
I'm gonna make sure I show source code till is like the epitome of like conference driven

02:18.200 --> 02:25.240
development because when I first had the idea I started like hacking it together and like when

02:25.240 --> 02:29.920
I first presented it like was the challenge like can we do this right? Can we add types while

02:29.920 --> 02:34.280
remaining minimal and when I presented it back in 2019 like I was like halfway through like the

02:34.280 --> 02:39.560
compiler student compile itself and I show like oh I started like 500 errors and I'm currently like

02:39.600 --> 02:44.440
100 or something like that. But eventually I got it working and then the next year I came back here

02:44.440 --> 02:50.160
and show it to you and I said like minimalist type Lua is here and there's this weird title

02:50.160 --> 02:57.040
because the language didn't have a name yet. So and then eventually at the third part of the

02:57.040 --> 03:02.040
trilogy we had a name and we actually had users and had stuff going actually going on with the

03:02.040 --> 03:07.560
language. But and then I basically said that well now I think I'm gonna get let it settle for a bit

03:07.960 --> 03:12.240
so that people can actually use it because if the language keep changing syntax like all the time

03:12.240 --> 03:20.520
and stuff like that like people won't feel comfortable adopting it right. So yeah so that's

03:20.520 --> 03:25.120
what's be going like we have like this small community I always like to make a distinction

03:25.120 --> 03:30.320
between like a community and a user base right because especially in the industry people like

03:30.320 --> 03:35.160
to look at numbers so whenever people ask me how is still going like I tell him like oh we're like

03:35.200 --> 03:41.600
1.8k GitHub stars which is like the vanity metric like that doesn't really mean anything right but

03:41.600 --> 03:46.920
it means something right but in but in practice when I when I think about a community I think

03:46.920 --> 03:52.200
about the people who are involved with it and then I could say like like oh there there are like all

03:52.200 --> 03:59.480
of the other people who gotten involved right because I'm just doing the source-to-source compiler

03:59.840 --> 04:05.520
right and then there's people doing the build system there's people doing like the VS code

04:05.520 --> 04:11.760
plugin right that gives like IDE autocomplete those sorts of things so in nowadays for a language

04:11.760 --> 04:17.360
that's that's part of the whole package that's what expected of a modern language right so if I if

04:17.360 --> 04:21.440
I think on when I think of the two community I think about like I don't know like 10 people or

04:21.440 --> 04:26.760
or even less right but the people who regularly discuss on GitHub and all of that so right that

04:27.040 --> 04:35.680
that's the community right like the human aspect of it and speaking of community feedback here is

04:35.680 --> 04:40.000
like this is a full screenshot of like all of like if you go through all of the issues pages

04:40.000 --> 04:45.040
there are currently like if you open the the till GitHub repo right now there's like 67 issues like

04:45.040 --> 04:50.800
these are all of them right and I one thing I hate about GitHub is that they call everything issues

04:50.800 --> 04:56.000
right so like feature requests like back in the days of search for so we're like separate pages for

04:56.040 --> 05:01.360
like bugs and feature requests right and out like calling a feature request issue I think it's like

05:01.360 --> 05:06.440
super weird like I would like the program to do something that you did not design it to do now

05:06.440 --> 05:13.760
your code has issues right it's like no so basically what I do I label all of them like so the ones

05:13.760 --> 05:18.320
with the light labels here are feature requests and the ones with like the darker labels which are

05:18.320 --> 05:23.840
like the red ones those are the bugs right so I currently have like five open bugs and like

05:24.800 --> 05:32.160
three pages of feature requests right and and it's nice like sometimes you don't want to close

05:32.160 --> 05:35.280
your feature request you want to keep them around so that other people who have the same

05:35.280 --> 05:40.080
request can see and comment on them right so basically over time your job is going to keep

05:40.080 --> 05:43.440
accumulated an endless list of feature requests you're going to look at the repo and one day

05:43.440 --> 05:49.920
will have like 200 open issues oh this program must be all broken right no no it has a lot of

05:49.920 --> 05:54.640
people who are very interested in it this is actually a sign of success like people are interested

05:54.640 --> 06:02.960
in your program enough so that they are using it and asking for more stuff right so yeah so but then

06:02.960 --> 06:06.640
once you have this many feature requests like and we're here talking about minimalism how to keep

06:06.640 --> 06:11.760
the language small right I cannot add everything that people ask for and this is like my hobby side

06:11.760 --> 06:16.560
project currently I don't even have the time even if I wanted to right but I don't want to because

06:16.560 --> 06:22.080
I wanted to keep it small keeping to the like that idea from the very first talk like the challenge

06:22.080 --> 06:27.840
was how to keep it small right and the challenging thing is like I can't add everything that people

06:27.840 --> 06:32.320
ask for or even everything that people contribute because not only people go there and ask feature

06:32.320 --> 06:40.000
requests some people actually send in features like all written like a spoil requests like like I

06:40.000 --> 06:45.760
would like to do this extra thing and here's the code to do it please add it and I go like sorry

06:45.760 --> 06:55.680
right but but it's super important feedback right so uh yeah but when you go go back like it's always

06:55.680 --> 07:01.040
nice to look at that whole list and look try to look at the big picture right and then I saw like two

07:01.040 --> 07:08.000
like very recurring themes on things that people were asking for like related about like one is

07:08.000 --> 07:16.400
like nil safety right the famous uh billion dollar mistake right as as mentioned by touring award winner

07:16.400 --> 07:24.240
like 24 when he talked about this uh saying like adding the concept of null to a programming language

07:24.240 --> 07:30.240
was back in the day was his mistake because like everything that came out of that afterwards and

07:30.480 --> 07:37.280
um and lua is another of those language this does has like a nil type right and all of the

07:37.280 --> 07:44.000
consequences come with that uh and the other one is that people keep asking for abilities to express

07:44.560 --> 07:49.680
more complex table types because lua is like every like the only single composite type that you have

07:49.680 --> 07:55.840
like apart from like integers like like numbers bullions like and like tables right which is a

07:55.840 --> 08:02.800
thing that doubles as a hash table and an array right like it's there's a thing with keys and values

08:02.800 --> 08:08.560
and if you use numbers the the it has like some special behaviors to make an array access efficient

08:08.560 --> 08:14.160
but otherwise just think of it as one big thing with keys and values but once you start talking

08:14.160 --> 08:19.280
about types you look like oh this table is really an object this table is really a map this table is

08:19.280 --> 08:26.320
really an array this table is really a a map except when you use integer keys then i wanted to

08:26.320 --> 08:29.840
act as an array like these are kind of things that lua programmers do all the time because once you

08:29.840 --> 08:34.080
have a table that accepts everything right you start having these composite types and all these

08:34.080 --> 08:40.000
weird things and but then people mix it up right and those are the bugs that people run into when

08:40.000 --> 08:46.560
they're coding in lua with no explicit typing and they would like teal to help them with that right

08:49.440 --> 08:54.560
so let's talk about the first one uh a little uh so as i mentioned i was mentioning like

08:54.560 --> 09:00.880
giving that every variable can accept nil and you can pass stuff around like that uh until

09:00.880 --> 09:06.640
basically every type includes nil as a possible value right if you declare a variable as integer

09:06.640 --> 09:11.920
you can still put nil in there like essentially every variable is like optional right and in that

09:11.920 --> 09:18.720
sense so this has some consequences right this makes for example that uh in lua like you declare

09:18.720 --> 09:23.600
a function to have like three arguments you can just pass one argument or no arguments and like

09:23.600 --> 09:27.920
the lua vm will accept it and people do that on purpose because essentially they mean like oh in

09:27.920 --> 09:34.320
the semantics of my my application that argument is optional right so uh so lua accepts that and

09:34.320 --> 09:41.120
because lua accepts that teal accepts that right and uh another side effect is that in table like

09:41.200 --> 09:48.880
missing keys are valid right so um people let's say you define a function that operates on a table

09:48.880 --> 09:56.240
that has like x and y uh fields right uh but then your in your program since you decide

09:56.240 --> 09:59.760
since you designed that function that just wants to take something that takes x and y you want to

09:59.760 --> 10:07.120
pass other things right that have extra fields and sometimes they don't right so uh it gets it gets

10:07.120 --> 10:15.040
really messy right uh so in one of the previous talks i mentioned about like that i started looking

10:15.040 --> 10:22.080
at like doing the whole thing about uh implementing like nullability checks into the variables and

10:22.080 --> 10:27.120
how like and i showed like the size of the teal compiler source code versus the size of like

10:27.120 --> 10:31.840
all of the code to do proper reachability tests for null variables and everything and make like

10:31.840 --> 10:36.480
the whole check super automatic and it started to get like bigger than the compiler itself uh

10:37.120 --> 10:42.400
so that was sort of like a complete but heavyweight solution right so a very lightweight solution or

10:42.400 --> 10:47.520
i would say lighter weight solution like then actually having the proper optional types that

10:47.520 --> 10:52.800
people really want right was to have just arity checks which is like how many things you actually

10:52.800 --> 10:59.600
put inside the parentheses when calling a function right so and yes if eventually we find like a

10:59.600 --> 11:04.640
lightweight way to like nicely do optional types this will become sort of a redundant feature

11:05.360 --> 11:09.600
but this is this is what it looks like right if you have a function that takes like

11:10.560 --> 11:14.960
two parameters like if you pass two parameters then it's valid so if you just pass one parameter

11:14.960 --> 11:19.520
this didn't fail before but it will catch the error now but if you pass two parameters and one of

11:19.520 --> 11:24.480
them is nil well you know the arity of the function is still two so that's so that's valid right but

11:25.120 --> 11:30.960
who will write this right so i mean it's very like 80 20 thing like it's a very simple thing that

11:30.960 --> 11:35.680
catches like the kinds of mistakes that people actually do right so you have you kind of have to

11:35.680 --> 11:42.720
be uh forcing to to to get into trouble with that so uh yeah but if you want to be able to do that

11:42.720 --> 11:47.760
then you act you actually mark the arity like not in the type but in the argument right like the

11:47.760 --> 11:54.080
the argument is optional it's not that the type of y is like an optional integer the type is integer

11:54.080 --> 12:00.160
but y is an optional argument right so that's like a very simple to implement thing like that

12:00.160 --> 12:05.440
i had it i can draft state for a long time and i just decided to put that in into the language

12:05.440 --> 12:08.960
because it's always like oh do i want to add one more feature to the language right do i want to

12:08.960 --> 12:14.560
because i was able to do like to write the till compiler in itself so with the features that

12:14.560 --> 12:20.240
currently has you're able to write a compiler so like i go like okay the features look enough right

12:20.240 --> 12:25.680
but people get asking for more features so but then like being possible and being pleasant is kind

12:25.680 --> 12:29.600
of different i already feel like like coding in till in general because of the helps that type give

12:29.600 --> 12:35.360
you already feels like more pleasant to me as a very in a very subjective way than coding in like

12:35.360 --> 12:41.840
plain lua right but when i started working on the next feature like then i really wanted to have

12:41.840 --> 12:45.920
this because i wanted to do big refactors and change the numbers of arguments of things and

12:45.920 --> 12:51.440
i wanted the compiler to tell me uh if uh if i was making mistakes so i added this feature

12:51.440 --> 12:59.360
feature for my own use and it already proved like useful enough and uh yeah so if we're doing that

12:59.360 --> 13:05.280
for nil safety for for arguments what about uh for table keys can we do that it's trickier to

13:05.280 --> 13:11.440
pull it off right because uh even if you want to say like oh this key is optional this key is mandatory

13:11.440 --> 13:14.960
some one thing that people do in lua all the time is just like start a table with like open

13:14.960 --> 13:20.080
closed bracket like this is an empty table and start filling the elements one by one so like

13:20.080 --> 13:24.720
after the table is ready right that argument's no longer optional but it's optional for a while

13:24.720 --> 13:32.880
and it's a very common pattern so um however uh since i had a feature that i created for my

13:32.880 --> 13:39.520
own use of how i specify maps i adopted that for records as well so uh which is that total

13:39.520 --> 13:45.360
annotation because like lua like modern lua has these annotations like const and and so i just

13:45.360 --> 13:50.160
i don't want to say total which is for things like this right if you have an enum saying like

13:50.160 --> 13:56.080
which essentially restricts your string type into a set of known strings right you can say that

13:56.080 --> 14:00.880
the map that you're declaring here is total so the compiler will give you an error here because

14:00.880 --> 14:12.080
you specified north and south but not east and west okay so uh right so essentially we did the same

14:12.080 --> 14:19.200
for uh records right so uh you can specify a total record and for that use case of i'm declaring a

14:19.200 --> 14:25.120
table and i want everything to be in it uh you can uh you can specify that again like it's a

14:25.120 --> 14:29.040
lightweight solution then the whole solution but it's something that already gives you uh

14:29.760 --> 14:36.480
you know gets you a long way um okay so uh just because we started late right how

14:36.560 --> 14:39.200
how do how do we go on time like do i just keep going and then

14:42.400 --> 14:51.680
right okay all right so uh yeah so then the second one which is like the more interesting one is like

14:51.680 --> 14:59.680
subtitling table types i mean like i have avoided going with like complicated uh sub typing definitions

14:59.680 --> 15:05.840
as as you start combining uh those kinds of features like you can you can go real crazy with

15:05.840 --> 15:11.040
that like with even like features that programmers in type languages use every day like if you combine

15:11.680 --> 15:18.160
like generics and sub typing like there are computer sign results that show you that you

15:18.160 --> 15:24.560
end up with like a computationally undecidable type system and things like that so uh so i have

15:24.560 --> 15:29.920
avoided like delving into this complexity for as long as i could so for that super common case of

15:29.920 --> 15:34.960
i have this table which is a record in an array at the same time i added this jenki type that's

15:34.960 --> 15:41.680
array record that's just for doing that uh and to avoid having to do sub typing and things like that

15:41.680 --> 15:46.240
like and complex type hierarchies just because i wanted to have collections like i added like

15:46.240 --> 15:51.040
invariant generics so you can have like list of t but you cannot specify anything about t

15:51.840 --> 15:58.640
and then that worked and because uh typing and callbacks and passing like checking

15:58.640 --> 16:03.040
function arguments for covariance versus contravariant and all that gets complicated

16:03.040 --> 16:07.280
you just do bivariant matching you like you accepted both ways which is like

16:07.280 --> 16:13.040
wrong like it's unsound by design right but it will at least prevent you from matching like

16:13.040 --> 16:16.720
completely unrelated functions like you're not passing like the wrong function but

16:16.720 --> 16:24.240
if you're doing the thing like in the correct ballpark it will catch it right so um yeah which is

16:24.240 --> 16:31.760
some kind of like unsoundness by design that top typescript already has to do so uh yeah and one big

16:31.760 --> 16:35.680
limitation that we have because we had union types but you cannot you could not have union

16:35.680 --> 16:41.760
types of multiple table types right because at runtime the code that it translates to when you're

16:41.760 --> 16:46.960
trying to check like which which value i have in this union type which is like oh it's a it's an

16:46.960 --> 16:54.880
engineer or uh like my record like my object the luo code that that would generate uh became like

16:55.760 --> 17:02.080
luo code that says like show check that the luo type is number or check that the luo type is

17:02.080 --> 17:08.560
table and then it couldn't tell all the tables apart at runtime right so you will have to generate

17:08.560 --> 17:13.600
code that actually checks the tables by their contents right so you can tell like is this a

17:13.600 --> 17:19.360
circle is this a triangle is this like what is this right and turns out that in the real world

17:19.360 --> 17:24.240
a luo programmer is like an existing luo frameworks that people would want to use with till define

17:24.240 --> 17:31.280
their own object or oop like object-oriented systems with their own like inheritance systems and how to

17:31.840 --> 17:38.080
how to declare like the the the type checking right people already do this writing this custom code

17:38.080 --> 17:45.280
for type checking right but then the till compiler doesn't understand that right so uh for things like

17:45.280 --> 17:49.760
this if i want to have the is operator to work nicely in till so that the compiler understand it

17:49.760 --> 17:57.440
like i need to be able to translate that to that like framework specific way of determining like

17:57.440 --> 18:06.000
what the type is right so since we had records before like the the next version of till is going

18:06.000 --> 18:10.800
to have interfaces right so the interface like this was instead of writing record you write interface

18:10.800 --> 18:16.080
right but now you can you can actually have subtyping from interfaces which are abstract

18:16.080 --> 18:23.920
into records but then you have this fine where clause here which has an expression like it has

18:23.920 --> 18:28.880
a bit of code with essentially is like when you want to do an is check this is the code that you

18:28.880 --> 18:33.600
should use like it's essentially a macro right you have to replace this everywhere you need to

18:33.600 --> 18:42.560
do that change right and now essentially you can do uh you can do union types as long as the all of

18:42.560 --> 18:50.240
the types that you are putting in the union declare like there how to do the is operation right and

18:52.240 --> 18:58.720
yeah we're only on time so yeah so that's essentially what i described there and the thing is that that

19:00.000 --> 19:04.480
that magic where clause right essentially i had to add a feature to add a feature right because like

19:05.280 --> 19:08.960
i'm really having i'm having i'm really having to implement like a macro expansion thing for

19:09.040 --> 19:14.160
expressions just in order to have that work loss so like why not expose that but then again

19:14.720 --> 19:18.640
i thought like oh so i need to add macros to the language no i just went lighter wait again i just

19:18.640 --> 19:25.120
added macros for expressions and not like a full macro processor right which is what many projects

19:25.120 --> 19:30.160
for lua have tried to do in over the years but one of none of them like have become established

19:30.160 --> 19:36.240
right and turns out that where now it's syntactic sugar like we actually have like macro expressions

19:36.240 --> 19:41.440
in the language right but it was motivated by that right so in short what happened like till

19:41.440 --> 19:46.960
has seen use okay people want more features and less limitations which translates to many future

19:46.960 --> 19:54.560
requests oh no right but many future requests they relate to the same pain points right so the idea

19:54.560 --> 19:59.440
is that you try to combine them and come up with like the what's the most minimal design to try to

19:59.440 --> 20:03.760
address the most of these pain points so the things that came up out of that were like optional

20:03.760 --> 20:08.880
iris interfaces macro expressions and the idea was that i would just pick the lighter weight

20:08.880 --> 20:15.200
solution right because whenever possible like just to try to like just harking back to the title like

20:15.920 --> 20:20.320
minimalism of the language versus its growth right both the growth of the compiler the growth of

20:20.320 --> 20:25.760
the language specification and the growth of the user base right so so that's the approach that i

20:25.760 --> 20:31.280
took like you know you sometimes you have to choose like the incomplete solution just in order to

20:32.240 --> 20:38.400
balance all of those desires right so yeah that's it what i had thank you for sitting around

20:45.440 --> 20:50.640
thank you we need to free up the room for the next round but we can still have one or two quick

20:50.640 --> 20:54.000
questions

20:54.000 --> 20:57.000
Yeah, yeah.

20:57.000 --> 21:02.000
So have you decided what to improve the meta programming

21:02.000 --> 21:08.000
or doing some stuff, but what the meta tables and all that stuff?

21:08.000 --> 21:09.000
Okay.

21:09.000 --> 21:14.000
Have you ever decided for a new program or a new country

21:14.000 --> 21:17.000
you know the goal with the LAT?

21:17.000 --> 21:20.000
If I have some plan to improve the handling of meta tables,

21:20.000 --> 21:24.000
meta tables, it currently does have support for meta tables

21:24.000 --> 21:27.000
in records, you can specify them.

21:27.000 --> 21:30.000
The checks are not very strict, right?

21:30.000 --> 21:32.000
And I haven't had much feedback on that.

21:32.000 --> 21:36.000
So like if people run into trouble, I look into it,

21:36.000 --> 21:38.000
otherwise I'm just going to keep it as it is.

21:38.000 --> 21:40.000
Right now you can use them and no one's complaining,

21:40.000 --> 21:44.000
so I'm happy with that.

21:45.000 --> 21:47.000
Thank you.

21:47.000 --> 21:48.000
Thank you.

