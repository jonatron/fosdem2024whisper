WEBVTT

00:00.000 --> 00:10.320
I have, I've just been informed that I have a two hour talk.

00:10.320 --> 00:14.120
So we're going to use that, we're going to use that time wisely.

00:14.120 --> 00:16.440
Hopefully we also have like a minute.

00:16.440 --> 00:21.960
So I can't start talking with the talk until for another minute.

00:21.960 --> 00:27.600
So with that, who's, this is your first time at FOSDEM.

00:27.600 --> 00:31.120
I'm also raising my hands for this first time, tried for years and finally got here.

00:31.120 --> 00:34.680
So cool, glad you're all here.

00:34.680 --> 00:42.080
So now it's like 25 seconds, we have to kind of just whatever.

00:42.080 --> 00:45.520
Yeah, everybody awake?

00:45.520 --> 00:47.480
Who, what was the latest you were out?

00:47.480 --> 00:52.040
Like who was, who was out, who went to bed at like 10?

00:52.040 --> 00:53.880
Okay, good, nobody.

00:53.880 --> 00:58.480
And that doesn't mean 10 this morning, when after this and just been up.

00:58.480 --> 01:02.960
Who was, who went to bed after midnight?

01:02.960 --> 01:12.200
One, two, three, three, 15.

01:12.200 --> 01:13.680
That was three, 15.

01:13.680 --> 01:17.680
Four, are you, you're still awake.

01:17.680 --> 01:18.520
You're still good.

01:18.520 --> 01:19.440
Okay.

01:19.440 --> 01:23.160
All right, so we are, we're going to start now.

01:23.280 --> 01:24.400
Hi, I'm Jeremy.

01:24.400 --> 01:30.040
We're going to talk about streamlining developer experience, power of CICD standardization

01:30.040 --> 01:32.280
and interoperability.

01:32.280 --> 01:38.520
Really going to kind of touch on when we think about developer experience, how,

01:38.520 --> 01:43.880
what's kind of the role of CICD in that and how it fits within all of the different kind

01:43.880 --> 01:46.880
of tools and systems that we use.

01:46.880 --> 01:48.360
So I'm going to talk about that.

01:48.360 --> 01:52.680
A quick note, I did use on a fair amount of these slides.

01:52.680 --> 01:55.080
Because I had evidently time on my hands.

01:55.080 --> 01:59.760
I used chat, GBT and Dahli for the images.

01:59.760 --> 02:05.200
So that is a very interesting, don't, don't go into it thinking you're going to get exactly

02:05.200 --> 02:08.200
what you want.

02:08.200 --> 02:13.080
As you'll see on some of the slides, it's a little weird, but why not?

02:13.080 --> 02:15.880
So we're going to jump into that, figured I'd try something new.

02:15.880 --> 02:19.560
Okay, so you said, my name is Jeremy Meese.

02:19.560 --> 02:24.440
I'm the co-founder of a kind of a stealth DevEx startup right now.

02:24.440 --> 02:27.200
Hopefully we'll have some news in the next couple months.

02:27.200 --> 02:34.520
But yes, so Jeremy Meese, I've done, I've been in tech for a couple decades.

02:34.520 --> 02:39.600
Previously, most recently, I was at CircleCI for about three and a half years, running

02:39.600 --> 02:43.120
the DevRel and community team, doing a lot of talking around CICD and stuff.

02:43.120 --> 02:46.040
So that's me.

02:46.040 --> 02:51.720
Now I did have some early feedback on the title of this talk.

02:51.720 --> 02:56.760
So Gray had a lot to say around, this is probably heretical, what I'm going to talk about.

02:56.760 --> 02:58.160
I don't know about that.

02:58.160 --> 03:00.760
Heresy, but I felt that was kind of harsh.

03:00.760 --> 03:04.720
He hadn't even heard the talk and already he's given some feedback.

03:04.720 --> 03:10.520
But we're going to kind of talk about this evolving landscape of software development,

03:10.520 --> 03:11.520
especially in the modern world.

03:11.520 --> 03:19.520
If you've ever seen the CNCF landscape, could not even fit on one slide.

03:19.520 --> 03:21.960
I mean, it's fit on one slide, but there's no way you're going to read it.

03:21.960 --> 03:24.760
That's how big that's evolved.

03:24.760 --> 03:29.000
I really should have had a slide that showed some progression over time.

03:29.000 --> 03:31.360
But when you think about, this was a couple of days ago.

03:31.360 --> 03:35.000
I'm sure it's grown in that time.

03:35.000 --> 03:39.040
But continuous integration has a good, when you kind of zoom in, it has a good section

03:39.040 --> 03:40.040
of that.

03:40.480 --> 03:44.800
And it stands really as kind of this, CICD does, stands as this kind of transformative

03:44.800 --> 03:49.560
pillar that kind of has reshaped how we look at software and how we look at deployments

03:49.560 --> 03:56.800
and how we look at delivering quality software to, hopefully quality software, to the users,

03:56.800 --> 04:00.440
to the companies and such.

04:00.440 --> 04:03.360
And kind of driving that very experience.

04:03.360 --> 04:09.120
I also put out, kind of feel, when we think about developer experience, what is the kind

04:09.200 --> 04:11.560
of shortened version of that?

04:11.560 --> 04:14.120
And we're going to use DevX.

04:14.120 --> 04:17.800
The internet has spoken, so we're going to use DevX, not DX.

04:17.800 --> 04:21.960
So you all say DevX for short, instead of saying all of developer experience over the

04:21.960 --> 04:25.120
next three hours, I think we have.

04:25.120 --> 04:26.120
Okay.

04:26.120 --> 04:31.760
So developer experience, kind of defining it, it really kind of encompasses the journey

04:31.760 --> 04:37.120
of the developers as they're learning and deploying technology, whether that's software,

04:37.120 --> 04:40.880
whether that's even hardware kind of fits into that.

04:40.880 --> 04:47.120
And when you have a successful developer experience, it really is focusing on eliminating the obstacles

04:47.120 --> 04:52.840
that hinder developer or a practitioner from being successful in their endeavors, whatever

04:52.840 --> 04:55.440
they're trying to do.

04:55.440 --> 05:02.320
Now CICD's transformative influence that we've seen on the developer experience is really

05:02.400 --> 05:03.400
pretty profound.

05:03.400 --> 05:08.040
Because we've had kind of this dynamic shift in how developers over the years have collaborated,

05:08.040 --> 05:11.040
how they create, you know, how they deliver software.

05:11.040 --> 05:15.600
And by automating, you know, the pipelines and like the integration and testing, deployment

05:15.600 --> 05:20.840
processes, all those things, it really is to empower developers to really gather the

05:20.840 --> 05:26.000
feedback necessary with those feedback loops, having faster ones, so that they can improve

05:26.000 --> 05:31.320
the code quality and the ability to continue to iterate swiftly.

05:31.320 --> 05:35.200
That is not a Taylor Swift drop, it's just iterate swiftly.

05:35.200 --> 05:42.200
But by streamlining workflows, that helps to reduce a lot of the friction that we see,

05:43.160 --> 05:45.280
provides a lot of intuitive tools.

05:45.280 --> 05:50.240
And so you have like this good DevX empowers developers to focus on creating that high

05:50.240 --> 05:55.960
quality code we talked about, fostering the innovation and really eliminating and contributing

05:56.080 --> 06:02.600
to, you know, faster, more, ultimately contributing to faster, more reliable software delivery.

06:02.600 --> 06:06.320
So we're going to kind of hone in on the two of the critical pieces of what that looks

06:06.320 --> 06:11.480
like in CICD with standardization and interoperability.

06:11.480 --> 06:18.480
So from the CICD standardization side, that really brings the consistency necessary to

06:19.120 --> 06:20.120
your pipeline.

06:20.120 --> 06:25.640
So that you can reduce the friction, you can enhance the collaboration between your different

06:25.680 --> 06:27.360
coworkers or different teams.

06:27.360 --> 06:31.840
So we're going to also look in this at a few open source tools.

06:31.840 --> 06:34.360
We're going to look at Argo and Flux.

06:34.360 --> 06:37.240
I'm not going to bring up any demos or anything, but we're going to talk about some of the

06:37.240 --> 06:42.400
features that they have that really work well with this kind of standardization idea of

06:42.400 --> 06:47.000
standardizing processes and how you deliver good software that way.

06:47.000 --> 06:53.600
Then we're also going to talk about the interoperability side, which is kind of ensures a seamless

06:53.640 --> 06:59.360
integration across multiple different tool sets, everything from observability to, you

06:59.360 --> 07:02.080
know, different, potentially different frameworks.

07:02.080 --> 07:05.440
You have all the different tools that kind of integrate with that.

07:05.440 --> 07:09.080
So with that, we'll look at, you know, some of the features that Spinnaker has and also

07:09.080 --> 07:13.920
tools like Backstage, how they kind of work with the developer experience on the interoperability

07:13.920 --> 07:17.800
side, bridging kind of tool chain gaps and such.

07:17.800 --> 07:21.080
At the end kind of whole thing, we're going to kind of really dive in, not really dive,

07:21.120 --> 07:25.800
but just kind of summarize how that both of those things play a pivotal role in optimizing

07:25.800 --> 07:29.040
developer experience and improving, you know, overall productivity, which is really kind

07:29.040 --> 07:30.040
of the idea.

07:30.040 --> 07:37.040
All right, so the standardization side, that really means we're trying to minimize the

07:38.280 --> 07:42.720
variability, reducing all the errors, fostering environment where developers can, you know,

07:42.720 --> 07:43.720
again, collaborate.

07:43.720 --> 07:46.120
That's efficient collaboration.

07:46.160 --> 07:53.160
So when you're standardizing that, you're kind of defining clear, repeatable, no, not

07:54.200 --> 08:01.200
yet, clear, repeatable code integration, testing, deployment processes, all of those

08:01.560 --> 08:06.520
kind of things when you standardize that ensures that you're having like your pipelines are

08:06.520 --> 08:11.960
streamlined, the developer process becomes a lot more, a lot smoother for everyone that's

08:11.960 --> 08:15.800
interacting with what you're trying to do, whether you're building something internally

08:15.840 --> 08:19.200
or for external users or both.

08:19.200 --> 08:23.360
So when we think about that kind of the steps for what kind of better practices look like

08:23.360 --> 08:27.760
for that, we start with kind of assessment and analysis with that.

08:27.760 --> 08:31.960
So here you're really kind of looking at your current CI CD pipelines.

08:31.960 --> 08:37.560
You want to understand kind of existing workflows, the tools, all the processes that you're using

08:37.560 --> 08:43.200
to identify the pain points, the bottlenecks, and then, you know, areas where standardization

08:43.240 --> 08:45.160
really is needed.

08:45.160 --> 08:47.840
And then the next kind of thing with that is you're going to kind of look at all the specific

08:47.840 --> 08:53.120
requirements that are in place and the constraints of your projects and the development of that

08:53.120 --> 08:55.360
first step there.

08:55.360 --> 08:59.960
Then when you're defining this, you're really going to kind of define the goals and objectives

08:59.960 --> 09:03.960
that you're trying to achieve with your pipeline standardization.

09:03.960 --> 09:08.200
And those goals are really going to try and align with the overall dev strategy that you

09:08.200 --> 09:11.440
have and some of the organization business objectives.

09:11.480 --> 09:14.480
You don't want to stray away from that.

09:14.480 --> 09:17.880
And that also kind of helps you start to kind of identify those KPIs that are going to really

09:17.880 --> 09:24.160
measure what success looks like for you in your development process.

09:24.160 --> 09:28.880
Usually that looks like you're probably going to try and reduce deployment times or decrease,

09:28.880 --> 09:29.880
you know, error rates.

09:29.880 --> 09:33.800
We always want to try and obviously decrease error rates.

09:33.800 --> 09:39.440
Then you want to look at what the tools and practices are going to be for your CI CD standardization.

09:39.440 --> 09:45.840
So, you know, things are going to align with your organization's needs and goals.

09:45.840 --> 09:51.360
So that's things like Jenkins, GitLab, CI CD.

09:51.360 --> 09:54.200
There's other cloud native solutions.

09:54.200 --> 09:56.880
AWS code pipeline.

09:56.880 --> 09:59.560
There's I think Team City, I think is on the cloud side.

09:59.560 --> 10:01.440
There's a bunch of different options there.

10:01.440 --> 10:04.760
But you want to make sure you have those tools and practices that help you achieve those

10:04.760 --> 10:06.560
goals.

10:06.680 --> 10:11.640
There's some standardized templates for pipelines defining those essential stages of build,

10:11.640 --> 10:14.960
test, deploy, what's that going to look like for you.

10:14.960 --> 10:20.560
And then kind of what a standard configuration would be for all of your pipelines.

10:20.560 --> 10:24.080
And then you're also going to enforce a lot of those coding standards for CI CD, those

10:24.080 --> 10:28.440
configurations ensuring that there is consistency and readability for everything that you're

10:28.440 --> 10:29.440
doing.

10:29.440 --> 10:33.360
So somebody can come in and understand exactly what you're trying to do and you don't have

10:33.360 --> 10:34.960
to spend a lot of time kind of.

10:34.960 --> 10:40.200
I mean, there's going to be onboarding, but you want to make it as standardized and relatively

10:40.200 --> 10:42.760
simple as possible.

10:42.760 --> 10:48.360
And then on the documentation training, which is kind of touched on quickly, you want to

10:48.360 --> 10:53.200
make sure that documentation is comprehensive, that you're outlining all of the standardized

10:53.200 --> 10:54.800
processes that you have in place.

10:54.800 --> 11:01.880
Make sure everybody is aware of how you work, including how you work with your workflows.

11:01.880 --> 11:04.920
How do you, you know, what's your standard configuration?

11:04.920 --> 11:08.360
What are some of those better practices that you're using inside your organization?

11:08.360 --> 11:10.280
Make sure that's documented.

11:10.280 --> 11:14.680
And then you're also providing a lot of those training sessions for your dev teams and your

11:14.680 --> 11:18.760
support teams that work with the dev teams, ensuring that they're understanding and can

11:18.760 --> 11:26.120
be really effective in as they use your CI CD tooling and all those templates that get

11:26.120 --> 11:27.120
created.

11:27.120 --> 11:29.760
Then you kind of move into the version control side.

11:29.760 --> 11:33.680
You want to make sure you're storing those pipeline configs in some kind of VCS, you

11:33.680 --> 11:37.200
know, Git, GitLab, GitHub, whatever.

11:37.200 --> 11:41.400
That practice there is really going to ensure that your configurations are versioned so

11:41.400 --> 11:45.920
you know you can go back to something, you know what the changes were, you can trace

11:45.920 --> 11:50.200
where potential errors are, and you can, like I said, revert, you can easily get back to

11:50.200 --> 11:53.120
something if you need to.

11:53.120 --> 11:57.040
And then implement your branching and pull request strategies.

11:57.040 --> 12:01.560
It should mirror what you're already doing in your standard that you've already hopefully

12:01.600 --> 12:05.920
documented that we just talked about, but making sure that all of the, you think about

12:05.920 --> 12:13.360
the standard templates and such is that they're all kind of following in that same path of

12:13.360 --> 12:16.760
branching, pull request and such.

12:16.760 --> 12:18.280
And then automated testing.

12:18.280 --> 12:21.200
Since this is testing room, we want to make sure we talk about testing.

12:21.200 --> 12:24.520
You want to make sure you're integrating your automated testing and validation into the

12:24.520 --> 12:30.080
pipeline and all those templates to ensure that, you know, those standardized configs

12:30.200 --> 12:32.920
produce your expected results.

12:32.920 --> 12:36.680
Don't just create a standardized template and not test out to make sure that works.

12:36.680 --> 12:40.480
Otherwise you're going to create problems downstream.

12:40.480 --> 12:43.080
Another great opportunity to put code reviews in place.

12:43.080 --> 12:46.160
Build out your standardized templates and then start code reviews.

12:46.160 --> 12:47.520
Make sure that you're not missing something.

12:47.520 --> 12:49.560
Bring more eyes to it.

12:49.560 --> 12:54.560
Validate that, catch those errors before they become an issue downstream.

12:54.560 --> 12:57.120
Okay.

12:57.160 --> 13:02.680
And then continuous monitoring, continuous integration side of this or continuous improvement.

13:02.680 --> 13:07.200
Make sure you're monitoring and having alerting in your CIECD pipeline so you're detecting

13:07.200 --> 13:12.480
the issues bottlenecks in real time before they become an issue.

13:12.480 --> 13:16.680
Establish kind of this culture of kind of continuous improvement.

13:16.680 --> 13:21.480
So that means you're regularly reviewing, updating those, you know, those pipelines based

13:21.480 --> 13:26.840
on the feedback and evolving kind of framework that your projects and pipelines go through.

13:26.840 --> 13:32.080
Make sure you're not, those templates aren't being left behind.

13:32.080 --> 13:38.320
Also governance and compliance is very much an important part of the CIECD standardization.

13:38.320 --> 13:45.120
So make sure your policies are enforcing pipelines, the standardized pipelines and compliance

13:45.120 --> 13:50.640
with industry regs, regulations or, you know, some internal or external standards that are

13:50.640 --> 13:51.640
in place.

13:51.640 --> 13:54.800
Make sure that you're accounting for those.

13:54.800 --> 14:00.600
Really audit and assess how you are adhering to those to make sure that you continue to

14:00.600 --> 14:03.560
improve there as well.

14:03.560 --> 14:08.640
Scaling and adaptation, ensuring that, you know, those standardized pipeline templates

14:08.640 --> 14:14.720
are something that can scale and adapt to the different project types that you have.

14:14.720 --> 14:18.560
Every team or, you know, an organization probably has different types of projects that you're

14:18.560 --> 14:19.800
all working on.

14:19.800 --> 14:25.760
So make sure those templates are easily applied to different, you know, different things that

14:25.760 --> 14:29.520
you're doing, different sizes, different technologies that might be in place inside your organization

14:29.520 --> 14:32.880
or that you're developing for external.

14:32.880 --> 14:37.440
Maintaining the flexibility kind of helps there to accommodate the unique requirements

14:37.440 --> 14:44.080
that each project is going to have, but also making sure you're still adhering to your

14:44.080 --> 14:47.040
standardized core practices.

14:47.040 --> 14:48.600
And then there's that feedback loop.

14:48.600 --> 14:53.480
Very much a part of DevOps is feedback loop.

14:53.480 --> 14:58.000
Even more, that's part of why continuous integration and continuous deployment is there, is it

14:58.000 --> 14:59.440
helps you give you that feedback loop.

14:59.440 --> 15:06.200
So have an environment where, you know, developers can really collaborate and provide that feedback

15:06.200 --> 15:12.640
and contribute to continuing to improve those standard practices and then continuously kind

15:12.640 --> 15:18.280
of communicate the benefits of those to outside your organization.

15:18.280 --> 15:22.440
Make sure everybody knows what you're working on and knows that the achievements that you've

15:22.440 --> 15:28.040
had really helps kind of drive more collaboration, drives more obviously awareness of what your

15:28.040 --> 15:33.720
organization is doing, but also brings a lot of praise to the teams internally.

15:33.720 --> 15:39.880
So by kind of putting these steps, these kind of best practices on the standardization side,

15:39.880 --> 15:45.400
organizations really can kind of implement more efficient, consistent workflows so that

15:45.400 --> 15:51.800
the developer experience on the continuous integration, I'm sorry, on the standardization

15:51.800 --> 15:56.240
side is really you start to see those, the results of that.

15:56.240 --> 16:01.160
So we're going to right now kind of look at kind of Argo and Flux, just some of the features

16:01.160 --> 16:08.120
that they have that help implement some of these better CI CD practices for standardization.

16:08.320 --> 16:16.640
So Argo is reusable workflows so orgs, they can really define reusable workflow templates

16:16.640 --> 16:23.680
that set up the standard sequences for CI CD like build, test, deploy so that devs can

16:23.680 --> 16:28.000
reuse those things across projects, not just within your, the project you're working now,

16:28.000 --> 16:31.880
but you can use reuse those templates elsewhere.

16:31.880 --> 16:34.200
Argo also follows GitOps principles.

16:34.200 --> 16:40.840
So your configs, workflows, they're managed as code in Git repos, ensuring everything's

16:40.840 --> 16:47.640
versioned, like I said, traceable, easy processes to kind of collab amongst dev teams is really

16:47.640 --> 16:50.560
kind of a core piece of that GitOps.

16:50.560 --> 16:56.640
And then the way that they manage artifacts, Argo supports managing and storing those artifacts

16:56.640 --> 17:02.520
like Docker images as part of the CI CD process so that you can make sure that the right artifacts

17:02.520 --> 17:08.160
are used in the right situation and deployed across the environments and they can be used

17:08.160 --> 17:11.680
as inputs in subsequent steps as part of your template.

17:11.680 --> 17:16.320
So those are some things that Argo has in place specifically.

17:16.320 --> 17:25.720
And then from Flux, we have the declarative config model that they can operate on where

17:25.720 --> 17:31.080
systems are, you know, their desired state of how they're going to exist as a system

17:31.120 --> 17:32.920
is defined in code.

17:32.920 --> 17:38.880
This is what orgs can kind of define and enforce already those standardized practices in a VCS

17:38.880 --> 17:45.360
system, ensuring that you can kind of track things consistently.

17:45.360 --> 17:51.400
On the continuous synchronization side, they allow you to kind of continuously synchronize

17:51.400 --> 17:56.920
the desired state in your Git repos with the actual state of, for instance, like your Kubernetes

17:56.920 --> 17:57.920
clusters.

17:57.920 --> 18:04.520
So that is that changes, everything can continuously be replicated so that you have a standard config

18:04.520 --> 18:09.280
and deployments and that are consistent across your environments.

18:09.280 --> 18:11.000
And then there's the policy side.

18:11.000 --> 18:14.360
So that's kind of where we have, does it say that flagger?

18:14.360 --> 18:15.360
Yeah.

18:15.360 --> 18:16.360
So that's kind of the feature flag.

18:16.360 --> 18:23.040
So Flux has feature flag capabilities through Flagger, which is a part of that, so that

18:23.120 --> 18:29.120
you can deploy and allow orgs to define the different rules for how things get deployed,

18:29.120 --> 18:32.800
either different sets of things or to different users.

18:32.800 --> 18:36.760
So you can really do a lot of that A-B testing if you think about progressive delivery.

18:36.760 --> 18:38.760
It's that kind of thing.

18:38.760 --> 18:39.760
Yeah.

18:39.760 --> 18:41.760
So who here uses Flux?

18:41.760 --> 18:42.760
Okay.

18:42.760 --> 18:44.760
What about Argo?

18:44.760 --> 18:45.760
Okay.

18:45.760 --> 18:48.760
So about, I think there was some overlap.

18:48.760 --> 18:50.920
Good.

18:50.920 --> 18:56.320
So when we want to achieve these kind of standardized workflows, kind of the summary here is like

18:56.320 --> 18:57.320
achieving that.

18:57.320 --> 19:03.720
You want to make sure your templates with Argo and Flux, they allow for the standardized

19:03.720 --> 19:10.400
templates and definitions so that everything is, all your orgs have an established baseline

19:10.400 --> 19:13.440
to work with for consistency.

19:13.440 --> 19:18.800
There's also integrations with VCS, CI-CD tooling so that you have your configs are maintained

19:18.800 --> 19:24.080
and accessible to all, which is really important, bringing visibility to what you're doing.

19:24.080 --> 19:31.800
And then on the documentation and training side, it's really essential to make sure that

19:31.800 --> 19:36.480
you've got the docs and training standardized and that you have documents, that you have

19:36.480 --> 19:39.280
the docs and trainings for the things that you've standardized.

19:39.280 --> 19:44.960
So make sure you've done both so that orgs can really be responsible for making sure

19:44.960 --> 19:52.680
that dev teams and even support teams understand how these standard processes are.

19:52.680 --> 19:59.520
Continuous improvement really kind of fosters the culture that's really necessary to achieve

19:59.520 --> 20:05.280
a good developer experience so that you have, everything's regularly reviewed, the workflows

20:05.280 --> 20:10.760
are updated, you're getting feedback, improvements are continuously happening.

20:11.200 --> 20:15.640
Making sure that, again, developer experience is high on that list.

20:15.640 --> 20:22.160
Alright, interoperability in CI-CD is, you know, system, it refers to the ability of

20:22.160 --> 20:29.480
different tools, technologies, components within kind of the CI-CD ecosystem are able

20:29.480 --> 20:31.720
to work effectively together.

20:31.720 --> 20:36.720
So that means, you know, the various parts like, you know, the pipeline, source code,

20:36.720 --> 20:41.760
repositories, build systems, testing frameworks, deployment platforms, monitoring tools, all

20:41.760 --> 20:50.840
those things are able to interact with each other in a way that ensures that you're able

20:50.840 --> 20:51.840
to see what's happening.

20:51.840 --> 20:59.400
So if the data is effectively kind of exchanged and that there's, you know, not really any

20:59.400 --> 21:03.240
compatibility issues or disruptions to kind of your workflows.

21:03.280 --> 21:07.200
So kind of the way that that looks like, we think about, so there's a collaboration

21:07.200 --> 21:13.800
side that gives flexibility and choice that you, when you are looking, trying to implement

21:13.800 --> 21:20.480
interoperability in your environment really enables dev teams to use the best tool for

21:20.480 --> 21:25.520
the job so that you don't have to work with the vendor lock-ins, give them that flexibility

21:25.520 --> 21:28.840
to use what works best.

21:28.840 --> 21:34.320
And then there is the various tool preferences that are there that Oregon company has.

21:34.320 --> 21:39.120
And so you want to make sure with the enhanced collaboration that all those different various

21:39.120 --> 21:42.280
tools are not a blocker to success.

21:42.280 --> 21:46.280
Excuse me, that also ensures, you know, smooth interaction.

21:46.280 --> 21:52.040
You know, also the collaboration comes is.

21:52.040 --> 22:03.040
And then, it's a really important, yeah, really important side of that to make sure

22:03.040 --> 22:09.080
that you're, you know, able to integrate the interoperability kind of really enforces that

22:09.080 --> 22:12.200
better use utilization of your resources.

22:12.200 --> 22:17.480
So your orgs can make efficient use of your existing infra, infrastructure and tools.

22:17.480 --> 22:20.120
So you should not always have to build something new.

22:20.120 --> 22:26.880
If you have systems that are interacting together, the system, the tools, you're not waste, you're

22:26.880 --> 22:27.880
not being wasteful.

22:27.880 --> 22:32.760
Yeah, reason the components and scripts, saving cost.

22:32.760 --> 22:35.240
The next side of that, scalability and growth.

22:35.240 --> 22:40.520
So as organizations are scaling, they're adopting new tech, which happens consistently.

22:40.520 --> 22:45.880
Interoperability really ensures that your CI CD systems can adapt and expand as necessary

22:46.440 --> 22:51.360
to kind of support incorporating the new tools and processes and ideas and workflows, all

22:51.360 --> 22:57.520
of that into your, the way you all work as a team.

22:57.520 --> 23:01.880
And then, yeah, cross platform deployments.

23:01.880 --> 23:07.000
So interoperability advantage there is that, you know, when you, in this existing kind

23:07.000 --> 23:11.840
of multi cloud hybrid kind of environments that are out there now, it really promotes

23:11.840 --> 23:15.240
kind of this unified approach that you don't, that doesn't have to be a blocker to having

23:15.240 --> 23:16.800
all these different systems.

23:16.800 --> 23:23.880
You have it all together, ensuring that the data gets transferred well.

23:23.880 --> 23:29.000
Also kind of promotes a unified deployment and infrastructure management.

23:29.000 --> 23:32.000
And then troubleshooting debugging.

23:32.000 --> 23:34.320
I knew there was another one there.

23:34.320 --> 23:39.880
So when issues kind of are arising, this interop enables, you know, this seamless data sharing

23:39.880 --> 23:43.200
between all the different tools and process.

23:43.320 --> 23:48.800
I've seen a growth, like, it's amazing, but it's been a very astronomical growth of the

23:48.800 --> 23:56.880
average number of like SaaS tools that are in place in a organization into the hundreds

23:56.880 --> 23:59.840
on average by companies.

23:59.840 --> 24:06.240
And so like being able to look at all the tools and be able to troubleshoot those and

24:06.240 --> 24:12.920
have everything working together is a huge kind of game changer for kind of looking at

24:12.960 --> 24:17.760
better issue ID, troubleshooting, resolution and such.

24:17.760 --> 24:23.280
All right, so in essence, you know, this, when CICD systems are interacting together,

24:23.280 --> 24:25.760
this interoperability acts as really that bridge.

24:25.760 --> 24:32.960
It's one of those chat-chitty created images that kind of works.

24:32.960 --> 24:39.080
But you know, connecting all the different parts of your dev and delivery processes together,

24:39.120 --> 24:44.160
fostering, you know, we talked about collaboration, ensuring teams can work cohesively, efficiently.

24:44.160 --> 24:50.840
All that stuff is tied into the importance of, you know, interop.

24:50.840 --> 25:01.640
So looking at like how Spinnaker and Backstage do this, the, on Spinnaker's side, the, there

25:01.640 --> 25:04.160
we go, integration with cloud providers.

25:04.240 --> 25:10.040
So Spinnaker allows you to pretty much integrate with anything you want so that you have this

25:10.040 --> 25:15.960
consistent interface itself for deploying, managing across platforms, ensuring seamless

25:15.960 --> 25:20.880
targeting of the different environments that are in place by devs, allowing them to like

25:20.880 --> 25:22.320
choose what works best.

25:22.320 --> 25:28.400
Don't tie them into one specific tool that is that whole, that little analogy of, you

25:28.400 --> 25:32.440
know, hammering a square peg into a round hole.

25:32.720 --> 25:36.600
And then integration with VCS systems.

25:36.600 --> 25:42.920
Spinnaker, you know, works across, you know, really can work with whatever so that you

25:42.920 --> 25:49.760
can kind of trigger your deployment pipelines directly from your repositories and automate

25:49.760 --> 25:54.400
that release process, reducing manual intervention.

25:54.400 --> 25:57.080
And then extensible integrations.

25:57.080 --> 26:02.280
So you know, having an extensible architecture supports a lot of different integrations, which

26:02.320 --> 26:06.880
allows teams to connect with, you know, again, various set of tools like the monitoring,

26:06.880 --> 26:12.080
incident management scripts, those things, and really ensures that Spinnaker really

26:12.080 --> 26:16.240
seamlessly fits into the org.

26:16.240 --> 26:28.240
And yeah, tool sets fit into your org's existing tool sets, requirements, workflows and such.

26:28.240 --> 26:30.800
And then artifact management.

26:30.800 --> 26:33.800
We talked about, you know, Argo has that.

26:33.800 --> 26:38.520
Spinnaker also kind of lets you kind of interact with those, integrate with different repos,

26:38.520 --> 26:39.520
artifact repos.

26:39.520 --> 26:44.160
So you got Docker Hub, there's Artifactory, I'm trying to think those are the two that

26:44.160 --> 26:46.800
come to mind.

26:46.800 --> 26:50.480
Assist really in managing those artifacts, ensuring that, you know, the right things

26:50.480 --> 26:54.440
are consistently used in your deployments.

26:54.440 --> 26:57.560
And then there is the pipeline abstraction.

26:57.560 --> 27:04.240
The, helps you kind of abstract the deployments, making the process more flexible and adaptable

27:04.240 --> 27:06.480
to what you're trying to do.

27:06.480 --> 27:10.600
Developers really can start to reuse those templates that you've created, making an

27:10.600 --> 27:15.720
adaptation easier as the projects evolve themselves, and those requirements.

27:15.720 --> 27:21.680
And so that bridge between, you know, the abstraction and flexibility ensures Spinnaker

27:21.680 --> 27:25.000
can kind of cater to different various deployment scenarios.

27:25.720 --> 27:26.960
So that's the Spinnaker side.

27:26.960 --> 27:30.720
We think about backstage.

27:30.720 --> 27:34.440
Backstage has, you know, it integrates with a lot of CI CD tools and other things.

27:34.440 --> 27:36.680
We're talking about CI CD here.

27:36.680 --> 27:40.760
And so it integrates with a lot of them, like Jenkins, sort of CI, GitHub actions, Flux,

27:40.760 --> 27:41.760
Argo.

27:41.760 --> 27:43.760
All of those things brings that visibility.

27:43.760 --> 27:49.160
And so having that interoperability with pretty much anything allows developers to visualize

27:49.160 --> 27:53.880
and manage what's going on in their pipelines directly from backstage and not having to

27:53.880 --> 27:55.040
go to multiple systems.

27:55.040 --> 27:56.040
You can do it all in one.

27:56.040 --> 28:02.920
So there's kind of that unified single pane of glass view of the entire kind of dev workflow.

28:02.920 --> 28:08.800
Service Categlog integration with backstage kind of acts as that service catalog, helping

28:08.800 --> 28:14.440
teams manage, discover the services and apps and such that they can use.

28:14.440 --> 28:18.880
And so that interoperability with all the different systems ensures that the information

28:18.880 --> 28:25.960
in your CI CD is integrated into that service catalog itself so that they know that easier

28:25.960 --> 28:29.800
for teams to understand service status, history.

28:29.800 --> 28:33.040
The history is really important to be able to go back and see what's happened over time

28:33.040 --> 28:34.360
and see some trends.

28:34.360 --> 28:37.280
Yeah, it has a really good plug-in ecosystem.

28:37.280 --> 28:41.880
So, you know, that extensible architecture across all the different custom plugins that

28:41.880 --> 28:44.720
you can create that maybe your community has done.

28:44.720 --> 28:50.560
All that stuff can help bring better visibility to things you do.

28:50.560 --> 28:56.240
And then customization theming that comes in place, allowing repos to kind of customize

28:56.240 --> 28:58.560
the UI and theme that's in place.

28:58.560 --> 29:01.400
That may seem like a small thing, but when you're trying to get your organization to

29:01.400 --> 29:07.760
buy off to use something like backstage or things like it, having that ability to customize

29:07.760 --> 29:12.680
the look and feel satisfies a lot of those branding requirements that companies have,

29:12.680 --> 29:14.440
marketing departments kind of do.

29:14.440 --> 29:18.360
So it's important to have that kind of flexibility ensures that your org is going to be able

29:18.360 --> 29:20.800
to be flexible and use what's there.

29:20.800 --> 29:29.280
All right, so Spinnaker and backstage, they both kind of prioritize flexibility, adaptability,

29:29.280 --> 29:34.200
allowing organizations really to integrate with the kind of the diverse tool sets that

29:34.200 --> 29:39.200
are out there and accommodate the various needs that developers have.

29:39.200 --> 29:42.680
Bridging those gaps between the different tech and systems, it acts as kind of that central

29:42.680 --> 29:48.960
hub that connects those parts, enhances the flexibility of your CI CD pipelines and developer

29:48.960 --> 29:54.800
workflows and is ultimately going to kind of promote more efficiencies and collaborative

29:54.800 --> 29:56.520
development environment.

29:56.520 --> 30:04.680
All right, so the organizations often use kind of this mix of tool sets.

30:04.680 --> 30:07.960
And there's some of these challenges that come in with when you're trying to implement

30:07.960 --> 30:08.960
this.

30:09.680 --> 30:11.480
Is that that mix?

30:11.480 --> 30:17.880
And each of them have their own ecosystem, APIs, such data format schema differences,

30:17.880 --> 30:19.800
tools are using a lot of different data form.

30:19.800 --> 30:22.280
They're not all unified themselves.

30:22.280 --> 30:26.400
That's kind of their niche is having something different than everybody else.

30:26.400 --> 30:28.480
So that presents a challenge.

30:28.480 --> 30:33.120
Authentication and authorization, like those themselves also present a lot of challenges

30:33.120 --> 30:40.840
of how do you not only manage the access to all these different tools, but how do they,

30:40.840 --> 30:43.280
you know, you have APIs, different APIs going back and forth.

30:43.280 --> 30:46.720
How do you kind of work with that?

30:46.720 --> 30:52.680
Versioning and compatibility, that also is something that like tools change.

30:52.680 --> 30:53.680
New versions come out.

30:53.680 --> 30:58.400
They can break the, you know, breaking changes that either could have been avoided or not.

30:58.400 --> 30:59.400
It doesn't matter.

30:59.400 --> 31:01.720
You're trying to use them and now you have something that doesn't work.

31:01.720 --> 31:06.960
So having, you know, that is a real challenge.

31:06.960 --> 31:08.560
And then lack of documentation.

31:08.560 --> 31:09.960
We've all seen it.

31:09.960 --> 31:16.880
API that's on version two and their docs are on version 1.1 and they haven't updated

31:16.880 --> 31:20.040
or they haven't changed one thing and it breaks that.

31:20.040 --> 31:24.160
That often is a challenge to try and work with all these different systems and in some

31:24.160 --> 31:29.560
cases building your own integrations between those systems can really kind of get hit with

31:29.560 --> 31:31.600
lack of documentation.

31:31.600 --> 31:34.520
But there are ways to overcome those with us.

31:34.520 --> 31:42.360
So using unified config formats and how you define your deployment pipelines that are

31:42.360 --> 31:48.240
documented and forced for all the tools, libraries that are associated can then automatically

31:48.240 --> 31:54.320
kind of convert between the formats, ensuring there's data consistency, compatibility.

31:54.320 --> 31:59.240
There's API gateways that really translate the data between the systems for consistency,

31:59.360 --> 32:04.120
simplifying, you know, off and authorization access across all the different tool sets.

32:04.120 --> 32:08.680
Helps you maintain version compatibility and it's important to kind of use a version

32:08.680 --> 32:13.720
compatibility matrix, matrices, so that you can see, you know, track it all down and see

32:13.720 --> 32:17.600
what works with each other to help you make better decisions.

32:17.600 --> 32:18.600
Make sure you've documented.

32:18.600 --> 32:19.600
Oh, time out.

32:19.600 --> 32:20.600
Okay.

32:20.600 --> 32:25.600
So that's good there on that piece.

32:25.600 --> 32:30.320
The last little bit just we think about developer experience really important to remove all

32:30.320 --> 32:31.320
the barriers.

32:31.320 --> 32:33.320
So that, thank you.

