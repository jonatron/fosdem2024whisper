WEBVTT

00:00.000 --> 00:12.680
Alright folks, we're just ready to start our last talk, which will be time stamping with

00:12.680 --> 00:16.520
open timestamps by Timothy Riddia-Eli.

00:16.520 --> 00:21.280
Okay, thank you.

00:21.280 --> 00:34.120
So I'm a Red Hat employee that works as software engineer but not for this stuff.

00:34.120 --> 00:39.280
So what is time stamping?

00:39.280 --> 00:41.320
What is time stamping?

00:41.320 --> 00:56.080
Time stamping is needed to be sure a document or a file is made in a specific date.

00:56.080 --> 01:06.560
And for example, in Italy, because I'm Italian, the law requires that the data are ushered

01:06.560 --> 01:12.640
by a public officer, so you can't do that by yourself.

01:12.640 --> 01:17.880
So what about digital documents?

01:17.880 --> 01:25.800
Well usually digital time stamping is made on a third-party data center, so you must

01:25.800 --> 01:41.560
trust some other authority, and it's usually a certification authority.

01:41.560 --> 01:50.920
So how we can do that without reeling on a third-party authority?

01:50.920 --> 02:03.120
So we could use the blockchain, so you create the hash of a file or information, and you

02:03.120 --> 02:15.040
put this hash inside the blockchain, so you can demonstrate this hash was present on a

02:15.040 --> 02:19.880
specific time.

02:19.880 --> 02:23.480
So why the blockchain?

02:23.480 --> 02:33.880
It's safe because it's backed by millions and millions of dollars.

02:33.880 --> 02:42.000
It's open in the case of Bitcoin we use.

02:42.000 --> 02:52.880
It's not cheap to create a new Bitcoin because mining is an expensive process, but it's quite

02:52.880 --> 02:57.880
cheap to use that.

02:57.880 --> 03:04.360
So why open time stamping?

03:04.360 --> 03:18.440
So the blockchain is open, anybody can write on it, anybody could do the same thing directly

03:18.440 --> 03:23.800
without using the open time stamp or another framework.

03:23.800 --> 03:33.080
So open time is a standard way of doing the same thing in a trustless way, so without trust

03:33.080 --> 03:36.160
no one.

03:36.160 --> 03:43.160
It was proposed by Peter Todd, a Bitcoin Core developer.

03:43.160 --> 03:55.920
It's used by dozens of different companies, and it's almost because in information technology

03:55.920 --> 04:06.960
we can't have infinite storage, so it's almost infinitely scalable because it uses a Merkle

04:06.960 --> 04:10.040
tree.

04:10.040 --> 04:15.360
So what is a Merkle tree?

04:15.360 --> 04:27.920
Merkle tree is a tree where you just put the top hash or the root of Merkle tree inside

04:27.920 --> 04:39.400
the blockchain, but you can demonstrate that your file or your information existed without

04:39.400 --> 04:52.040
the need to push any hash inside the blockchain, but only the top hash or the root.

04:52.040 --> 05:05.600
So open time stamp provides users multiple and easy way to create an independent verify

05:05.600 --> 05:11.040
time stamps.

05:11.040 --> 05:20.000
Open time stamp project on GitHub includes these different implementation.

05:20.000 --> 05:23.640
The first one was written in Python.

05:23.640 --> 05:32.480
Then somebody has wrote one in Java, then in JavaScript because it's easier to use in

05:32.480 --> 05:37.440
browser or in some Node.js stuff.

05:37.440 --> 05:50.400
They also started to write a Rust open time stamp because Rust, as you told in a precedent

05:50.400 --> 06:02.520
talk, it's good languages because it's safe because it's fast, low memory usage, etc.

06:02.520 --> 06:18.400
Or on the open time stamp.org website that uses the JavaScript implementation.

06:18.400 --> 06:28.920
So now for this slide, I show an example of usage with the Python client because it was

06:28.920 --> 06:35.680
the first one.

06:35.680 --> 06:52.320
So if you want to use that, you just need to use OTS stamp command and stamp command

06:52.320 --> 07:05.320
create the Merkle tree of the file, submit it to some remote server that are the server

07:05.960 --> 07:18.840
that write the information on the Bitcoin blockchain every summer.

07:18.840 --> 07:28.800
So when you do stamp, the operation creates the hash of the original file concatenates

07:28.800 --> 07:45.080
with random nonce for privacy just to avoid having your hash on the Merkle tree directly

07:45.080 --> 07:48.640
and recalculate the hash.

07:48.640 --> 07:59.560
So you have double SHA hash and it sent the value to the calendar server.

07:59.560 --> 08:08.840
So the calendar server add the hash to the Merkle tree and return the response to the

08:08.840 --> 08:18.720
client in order to generate the OTS file that is a file you will need to verify the signature

08:18.720 --> 08:20.760
later.

08:20.760 --> 08:28.080
Of course this file is incomplete because it doesn't contain the record in the blockchain

08:28.080 --> 08:38.960
because you need to wait the calendar server to send the record to the blockchain and the

08:38.960 --> 08:49.160
Bitcoin networking to mine the block with the Merkle, etc.

08:49.160 --> 09:03.640
So when a time is elapsed, some hour the user rerun the OTS tool with upgrade operation

09:03.640 --> 09:23.560
and this update the file with which block of the Bitcoin blockchain includes the hash.

09:23.560 --> 09:29.360
It's also possible to create a timestamp for several different files simultaneously.

09:29.360 --> 09:47.200
In fact we did a test when we got all the ashes of all the files included in archive.org

09:47.200 --> 09:57.920
not the web.archive.org, the archive.org that includes the petabytes of files.

09:57.920 --> 10:08.520
Of course we didn't download all the files but archive.org API supports to you can ask

10:08.520 --> 10:13.200
the hash directly.

10:13.200 --> 10:26.800
So we took all the ashes from archive.org and we were able to put all these million files

10:26.800 --> 10:32.480
inside only one Merkle route.

10:32.480 --> 10:46.760
So it's absolutely scalable because you can put tons of files only with one Bitcoin

10:46.760 --> 10:55.720
transactions that you don't need to do yourself but is the calendar server that you have.

10:55.720 --> 11:05.840
So it's absolutely free.

11:05.840 --> 11:24.240
So the verification requires both the file and the original file or the original hash.

11:24.240 --> 11:35.400
And if you want to do that by yourself so without trusting nobody that's what you want.

11:35.400 --> 11:39.360
You need an up-to-date Bitcoin node.

11:39.360 --> 11:48.920
You don't need a full node but since the attestation is on the block either.

11:48.920 --> 12:01.080
But so you just need a prune node that only so you need only a few gigabytes of data instead

12:01.080 --> 12:10.280
of almost one terabyte of a full node.

12:10.280 --> 12:25.240
So if you do that you are sure nobody can fake your check because OTS asks directly the

12:25.240 --> 12:34.920
blockchain and so you don't need to trust anybody including the calendar servers that

12:34.920 --> 12:42.920
put your verification on the blockchain.

12:42.920 --> 12:51.240
So the OTS file includes three main sessions.

12:51.240 --> 13:05.880
The hash with the nodes, the Merkle tree construction because you need to know which other hash you

13:05.880 --> 13:18.520
have in the Merkle tree in order to be sure your file is in the tree by your root and

13:18.520 --> 13:26.960
which Bitcoin block includes your hash.

13:26.960 --> 13:39.160
So the timestamp is saved on a binary file to save space and to avoid problem of interpretation

13:39.160 --> 13:47.400
especially on Windows.

13:47.400 --> 13:59.120
The file is as OTS extension and it starts with this line.

13:59.120 --> 14:16.960
So if you use the OTS information command with the file it prints lots of information

14:17.520 --> 14:27.120
so I can't show them because it shows all the single Merkle ashes.

14:27.120 --> 14:41.800
But you can try that at home and you can see which Merkle tree is how the Merkle tree is

14:41.800 --> 14:44.800
created.

14:44.800 --> 14:49.960
So this is some example of open timestamp usage.

14:49.960 --> 15:03.600
The website I presented at the start, Proofmod.org that is an Android app by Guardian project

15:03.600 --> 15:13.760
that it uses to certify a photo is valid with GPS data etc.

15:13.760 --> 15:29.120
And ASA check is an example of how you can use timestamp newspaper article and to stamp

15:29.120 --> 15:36.480
it's a website that you can put the stamp on a Twitter.

15:36.480 --> 15:36.960
The end.

