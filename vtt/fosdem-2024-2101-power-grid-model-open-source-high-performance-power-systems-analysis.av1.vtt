WEBVTT

00:00.000 --> 00:15.240
Hello everyone. My name is Natesh. I work as a scientific software engineer at Al Yander.

00:15.240 --> 00:21.240
I'm also a developer at the Power Grid model project on which I'm going to give a talk

00:21.240 --> 00:31.560
now. So it is a high performance distribution grid power system analysis library. Yeah.

00:31.560 --> 01:00.000
And the next slide. Oh. Oh. Yes. So in this presentation I'm going to mention why do we

01:00.000 --> 01:07.680
need this project? How did we come across building this? So what does the library do? And how does

01:07.680 --> 01:13.840
it perform compared to other solutions that are already available in the space? And how do we use

01:13.840 --> 01:22.800
this within Al Yander which is Dutch DSO for its own products and applications? There's also some

01:22.800 --> 01:27.720
talk about open source since we are open source and we would like new contributors as well.

01:27.720 --> 01:39.280
In a traditional way up until a few years ago at least the power system analysis used to happen

01:39.280 --> 01:46.960
within the DSOs, DSOs in this way. The electrical engineers would usually have some data files

01:46.960 --> 01:57.640
where they run the calculation in a GUI focused software where we have built-in presets for

01:57.680 --> 02:03.800
running the calculation and we get only certain results and then we make decisions on whether to

02:03.800 --> 02:10.960
add a new transformer, add a new cable and such components within the grid or not. If the grid can

02:10.960 --> 02:21.000
handle more solar panels, if the grid can handle more EVs or not was done using this way. But now

02:21.040 --> 02:29.840
with the new smart meters and EVs and renewable energy we have to do a lot more and for that we

02:29.840 --> 02:36.480
have to have all of the data of the smart meters which is in a really huge volume in a database

02:36.480 --> 02:44.960
where also lies our topology and electrical parameters and then we cannot just use a custom,

02:45.560 --> 02:53.280
we cannot just use a preset of the calculation method. So we have to have some customization

02:53.280 --> 03:00.600
available over there and then we have to do the calculations in the cloud because these calculations

03:00.600 --> 03:09.320
are in the set of millions now because we are trying to simulate the entire year for example of

03:10.120 --> 03:19.280
time series and the volume increases a lot. So why did we decide to make this and what

03:19.280 --> 03:29.640
makes a good power system analysis library? So around I think 2018 also Alianthar faced a

03:29.640 --> 03:38.240
problem where we were not able to do this using any of the open source software or the commercial

03:38.280 --> 03:46.800
software. We faced these pain points actually and then we decided to make the library which are

03:46.800 --> 03:55.720
focused on around them. So we needed a well-defined software API. That's because we want this

03:55.720 --> 04:04.000
calculation library to be part of a really bigger application which does a lot of things apart from

04:04.040 --> 04:13.120
just calculations and we also wanted this library to be cross-platform and scalable so that we can

04:13.120 --> 04:19.480
use it within the cloud. And of course since the volume is in millions, high performance and

04:19.480 --> 04:25.520
parallelization was needed otherwise you might have to wait for a month or so to get results

04:25.560 --> 04:29.120
which is not adequate and if it's in cloud it costs you money as well.

04:29.120 --> 04:41.640
That was in 2018 by the way and after that at that point our power grid model was in our

04:41.640 --> 04:51.960
source within Alianthar. We had some applications in 2021 then we made it open source at around

04:52.560 --> 05:00.840
22 and we do have a lot of applications now which I'll cover soon enough. What the library does? So it

05:00.840 --> 05:08.280
does some calculations especially the power flow calculations, state estimation and short circuit

05:08.280 --> 05:17.080
calculations for both single phase and three phase grids. We have many algorithms with which we can

05:17.120 --> 05:25.880
do this and these sum up the calculation functionalities in a really short way.

05:25.880 --> 05:36.360
We have a huge focus on the software side of the library because of the pain points that we

05:36.360 --> 05:45.920
did mention before. So we have a native shared memory multi-threading and that enables us to do

05:45.920 --> 05:52.600
the parallelization for batches and in as many cores as possible when we do deploy it in the

05:52.600 --> 06:02.400
cloud and yes the implementation is in C++ and the API for the users is in Python if they wish to

06:02.400 --> 06:10.520
use it and it's well documented, it's quite stable and then we have the binaries available in

06:11.120 --> 06:22.240
PyPy and Anaconda for the Kondaforge and we have support for Windows, Linux and Mac OS all three of them.

06:22.240 --> 06:34.680
And since making this library is not just enough we have to show that these calculations are actually

06:34.680 --> 06:42.640
correct as well and for that we have done the validation of the library against some

06:42.640 --> 06:49.360
theoretical hand calculations at the start. Then Vision and Chaya which are commercial

06:49.360 --> 06:54.920
software and also PowerFactory, we validated the library against them and PandaPower which

06:54.920 --> 07:04.040
is another open source library. So we validated against these software and then we use them as

07:04.080 --> 07:11.800
a reference for each new revision of Power Grid model. So it's part of our CI pipeline if any of

07:11.800 --> 07:18.320
the new features do not comply with it, it won't, yeah that should not be worse than.

07:18.320 --> 07:28.880
How does it perform compared to other libraries because yeah there are a lot of libraries within

07:28.920 --> 07:34.920
this domain. We have some more presentations now as well about them and each one has its own

07:34.920 --> 07:43.800
specific plus point and the plus point of Power Grid model is its performance. For the

07:43.800 --> 07:52.320
performance benchmark the link is in the presentation if you wish to do the benchmark yourself. We try

07:52.360 --> 08:01.200
to compare it with PandaPower and OpenDSS to get an idea of how it performs and we found that

08:01.200 --> 08:11.240
the performance in case of PandaPower is almost 20 times of their calculation which was a huge

08:11.240 --> 08:17.600
boost and will really help in doing these calculations much faster. So these were the

08:17.680 --> 08:25.280
symmetrical calculations and the asymmetrical calculations is where Power Grid model shines as

08:25.280 --> 08:33.320
well because we as a distribution, I mean when it started as a distribution analysis library

08:33.320 --> 08:41.000
within Alieander this was really needed at that point. So the Newton-Raphson for PandaPower is

08:41.200 --> 08:47.600
around 100 times and with OpenDSS we have to compare it with iterative current that was four

08:47.600 --> 08:59.360
times faster than that library. We have data conversions as well because we don't have the

08:59.360 --> 09:06.960
best data model to store it and hence we have we have conversions to SIM and other

09:07.840 --> 09:13.680
softwares that are used for power system analysis. SIM because we can then integrate with other

09:13.680 --> 09:27.800
applications throughout this ecosystem. And we currently use it within 10 plus applications

09:27.800 --> 09:35.880
within Alieander so it's a mature project at a production grid and yeah there are many applications

09:36.800 --> 09:45.040
grid planning, automatic network design, automatic network design, monitoring asset

09:45.040 --> 09:53.720
allocation and congestion management. Since I do have some time within automatic network design

09:53.720 --> 10:05.040
for example we try to forecast what the effect of the grid based on the EV growth will happen in

10:05.040 --> 10:12.600
the coming 30-40 years, EV growth and the solar panels and based on that we simulate this and then

10:12.600 --> 10:19.640
we identify the bottleneck, add the cable, run the simulation again and in this automatic way

10:19.640 --> 10:26.720
we design the whole network. That's what this application does. There are actually multiple

10:26.720 --> 10:33.120
congestion management applications as well. So one is the active one with which we do real-time

10:33.200 --> 10:39.360
congestion management. We take in the measurements from the previous 48 hours and predict if there's

10:39.360 --> 10:46.360
going to be a congestion in the coming 48 hours based on any plan maintenance if there is any and

10:46.360 --> 10:55.360
the other type of congestion management that we also do not present here. It's on the assessing

10:55.360 --> 11:01.240
the measurements of the entire year of this past year and then what would be the congestion in the

11:01.320 --> 11:10.360
coming year and based on that we might offer new contracts to our customers because the grid in

11:10.360 --> 11:16.040
Netherlands is highly congested right now. We have a lot of people waiting for new connections but

11:16.040 --> 11:22.680
we can't add them and hence power grid model really helps in making all of these calculations.

11:23.520 --> 11:34.040
For the open source you can just use the library and provide feedback. That's a great contribution

11:34.040 --> 11:42.960
in itself. Report any bugs as well. That's really helpful too and you can also do the validation

11:42.960 --> 11:51.040
for the library with any test cases of the 80 cases that I mentioned. You can provide more and

11:51.120 --> 11:59.080
validate the library. You can improve if you have an idea for a new way to make the API. You can

11:59.080 --> 12:08.520
suggest that too or you can also add new algorithms and make the code more efficient in the C++

12:08.520 --> 12:16.800
code. That's also possible. We have a list of good first issues within the repository too if you

12:16.840 --> 12:27.920
wish to have a look. We have a few partners. There are DSOs, TSO research institutions,

12:27.920 --> 12:42.080
universities and other open source projects as well. The DSOs do use them. Aliantha does

12:43.040 --> 12:51.480
have those products as well as an access and study and are also trying to add to their operations.

12:51.480 --> 12:57.160
That's all from me. Do we have any questions?

13:13.080 --> 13:19.280
Hello. Thank you so much. This looks really, really, really cool. I have one question. If I am

13:19.280 --> 13:26.040
running a project, hello Chris Adams, Green Web Foundation. If I have a new project on to build

13:26.040 --> 13:33.240
a big solar farm or put a 100 megawatt data center somewhere, can I use this to model how I might

13:33.240 --> 13:39.200
integrate with your grid to say this is why you should let me build here or possibly this is what

13:39.280 --> 13:41.320
it's going to be the implication if we keep growing at this space.

13:41.320 --> 13:53.600
Yes, definitely. We do some calculations on our side. We would be able to, I mean,

13:53.600 --> 13:59.280
like Aliantha does it on its side if it can integrate the customer. On the side of the

13:59.280 --> 14:06.240
producer, the producer does it so it can identify if it's profitable to make this investment or not.

14:06.760 --> 14:15.520
What would be the ROI in the coming years based on what the grid looks like? That's definitely what

14:16.160 --> 14:19.040
the producers still do and they do use the model over there.

14:26.160 --> 14:32.880
Hi, Peter Dutfield from Open Climate Fix. Thank you for the talk. How did you say some other TSOs have

14:32.960 --> 14:39.920
used this? Have you had any feedback from them and how they found it?

14:39.920 --> 14:49.520
Well, I said that they are active partners so they did not actually use it. They are TANET and

14:49.520 --> 15:00.240
RTE as well. I'm trying to look if they could use this model. But some of the core features of TSOs,

15:01.200 --> 15:10.000
we do need to add them as well. That's one of the requirements from the TSO side.

15:14.000 --> 15:19.360
Once that happens, TSOs would use it as well. But the focus is primarily on the distribution

15:19.920 --> 15:21.200
system analysis side.

15:21.440 --> 15:36.400
In Germany, we have this TSO tells you please reduce your consumption. Can I use your project

15:37.280 --> 15:45.840
for this calculation? Is it fine enough or is your project just a scope of the complete DSO

15:46.800 --> 15:52.960
or a larger part of the grid? Can I use it for a single grid collection point or just for larger

15:52.960 --> 16:01.840
parts? Let me think if I got the question correctly. If you do have a single connection point and you

16:01.840 --> 16:10.080
wish to use the library, then the motivation would not be so that what would be the transition

16:10.080 --> 16:15.040
somewhere. But if it would be a profitable thing for you, right? Did I get it right?

16:15.680 --> 16:22.480
No, the DSO uses your library to calculate that tomorrow there's not enough energy.

16:22.480 --> 16:27.360
So he wants to tell some customers please we to use your consumption tomorrow.

16:28.800 --> 16:34.720
Is the library able to calculate this for single connection and grid connection points?

16:34.800 --> 16:38.240
So that I can really can say you and you and you have to reduce tomorrow?

16:38.880 --> 16:42.320
Or does it just calculate a very

16:47.520 --> 16:54.480
yes, is it just for a large part or also for a very narrow part of the grid?

16:55.200 --> 17:00.960
Now I understood. Nice point. The library does not do that. It just calculates the

17:01.920 --> 17:07.200
yeah, the power flow results, the voltages, the powers. One of the applications that I did mention

17:07.200 --> 17:18.000
about the active congestion management, we tell the customers to reduce their generations. We

17:18.000 --> 17:22.000
have certain contracts within Alieander to do that, but it's not part of the power grid model.

17:30.960 --> 17:35.300
Yes.

