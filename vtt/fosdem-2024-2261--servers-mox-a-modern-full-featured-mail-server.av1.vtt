WEBVTT

00:00.000 --> 00:10.360
So good afternoon. My name is Michiel Lekin. I'm a freelance software developer from the

00:10.360 --> 00:17.120
Netherlands. Last year here at FOSDEM, I first announced Mox, a modern, secure, all-in-one

00:17.120 --> 00:23.120
e-mail server. As you may know, running your own mail server has a bit of a reputation

00:23.120 --> 00:30.120
for being hard to do, but what have I told you? Running a modern mail server can be easy.

00:34.480 --> 00:41.480
Alright. So, thank you. So the goal of Mox is to make it really easy to run your own mail

00:42.520 --> 00:46.520
server so that you actually do it, and then you can stay in control of your data, and

00:46.520 --> 00:51.760
you can help keep e-mail decentralized. Now, Mox is a new implementation, entirely new,

00:51.760 --> 00:56.320
and written in Go. Now, that's a lot of work, and you might ask, why would you do that?

00:56.320 --> 00:59.720
Because we have so many open source components that you can just use, and that's true. And

00:59.720 --> 01:04.320
for the past decade, I've used many of those components to good use. But a few years ago,

01:04.320 --> 01:08.760
I had to reinstall my machine, so I got a completely new one, and I just felt a bit reluctant

01:08.760 --> 01:12.840
to install that same software again that I've been using for the past decade. And for two

01:12.840 --> 01:18.760
reasons, at least. One is to see. The language with small mistakes have big consequences.

01:19.760 --> 01:24.880
Don't get me wrong, I like C as well, maybe in the past. And the software written in C

01:24.880 --> 01:29.880
is very high quality, but I wanted a new machine that lasted for another decade, and I see

01:29.880 --> 01:34.680
that C is not really going to be part of that too much at some point. But the bigger problem

01:34.680 --> 01:40.040
is basically the complexity. Over time, as e-mail has grown, new protocols added, new

01:40.040 --> 01:45.360
extensions, new software components have been added as well. So, to make our fully modern

01:45.480 --> 01:49.400
e-mail system, you need many components and make them all work together. I think many

01:49.400 --> 01:54.000
self-hostings, at least, they stop halfway, so they have a semi-modern e-mail system set

01:54.000 --> 02:00.000
up. You can make it easier to get all this configured and set up with a distribution

02:00.000 --> 02:03.640
or a Docker image or something, but you still have all these components working together.

02:03.640 --> 02:07.840
There's many integration points, a bit of friction, some data loss. Sometimes there's

02:07.840 --> 02:12.040
security issues when, you know, message headers are seen as authoritative but added by some

02:12.080 --> 02:18.160
component. So, I think what happened is with all this complexity, some people, you know,

02:18.160 --> 02:21.400
just stopped running their own mail servers anymore because it just too much work, and

02:21.400 --> 02:26.280
they migrated to the cloud, centralizing e-mail, that's not a great development. So, what we

02:26.280 --> 02:32.160
need is an easy to use mail server. So, you need to write a set of features. So, Mox

02:32.160 --> 02:38.080
tries to deliver many features. I'm at four for reading your e-mail, S&TP for sending

02:38.120 --> 02:43.440
receiving e-mail, SPF, DKIM, DMARC for message authentication, because just S&TP is not enough,

02:43.440 --> 02:46.880
but that's also not enough. You need TLS, of course, for encrypting your communications,

02:46.880 --> 02:53.880
but S&TP for sending receiving e-mail is unverified TLS. So, you want MTA, STS, and ordain to,

02:55.440 --> 03:01.240
you know, check that you're talking to the right person, right machine. So, Mox implements

03:01.240 --> 03:05.600
both for incoming and outgoing e-mail. Then there's ECME for, you know, your management

03:05.640 --> 03:11.560
of TLS certificates. You want to make it easy, don't do any manual TLS tumbling. Junk filtering

03:11.560 --> 03:18.240
is part of Mox. So, based on historic messages and their non-junk classifications, Mox will

03:18.240 --> 03:22.680
reject, accept, incoming mail, more about that in a moment. Then internationalization, so

03:22.680 --> 03:26.920
you can have Unicode in your e-mail addresses and your headers, both in your domains with

03:26.920 --> 03:31.640
IDN and your local parts. Autoconfiguration is in their various flavors, all supported

03:31.680 --> 03:36.200
by Mox to make it easy for mail clients to find and write service settings for new accounts.

03:36.200 --> 03:41.560
Then we've got a webmail included in Mox. We'll have a quick look at that in a moment as well.

03:41.560 --> 03:47.200
An admin web interface, so all configuration is in files. We want the full power. You can

03:47.200 --> 03:51.840
use the admin interface to quickly navigate and make some changes like add, remove, an

03:51.840 --> 03:57.080
e-mail address, an account, or a domain. A web service included, it may sound a bit

03:57.120 --> 04:03.480
crazy over the top, but modern e-mail basically requires HTTP stack with MTA, STS, Autoconfig,

04:03.480 --> 04:08.720
Jmap soon. Now it's already part of the deal. What I've noticed is people trying to run

04:08.720 --> 04:12.760
Mox and a web server on the same machine. That's really annoying because configuration

04:12.760 --> 04:17.840
gets complicated. Instead, I just added some web server to Mox for some static file serving

04:17.840 --> 04:23.000
and reverse proxying. That problem is also solved. Permit these metrics, structured logging,

04:23.720 --> 04:28.280
operations become a bit easier. Then the Mox Quickstart. That makes all this stuff easy

04:28.280 --> 04:34.120
to do. Installing Mox, you take a new machine, you've got a domain, you run the Quickstart

04:34.120 --> 04:38.200
and you pass it an e-mail address at your new domain. Mox will generate, so the Quickstart

04:38.200 --> 04:42.280
will generate configuration file, decon keys, etc. Create a new account. We'll print all

04:42.280 --> 04:47.120
the DNS records that you'll copy, paste into your zone file, or you have to manually edit

04:47.160 --> 04:56.160
them in your web interface of the DNS operator. That's not so great. Then Mox also, the Quickstart,

04:56.320 --> 05:00.880
also Linux, generates a system-d unit service file, so you just enable that and start it.

05:00.880 --> 05:05.560
Then you've got a fully working modern e-mail system. All of this is MIT licensed, so you

05:05.560 --> 05:11.000
can do whatever you want basically. Then as developers, a little bit about code. As I

05:11.000 --> 05:16.000
said, it's a new codebase. It's a modern codebase coherent. All of this is in the same style.

05:16.800 --> 05:20.440
It's very self-contained, so few dependencies. That makes it possible to have it in the same

05:20.440 --> 05:27.440
style. It's about 73,000 lines of go and 21,000 lines of tests, mostly unit tests and a bit

05:28.640 --> 05:32.400
of integration tests and some fuzzing tests. There's 11,000 lines of type scripts, very

05:32.400 --> 05:38.400
strict type scripts for webmail and interfaces. The code is cross-referenced with RFCs to make

05:38.400 --> 05:43.480
it very, not easy, but to make it something more maintainable. You can look back and see

05:43.560 --> 05:49.320
why you did certain things. Of course, Mox is written in Go, so it brings a whole bunch

05:49.320 --> 05:54.520
of advantages like memory safety, standalone binaries, completely subtly linked, also includes

05:54.520 --> 05:58.840
a few assets, so it's really just one file that you need. Fast compilation time, great

05:58.840 --> 06:05.440
for developers. Dependency management is pretty much solved in Go. You get reproducible builds

06:05.440 --> 06:11.000
out of the box, and it also works with cross-compilation, which is trivial to use in Go.

06:11.720 --> 06:18.720
Now, there's not much to see about a server, but we have a webmail that I can show you.

06:18.960 --> 06:24.120
It's not pretty, but it looks mostly like a standard email client, I think. Mailboxes,

06:24.120 --> 06:31.120
message list, message view. Let's open up mailing list. There's some threading in there.

06:32.240 --> 06:35.800
You can select multiple. I'm using keyboard shortcuts as well. Mark some unread messages

06:35.880 --> 06:42.480
and mark them read. Then there's HTML support with or without external resources and tracking

06:42.480 --> 06:49.480
pixels. Then there's a little example of Unicode addresses. The search is easy to use. We've

06:50.280 --> 06:57.280
got some quick filters on that side. We could send a message, but I'm sending a message

06:57.720 --> 07:04.560
from another mail client that should be arriving. There it is. Select some text to quote as civilized

07:04.600 --> 07:10.840
people and send a response. That's a webmail. It's not pretty, but it mostly works for my

07:10.840 --> 07:17.840
needs of email, sending and reading. Then I would like to say many things about lots

07:22.920 --> 07:28.760
of features, but I just limit to one thing, spam filtering in Mox. Analysis for incoming

07:28.760 --> 07:33.160
messages is based on historic messages in an account, based on their junk and non-junk

07:33.200 --> 07:39.600
flags. It's always per account. Whatever one account does is not related to what happens

07:39.600 --> 07:45.000
for the incoming message for your own account. Of course, this means in order for this to

07:45.000 --> 07:50.800
work, you need to have the proper flags on all the messages or as many messages as possible.

07:50.800 --> 07:55.360
Email clients don't always help with this, but Mox does help with that because in the

07:55.360 --> 08:02.360
default setup, you get an account where incoming messages or messages moved to the junk mailbox

08:03.000 --> 08:08.160
gets the message flag. If you move something to a archive mailbox, it automatically gets

08:08.160 --> 08:12.320
the non-junk flag. Also, if you move it to the trash mailbox. Also, if you're in the

08:12.320 --> 08:16.480
webmail and you have a message open for five seconds, that's long enough for it not to

08:16.480 --> 08:21.720
be junk, probably, so it also gets the non-junk flag. That means most of the messages in the

08:21.720 --> 08:27.800
store will have these flags set properly. There's a difference in how Mox handles known

08:27.840 --> 08:32.560
senders versus first-time senders. For the known senders, they're recognized from sender

08:32.560 --> 08:38.400
address or just the domain of the sender address. Maybe it's another person at the same company.

08:38.400 --> 08:42.480
Or we look at SPF or Decombe signals in a mail message or we look at the IP address of

08:42.480 --> 08:48.920
the remote server or various subnets of the IP address. If there are recent historic messages

08:48.920 --> 08:54.920
from that same sender, we look at the junk and non-junk classifications of those messages.

08:54.920 --> 08:59.960
If the recent ones were junk, we reject the message and otherwise we accept the message.

08:59.960 --> 09:03.840
But if it's a first-time sender, we don't know enough about that sender. We do, of course,

09:03.840 --> 09:08.600
something else. So, the BEG analysis is also part of Mox. It's essentially a reputation

09:08.600 --> 09:12.360
of words. So, you look at the words in the message, then you look at historic messages

09:12.360 --> 09:17.240
and their words and their junk and non-junk classifications. If there are too many spammy

09:17.240 --> 09:22.720
words in the message, you reject. If there are enough hammy words in a mail message, you

09:22.760 --> 09:29.480
accept. Then you can also configure a DNS blog list in Mox, but it's off by default for

09:29.480 --> 09:34.400
a few reasons. One, often these DNS blog lists are centralized services. We don't want to

09:34.400 --> 09:39.880
rely so much on them. And you would be sending the remote IPs of those you communicate with

09:39.880 --> 09:45.640
to some central party, which is also not great. Then we don't want to break existing email

09:45.640 --> 09:50.000
flows. So, this is also one of the reasons why it's only on first-time senders. So, if

09:50.040 --> 09:54.040
you've been communicating with someone for a long time and suddenly someone puts their

09:54.040 --> 09:59.840
mail server on a blog list, you can keep communicating with them at one break, only if that person

09:59.840 --> 10:04.480
really started spamming you all of a sudden, then you mark a few messages as junk and then

10:04.480 --> 10:11.480
in the future, the mail filter will just adjust. Now, in Mox, being all in one mail server

10:12.800 --> 10:17.720
really helps with this because during the S&TP transaction, all this historic data, these

10:17.760 --> 10:24.120
messages and flags and words are available for analysis. Then a special handling for messages

10:24.120 --> 10:31.120
from mailing lists and forwards because essentially most of the analysis disabled and DMARC policies

10:33.640 --> 10:40.640
are not enforced. Now, what do you do with an incoming junk message once it's classified?

10:41.080 --> 10:47.160
Well, one does not simply deliver to the spam mailbox. That's not friendly for users and

10:47.200 --> 10:52.960
not for senders or recipients and senders, I think, because the sender thinks that the

10:52.960 --> 10:56.920
message has been seen and doesn't get a reply. The recipient may be receiving some message

10:56.920 --> 11:02.760
and doesn't get it, so they wait or they constantly check both the inbox and the spam box. I

11:02.760 --> 11:09.040
think it erodes trust in email. So, I understand that it's done to not give spammer's feedback

11:09.040 --> 11:15.880
about their spam runs, but users should come first. So, instead what Mox does, Mox rejects

11:15.920 --> 11:20.880
the message at the S&TP level while it's coming in with a temporary error code and a very

11:20.880 --> 11:25.000
generic message. So, the generic message means that the spammer doesn't know for sure why

11:25.000 --> 11:29.520
it's being rejected and a temporary error code means or causes the sending server to

11:29.520 --> 11:34.120
try again a few times and at some point tell the original sender, you know, this message

11:34.120 --> 11:38.160
cannot be delivered and then they know they can find another way to communicate. So, you

11:38.160 --> 11:44.720
don't have this problem anymore of lost messages in the spam box. But just like with the spam

11:44.760 --> 11:51.240
mailbox, Mox has kind of the same thing but different. It's the rejects mailbox. So,

11:51.240 --> 11:56.040
anything that's rejected is still stored in this special mailbox. It's a fixed size mailbox.

11:56.040 --> 12:01.000
Old messages automatically removed and so you're waiting for some kind of transactional email.

12:01.000 --> 12:05.200
Maybe you did a sign up to a website. It's not coming in. Then you can check the rejects

12:05.200 --> 12:11.800
mailbox if the message, because maybe the sending website used the infrastructure with

12:11.880 --> 12:16.400
a bad reputation. Then I can just move that message from the rejects mailbox to the inbox,

12:16.400 --> 12:21.960
Margaret is non junk and the next time because of the historic based filtering, next time

12:21.960 --> 12:26.880
those messages from that sender will be accepted. So, the important point is that you don't

12:26.880 --> 12:30.600
have to keep checking the rejects mailbox because the sender knows you didn't get it

12:30.600 --> 12:35.000
and that's different from the spam mailbox. So, this seems to be a graph for me but if

12:35.000 --> 12:40.720
you have ideas on how to improve on this, let me know. Then a bit about the roadmap.

12:40.840 --> 12:46.840
There's still a lot to do in Mox. So, I want to implement a simple HTTP based API for sending

12:46.840 --> 12:51.200
some messages and also receiving some feedback. Just so web apps for example can just with

12:51.200 --> 12:55.880
a simple call make some sense of emails. If you know of any standardized ways of doing

12:55.880 --> 13:02.880
this, let me know. Yeah, okay. But I said simply, really the dumbest thing. But I guess maybe

13:04.160 --> 13:08.960
it can be that simple. Then I want to add calendaring. It's not email but users and myself

13:09.000 --> 13:15.400
included expect it to come with email. I need some more SNTP and IMAP extensions. A JMAP

13:15.400 --> 13:20.400
will be coming at some point. So, so far I focused on IMAP because all my meal clients

13:20.400 --> 13:24.680
were using IMAP and I wanted to have a working meal system. But, you know, I, JMAP will be,

13:24.680 --> 13:30.000
will be coming. I want to encrypt all data at rest. It's not currently done. I want to

13:30.000 --> 13:36.000
be able to have a second Mox as a backup, Mx and a backup instance. In order to do junk

13:36.040 --> 13:39.560
filtering on the second instance, I will need all the data as well or the historic messages.

13:39.560 --> 13:44.840
So I want to synchronize everything to the other one. And then I, you know, the, the,

13:44.840 --> 13:48.520
once all the data is there, you can also use it as a, as a, as a failover machine. So that

13:48.520 --> 13:54.320
will, that will be nice. Forwarding to external addresses not yet done because it's a complicated,

13:54.320 --> 13:59.160
gets complicated quickly. I think modern email is not really set up for that anymore.

13:59.320 --> 14:03.320
So, Mox is a different way of applying rules to incoming messages.

14:03.320 --> 14:10.320
Then lots more on the list. Too much for today. So, final slide. So it's been a year since

14:14.000 --> 14:19.080
I first put out the Mox code. I've gotten quite a lot of feedback. So thanks everyone

14:19.080 --> 14:24.400
who sent in bug reports and made feature requests or sent in patches. Very helpful. Then also

14:24.440 --> 14:29.840
thanks to NLMet. They've been funding continued developer the Mox since August last year.

14:29.840 --> 14:35.040
So that's been instrumental to keeping working and being able to keep working on this. Also

14:35.040 --> 14:39.760
thanks to everyone who wrote all those RFCs about email. They're very, they're excellent

14:39.760 --> 14:45.840
and they match practice quite often. So my call to action today. If you're not doing so

14:45.840 --> 14:50.480
already start running your own mail server, you know, staying in control of your data and

14:50.520 --> 14:55.280
keep email decentralized. And you have many options ready. And now there's just another

14:55.280 --> 14:59.760
one called Mox. So give it a try. Send me an email. It's a great way to communicate.

14:59.760 --> 15:00.760
Thank you.

15:00.760 --> 15:01.760
Thanks.

15:01.760 --> 15:08.760
Oh, I saw you first. You only have three minutes.

15:08.760 --> 15:15.760
First of all, I think it's a quite incredible project for one person. And I was wondering

15:23.880 --> 15:30.400
how many third party libraries do you use and how much the code you write directly to implement

15:30.400 --> 15:31.400
all this?

15:31.400 --> 15:38.400
Yes. So I think the main external library is called Beebolt, which is a fork of the

15:39.600 --> 15:46.600
database layer. So the messages are stored in files. The database layer is a database

15:46.600 --> 15:51.040
thing and it's pretty much a key value store. But anyway, that's the main external dependencies.

15:51.040 --> 15:54.880
There's something for Prometheus. And then there are a few dependencies that I wrote

15:54.880 --> 15:59.400
myself. So those are not really all that external. And otherwise it's mostly the Go standard

15:59.400 --> 16:05.040
library and the extended Go standard library. So very few external things. So yeah, it feels

16:05.040 --> 16:10.280
a bit like a not invented here syndrome. So I want to rewrite everything. But it has

16:10.280 --> 16:15.320
been very instrumental because sometimes I've made sweeping changes and there's no one.

16:15.320 --> 16:19.000
I don't have to make pull requests, try to convince people to do something that suits

16:19.000 --> 16:26.000
my needs so I can do whatever I want. So it's really sped up development, I think.

16:27.320 --> 16:31.080
Fantastic project. I have a quick question regarding database. I don't know if it was

16:31.120 --> 16:35.480
answered right away because I heard the database was whether the data is a sort of a database

16:35.480 --> 16:41.480
if you like or could be changed or whether and whether whatever it is, could we use Unix

16:41.480 --> 16:48.000
normal tools to just go through them? No. No, you cannot use normal Unix tools. What

16:48.000 --> 16:51.880
I don't really want is say having a meal day that someone else also makes changes to because

16:51.880 --> 16:57.200
I have to do lots of work to make sure that I synchronize or chase as well. So I've chosen

16:57.240 --> 17:02.240
a simple approach. So messages are just stored in a file system individually at the moment

17:02.240 --> 17:07.360
and there's one database per account that has the index for all the messages in that

17:07.360 --> 17:11.520
account and that stores also the message flags, etc. So the database is also essential basically

17:11.520 --> 17:18.020
for all the history and all the data. I could talk for a long time about the database library

17:18.020 --> 17:19.520
but.

17:19.840 --> 17:26.840
Okay, quick one. What is your experience with scaling this up? How many does a MOX thing?

17:37.320 --> 17:43.720
I've not tried. It caught me because of the Bayesian per user and we tried that and that

17:43.720 --> 17:44.720
didn't work out.

17:45.720 --> 17:51.600
So I have no idea where the limitations are. So I would like to try to see where it breaks

17:51.600 --> 17:56.080
and I don't know at the moment. So I've only run it small scale and really targeting it

17:56.080 --> 18:02.360
small like self hosting a bit and not the tens of thousands of users or something.

18:02.360 --> 18:06.040
So I see many hands which is great. We have a little more time since we have the switch

18:06.040 --> 18:10.800
of succession. Anyway, when people leave in the meantime maybe be silent so we can use

18:10.880 --> 18:16.600
the time for a few more questions. Let's try how many we can get. I didn't see the order

18:16.600 --> 18:18.800
so forgive me.

18:18.800 --> 18:25.800
Thank you. Do you have any plans for LMTP support?

18:26.680 --> 18:33.680
No. But why would you use it? Why would you need it?

18:33.680 --> 18:36.680
I'm writing a small...

18:36.680 --> 18:39.680
Oh, you need the microphone. You need the microphone.

18:39.680 --> 18:45.680
Sorry. I'm writing a small like mandrel clone and now that they shut down and for that I

18:45.680 --> 18:50.680
need to be able to put an email message into the server.

18:50.680 --> 18:51.680
Yeah, okay.

18:51.680 --> 18:57.680
So maybe a better solution would be to put it in the go code and make like a fork or something.

18:57.680 --> 19:02.680
From what I've seen LMTP is almost like SMTP but just it has this improvement of getting

19:02.680 --> 19:03.680
reply codes per...

19:03.680 --> 19:10.680
It's just simpler. It's lightweight. It's just a dumb-down version for mail drops.

19:12.680 --> 19:19.680
Did I get that right? You reject mails but still deliver them in the rejects mailbox.

19:19.680 --> 19:20.680
Yes.

19:20.680 --> 19:22.680
Whoa.

19:22.680 --> 19:24.680
Wow.

19:24.680 --> 19:26.680
Scary.

19:27.680 --> 19:31.680
Yes. About the reject.

19:31.680 --> 19:36.680
So I think that's basically like grey filtering if you are...

19:36.680 --> 19:45.680
It's basically like grey filtering except that you will continue to reject them or do you do anything special if they come back or if they go...

19:45.680 --> 19:53.680
Yeah, so if they come back with the same message, I deduplicate it based on the message ID or the hash of the entire message if there's no message ID.

19:53.680 --> 19:56.680
But then we'll still be considered rejected.

19:56.680 --> 19:57.680
Yeah, it will still be rejected.

19:57.680 --> 19:58.680
Yeah, yeah.

19:58.680 --> 20:03.680
And does this interact with the junk no junk flag for Thunderbird and other IMAP clients?

20:03.680 --> 20:11.680
Well, so I think there's the flag dollar junk and dollar non junk and as far as I see Thunderbird sets it without the dollar.

20:11.680 --> 20:13.680
So it's not useful.

20:13.680 --> 20:21.680
But it does also interfere, I guess, because Thunderbird does not a client side and it would work but it's kind of duplicate then.

20:21.680 --> 20:30.680
So I disabled it. I disabled the automatic classification on my Thunderbird setup and I just let the server basically do it myself.

20:30.680 --> 20:34.680
So I now don't get a lot of junk. The filtering is okay.

20:34.680 --> 20:40.680
I still get a few pericas sometimes one a day and I just junk it and then it's okay.

20:40.680 --> 20:45.680
Okay. Thank you for your questions. There's still a matrix chat. Mikaela will be around.

20:45.680 --> 20:47.680
Thank you Mikaela.

20:51.680 --> 20:53.680
Thank you.

