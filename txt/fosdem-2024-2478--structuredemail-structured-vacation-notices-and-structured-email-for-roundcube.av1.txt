All right.
So this time I have the pleasure to introduce myself.
And somebody else needs to take care.
I don't overuse the time.
So yeah, my name is Hans JÃ¶rg.
I'm from Odriga.
I have two hats or two histories.
So one history is in my main email history is in migration,
portability.
So you've seen some of our jamming work earlier that day.
But actually, I have an earlier history in semantic web
technology.
So I was a semantic web researcher.
I did some stuff on Sematic Media Wiki,
if somebody or few is aware of that in the past.
And this is a new project, actually,
where these things tend to converge.
Some people who read their email on the console
typically don't like it at all.
Recently, what it proposes.
But yeah, I like any feedback on it.
Some people might even like it because it maybe fixes
something what HTML email also broke.
And the whole idea is structured email.
And I'll present you a reference implementation
for RUNCube and a particular application, which
is a structured vacation notice, which probably
is compiling to email people in particular.
So first of all, a claim.
So email is sort of your personal API.
But you're a little bit of a mechanical Turk in there.
So you need to read it.
You need to understand it.
And you need to act upon what people ask you to do.
Other services ask you to do.
Second, the email is underappreciated.
I think everybody here in the room would probably agree.
And so one of the ideas here in order
to bring these things together is to make email content,
maybe not in general, but for parts of emails or certainly
emails, more machine readable so that the tools you develop
might help people in certain tasks
to make them more efficiently or even to do novel tasks.
And the very rough idea is basically
like you have a multipart alternative text and text
HTML in an email that you also embed structured data in RDF,
which is a W3C-specified knowledge representation
language according to certain so-called data models.
So schema.org is a very popular data model
which search engine vendors have set up for, basically,
you find it in websites.
Like this is movies.
This is a song.
This is an article.
And the very idea is to also allow users or tools
to include that in emails so that email clients can make sense
out of what is in that email.
So yeah, that sounds quite abstract.
How could that look like in practice?
So actually, this is not something I invented from scratch.
So actually, Gmail, Yahoo, some other vendors, WebDE in Germany,
are already doing it.
So if you fly by Lufthansa or a certain airline
and you have a Gmail account and if you opt it in,
these airlines might already send that schema inside
of that email.
And you might notice there is a special display within Gmail
that shows you a certain information on the flight,
allows you some certain action, might automatically
import it to your calendar or at some point also
to your Google Assistant and so on.
That's nice.
The problem here is currently you need,
this is only for select senders.
You need to register with each vendor, actually, basically,
to have this happen.
It's only there for very few select use cases,
like traveling and maybe ordering in the web.
And it's unidirectional.
So it's only from a service to you.
You cannot by yourself use that.
So it's a little bit against the idea of email, right?
So I can.
I mean, obviously, I would not send a flight probably
to somebody, but maybe something else.
So schema.org alone does have 800 concepts.
And what Gmail supports is like six of them or something
like that.
But actually, there's already nice, very nice use cases
for even this travel information.
And there will be a talk just after this
by Folk are sitting in the background.
So I won't talk too much about that.
Second example would be link sharing.
So there is share by email, right?
And this is how it looks like in K9 email, right?
I mean, not blaming K9 for it, but you basically
get a URL sent.
And this is what you receive.
And in this case, basically, you are stuck with Spotify.
You click on it.
You have said Spotify song.
But K9 doesn't know this is a song.
And you are with Spotify.
And OK, you can listen to the song.
But if you're on Apple Music, it's up to you to deal with that.
And with structured email, the idea
is you could take some metadata, which in the case of Spotify
is actually even embedded on the Spotify link already.
So nobody needs to do manual annotation.
You could put that into the email instead of the link.
And so your email client would not just have the link,
but the email client would know this is a song, Brussels
Jetem, and from 2003 by Al Jaleh.
And it could even match, for instance,
with your local media player if you have that as an MP3
or something like that.
So you could basically give a dereference the kind of content
that got shared in that sense.
And you have a much better user experience, a little bit
like you have an instant messaging when you send a link.
Where also, like what's happened so on,
they do extract the Twitter cards and kind of stuff.
Another use case, maybe even more fancy,
is location sharing or even live location sharing.
Many instant messaging tools allow you to do so,
but it's within their ecosystem.
So you're bound to their implementations,
their privacy rules.
And it only works if you send to another fellow WhatsApp user.
So it's also not really open and decentralized.
So we built a prototype where you send a location based
on the JSON-LD snippet.
And we have a prototypical implementation
where the client on the mobile can push the updates
of the location to a URL with a secret UID,
which the user receiving it can actually use to refresh it.
So if you're receiving email client support,
you could do this user experience.
This is an example which we did.
And of course, you can also do have some fallback.
So you can get an HTML email.
Of course, then it's not the live location,
but you can do something like a fallback
like you have in some newsletters.
Click this link.
Go to the browser.
Even though this is, of course, not the best user experience
here.
And then another very familiar use case for you,
vacation notices out of office messages.
So it's typically something you enable for your email account
while you are traveling on FOSTA.
Maybe it's a weekend, not so many people will write to you.
But maybe you arrive back in office on Tuesday.
So you say, I'm staying in Brussels till Monday.
Please contact my colleague in that meantime or so on.
It's still something you need to act upon manually.
But it would be interesting if your email client could actually
understand this is an out of office message,
a resistance at date.
And probably this is the person I could redirect the mail
to if I wanted to choose.
And this is basically what we did.
So we did an ITF draft for this to specify it a little bit,
the process.
And basically, you can even leverage most user interface
data you have from the CIF vacation extension.
This is how we implemented it in RunCube.
We just take the date fields which you anyway fill in there
and the reason and put this into the structured field.
And if the receiving email client is
capable of understanding it, it may store this information
for the time which the user is away and it can highlight it.
And you can even put it or choose as the user on vacation
to include it in emails prior to your vacation.
So you could say, even if I go to vacation tomorrow,
include that metadata already in just any regular email
if you want that.
And so recipients can already see,
ah, Michel will be in vacation starting tomorrow
once he wrote me this mail now.
And I might hurry up answering him or something like that.
I'm not suggesting this is like it has to be,
but it's just illustrating that you
can even do additional things which you could not just
do with regular out of office right now.
And yeah, what is the current state here?
So these examples I've shown you,
there is currently an ITF working group
that's very recently formed.
Last November was the first meeting.
There is a mailing list here.
So even for those of you not familiar with the ITF,
please join that list if you're interested in that topic.
Any feedback, any questions, everything is very appreciated.
There was already quite some good feedback
from the community.
So like Sunderbad Board Council made a decision
like if there would be an RFC, they
would be willing probably to implement this
or to merge this into their code.
First drafts already got adopted in the working group,
still sometime under the form of RFC,
but things will be going.
We are working on a reference implementation
where we graciously received money from NLNET and the NGIU
program.
This is published right now during FOSTA.
So you can go to Packages.
Not sure if it's already on Packages, latest on Monday.
We will provide some guidance so that you
can use our round cube implementation as a blueprint
for your own vet mail probably, even some reusable code
so you don't have to write everything on your own.
And there is even first adopters.
So for instance, the developer Fairmail,
I got in touch with him and he implemented
the very first beta of it like within a day, which
was quite an awesome experience actually.
If you hear that, I really appreciate.
And that would be really great thing.
So finally, maybe a little bit of an overview
of how this currently works.
So this is the URLs where you'll find more information.
We have one library currently where
we do the extraction of the structured data
from incoming emails.
This could be reused on the server side of your application.
We have two libraries which basically are template libraries.
It's a little bit user experience-ish.
So we are still searching people that really
are keen on CSS, HTML design stuff.
So if you know somebody or so, please help us
because we think it makes sense also
to have at least a simple example for how
to render these cards for very popular kind of information
so that every client doesn't need to decide on its own
how to render a Spotify song or something like that,
or a music song.
Even so, of course, every client could opt to do so.
But we want probably to provide some examples here.
And we do it both for the actual rendering,
but also for this HTML email, which
we want to send as a fallback for those that don't have
the fancy client yet.
And then, yeah, I say there's two RimeCube extension.
One is for the structured email as such,
where you can do the Spotify thing, for instance,
or receive these kind of things.
We also have working on the Next Clouds mail thingy,
where you can actually interact with the Next Cloud Cookbook
app, where you can import recipes that you receive by email.
And there is a separate plug-in for the structured
vacation notice.
That's all, actually, already for the moment.
Thanks for listening, and I look forward
to feedback and questions.
So, yeah, maybe somebody can see.
Yeah.
All right.
Did I say a hand question?
Is there concern?
I mean, to me, it seems like we've had this discussion that
this is just kind of in the background of a mail message.
As long as it's not overwhelming data size,
it doesn't really matter to people.
But the question would be, is this
the kind of thing where maybe you have a client that's not
displaying really great, where all of a sudden you
start having all these random attachments that
would confuse a user?
Because they can't do anything with this themselves.
This is all meant to be machine readable.
So there was an interaction between,
but I repeat, so I understood correctly.
So your question is, is this something
that might confuse users if it's somehow mangled inside of you?
What are the ideas around trying to prevent confusion of users
if a client doesn't know how to handle it?
Two things.
So first of all, you can see it as a multipot alternative.
So just like if the email client doesn't understand it,
it just won't get rendered.
And also, it's metadata.
It will never be shown if the client just
doesn't know about it.
So you can use it with existing clients already.
Actually, you receive those emails probably personally,
because Lufthansa might include it already even
in the mail sent to OX.
You just don't do anything with it.
I'll assume you're writing my emails.
Sorry?
I'm joking.
Yeah, yeah, OK.
And actually, the interesting thing
is even the opposite is interesting.
Because we had people coming to us that
had exactly the problem where you get a PGP key or an email
signature attached to an email, because actually,
an email client doesn't even know what that is.
And you could actually use this structured data also
to provide additional information about what
certain email attachments are about.
So you could even help email clients
to provide a better user experience in that case.
What's the incentive for any provider
to actually send structured emails?
Because it seems that it's an activist opposite.
They don't want to like Spotify, or they
don't want to be able to send what song it is.
They want people to go to Spotify and nowhere else.
And same with the Lufthansa thing.
I mean, they don't want to send.
They want to publicize their brand.
They want to upsell services.
Yes, good question.
Then they don't want to send just a generic message
with no possibilities of those.
So the incentive is to not use those.
OK.
So you say there is probably what is the incentive?
There is no incentive for both Spotify and Lufthansa
to send this.
Point one, so for Lufthansa, Lufthansa does it, actually.
You can try.
I'm not sure about Lufthansa in particular,
but airlines do it with Gmail.
And the very reason is Gmail gives them a preferred
visualization.
And actually, it might even strengthen their brand
appearance, because they might have a special.
There is research being done that the click rate gets even
higher when you have the special presentation.
So that's at least one theory.
I'm not saying I spread the truth here, but just giving you
an idea.
For Spotify, I was not claiming Spotify itself to send it.
Because what I was saying is, you share it.
You are in your web browser, for instance, or within Spotify.
And you say share with.
And you go to the email program.
And Spotify does have that data on their website, in the
metadata.
And the incentive there is for search engine optimization.
So they have it because they want to get into the Google
ranking very high.
And we just piggyback that data by using it in email, in
that sense.
But you said the share with the feature.
The share with feature is controlled by the Spotify
client, which is controlled by Spotify.
Oh, no, no.
It's not, anyway.
Because it's obviously URL, because they want to have set
for WhatsApp.
They won't change that.
But with the URL, we can actually pull the metadata
from the website.
Like the Google crawler does it.
So you want to hijack that thing and then put it in?
In a way.
Which is fair.
OK.
Thank you.
