So, hi.
Welcome to live coding music with microblocks and microcontrollers.
This is Bernardo Mavosa.
I come from Barcelona.
And I work as a Snap and Microblocks Developer at SAP together in the same company with Jan
Sanyadga and together in the same project with a lot of people here in the room, like
John who is the creator of microblocks and so many other things, like Turgut, like Cathy,
and of course Jan Sanyadga who also contributed to microblocks.
For the purpose of this talk, I never mentioned this, but for the purpose of this talk I will
mention I am an ex musician.
I used to play in a reggae band for a bunch of years and recently I got into making music
again with microcontrollers.
So, I guess that makes me a musician again, but I don't know, you'll have to judge after
this.
And you can find me here.
So that's who I am.
And next I guess I should talk about what microblocks is in case you didn't attend.
John, Cathy and Turgut spoke yesterday.
So microblocks is a, well, first of all you can find all about it here, but I'll brief
you in.
So it's visual blocks in the same way that Scratch and Snap are.
And I mentioned these two languages because these are the closest relatives.
The blocks are one thing, what's behind the blocks is a different thing.
The blocks is how we present the code.
But what's most important about these three languages is that they are live, they are
parallel.
And that's usually not mentioned when we talk about blog space programming.
We put them in the same back.
But that would be like putting all text-based languages in the same back, right?
They're languages that are interpreted, others that are compiled.
So yeah, it's like Scratch and Snap, but for microcontrollers.
These are small computer-like devices.
It's a live language.
It's an autonomous language that means that the code runs actually inside of the microcontroller
and you can unplug it at any time and the code will keep on running.
And it's a parallel language, meaning you can have multiple threats running at the same
time inside of the microcontroller.
And it's a portable language, meaning that you can run the exact same code in several
different microcontrollers, even of different architectures.
We even have versions of what we call the MicroLogs Virtual Machine running on the browser.
So it's a very portable piece of code.
And since the talk is about live coding music with microcontrollers, I thought I should talk
a little bit about what live coding is in the context of making music.
Live coding is programming things in real time, right?
Well in the case of music, music and digital media, because there are people who make visuals
live with programming, it's programming digital media live in real time for an audience, like you.
So you may ask, okay, but how does one make music with a microcontroller?
And the answer is, well, it's easy.
You just generate signals, right?
A microcontroller can generate square waves, can generate sine waves, and your answer obviously
will be, yeah, okay.
But what about music?
Like it's 2024.
Like what about actual music I want to dance to?
And yeah, so the idea we had in that regard is let's use devices that already know how
to make music and let's interface with them, okay?
So reducing media for that.
And without further ado, I will try to make some music for you today.
I wanted to explain what I was doing as I was making the music.
I'm not sure this is going to work, because I have a pretty sketchy setup where I connected
my synthesizer to this thing here that's beaming audio to the back there, and then I don't
know if I'll be able to do the two things at the same time.
And I don't know if I'll be able to hold my microphone either.
I'm really good at it.
Maybe, yeah.
Let me try if it works first.
That's a bit too loud, is it?
Is it good?
Yeah, okay.
Okay, so the first thing you need when you make music is obviously a little bit of a drum
bit.
So what I'm going to do is forever I'm going to wait until the next whole note.
I apologize a bit for those of you who don't have any notions about music, but this will
kind of make sense.
I will wait until the next...
Oh yeah.
Is that good?
I won't be able to fit as much music in it.
And then I'll play some drum.
Let's say I'll play a bass drum.
And for how long?
Well, for a quarter note.
And we'll keep it a little bit.
There we go.
That's not enough for dancing.
I mean, you have to be...
Then at the next half note, I'm going to play a snare.
Okay, so what do we need next?
We need some bass.
So we'll pretty much do the same thing.
After every whole note, we'll arpeggiate...
Let's say we'll arpeggiate a major chord, because I'm feeling happy.
And we'll do it at...
Yeah, we'll do it at the default configuration.
And of course, this is going to sound not like I wanted to.
No.
So what I'll do is I'll select a different instrument for this MIDI channel.
MIDI is organized in channels.
And I'll select the bass number one, for example.
Let's see what this sounds like.
This is a bass, but it's a bit too high-pitched.
So let's bring it down a bunch of octaves.
Much better.
But of course, it's got lower pitched.
It also got lower volume, so I'll make it loud, as bass should always be.
No, but bass is indispensable.
Let's get a different bass.
These are all the same bass.
Okay, so we'll leave it at that.
What else do we need?
Well, we can already dance a little bit to this, but it'd be interesting to, you know, get some chords going on.
So we'll basically use the same thing.
And instead of arpeggiating, we're going to play...
Let's say we'll use the major chord on channel two, where we'll obviously select a different instrument.
Yeah, it should be good.
Let's see how it sounds.
Okay.
You have to understand this is my set of instruments that I collected from different synthesizers and sound funds.
So what I call a piano is not what you might think of as a piano, but this is my favorite piano.
And I want this to play for a quarter note again.
Not as loud.
Piano is in the background.
That's okay, but a little boring. Let's go three-step sounds up.
Okay, so you can see a little bit how this works.
I usually faster explain it at this point.
It's starting to become a little boring.
So...
Can I start the voice down?
It's a little bit of a volume up there.
So at this point it starts to become a little boring.
And you can choose two things when you're doing live coding and then it becomes boring.
One is you will raise it and start the sound.
The other way is to start to shuffle things around.
And the other way is to add the audio stuff that was going on.
No bass lines.
I will add one more thing and then I'll start with what we have on screen.
I'm sorry, but I will have to make it a little bit smarter.
Because I don't want to be a little bit more boring.
And what I'll do is I'll make another...
...
...
...
Can you not hear?
We can change the order of our bass line or we can...
...
...
...
...
Okay, thanks to top it off.
I guess that will be the end of the improvisation.
We will improvise over a steel that might work.
A major steel.
And we will do one channel with a steel and we will decide what we want.
We will put a new steel in there.
And I'll do that in the next video.
Not every...
Okay, as you can see the soundfont that I'm using is kind of a retro one.
But the next thing I'll do is using the external synthesizer.
I can change the soundfont.
Any point.
And of course I'll also set up my instruments again after the chorus.
...
As a disclaimer, okay, thank you.
As a disclaimer, I had no idea what I was going to play today before I jumped on it.
That's...
I don't know, maybe a temerity.
But that's how some people like to do it.
Other people will prepare a session and have ideas in their mind.
Okay, to be honest, I tried to prepare, but I realized I didn't have any way to output sound from my synthesizer.
So I was in my hotel room and I realized I couldn't prepare.
So...
But I wanted to do it like that.
That's pretty much it for this part.
Oh, I forgot to say it's like it's 2024.
So if you like this and if you'd like to try it out yourselves,
I wrote a little activity in our Learn website where...
If I can find it, yeah.
Where I explain in quite a level of detail how this works,
what kind of device you need, both in terms of what microcontroller and what synthesizers.
If you already have some old synthesizer keyboard that has a MIDI input,
that's the device you should use before buying anything.
There are things that are quite cheap. You don't have to get a 2000 euro synthesizer.
You can get this 80 euro little board hacked together by this independent hacker somewhere that sells them on their website.
And I explained how to find these weird devices in here.
There's of course a connection that you will have to do from your microcontroller to your synthesizer
to get it to receive MIDI and make music.
And I explained what MIDI is all about.
I explained what the blogs in our three music production libraries are all about.
You may have noticed we have these three libraries here, MIDI, Rhythm and Scales and Chords.
Basically the MIDI one is the low level one, the one that talks to the synthesizer
and abstracts all the MIDI messages and so on.
So it knows how to produce MIDI messages that ask a synthesizer to make this note for that channel
and change this instrument. There's a lot more MIDI things that you can do here.
Rhythm is how we are abstracting the notion of dividing time into equal measures and fractions of those measures
and also synchronizing different threads that are doing that.
So this and this can sound constantly synchronized.
Because otherwise if you didn't use this, if you just used a weight block, which might be your first approach...
Thank you.
So your first approach might be, do you actually need this weight until next thing?
And you may want to do it like this.
But can you feel how it's not in sync? And it will get worse.
It gets worse in time.
So we certainly need a way to synchronize all these scripts very tightly.
Because the human ear is very, very good at detecting even slight deviations in tempo.
And well, we explain how to make a simple song and how to make a simple trump pattern, I guess I can.
We're talking about melodies and chords.
Can I lower the volume globally? No, I can't.
Okay, how to make arpeggios, etc. etc.
And we end up with something similar to what you've heard today, which is a trump pattern, a bass line.
Oh, where is it? Here it is.
So by the end of this lesson you'll be producing this piece of music with very few blocks.
One thing that I haven't used this time is random.
Random is really great at adding variation to your music to make it sound less monotone.
And how am I with time? I'm way too early.
Can you show Greg the music in the mic?
Yes. No.
If you have a normal operating system slash a window system at all, you can drag this stuff into your micro blocks window.
And it will load the blocks that are embedded in the image because we are serializing them into the PNG metadata.
But I use weird window manager that doesn't know what windows are.
So I can't show you that.
Then how can you help?
One of the things that we need most help with is translations.
And translations, we welcome one-time things like, hey, this is my language, I will translate your idea.
I didn't show that, but the idea is translated into several languages that includes the blocks.
So if I select a different language, now all the code is in that language.
So that's great for localization.
And we welcome this one-time translations, but we welcome even more some kind of commitment as to, I will be the maintainer for this language.
And when you make a change, I will also update the language file.
Translations are pretty easy to do on micro blocks.
And if anyone is interested, I can show later how that works.
We also need help with writing activities.
We have this learn page that I showed before.
And in here we have a bunch of activities.
You can filter by language, by the micro controller board that you have, by components.
Let's say you are running some class and you want to teach about, I don't know, how servers work.
So here's the activities that involve servers.
You can filter by level, topics, et cetera.
We welcome people to write their own activities or to translate activities that we already have into your languages.
We also welcome donations.
Micro blocks is a project under the wing of the software freedom conservancy.
And even though we don't need that money ourselves to live because we have jobs, we use that money for things like buying hardware for workshops.
We use that money for things like paying a web developer to make nice websites.
This is obviously not done by an engineer.
I hope you can tell.
Money is always good, especially if it's recurring.
And lastly, you can help by using it and giving us feedback and spreading the word.
Any questions? I know I'm very early. I expected to take much longer.
Do you have a few examples that you could share with people?
I don't know if it's good.
So can you hold?
I don't know if I have it in this computer actually.
But, but, but...
Okay, here's a sample. It's a very short sample. I think it's just one minute of a bunch of snippets of songs that I made a while ago.
And I will stop them and explain a little bit what they're about.
So this was the first one that I made when I started playing with MIDI and realized that this thing was actually possible, because I didn't know if it was possible.
This whole thing came as a request from two members of the live coding community in Barcelona and a good friend of mine who is a professor at a local university.
They came to me asking if we could do live coding with our languages with Snap or MicroBlocks.
And I started working on... I thought, you know, music needs to be really tied. These are educational languages.
We don't even care about things being in sync or being, you know, very time sensitive.
So I thought, I said, I don't think we can make music, but we can definitely make visualizations.
And I started working on that with Snap, and we actually can make very nice visualizations with Snap.
And then I thought, well, microcontrollers are actually very tight time-wise. They are very fast machines and they have nothing to do.
It's not like an operating system where things are going on all over the place.
In a microcontroller, there's just, you know, the code that you put in it.
So it should be possible. And then I started experimenting and that seemed to work.
And recently I've started experimenting, trying to do the same thing with Snap, and I realized it's actually pretty tight and it might be possible to do it too.
But that's not for this talk. And so the first thing I did, remember I said I used to be a reggae musician, was to make some reggae music.
And that was sort of my... Then I tried to make some jazzy tunes with different time signatures.
This is sort of a Latin rock, three-four time signature as well.
Then this is... You tell me.
Then I actually explored the signal generation thing that I was talking about in the beginning.
And mixing it... I started experimenting mixing the sounds that you can generate with a microcontroller by itself.
Like you plug in wires into the digital pins of your thing and you mix them together with a passive mixer into a 3.5 jack, like an audio output.
And see what you can make with that.
And also mix that with the sound of an actual synthesizer and see what comes out of it.
And this is an example of... Not this.
So this is a mixture of...
This is my attempt at free jazz.
This is nice. I think I have to show that. I don't have it here.
So this is a synthesizer that has the chip of my first computer inside.
It's a YM... Someone here knows the number, I'm sure.
It's the sound chip of some computers like the Amstrad CPC and the MSX in my case.
And someone has made a synthesizer that uses that very chip, the actual chip, not an emulation or anything.
You open it and you talk and it's that old chip in there. And it sounds like this.
This is only chip tunes using only the sounds that microcontroller can generate. Sorry.
So the whole thing, the drum pattern, the bass line, the chords, everything is generated just with the microcontroller.
These are square waves and noise that is attenuated to make things like snare drums and hi-hats and things like that.
Again, this is only generated with a microcontroller.
I don't know what this is.
And that's it.
So you're saying that section was just the microcontroller not sending it out to me?
Just the microcontroller.
So, I think that's the only chip that I can use to make a microcontroller.
So you're saying that section was just the microcontroller not sending it out to me?
Just the microcontroller.
So, yeah, if you're interested in that, I didn't show that because I thought it, well, I didn't bring my passive mixer either.
But, oh, sorry, let me go back to a language someone else understands.
There's the chip tune library here.
And I can't show you how that sounds because I don't have the pins connected.
But this is going to generate sounds just with your microcontroller just by generating signals.
And it's actually pretty interesting to see how this works.
If you look at this, it's actually just setting a digital pin on and off at a particular interval and in a particular pattern.
And that generates a kick drum that's very loud and like it sounds like a hardcore techno kick drum.
Tom's are generated in the same way.
And then on boards that have a DAC that's a digital analog converter, you can generate noise.
And by attenuating that noise, you can generate things like snare drums or hi-hats.
And the way you do that, they look very much the same.
You just fade some noise for a couple of milliseconds, right?
So you generate noise.
Noise is just right.
If you attenuate that in a certain pattern, you get...
And that can be a hi-hat or can be a snare depending on a bunch of parameters, right?
And that's how they used to make music for these old 8-bit computers back in the day.
So it's really nice that...
As Jan and Yalga were saying before, we're doing this also to explore things that we don't exactly understand.
And I've had so much fun understanding how my old computer generated all this magic music.
And there's also the square wave chords library that you can use.
That will play a chord.
You need to connect three different pins because a chord is a minimum of three notes at the same time.
And this will generate different notes in each pin in sync.
Okay. So any more questions?
So the question is whether I looked into also receiving MIDI data into the microcontroller.
No, I haven't looked into it.
But we've talked about it with John several times.
It would be really interesting to do the opposite.
Today I'm using an Arduino Dway just because it has a lot of memory.
And so I can...
How do I explain this?
So micro-box is constantly synchronizing the code that you see on the screen with the code that's inside of the board, right?
So what you're seeing here is a window to what the board has inside, right?
That synchronization takes a little bit of time, of course.
And on boards that have a slower memory, this can be noticed when you're making music.
And this board has a very, very fast memory.
And also it has a lot of memory, so you won't run out of memory while you're life-coding and changing the code constantly.
And so you won't force the VM to reorganize the memory every, I don't know, N-cycles, right?
So you can life-code for two hours and you won't get any glitches.
But any microcontroller will do.
Yes, yes, the memory is a little bit slow, so you'll get slight glitches.
But yeah, but any will do.
So, software synthesizers?
Yes, you can use software synthesizers.
The question was whether you can use software synthesizers.
The answer is yes.
John implemented Web... sorry, what maybe not...
USB MIDI for microcontrollers that support USB host, is that right?
Yeah, yeah.
So, in the MIDI library, there's a block that you usually don't need to use if you're using hardware MIDI...
sorry, hardware serial and regular, like serial MIDI, that lets you choose on which pin to emit your MIDI,
and it also lets you select USB.
And it actually uses the same USB line to program the board and send back MIDI to the computer.
And that works really well.
It has to be a microcontroller that has a USB...
Yeah.
I think I'm hinting at that in the article that I linked to.
I would make one question about the aspect of your...
Do we do the previewing?
Yes, sure.
So, it's at learn.microblocks.fun, and it's currently...
since it's the last one that we wrote, it's currently the first one.
And it's going to be the first one for a while, because it takes time to write these things.
Okay.
So, the question is, I mentioned something about sound fonts.
Sound fonts are a format for someone that knows more about this, is going to correct me.
But they are a format for virtual instruments and virtual synthesizers.
And they consist of a collection of samples.
Those are like sound files.
And then a collection of transformations that you do to these samples,
and those in turn get turned into instruments.
So, for example, you might record this and turn that into a drum kick, right?
And sound fonts are a format that's really old, but has been used forever.
It works great.
It's a format that many virtual synthesizers, software synthesizers use.
And what I'm doing here is I'm using a board that was developed by...
I forgot the name.
But it uses sound fonts.
So, it uses a Raspberry Pi compute module inside.
And you can load sound fonts into it.
And of course, in sound fonts are an open format.
You can edit them and modify your instruments and create your own.
So, you would see a Raspberry Pi left a software synthesizer inside the sound?
Yes.
Yeah.
But it's a nicely packaged one.
So, it's actually a synthesizer that has the Raspberry Pi compute module as the power house.
But it's actually a standalone synthesizer that you can plug your MIDI in and you have your sound output.
What microcontroller did you program in the download?
Didn't I say it was a duet?
An Arduino duet.
So, how many MIDI synthesizers have you recently bought?
Too many.
Yeah.
I have to give you a word of warning.
If you try this, it's very addictive.
Especially in this day and age where you can find very cheap synthesizers and you're like,
come on, it's really cheap.
I can afford another one.
So, I think I have eight now.
And one is actually flying from the UK to Barcelona as we speak.
Yeah, it's very addictive.
So, the first sound that we've got is the drone that's just on the plane.
Yep.
So, that actually comes from the synthesizer itself.
Can you hold?
Let me connect this back.
So, general MIDI is a very funny protocol.
So, I think someone sat down at some point and decided which 127 instruments were the most representative of the instruments that humans use all over the world.
And they decided that they needed eight slots reserved to sound effects.
And that these sound effects would be gunshots, waves, birds.
So, I don't know how that happened.
I think it's a good thing of eight instruments that I would like to have instead of those.
But at least the birds are nice.
And the way you play those is you select instrument sound effects.
I forgot which one it is.
Is this on?
Oh, of course I have my...
So, and the answer is also each synthesizer will either adhere to general MIDI or not.
So, some will play different things where you expect them not to be.
So, this is like a fret sound.
Sound effect number two is like a flute sound.
There's the waves.
There's the birds.
And I believe... I was not kidding.
There's gunshots.
They make us nice percussion.
So, how about triggering samples?
Yes.
I think some samplers will work with MIDI notes.
So, that will work.
Also, you can trigger sequencers with this thing.
We have to start playing and stop playing and continue playing blocks.
But if there's something that you are missing in the library,
these are all built with microblocks themselves.
It's all built with blocks.
So, for instance, say your sampler uses a special MIDI message that's not standard.
You could look at how this block is made.
You show the block definition.
And you see it's actually using two different instances of this set MIDI note.
It sets it on, it waits for the duration,
minus the time it takes for the message to travel, and then it sets it off.
So, how does this work?
Let's look at the block definition.
So, it depends.
If you're sending me a list, then I'll send the list of notes all at once,
so you can make chords.
Otherwise, I'll send a MIDI command.
And how does the MIDI command work?
Well, the MIDI command is sending stuff over the serial port.
And if you know the format of your special MIDI message,
you can just send stuff over the serial port, and that will work.
Okay.
If that's all, thank you very much.
And you can follow the project.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
You can follow the project and myself in MasterDun.
How did that happen?
