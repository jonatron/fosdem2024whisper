Hello. This talk is about collaboration with Julia from India. Before this collaboration
I was alone and I was left in a room with 100,000 lines of C code which had to remain
C and had to be optimized somehow. How many of you here ever had such a situation? Perhaps
somebody? One, two, three, perhaps more. Good. And usually, well, you understand that this
was not my code, so I had to modify it. It was the code from people, from many people
who worked in bars and produced code which had a lot of loops which do number crunching.
Those loops have touch numerical quantities and actually had a kind of structure that
you see here. You might recognize. So the layout, the data layout here is called array
of structures. So who would say, oh, I have an optimization for this case from your mind.
Which is this optimization? The most obvious one. So shout. Okay. It's my role to say it.
Well, to change the layout into not, sorry, arrays of structures, but structures of arrays.
So this is like a transposition but brings like an improvement in performance of, let's
say, two, three, four, depending a bit on many conditions. So changing the layout of the code
and also the expressions from what you see here to what you see here might have such a positive
effect on performance. But how to do this if you have 100,000 lines of C code which has to stay C?
Do you cobble together a few scripts? Yeah, why not? But perhaps you then come at some point
whining that doesn't work. So you revert to, oh, you revert perhaps to using some high level
transpiler. Yes, perhaps, but it's complicated. Well, I went that way. But I chosen another
transpiler which is called coxinell. Coxinell has been written with the idea of matching, so finding
bugs in the C code of the Linux kernel and erasing those bugs. But I found out that coxinell,
I think, was also a good tool for factoring large amounts of C code, especially in manipulating
expressions within statements. So expressions, once they are matched in statements, can be
also changed. So coxinell has this pattern language that you see here, which is not in terms of
patterns of text. Those patterns are in terms of the abstract syntax tree, which gets built on the
top of syntactical elements of the C language, which are being, which is being parsed here. And
those entities, the syntactical entities of the C language are of, you have control of them. So
let's look at this key slide here. So we identify, match identifiers, tree identifiers, and we also
give constraints. Like the first identifier Q, which can occur in the code, has to be, has to look
like PRSR. The second one has to be P. The third one can be one of those two ones. So it's like
you give constraints that has to be respected. And then the red line here, the minus line, which
you see here, has to be found in the code. In the arbitrarily complex expressions or statements,
such a form must be found. And once such a form is being found, only then such a change occurs. So
you see this change? It's also expressed in terms of what has been already found. So you can be very
precise if you want. And what you see here on the right panel is an entire program without, with
one line changed from what you see here, red to what you see here, blue. So this is, of course,
construed example to show you that this teeny rule here can syntactically go over your arbitrary
large code and do really a lot of changes here. The complicated part comes if you want to be,
if your code doesn't have regularities, so it's messy. But yeah, but if it's tidy enough, you can
do a lot of things. And we're working on new HPC oriented features in coxinell in this system.
So what does HPC revolves around nowadays? GPUs, modern C++ and modern OpenMP. So this is what
we target. And these are three slides now I will be showing you just to give you a taste of some
key elements we have been putting in the last times. So if you know the CUDA from NVIDIA, API or
language extensions, then you will recognize that here we have some keywords, some the Chevron,
kernel, call syntax, which we support. So this is not standard C or C++. We're supporting this. So
we're putting this language support into the coxinell tool to allow you perhaps to change your
existing code. So to write rules on your huge code, because if it would not be huge, you would
be doing this by hand, right? But if it's huge, you want a tool for power, for the factoring. And
this is what we want to provide you. To, yeah, to derive perhaps a CUDA kernel code from your CPU
code. If you have in mind the regularities and the changes that you need, and you can express them
with this language, I like C++ 23 introduces multi-index operators with square brackets, for
instance. So this is now also possible if it's of use. It can be of use, for instance, with cocos
heavily. So this can help you to transition perhaps to cocos if you really want. And just to, again,
I want to, these are expressions and they act on statements. So you have to imagine that this can
occur in arbitrarily nested statements. So complicated thing is like the one that you have seen at the
beginning of the presentation. And it's up to you to create like chains of rules, which express the
logical dependencies between the things which you want to match and the things which you want to
introduce in the code. So if the code is messy, it will be more difficult. If your code is tidy enough,
you can do extremely powerful things like also experiments with performance. Let's say, oh,
what happens if I change in my entire code base from this style of arranging things, and this
this style of arranging things. Then such experiments might be enabled here. And perhaps you don't,
you're not perhaps obliged into using overly complicated APIs from portable, yeah, from some
vendors. Yes. So, oh, sorry. One last example slide. You can even use coxinell to declutter code. So
here we are removing hand unrolled code. So such a pattern recognizes, but I mean, I have written
on purpose, recognize some hand unrolled code, removes it, and just introduce one pragma from
openMP, which says, hey, unroll this. And this is a standardized pragma. So it's not like GCC,
unroll, Intel, unroll. No. This is finally, since a couple of years, we have this pragma. So let's
say, if you know how to declutter your code, you have rules in your head, you can implement them here,
and have some formal, an informal method for restructuring your code. Good. So you know what
we are doing lately. So we are developing further material and use cases, language support, some
small things and large things. And yeah, that's it. So this work has been supported by the
Gauss Supercomputing Center project, by a collaboration between Bavarian Germany and France.
And if you are tough, you will go through this tutorial, which I created a few years ago.
Yeah, and you can stay tuned with our developments with Coxinell, or you can also come to
WÃ¼rzburg in one month to attend our short introductory tutorial into Coxinell. And if you
want to read our six-page use case article, I really recommend it because
it's more deductical than this 10-minute lightning talk. That's everything.
Thank you very much, Michele. We have time for one question. JP in the back, again.
Thank you so much. Hey, cool talk. Great, great thing. I love Coxinell. I have it right on the
top of my list that I want to work with. The question is, can I express more constraints than
just symbols and identifiers in these rules, like types or like lexical things? So what are the
things that I can express in terms of this rule should only apply if? So for sure, context?
So whatever you write as context, it gets matched. But if it comes to the rule part of those
patches, which we have seen, the top part, you have seen identifier and something. Yeah, you have
also type and other words for function parameters, for positions, for symbols. So there are a lot of
them. And the important part is that the code is being parsed in the first place. Because once we
support your language constructs, we parse your code, then you write a rule which can be, which
is really the code which we have to match. So Coxinell is different parsers. It has different
parsers. We parse your code first, we parse the root first, and then we look for a match.
We are able to parse that. Any construct can be modified. This is the point. Any construct.
So even within a template, you want to change something systematically. Yes.
Okay, cool. Yes, thank you.
Okay, we're doing
