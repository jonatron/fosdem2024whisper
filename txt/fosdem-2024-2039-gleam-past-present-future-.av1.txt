Yes, good now it is
Hello everybody, this is fantastically exciting
Look how many people there are, I thought there was going to be like five of us having a lovely time
But no, there's far too many of us, great
I'm so excited, I'm going to take a photo
Just so I can prove this happened
Does everybody smile?
Wonderful, thank you so much
I'm ecstatic, so hello, I'm Louis, I'm the creator of the Gleam programming language
If you want to talk to me, do so here
I'm here to talk about Gleam, which is, you've just seen a new programming language for the Erlang virtual machine
And it feels like we've had milestone, because the language has really matured especially over the last year
And so I want to have a little bit of an indulgent look into the past, sort of where did it come from and how did it get started
A little bit of a celebration of where we are now and look at some really cool projects
And then I want to look into the future and say, what's coming next for Gleam, what can we bring to the beam?
So, this slide is ever so slightly irrelevant after that last talk
But I just want to stop by saying, what is Gleam, to get everybody on the same page
It is a new functional programming language, it doesn't look like Ruby, it doesn't look like Prolog
It kind of looks like Rust, C, JavaScript, that sort of thing perhaps
And it runs on the Erlang VM, so it is a sibling of Elixir and Erlang
But it is a bit different in that it is statically typed, unlike the other two dynamically typed languages, and most of the other ones
And that means that it brings a new style of programming to the beam, and hopefully can draw in more beamy people
It aims to be very small and consistent, and the point of that is that we want to make it as easy as possible to read code
We want it as easy as possible to learn the language and to get productive with it
And productivity is not just about having a good language, these days you often have really good tooling
Gone are the days when you can just give someone a compiler and then you say, ok well everything else is up to you, you figure it out
So we also have a really nice build tool that comes with a formatter and package management and a language server and all those sort of things you probably expect
And also it can pass a JavaScript, which is probably less exciting to this room than most
But maybe you don't have to write JavaScript if you do in your front-end, so maybe that's a cool thing
So first up, the past, what did I mean? Yes good, ok, the past, the past, how did we get here?
So this is a history of Gleam according to GitHub, and in the very beginning there was a little tiny little blip of activity and then nothing
For absolutely ages, so what was that? What was the very first Gleam?
It was this, this hideous thing, this is the very first Gleam syntax
People keep saying that the first Gleam syntax was like a Haskell rip-off, it was not, it was this
You see it's sort of C-style, it's got braces, but it has the Erlang thing of multiple function clauses, so your top level flow control is done that way
And it looks like nothing and nobody's familiar with it and nobody really likes it
And it has this perhaps cool idea of having the tests for functions actually be part of the function
So maybe you could show that in documentation, and I thought this was great, this is the thing that the language is going to be all about
But it looks kind of rubbish to me now, because you can't do any test setup, the only thing you can really do is give an input and an output
Well maybe that's good if you're reversing a list, but other than that what can you really do with it?
What else can it do? Nothing, it didn't have a type system, it didn't really have a design, I wasn't working in any direction
You could return strings and maybe call a function, but that's kind of about it
And it was just a really bad layer on top of Erlang, which asked the question, why? Why did this exist?
Well it's kind of like today, I wanted to do a conference talk
So there I am, looking at younger, Elixir London 2017
And I did a talk on how to write a compiler, how to write a compiler that targeted the Beam virtual machine
And it went really well, people liked the talk, I got to hang out with loads of my peers and then I took that project and threw it away
And I didn't think about it ever again, sort of
Because during this empty period where no work was being done really, I was doing my job, doing open source stuff
And I kept thinking, I kept thinking back to that project and wondering, is there actually a point in making another Beam language?
And this was spurred on further because I was writing all these really wonderful languages
And every time I was writing one of them, I was thinking, oh I really wish I was using one of the other ones
Every time I'm writing Elms, it's really difficult to do this IO thing in Elm
I wish I was, oh there's no concurrency, I wish I was using Elixir, or I was writing JavaScript
I really wish I had Rusts tooling
And I sort of figured, maybe it's possible to take all the things I like from all of these languages and merge them into one
Because I've sort of accepted the language that I wanted to be writing didn't exist, I felt like I tried them all at this point
And so can I make that thing that brings it all together?
And so after about a year and a half, the start-up I was working for was bought and trashed
And suddenly I had a lot of free time on my hands
And so I thought, this is the perfect time to resurrect this project
So I remade the whole thing and this is the syntax people keep telling me is the very first Gloom syntax, but it's not
It looks a little bit more like OCaml with bits of Elixir mixed in I think
And this is in February 2018, okay, so maybe like a year and a half after that previous one
And so I kept working on it an awful lot and then fast forward a year and a bit later to April 2019
We've sadly scrapped all of the nice ML syntax and we've got a much more sort of JavaScript syntax
And this is version 0.1 which I'm really excited about because it did something
You could use it to write some small program whatsoever, which is really cool
And it started to look a lot more like Moddingling
Fast forward another half year
We basically got the syntax as it is today, we did a little bit more, but that's kind of it
You notice the differences here are, we've got one of those little pipes
And if you look between the IO and the print line, we've got rid of that colon
So that's the last of the little Erlang things, sorry Erlang fans
What else happened? We used our first class modules as a feature that people love
People absolutely love first class modules, that's something that you find in OCaml
And really we do it a lot in Elixir and Erlang as well
Because if you think about when we pass around an atom that is a reference to the module
Well that's a first class module, we're passing it around, we don't have module functors
But we do use them an awful lot in our APIs
Good, I am actually on the right side
And we also have row type records, which is a really cool way of
A really cool type system feature that enables you to do these really interesting sorts of polymorphism
With objects and variants that sort of looks like interfaces in an OO land
But doesn't have that same sort of subtype thing, so these are two fantastically cool features
And we also had a more complicated way of declaring types and data structures
That was much more akin to what you find in Haskell
So we got rid of all these really cool things and replaced them with a string concatenation operator
The ability to use callbacks in a slightly nicer way and the ability to give names to arguments
So we've swapped really sexy awesome functional programming stuff for things that are actually quite useful
But not very exciting
And this has kind of been the whole journey of Glim, this has been
It's very easy when making something to get excited and distracted by all these things
And it could be, we could do this, we could do that
But what is actually the most useful thing?
And it turns out just removing things and honing in on that call, that most useful, that most productive thing
Is the most, hopefully, is the best thing to do
And I think we've got a really nice place because of that
One thing that we have added that is quite big actually is that JavaScript compilation
So that wasn't in there originally, that sort of exploded after
Which does make the ecosystem more complicated, but the language not so much
We also got a build tool, as I mentioned earlier
The idea is to have a really good batteries included one
Originally we were using Rebar 3, which is the Erlang build tool
And it's really good and it worked quite well for us
But you could tell that we were using a tool that wasn't made for us
The user experience wasn't as good as I wanted it to be
And I didn't just want to match Erlang's developer experience
Or even Elixir's developer experience
I wanted to even best it in some fashions
And I've been writing a lot of Rust and Go
And they've got some really amazing tool
And I thought, wow, let's take all this goodness that you find in these other ecosystems
And let's pull them into the Beam ecosystem, make it grow even better
We've integrated with the Hex package management
We're all beamers together, it doesn't really matter what language you're writing
We want to be able to all share the same code
And all depend upon each other's projects and share and give back
So we've integrated with Hex
So rather than just having a few hundred packages written in Gleam
We've also got the 20,000 packages that are written in Elixir and Erlang as well
And then we've got a code formatter and a language server
And lots of goodies like that
So I said there's 20,000, a bit more than that packages on Hex
On the package manager
And about 200, a bit more than 200 of them are Gleam
That makes it extremely difficult to find anything written in Gleam
If you want to make a Gleam project
So after a while we made the Gleam package index
And what that is, that's a little window
Just a little view that looks into Hex
And allows you to see just the ones that are Gleam
So if you want to find a library for HTML in this case
You can type in HTML
I didn't, I didn't, you're making, we'll talk about that later
Anyway, and it will give you elicit packages that have the word HTML
In the description or the name
That somebody's library does not have HTML in the name or the description
And then if you find something suitable you can use that in your project
And if you don't then you can then make a decision about
Whether you want to perhaps make something new
Or if you want to pull something in from the wider ecosystem
Internet points, everybody loves internet points
So I know that Stiles on GitHub mean absolutely nothing
But it's been really uplifting and really wonderful
And I feel like a really good sign that loads of people have
Have taken that two seconds to say, yeah this seems right
This is kind of cool
I've been doing this for an awful long time
And I think I probably would have stopped by now
If it wasn't for loads of lovely people
Sharing their support in some small way
Whether it be a Stiles on GitHub or a kind message on Discord
Or absolutely loads of you turning up into this room today
And so it's been absolutely lovely to see that line go up and up and up
And I find it wild, I've plotted it here against two quite similar languages
Microsoft's F-Sharp and O'Cammill
And at some point in the last year or two
We've ever taken both of them in terms of number of stars
Which is absolutely incredible
I'm really excited about ML types
And also people really love the Beam I think
So this is a really good sign for the future of the Beam
What else have we got?
Has anyone heard of Exism? Anyone a fan?
Fantastic, for those who haven't, it's your lucky day
This is a really wonderful website and project
Where you can go to learn new programming languages
And they've got tens and tens and tens of different languages on there
And for a few years we've had a Gleam track
And they give you an exercise, some instructions
Maybe some hints, and then they give you a series of tests
And you can solve it there in your browser
Or you can use the command line and download it and use your favourite editor
And then when you're happy with your solution
You can submit it off and they do a bunch of automatic grading
So they've gone some tests and they might do a bit of static analysis
Like oh you've done this, maybe you didn't want to do that
And then if you're feeling super brave, which is where the real value comes from
You can submit it to get some mentoring from an experienced programmer
There's loads of lovely people who are just sitting there
Helping strangers improve their Erlang or Java or Gleam or whatever
There's a really wonderful project
And last year, with some help from the wonderful Erlang Ecosystem Foundation
Who sponsored this work
We went from not just having a set of challenges
That you can use to practice your Gleam, but an entire course
So you can start by not really knowing any Gleam
And by going through this whole thing
You can be taught individually all the different concepts
And so they give you a concept
Then they give you a little challenge that's focused on just that concept
And then they will unlock all of the exercises that they think you should be able to do now
Using those skills
So it's a really fantastic resource and it's absolutely amazing that it's free
So do check it out
And it's been really well
People have really taken to it this course
So you can see in the middle
Can you see where we launched the new syllabus?
Suddenly the uptake went absolutely skyward, which is fantastic
And this is not the number of people on the course
There are about a thousand, just under a thousand
This is how many solutions people are submitting
So this is actually the activity
It's absolutely wonderful
30,000 submissions
Which is a lot of learning, a lot of wasted time
Who knows?
So Exism is really cool
And I really like that idea of being taught
The individual concepts in a way that enables you to get somewhere
And become productive
And off the back of that
And also inspired by the wonderful tutorial that Go has
So we decided to take that idea of teaching the
Breaking the language into concepts
And teaching them in an incremental fashion
Where each concept builds upon the last one
And distilled it, minus all the exercises
Into a sort of whistle-stopped tour of Gleam
So if you go to the Gleam website today
And at the very top there's that hero image
That's got the tagline saying Gleam is great tour
I don't think it says exactly that, but you get the idea
And there's a big button that says
Get started or try it or something like that
And if you do that it will point you straight
It will point you straight onto that first lesson
And you can go from
This looks kind of interesting
Maybe I'll try it to
Oh wow, I'm writing and learning Gleam
All in your browser without having to
Work at how to install Erlang
And realizing that App has an Alte Deck package
So you can't actually install it properly
And oh how do I install Rebar
And how do I do these things
No, you just go straight in and you can start learning
So hopefully people from other ecosystems
Or people who are writing election Erlang
Can turn up and go
Oh I want to give this Gleam thing a try
And then very quickly
Get whisked into being a Gleam
They can be hooked
They can start working on the beam
And this comes because
A, the compiler is written in Rust
So if you have Rust you can compile to WebAssembly
WebAssembly is a very cool project
And we can also compile to JavaScript
So if you have those two things together
You can run the compiler inside the browser
And you can also execute the code inside the browser
So we don't have to run any servers
So even I can afford this
And we don't have to worry about any security stuff
Everything is just on the person's computer
And it also means it's super fast
You can get your feedback immediately
So Gleam present, I'm going a bit slow
I'm going to speed up a bit
Where are we now?
I want to look at some projects in the community
That are really cool
My original version of this
The talk ended up being about an hour and a half long
So I've had to go loads out
So if you're not mentioned, very sorry
First thing I want to say is that
The Gleam Discord is wonderful
I'm super lucky to have loads of lovely people
Hang out there
I can see some of them here today
And there's just people helping each other
And sharing cool projects
And talking about the news
Or talking about coffee or keyboards
Or anything really
It's a really lovely place to
Either get help or to talk to people
So do join
The community is absolutely wonderful
And delightful
And I'm super lucky to have
Working with them be my job these days
So thank you so much everyone
But now on to the things they've made
The first thing I want to talk and boast about
Is MIST
And MIST is a pure Gleam
HB1.1 server
That sports HBHBS
It has web sockets
I believe
Server-centered events are coming in the next version
And they're working on HB2
So the cool thing about this
Is that it doesn't wrap an Erlang web server
It is pure Gleam
And it doesn't even use Erlang's OTP
It uses Gleam's OTP
It's an entirely new implementation
And what's really cool
Is that it's not just proving that you can use Gleam
To make sophisticated things
You know, implementing a fast HBHBS server
Is quite challenging
But you can also get really good performance
Out of the ever end
So here we've got a bunch of different web servers
Graphed
The ones at the top are MIST and Bandit
Bandit being Elixir's new one
Bandit has had a new version
Since this benchmark was done
So I think it's actually slightly faster now
But they're about the same
You'll notice we're even beating Go
And everyone talks about how Go is super fast
But no, we in the Erlang world can do better
And we're obviously beating JavaScript
But the thing I think is really cool
Is that we are really beating Cowboy
We are really building the one
That we as the community have said
This is the best fastest web server
It shows that we have further that we can do
And it shows that Gleam can be just as performance
As Erlang
So this really proves the language I think
So I mentioned OTP
Gleam has gone a different way for OTP
Then shared out to Fred and his squid there
Gleam has gone a different way with OTP
With most of the other languages
So Elixir and PureRail and other languages
If they want to use OTP
They put a very thin layer on top of Erlang OTP
Well, Gleam doesn't do that
Instead, Gleam takes the core concurrency primitives
That you get from the Erlang runtime system
And has made type safe versions of all of those
And it's the same things like link, sport, monitor
Send, receive
And then it looks at the protocols that are implemented
OTP says you've got to implement certain messages
Like system messages
And there's certain ways of sending
Of doing synchronous requests and all that sort of stuff
And we've implemented those same things
From the ground up in a type safe way
And what's really cool is that we've discovered it's possible
For a long time people have said
You can't have typed OTP
Well, if you get the same
If you get that same core primitives that you get inside Erlang
You can build the same thing from the ground up
So that's been really cool
And the fact that it's been used to make miss
Shows that it can work
And it could be practical and useful in performance
So it's all very good having a web server
But you kind of need a...
Probably need a web framework
Unless you want to spend all your time
Writing a parser for multi-part form bodies
So we have Wisp
Wisp is a really lovely little framework
I can call it lovely because I made it
So if you want to do a web thing
That's a good place to start
Databases are pretty handy as well
We've got bindings for these sort
And probably some others that I haven't found
The first two, Postgres and SQLite
They wrap Erlang projects
All the SQLite one can even work on JavaScript
If you're using Deno
But the bottom two, they're really cool
Because they're, again, written in pure Glean
Using Glean OTP
Now, this is a really cool one
This isn't quite so beamy
But so Glean can compile to JavaScript
Okay, so how do I do a front-end in Glean?
I don't want to be writing all this JavaScript
For my Beam application
If I can avoid it
So Lustre is this really lovely library
That's sort of quite similar to Elm
Or perhaps some React
State management systems
That gives you a way to make a declarative DOM
And then all you need to do is talk about
What messages you're going to emit
And then how you update the state
Every time one of those messages come in
And as an Erlanger, I look at this
And I see a GenServer
I think that the Elm architecture
Is basically exactly the same as an Erlang GenServer
Instead of calling it call, we're calling it
Handlework, we're calling it updates
And then we've got this HTML thing on the side
Which I don't, who knows
But what about live view?
People like live view, right?
That's the hotness at the moment
So live view, in case you don't know
Which I find that you almost certainly
Do know in this room
That's when you have that same sort of idea
You get a declarative DOM that is on your front end
But all your state updating
Where you hold everything is on your back end
And then they talk to each other over WebSockets
And this results in a really lovely develop experience
And you can do all sort of things that you can't
Practically do if all the state is on the front end
Well, us too can do that as well
That last component I showed you
There's nothing that says that has to run on the front end
It could also run on the back end
Just rendering it to HTML
Or you could put it on both
So you could just by saying
Hey, start an actor with this
And then here's WebSockets
You can have live view with Luster
And what's really cool is that you can now pick
Which parts of your application is going to use
Which architecture?
You know, there's a criticism of live view
That it means that certain actions
That should be really snappy are quite slow
And if you lose network connectivity
Your whole application stops working
Well, then maybe put those bits
About making it be resilient to network failures
Put those on the clients
You can pick exactly what you want
So we've got loads of servers and clients
And API clients and middleware
That are all part of this wider HDP ecosystem
And one of the things that's really cool about this
Is that there is a Gleam core library
Called Gleam HDP that defines a few types for
Requests and responses and headers and all these things
And so all of these libraries
Even though they've been made independently
By different people, they can all work together
They all share the same primitives
And you can say, well I want that API client
With that HDP client on the front end
And that HDP client on the back end
And I'm going to handle it with that server in my tests
Fantastic, and it all just nits together
Enough about Web
There's lots of other cool places we can run code
One of them, we probably will do an awful lot
Is on the command line
And there's this really lovely project called T-Shop
Where you can
It's a similar sort of Elm updated type thing
But rather than being events coming from a DOM
It's events coming from a terminal
So you can make these really lovely interactive
Tuis in Gleam
Sadly at the moment you can't run this code on the Beam
Because there's a few
There's a few quirks of how
The Beam handles standard input
But hopefully we can make a proposal to
The OTP team and they can expose
A couple of functions that you can't get to
And then we can have exactly the same thing
In Elixir and Erlang and all sorts of other languages as well
And because I've showed lots of libraries
Let's look at an application
I think this is really cool
This is, I'm going to butcher the name
Electrophonie, maybe
Which is a music streaming app
Similar to Spotify or such
And it is written in Gleam
Part of JavaScript using Luster
And then because we've got this really excellent FFI
So we can call into
So we can call into other languages
And we can use all these web APIs
And do things like use the media keys
Be on the lock screen of a phone
Be in that little bit of the top of your computer
Where the music thing is
I don't know what it's called
And, yeah, the ecosystem is really growing
I think there's a name for that kind of curve
I'm not sure what it is
But we are now 1.2% of hex
Which is a tiny number, but bear in mind
We're not at version one yet
And Elixir's been at version one for 10 years
Something like that
I think that's really impressive
And I really hope that that is going to keep going
So, where are we going?
What comes next?
So, Gleam isn't done
A lot of things are very mature, but there are still things to work on
And the thing I really want to focus on for the next year is the language server
So, what is a language server?
Just to make sure everybody's on the same page
So, traditionally, if you are making a text editor, an IDE
And you want to support a language or a plugin
So that they can support a language
You need to then work at how to learn all those things about the code layer
Oh, how do I know if there's an error?
How do I know what I can auto-complete with?
How do I know what snippets would expand?
How do I know what refactoring is I can do?
You'd have to individually implement all those things
But some clever clogs, I think at Microsoft, came up with this idea of
We're going to have a language server, we're going to define a protocol
That all the editors can speak and all these backends can speak
And all you need to do is implement the protocol
And then suddenly we can have one brain of an editor
And that can talk to Elix and Vim and Emacs and VS Code and Zed
And all these other cool ones
And so we've got one of those
Built into the binary that you get when you download Glim
Excuse me
And it works, but it doesn't work as well as I wanted to
It's definitely the least mature part of the whole GLEE ecosystem
And a big part of that is my fault
I've been developing it entirely on Visual Studio Code
And it means the protocol is a little ambiguous in places
In a way that I find quite irritating but apparently is fine
So all of the editors do slightly different things when you give it certain data
So we need to spend more time working on the other editors
And making sure that it's rock solid and works exactly the same
And all the other ones
And I switched a knee over them now so it's not going to be a problem anymore
So first step, we're going to get it all working super reliably for everybody
And then we're going to flesh it out to have everything
We want to have the same experience that you're going to get with Rust Analyzer
Or maybe even try and get close to what a JetBrains IDE might give you
We want it to be a really excellent experience of all these different things
Find references, renaming things, all sorts of refactorings
And also code generators, I think are really cool
There's loads of bits of trivial code that we bash out every single day about thinking about
Well, if it's that easy, just press a button and have the tooling spit out for you
And then you can choose to edit it in whatever way you want
So breaking changes
Over the last year we've had an awful lot of breaking changes
Because there was a design and then suddenly a bunch of ULOT turned up and now we had users
And then we realised that, oh, actually that original thing that I made up five years ago
While I was sitting in my room wasn't the best idea
There are problems, so we've made a load of breaking changes in order to refine them
What breaking changes are coming next?
Hopefully nothing, I think we're there
I think we basically have the language to work exactly as it should
Which is wonderful
And that kind of begs the question
Does that mean we can work towards a version one?
Yeah, we're working towards a version one
So what does that mean?
When we get there, what's going to be the points of version one?
And I think there are two pillars to this
The first one is productivity for people who are using Gleam
So that's going to be no breaking changes
You can't build on top of foundation that's constantly changing on you
We won't have no language bloat
I'd be really proud of how we've really honed in on what makes Gleam good
And by having a very small, concise, consistent surface area
It makes it easy to work with
And I want to keep that property
I think it's very tempting for languages to hit version one and then go
Oh, maybe we need this feature
Or maybe we need typeplosses, maybe we need these things
No, we're going to keep it super focused
And it's going to say exactly that same language that you really love
Or don't, you know, whatever it is, it's not going to change
And we're going to keep working on improving the developer experience
So more tooling, keep improving that
If there's something that's annoying to do that everyone has to do
Let's make a library for that
You know, just keep solving those problems
And document everything
You know, we want to have cookbooks and guides and tutorials and examples
And just make it really easy for you to go
How do I do this in Gleam?
Oh, look, it says here, here's how I do it
Now I can get on
And the next thing is sustainability
I am not Microsoft
I do not have 50 developers working on this
I have me
And some lovely people who are very kind enough to agree to join the core team
Which means they're just called the core team and they do free work for me
It's fantastic
Thank you very much
So we want to make sure that every bit of work that we're doing is as impactful as possible
You know, it needs to be...
Everything needs to be meaningful
And if we can't justify it as being impactful for a large amount of people
We just shouldn't do it
We've got to make sure everything is efficient as possible
Not just in the code, but in our practices as well
We're going to document everything internal
We're doing really well with this
But I think we can do even better
I would like people to go, oh, there's something...
There's a quirk with the build tool
I think this is a bug
Okay, I'm going to look inside and see what it is
And then just see loads of comments, loads of docs
And then they can hopefully work out, oh, that's doing this, that's doing that
I can make a contribution to this
And the last two things are about funding the project
So I work on this full-time
And I work on this full-time thanks to GitHub sponsors primarily
I really want to...
So here, charted in the pink
That's how much income we have for the project
I'm super happy that it stayed super stable
And up there in blue, that is the median
For a lead developer in London, which is the city I live
I really want to get that up to the blue line
For obvious reasons
But I'd like to do further than that
I'd really like if we could afford to have like one...
Two pizza team, is that too old?
I want to have that core development team
To be able to afford to work on this thing
That I think is useful and important and productive
And be able to work full-time
And be rewarded appropriately
It shouldn't be charity, I think, for these people
They're doing this really useful work for the ecosystem
And then if that stable foundation is there
That means other people feel more confident
Building their businesses and their projects and so on top of that
So if you want to help out, do join the...
Do start sponsoring or get your employer to
So about half of that previous income comes from one place
And that's from Fly, that's our big corporate sponsor
They're the really wonderful deployment platform
And the other half comes from people donating like five, ten, twenty dollars
And they're both wonderful
But it means there's quite a lot of...
There's quite a lot of weights on one organisation
I'd really like to spread that out
So if we could have a bunch of smaller corporate sponsors
I think that would be much better for the long-term health of the project
And if you've got ideas for other things we can do
So I know Elixir has a sort of quasi-support thing
That you can sign up for
If you've got some other ideas, get in touch with me
I'd love to hear what your thoughts are
So when is Glean version one?
How much more have you got to do?
Well the answer is now
We're there, like we're completely ready
And depending on how much you lot distract me
For the next few days
I hope to get a release candidate out today, tomorrow
At some point in the immediate future
So this is a really exciting time
Good, so questions? Any questions?
Thank you very much for creating Glean
Could you elaborate more on what happens when we keep target minus JS?
When we're targeting to JavaScript
Repeat the question
Yes, so the question is
Can I explain what happens when we target compile to JavaScript?
Okay, so we compile to...
What can I say about it?
So we compile to JavaScript source codes
We don't add a runtime
We keep very close to JavaScript
So like your scripts end up being very small
Suitable for use at a browser
But because we don't have a runtime
It means we don't have an implementation
Of say like the Erlang concurrency inside JavaScript
So you'll be using a different concurrency pattern
If you're using Glean JavaScript
If you're using Glean Erlang
And that means there's certain incompatibilities
Between the Erlang and JavaScript target
You can't write a library that easily abstracts over both
If it does file IO for it
Well, that's a bad example
If it does like HTTP requests, for example
But it means, you know, that's the trade-off
But then it means you can work very well with the Erlang...
Sorry, with the JavaScript world
We can run Glean in browser through...
So again, sorry?
Can we run Glean in browser through WebAssembly?
Can you run Glean in browser through WebAssembly?
No, but that's something we want to explore in future
Not because we particularly want to do WebAssembly
Sorry, not because we want to do it in the browser
Because we could already do that with JavaScript
But there's loads of other places you can use WebAssembly
And I wanted to talk about this, but I didn't have enough time
I think it would be really exciting
If we had a good way of executing Glean inside the compiler
Because there's loads of optimizations we can do
We could start looking at certain kinds of like code generation
Meta programming stuff that you can do in Alexa, for example
You can't do in Glean
But we can't do that because we don't have a copy of the beam
This massive thing inside the Glean compiler
So if we had like a little VM, maybe we could do that
And WebAssembly is a really good little VM for this whole thing
Thank you
Any other questions?
Yeah, I do have a question that you might use to point to
I think it's a great question
I think it was in the last year during the episode of code
And it's a really great project
But as you know, I think one of the main parts that draw me to the language
Was the vibrant, pink color
Is there a story behind it?
Is it the color?
Why is Glean pink? Great question
Great question
This was, what is this handle, K-Tec I think is
And he just threw this idea it should be pink
And I was like, oh really, why? That's really odd
And I liked it because it's different
You know, you see this pink and you don't go
You know, if you see a blue you're like, is that TypeScript?
Is it Python? You know, it's visually very different
And the other thing is, I think it's quite friendly
And hopefully it's welcoming to different people
I hope that if someone sees a bright pink thing they go
Oh that's cool, you know, maybe there's not going to be
And it also says like, you know, be nice to each other
No Nazis on the website, you know
I'm hoping people will see that and get an idea of what we're about
We're about being supportive and friendly
And looking after each other
So it's, look different and hopefully say something
About the kind of vibe we want inside the community
Well you work, thank you
I mean, it's probably the best thing about Glean I think
Currently you target both Glean and then Javister
What do you plan to do to introduce other targets like WebAssembly?
So I don't like to look at targets as well as, you know
I think there's a problem and when people make in languages
It's very easy for them to do things that are cool
For a language maker to do
So for example, it would be cool if I could target WebAssembly
It would be cool if I had type classes
I don't want to do it for those reasons
I want to drive changes by them being impactful to the community
And as I said with WebAssembly
That can be a nice VM that you can embed in the compiler
To enable compile time code execution
You could use that to do like Glean script
So you could just have just the binary on your server
And you can use that to execute tiny little scripts
When you don't want to have like a whole virtual machine installed
On that computer for example
All sorts of little things like that
And so I think there is a good
Argument in favour of having WebAssembly
And so it's something and I would quite enjoy it
So I'd like to explore it in future
But it's not as high priority as like getting the language server
Working really well, getting the documentation fantastic
Making sure we've got like a really lovely
Like Elixir Phoenix like experience
To do web development in Glean
So I would like it
Maybe one day, don't hold your breath
When you do message passing in Glean
Does the messages support function cloners as well
And if so, how does your type system handle it?
As in you're asking
When you're doing type OTP
Can you send a function to another process?
Yeah, function cloners
Yes, okay, so
So, it's quite tricky
You can't, how much context do I give this
Because I've thought about this for years
And it's quite hard
Yes, we can, you can pass any data to another function
The key difference between message passing
In typed Glean OTP and Erlang OTP
Is that you need to have more than just a PID
To send a message or something
If you've used languages that have channels
So for example, Go or Rust
You don't just have like the handle for the thread
And pass a message to it
You've got to have a channel
And you send a message via the channel
So it's the same idea
So we have this idea of a subject
We don't call it a channel
Because it would be confusing
Because it still goes to a process inbox
You can't give a channel to a different process
And they start pulling from it
And every channel is the thing that's typed
Not the PID
It looks like you should be able to do the PID
But then you suddenly realize
If you build from the ground up
You can't implement synchronous
You can't implement call, synchronous message passing
If you have typed PIDs
Because the type of the return
Doesn't match the type of the PID
So you need to have something more flexible
So we have this thing
And if you look under the hood in Erlang OTP
They have the same abstraction
We've got 14 seconds left
And it's used to implement GenServit.co
So they have this from thing
So it's the same as the from field in GenServit.co
That's the thing that you send messages around with
I have three seconds left
Thank you very much everybody
Thank you very much
