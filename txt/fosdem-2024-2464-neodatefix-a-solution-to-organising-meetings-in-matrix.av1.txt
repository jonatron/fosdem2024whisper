Now, we will have Milton and then Norgin and then Amat and Mikhail.
They will tell us about the Neo-Date fix and a good solution to organize meetings.
Thank you very much.
The stage is yours.
Thank you.
I'm happy to see everyone of you today here.
As Jan presented, I'm Milton and we're going to talk about Neo-Date fix or previously known
as Matrix meetings.
It was the starting name of the project, but anyway, we'll start by talking a bit about
who we are.
Amat, yes?
Closer talking.
So we are four developers from Norddeck.
We have been doing software development specifically developing web applications on top of Matrix.
We are doing this in the context of the OpenDesk Sovereign Workplace project for the German
public sector.
We have built this suite of web applications that are embedded within Element.
I'll explain a bit about that more later.
But yeah, we have Neo-Date fix, which we'll present here today.
We have Neo-Board, which is a real-time collaborative whiteboard, which is actually what you're seeing
in this presentation.
So we built these slides and they're presenting with the Neo-Board.
We also have voting polls, which is Neo-Choice application that it's not spec-based, but
I won't get into that.
And also, if you were at the Fringe event last Friday, we were using the BarCamp application
to manage the schedule and the speakers and the whole tracks there.
So yeah, what is Neo-Date fix?
Neo-Date fix is a web application that allows you to create meetings and video conferencing
meetings, especially within a Matrix client using the widget API.
So currently, the only client that implements the widget API is Element Web.
So that's what we have to work with.
It is a good thing.
And yeah, what can we do with the application?
We can create these meetings as meeting rooms, as I've said.
The meeting rooms are created with the default widget layout.
So we have the video conference widget expanded and front and center with other widgets that
you can choose.
Typically, it could be whiteboard or some other widget that you want to previously set
up.
So you can pre-configure this for usability and quick action when you get into the meeting.
We can schedule recurring and non-recurring meetings and see them in this calendar view
that we'll show.
It also supports creating breakout sessions.
So if you have larger meetings and want to create sub-meetings when split people between
those meetings, you can do that.
We also support users that don't have an account on the home server.
So we'll bring them in, creating them as temporary guest users, and they'll join the meeting.
And we can also integrate with third-party clients.
So specifically in the open desk project, there's open exchanges.
There's also a calendaring solution.
And when you create a video conference call there, it will create a meeting room in element
with everything set up for that call.
And finally, all of this is fully accessible and with support from multi-language.
Okay.
So going to the widget part, if you're familiar with widgets, you sort of have an idea.
If not, it's a way to embed web applications inside element.
It gives you access to the room events and room state events, and not much more, but
that's the gist of it.
And the way we have built our applications is we built this common layer, which we call
the widget toolkit, that gives you, like these, for example, a React component, which will
inject the widget API client into your React, and you can start using it without having
to do that integration by yourself.
It comes with material UI components.
So you can also have this consistent look and feel.
You can change the theming.
And it also comes with some mocking components for easier testing.
And finally, it comes with a base Docker image that you can use to quickly deploy into your
infrastructure, your widget, based on that.
And finally, it's also not only a widget, but it's also a bot, because the widget API
only gives you access to the room data.
We need to create the room meetings.
We need to set up all of these accessory workflows that we then use the bot to perform
these.
It's built using nodes in TypeScript and in the bot SDK and in the SGS package for the
API that we exposed.
And yeah, this is a broader overview.
Now Mikhail will talk a bit more about the internals, how we are doing this.
Hello, hello.
Thanks, Mutham.
I'm Mikhail.
I would like to continue with a high-level architecture of how it works.
So we have this Neo-DateFix widget that is embedded in the Element Web Client.
It just uses a widget API with a toolkit to send and observe state events and call some
other actions that the API allows.
It all goes past through the Element Client to the Home Server.
And some of these goes to Neo-DateFix bot.
So in Neo-DateFix bot, it looks for some particular message events of some particular types.
And when they are received, it applies certain actions to the rooms.
So besides having metrics API, Neo-DateFix bot also has HTTP API that is used by, again,
Neo-DateFix widget to provide widgets lists and additional configurations that widget
may need.
And additionally, it provides the HTTP API to manage the meetings by external clients,
as I've already said.
Addiction to these components, we also developed several Element Modules that simplifies a
bit this setup.
And also add some additional optional features, like, and this one, like Lifecycle Model,
Guest Model, but these are optional.
And then, we have a new one.
It's a very simple way.
So if user wants to start with Neo-DateFix widget, it has to create a room.
And then he needs to invite bot to this room, bot will auto-cept the invite.
And then user needs to grant moderation rights to this bot.
As soon as it's done, bot adds Neo-DateFix widget to the room.
So he can see calendar and create first meeting.
So he could create single meeting or recurrent meetings.
It all end up with one room for one meeting.
But the meeting room is a special room.
It has type Nordic meetings meeting in M-Rooms create event.
It also connects to the parent room, this calendar room, with M-Space child and M-Space parent events.
There is one too many relationship with the meeting rooms.
The meeting room has widgets and of course it has some other state events that are related to the meeting.
Within the meeting room, user could create a breakout session room.
It also would be a separate room, but with its own breakout session type.
And it also has a connection to the meeting room where it was created.
So we use message events and state events obviously from the metrics.
And all the message events there are prefix weeks, not Nordic meetings prefix.
So they are the events that are sent by the widget.
So just to manage the meetings, to create, change permissions, pages, participants,
Tomstone the meeting or send some messages.
The state events are used to store the state of the meeting.
Mostly there are metrics ones, but in addition there is a
net Nordic meetings metadata. It contains calendar information.
So this is an example of this calendar information from the meeting metadata event.
So for the single meeting, it is a list of just one entry that has
certain end fields with a date time stamp together with a time zone.
And so it's quite simple.
And for occurring, in the case like it could be excluded dates and overrides,
it has besides frequency rules, it's frequency daily interval one.
It has exclude dates, to exclude some particular dates from this recurrence.
And as well to, it could have several overrides to change some
particular occurrences of this recurrent meeting.
Yeah, this is all regarding the slides and I would like to hand over to
Nurjin to show some of the features.
Thank you. Thank you, Mikhail. Hey, Bill. It's Nurjin.
So yeah, hopefully after the all talk you'd be teased enough to see some actions, some demo.
So here, me and Ahmed will try to demo quick the basic features.
So yeah, first we need to create a new room.
We call it a calendar room.
And yeah, so we need the bot to be added to the room and give him the correct exact right as a moderator above.
So the bot would be able to configure the room for us and add the widget.
Yeah, here we can see the bot added the widget into the room, pinned it in the middle.
Yeah, so we can schedule meetings while, yeah, here you can see there are the information that you can create for the meetings.
You can add participants.
You can also allow or not allow messaging in these meeting rooms.
And also we have a set of configured widgets by the bot.
You can add, remove whatever you want.
We will create an example of a single meeting and a recurring meeting.
So it's basically the same.
We can add the recurring meeting.
We say if it's an open-end meeting or if it's end after specific time or yeah, after specific recurrences, for example.
Yeah, here we can see we have first the list view, which are the meetings are shown as cards.
Each card contains the information with extra buttons for the participants and also the share meeting.
We can share it with the meeting with a link or by email or we can download it and as an ICS file and important into other libraries.
We are also able to edit, delete the meeting and of course go directly to the meeting room.
Yeah, other than the list view, we have also this calendaring view.
We have the day view, the work week and week and the monthly view.
And of course in each of these views, if we click on the calendar entry, we would be able to edit the meeting.
So for example, here we can try to edit the whole series by switching or just edit like the whole series or one recurrence.
We can edit here one instance, for example, save.
And if we go back to the calendar, so the changes are reflected into the calendar, this deviates from the others regarding timing.
So we can also join the meeting.
We can see that the bot already configured the room with the widgets that we chose with a specific layout configurations that we set.
Here we set that new board and the JITC are now configured.
We also see that the bot sends notifications to the room with every change that we make.
And also besides those, we have the near-date fix details.
It's basically just another detailed information about this meeting room.
Also we can do other actions with it, edit it or delete it.
We can also go back to the parent room of this meeting room.
And as Milton already talked about the breakout sessions here in the meeting rooms, we can create breakout sessions as many as much as we would want or need.
Here we can select, they are divided into groups, named defaultly by group one, group two.
We can distribute the whole users randomly or we can select them manually, whichever we would like.
So, yeah.
Yeah, here we can see the breakout sessions are created.
They are also as cards and extra we can check that we can send a message to all breakout sessions.
As an organizer, you want to notify all breakout sessions, yeah, let's be back to the meeting room or whatever.
So we can send it.
We can go to other user and here we can see that he got all the invitations.
For example, this for the daily, if we view the message maybe, or go to it, yeah.
Yeah, we can, so basically the message of this invitation contains also the recurrence rules, information when it occurs and when and who you are added by.
And yeah, you can see here, for example, in the breakout sessions where Alice sent hello word or hello, the, yeah, the message was sent to the room and also breakout sessions are configured with Jitsi.
Yeah, I guess that's all. Thank you.
I will hand over to Milton.
Thank you for the demo. Hope you guys liked it.
Just to finish our presentation, we have a couple of interesting things that we find that want to share with you.
So the first thing is that as you imagine creating lots of meetings and these temporary users creates, I mean, it's not, it's relatively cheap to have these resources, but we want to keep things clean.
So we have these additional features where you can clean up the temporary users using a signups module and also have this sort of hackish room reaper that will go through the finished meetings in the past.
According to their, there's a field that will tell you tell the bots when they should be deleted and it will clean up after himself, which is a good thing.
And also we have, can you move to the next slide?
And also we have what we believe is a very good end to end test suite because as you may know, besides units and integration testing, end to end tests allow you to script the full interaction from the browser to the element web to the widget and how it then interacts with the bot.
So we have a fully automated way to have the environments being created, tested on, then destroyed.
And this is obviously a preconditioned for us to have releases when these tests pass and they covered most of the features.
So if you want to see a good example of using playwrights and test containers as a way to do end to end testing, please check out the repo.
There are obviously still room for improvement.
We are just finishing and should have soon, should be releasing support for encrypted meeting rooms and encrypted control rooms or the calendar room.
We've had a slight issue here because we are clients, requires us to deliver to this special IBM Z platform.
There weren't any bindings for the crypto rust.
That's the case. So we're, I think we have that in order for soon release.
Also make the bot clean the rooms instead of that hacky script.
Support element call also when it becomes a defect host and they're there.
Also have space scoped calendars.
So in the demo you saw that there's a single calendar room and it will create the meeting rooms in your top level.
So if you could have it create within spaces so the meetings would be within that space and who couldn't maybe manage different teams or different groups with different calendars, that would be a good thing.
And yeah, and finally we can get meetings in publishing them out to another in another calendar in client would be a great thing to wrap up.
Here are some of the resources, the links to our repos.
I mentioned, I think it's an open source Apache to licensed applications.
So be sure to check them out.
Yeah, I think we're ready for questions.
Yes.
There was one question on the internet. Do you have support for entry of the rooms and if not is there plans to do so?
Yes. So as I said a few minutes ago, we currently don't support it, but we are soon releasing that.
So it's a matter of days.
And the question was do we support encrypted rooms? Sorry.
Yes.
Yes, this is the Neil boards. This is maybe can can you show maybe a couple of features.
So this is the this is a widget that allows you to have a real time collaborative whiteboard draw.
It's an initial feature set, but it's if you went or if you participated in the summer, the matrix community summit in Berlin last September, we did a full presentation.
It's online. You can check it out for more details there.
So the question is what is how are we implementing the invitation page when we show them to the invited user with the information about the meeting.
Do you want to?
Yes. So it works like first of all, in invitations, there is a message itself, but it's of course constructed just inside of a member member.
There is invite text, but so it's unfortunate we didn't show it, but it's there isn't there.
But besides that, there is not this metadata event, for instance, it's we configured it separately in synopsis.
Share it in the strip state. So when you go to invitation, it's already shared and you can see it already in calendar.
So if you have calendar as a second user, you would see it there already.
So we just yeah, we added to the strip state.
So it's a bit. Yeah, exactly.
Did I understand correctly that it only supports.
The question is if we only support jitzy meetings and not in app meetings. What do you mean by in app meetings.
I mean, most of the clients have own meeting functionality.
And I just wanted to give the chance to use that.
So if the answer to that is if there is a widget for it, we can support it.
So if there are other alternatives for video conferencing, it's a matter of just developing a widget that supports it and setting up the bot configuration to then include it in the room.
It can be implemented as a separate.
So if not supported as a widget, so in theory, you can develop the widget is a toolkit and edit as another widget to the meeting.
Okay, the question is what is the Docker container part that I mentioned.
So in order to deploy widgets, they are a web application.
So they need to run on a web server.
So we have this Docker file template based on engine X that it's already prepared for you to just auto include in your base Docker image.
For your app.
So you just instead of including Debian or node based image, you include the widget server image in your Docker file and just copy over the build release distribution assets there.
That's the main accelerator for that.
So it's ready to use base image for widgets.
Any further questions.
You can download an ICS file.
The question is, can we can we integrate with Google Calendar and other calendar publishing platforms?
We only support downloading in the ICS file for recurring or single instance meeting.
The inner format that Mikal showed it's restoring an I cal.
I cal format.
So the storage is using that.
But yeah, we don't export any data out currently, but that would be a good thing.
The community is open source.
You can contribute with support for that.
As well.
Yeah.
If you go to maybe can go to the resources page.
You can.
Well, not the widget, but the Neo board.
Yes, we have a live widget demo for having this.
Sure.
The question is, how can you can you include and use this right now in your element web client because it's a widget and the bot you have to host it somewhere.
So you would need to download and deploy it to some server or VM.
It's not included in this time that I don't know.
And it's, yeah.
Thank you.
Thank you very much.
