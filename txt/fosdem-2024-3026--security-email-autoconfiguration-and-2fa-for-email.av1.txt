So, hi. I'm Ben Bocz.
I've been working for 25 years on the Thunderbird project,
pretty exactly by now.
I was a member of the Thunderbird Council,
the Leadership Committee,
but I'm speaking here for
myself and not for the Thunderbird project.
I've been for a long time consultant
and helping many companies use Mozilla products in code and their products.
And most of the point of this talk,
I've been involved in four different OAuth implementations,
specifically for mail clients.
One was for the largest German Internet provider,
two of products of my own company,
and I was a reviewer of the OAuth 2 implementation in Thunderbird.
I've been implementing the IMAP,
POP3 and SMTP authentication logic in Thunderbird,
meaning server capabilities,
authentication methods, password prompt, and so on.
And the account creation dialog,
including the auto-configuration and the protocol on that.
So, about auto-configuration.
So, this talk has two parts.
First, I'm talking about auto-configuration,
and then multi-factor authentication and email.
Auto-configuration. Auto-config is a protocol
which allows the user,
if he sets up an email client,
to only enter the email address and the password,
and completely automatically set up the email account.
He doesn't have to enter anything else,
just email address and password.
And we find out the configuration completely automatically from that.
The user doesn't have to enter any host name,
authentication method, cram five, whatever.
How do we do that?
The email address is ben at example.com.
So, example.com is the email provider.
So, we just take example.com and get the contact from that.
Email is supposed to be federated,
so we ask directly the email provider,
do you have a configuration for us?
So, that's a well-known URL,
auto-config.domain.well-known.something.
And we ask, is there a config there?
And it's simply a static file.
So, you can just create the static file once manually.
You put it on your web server at the specific location,
and all you need is a web server.
You don't need any other server-side software for this.
But of course, not all ISPs in the world
are going to support that.
Google, Microsoft, Yahoo, et cetera,
they don't have this config.
So, as a fallback, we have a database.
This database contains pretty much all ISPs in the world.
I had to go and search the configuration
for every ISP manually in the support documents,
put it in machine readable format,
when possible, test it, and put it in a database.
Other people helped, of course, with that.
So, the result is, in this database,
you find the configuration for almost all ISPs in the world.
If the ISP has more than 0.1% market share,
it's most likely in there.
But, that still doesn't cover corporate domains,
company domains, custom domains.
So, my example.com is not covered by this.
So, what we do is a MX lookup.
So, we make a, what is the MX, for example.com,
and we find, oh, it's MX.dreamhouse.com.
So, we look up the configuration for DreamHouse,
or Office 365, and we got the config this way.
This protocol is an internet draft right now.
The goal is to make this an internet standard.
There is a draft for it.
You find this on this URL here.
And, if you follow, if you, an e-machline,
implements this protocol, and you follow this protocol
as it's written down there, you can set up more than 80%
of the email addresses fully automatically.
So, more than 80% of your users don't have to do anything else
than just use an email address and password.
How does it look like?
This is how it looks like.
And, the first reaction I will get is,
oh, yeah, except, whoa.
Today, I would use JSON, of course,
that was 15 years ago.
Was a good choice at the time.
It still has some advantages.
But, this is roughly how it looks like.
We're going to look at the details.
So, it starts with the email provider.
This is the domain.
Here, it's on Microsoft.com, but normally,
that would be the part after the email address.
And, you can have multiple of those,
depending on how many domains are hosted
by this email provider.
So, if I hear who it's all the country,
you're who.de, you're who.fr, you're who.ite.com, et cetera.
And, the MX servers are also in here.
So, if you make a look up,
we take the domain part of this,
of this, of the MX server,
and we put it in here as well.
And, this is how we can find the configuration.
So, in the database, it's going to map that
in the other way around.
So, there's going to be an entry for this and this,
and we can easily look that up.
And, even on the server, this is a static file
on the server, so it's really fast.
There's also the display name here.
There's a long and short version, you don't see that here.
It's completely optional, but as a client,
you want to use the name of the provider
as a count name, for example, you can use that.
This is how the config looks like.
The incoming server here.
We implement, we specify four different types.
This IMAP, pop three, JMAB,
on special request from Fastmail,
yeah, JMAB, and exchange.
And, you can have multiple,
you can have multiple of these incoming servers.
And, they are ordered by preference.
So, all other things being equal.
The client is supposed to take the first configuration
in the file, but the client has the choice
to use another one.
So, for example, in Thunderbird, if the configuration shows
that there's both an IMAP and a pop three
configuration in there, Thunderbird gives a choice
to the user, what do you want?
IMAP, pop three, there's trade-offs,
and the user can make the choice,
and the client is going to take then, for example,
the first pop three configuration listed in this file.
Funny fact, half of the Thunderbird users
have a pop three account configured.
Of course, there's more IMAP accounts,
but still half have a pop three account.
I was really surprised about that.
It's really popular.
I thought nobody uses that anymore, but it's popular.
There's exchange servers, and of course,
you have the SMTP server as outgoing server as well,
and the structure looks pretty much the same.
You have twice the authentication here.
All of them have to work.
This is not the same as the IMAP capabilities
where the server just lists something
and it might not even work.
These both work.
It's just, does the client support OAuth?
If yes, he's supposed to use this.
If the client doesn't support OAuth,
it can go on to the next one that it does support.
And there's the format of the username in there.
It could be Ben, it could be ben at example.com.
It could be Ben backslash example,
like the Windows domains that is in here.
Oh, and by the way, in the database,
we always prefer as TLS, overstar TLS.
And if there's a plain text configuration
and an SSL configuration,
we don't bother listing the plain text configuration.
And there were situations where Yahoo or others said,
no, we don't want you to list the SSL
only for paid customers.
We said, we don't care.
If there's an SSL configuration,
and it works, we put it in there.
And this is the way Thunderbird protected the users
years before other clients did,
because we knew these configurations
and the ISP didn't advertise it.
You can also capture address book
and calendar sync and file share.
Thunderbird doesn't implement that by this possible.
So you just enter email address and password,
and boom, you have it all set up.
Email address, calendar sync, file share,
contact sync is all in advance.
Ah, so like I said, there's a specification out there.
I would appreciate your support.
It's like verbally your support,
expressing support in the right forums
so that this moves forward to stand,
actually moves forward to the standardization.
And if you're writing an email client,
please support the specification.
It's really helpful.
And of course, if you have an email service,
it's always appreciated if you support that as well.
All right, second topic.
This is a less happy topic,
multi-factor authentication and email.
We all want that.
The ISPs want that.
We want that.
Unfortunately, not that easy.
Right now, the situation is that only if you're Google,
Microsoft, or Yahoo, you can do OAuth.
The rest pretty much can.
There's a few smaller ones,
but if you're not part of the select few,
which is hard-coded in Thunderbird,
or the email client, you can do it
because the client doesn't have any way
to can discover the OAuth server.
So which options do we have?
We can use OAuth as it is specified right now,
or rather not specified right now.
We can, I'm making a proposal for M-Auth,
but I'm dubbing M-Auth or more,
OAuth for mail.
It's OAuth, but we nail it down further.
The things that OAuth doesn't specify,
we mail them down and specify them for mail
so that it works well.
Third option is PASCIs.
Could you please, thank you.
Okay.
Thank you.
So OAuth was originally designed clearly for websites.
Like Zoom wants to authenticate with Google,
and they have a relationship,
and this is what the spec is written in mind.
It clearly shows because if you're trying
to implement for mail clients,
you run into all sorts of problems.
Most of the problems are related to the fact that,
oh, OAuth is not really a specification,
it's more like a framework.
It says if you wanna do that, you would do it this way,
but it's up to you.
The server decides about everything,
it can do something, it might not do it.
There's no way to know whether it's going to do it or not.
That's for its real problems for the implementation,
because as a client, I cannot rely on anything at all.
Everything is optional, I don't know what's going on.
Even for the same server implementation,
it all depends on the configuration,
and that specific AP, EISP, whatever they have put in there,
this is what works and what doesn't,
and I cannot rely on anything in my code.
Problem is that users always blame the client,
no matter what the reason is.
So in my company, we're offering a little email add-on,
and in support we get this all the time.
The user says,
and my email doesn't work anymore,
it worked yesterday, it doesn't work today.
So there was no software update since yesterday and today.
What could it possibly be?
Of course, it has to be that the administrator
changed the authentication server, the page something,
it's something changed at the company, his own company,
and there's no way for us to know,
there's no way we can fix that, there's nothing for us to do.
We cannot even test it because we don't have a login
for that company, there's nothing we can do.
But we can't, the customer doesn't understand that.
He says, hey, but it works in this client,
it works this, I want you to work here, you are broken, bye-bye.
And I lost this customer, I lost,
we lost so many customers because things don't work
at the OAuth level, and there's nothing we can do about it.
One of the big troubles,
one of the big troubles is expiry.
None of this expiry stuff, like OAuth is all about expiry
and refresh, this is pretty much all that OAuth does,
and none of that is specified.
There's a lot how it should work,
how it almost always works, but it's always optional.
So the expiry, I have no idea, is it 12 months,
or is it five minutes?
I have no idea, and it makes a big difference
how I implement my client, but that user has to log in
every 12 months or every five minutes.
I have to structure my code accordingly, my UI accordingly.
But when I write this, I have no idea what's going to happen
because it's all configurable.
Same with the refresh token.
Usually I'm getting a refresh token, but it's optional.
So what I'm proposing with M-Auth,
that we nail this down.
So if you're going to expire that,
please tell us when it expires.
Again, it's in the spec, so that I have a chance
to refresh before it expires.
So please send this expiry time.
Please send the refresh token.
Most servers do that, but it's optional.
We would nail this down saying it has to,
if you use this for mail, if you want to use this for mail,
you have to send a refresh token.
You have to actually refresh the refresh token,
so if the user continuously checks mail,
it is not going to expire.
All these little details are not specified in O-Auth,
and we would need to nail them down for mail
to work properly and reliably.
And on the server side,
this is just a matter of configuration.
Like, we don't need to write any new software,
it's just a question, how does the ISP configure that?
So all we would have to say, like,
if the ISP, if you want to use O-Auth for mail,
you have to configure it in this way for it to work.
And for us, this configuration is a question
of working or not working,
because the users are going to complain
if they have to log in all the time
and not going to use our product.
I'm going to skip over error handling.
There isn't pretty much no error codes,
like all the guys have access denied.
I don't know whether the password failed
or the user canceled.
I don't know how to react to that.
Should I show the prompt again or not?
We need to have some proper error code.
And client registration is my biggest worry.
The O-Auth specification requires
that the client sends a client ID.
And then the specification, it says,
the way the client registration works
is outside the realm of the spec.
It's explicitly not specified.
And even worse, this ITFRC specifically states,
you may have to sign a contract
in order to get a client registration.
You may have to sign a contract.
What does that mean?
Right now, I have to sign a contract with Google
and with Microsoft in order for my email client to work
with O-Auth.
That's the situation right now.
That is a problem even right now
between the big ISPs
because they're not always at peace with each other
and they can block each other this way.
That's the problem right now.
Even worse, for me as a little guy,
I have absolutely zero chance standing up to Google
with this contract.
Like, if I want to offer an email client,
I have to sign this.
I don't have a choice.
So Google can force legal conditions on me,
contracts on me, and put in there whatever they want,
I will have to sign that.
That is a legal nightmare.
A huge liability.
So if this was an IETF spec for mail,
I don't think this is fine between websites.
Like if Zoom wants to authenticate to Google,
they can make contracts.
But for a client's service protocol,
I don't think that would ever pass IETF standards
because it's pretty much by definition not open.
This is actually worse than patents
because of the pattern I might ignore.
A pattern, it might not apply to me.
A pattern might not be valid.
But this is a contract between me and the party
and it's definitely valid.
This is much worse.
So there's one proposal in the room
to use dynamic client registration.
There is a specification which is dynamic client registration.
So the ISP can offer to any client,
any every instance would just connect,
give me a client ID and the ISP would return with a client ID.
Apart from the fact that it makes the whole system useless,
I don't know of any implementation of that.
Like there is a spec for this,
but I've never seen any client implementing that.
I've never seen any server implementing that.
I've never heard of anybody who has ever seen
any implementation ever.
So there is a spec for that,
but we would have to write the server, the software.
We need to write a server software.
It needs to scale for two big ISPs.
We need to write all the client software.
And once we've done that, we've added complexity,
but the whole thing is pretty pointless
because the client registration doesn't actually do anything
security-wise.
I could just open up outload.exe to find the client ID
and secret and theoretically just use that.
So security-wise is snake oil
and it doesn't serve any purpose.
So if I want to know what the client name is
for whatever debugging or help purposes,
I can just look at the user agent
because all this HTTP, I look at the user agent string
and if we put a proper value in there,
I know what the client is,
but I get around all these legal things.
So as far as I end up C,
the only advantage of the client registration
is to force a contract on,
which is exactly what we don't want.
So there's a simple solution to that.
We don't need any new software,
very simple, in this MOR thing,
we just specify the client ID is going to be mail, M-A-I-L.
Problem solved.
Hard-coded string.
And you don't need any new software for that.
The ISP just needs to configure that client ID
in their software.
If they want my clients to connect,
they have to configure this ID, problem solved.
That's what I'm proposing for M-Auth as a solution to this.
There's another big problem with O-Auth.
It inherently depends on a web browser.
So I want to implement an email client.
I already have to deal with HTML email,
but there I don't want JavaScript,
I don't want cookies, I don't want video,
I don't want any of that when I render HTML emails.
When I want to do O-Auth, I have to have all of that.
O-Auth won't work if I don't have JavaScript.
It won't work if I don't have cookies,
and the cookies need to be persistent.
It has to be a full web browser.
So I'm probably going to use WebView or something,
but then it's going to depend on the Android version
that the user has, which WebView version he has.
So that's going to be a support nightmare.
I need a specific API.
Because I need to track when this login sequence
finished, which Ureli is on.
So now he's done now, he's locked in now.
I need a specific API for this embedding web browser.
That's an extra API, which most embedding APIs don't have.
It's an extra complexity.
It's already difficult.
I don't know how many client,
email client implementers are in the room.
I don't know how you feel about putting an email client
on a web browser, mandatory in your email client.
I don't know how you feel about that.
But that's the situation right now.
There's another option.
I can just launch a system browser.
So I'll launch a URL, go to the system browser.
That's actually what Google wants.
Problem there is I interrupted the flow.
That's a problem.
The user left my email program at this point.
He was in the middle of setting up the email address,
and now he's in the browser and he finds the news
and he starts reading the news and cat pictures,
and I lost it.
Maybe he's going to come back.
I don't know that the flow is interrupted.
And in order to know when the user finished,
I need to redirect to HTTP local host.
That's a web server that I have to implement in my email client.
So I have the choice now.
I can either implement a web browser or a web server
in my email client.
I don't have those two choices.
I don't like either of those.
So that's where we are.
You could argue that we have to implement OAuth anyway,
because we're dependent on OAuth for Google,
for Microsoft, and for Yahoo, which is true.
However, the problem right now is still contained.
It's really these few three things that are where
really needed for all the others that don't need it.
My hope is that we can contain it there.
If we open up the floodgates and open it up to all the ISPs,
we have a legacy that we will never get rid of.
You heard the talks about IMAP, which legacy that is.
If you implemented email, you probably had your hat scratched
for one reason or another.
There was a reason 30 years ago why they did it this way.
I don't want to be the guy who puts OAuth in email
and creates legacy that people have to deal with
20 years from now on.
I don't want to be the guy.
This is why I don't feel at ease with putting OAuth into email.
There's another option.
It's called PASCIs.
We talked about MAUTH.
PASCIs.
PASCIs are the new cool thing.
Google, Apple, Microsoft are fully behind that.
They implemented that in record speed.
It's supposed to be super secure.
You can bind this to biometrics of your phone.
You don't need this code, two-factor thing, code thing.
It's still secure.
The big ISPs really, really want this.
They're really behind this.
This is a big advantage because maybe we can contain
the OAuth problem and migrate users to PASCIs in this way.
We could also allow that for all other ISPs as well.
The other advantage is it's a very simple protocol.
It's a challenge response protocol, which means the server
is sending some kind of information, some blob,
some JSON or string, sending it to the eMac line.
The eMac line is sending this to an operating system API.
The operating system is popping up a dialog.
Do you want to log into this and this website
or this and this domain?
The user can approve or disapprove.
He might have to use Face ID or thumbprint,
depending on the settings.
There we have the two-factor authentication with biometrics.
It's secure.
Then the operating system generates another information.
We send it back to the server and the server says,
okay, so it's a simple, we just pass on information
back and forth.
It's very simple on the protocol level.
I don't need a web browser and it doesn't have all of these
issues that I just mentioned with OAuth.
So I don't know too much about PASCIs,
but my gut feeling tells me this is the better way forward
and something that is much more easy to support in the future.
This is an open question.
If you know something of how this would work with PASCIs
and have proposals or want to get involved in that,
it's an open question right now.
Let's discuss this.
So, questions?
Thank you.
