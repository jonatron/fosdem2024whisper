Hello?
All right.
I'm going to start my talk.
My name is Christian.
I'm a software developer at a company called S44.
We make software for ChargePoint operators and mobility service providers.
So basically the cloud space of the EV stuff.
All right.
And today I'm going to talk about OCBP implementation and the clicker works.
It worked a second ago.
All right.
So if you take a look around at chargers and charging networks, what you'll find often
is a broken charger, a charger with a black screen, and especially payment terminals
saying oops.
I found a study from 2022 that said in the US that 75% or less than 75% of the chargers
weren't working or when the users came up, they couldn't get a charge started.
So now governments have gotten involved, right?
There is uptime guarantees in the UK and the US Neve funding also relies on uptime guarantees.
If I remember correctly, I think the off here also has uptime guarantee, but I'm not
100%.
And so the most recent thing I found for the US and the company I work at is mainly US based.
So that's why there's a little focus there is that in 2023 broken chargers was like the
major concern for users to use public infrastructure for charging.
And then maybe most importantly, Reddit users are super unhappy.
I think some subreddits even banned talking about broken chargers because they were really
annoying.
And I'm going to click.
All right.
So one thing that we found or our thoughts on why this happens is a lot of proprietary
implementations.
So you can see Dolly's interpretation of OCBP proprietary stuff.
So if you're not Tesla, which owns the entire vertical, right, they know what's happening
at the charging station in the car and in the cloud.
Then what do you do?
Well, what happens right now is there is a bunch of different vendors.
Wherever you sneeze in the EV charging cloud stuff, there's a different vendor.
And most of them don't really share what's happening under the hood, which results in,
well, a bunch of uncalled for behavior unknown what's about to happen, especially later in
the field when it's a user interacting with something and you don't have known input.
Then of course, we have OCBP 1.6, which leaves up a lot of stuff to the imagination on when
which message should be sent.
And then maybe the CSMS thinks, well, I'm expecting ID token now, but get some other
message.
But one thing that I think is one of the most big problems with OCBP 1.6 is around monitoring.
So right now, each hardware vendor builds in their own obscure monitoring messages.
And if you want to integrate with like five different hardware vendors, well, then you
have to work out how to understand all five different messages.
And that basically mean the same thing.
Well, that leads to broken parts in the fields and no one knowing about them, which then
leads to Reddit users being angry because the charging station has been broken for like
a week.
No one really noticed.
Thanks.
All right.
So what can we do to improve the state?
Well, OCBP 2.01, I think is already a huge step in the right direction.
You can see Dolly thinks as well.
OCBP 2.01 winning strongly.
One thing that I really like about OCBP 2.01 is it has a lot of use cases and it's super
structured and you can build your test cases on them.
And then of course, there's much more monitoring around the device model that helps in identifying,
oh, there's something about to go wrong with the charger instead of just it's broken.
But that still doesn't help with transparency.
So if everyone just reinvents the wheel once again, just like with 1.6, well, you're still
going to run into different interpretations.
So we think there should be something that's open source, that's transparent, that you
know what's happening under the hood.
And we hope that with something like that, there is better cross compatibility between
different vendors and the CSMSs can easily integrate with a bunch of different hardware
vendors.
And next one.
All right.
So we looked around.
We didn't find something that we were super happy with.
So we came up with the project Citrine open source.
It's written in TypeScript.
I know in this room that might not be the most popular choice, but on the internet it is.
So that's why we went with it.
It runs on Node.
We have a API based modular architecture.
So similar to what Achim was saying, there's some microservices and you can set it up that,
for instance, transactions is super scalable, but maybe provisioning is maybe not as needed.
It's released under the Apache 2 license.
And most recently it's been adopted by the Linux Foundation Energy.
And it's in their hands now.
Yeah.
So in general, we think OCPP shouldn't be like something that everyone works on once again
and again, but like a stable cornerstone that you can adopt, that you can drop into what
you want, where you need it.
Because the messages are there, the protocol is really specified and redoing the same thing.
Well, I can spend my time better.
So taking a quick look at what we envision for the system architecture and how it works
right now, going from the left to the right.
So charging stations connect via WebSockets to the central system that helps us with scalability.
You can have a bunch of different instances of the central system that manage the individual
chargers.
Then we publish on a message broker.
What was important to us is to have our underlying technology kind of agnostic.
So you can set up Kafka, you can set up PubSub, whatever you want.
Just like with memory cache.
So you can use your address in memory cache.
At least that's what we've implemented for now.
And then you can adapt whatever interface you want.
And for relational databases right now, we have it hooked up to PostgreSQL, but you can
set up whatever relational database you want.
Then comes down here, the maybe more interesting part.
So we have our modules.
And like I mentioned, transactions is a big one.
Most of the bandwidth goes there.
So we set up the modules based on how much we think they're used.
One second, one back.
One thing I forgot to mention is we use Fastify as the web framework to interact with our
setup.
All right.
So looking one step further under the hood, we have a JSON schema generation JavaScript
that we take the set up, the part three of the OZP spec and use that to validate all incoming
and outgoing messages.
And we generate our TypeScript interfaces out of that.
Then to run, for the implementation of the modules, we work a lot with decorators and
metadata on which decorator is used for which message.
And that's how we route the messages within the modules.
And then one thing that I think is quite nice is that we have some open API documentation
that's generated.
And you can easily try out some OZP messages from the REST API.
So you can either use the API generation, click try, or use postman and just straight
up send OZP messages that then get forwarded to the charger.
And our system does the interaction with the charger for it.
All right.
So then looking up and looking at a UI, so right now we've hooked it up to Directis, which
is an open source project that gives you some nice UI on top of a relational database that
helps with keeping it simple.
But you can go crazy on it.
You can build your own flows in Directis and do whatever complex things you want.
For now, we have it set up so that we have a little testing set up with our app that
we whipped up to try charging.
Yeah.
All right.
So where are we at right now?
So a few days ago, we released the 1.0 version that goes through the OCTP protocol's testing
cases of core and advanced security.
We're quite happy that that's working.
It's been working for a while, but we only got to release recently.
Then right now we're under development is the advanced device management and advanced
UI.
We also have a few other people that we're talking to about integrating some payment
and just general, we've generated quite some buzz with people that would like to add some
modules or add just on functionality.
And so moving forward from there, we're looking to ISO 1511.8 support.
And hopefully in July, that's what we anticipate is that we have the full OCP 201 implemented.
And then for the future, of course, similar to what Ahim was saying, well, you can build
on your BI tools or whatnot.
And we hope that this is a nice interface for innovation on top of and not that you
have to hook yourself as a machine in the middle or something similar.
And I'm really happy that so many people were interested in this topic.
So maybe you also want to contribute.
We're fairly fresh.
You can find us on GitHub.
The top right is QR code to our Citroen OS core GitHub page.
The first technical steering committee will happen on March 14th.
So get involved, join, bring ideas.
And we have a Discord server.
So drop by and ask questions.
Sometimes we're fast.
Sometimes we're slow, depending on our workload in responding.
All right.
Does anyone have questions?
One simple question.
We all know every vendor does its own shit.
On the other hand, you generate everything from the JSON schema.
So how do you implement extensibility?
When a message or an unknown message comes in, do you drop it or can you handle it in
a smarter way knowing, okay, it's coming from this vendor and therefore I should interpret
it somehow?
So right now I believe we drop it.
Our major taste has been the Everest.
And they send normal messages.
Am I in the wrong spot?
All right.
And for the detail on how it will be handled in the future, I'll get back to you on Discord
for that.
I got to check with a few people on what's happening, what's going to happen there.
So you said you can make an API call and you send the, for example, start charging message
to the charger.
So do you use like then you get the API call, you use Kafka or something and then from Kafka
it goes to the charging station?
Okay, that's very cool.
I'm also doing that.
Yeah, exactly.
I've seen implementations where they are just white.
I've seen implementations where they are just white like a flag into a database that is
like very, very important time.
And I think that's very ugly.
And I think like message brokers are very elegant solution.
Yep, we agree.
Okay.
With message brokers and 15118 you have very strict timing.
How do you ensure that your message brokers not too slow?
I got a, I got a pun that one.
I'm too nervous for that right now.
I'm sorry.
