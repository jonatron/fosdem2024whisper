Now, second talk about OSDRD, it's about the running time calculation and the best way
to calculate the running time is to save energy and Alex will present it.
Thank you, Loïc.
Hi, everyone.
Thanks for coming to this talk.
Today, how to drive a train using the least amount of energy with Mariko algorithm.
This talk could have been how to drive a bus using the least amount of energy or how to
drive any public transport that has wheels to use the least amount of energy and actually
even worse with bikes.
So I'm Alex Roland working also at SNSEF Réseau on the same project OSDRD for those who were
at the previous talk.
Here is our GitHub repo if you want to check it out.
And I'm going to mostly spend some time on one type of graph, not the space time that
you've seen just before, but this one is called the space speed.
So it's a very easy graph that just represents the speed along the path of the train from
its departure to its destination throughout the stops that it might take.
On this graph, you have some speed limits that are on the line.
Most of the time, the speed limits are quite lower on train stations.
And then the train will leave the departure station with a speed of zero and then it will
accelerate until reaching the different speed limits.
Then it will break to reach the stop at speed zero again and then accelerate and then break
again.
So this is the fastest drive that the train can make.
It accelerates as much as possible, drives as fast as possible and breaks at the last
moment to reach the stop and to reach each speed limit restriction.
In that case, let's pretend that the departure is at eight and then the stop is at nine twenty
and the destination is at ten.
This is still distance in this graph.
I'm just showing you time because this graph does not show the time and we're going to
need this.
The problem is with public transport, if the train leaves five minutes late, it won't be
able to catch up because this is the fastest drive.
So it will at most arrive with five minutes late at the stop and at the destination.
That's also a problem if the driver does not accelerate as much as the fastest drive.
It will also be late even though it left on time.
It's also a problem if the driver does not drive at the maximum speed, which spoiler
happens.
So going back to the fastest drive, this is actually a very bad way to plan trains, buses
or any public transport because everything can fail very easily from the example I've
shown.
So we kind of want this public transport planification to have some margin to it.
So if I'm adding, let's say, a ten percent time margin, I want to stop eight minutes
later, so at 9.28 and then 12 minutes later here.
So then I have some margin to like damp the few, I don't know, leaving late or not driving
as fast type of problems.
But we are here to save energy too.
So we want to add that straight time, but we also want to save energy.
Well the good thing is, physics does both of it.
If you drive slower, you will save some energy.
That's great.
Great news.
Okay, this is due to the different forces that apply on the train when it's running.
You can see here, well let's not care about the weight and ground resistance.
What's important here is the air drive and solid friction that scales with V and V squared.
So at high speeds, it will be much greater.
So driving slower, you experience it if you bike, if you drive slower, you use less energy,
same with cars and every transportation system.
So let's lower the speeds with a very basic way, a linear margin.
So we are lowering the speeds at the same percentage all the way through the train's
path.
And then we arrive at 9.28 and we arrive at 10.12.
Did we save that much energy?
Not quite sure.
This is also another way to lower the speed and then be on time with the margin that has
been planned.
We are lowering the high speeds only this time.
But what I'm going to show you is actually the best strategy to lower the speeds because
there are infinite ways to lower the speed and arrive on time.
I could also just stop in the middle and then come back on track.
So I'm going to show you what's been published by engineers from SNCF a few dozen years ago.
I think the original paper is from 1979, so I was not born, which shows the best strategy
to run trains in terms of energy consumption.
So how does it work?
There are four types of actions.
Here I'm showing the same graph, but like a very simplified one.
The train can be either accelerating, maintaining speed, posting.
Posting means the driver cuts down the traction and then the train rolls with, drives with
thanks to its inertia.
And then the train can be braking.
That's four driving actions that we are going to study.
The idea is to study each type of action and see how much energy we can save per unit of
time that we add.
If we look at the accelerations, we can try to accelerate a bit not as strong as the maximum.
So let's say V0, we like accelerate a bit slower and then we accelerate at maximum again.
And I'm saving the formulas because it would be too long for this talk, but basically this
can lead to a nice but small amount of energy saved per unit of added time.
If we look at maintaining speed, as we saw the speed has a huge impact on the air friction.
And so driving at V1 a bit lower saves actually lots of energy per unit of time added, so
that's interesting.
There are two reasons for coasting.
The first one, the small triangle you see here, corresponds to a slope.
So the driver will cut down the traction before the slope, slow down a little bit and then
accelerate again thanks to gravity in the slope.
And then on this distance, no traction was used.
So it's interesting.
And before braking, if we know we are going to need to brake and slow down, we might as
well cut the traction before and then thanks to the inertia, the train will drive and lose
some speed.
So this is, we have two parameters here, the same V1, so the maximum speed and then VF
here, the velocity at which we want to stop the coasting and start braking.
And this is also very interesting in terms of energy saving per added time.
And for braking, well, no energy used at braking, so no possible energy savings at
braking.
So what this analysis shows is that the two most interesting parts are actually saving
energy on maintaining speed and coasting, which would, if we combine them, look like
something like this.
We want them to be equal so that the margin is as evenly distributed as possible.
We don't want all the margin to be on one spot for reason I'll explain a bit later.
And then basically how the algorithm works in the end.
We start with the fastest drive that we compute and then we do a binary search algorithm with
iteration.
So we start with V1 and VF that leads to, let's say, this result.
Then we get an output of how much time this represents actually.
And we compare this time to the time we want, the 9, 28 and the 10, 12 from before.
And then we iterate and we compute different ones until we converge to the solution that
leads to the time we want.
So if we come back to the first example, this leads to something like this, where the higher
speeds are lowered and then you can see the coasting phases before each braking phase.
And we arrive on time with the margin that we added.
Now let's see how it looks like on some examples using OSRD simulation.
So here a train between Paris and Lyon, so it's a high speed train, a TGV.
Here you can see it on the map and then you have a linear margin.
I don't know if everyone can see the green lines, yes.
Okay, so linear margin on top and then maricot algorithm at the bottom.
And then here the orange curve is the slopes along the path of the train.
So here on this example you can see some like the triangle parts correspond to the train
cutting down traction and then using the slope to accelerate again.
And then you can see here that it's cutting the traction about a bit before the final
braking here.
So in this case we get 12% of energy saving between those two strategies for the same
running time.
Another example between gap and brilliance, so this is in the Alps, in the mountains.
So the slopes here are quite strong and there are many like uphill and downhill slopes.
So it's interesting because then we can use the triangle technique many times, cutting
down the traction and then keeping up with the speed, the fence to the slope.
As you can see here, there are many triangle shape.
And then there are more stops here, so also more braking phases that we can use for coasting.
In that case, it's 13% of energy saving also because the overall decliivity goes uphill.
So it's not as great for this algorithm to work well.
Another example in Bretagne, so this is the west of France between Rennes and Camper.
With many stops this time, so I simulated a regional train that stops in many cities.
So there are many stops, hence many coasting phases before braking.
And the overall decliivity is quite flat.
So in that case, we get 20% energy saving, which starts being a lot.
And last example would be near Paris, so between Paris and Mont-Flajoli.
Also many stops, but this time the overall decliivity is mostly descending.
So it's very good situation for the algorithm to be efficient.
Well in that case, we get 32% of energy saving.
So let's plan all the trains with this algorithm.
What can go wrong?
Well, there are some impacts of the Marico algorithm on train planning and operation.
I'm going to start with the few downsides.
Most of the margin end up towards the braking phases because that's where the main coasting phases are.
So we need to use it a bit carefully, especially in the long distances.
I showed you the Paris to Lyon trip without no stops in between.
So most of the margin was at the end, which means if the train leaves late,
it's going to catch up near Lyon, but it's not going to be able to really catch up on the way.
So it's going to be a bit late all the time, which is not great.
So it needs to be used carefully.
You can also deteriorate the headway, so how many trains can run in a certain amount of time
because it can lower the speeds a bit too much in some areas.
It also considers that drivers will follow the fastest drive at low speeds,
so accelerating as much as possible, which is not the case if we study at driver behaviors.
So we in the end plan trains a bit wrong if we consider that every driver will accelerate using 100% of the traction force.
The good news is, sorry, energy savings.
Well, this can be a lot of money in the end for the company.
Each percent can be a lot, so imagine 20 or 30%.
It's a bit more similar to driver behaviors, especially experienced drivers that know where they are driving.
They will anticipate the slopes and they will cut down traction to save some energy.
So it's more similar to the actual driving than the linear margin.
Strong accelerations are better for the headway, especially in dense lines.
So you want trains to leave the stations as early as possible and then drive at high enough speed
because trains that drive slowly have really bad, sorry, for the headway.
And coasting before braking, also in dense lines,
brings drivers to approach to reach the stations at lower speed because they have been using the coasting before.
So they can anticipate and adapt to braking better if there is a train in front of them with
and they get like a caution signal, asking them to slow down.
And that's it. Thank you.
APPLAUSE
We have three minutes for questions, I think here and here now.
Yeah, you mentioned that grading doesn't cost any energy.
We generate a risk braking. It does save energy if you rate slower.
Does it take a different program?
This algorithm doesn't take it into account because it's too old.
So I don't think trains that could gain energy at braking were a thing at that time.
I personally would like to adapt this algorithm to take this into account in the future
if that becomes one of our needs for OSRD simulations.
But yeah, you're right.
What about the length of the train?
I mean, for instance, a long freight train, you can get some very different things
because there are supposed to be a sensing and a sending.
Yeah, so I forgot to, I think I need to say the questions again for the microphone.
So yeah, the question was what about long trains, especially freight trains, that can be very long?
Well, yes, the cleavities, the slopes can compensate on very long trains.
Well, this effect, this algorithm also works, no matter the length of the train.
It's just because of the binary search, we don't know the exact output.
So we simulate it, we see the total time, and then we adapt the V1 and Vf velocities
for the right time that we want.
So it's actually taking into account those, as long as the algorithm you use
is taking this into account in the simulation.
One last question.
Sorry.
I see your graphs because they're on time, but when you save energy,
I will assume from the graph that the graph is now shown, it covers less distance
because you have time over speed.
But where is the time actually saved?
Is it normally that the train would just get at its end station earlier,
and now just take that extra five minutes away and spread it out by saving energy?
No, actually the graph was showing only show speed and distance.
So the time, if you show it on, I don't know if there is, yeah.
No, we don't have time for this, okay?
Sorry.
But they actually arrive on the time.
They drive a bit slower, so if you represent it as a space-time diagram,
you will see that there will be a bit more horizontal because they drive slower.
Thank you, Alex.
Thank you.
