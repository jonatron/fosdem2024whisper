So like the 13 instances of this bedroom and by this I am over to our particular class.
Can you hear me?
Can you hear me?
Okay.
Hi everyone and thanks for being here. It's great to be able to speak here.
So I'm Alex and this is my presentation on some very high level and pretty speculative ideas I've had for how we could use microcranels in like to do different systems and to host websites.
So I'm part of an association which is called Duffler and if it works at Duffler we have some infrastructure which looks like this.
So we have some very low powered computers like this one which are hosted at home.
So at home of course we have possible issues like power going down or internet being cut.
So we have some machines at different locations in Belgium and France.
And the idea is okay we have this infrastructure which is like pretty fragile but maybe we can just put all these notes together and build this system.
And this is actually what the Duffler infrastructure is doing.
We have email, we have websites, we have instant messaging and a few other things running on these very basic machines.
So currently our infrastructure looks something like this.
So the idea is not to spend too much time to enter into the details of this but basically on the right end here we have the actual applications that we're interested in running.
So for instance we have an element for chat, we have Jitsi for video conferencing, Crippad, other things.
And to run all these applications we need this whole huge stack currently.
So it's based on a Linux OS and MixOS for declarative configuration.
And then we have this platform stack here which is based on an orchestrator which is called Nomad which we use.
It's a bit like Kubernetes but a bit simpler and I'd say probably easier to use.
But still we have all these different components which are basically...
... storage systems.
GARZ is one that I'm building myself.
And we basically pull these...
... software.
And if we look more closely in what's happening on a single node, actually it's kind of a huge mess.
So like this is the operating system running on one of these...
Here we have all these management tools.
Things that are...
So yeah, from a conceptual point of view, this really systems like...
... to enter into too much detail.
Let's say for instance we have here internet traffic coming to our server to request some information.
It's going to traverse a reverse proxy which is going to do TLS encapsulation.
Then it's going to go through an HTTP link to the actual backend which is going to talk to with specialized protocols to the storage layer.
And basically we can describe all of these things with boxes and arrows connecting these boxes.
So the idea is that actually this model of boxes and arrows is the model of micro kernels.
Boxes are...
...
...
... memory between different processes sharing the CPU time.
And also controlling hardware access.
So this is like fundamental thing that only the kernel can do.
Separate the resources of the computer at the CPU level between different things that are going on.
And then the micro kernel will also provide some IPC mechanisms like message passing or shared memory.
So...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
I've made things and connecting things very explicitly only when they.
So this diagram is like what's running on one node, but maybe we can include some form of network transparency to make this more into a distributed.
You
There would be some impact on performance and we also need to be quite careful about that.
Okay, so it's still time for some questions, comments, whatever.
Okay, I might have one question. So the use case should be always the God, the thing that dictates what how the architecture should really look like.
So what do you have in mind in this area, something like safety critical or security critical or really just some average information system?
Yeah, we're doing the association with the facts. I mean security is important because we're handling personal data of people, but I wouldn't say it's a security critical infrastructure per se.
But of course, like, yeah, one of the advantages of such an architecture is like security is easier to like build in a robust way because we have much more control.
Okay, thanks. So so quite natural follow up question. We probably have seen it in this discussion here. So how do you persuade the average guy to buy him? How do you persuade a very guy to stop using their Linux distribution and start using your architecture?
I think this is going to be a very long, long work before we can get to that point. But the hope is that this system is both more robust and easier to use because we like we can get rid of some complexity probably.
And and we can have some. So if we get to a point where there's good tooling around this, and whereas there's a lot of examples which are already already running and it's easy to get your own started, then I think we can really have something that attracts people.
But yeah, of course, it's a long road before we can get to there.
Thank you. Any more questions or comments?
I don't see anything. So thanks for the talk.
