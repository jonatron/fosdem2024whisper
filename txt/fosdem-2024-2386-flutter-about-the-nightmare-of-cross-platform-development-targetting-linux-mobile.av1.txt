Okay, next up we have Brage, she's going to talk about Flutter apps.
Please give a round of applause.
Hello, yes, I'm going to talk about Flutter, but not like about the fancy ecosystem as
we were just introduced in the previous talk, but I'm going to talk about development and
rather about the nightmare of development targeting Linux mobile.
Because from the perspective of app developers, there's still much work to do until we can
properly target Linux mobile as with cross-platform software.
Who am I?
My name is Brage.
I do Flutter since it was publicly released in 2018 and I work in healthcare actually,
so my work has nothing to do with what I'm presenting here, but I find it interesting
topic anyway.
I use ARM by the way, that's why I talk about Linux mobile.
Even the talk is held on ARM, maybe people recognize the laptop here.
You can reach me via matrix since I do matrix for work, so when you have any questions at
break, colon, and that leaks, I am from France.
Back to topic, why would we like to use Flutter?
We had a fancy overview about the Linux native ecosystem, about GDK progress, about KDE targeting
Linux mobile.
Why Flutter?
Because Flutter is a decent cross-platform ecosystem.
Unlike if I develop a GDK app, I do not uniquely target Linux, but I target giant ecosystem
consisting of iOS, Android, desktops, maybe even web, and I can potentially also target
Linux mobile.
It has a fancy plug-in system for developers to access native resources, so we are not
bound for example to web browser APIs, as we know it from many JavaScript based cross-platform
toolkits.
We have an amazing UI toolkit and that's what they love Flutter for.
You have animations, the 2024 style, and it's fun to use.
It renders perfectly, it renders 128 frames per second on high-end devices unless you
have some vendors doing weird things and then it won't work.
And it's no JS, no XML, so we have design as part of the code, so no external design
resources which makes it quite fancy to refactor to use it for development.
Yeah, Flutter, but let's talk about Linux and especially Linux mobile.
We will talk about both in this talk, but the goal is finally what are the issues about
Linux mobile.
We have a giant ecosystem, I already told, like there are 10,000 apps in the Google Play
store made with Flutter, a bit less in the Apple App Store, but we have a giant ecosystem
and all these ecosystems of Flutter apps could target Linux and Linux mobile too.
They are optimized for mobile views, they're actually handy to use on Linux.
We just need to make it happen.
And we have big players into it, namely Canonical and Google.
I know they are very popular here, but they use Flutter, especially on Linux and push
it.
Unfortunately, that's a problem too, that they are the ones pushing it, not the community
we will see that later.
Yeah, like what are the key points in targeting Linux mobile and Linux in general?
The first is like, okay, if I have the application, it should not have runtime issues, it should
be usable on the mobile screen, it should have functional interaction with the user.
The second from the developer perspective is I should be able to debug the app.
I should be able to compile the app for my Linux phone, there we get to a big problem.
And the third thing is redistribution.
I first of all need to redistribute Flutter in order to have a package system which can
target Linux distributions with dependency trees, with Flutter as a build dependency.
The second thing is I need to package my Flutter app for Linux distributions.
It sounds easy, but it can be hell.
This is the first thing we are going to talk about because that's the most complicated
when talking about Flutter.
Afterwards debugging and runtime, I will give you a brief showcase of Flutter on Linux.
Yeah, Flutter redistribution consists of two parts.
We need to build the Flutter tool chain, so everything we need to develop and we need
to package it in a way we can use it on Linux distributions in order to have it as dependency.
Yeah, let's look at packaging because that's easier to understand at that point.
If we follow the instructions on docs.flutter.dev.slashgettingstarted how to install Flutter, we simply
clone a Git repository.
I mean, that sounds amazing.
It's just a Git repository.
It should be packageable.
You download that Git repository or you clone that Git repository, you execute Flutter
for the first term and you see that.
We're downloading lots of things.
First of all, we are downloading the Dart SDK.
We could use that one as system dependency, but that's difficult.
But then we continue downloading.
Let's look where are we downloading to?
I mean, should be a user directory or something like decent location, which is user configurable.
Yeah, no, no, no.
We download all the stuff.
We download to the installation directory.
Now imagine how it is like with packaging stuff for Linux distributions.
It's a bad idea if your runtime has hard coded to download stuff into the installation folder.
That's a bit annoying.
But that's something you can work around with patches to apply.
Yeah, step by step.
What is it downloading?
Like you download the Flutter source, blah, blah, blah.
You execute Flutter for the first time at loop and it's downloading the Dart SDK.
So Dart is the underlying programming language Flutter is using.
And yeah, afterwards, it's creating the snapshot from the Flutter tool.
So it's compiling the Flutter tool written in Dart in order to have an executable of the Flutter tool itself.
Then this compiled Flutter tool, remember, you clone source and it's first compiling stuff.
Then we download the engine, the Flutter engine, and dozens of platform dependencies.
And they keep changing each and every release.
Good luck capturing that.
So what do we have?
We have fonts, we have Android stuff.
If I use the Flutter tool to target Android development, I have different compilers all per architecture,
compiled with native APIs.
I have the Web SDK for target web.
I need to download Skiya, CanvasKit in order to render in the web.
All this is going to be downloaded.
Generic Flutter SDK tools, platform compilers for Windows, Linux, Mac OS, FrontRenderer,
for example, the GTK and better on Linux.
And then I'm mostly done.
Let's look at where these downloads come from in order to capture them and in order to improve that.
Get a release now, now, it would be too easy.
Some package registry, like, I mean, that could be a hosted Nexus or something.
Better Chromium CI, the build system of Google for their open source proprietary components.
They build all these components you need at runtime in order to save time while executing,
I don't know.
And it's built in Chromium CI and then downloaded at runtime.
So you need to capture that somehow.
You cannot know what's happening in this Chromium CI.
No one knows.
It's just we download blocks from proprietary storage and this is not very open source of
you.
It's held to package.
It's held to work with that.
But back to the topic, how can we package that?
Now that we know where all this stuff is coming from, we could take all this stuff from Chromium
CI.
I mean, it's the easiest approach.
I just want to have Flutter function.
I want to develop my apps.
Let's just package that stuff we get from Chromium CI.
We could pre-cache it at prepared time of the packaging process.
So download all these dependencies, create the snapshot and so on.
And then just have it packaged in the distribution package with ship.
Other option would be, and I won't give a definite answer on it.
It's just prospect.
You could also patch Flutter to make this user configurable.
I made a merge request for that like two years ago.
It was rejected because the Flutter authors did not see any use case.
It's obviously a perfect idea to download stuff to the installation directory.
Yeah.
But even better, we could build them ourselves.
Because actually, when I talk about Floss and mobile devices, I do not want stuff dropping
out of this Chromium CI.
I have no clue about what's happening in.
Yeah.
Building Flutter next topic.
I don't know.
Has anyone of you already built Flutter?
Like the Flutter Engine, the Flutter tool?
I guess a couple of people here.
I guess you had fun.
At this point, very special thanks to Lauren.
Amazing work on patching Flutter to be able to make Flutter buildable with more or less
less-vendored tool chain.
Amazing work.
So the next few slides are going to present actually the work done by Lauren.
Yeah.
Issues on Flutter Floss builds.
Like you have, first of all, vendor packages.
Like everything you could use Assistant to Sensey is being vended from some random upstream
source from Google.
We do not want that.
Yeah.
It's coming from Chromium CI, by the way.
Also, the Flutter sources themselves are written in a way it's not muscle-compatible,
existing patches, adding muscle support to the Flutter Engine were so far always rejected.
Same applies to existing patches making it compile on BSD.
Those are not that functional yet, but there were clear statements.
There's no interest in adding support to that.
There's no use case in it.
So the Flutter team is not willing to accept these patches, this work done there, which
is super sad in my opinion.
Yeah.
So the tool chain to build Flutter itself, it's basically a G-client solution.
So you get the fancy repo, Depot tools from Google and download the solutions, and it's
downloading lots of stuff from Chromium CI.
This is a screenshot, can you see it here, from the Alpine package build files for building
Flutter.
You have, I don't know how many are, it's 15 patches only to make Flutter compile.
There, you have some patches affecting the Engine, so for building the Engine, and some
for runtime for the Flutter tool, and in both cases it's giant overhead just to package
this simple tool.
Yeah, it's sad.
Yeah.
Upstream work, nah, so far not wanted.
It's not appreciated.
There was upstream work until all patches were rejected, like it's already known for a while.
So far all aims to improve that were rejected, and that's why there's unfortunately lots
of downstream work going on.
Yeah, mostly rejected.
There we are.
So in order to build Flutter on using a Floss tool chain only, you first need to patch the
build route in order to have the function environment to build the Flutter Engine itself.
First of all, things like, hey, use my local Python.
I do not need your Vendor Python.
Use local libraries and stuff.
By default everything is Vendor.
Afterwards, you need to patch the Engine to, for example, work or functionally work on
muscle.
This is though not required if you target G-Lib C devices, but the post market OIS people
and Alpine people in this room, maybe the Void Linux people might be happy about that.
And there are the patches are pretty similar to target BSD because Flutter has lots of
stuff hard coded to function on Linux only, though it could at many places work on BSDs
too.
I'm talking about BSD because I love using BSD actually, and I'm sad Flutter doesn't
work there yet.
And afterwards, if you got to patch the Engine, you still need to patch the Flutter tool.
Like we were talking about that.
These artifacts, we do not want to download the Dart SDK.
I want to use the Dart language installed by my distribution package manager rather
than like some pre-compiled stuff.
At the moment, it's usually, for example, Alpine has the Dart muscle port packaged there
in order to work around that.
So there's no canonical way yet.
There's no clean way yet, though there is work ongoing that.
And yeah, so that was the brief overview.
I mean, I need to hurry.
The talk is way too short to dive deeper into it.
Like the second thing is debugging and cross-compiling.
If I have a Linux mobile device, it's usually another CPU architecture compared to my host
machine.
Though host machines with ARM CPUs are involving now, like most people still use AMD64 devices,
and that's why in most cases for debugging Linux mobile app targeting like this device,
they need to be cross-compiled.
And that's the moment where I wished Flutter was go because go is fancy and cross-compiling
and Dart is like, oof, it's crappy.
But wait a second.
There are these fancy arguments existing for the Flutter tool, like target platform and
like target sysroute where you can like specify a sysroute of, for example, R64 installation.
Let's try that.
That's the reply you get.
I mean, nice that you added these parameters, but that's not exactly what I expected if
it's shipped.
So yeah, you see, there we have the aim of the upstream team to make it support, but
it's too slow.
There are other solutions making it better yet, and now I'm going away from the upstream,
presenting some possibilities like to get Flutter to debug and to cross-compile on your
ARM device, on your Raspberry Pi, on your watch and whatsoever.
At that point, I can also recommend the embedded Linux talks on Flutter taking place in this
system.
They are driving deeper into the solutions I will present.
Yeah, the shark is very confused by this output.
Yeah, if I just want to compile, I could also just use KMU and like compile if it's functional
for release builds, compile the stuff on my host tank.
I could use KMU, use a static binary.
I have my ARM binary.
Okay, it's compiled.
I could ship it, but I actually want a debugging session where I can use the fancy Flutter
features like HotRestart, HotReload, where I just do Flutter run, show my beryllium instead
of building it locally, pushing it, debugging it, not debugging it, checking whether it
works, manually checking some outputs.
Compiling is not debugging.
That's a huge difference in it.
Yeah, for cross-compiling and debugging, there's no canonical way yet to do that.
You can compile Flutter cross-platform using KMU static binary.
Thanks, but that's crappy.
We actually don't want to do that.
You could also just have your standalone ARM64 build server.
That's what I do.
I have ARM64 CI devices at home with which I build all the Flutter stuff I build in order
to have test builds targeting, for example, Debian on mobile.
Or you use custom devices.
Flutter supports custom devices, which means you have configuration files.
You tell the engine, the Flutter tool at runtime to use or to run on device configurations
actually not supported.
And there you have projects dropping in there.
You have Flutter in Linux, embedded Linux developed by Sony.
It's the Flutter embedded devices.
Okay, that's duplicated, but yeah.
It's basically a wrap around the Flutter tool, which enables you to run on ARM devices also
remotely and you have Flutter Py also uses the custom devices API in order to target
remote devices on Linux.
But again, there is no build in way.
There are these fancy projects enabling us to do that, but there's no Flutter build
in way and that's sad.
Yeah.
As of now, it's easier.
I have a full Linux installation on here.
It's easier if I have my Flutter development environment installed on the device and SSH
on the device and debug on there because that's way more functional than using the typical
stuff you know from the second phone Android here.
I just plug in the device and debug.
That's not the state of debugging here.
It's rather easy to develop on the target device itself if you have a decently powered
CPU and like a desktop Linux distribution there or like can do it by SSH, that's way
more convenient.
And you should hopefully see an image.
No, that's a joke.
I have prepared a short showcase for you.
It was number seven.
Yeah.
That's like showcase of Flutter.
In a few moments, you will see me opening a Flutter.
I recalled it while traveling here.
That's why it's a bit blurry.
Like that's an example of a Flutter app.
Like you see animation rendering is pretty decent.
Animation is crappy because it requires upstream patches in order to have defaultly handle
Linux touch events as touch events and not as pointer events.
There it's getting crappy but from the UI part, Flutter is fancy.
And for example, like some Flutter apps ship these patches like to get scrolling to work.
Most others do not.
Some vendors ship patches.
For example, Alpine again has patches to include a scroll behavior treating Linux touch mouse
input as scroll drag enabled input.
I think it's broken.
I know it's broken since the last few releases but I think that's because the patch must
be adjusted.
Originally Alpine had a patch.
It's no longer functional but it had a patch for it.
And one could adjust that patch to still function.
And like short summary, the first point is the touch is considered as mouse.
That's why if you swipe it selects instead of scrolling.
Scaling is sometimes an issue but that's an issue everywhere in Linux mobile.
These devices have full HD or even higher resolution so everything is scaled dozens
of times.
You saw a GTK header bar which is pretty annoying.
I do not want to see your header bar but that's again a GTK issue, not an issue of Flutter.
And multi-window is pretty crappy because if I start a new instance you run into issues
with any database connection you have open if you use local databases and you mess up
your applications.
Though you run into those issues in Android 2 but on Android it's handled way better because
by default it does not start at two instances of your app.
And yeah, that's state of the art.
It's crappy but there is momentum.
There is work going on.
If you use all the patches, all the tool chains around Flutter, if you actually use them to
target Linux mobile you can target Linux mobile in a pretty decent way.
And I hope it's going on.
Some work is going on upstream.
Unfortunately most of the work is going on downstream which is pretty sad.
That's not very open source of Google.
But I mean it's Google.
Yeah, so let's get Linux mobile ready as a cross-platform target and that was my talk.
Awesome.
Does anyone have questions?
Yeah?
You talked about the upstream not wanting to support muscle.
But doesn't Android already have a libc other than glibc and do they even support that?
If we look at Flutter we are talking about a completely different target of Android and
Linux.
And the Flutter Linux engine does not support anything apart from glibc and upstream.
Of course it supports Android.
That was what it was initially developed for but there it's another completely different
components of the engine.
And yet they compile with Android libc.
Forgot the name.
Yeah, by Jonik.
Any more questions?
Yeah?
Martin.
Your demo video showed a Flutter application running pretty smoothly.
What defies what?
Sorry?
What defies your demo video running?
That was a few years old smart from Shomai.
It's a Shomai Pocophone F1 running Debian.
No, how is it called?
Mobian.
Ah, okay.
So, Friedrino.
Yeah.
Okay, thank you.
If you tried on the Pine phone for example you won't have that experience because the
GL driver is broken.
That's exactly what I saw the last video.
I often have that in my issue list, believe me.
Any more questions?
Yeah, that's one.
So it seems like quite a pain to get Flutter to build and compile and get it all the way
an app running on a Linux phone.
Is it worth it?
Is there really nothing better to get an app running on a Linux phone?
As of now I consider Flutter as pretty liable for targeting Linux mobile because you have
this giant ecosystem of existing Flutter apps.
You have thousands of them which could theoretically run on Linux mobile but simply do not target
it yet.
You have 10,000 proprietary apps in Play Store.
Okay, we do not want to have them.
We have dozens of apps in Android all by the end.
All of them could run on Linux if we made it easier.
And all those patches are usually not patches.
I as an app developer need to apply to my projects.
Okay, I need to apply some patches too.
Are the vendors shipping my app?
But it's usually the vendors or the distributors shipping the distribution package to ship
Flutter.
I can easily build the Debian package for Flutter app.
But if I want to do it the fancy open source way, if I want to use Flutter as a build
dependency shipped from my package manager, then it's difficult.
But I have the vision of getting there one day where I do not need to install, use my
local Flutter installation with Flutter.dev slash getting started.
But using Vendor Flutter, Vendor in the upstream of my Linux solution.
And then it's harder but it's not the work done by the end developers.
So I think it's worth it because it's only the distributors who need to do most of this
work.
Okay, thank you.
Questions?
Okay, in the back, one second.
Thank you.
So not related to Flutter, but if you said that's so painful to get something upstream
from an open source perspective, how difficult would be or what would be the challenges,
for example, to say, okay.
As a community, we fork Flutter and we start supporting this fork because the maintainers
don't want these patches on the official one.
And we as open source citizens, we adopt this fork.
How difficult would be that culturally?
Well, forking Flutter entirely would be pretty complicated because Flutter is a rapidly moving
ecosystem.
There are many patches in the upstream and that could always break your fork with the
giant company standing behind pushing Flutter development.
So you have on the one side this giant company, namely Google, working on Flutter with a giant
community and you would need to maintain your fork of the entire Flutter system on your
own.
What I consider as more realistic is patching the build route and like single components
of the Flutter ecosystem, you could use as drop in dependency when shipping Flutter as
a Linux distribution, for example, that would be way easier and also that's where currently
see the Flutter floss Linux mobile ecosystem moving towards.
So this work is more or less being done, but it's at the beginning stage.
But I would not consider like forking Flutter entirely as a new framework.
Hey, with this one you can target Linux mobile too because then you would lose all the big
players already having their apps and continuing using Flutter.
Thanks.
Please give another round of applause.
