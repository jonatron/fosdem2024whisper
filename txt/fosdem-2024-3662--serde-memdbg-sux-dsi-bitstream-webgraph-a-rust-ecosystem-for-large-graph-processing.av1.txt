Hi everybody, we're just about to have our next talk, who will be Sebastiano Vigna, who
will be talking about a Rust ecosystem for large graph processing.
Sebastiano?
Thank you.
Okay.
Okay.
How many Rust programmers here?
Well, some.
How many Rust programmers who handle large data structures, like those of gigabytes?
A few.
Okay.
The first group is reasonably interested.
The second group is more interested.
The rest of the people can't sleep.
I'm not offended.
You can use the computer.
It will be very, very boring.
So okay, let me introduce why.
Okay.
What I'm doing is just announcing a few crates we are distributing that do very specific
thing related to large-scale data analytics.
And the original of this is a framework for graph compression that has been around for
around 20 years.
And that's being used by the community around the WWW, the web conf, the largest conference
on the web in general, academic conference.
For the last 20 years, there are many data sets that are distributed in this format that
are utilised and so on.
There are a lot of journals.
And in 2011, it was used to measure the degrees of separation on Facebook, if you remember
it, maybe you're too young.
But it was quite a feat at that time because, I mean, it was for 15 years ago and Facebook
was still rather large.
But we were able at that time to represent the entire Facebook graph in just 211 gigabytes,
which made it possible to run some pretty nice algorithm to compute this and distribution.
Maybe in this community, I should mention that in the late, I started to do free software
in the late 80s on the Amiga.
Okay.
So nobody remembers what it is, but I have some history with the free software movement
as well.
So at some point, we decided to move to Rust for the obvious reasons, like it's a high-performance,
safe language.
But, okay, all I said is in Java.
It was written in Java, started in the 80s and of the 90s.
And at that time, it seemed a very good idea.
Okay.
Then things happened like arrays are at most two billion elements.
And if you have graphs with 50 billion elements, you cannot even index the notes, which gets
very, very annoying.
And today, anything this size is done using memory mapping.
I mean, if you go to Facebook, Google, whatever, all the large structures are there in memory,
but usually they're just memory mapped because you don't want to start up time.
If you load in memory a graph that is half a terabyte, you wait minutes, whatever the
platform you are on.
But if you can memory map it, this time is amortized along the visit of the graph, for
instance.
Okay.
And we actually need to represent very large graph.
If you ever use Java, the access to memory mapping facility, I will not say words because
they would not be proper in this particular situation.
There are really lazy iterators.
If you're written in Java and iterator, you know what I mean.
And okay, so we, to do this, we needed to port a number of ideas from a Java library
and to develop a few new things.
So the first thing is absurdity, weird name.
So it's a framework from epsilon copy, serialization, deserialization.
So you might know what is zero copy, serialization, deserialization, means that you serialize
something and then you use the memory, actually in the state it is, to represent the object
internally.
Okay.
So there is no deserialization.
You don't build a new object.
The piece of memory is directly used as it is.
And this is how things work, as I said, in all these organizations that have large indices,
Facebook, Amazon, whatever you want.
I mean, the index is on disk, it's memory mapped as it is.
It's not deserialized in any proper sense.
There are a few frameworks like abomination that do this kind of things in Rust, but they
all have problems for us.
The first one is the oldest one by Frank McSherry, writes into the serialized object.
So if you want to memory map a file, that's out of question.
You might know it is from the people that do the internalization library.
Nice idea, but it has a huge impact on performance.
It does some kind of runtime resolution of the access to vectors.
And then there is Archive, you might be familiar with, which too does some relative memory
that is differentiation.
And also the structure you deserialize is completely different from the one you serialize.
So you have to delegate all the methods and then each time you change one, you have to
change the other.
Not very practical.
So what we did was develop this framework, which requires a little bit of collaboration
from the underlying struct.
But the basic idea is that you serialize something and then you epsilon copy deserialize it.
So you access it, you allocate a very small amount of memory and then the rest comes directly
from the disk without any intervention.
And the way we do it, we remap vectors essentially.
You build a structure with a vector, but when you deserialize it, it has a reference to a slice.
In this way, we just have to allocate the actual struct that you want to deserialize,
but then anything that is a pointer inside just point to the original memory.
So epsilon copy, the idea is that it's not a zero copy because we did a little bit of
copying, epsilon copy, a very small amount.
But the advantage is that now you have exactly the structure that you serialize.
It's exactly that structure with all its methods.
The only thing you have to do, if you have vectors, there must be a type parameter and
you must write the access method for as a left to a slice.
Of course, when writing, you write for a vector, but when you read, you read it from
a slice.
This is the collaboration you need.
But then, completed transparently, like you can do it with basic type.
You store a vector and then you memory map it and that's it.
And what you get in T is a reference to a slice.
More precisely, something that derives to a slice, to a reference to a slice.
And again, you work essentially transparently with respect to the framework.
Unlike the other cases, and since there is nothing intervening, resolving the pointers,
there is no dynamic resolution, everything is done at this realization time, zero impact
on performance.
The performance is exactly the one of the original structure.
We use this to map massive immutable data structure like representation of sequences
of sets and so on that are like those of gigabytes, 100 gigabytes on disk directly on memory,
without any load time.
So if you handle large immutable data structures, that could be for you.
Memdology, that's a very small crate, but it's a problem we had.
Okay, it's a high performance memory occupancy detector, which sounds ridiculous when you
say it because, well, it does as to measure the memory occupied.
It's not so easy because if you use the one that are around, so it is like a large vector
and few other things, this is the amount of a located memory.
These are the three more common frameworks, sorry, crates that do that, and this is the
amount of time that they take, and this is the amount of time we take.
So the reason is that without some infrastructure similar to the one of absurdity, you have
to iterate through collections to measure the space occupied.
And if you iterate through a billion element collection, it will take a lot of time.
So we routinely measure the space and occupancy of things that are like 50 gigabytes, it will
take eight minutes.
So we develop this if you need to measure the actual occupation memory, not stack occupation,
the actual occupation in memory of something large, try MDBG.
Also, as a nice, it does you a print out of the structure with the old memory occupancy.
It's important for us because we do all the time this succinct data structure that have
various components and we need to know the relative size.
So this is only if you have very large data structures.
They are small, you can iterate, no problem.
Succ is an ongoing problem, ongoing problem, yeah, it's an ongoing problem.
I won't say an ingrate, but it's actually kind of an ongoing problem.
And it's a part of an existing C++ project and Java project about succinct data structures.
You might know what they are.
If you don't, no problem, you don't need this crate, but they're very fashionable now.
There is one crate at least that does this, but we wanted to have something more sophisticated.
So if you're interested in Elias Fano representation of monotone sequences, ranking, selection,
and so on, please have a look.
This is really getting to existence, but we like to have feedback.
Fungal piece bit streams, very, very high performance bit stream with read and write
by word and support for big and little Indian files and a lot of instantaneous code, gamma,
gamma, delta, go long, and so on.
This is kind of cosy you'd like in MPEG or so on, but we use it to do graph compression
and we spend a lot of time to optimize every single shift and move and also to give you
scripts to just run and we massively test all parameters you can configure on your architecture
so you can choose how to optimize the speed of the coding and the coding specifically
on your architecture.
Like which word size to use to pick up stuff from memory, using the coding tables or not,
and so on.
And this comes from quite a long experience in doing this with web graph.
So if you're interested in writing this instantaneous code for compression, you should have a look
at this IBS stream just to tell you a gamma code is ready in less than two thousand seconds.
So I think this is pretty nice.
Okay, the last piece which is probably the more specific, so you might less be interested
in is web graph.
So web graph is a framework to represent very large graphs in a compressed form.
So typically snapshot of the web are represented in about one to two bits per link.
The software heritage graph which is a graph with about half a trillion edges, it's three
bits per link, Wikipedia costs 10 bits per link, it depends on the structure of the graph.
But usually in particular the graph is redundant, you can represent data in 10, 20, even 50
times less than you do with a redundant version.
It's a rough sport of the Java version and of course we use the SIB stream for instantaneous
code and sucks for pointers in the big stream.
And just to give you a very simple example, the software heritage graph is 34 billion
nodes and a little bit more than half a trillion arcs and you can do a BFV visit single thread
in three hours.
It's very nice.
Okay, you have to notice half a trillion edges.
The ergonomics of the whole thing is incredibly better than Java.
Just having real iterators changes completely the game because it's much more natural that
what we had.
And this is all the others are crates that you can download and use that are pretty stable.
This is still on GitHub because it's a lot of code, a lot of optimization.
We just merged into main the last big chunk of modification, the API should be stable
by now.
But this is very specialized.
I mean unless you have graphs with hundreds of billions, half a trillion arcs, for instance,
this biologist did this huge data set with a trillion protein-protein similarity edges
and they did it with web graph because if you need a trillion edge and you need to distribute
it and analyze it on a standard hardware, not a massive supercomputer, you do it using
compression.
There is also support for labels on the edges that you can enumerate and it's much better
in the new version than in the old one.
And one thing that we had to fight a lot against is lenders.
So if you're familiar, I don't feel familiar with a lender idea.
It's generally an idea and a number of crates for Rust.
Lenders are iterators whose return object depends on the iterator itself.
So iterators in Rust are thoughts that give you values and you can take the values and
use them.
But in all this kind of batch processing for graphs, you iterate on the graph and you cannot
look at two nodes at the same time.
There is a sequential iteration which goes through a file or a sorting of labels.
So you need to be able to say, okay, this is the next batch of successor, use it, but I
won't give you the next one until you finish with this one.
To do this, you need to use essentially generic associated type.
Not really that.
We use higher order trade bounds.
But you need to impose that each call to next can be made only when the previous one went
out of scope.
So you cannot do two calls to next in a row.
And this is called a lender.
There are a few crates that implement lenders now which have, say, almost feature parity
with iterator, but the fact is that presently they work because of bug in the borrower
checker.
So the borrower checker doesn't check certain things that if fixed would make all these
lender crates not work.
And at that point, we would be in really deep shit because we have no idea how to do this
other than the way we're doing it.
In fact, we're even in a situation where we have a chain of an iterator returning iterators
and the final value depend on state on the initials thing.
So there is a propagation of bounds of on lifetime that goes through two different types.
And that gives me headache each time I look at it.
And in fact, I didn't even invent it.
I asked on Rust forum and they said, I have this completely crazy situation.
What can I do?
And a very nice guy wrote a type like this with 25 different implied type bounds and now
it works.
But let's hope it continues to work.
But this is just to say we need a little bit more borrowing in Rust than there is now to
make this work properly because it has been a little bit of a pain to get something like
an iterator in which the return value depend on the iterating object.
In the last thing, if anybody know how to get one thing done, index get.
Since 2015, it's been sitting in the issues of Rust to have an index trait that gives
you a value, not a reference.
Because index give you a reference.
Now, index give you a reference is fine.
But if you do compress, succinct, any kind of implicit data structure, index giving you
a reference is a pain in the ass.
Because you don't have the data.
They are implicitly represented.
You need the trait that giving two nice square brackets will give a value, not a reference.
And then you can enter the world of modern implicit data structure.
So if you know anybody who can implement this, convince someone in compiler team to get done
with this, you please do it.
I'm over.
Thank you.
Thank you.
