Thank you for staying up until this point.
My name is Liviu Kirku and together with my colleague, Rizvank Rainer, we are both open
sieve developers for over 10 years at this point.
We're going to be splitting the time into half.
I'm going to be covering a bit about open sieves and then I'm going to be talking about
IMS and why we chose to push more time into this direction and everything about the new
IMS working group in the open sieves community.
And then Rizvank will talk about the good stuff, right, the Volte and the 5G extensions
and how we are tackling them.
For this release, by the way, so there's that.
About open sieves, if you're not familiar with it at this point, it's a high performance
open source sieve server.
It is fully RFC 3261 compliant.
Various usage throughout the industry.
It started around 2008, I think, so it has 16 years of runtime by this point and of experience.
Multifunctional, you can use it for all sorts of sieve scenarios.
It is programmable and it's written in C, so it's again, it's quite fast.
Quick idea of how, I didn't start my timer, of what kind of companies are using it and
this is just the tip of the iceberg that I selected on the, who is using section on
the open sieves wiki.
For example, it supports a lot of protocols from the basics of TCP and UDP then to the
protocols which stack on top of them, such as TLS or WebSocket and other protocols such
as sending head packets to Homer or MSRP for SMS in IMS networks, of course, diameter for
accounting and whatnot.
Also there are a bunch of extensions of sieve extensions that are supported from the very
basic which are, I mean, by basic I mean ever since the project started, they were developed
such as presence, the back to back is also a set of specs for which open sieves is popular.
There is also an SDP parser.
We don't do that much media in open sieves but you can definitely manipulate the SDP quite
a bit.
So there are those basic specs but they are also kept up to date, right?
For example, the sieve digest authentication, as soon as the RFC came out, we got contributions
and we got it up to speed with the latest hashing algorithms.
Thank you to Max for that.
So also the SIP push notifications, right?
You could do them for just like a glue scripting here and there, you could achieve it but also
they came up with an official IETF RFC for it which also is supported.
And then there are other types of interfacing.
From SQL databases, like the most popular ones you can think of, MySQL, Postgres, there's
even a virtual database.
We came up with that kind of lets you fail over between them, right?
You can write to the virtual and it goes either to Postgres or MySQL as a fallback, let's
say, from all the way to NoSQL databases.
You get these document-oriented databases such as Mongo or Couchbase or caching databases,
the memcache d and you can build your application the way you want to.
And finally there's interfacing in the form of just do it via REST queries, right?
Or you could be using a message queues or even diameter messages.
Radius, let's try to move past it, right?
It's so old by this point.
Let's start using diameter.
Or you could even interface with MI.
That stands for management interface.
It's quite a fun protocol that lets you interface, it's JSON RPC based and lets you interface
with OpenSIPs.
You can control its behavior, you can trigger reloads in various caches it can do or simply
control the SIP signaling.
There's also some part of that.
How do you program it?
It has a bespoke scripting language.
It's not that difficult to pick up.
You're also, in case you're worrying about, okay, I do not understand it, it's not readable.
Yeah, exactly.
Okay, it knows about it, interesting.
There is also syntax highlighters so you can have quite a good time writing OpenSIPs config
code which we've, I've tried, I mean, I've mostly tried to push it further down as time
went but it is what it is.
I think it's up to a good point at this by now.
In that you get these nice variables.
They are scoped.
You can start from a single worker scope and then to the SIP transaction scope.
They are kind of concentric, right?
You get the SIP dialogue scope or you could even have like the biggest scope possible,
right, with globally shared variables that are persistent throughout the lifetime of
the server.
There are lots of modules you could be building services with from SIP registrars or SIP residents
all the way to doing more of an operator kind of workloads such as least cost routing.
You could do load balancing to your Alba and Gateways.
You could do maybe topology hiding on as the request exit your network and hide your
IPs or whatever sensible information your SIP packets may contain, for example, the
via headers, right?
That's a typical use case.
And even not traversal capabilities, right?
Because we've also, we are familiar with the problems that can happen there with the contact
headers and the private media, media IPs.
So all of this leads to the creation of various class 4 services, right?
And services such as SIP front ends, maybe you are building a platform that does wholesale
trunking or even a simple redirect service that you could be scaling and building a business
with, right?
Such as portability service or least cost router or a C name dip as simple as that, right?
Or even a stair shaken service, right?
We also have a stair shaken implementation.
Be sure to check out the stair shaken module so you could be doing either side.
You could be doing the siding side or the verification side and that's it.
Make a service out of it.
Or you could go into the enterprise feature domain and look into building PBX experiences,
right?
With conferences, hunt groups, call pickup, call parking, IVRs, voicemail, all that kind
of stuff.
I put a small asterisk there that some of these require media.
So not sure if I mentioned it, but OpenSIP is at the end of the day either a back to
back or a C proxy.
It's mostly a C proxy.
It can be a back to back, sorry.
But it does not do that.
It does not do media.
It does not carry media at all.
So maybe you will have to use an additional service here, a free switch or an asterisk
to achieve these features.
Last but not least, it has built-in high availability and the clustering makes it so you can build
these highly available services.
And next is the IMS and a bit of info around it.
It is a specification from the 3GPP consortium and it's not really an, let's start from
what it is.
It is an architectural framework.
It is a set of recommendations, a set of microservices that you could be structuring
your platform in order to not only achieve the voice services you want, either IP multimedia
services, the group chats, the file transfers, the voicemails and so on and so forth.
But also it is, the designs are modular.
They allow quite a bit of flexibility and it does not force you to go down a specific
path or makes it as loose as possible.
So for example here we can see an IMS network broken down into its three major layers, which
is first of all there is the concept of the user equipment, which is here on the bottom,
your cell phones, your laptops that are connected to the platform.
They are doing this via the transport layer.
Okay, I have here on this slide.
And this is not of much relevance to open-sifs per se, right?
This is your radio access devices and the wireless access or the PSTN interrupt if you
have devices coming from that side, right?
They are hitting this MGW, the media gateway.
But what's important is that they end up in your IMS layer, the control layer.
And here is where it is of great interest to open-sifts specifically because two core
protocols here are SIP and diameter and we happen to support both.
And the components that open-sifts could fulfill the role here are mainly this.
The first one is the proxy call session control function, CSCF.
It is the first entry point into the platform.
It can be discovered by the IMS terminals and typically receives its traffic through
an IPsec tunnel.
So this is one of the first things that Rosbano, one of the things that I think is the last
actually, that he'll be talking about and we are still to implement this part.
Coming next, there is another call session control function in the IMS topology that
is interrogating CSCF.
You could also put an open-sifts to fulfill this role and program it.
So it acts as a relay.
It serves the domain, maybe does some validations for the SIP calls coming in and maybe does
some interactions with the subscriber, locator, with the SLF.
Finally, and here is where the big part of the logic will be in the IMS platform is the
serving CSCF.
And here is where the users, the user registrations are processed and they are accepted.
Of course, they are stored in the HSS.
I'll get there in a second.
It can also store billing information.
It handles the SIP session timers and it talks to the HSS using the ammeter.
If you take a look at the connections, the where is the full line is SIP and the dot
it is the ammeter.
And finally, we have stuff that is not really related to open-sifts and here is the HSS,
the subscriber database.
We talk to it via the ammeter and the store's user profiles provides info and pretty much
you write, you both write into it and pull data from it.
The SLF is only required when you have multiple databases.
Media resource function also interesting to note provides the media functions and playing
announcements.
Again, you'll probably be doing this with some other software than open-sifts.
The breakout gateway and that kind of covers the control layer.
And finally, we have on top the service layer and here there is the SIP application server,
which again we could be using open-sifts here.
And it can host a variety of SIP services from redirect, roll, proxy, even a back-to-back
user agent providing the multimedia services.
And I wanted to kind of quickly go through my experience of working with the 3GPP documentation
and my few tips on how to find your way around them because let's say we let's take the
IMS-SH interface, right?
And let's say we want to work here is where what it pertains to.
It pertains to interactions between the AS and the HSS and also the, it's also an AS,
even the OSA with the HSS.
And if you make the mistake of just Googling for these documents, you might not know whether
you've run into the latest version or not.
Here we see we get the top result is V15, right?
But it turns out that had we gotten to the 3GPP portal, which has a nice selection here
and ways for you to filter the documents, just dial in the SH interface, hit search,
and it gives you the exact two documents that you need.
Let's zoom in through one of them.
There is a nice versions tab.
You can click it and there you go.
The 17 is actually the latest version.
And there is one more gotcha here.
It's where the 3GPP works in tandem with the European Telecommunication Standard Institute.
And that's where the standard actually gets published and accepted and they just put a
one in front of it, right?
So from here, let's say we have, that's the rule.
You have a 29329 spec from 3GPP.
Once it's accepted, it becomes the one 29329.
So here now we know what to Google for.
It's TS version 17 and it gives us, right?
So we get the result.
Alternatively, if you still don't find it this way, you could just go to the directory
here on the ETSI website, on the ETSI website and just manually dig for it.
You can go to the range, you get the latest and there you go.
The PDF is there.
So kind of interesting to note how these documents change over time and what to expect because
let's, this specific SH document, it started in 2002 and it actually received updates even
up to 20 years later.
So this is from a couple years ago, the latest version, 17.
And meanwhile, the app code has changed from two.
These are, this is just a diameter packet and a bunch of AVPs and some command codes have
shifted and the methods have stayed the same, the user data profile and so on.
But a lot of AVPs have been added.
So you can see, so we're going from eight AVPs all the way up until 25 or something.
So the complexity of the networks has grown as more and more requirements have been put
there.
So they have been represented as AVPs, of course.
So it's more data to be pushed.
Also more errors to be replied to, right?
So we have started with six errors.
Now we've got maybe 12 or somewhere there.
And to help to draft all of these and to understand better what requirements we are, we have
to implement because they are, after all, even with the 5G, there are tens of documents
on the 3GPP website.
We started this working group for IMS on the OpenSYF mailing list.
And the basic idea is just to get feedback to start open discussions, right?
All of these are public.
You can Google for them on the web.
And they will help us a lot in shaping the development of the IMS support in OpenSYFs.
And with that, I will leave it to Resvan to go into Volte.
Thank you, Livia.
This, Livia, presented how we got into the IMS world.
Now I'm going to show you how we are approaching it from our perspective.
That includes the feedback that we got from the working groups, as well as feedback that,
as well as the way OpenSYFs works and how we put all of these together.
Okay.
There you go.
And first, let's do some sort of history.
Probably most of you already heard of Volte.
It's voiceover LTE, or voiceover 4G infrastructure.
It started, the specifications started in early 2000, but they got standardized in 2010.
And then there were a couple of implementations.
It was first released in 2012, but nowadays it grows a lot and expanded a lot.
In 2020, they were documented around 226 operators.
And it offers a lot of improvements over earlier networks, such as 2G or 3G.
It has faster call setup, high definition of voice quality, reduced bandwidth, reduced
background noise, support for video calling and video codecs and so on.
This is more or less the Volte architecture, although it might be quite complex.
As you can see, there are multiple components.
What I really want to show you is actually only these three squares.
So is the EPC Evolve packet core, the CS and the IMS.
So what we are only interested from the voice perspective is the IMS, which stands for IP
multimedia subsystem.
So we are only interested in the multimedia features of this whole scheme, especially
as Liviu said in the CSCF components.
The same thing is shown here.
So we are not interested, at least from the voice perspective or from the multimedia perspective,
we are not interested in radio frequencies.
We are just interested in the backbone, which offers us the IP connectivity so that we can
carry our voice and our calls over these networks.
This is the CSCF functions, which basically uses different interfaces, such as CIP for
different communications for GM, where is it?
Here is GM and MW, so communications within the CSCF, as well as diameter interfaces,
which helps us discuss with the HSS or to the PCRF for charging.
It also requires the IMS, aka, which is a way of mutual authenticating between the user
equipment and the proxy.
So we will be discussing about this later on.
So that was in 2012, actually in 2010, the Volte specs were released.
Five years later, actually, no, it's ten years later, the voice over new radio or voice over
5G networks specs were released.
It brings some improvements over the previous Volte or 4G, such as better codec support,
faster call setups, low latency capabilities, but it also requires and has a couple of specifications
of falling back to Volte.
This is quite important because it keeps the high quality of the call, even though you're
not able to operate in a 5G network.
However, it completely drops to GM 3G, so those that fall back is no longer available,
whereas it was in 4G.
This is how a 5G network looks like.
Again what's important here is actually this is how a 4G architecture looks.
This is the 4G architecture.
I'm showing both of them because, as I said earlier, 5G requires or forces you to fall
back to 4G in case, I don't know, for example, you ran out of the radio range, so coverage,
yes.
So both of them, you need to support both of them.
However what's important is that the IMS architecture, more or less, stays the same.
So both of them, wherever the user equipment reaches you through the 5G or through the
4G, the IMS subsystem is more or less the same in terms of architecture.
However, you may see that these are different colored arrows.
So here, if you remember, we were discussing diameter with HSS and the subsystems of the
4G network.
Here there's a blue.
That's because we will be using a different protocol and a different interface.
So as I said earlier, the core architecture is quite different.
However, the IMS architecture is the same.
For us, as a Cproxy, as a CSEF helps us a lot because we don't really need to change a lot of
things.
We can have one simple deployment that serves both of them.
However, we are using different communication interfaces, whereas in 4G we were using diameter,
starting with 4G, we have to use HTTP 2.0.
And again, I need to emphasize that voiceover new radio requires you to fall back to a 4G
call in case 5G cannot be properly handled.
So since we have the same architecture, we will be basically taking care of the same
process, the PC or P or I or S call station control function, the CSEF function.
However we have a different transport layer.
We are still using CIP for the control plane.
However, we are using HTTP 2.0 for interfacing with the IMS components.
This is an example of fallback from 5G to 4G.
Basically I'm not going to get into details of this slide because it may be quite complex.
The idea is that you basically have to use the same infrastructure of 4G in case 5G does
not work.
This is why it's very important to also support 4G.
I'm emphasizing this because you can't choose one or the other.
Actually you can choose only 4G if you want to have a 4G network, but if you want to have
only a 5G network, you can't have it without 4G because you need this fallback in case
5G is not always available.
In terms of implementations, in OpenCS we try to keep things as flexible as possible.
We try to avoid hard coding interactions with components.
You know why?
Well, exactly why I leave you said earlier because these specifications change very, very
quickly.
So you have to adapt as fast as possible.
It's very hard to adapt if you have queries hard coded in your code.
That's why it's from our perspective it's important to have everything in a configurable
way.
When we develop the diameter interface, we try to push as much as possible in the script
so that whenever, for example, you want to issue a query to a diameter server, you can
handcraft it in the script.
So we provide this flexibility in the script.
You just build your JSON which is equivalent to the diameter and just push it, wait for
a response and handle the response accordingly.
Commands can be handled both synchronous and asynchronous with regards to the message processing
so it's quite efficient.
We are also planning to act as a diameter server.
This is useful in order to get notifications or events from AGLS for example.
You need to update your profile.
Another example is the user equipment gets disconnected, either turns off gracefully
or not, who knows, or just runs out of network.
You might need to know these events so that you can cut the communication or terminate
the calls, the ongoing calls.
We built it on top of the free diameter open source project.
That's because we didn't want to get our hands dirty with diameter.
So we just used somebody else's code which is highly used and highly stable and so on.
So that's why we chose the free diameter library that is provided by the free diameter project.
The only problem we had was integrating it from open-source multiprocessor architecture
to diameter single process multi-threaded architecture.
That's why we created a dedicated process which talks with all the other SIP workers
and synchronizes in order to ensure communication with the diameter server or servers.
In order to support 5G, we also had to create an HTTP 2.0 interface which is going to behave
similar to the diameter interface.
So again, commands can be handcrafted, requests will come to script.
Again, this is important to us so that we keep open-source as flexible as possible.
We already have the client side available through the REST client which uses Libcurl
which is already supporting HTTP 2.0.
However on the server side, we will be using a different library.
It's called ng-http2 which provides different hooks that you can use in order to parse HTTP
2.0 messages.
In terms of authentication, all the 4G and 5G specifications require that the user gets
mutual authentication with the core network.
So this means that you don't just need to authenticate the user but the user also needs
to authenticate the core and create a secure communication between these two.
So this is what the AKA authentication and key management agreement tries to offer through
mutual authentication through one-time passwords.
Basically these are some, they are called authentication vectors so it's a set of parameters
that are shared between the user equipment, the CSEF and the authentication server here
in the AHSS.
So these parameters are negotiated either, for example, the shared secret is stored into
your SIM.
So when you get a SIM from your carrier, it already has a K value which is known by AHSS.
So this is not real-time.
It can also be real-time through some interfaces but it's not always like that.
So the idea is that you negotiate some parameters of the AED through one channel and then when
you start registering through open-sIPs, the SCSF goes and asks for these parameters on
a different channel.
This way these two will be able to create a secure channel.
I will talk later about this.
This is how...
Go and get these vectors through different interfaces.
For example, you can go through diameter.
This is 4G.
You can go through HTTP2.
This is 5G.
You can actually get a route and provide your own parameters.
For example, you can even use CP which has support for akav1.
You negotiate those parameters like simply copy-pasting from one project to the other
and that's it.
You will get aka authentication.
So there are different ways of getting this.
We don't want to hark open-sIPs into getting one single, only one of it.
akav1 is susceptible to many of the middle attacks.
That's why we also need to use IPsec.
Once we negotiate the IEC and the keys, the integrity keys and safer keys, somebody else
might spot them and might use them as a man in the middle.
That's why we need to also use IPsec.
However, this has been improved in the second version.
Those integrity keys and safer keys can no longer be used starting with 2015.
Basically this drops the requirement of IPsec.
You can have different other channels of integrity.
For example, you can use TLS.
You first establish the call through TLS, exchange the keys securely.
Then you can use that communication channel to communicate.
In conclusion, in order to provide Volte, it's not enough to use just-sIP.
Whereas it's enough to provide telephony using just-sIP and RTP.
In IMS, you need to have a diameter client and server support.
You have to have HTTP to client and server support for offering voiceover 5G.
You also need to implement IMS, AK1, V1 plus IPsec.
Or if you don't want to do IPsec, you need to implement AKV2 and WebRTC.
There are a lot of requirements that you need to implement.
Everything is very dynamic as you've noticed and very hard to process.
In short, everything is MSM.
Some of you that already have experience with that have the same opinion as me.
What's next?
We put everything together and start working on it.
We already have the diameter stuff.
We need to work on the IMS, AK implementation.
It's actually almost ready.
We need to implement the HTTP 2.0 server.
What's very important for us, because this is something that the community gets afterwards,
is putting all of them together and provide a fully working setup.
We want to provide as many tutorials as possible to help people understand and prevent having
them do what we've done, all this documentation and all this, as well as the IMS working work.
We want to spare you of that.
We can also provide some working examples through Docker containers.
For example, the guys from Voice Center already did that with the first stage of our work.
Yeah.
Putting all of them together.
If you want to get more on this topic and more about OpenCiv's, come join our OpenCiv
Summit in 2024.
It's going to happen in Valencia between 14th and 17th of May.
Looking forward to seeing you there.
If you have any questions, if you have time for questions, please shoot.
All the time we want for questions.
Go ahead.
There's one over here.
That's a very good question.
The question is why do we need a specification for the internal communication?
I think the reason, so they're actually two answers.
One is in the Livio side.
One of them is here.
Where is it?
Here.
Indeed, HSS through CSCF is internal communication.
You could normally use anything right here.
It's very common for these implementations to change.
That's why it's a good idea to have them.
For example, the initial deployment of Open5.js was using the front hover HSS, which is a
very nice project, but I'm not sure how updated it is nowadays.
Nowadays, there's another solution for HSS.
It's by HSS, which is more flexible.
It's written in Python.
If you wouldn't have this interface, you would have to redo the whole.
That's one.
The other one is, as you can see, HSS also discusses with CIP application.
This interface, this may not be the same in the internal network.
It's a different layer.
It's a service layer.
You can have multiple service layers.
At that point, it makes sense to have some sort of specifications.
Yes, but we are not, per se, sending the notifications in the OpenCIP configuration.
What we give you is just a hook.
We've got all sorts of the timer, the specification.
It has a chapter where you're supposed to periodically force a re-register from the device, also
through a push notification.
Both that and the scenario where you receive the call imply that you should generate that
push notification.
How you do it, it's out of the scope of the OpenCIP.
Probably you'll do some kind of a Python script, some bash script that grabs your app ID,
app developer ID with the device ID.
That's the PN, I've forgotten the name, PN, PRID or something like that.
That uniquely identifies the device.
There you go.
You send it to...
Yes, because it calls, for example, with Apple, the APNs for notification service.
It's not CIP.
It's probably HTTP getters.
I'm asking this because I'm from B2Touch Project, which is a mobile operating system with completely
different push architecture.
It's flexible and that's pretty nice.
That's interesting.
It's a scenario you should be using push notification.
There's another question, Max?
I'm just curious, why did you decide to put, like, a build-in application?
Why not rely on something like NGINX?
That's also a very good question and we did think about that.
Yeah, we considered that.
We did consider that.
We wanted to have a full solution by ourselves and fortunately, integrating HTTP2, we decided
it's not that hard.
What we are planning to do...
That's true.
What we were planning to do is also provide both ways or have the hooks.
This provides the HTTP2 server but also all the hooks that an external server might get
to push them, for example, through an MI, to use the same commands through MI.
As you said, have an HTTP2 separate application that receives the notification and just triggers
some MI commands to, let's say, terminate the calls or terminate the...
We do consider this, if you have any.
Yeah, all I could add to this is that this is a quick way of achieving kind of a version 1.0
of all of the HTTP2 problems.
We've got this client-side salt, also some solution for the server side.
If we do see this becoming a problem, then we could absolutely go with a design like you suggested
where it is a bit more complex.
Now you have to deploy both an Nginx.
You have to kind of get your hooks in there and convert them to some kind of UDP datagram via MI.
Definitely, that would scale better.
But also, it's worth mentioning that we haven't yet have gotten a use case for it as server side to begin with.
So why optimize prematurely?
I guess that is the best reason.
We didn't want to optimize too quickly until we get some usage because at least with the diameter server
we have quite a bit of methods, right?
The push profile request, the registration termination, there are quite a few where you really need to be...
to be invoked by the server actually.
No, but I think this is like a very good question because this is sort of the questions that we're trying to solve
using that IMS working group.
People getting us ideas and trying to get pros and cons of different solutions.
Indeed, here we have two different solutions and it would be interesting to, let's say, debate these over that working group.
So it's free, join it and your ideas and feedback is welcome.
All right, no more questions.
Thank you so much, guys.
Thank you, Saul and Lorenzo, for hosting us here.
See you all next year. Go ahead.
I didn't get an opportunity.
The question is that regardless where the radio part, the radio network originated the request from,
whether if it was on a 4G, 5G, ultimately you get to the control layer, right?
So how does that differ or what actually makes you switch from diameter to HTTP2?
Why not always use diameter even in a 5G network?
That's simple because...
We could discuss it though.
Okay, yeah, let's go.
I think the answer is that the components of 5G don't support diameter, so you need to talk with...
Thanks everybody for sticking to Leanne. Hope to see you next year.
Thank you.
Thank you.
