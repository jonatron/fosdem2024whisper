We have Dr. Candace McKita Moore with PhosphorDocs.
Thank you.
I'm Candace McKita Moore and I will be giving a presentation about PhosphorDocs.
First I'll tell you a little bit about myself, then I'll tell you what I mean by PhosphorDocs.
Then I will try to convince you to get involved in this or if you're already involved in it,
kind of give you some tips about what you're doing.
And I'll conclude with some deeper insights about how to be successful when you do this.
So about me, I have my bachelor's from Columbia.
I got my MD and Technion.
I went further in my medical training.
I did an internship.
I did further training in emergency and radiology.
Now I'm a research software at the Netherlands, a science center.
So stopping my biography there, you can probably figure out what happened.
I married a really awesome guy and I wanted to get out of the place I was.
So he got a job in Europe.
I said I'd follow.
I've learned Dutch.
You can't really work in the hospital when you speak, don't speak the native language.
So I sort of reverted back to something I did before I went into medicine,
which was software engineering.
These days, like almost three years later, I do speak Dutch and you can find me two days a week now
at Rutter Damoressens Medical Center.
So I think I know a little bit about this because I've helped create a lot of what I call
phosphor docs and by that I mean free open source software meant to help medical staff
accomplish medical research or treatment goals.
So right now I work mostly on CVSL, which is sort of processing arterial spin labeled sequences
and other sequences from brain MRIs.
And that's really typical of what I do.
Usually I'm working with radiological data, but not always.
So an example where I did it is Resurf EMG.
That was a project where I was the lead engineer because my center gave a grant to a group
at U20 to work with Respiratory Surface Electromography.
The grant ended, I guess, about a year ago, but recently I realized that the scientists
and engineers I work with have actually had a couple releases since I left the project,
so it's still going strong across a couple academic medical centers.
So now I want to warn you a little bit if you're new to this area.
If you get into this, you're going to be annoyed.
So one thing I want to warn you about is that in hospitals and health systems, on average,
we don't have the best computer scientists and software engineers.
That is not always true, but maybe you could see that as a positive, right?
Because if you know anything, you're going to come out looking like a hero.
But seriously, I'm here to try and get more people who are really enthusiastic and into
open source to think about doing these kinds of projects.
Unfortunately, when you do this, if you work in a hospital, you're going to be at best
outside of a hierarchy.
At worst, you'll be on the bottom and people will treat you like the gum on their shoe.
Okay?
Just deal with it.
That's part of the culture of medicine.
It's a very strong culture.
One of the things that distinguishes it is the language.
I can tell you from experience, if you're sort of a math nerd like me, nobody's going
to speak your language.
Just as an example, a long time ago, when I started doing quantitative image analysis
on radiological images, I tried to talk to one of my colleagues who was another doctor
about it.
I was just sort of going off about this and the dot product.
He was like, wait, wait, wait.
The matrix is like the matrix of the movie, right?
He wasn't kidding.
I mean, that's kind of just what you'll have to deal with.
I want to add a couple final warnings.
If you're truly hardcore into FOSS, you will just have to make peace that people in healthcare
systems, they use all of these proprietary products when perfectly good FOSS is available.
Part of that is trash issues.
Part of that I really blame on us as FOSS creators because a lot of FOSS projects that
are actually pretty good if you bother to read the code, just have a lack of swag and
swagger.
What do I mean by that?
I brought an example.
Locos, a little merch, make your thing stick in people's mind.
If you push past all of this and you're creating software, there's a final thing I want to
warn you about if you're working in a hospital system.
Unfortunately, within the hospital bureaucracies and health system bureaucracies, there are
some people with power and some pretty weird ideas about the possibilities and ways to
make wealth through technology.
At some point, like myself, you will run into people who tell you, no, you can't open source
this because otherwise you won't have any money and we won't have any money and that
thing will work.
It's not that they're evil.
It's just that they aren't aware of how these things can actually be viable.
Just as one example, most hospital and health systems have some really kind of wackadoodle
legacy systems that are all kind of joined together in a weird way in the hospital.
If you do something that needs to harvest and move around data, then you can make FOS
and also charge the hospitals just to customize what you made.
This is just one model.
I don't have time to get into all of them, but you have to tell people this because otherwise
you'll just hit a hospital lawyer who says, no, no, no.
You can't open source that.
Now that I've told you about all of these things, I want to tell you why to do this
anyways.
The simple answer is it matters.
I've seen so many bright minds like literal PhDs in physics go to startups where they
do things that in my opinion don't matter as much like use neural nets on fashion on
the internet, whatever.
I tried this in a room of doctors and only one person got one of these.
I'm curious if anyone will even guess I'll give you some merch.
Can anyone identify either of these diseases?
No.
Okay.
I'll give away a merch at random later.
These diseases are diseases that we've had phenomenal success in getting the life expectancy
up on.
It's cystic fibrosis and sickle cell.
Specifically, I can tell you in the case of sickle cell, or both of them obviously, 100
years ago, computers and computer programmers were not part of the story.
Today, especially in sickle cell, that curve is going up and that is powered by software.
I can tell you that because I work with people who work specifically on this.
There's also the international humanitarian angle.
In my first slide, you saw me on the coast of Greece where I was part of an emergency
volunteer crew.
In those efforts, software actually plays a role because we have to do things like
track infectious diseases that are coming from people and going places.
You'll fight a strong culture in medicine, but you can win and you can do great things.
You just need to come prepared.
The three things at the top there, I think, are just non-negotiable.
You might not have the funding to get all sorts of swag immediately, but for crying
out loud, at least get a logo.
I've seen so many beautiful projects that don't have a logo and they don't have the
kind of person on them who will go out and speak about stuff and they don't get any use.
They're going to die.
The second thing is get a medical reader.
Get an MD who doesn't hold that much to read your documentation and give you honest thoughts
about it.
You may end up, like I do, essentially splitting your documentation so there's a side for engineers
and programmers and there's a side for doctors.
The third thing, not as obvious, but probably the most important, is get your legal game
going from day zero.
So, I mean that for everyone, even if you don't touch a piece of patient data.
If you touch patient data in Europe, yeah, GDPR, all of these things will come into play,
but hospitals are large bureaucratic institutions, health systems, anything that touches health.
Things like even getting the right contract may take months.
But if you don't strain this out, you will end up with problems.
So those three things are not optional in my opinion.
As you move forward, get some videos.
This is because, as doctors and other people of this type move higher in the hierarchy,
they get less and less negative feedback and they sort of want to appear in charge of everything
and they're not going to go to a meeting and tell you, I don't understand.
Videos are something they can play in the privacy of their own home and learn what you're
trying to tell them.
Another thing that I think is really important, especially because I do signal processing,
is getting more than one institution on board early.
You will discover that algorithms you might be using at one institution might not work
so well at another and it's better to discover that early.
And of course, it's great if your team has a nice person you can send to meetings.
And finally, once you've really built up what you're doing, please get a no-code interface
because a lot of physicians are not even going to want to do as much as putting into two lines
of command line and you will never convince them otherwise.
So on a deep level, these things I'm talking about, they really have to do with culture.
And when I think about culture, I sort of prefer the metaphor of water to fish, which
I think it was an American writer came up with.
You sort of don't know you're in it until you're out of it.
And there are really different professional cultures between medicine and software engineering.
One tiny example of that is how overloaded the terms are in computer science and software
engineering, like correctness.
I mean, how many things does Docker mean?
I mean, like, this is just painful for me, even though I'm kind of part of both worlds.
In the past year, I've gone to a bunch of things that were about diversity, and I sort
of left annoyed, but they talked about breaking the world up into F-cultures and G-cultures.
And they say F-cultures are hierarchical, conformist.
They emphasize the group, and they're usually non-Western.
These are cultures that, and now there are lines people think of as like exotic.
Yeah, I've worked in the Western medical system for many, many years, and I could tell you
that's medicine, OK?
Now, there is a reason for that.
We can't just all go our own way and do what we want, otherwise patients might start dying.
So you have to learn to sort of navigate our culture.
And unfortunately, you have to learn how to navigate your place in this hierarchy.
So you have to be very respectful of those above you.
You have to not sort of make them feel threatened.
So give them their learning in smaller doses.
I mentioned videos.
The other thing that is super effective is to actually go sit with people.
Even if they are like what we have in the Netherlands, technical physicians, they might
not be so technical.
Those people are supposed to be like halfway between an engineer and a doctor.
You may have to sit with them and show them about something like as simple as command
line that we're all very used to.
But that helps because you get a sense of what they will be capable of dealing with.
And you probably walk away and think, God, I just need to make a gooey because there's
no hope.
But you also get a sense when some of your nomenclature is unsettling for people.
And it will be.
And finally, please, worry about your legal issues.
And make something shiny in the sense that it has a logo and it's well presented.
So some final thoughts.
I want to emphasize that there's a lot of unevenness in how software is sort of spreading
across the world.
And I've worked in places like Haiti.
I've interacted with professionals in several African countries.
Software is spreading.
And unfortunately, it's often proprietary software.
And this is really terrible because what you see is when big companies, just to give an
example like Microsoft, sort of move in, they often set up systems intentionally or not
that make a sort of vendor lock in inevitable that the health data in the system becomes
so fused that the institutions, the hospitals just can't get away from this stuff.
It's like sticky.
So I think it would be great if people who made FOS sort of got there first and get their
shiny in a way that builds trust.
So I hope I've convinced you either to think about this or maybe to sort of up your game
if you're in this area.
And if you have any questions, you can send them to me.
My email at the Science Center is right on the bottom line.
And that's it.
Thank you.
Thank you.
Thank you.
