Hello everyone, thank you for coming and thank you for all the live streamers.
A little bit about me, I'm a college student living in the US and I've been doing a lot
of tech tinkering on open source stuff since I was little and there's been a lot of that
experimentation in my house.
Ubuntu has also been a very common operating system in our house just as much as Windows
or Mac OS and so I have a particular affinity to it.
On top of that the ASAHI Linux project that came out in 2022 sparked up an interest in
me and reminded me that what my mobile devices were capable of running on their chips and
so at the beginning I was running virtual machine Ubuntu images on my iOS devices but
that wasn't native, that was virtual machines so I wanted a native Linux first device that
was also affordable and accessible and that is where Pine 64 particularly stands out.
And another important fact is that Orin actually means Pine so I've had a particular connection
to them and affinity with them and dedication to their work.
And so what makes Ubuntu Touch on Pine 64 different from most devices is split in two
ways.
One, Pine 64's devices are not like most Ubuntu Touch devices and that is that like many of
the other talks earlier today have mentioned Ubuntu Touch runs on Hallyum kernels as opposed
to mainline kernels which means that there's a lot of extra components that are thrown
in the middle to do some abstraction to get a lot of the sensors and modem and such working.
However on Pine 64 devices we don't have to use that, we have to use instead our own
middleware often and also Ubuntu Touch is different than a lot of mobile Linux distributions
because almost of those distributions allow you complete control over your operating system
with a read write and file system and updates as they come.
Ubuntu Touch does a read only file system to provide an immutability layer as well as
over the air updates so updates happen in big chunks at once rather than individual packages
as they come.
So these pieces in particular have made adapting Pine 64 devices for Ubuntu Touch a challenge
but a welcome one.
So some background starts with the original 16.04 port came at a pivotal time for both
Ubiports and Pine 64.
For starters there was ongoing work to move to 18.04 from 16.04 although that work was
later abandoned in favor of focusing on the jump to 20.04 as the project was focusing
mainly on migrating away from legacy tools like Upstart when Canonical was developing
the project and towards a system D based stack which the Ubiports team has done a great
job with.
They also announced around this time the renaming of Unity 8 to Lumiri which is still an ongoing
process and involved not just the changing of a name in one place but in every single
bit of code which has provided some incompatibilities as we will find out later on.
The original PinePhone Community Edition came with Ubuntu Touch as well as the original
Pine tab and when both of these were developed they were done primarily by one guy Dalton
Durst who did a lot of work for not only these ports but also for the entirety of the Ubiports
team and so he was handling a lot of internal infrastructure which meant that when the team
was working on the eventual switch to 20.04 the Pine 64 port had to be pushed aside in
favor of a lot of other stuff that Dalton was working on.
And then another pivotal moment came in 2022 when first Dalton had left the development
team to go work on other projects which left the PinePhone port completely abandoned at
that point and Pine 64 also came out with the PinePhone Pro Explorer Edition which was
around the time when I started getting interested in the device but notably the device didn't
have an Ubuntu Touch port which means that I had to make that.
And so my process with this port originally began with looking at some of the other builder
scripts that were around. Notably there's one that is linked on the wiki called the DPA
image builder that taught me a lot about how the structure of the images are compiled which
allowed me to create this chart here and what's important about the PinePhone Pro is that the
bootloader is separated onto a separate SPI chip rather than within the images themselves
which meant I didn't have to pack those anymore which is a great benefit.
We can also use particularly tow boot as our bootloader which allows us to dual boot
using the volume keys or even switch into mass storage mode to flash directly to the
device from any other machine. But as I quickly found out most of the fun was in the kernel
and it didn't work immediately when I booted it because at the time the PinePhone Pro device
tree files were not in the kernel yet and so I had to pull them from downstream. Particularly
a lot of my kernel work has reflected Medjy's work and it was looking at his work that helped
me figure out how to get those device trees in. Once I passed that process I had a booting
and boot-to-image but this was not a distributable boot-to-image it was built manually and was
heavy. So I had to switch to making a port for a boot-to-touch. It uses a very similar
process but slightly different rather than reboot strapping from scratch. We actually
pull a CD image from Ubuntu server and then use a program called Devo's which can open
a Docker or Podman container and build on top of that CD image to create our final distributable
images. And last year at FOSSTEM I wasn't here but an early stage of my PinePhone Pro
port was shown off at the FOSSTEM stand and this year I now have four devices, the PinePhone,
the PinePhone Pro, the PineTab and the PineTab 2 all running on a much stabbler version of
the port. So once I got the PinePhone Pro ported it was time to move on to the PinePhone which
was still stuck behind on 1604 and I didn't have the PinePhone myself but I could do some
research in the meantime and so I found out actually that there was no reason why I couldn't
include both architectures for the devices inside of my kernel image which I also learned
from Meji's stream and once I had a unified kernel I also found out that we could use
tow boot on the PinePhone as well which once again split out that necessity of having to
pack the bootloader into our images and I asked someone to try it out on their device
and sure enough it worked which was wonderful which meant we had both the PinePhone and
the PinePhone Pro up within just like two weeks of each other. Shortly after that the
PineTab 2 pre-orders went live and at this point I was looking to make another port and
the UB ports team actually reached out to me and said do you want us to send that to
you so that you can make the port nice, happily obliged and they also sent me one of the original
PinePhone to maintain at this time and then the PineTab 2's port was very similar to the
other ones and I had most of the hang of it by this point but it was too early for a tow
boot port to be out yet so we had to use the UBOOT binaries which meant I had to go back
to learning how to pack that into the image properly but luckily besides the bootloader
the rest of the process was essentially the same and then after we had the PineTab 2 port
another community member reached out to me and said hey I see that you have these other
three devices ported up and I've got an original PineTab sitting in my drawer not doing anything
would you like me to send it to you so that you can create a port for that as well and
once again I said of course and unfortunately tow boot doesn't work on the PineTab either
because the run for how many PineTabs actually came out was quite limited so the main maintainer
of tow boot never got his hands on the device to create that port so we used the PineTab
2's process again and just packed the bootloader back into the images and that had two congruent
sides, a PinePhone set of images without the bootloader in it and then a PineTab set of
images with the bootloader in it. Notably the PineTab and PineTab 2 do use different bootloaders
because they have different architectures so there are individual images for each of
those devices. I was also warned about using kernel versions greater than 6.1 on the PineTab
because apparently it would cause a kernel panic and an infinite reboot. I found that
this was partially true but it was a very easy problem to solve all I needed to do was
move a module from internal to external which allows it to run after the DRM system that
it was relying on to run and then it never has that kernel panic because it never starts
before it's supposed to. As I stated previously though a ported device doesn't mean all of
its features are working so there were a lot of software component hurdles that I had
to get over to get to the state that we were in today. Two of the biggest ones have been
rotation and modem both of which were due to the niche circumstances of trying to conform
to Ubuntu touches, Hallym software stack. So in particular we have the split of what
most Pine64 distributions use versus what Ubuntu touch uses for starters modem manager
versus ofono which has also been mentioned in a few talks earlier. Modem manager generally
has a lot better stability with the EG25 modem that the PinePhone and PinePhone Pro use but
with several scripts we were able to get ofono in a similarly stable state. Another of those
components was the difference between IO sensor proxy and sensor FW. Sailfish OS also
uses sensor FW and we also use the ofono sailfish port but the thing is with sensor
FW compared to sensor proxy is that you have to write your own configuration files for
your devices and it also has to use a second adapter in order to properly read from the
IO buses. And so you can see here on these charts that both ofono and modem manager can
use EG25 manager which handles with the powering and a lot of the sending data between the
modem and that was how we were able to get a much more stable modem version on 2004
than compared to 1604. And with the sensor files even after all of those patches were
properly put in and all of our sensors were reading correctly rotation still wasn't working
and this was maybe my biggest frustration for eight months. And then one day I decided
to look in the log files and I noticed that the display was being enumerated as unknown
rather than DSI which in some places it says that correctly but in other places it doesn't
so sure enough once I had fixed that enumeration in all of the places where it properly had
to be rotation was working. And the other big group of struggles was read only images
and recovery images both of which use a special init ram FS script and so these two components
help provide that those OTA images the read only images provide a level of immutability
so that a user can wipe the system into a reset state and rather than having to re-flash
the whole image and it also protects the system from too much destruction but there's also
the recovery scripts which allow the device to switch into that updating modes that it
can install those OTA updates as opposed to installing the updates for individual packages
live like most Linux distributions do. So while the 20.04 pine 64 images currently release
with image files most Ubuntu touch images ship their updates through tar balls which
is where we are moving towards and the recovery image is what we need for that final component
to get the tar balls working and recently we did succeed in getting those read only images
working and now we can copy much more of the deploy style of many of the other Ubuntu touch
images and then looking forward we have a lot of different types of images that we can
use. We are moving towards 20.04 on the entirety of the distribution which will likely be around
when these recovery and over the air images will also be available but this rebase is
going to be a welcome one for us because most of the components that we back ported into
20.04 for the Pinephone Pro and PineTab 2 will be already upstream in 20.04 so we don't have
to carry that in our repositories anymore. Outside of Ubuntu touch we are also working closely
with the Lumiere team that is working outside of regular Ubuntu as well as on Debian and
so we are hoping that some of the changes like the enumeration to those displays can help fix
some of those issues on Debian with rotation for example and right now our ports is the
closest thing that Lumiere has to stability on mainline but we are hoping to get that
expanded to a more generic set of devices in the near future and that's about it. Thank
you. We have some demos of the devices available at the Foss on Mobile stand in Building AW
so feel free to check those out afterwards. Great, first question. You talked about the
PineTab 2 versions of that, the Dev1 and the early Adopter one, is it fixed for both? Yes.
Thank you. Thank you, very interesting. Having heard some of the talks today in this Dev room
makes me feel like this is the early days of ARM system boards or even worse like the
those days where every game had to ship 36 audio drivers. Do you envision a future where
we have a sort of standard platform like UEFI on PC and ARM? I would hope so. I think that
the ASAHI Linux project is certainly a push towards that and I'm hoping that other companies
can follow suit. Hello. Great talk. Is it technically possible that the, you mentioned that the PinePhone
images are the same image for the two different Pine phones? Would it be possible that there
be non Pine phones in the same image if they didn't require bootloader or is there a specific
reason why they only work on Pine devices? The only reason right now is the kernel. Otherwise
we absolutely can boot those images that don't include the bootloader on plenty of other
devices. How did you find out to put the, was it from internal to external, the kernel
module? Was it that? I was looking in the device tree files and I noticed a mention of the
display driver in there, but it looked like there were actually a duplication of those mentions.
And so when I went and ticked off one of those modules from Y to M on the displays, it worked
and that's all it needed. And then in the kernel logs it also said that that display driver
was trying to start before DRM was available. A question from the matrix. I've heard this
question before today, but yeah, the question is, any plans on migrating to Modem Manager?
I saw that question earlier and I would also hope so, but I don't think that actually is
viable right now because that would mean the whole, wouldn't you touch stack would have
to move to Modem Manager and so we instead have to rely on what the rest of the distribution
is using, which right now is Ophano. It's another question. According to the picture,
recovery was dropped in the 2004 layout. Was recovery functionality integrated into boot
in the DRMFS? So it wasn't dropped, it's just not available yet. It's still a work in progress.
I do not necessarily have a question, but I have a quick addition to the person that
asked about the standardized boot format, about the DOS games. I think it was that guy. People
are moving towards U-boot and chain loading U-boot on other devices and making repartitioning
possible. So in the end it would look the same as I and also the pine phone that you
developed. So that was a quick addition.
Thanks.
A follow up question. You meant kernel options before compiling with Y and M or okay.
Say it again.
Did you mean kernel options Y and M?
Yes, yes, in the DevConfig.
Thanks.
Could you name a single thing that would make the porting to another device easier? What
was the hardest thing? What would make your life easier if you would have to port to a
new device?
If the boot loader was figured out for me, then it would make it really easy. Because
as I mentioned with the pine phone and pine phone pro images, it's really just the kernel
at that point. It's not hard to figure out what kernel modules you need to get a certain
device to boot.
Maybe one more generic question. What's the current status regarding the full disk encryption
in UB ports?
Say it again.
The full disk encryption status in UB ports.
I actually don't know that. Does anyone, Alfred?
Yeah, passing on to Alfred.
Yeah, thank you. So it's probably not going to be so first of all, there is no home encryption
whatsoever right now. But unless manually set up with scripts, so in which case you
can do that yourselves. We shouldn't provide any default, but we want to provide a default.
And that's probably not going to be lux based encryption, but rather file, directly file
based with X4 and F2FS based solutions. Because the Android devices, they have Android partitioning
schemes, they have various differences where it makes no sense to do full disk encryption
in that way that we used to from the desktop. And with it being on the user data, we can
ensure that selective things inside of the user data are encrypted, like the home directory
of the main user of the device. In which case we can unlock it with the same on-screen keyboard
that the Lumiri desktop uses without having to basically add the on-screen keyboard to
the inner-dramf s early up in the boot so that they don't look different, that they're
using it like that they look cohesive, that they work with similar technologies so that
it's one completely fitting thing that does it all for you. So in this case, full disk
encryption probably not, but file based encryption or file system based encryption more likely.
There have been experiments with that and they were successful.
How did you feel when you first successfully booted up Ubuntu Touch on the pine phone?
It was an awesome feeling, but as I mentioned, I have been tech-tinkering for a long time
so it was also a very familiar feeling of, oh yeah, I got it working.
Thank you.
