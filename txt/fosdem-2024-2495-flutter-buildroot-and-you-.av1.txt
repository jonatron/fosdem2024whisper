All right.
I'm not sure why you guys keep letting Americans in here,
but thanks for stopping on by and letting me rant about Flutter.
So it's an insane project, an insane package,
and I have an insane boss who wanted it in Bilbroot,
so I did that for him.
A little bit about me.
My name is Adam Duskett.
I started my career completely through dumb luck and nepotism.
I had a friend who only knew micro-embedded and I knew Linux,
so it worked out.
They were developing a sonar with a camera on a TIDM368 processor
way back in the day.
After that, I moved on to Micron Technology.
I developed a kernel driver that substituted their DOS driver
for memory testing and reporting purposes.
Moved down to Michigan, started on VoIP emergency phones
that did not work out well.
I started contributing to Bilbroot in 2016.
I had to look this up.
My first commit was actually just an audit bump.
It was like three lines long.
But after that, I moved to Los Angeles.
I started working on electric vehicle supply equipment.
I joined Rivian Automotive as the first embedded Linux engineer
for their fast charging network.
We ended up using Bilbroot.
It's still using Bilbroot to this day.
It works great.
Then I joined Amorella Solutions as a senior embedded systems developer.
They're based out of Italy.
Then hopefully in 2024, I'm never coming back to America.
That would be quite nice.
Some of my contributions, a ton of SC Linux packages.
I tend to focus on those.
Flutter, of course, and the Flutter packages that we'll talk about shortly.
GeoObject introspection that took 17 patch revisions in three years,
two trips to Europe to actually get in.
OpenGDK, this is a total joke request by a friend.
Apparently people still use this package.
I don't know why, but it is there if you want to use OpenGDK
with Bilbroot in 1,123 commits as of this writing.
We assume that you know what Bilbroot is, what Flutter is.
You're interested in using Flutter with a Bilbroot project,
or you're interested in the next speaker.
I'm not sure which.
You're here. I appreciate it.
How I actually ported this thing was I used Metaflutter,
which is actually quite well constructed.
But then things quickly took a turn for the worst.
Normal industry standard practices just straight up don't apply to this package.
Like downloading a reproducible tarball is just straight up not possible.
We'll get into that.
Requires tools to configure the source code that aren't standard from Google.
You can't use your cross-compiled SDK toolchain.
Enjoy. It actually includes a pre-compiled and patched LLVM.
Release versions.
You can find them at Flutter Engine tags.
But those aren't for you.
No, no, those are for Google.
That's way, way too easy.
You can't just download that tarball and compile it.
That's impossible.
No, you need a G-Client Python script from the Depot Tools repository,
which is from Chromium.
I don't know why they decided this.
You need a .gclient file.
You run this.
And also, of course, the source code depends on .git directories being present to compile.
So enjoy, because now you cannot create a reproducible tarball from this.
So we needed a host depot tools.
It gives us the tools necessary to download the source code,
generate a tarball, configure the source.
I made a genTarball with the help of the buildroot maintainers.
So that will actually create a .gclient file for you,
runs G-Client to download the source,
generates a tarball in a format buildroot accepts, expects,
but it's still not reproducible.
So please save it somewhere.
Create a hash file for yourself.
Yeah, include the patch-claim compiler.
I don't know why.
I do not know why they did this.
I've asked the developers, and I have yet to receive a response.
So I'm going to chuck it up to Google.
It requires that configure bundles and compiles all the third-party dependencies
into a single generated flutter engine.
It requires things like open SSL.
But no, not your open SSL.
Not the one provided by buildroot.
That'd be too easy.
No, no, it requires the third party,
the one in the third-party directory,
and then it smashes them all together
and creates a giant flutter engine.so file.
I'm going to move right along.
Do you want to use flutter instead of QT?
Well, there's some advantages.
It's free.
QT requires a professional license
if you're going to sell your product.
I fought Rivian for quite a while, actually,
on this as they use QT,
and a billion-dollar company didn't want
to fork over 50 grand for a professional license.
So I'm sure smaller companies also have a problem with this.
It's just straight up licensed under BSD3.
You can just use it.
You can sell it.
You can do whatever you want.
There's a plethora of community plugins at plug.flutter.dev.
Hotload restart makes debugging applications less time-consuming,
in theory, uses Dart instead of QML and C++.
Disadvantages.
It's huge.
It's 14 megs straight for the minimum,
and that is just the .so.
That's not an embedder.
You still can't actually run your flutter application quite yet.
OpenGL or Vulkan is necessary.
It technically supports software rendering,
as it's just a .so, and you need an embedder.
But I have yet to find an embedder
that officially supports running flutter
with software rendering.
Only X64, ARMv7, and probably V8,
and Arc64 are supported.
It says it supports I386,
but I have yet to actually get it to build for I386.
So at least in build routes, only X64.
And it uses Dart instead of QML, C++.
Really up to you there.
LvGL is the other popular one among embedded platforms,
and that supports anything with C in an output.
It uses Dart instead of C.
Yeah, mini...
Oh, sorry, I actually reversed that.
Yeah, less...
So mini-more plugins, of course,
it's much easier to build and publish applications
in flutter than LvGL.
It is far larger.
Again, LvGL starts at 23k.
Particularly the exact same thing as Flutter Gallery,
except that the fuel line is removed.
And it is a generic package right now.
We do not have a infrastructure around that.
So, and that may change in the future.
The best way, I would say,
to add your flutter application to a build route project
is to create an external tree.
So that way you can update build route easier.
I have an external tree called Faustem.
I also have a project on GitHub that uses Docker,
an external tree, so we can actually use reproducible builds
for exactly...
I don't know.
There it is.
There we go.
Okay, so this is the...
I patched 2023, but here's the Faustem external tree.
So you have packages, you have patches to build route.
These patches are for the 2023 Ranch,
but basically they add a bunch of stuff.
But the Flutter package updates are the big one,
because as I'll get to in a second,
Flutter is awful in 2023.
Please don't use it.
This is a big one.
Profiling.
This slide took me about three hours on a plane to figure out,
because I had never profiled a Flutter application,
let alone something that was on a...
remotely.
So build Flutter Engine in profiling mode.
Menu config libraries, graphics Flutter Engine,
this is an enable profiling option.
It's very straightforward.
Make a bootable image.
Run the application in profile mode.
Here you go.
Write that down and take a screenshot,
because VM service and VM service port are cryptic
and ill documented.
There was also an observatory,
but apparently that's being deprecated for this.
They do the same thing as VM service.
If you do not use VM service host equals 0000,
or the URL of your host machine,
you will not be able to connect,
because the default is just local host only.
I can show you this here as well.
Actually, it would be a good practical demo.
I have a VM here.
I don't know if it will actually show up splash screen.
Maybe it will. Maybe it won't.
We might get lucky with a FOS stem logo.
We might not.
No, but it's booted. It's fine.
If we SSH in,
I have a FlutterPie profiling demo.
That's going to...
No, it's running.
I should just SH.exit for everybody,
so they can see.
Yes.
This is the exact same thing we have.
Then I have a Flutter profile connect.
Actually, it's probably in my...
Yeah, there we go.
This will connect to it.
Over here, this is the x86,
so it is running Flutter Gallery.
We can go in, we can click reply,
we can check the inbox,
or something we can hit compose.
This is fine. We can type.
Everything works properly.
By now, this should be working.
Yes, so you will see a URL right here.
I have no idea what I just clicked.
Oh, right. Of course.
So we'll copy this URL into Chrome.
And there we go.
So now we can check performance metrics
against our VM here.
And I've tested this also on a Raspberry Pi 5 and 4.
It works great.
Nothing's really running right now
other than Flutter Gallery.
If we keep clicking,
eventually more pretty graphs will show up.
So there's a CPU profiler,
although good luck.
This is a lot of ASM.
I am not really sure what it does.
And of course, memory profiling as well.
And networking and logging and whatnot.
So it's quite easy to set up a remote debugging
on all of this.
There we go.
Yes, 0 to 0, or the IP address, the remote machine.
Yeah, so the current state of Flutter,
the 2023.11.x branch is, please, it's bad.
Do not use it.
Use the patches that I have if you need,
or just wait until 2020, 4.02,
which is later this month.
But the packages, if you really want them,
Flutter SDK bin, it's a set of tools
used to compile the Flutter applications themselves.
Flutter Engine, it's the main Flutter library.
And Flutter Pi, that's it.
That's what you get.
It's the Flutter Embedder used to run the Flutter applications.
It does not support Waylon.
It's KMS and BRI only.
But it does support GL, GLES, and Vulkan, which is quite nice.
Oh, and of course, there's Flutter Gallery,
which is the demo application.
And yes, I have fixed this, but there's a lot of
necessary options that have been patched in.
In Master, it's a lot better.
A lot better.
Please use that.
All the previous packages with the following additions.
We have IVI Home Screen.
It's actually developed by Toyota.
It works with Waylon.
17 more plugins than Flutter Pi.
22 plugins are currently supported.
There's a bunch of bug fixes and improvements.
PubCache has moved to the download directory.
There's more up-to-date packages, comprehensive build options
for Flutter Gallery packages.
One of the big things is the Flutter Gallery package
is a good starting point as a generic patch,
but we can do better.
A Flutter infrastructure package would be so much nicer.
Yes, so I actually have that patched in as well
in one of these.
So with this patch right here,
this would create a package flutter.mk.
Can you increase?
Of course.
I would love to.
There we go.
So that way you don't have to copy and paste all of that junk
all over the place.
I think I stole this from pkgcmake and then started editing it.
Much like the Dart registrant files,
all of this stuff would just automatically be figured out,
including the package name,
as the package name has to go on top of the PubStack.yaml file.
It's quite easy to yank it out of there automatically.
So your Flutter package is going to end up looking like this,
which is much, much easier to read
than what is currently supported.
So that's pretty much it.
The stretch goal would probably be the Firebase SDK,
although that also seems quite the undertaking for a package.
So yeah, any questions?
Thank you.
Thank you.
I answered everybody's questions.
So I'm going to have a question.
Oh, no, don't let him in.
No, no.
What did you expect?
So you said that Flutter would not run on software rendering.
It's wrong.
We have a runtime test that uses Mesa 3D with software processing.
So it should be doable.
It does use the Mason.
Okay, it uses the Mason.
Was it the OGL 2 software?
Yeah, it's the OGL 2 software.
So it's a bit of a shame that it's not running on software.
So it's a bit of a shame that it's not running on software.
So it's a bit of a shame that it's not running on software.
So it's a bit of a shame that it's not running on software.
So it's a bit of a shame that it's not running on software.
So it's a bit of a shame that it's not running on software.
So it's a bit of a shame that it's not running on software.
So it's a bit of a shame that it's not running on software.
