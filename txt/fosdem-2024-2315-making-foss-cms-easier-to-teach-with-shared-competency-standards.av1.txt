I'm still remember their crest number.
So anyway, this is, are you Florian zero or Florian one?
We don't, maybe we just play flow.
Flow, you go with the flow.
Whoever is responsible will react to it and that's it.
Skill display, this is Florian.
All right, so anyway, Florian's organization skill display is in a really interesting space,
very adjacent to ours.
Thinking about the problems that from two sides, how do people coming into open source
or technical careers in general qualify themselves and prove themselves qualified to potential
employers and how do employers find qualified people and understand, you know, what's the
basis of truth for understanding someone's skill level when you get to know them.
So we're going to talk about certification now.
We are talking about competencies on a lower level than certification, but can lead to
certification of course.
Competencies, yes.
Well, hello, hello everyone.
I want to propose, since we are here for the open website alliance, a shared competence
standard focusing to get people into open source projects during educational state or
whenever they want to go into development.
For this, open source is already doing a lot.
I mean, it's open by nature.
We have low or no entry cost at all to start working on a project, getting the software
start yourself up.
There's vast amounts of resources on the net.
I mean, there's the documentation, there's blogs, there's videos, YouTube is full of
stuff.
You have trainings, courses that can teach you how to get started with type of three,
Drupal, WordPress, Jomla, how to prepare for certification if you want to go in a professional
field.
And as we are here now, we have events, we have camps, we have death days, there's lots
of activity in the community.
There is a community to turn to.
That's the whole thing of open source.
So that's great.
You can start wherever you want.
You don't need much resources.
My are we talking about a shared competence standard then?
There's still challenges for learners and for teachers, for coaches, for trainers.
I want to break them down in four years.
There is a problem with comparability.
If I do a training, if I attend a class, it's cool.
I'll learn a bit about PHP development or whatever.
But I don't have a big picture.
How close am I?
Am I now a useful Drupal Dev?
Where do I stand?
What else do I need to qualify for a certificate, for instance?
The resources I need, the resources I use to teach, the resources I use to learn, are
up to date.
For which version of Drupal is this article or this lesson?
So there's a problem of obsolescence because the projects are living.
They don't stay the same forever.
Since we talked about common basis for the composer dependencies, for instance, there's
a lot of shared stuff.
So this can lead to redundancy, especially if I switch between technologies.
I've worked with WordPress, I've worked with Jumler.
I want to delve into type of three.
What can I carry over?
What can I skip?
What's the most effective way to build on that, what I already know, to learn to use
in my new environment?
And lastly, ambiguity.
There's lots of resources which one use I.
What do I use to build my learning resource on?
What can I use to be most effective with my training and my course?
So these are the challenges and they open up somewhat of a gap in teaching.
When I create a training, for instance, I need to ask myself, both in a school or in
a professional environment, what do I need to cover?
Where do I start?
Where do I end?
How do I guarantee that I do not skip anything important?
And is there any knowledge that I can build upon from other lessons that my students had
from different experiences, from different projects?
But also a gap when I go for certification.
How do I prepare optimally for certification?
When am I ready for certification?
I've worked for two years now as a dev.
Do I know everything I need to get my developer certificate?
Or in my company, is there anybody I wouldn't have thought about who is quite good and
could already be certified without me knowing?
Or do we have any lacking deficiencies in the company?
Some areas that are just not covered by anybody?
So we could build competences, skills to map these areas and to get a picture on who can
do what and what are they missing.
And this is what we want to do.
We want to structure competences.
So before we think about a big standard or anything, we should start at the basics.
What is a skill?
How do I define that?
In its most easiest way, I have something simple, an identifier, a name, a title, and
perhaps a description that makes my skill identifiable.
About CMS, I know what a content management system is.
I can clearly devise what that skill is if we have a denomination.
Then we need to make it tangible.
And you can understand what that skill entails.
What can I do?
What do I need to learn?
And you have learning goals.
So we can define those, for instance, as a list, as a short summary.
And it transparency, because the skill definition can be something arbitrary.
It's worth nothing if I don't know who made that definition.
It's that someone who has a capacity, who has an authority on that field and whose definition
has a worth for me as a teacher, as a learner.
With these three things combined, we have a package that I can read.
I can understand within a few minutes to tell me, okay, it will about a year.
It will about so and so complex to learn this.
I will take some time.
I can make an assumption on how much a challenge I have before me to learn this.
That would be a single competence.
Type 3 is not a single competence.
I know type 3 is worthless as a skill in itself.
I need to go more into detail.
So I need to put more skills and I need to put them into a relationship.
And this is where we will need prerequisites.
If I know what a CMS is, fine, I understand what the underlying construct is.
Now I can go deeper.
Now I can look how content anything works in a CMS on a basic level.
So I can set my new learning goals.
I know the difference between simple text and with weak editors.
I know what content editing is.
So I have skills built by prerequisites into, well, trees.
And we have seen those.
If the principle works for the shape shifter to it in Diablo,
why doesn't it work for Drupal Dev?
The only much larger scale.
This way we can build a structure for competences and map them.
Get a sense for where does my current level of skill lie, where am I,
what is ahead of me, what is already covered, what did I miss?
So how could we benefit from standardization,
from structuring competences like that?
First we create a language, a common language for what I can do.
I, from education, I get a grade in school.
In my CV I have X years in that and that project or that and that technology.
But I have, I don't have hard facts.
If I compartmentalize skills, I have a, sorry, I have a definition,
a hard skill that can, that says what I can do and by whose definition I can do that.
Second, we reduce redundancy.
If I have a clear plan on my learning path, where I am,
I can skip those parts that I don't need, that I already learned from other projects,
experiences that I've already picked up.
If I know doctrine, if I've acted for the doctrine,
I can, I can skip repeating that learning process.
And I can do that, also by skills provided by the pre-needling.
And I can do with the shared principles of CMS.
We have, we can't do anything basics for media libraries and so on.
Those are shared principles between all the systems.
Here I can reduce redundancy with hard skill facts.
I can also create a, create higher comparability.
What does it mean?
If I have a learning resource and it just, I can't just take it by its cover,
I have to guess how far it will bring me.
If I can compare learning resources and courses and trainings by the skills they cover,
I can pick the one that closes my learning, that gets me closest to my learning goals as possible.
I can compare how to learn most efficiently.
I can also compare what to learn at all.
I might have experience with technologies, I might have experience with projects,
I might have goals for what to achieve.
I can now evaluate, okay, what do I have to learn to get to a project that brings me to my goal?
I can compare between projects based on the skills that I have, based on the skills that I need to learn.
And we could promote shared values.
Open source built on collaboration.
With a shared standard across CMS projects, we can emphasize this.
We can bring the collaborative thought, the open thought to people already at an educational level.
Matthias said open source mentality isn't taught at schools.
We could bring it to schools.
If we have an open standard that brings people on board, that helps teachers build a curricular for open source projects,
we can teach open source mentality on schools.
And we can incentivize the use of open source projects as well, because, well, teachers who are getting help by cutting their preparation times for courses by a competency standard,
are more incentivized to use those projects on schools beyond the monetary advantages.
And thus, it would help us to establish for more in the educational sector.
So, how could we start with something like that?
There already is a very basic tree that was created as part of a Erasmus Plus program, founded by the EU,
created in cooperation between Type 3 and School in Vienna, the H. Taylor-Renwick,
that covers CMS basics for use in the web development classes.
It serves as a gateway to seconded management systems.
To endorse this, and put the hopefully grand new open websites, Alliance logos on that, and expand on it,
we could create a shared common basic skill set for working with FOSS, open source projects, with FOSS CMS projects,
as a gateway into deeper documentations, deeper skill definitions for each project.
So, this could not only be a cooperation, it could be a gateway into each single project.
Which in turn would allow teachers and trainers to have a single source, a single structure, to build their curriculum,
under a shared brand.
So, there's no more running around, searching for articles, searching for running material.
I have a skill structure, I have ideally referenced material, documentations that are endorsed or official,
and I could build my courses from there.
That's much centralization, and that's not open source.
We want to have this, of course, as an open approach.
How do we do so?
Skill definitions should be open data.
Have the possibility to contribute, to define skills where you see them, they are missing,
provide them freely to teachers, to trainers, to businesses, to make their own certification preparation,
and put this into initiative for open teaching, for teaching open source projects in a way that is accessible for everyone.
That also could help, especially in territories where we don't have a broad supply of trainings,
as Types van der Waas mentioned.
With such a standard, we could bring teaching material to areas where professional help is a scarcer,
there's not as much infrastructure.
And we can also integrate that with certification.
We have existing certificates for all CMS projects to different degrees.
For type of feed, there are already skill definitions for most certifications that are out there.
Nothing stops us from picturing those certifications with skills,
provide a structure for preparation for them,
and in this way, aid enabling and preparation for certification attempts.
But we could, of course, also create new certifications for the Alliance itself,
for shared approaches, for shared principles, especially on the entry level,
but common principles that need to be taught.
So, looking back at the challenge from the beginning,
where we had no low comparability,
you now have a greater scheme, a greater skill tree,
where I can plan and track my progress,
where I compare resources and trainings that are offered.
With Anansi, it can be replaced by efficiency.
I can now pick my learning goals and my learning path to that goals,
based on the skills that I still need, skipping those that I already have.
Transparency can solve the problems with obsolence, with skills,
that are living index.
If a skill, if a particular technology, for instance, falls out of favor or is replaced,
the skills can be laid dormant, and replaced by newer versions,
or completely other skills in the tree,
and I still have the control for my curricula to be on the current state of the art.
And lastly, versatility.
By linking my trainings and resources to skills,
I can still have a variety of resources available,
but they are now anchored in the tree.
I can choose them according to my needs,
according to my learning goal,
on what brings me the most for my current situation.
So, this is what we in short propose, structure,
defined structured skills for the CMS projects,
find common pools, shared principles,
and build from there an ecosystem for using education.
Thank you.
So, I think that in the open web alliance room,
when we're looking at new ways to collaborate together as projects,
the idea of shared and common competencies makes a lot of sense,
and the idea of sharing the structures so that I might build mine more quickly and easily.
All of that makes a lot of sense.
Since we have some time, is there any chance that you might,
unless other people have other questions, of course,
but I'd really be interested in seeing a skill tree,
or part of the typo three, one so that we can get a sense of what these things look like and feel like,
and how I might as a learner, or a potential...
Maybe you could dig into that a bit.
Obviously, super happy for other questions,
and Matthias is about to have one.
So, I'm connected to you.
I end up with these things that are not questions,
but that are statements of support and stuff like that,
but I've been working with skill display for a while,
and one thing is you have a lot of skills,
and mapping them afterwards can take some time,
but once you have them, you have quite an amazing resource,
and having people start their process of learning as CMS by, as we'll see, checking boxes of,
I've learned this, I've learned this, I've learned this.
A colleague says I know it, and I might have done a certification as well,
I have a university degree or something like that.
What it does in a working environment as well, I find is really amazing,
because I've been working at agencies, and you've got a new project,
and we need this technology,
or we've got a new person in the team,
what does that person most need to learn?
You can use it to map out who knows what, and peer people,
so that the person who knows something can work on a project with somebody who needs to learn it,
for example, and that is a real strength,
and I think also in multi-project environments, multi-technology environments,
you need that kind of basic thing that, well, does everybody who works with code know get to a certain level?
Do they know our processes?
And you can build both, take processes from, all CMSs need the same basic processes, for example,
but within the company you might have your own processes as well that you can enter,
and you can build skill level, I love that.
It might even be on a project level, for instance, for customer trainings,
you might have different, you might have common parts within your projects across multiple projects for multiple customers,
but if you build with this mindset customer trainings, you can reapply those resources,
and expand them where necessary, and have a common shared basis for them,
and also save time there.
Good.
I also want to contribute from my direct experience,
so from my direct experience with skill display, I'm also coming from the Type 3 Association,
and skill display was our partner in two years in which we have implemented an international Type 3 mentorship program all over the world.
So we've actually touched and supported developers, web developers from about six countries in Africa and two countries in Latin America.
And what we did was we used skill display to develop custom curricula.
So custom learning paths which was aiming for people which were really in the beginning of their way as web developers,
not so much skills, not so much skills in PHP and so on.
So we've built custom curriculas that was matching them and their situation,
and our mentors were using it step by step to check the acquired knowledge.
It was very effective and showed also that you can actually customize the skill display path of learning on any way that will fit your purpose.
Okay, thank you.
Any questions somewhere else?
I really want to demo.
Ah, demo.
Hey, yeah.
Yeah.
We have here as a demo a very, very simple skill tree.
Again, we are talking about basic principles here.
The idea was that we have a center core about a CMS.
The root skill in this case, and from there branching the core principles for working with CMS.
So I have the skill about a CMS.
I know what a CMS is.
I can define its ground functions, and that serves as a prerequisite for understanding what extensions and plugins are within the CMS.
Because I need to know what the core functionality is so that I can deduct, okay, and then there's extensions that provide additional functionality.
They are isolated and can be, I'm sorry, can be edited to projects as needed.
Likewise, user management.
This is a more in-deep function of a CMS.
Again, in every CMS.
So before I can go about user management, I need to understand what a CMS is.
That is the core thought of a skill tree.
That of course can grow and grow and grow.
I think the type of three developer skill tree at this moment has about 130 skills.
So we are going to, from Diablo 2 to Path of Exile here.
But again, it is manageable, and I will rarely look at the whole tree, but only on the scope for my current learning needs.
Because if I make a course, I don't need to focus on the whole tree.
I can make a course about community working with CMS.
So what do I need?
I need to understand what a CMS is.
I need to understand user management.
And perhaps I should understand content editing.
And these three skills now make my learning unit that I can dynamically create for my single purpose.
For training someone for a community page.
That is the strength of the tree structure, in essence.
So I hope that somehow, first.
Yeah.
Does type of three having that skill tree in place, does that provide a template for Joomla or Drupal or WordPress to come in and basically fill in the blanks of their own tree?
Of course.
They can build on the common similarities, because, as for instance, about a CMS, basic skills are common.
So why not go deeper into user management for the general principle, go deeper into Drupal user management?
How does Drupal user management work?
And from their branch of how does permissions work and so on and so on.
So those need to be singular for a single system.
They can intact with each other.
I can compare, for instance.
I can compare multilingual skills and requirements to create a multilingual page in each system.
And I can see as a learner to say, okay, well, which of the systems has been covered better and which of those is easier for me to learn.
And vice versa as a teacher, which is the best system for me to teach multilingual web development for my students from the scope of skills that will be required to actually make use of this.
So yes, this can intertwine between multiple systems.
Also with integration, booking platforms or commerce, commerce suites, you can integrate those as well.
Okay, then.
Thank you.
Thank you.
