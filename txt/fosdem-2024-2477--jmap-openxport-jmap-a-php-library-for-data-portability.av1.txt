All right, we head on with the next talk.
All right.
Floss is yours, yours.
So let's wait for the room to cool down a bit.
So I'm one of the lucky ones having only five minutes for my talk.
So I'm going to keep it very brief.
I hope you can hear me.
Good. So I'm Joris.
I work at Rodrigo.
We do quite a lot of work on data portability.
And that's how we came to JMAP.
So Ricardo already did a quite good job of, well, presenting what it's all about.
For us, the main thing what we wanted for is having a unified API.
So I think there was one slide where he said we add files and calendars and contacts
and whatnot, own extensions for that.
And it's really well for that, actually.
Yeah. So I'm just going to skip that slide because I don't have much time.
Yes.
So in the end, one thing that was not mentioned in the previous talk is that
JMAP, the JMAP calendars and JMAP contacts is built upon Cardiff and Kaldiff,
which themselves, they build upon iCalendar and vCard.
So there is a replacement, a modern replacement for iCalendar and vCard,
called JS Calendar and JS Contact,
and a modern replacement for Cardiff-Kaldiff,
which is called JMAP Contacts and JMAP Calendars.
And that's what we are mostly using heavily.
And yeah, in addition to a bunch of other data types that we also added.
So the work that we did is we, first of all, we have a client, we have a server.
We move data from one service to another, data portability.
So the client is using, it's a Java client.
So we collaborate with Danny Gulch here.
We have added a lot of features to the library already.
We still need to work out how to combine that well with what is already there,
because we also would like to see that the JMAP Java library is the go-to library
for JMAP in the Java world.
And on the other side, on the server side, we have our own software.
It's called JMAP Open Export, which basically makes it very,
or is supposed to make it very easy to add a JMAP API to PHP-based systems.
We already added support for quite a lot of data types,
or verticals, files, calendars, contacts, and so on.
So it can also be used to lift files that are on a...
It's an ongoing project that you could attach a JMAP API to files
that are somewhere on a server, and then you can migrate those away.
And obviously, we support JS Contact and JS Calendar.
There is an RFC in progress right now to convert...
RFC for JS Contact and VCAD is already existing.
How to convert between those two, and another one is work in progress
to convert between iCalendar and JS Calendar,
so it's to make it easy for developers to start with those formats.
Yeah, so basically, that's what we extended.
Right now, we have a JMAP API for NextCloud, RunCube,
and Ancient System Squirrel Mail,
and Horder is more or less Ancient System, I would say.
Yeah, we already use it in large-scale migration projects
with a lot of users.
Yeah, so let's finish with the last slide out of time.
Yeah, so there's also a JMAP Dart client from LinaGora
that we are extending currently,
and building a JMAP CLI around that.
Yes, so there are also other specifications that you could read upon.
Didn't finish quite in time, I'm sorry for that.
Oh, fine, thank you.
Looking around, here's one.
How many lines of code is your Java JMAP client,
and what does it require in direct dependencies?
So we might even relay it to the next speaker, I think.
Yeah, but our client is quite big, actually,
but it's a library that we're using, which is quite lean, I would say.
Now I don't feel bad at all.
Any further questions?
Otherwise, I think the next speaker may come,
which is actually Daniel Gutsch, the author of the state,
the JMAP Java library, and some tools.
