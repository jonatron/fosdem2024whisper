Sorry you picked a missed call.
...
Yes.
Rocky.
Rocky.
We'll close the doors.
Thank you very much.
So anyone that knows some history of Rust is going to be very excited about this talk, and Rocky is going to tell us about what's going on with Rust with Servo.
Hello. Hi. Thank you.
I am Rocky and I'm software engineer. I work on Servo at Tegalia.
Before even I start with the talk, I'm very curious about the audience. How many of you are writing Rust professionally or full-time?
Many of you.
And how many of you are writing personal projects, interest?
How many of you are coming from front end or back end world?
I still see some. This is like perfect audience for this talk.
Normally when I start a talk, I tell about the project I'm going to talk about. But today I want to start by answering some questions because people have questions.
What is happening? Is it bad? Is it lie? What is happening with Servo project?
I'm simply going to take you a bit back and walk you through.
So I was journey in this slide around 2012. It started at modular research around the same time when Rust project also started.
They were quite working together actually.
And people who have been active in Rust community or have known about Servo project, they knew Servo on 2016, 17, 18, what was happening.
But in my previous slide, these questions came in when we were in 2020. A lot was happening in 2020 but this also happened when Muzla's layoff impacted Servo team.
And this kind of affected the whole team and the future was not that bright as we thought.
Around the same time, Servo project joined Linux foundation. There were few people from Servo team who were trying to maintain the project in their personal time.
But that is not enough. Servo project is huge and that's not enough. It needs funding. It needs more people, expertise and many other things.
Around 2022, we started restarting Servo. I just mentioned it needs lots of funding, lots of expertise, lots of people. Who is going to start?
In 2023, a team was formed at Igalia and we restarted the Servo project.
So what we did in 2023, like list is not huge but I want to keep it small because this is not really focus of the talk today.
We restarted the project first half of the year. We were trying to maintain the project, take it out of the maintenance mode actually.
Tell people what is happening with project and we have restarted the project. That's what I'm trying to mean thereby outreach.
Make it easy for new people to contribute because an open source project is literally nothing without the contributors.
We started work on layout engine. We started shipping CSS to features. We also had to make a choice between layout engine.
We in Servo have two layout engines. Still have it but we haven't deprecated the last one.
We ended up choosing to work on layout 2020. The old one is called layout 2030. I'm not going to talk too much about it.
You can go to the wiki and you can find why we took the decision of choosing layout 2020.
At the end of the project I have a QR code that will give you access to this slide. Don't worry about searching for it now.
In 2023 we also worked on internal WPT so that we can track the web platform tests and build lots of Servo demos.
When you are talking about a project, it is very important to show things.
You can't just sit at computer and code and talk about we are doing this and that but there is no way to test it.
I'm saying we built CSS feature but hey, how can I test it? There were a few Servo demos before available as well.
We also moved it to the new Servo demo website. Then we did quite a lot of embedding work.
We built a mini browser that is going to be focused on this talk.
This was 2023. I also want to cover what we are going to do in 2024 because it is already here. We are in February.
We want to continue the project maintenance and the outreach because some of you I'm sure were not sure about where Servo project is going.
I'm sure there are people outside this room who are still not sure.
We want to make sure that everyone in communities aware what is going on.
We want to continue shipping CSS support. Right now, while I'm standing, we still have a few PRs open that is related to tables.
We are really trying to ship this table support in Servo.
We want to continue working on embedding API and the initial Android support.
We already have initial build that runs on CI already. We landed this PR, I think, two weeks ago or maybe one week ago.
Let's not go with somewhere between two or one week ago.
If you see the list is pretty much similar to what we did last year.
This is the focus of the talk today.
I'm talking about embedding because embedding has been asked from the community for very long.
I was just looking on internet, read it, hack and use, and just twitter, github.
What are people asking? I ended up collecting some things.
If you see that screenshot, this Servo embedding part was asked 11 years ago.
This is exactly what I'm trying to tell you.
I'm saying that we can't just tell, hey, we are adding support to Servo or X or Y feature without showing you a POC how this feature is working or how you as a user can test it.
Last year around the summer, when we did lots of maintenance and took it out of maintenance mode, we decided we want to work on embedding.
Then we ended up building a mini browser.
When we were talking about mini browser, any open source project for the first step is to open an issue.
That's what I did. I opened the issue. We wanted to decide how we want to move.
Which library we want to use. I opened the issue initially.
We had some discussion. The whole idea behind opening the issue was to get comments from the community.
If they have some suggestions on using libraries, we already had this window that we were using in the code base.
We can have a quick POC. You don't want to spend years building something without knowing how people or how companies or users who are going to use your product are going to feel about it.
We ended up building a mini browser. I want to show you actually.
If I go and do a macro, I hope you can see the screen.
This is the mini browser. Just keep a mental model of how this toolbar is looking. I'm going to show you some code in a bit.
This is about how we can make your life easier.
This is the demo website I was talking about. You can go and do stuff there. Check out how some performance is happening.
We have some demo that talks about the technical test. You can test the WebGL support as well.
Certain things. Play around, go back forward.
Just to give you an idea of how this looks in the code.
Depending on what kind of ideas you prefer when you are reading code, I prefer to go from top to bottom and then I take myself up from there.
You want to go to Sarvoshel. Once you arrive in Sarvoshel, you want to look for mini browser.
I can see some code here. This initialization part is okay.
This is not the focus. If you see the if condition here that we say,
what is happening here is we just don't provide an option for you to have the mini browser.
We also provide an option for you to disable it. It is enabled by default.
In case I have to show you how it looks, you just need to pause this.
You can already see how it looks. You don't have a toolbar. This is the window we also used to test how our Web platform test is looking.
While you are here, we also want to look for even loop. That is an important part.
Not actually run forever. Yes, this part, even loop.
As like names are just, it runs forever. In this particular case for mini browser, we want to see this part.
We are using VINIT. We run the event loop of VINIT that really helps initialize the window.
As I was saying, I want you to remember how the toolbar looked like.
I want to go to mini browser and just show you something that we have going on in the update function.
This particular code that I want to walk you through.
This is something that we did. Like I was saying, we opened an initial issue where we wanted to decide what library we want to use.
We were already using the VINIT to create the whole window. We ended up using Igui.
They have really good support for Igui VINIT and Igui Glow.
This was very helpful for input and output stuff we needed to do with the mini browser.
As you can see, there are just two parts going on.
From left to right, we had back and forward button. On the left and right side, you can imagine the toolbar as two parts.
Left to right, there was back and forward button.
Then the other part was right to left. That was on the right side, you had the go button.
On the left side, you had the location field. All together, it was whole toolbar.
One other thing that I want to show you is how we are initializing servo.
This is like, I can go to the server new.
This part is like, inside the even loop dot run forever, we are passing all the data to the new function that initializes the servo.
A lot is going on here. I am not going to walk you through all the code because it will take forever.
The next 10 minutes is not enough.
Initializing servo man, creating a thread for WebGL.
One of the most important things that is going on here is the configuration of constellation.
If I have to show you here, it should be here already, actually.
Here is the constellation. It creates the constellation here.
If I have to go and see how to start constellation, this is the constellation part.
This is the Gram-Cyndra of servo.
I love this comment. Someone left this comment like 11 years ago and this is still valid.
From here, you can really get lost in the code and not lost in a bad way because this is the place where everything is connected.
Here, you go to the pipeline, navigation, layout thread, script thread, and you can really go to layout and then the script.
From here, you can go everywhere.
Then I was just showing you this code right here.
We are on lib.rs. This is our engine.
We call it lib servo and this is the whole engine we are talking about.
I want to keep it short here now because I want you to see something else as well.
This was about the mini browser that we built.
Next was around the same time when we were done with mini browser.
We were talking with Tauri about how we can collaborate to integrate servo in the RIBE project they have.
Thanks to the funding we got from NLNet and the collaboration from Tauri team, we did a collaborative work where we embedded servo in RIBE.
RIBE is a library that aims to provide a fully open-source web view to users.
This is the screen shot or the demo that RIBE team built that is like a hello world from servo and RIBE.
If you have questions about Tauri and RIBE, Daniel is sitting here. You should catch up with him.
He has lots of answers for you on that side.
Thanks to my colleague, D-Lyn, for putting it all together so that I can show you today.
Earlier when I started this talk, I asked how many of you are coming from front-end or back-end world.
I have spent quite a lot of time in my career doing front-end and back-end work.
When this embedding stuff happened, when we started this embedding, we worked with Tauri team to create this whole task, what is not needed.
We shipped off-screen rendering, we shipped pre-compiled MozAngle, we still got to figure out how we are going to do the package and distribution of the shared object we have been creating for two biggest dependencies of servo, that is MoJS and MozAngle.
We shipped the MoJS shared object already, but yet to figure out how we are going to do the distribution.
MoJS is still working on progress. We have some work going on on the static-lib side as well, so we are going to do that as well.
Before I started this talk, for this one, I wanted to see how this, as a user, how I am going to use Rai, how it is going to impact me.
I started this, this tells me that I am close to the finish. This is the demo I built on top of Rai.
Behind the scenes, servo is running, rendering things for you and Rai integration. This is the result of the integration work we did.
Just to show you quickly what I had to do in order to run this project, I just had to write this HTML, CSS and JavaScript code.
That is all. As a user, I don't need to care what is happening on the server side or what is happening behind the scene in Rai itself.
As a user, I just need to write HTML, CSS and JavaScript.
Things are ready. Maybe you can go ahead and try to write an input and browse the UI and maybe you will have something like that.
It was pretty cool to see that as well. I was personally very happy.
One of the reasons why I showed you this issue, and even we have a meta issue for mini-browser, there are some unchecked boxes in case you want to contribute.
We will be very happy to help you review PR or help you getting started.
This was about integrating servo rendering engine itself.
We have another story with Dioxys that is doing pretty unique work.
By just taking one crate, you might know about this. It is stylo-crate for CSS styles and selector matching.
This is something unique because we have been talking about integrating the whole servo rendering engine into a project.
This opens another opportunity where you maybe just want to use the script crate or stylo-crate in your project.
You can simply do that. It is possible and Dioxys is proving it.
After this whole talk, one question that some of you might have, how you can do it in your project.
In short, you are literally one step away from doing it.
You just need to reach out to us on Zulip Chat.
If you have time, you can check out how mini-browser is working or how the integration with write took place.
You can try it out with your applications, with your projects.
If it works, great. If it is not working and you figured that you need us,
so our team, to implement a particular feature, you can reach out to us on Zulip or you can open a discussion on servo.
We will be really happy to help you get started and answer questions.
We really have lots of people coming in and asking questions like, I want to integrate, we have some talks about Velo,
we have some talks about certain other things going on.
You can also follow up there and lots of things happening in servo.
In short, that is what you are just one step away from reaching out to us.
Thanks for listening to me. You can scan this QR code to get access to this slide.
Thank you.
Unfortunately, there is no time for questions here.
I am here. Please catch up with me.
Yes, I am happy to answer your questions.
Thank you.
