So, welcome.
My name is Kai Engert.
I have been working with Mozilla and contributing to the Mozilla code since 2001, also including
email.
And I've been a full-time employee of Thunderbird since 2019.
And today I want to talk about Thunderbird email security and some of the plans and challenges
on that topic.
We all know, yes, there are some creatures who could read our email.
So, they sit on the service and some robots scanning some mass surveillance monsters and
cybercriminals.
Okay, we don't like that.
So, the problem is that there is no protection while emails are stored on service.
We do have some TLS transport security in the infrastructure, but it's not enforced.
And it's...
So I think we need more than TLS transport security.
We heard about that earlier.
Of course, we want and need end-to-end security for both encryption and digital signatures.
So Thunderbird supports two separate technologies.
There's been S-MIME.
I've worked on that in 2001 before Thunderbird were born.
And, yeah, we have...
It's still supported.
And we also have OpenPGP, which was previously supported using the Enigmail add-on, which
is now fully integrated using an integrated code since 2020.
I want to briefly mention some of the things we did in the recent past.
We implemented unified status feedback so you get similar UI for both S-MIME and PGP
emails when reading an email.
When you compose an email, we also have some similar controls to enable or disable encryption.
We have made it a bit easier to resolve the problem when you want to send an email, but
you're missing the recipient's PGP key.
So we have some interactive UI code to help you find the missing keys.
We also added some reminders when you try to...
When you start composing an email and Thunderbird detects that it can encrypt, then it will remind
you if you want to enable it.
And just most recently, in the new version from last summer, 115, we have added a long-ass
feature which is you can tell Thunderbird optionally to please enable it automatically.
If you see, we can encrypt just enable it.
Some people have also asked to automatically disable it, but I think it's a necessity to
pay attention so we have the option to have some warnings here shown to the user.
So other things we did, activists asked for and people who are sharing their computers
with others, they have asked that we do support some individual part phrase for the secret
keys.
We did that.
There's some parts missing.
We need to make it more convenient by adding a cache.
We also implemented the auto-crypt compatible key distribution mechanism which simplifies
group conversations by including all the keys of all participants of an email conversation
that's called Gossip.
We have that recently added.
I think we will have it in the stable version soon also.
And we added support of publishing keys to keysopentpgp.org.
Let's look at the sum.
I want to also mention a few general challenges that we've just recently seen.
Since some providers now add fmime on the server-side infrastructure, we are now seeing
messages coming up which mix two technologies.
So people complain.
They have a user has composed a pgp message to them and now the whole thing is suddenly
wrapped in another fmime layer.
And so that's a challenge for the user interface presentation, how you deal with that.
What I have one idea is if it's just a signature layer out her most, maybe you just ignore
that one, but I'm not sure it's the best solution.
So we are still open for discussions if you have better ideas.
So there was discussion, what should we do if a message arrives with a digital signature
that we cannot completely validate as being good?
What should we do?
Currently, we do say, well, this has a bad signature, but some people say maybe that's
not worth in a plain text email.
Maybe we should just stop not showing any bad status at all and just treat it the same
as a plain text email.
So that's also a pending thing we should do because there was some agreement to do that
in a recent pgp community meeting with other developers.
And another big unresolved area is if you combine emails with digital signatures and
where the content is nice and shiny with HTML and CSS, which many users want to have, the
problem is that HTML can be used to manipulate what's shown on screen.
So the sender of the email might have seen something different when composing than you
as a reader see.
So that can lead to confusion.
Researchers have shown that.
So what should we do about that?
I don't have a good solution because nobody agreed to my suggestion to just revert to
plain text whenever we have signatures.
So but maybe we should show weaker signatures.
I'm looking for ideas here.
If you have ideas, please, please send them in.
So now let's look at some more broader scale.
We have the problem that only a small portion of all emails are using S My more pgp at all.
They're not used much because there are barriers of entry to use them like Tobias presented.
You have to get a third and it's difficult.
And then when you have keys, it's complicated to manage.
And using email encryption at all can have unexpected consequences.
If you just set it up on one device, you have maybe a problem to access your encrypted email
from a secondary device.
Users can lose their secret keys.
They will also lose to the archive of encrypted email.
So I think it's still necessary to, we must involve the user.
That means user must be willing to accept the consequences.
Also user must be willing to take care of the secret key file or lose their archive.
So what should we do?
How could we get more people, many more people to use email encryption and signature?
I think fully automatism is not possible because we have an heterogeneous ecosystem and we
need the user to be involved.
That means I think that we must better assist users.
And that leads me to the question, which technology is easier to use?
The past five years, Thunderbird Focus was open PGP in that area because it was necessary
because we had to integrate it to ensure it's still usable.
But now the question is, is that still a good idea to continue to focus on PGP?
As we heard from Daniel, there is currently some, there are currently some disagreements.
What's the future of PGP should look like?
Daniel has presented a very optimistic outlook for the future.
And I agree, many of the things he said would be nice and great to do.
But we have the problem that there is a group of PGP in the ecosystem which is difficult
to ignore.
So I'm, and that's the problem because they are, Daniel suggested maybe everyone should
do both.
But well, that would also require that client applications support both keys from both specifications.
And I see that as a big complication for users to have to manage different keys for
different recipients.
And I have suggested, I've tried to bring the group together with many discussions and
I've suggested even introducing a common key format.
But there have been no positive reactions from that.
Well, from the IETF side, I usually get lots of good ideas and willingness to discuss.
But both sides would have to agree and I don't see the, I don't need much openness to support
these ideas from the PGP side right now.
So I don't know what will the future bring, of course.
No final word has been made.
But at this time, to me, I have the worry that the future of PGP is a little uncertain.
There are a little, there are conflicting specifications.
There might be incompatible implementations.
And I don't know how much hope there is for a unified specification.
I still hope for it.
I think it would be best and we really should see it, but it's not clear whether it will
happen or not.
And if that's the case, I'm worried that PGP might become less interoperable and more complicated
to use in the future.
And with that, is PGP the right way to go right now in West Moin PGP when we don't know
what the future will bring?
My suggestion is maybe we should wait a little and see how the developments in the PGP side
go and whether there will be some more agreements in the future.
And maybe we should, Sunderberg should wait.
I think what we have right now is working.
Both specifications have a common base.
So PGP is working and you can interoperate right now.
It's just that I'm not sure how quickly we should jump on these new ideas and implement
them.
Maybe it's time to wait.
And I suggest Sunderberg should continue to both support both PGP and SMIME.
But maybe one idea is I'm presenting that as a suggestion.
I'm not saying we will do that and I'm looking for your feedback.
Please provide feedback afterwards.
And here's a suggestion.
We could try to make SMIME easier to use for everyone.
We could try to eliminate the barriers of entry that are currently there.
And we could say maybe SMIME is an OK technology for users with a limited threat model.
And we could say open PGP is more targeted for users with a broad threat model.
And as a consequence, they will currently have to accept that there is a slightly higher
complexity.
Well, why is that?
Well, let's look at SMIME.
I think it's more widely available in email applications.
And if you trust, as a user that certificate authority, do that job right, then SMIME
is easier to use than PGP because you don't have to do manual checking of keys.
And we don't have the transparency stuff yet that was mentioned.
Maybe we can do it in the future.
But right now, it's not there yet.
And it might be appropriate for people with a limited threat model.
It protects against passive reading, SMIME.
There is a remaining risk that there are falsely issued certificates.
We have seen digital notar in the past.
But CAs are regulatory audited.
And of course, they don't want to lose their reputation.
So I think the risk of falsely issued certificates is not that big.
Also, we certify transparency making it even harder.
So I think that remaining risk might acceptable for many.
So but we would have, in order to follow that idea, we really would have to find a way to get certificates to everyone for free.
We would require, like Tobias implemented in his demo, to find a way to automatically obtain and
refresh certificates from inside the email client.
And then also, we would need something better for looking up the certificates of your correspondence.
Maybe we could implement certificate transparency like way for
SMIME certificates where we maybe even to protect against the spammers.
I'm not fully up to date if the certificate, what's the PPP specifications as,
if it's also redacting email addresses already.
But yeah, maybe that would be necessary.
And if we have some kind of cloaking with a hash, then we could maybe implement
a certificate directory that is like a key server and
that could consume the information from the transparency logs.
And maybe we could use that to make discovery of correspondence certificates easier.
So yeah, and PPP could be more dedicated or
declared as the preferred technology who don't want to accept that remaining risk of false issues as my certificates.
Yeah, and they could still do the manual key verification at the cost of having a little bit more complex technology.
So if that idea, if we get a positive reaction to that idea,
maybe we could say making PPP easier to use in Thunderbird.
Maybe that could become a little less priority and
rather focus for PPP on the higher, on the security improvements and
interoperability parts of that.
And rather focus on making SMIME easier to use and
I plan to post some suggestions in the new future
towards the Thunderbird email discussion this way,
I present this idea in more detail and I will be looking for your feedback.
Thank you.
Thank you very much.
I just want to add one more thing.
I somehow expect that there will be many questions.
So after this is finished, I will go outside and
I'm waiting for your question and to have follow up discussions outside as well.
Hi Kai.
May I ask why are you still using R&P over the Sequoias version octopus like the crypto library?
Well, your question implicates that I should prefer one side or the other.
I don't prefer one side of the other.
I think I don't want to give any of these conflicting specifications and advantage.
In my opinion, Thunderbird should remain neutral.
In my opinion, so conflicting parties should get together and
find a unified specification and I would like to wait for that.
And that if that switching implementation doesn't give me an advantage because
I don't know what's the intention of the Sequoia.
Will they fully support both specifications?
I don't know.
There's Nio.
Okay.
Rush.
All right.
Are you saying that if we implement V5, then you'll use Sequoia?
I'm not making some promises.
I'm just saying that additional other alternatives currently are not
wearable and if things change, we can re-evaluate our thinking.
You mentioned that S-MIME can have a lower barrier of entry than open PGP.
To my understanding, the primary problem with encryption is that the user loses the key
and he cannot read this email anymore.
I don't see how S-MIME has any advantage over PGP in the sense because if I can just as well lose the key,
the certificate authority cannot regenerate my key unless you want them to do so much rather than the key.
I don't see the advantage.
So I think the problem exists with both technologies.
That's the same.
But yeah, maybe we could introduce a key inscription key.
Maybe we could introduce concepts that Thunderbird generates a key encryption key for users.
They make it back up with a path race, maybe 20 words writing down which just a randomly generated
symmetric key which we back up in paper form with 20, 24 words written down.
And then maybe Thunderbird could encrypt all the users' private keys with that single symmetric key.
A possible idea that could probably be used for both technologies.
So I didn't spend it...
Yeah, that's a general idea which we could do which would help both technologies.
Alright, any final question in the room?
Have you looked at the secure join standard and do you think it might be an option for Thunderbird users to have
guaranteed internet encryption with verified fingerprints in a very user-
I have not seen the project you mentioned yet so you would have to point me to it and we can have a follow-up discussion.
Alright, so thank you again.
