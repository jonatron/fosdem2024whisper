Good morning everyone. We have Ryan here talking to us about open source and yeah, take it
away Ryan.
Thank you. One problem with having your talk first thing in the morning is there are a
lot of missing seats and I'm pretty sure that's because I saw almost everyone here out last
night drinking really late.
Louder? Is this better? No? I'm not sure I can make it louder. Is there a set? Is there a?
Okay.
How about if I just talk like this for a little bit? That's going to be hard because the thing
you didn't hear was I said we're missing people because I saw them all out drinking last night
which included me so talking at this volume the whole time is going to leave me without
the ability to do anything the rest of today.
I'm Ryan Sypes. I'm the managing director of product for the Thunderbird team at Mozilla.
And that's a little weird to say because Thunderbird exists in a different Mozilla than you guys
all know. There's a foundation which is a non-profit. Hey, that's perfect. And there's
a corporation that develops Firefox and then there's another corporation called MZLA that
develops Thunderbird. And that's due to a unique history of not being sustainable, of
Thunderbird not being sustainable. There's a great product, a great open source project
attracted a lot of users. There are multiple counts and depending on which one you believe
I happen to believe we attracted as many as 30 million users at one point and not at all
monetizable. At least that's the telling that I got when I came on the project which is
we haven't really found a way to make money off of this so paying developers is hard so
we're giving it back to the community to Steward. And so that takes me into this talk
where when I came on it was a project that was run by a very active community of volunteers
and there were a couple of us, a few of us who were able to work on it for a job. I came on
part-time as community manager and if I remember right there were only two other people when I
came on. For a product that still had 25 million users there were a lot of days that we couldn't
even build the product literally like it would be a red tree every day and we would have to work
really hard just to get it into a buildable state. I'm speaking to a room of developers and so I
can say that a lot of that was because we were downstream from Firefox which had a thousand
people working and developing the product every day and so absorbing that, thousands of changes in
a week for someone who only had one single developer working full-time and was difficult.
But that's the backdrop against to kick off a story of success. Maybe one of the few stories of
really incredible success around sustainability and open source. So why do I have credibility to
give a talk on sustainability and success in open source? This is our revenue year over year.
2017 is when I came on, 2023 obviously last year and when I came on it wasn't bad. We had $700,000
in donation revenue last year. That number is $8.9 million in donation revenue.
Going on to an online percentage calculator,
I determined that's a 1,108% increase over the last six years.
When you start to move, when the bars in that graph start to get higher and higher,
people start asking you why?
And it may seem like an easy answer. You're like, there has to be a why.
And yes, the whole time I knew there was a why.
But describing that to someone else felt like I need you to understand about 600 things
and then we can talk about why. So for you guys, I did the thing of distilling
600 things into three, which I'm going to try to impart on you.
And why is this important?
Well, I believe it's really important for every open source project
to have a map to sustainability.
I took a class a few years ago around product management.
And one thing I was really struck by was
the professor said every product before you launch it should have a business model.
Even if you're not going to deploy the business model to make money, if you're a startup, let's say,
your intention is just to grab users, as many users as you can, and not monetize the product.
It was this person's opinion that you should know when and how you're intending to monetize
the product.
In open source software, I would say that that's not always the case. You know, you don't always
intend to monetize your open source software and in fact, you shouldn't always.
But you should always have a plan for how you're going to sustain the project.
And I don't need to, you know, originally I was going to find some articles of really big
open source projects that had really sad episodes or endings. But then I decided you guys know
many of them, which is, the story is pretty common, right? Like you have a person or a group of people
working on a piece of software. It gets really popular. And then something happens to that person
or this group of people. And it doesn't even have to be a sad episode. It could be that the person
developing the software has a kid and loses time to work on the software. But it could also be sad,
you know, they die. Okay, now the software is going to go stale. There's no one to maintain it.
And so it's my strong opinion, just like that professor who said you need a business model,
that you need a sustainability plan for your software. And this will come back to Thunderbird
again. So I can tell the rest of that story. I'm going to drink some water.
A sustainability plan is you just forecasting into the future and saying
this project, or maybe you don't have to forecast in the future. Maybe you're already
running a successful open source project. But you sit down, you say,
how are we going to make sure that there's always someone or a group of people developing this
software? Or you can say, which I don't recommend, but you could say, no, it's just me. And when I
die, it dies. And that's okay too. Now, at least you've thought it through. But let's say that you
want your software to be healthy and go into the future in a way that people can count on it.
As I spill my water all over myself in front of like 100 people,
you need to lay out a plan. And for Thunderbird, I think that plan
should have been developed from the start. So that plan would have said
we're going to try to a couple of methods to monetize this.
And because we know we need at least a handful of developers in order to consistently develop
this software, simple, right? That's all it needs to be. You say one person is not going to maintain this.
So we're going to have to figure out how to monetize this project so that we can pay people to work on
it in order to sustain it. And the fact that that didn't work out is why Thunderbird entered dire
straights. And what we ultimately figured out,
at least for now, and plans can change, is that our sustainability plan was to
tell, we know we need at least a handful of people working on Thunderbird in order for
the software to work. That's just, I live through the volunteer days of it,
and that's not, it was not pleasant, it was not good, it was not a way to sustain the software.
And so the answer had to be, no, we have to pay people to work on this, to do the crappy stuff,
to maintain it. It's not always pretty work, but it has to be done and therefore we need money,
because people are not going to actually do some of the stuff that we need them to do unless we pay
them, because we know that from experience. We were trying to, I was talking to a bunch of people
about what Thunderbird looked like when I came on. And to drive this point home,
I've now heard a bunch of different ways to describe it, but the one that I thought of last
night is, you go into a house, maybe you buy a house, and you walk in and you're like, man,
this is a really nice house, it's big. A lot of people, you know, really like it, they come by,
they check it out. And then you're like, all I'm going to do is I'm just going to update the kitchen,
because the kitchen looks a little dated. And like you start pulling out the cabinets,
and there's just like termites everywhere, there's a pipe just like shooting water off in one direction,
and like, it's just not pretty. And every time you go to change something in that house,
it's the same thing. Like you just like open a closet, and there's like a clown in there,
and you're just like, I'm just going to close the closet and not think about that for a little while.
And so for us, we had to somehow, we said, okay, you can't sustain this project
with just random people off the internet working on whatever they want to do,
whatever they want to add. In fact, that's really bad. That's like,
all this structural problems with this house, and someone's like putting a pool on the roof.
And so we needed a plan, and that came in the form of trying to monetize it.
So, to come to a sustainability plan, you kind of have to ask yourself some key questions.
And this is probably not that crazy, but I wonder how many of you have actually
asked yourself this about your open source project. If you're not working on a project
that's like Red Hat, like we know how Red Hat is sustained, we know how like,
you're going to make money, you know how you're going to sustain the project, I hope, I don't know.
But for me, something that I took stock of over the years at Thunderbird and tried to think about is,
okay, how much effort does it take to do this project? In a perfect, maybe not a perfect world,
in a the minimum viable level of effort, what is the minimum viable level of effort
that it takes to maintain this project? And then I thought, you know,
who are the key stakeholders? Well, that one was really easy, because that was like
the tens of millions of users. They were definitely like the number one stakeholder.
And then the third one, which I'm not sure anyone had really spent a lot of time thinking about,
is how do we communicate with those stakeholders? Which
businesses creating proprietary software, right from the outset, this is a thought that they're
mulling around in their head, which is, okay, someone downloads a product, there's either
something within the product that we're going to use as a mechanism to have a conversation
with our users. Or there are other channels by which we have these conversations with our users.
And that can serve a variety of purposes, right? Like one, obviously, for commercial
product is to convert people to paying users. Maybe it's a free product and then you pay for
some kind of additional features or whatever. For us, we really hadn't developed these mechanisms,
and the people that we had following us, we're following us in places that
we're only able to speak to a fraction of those users. So whether that's an IRC channel,
you know, obviously, you're not capturing all of the Thunderbird users there, or a Twitter handle,
not capturing even remotely all of the users there.
And then once you kind of have answered the first one,
you think about this fourth one, which is
that aside the effort, what else does a project need? For Thunderbird, it's infrastructure,
and building and distributing Thunderbird alone is like a source of cost in and of itself.
So I call that out because you have to kind of take a holistic look at like,
what does it take to build and distribute and make this software available to everyone?
Okay, so I've told you a lot of really basic things that you probably could think about if you
spent 15 minutes thinking about projects, and why did I do that?
I've been contributing to open source for
probably 20 years in some capacity or another, and I'm losing a lot of people. We're losing them.
Yeah, I'm gonna have to like do a cartwheel or something.
I call this out because I don't think most open source projects start from a place of any plan.
I don't know if you guys agree, but oftentimes it's just like,
I'm gonna do this cool thing. It's gonna scratch my itch, or it's gonna scratch the itch of people I
know, and what happens happens. And talking about a sustainability plan, I'm asking you, please,
for the love of God, don't do that. Just take the extra whatever it is, 10 minutes,
to just think through, okay, best case scenario, I create this software.
How am I gonna do, or how am I gonna think about these four things?
Because what we don't need in the world is more un-maintained open source software that people
rely on. Because that creates a bad ecosystem and a bad reputation for open source software,
and we all know that. We all know people who we've turned on to open source software
who essentially just say, oh yeah, well, I'll just use Thunderbird because I don't want to trash any
project. But something you could imagine hearing about Thunderbird is someone's like,
this is just crappy outlook. I can't afford outlook, or I can't use outlook for some reason,
so I'm using crappy outlook. I don't believe that, but that is the result you get for not having
a sustainable maintained open source project. And then if you're like family members of mine,
and you learn that this is an open source project, and it is crappy outlook or crappy
Photoshop, or insert the software of your choice here, you associate open source software with
not as good. It's just not as good. And I don't think any of us want that to be the outcome of our work.
One major challenge that I had in helping get Thunderbird to a place where it was sustainable
was I had a community of developers who, whether or not they'd admit to believing this,
this is what they believed. Not this, this is what I believe, but they believe that money was bad.
Anytime I brought up the fact that we could do this to raise donations, they're like,
we don't want to annoy the user. We should just make the software, and if they manage to stumble
across a donation page somehow randomly, that's okay. And the thought I kept having in these
conversations, because I was saying, oh, okay, once a year, we could just put a little thing,
a little pop up or something that just says, did you know Thunderbird runs on donations?
That's how we pay folks, like please give. And I got so much pushback for that.
And it's because when you really talk to people, they thought that asking for money
in a direct way to users was somehow not a activity that an open source project should do.
I don't know where that comes from, but I know it's true of a lot of open source projects,
because when folks started asking us, how did you raise donations? And I told them,
one mechanism is we hit all users with a full page donation appeal every year. You just saw
like their faces drop, and you could just tell that they were like, I'm not going to do that.
And you know, it's funny because I also felt uncomfortable with that.
I thought this is going to look like spam. This is going to be annoying. Maybe users will leave
because it'll be like, I just want to do my email. And this is like bothering me,
and I never want to see a popup again like this.
And I don't remember which piece of software it was,
but a little later after that thought, I was using some, oh, it was Evernote.
I opened up Evernote. I don't actually use Evernote, but I had used it in the past, and I was like,
I know I put a number in here that I need to remember. So I'm going to open it up and find that number.
Before I could ever look at a note, it was like three things in succession that I had to exit out of.
And it was, they were all like, you should pay us. And then it's like, no. And it's like, yeah, but
you should pay us. And I'm like, no. It's like, well, if you don't pay us, we're going to do X, Y,
and Z. And I'm like, no, I just need my number. But after that, I was like, you know what?
I bet that's happened a lot in a lot of different programs. And I don't remember it because
that's not an activity. Exiting out was not an activity that I committed to memory.
It's just like, oh yeah, like, of course they're going to ask me for money, like, whatever.
But that, my friends, was a eureka moment of like, I don't remember any software asking me for money,
but I know they do it all the time.
And so that's what we did. Popped up full screen once a year.
Help keep Thunderbird alive. This is like the history of Thunderbird in one page.
Did you know that less than 1% of Thunderbird users fund all of our work? That was especially true
when this was displayed. Not too long ago, Thunderbird was on the verge of extinction.
We don't show advertisements or sell your data. We're completely funded by donations from our
community. That, my friends, is a $6.8 million appeal. Well, now it's more than that because we've run it
twice. So it's a $15 million appeal. That, just this.
And, you know, when I ask people, our users, do you remember the bird, the end of year donation
appeal? I've asked probably, I don't know, 100, 150 users at this point about this appeal.
You know what most of them say?
I don't know what you're talking about. The bird, the Thunderbird, I'm like, no, he's a bird holding
a heart. He popped up over your whole paid, you know, he took over your whole browser like a couple
weeks back. No, I don't know. I don't remember. I'm sorry. This bird sounds really important to you,
but I don't remember it.
And some KDE guys asked me about, you know, raising donations. And I told them exactly what you might
imagine came out of this, which was like, pop something up a couple times a year full screen.
And they're like, you know, we don't ask often. Give us a little money. And they're like, people will,
people will revolt. They'll change to, you know, I'm like, maybe, but honestly,
it'll pop up in December and you'll ask them a week later. And they'll have no idea what you're
talking about. Because if they don't donate, they're just going to hit the X and just move on
and not think about it. Maybe next year they're like, oh, yeah, didn't they do this last year?
But probably not. Because the moment they go to Wikipedia and get that appeal from our good friend,
Mr. Wales, you know, these things are all invisible.
This year we tried displaying this a few times a year.
Donations went up. Nobody remembered. Nobody remembers the bird. It just doesn't, that's not
how human brains work. We're so inundated with incoming signals all the time.
And that's the point. You're not that annoying, maybe to your friends. But these appeals are not
that annoying. Because we live in an information environment where this is just something people
expect and something that people have grown to not see anymore.
And so
that's the takeaway. But there is one other thing.
And now we'll go back into Thunderbird. Because ultimately I'm up here to both tell you how to
make a sustainable project and implant in your head that you're going to come out of this and
you're going to install Thunderbird. So we asked our users for money. That's pretty simple.
Because we knew in order to be sustainable that we really needed at least 10 engineers working on it
just to make Thunderbird run, not to do a bunch of fancy stuff just to go.
And once we were able to set up this model, it became a lot easier to convince the other
developers on the project. Those ones who were like, money is bad. They're like, money's not that bad.
And it helps us sustain the project. And users understood that too. That appeal said,
essentially, you get value from this and without you, it doesn't work. And
you know, I lied a little bit earlier. I did hear from users who do remember the appeal.
And especially after the first one. And I'm going to look at someone in the audience because he may
have seen a negative comment. But I never saw a negative comment about the full screen takeover.
In fact, I saw positivity of folks saying, I just assumed that you guys ran off of like Google
money. If I had known that you were reliant on donations all these years, I would have been
donating the whole time. And I got that hundreds of times of just people saying, of course, I want
the tool that I'm using every day to manage my email, to be sustainable, to be funded. But you
never told me that you needed my help. You never told me that that was on me. And so I remember
the strangest feeling of being thanked for telling people to give me their money.
So there you have it. But this slide, which I haven't even talked about since I put it up,
is the other piece, which is you're all maintaining different software. Or maybe you're not. I don't
know what you do. But I assume most of you are engaged with some piece of software that you develop.
And it's not a one size fits all. If your software isn't public facing like Thunderbird and doesn't
have 20 million users, this is not irrelevant to you. You probably do have stakeholders.
What is your conversation with them look like? If it's a big enterprise that's leveraging your
software, are you talking to them? Have you talked to them? Have you said, hey, don't be like the
mafia and be like something really bad could happen. The software, it could go away. But maybe
you should at least remind them that that could happen. Something really bad could happen.
Somebody could get hit by a bus. That guy is me. But
if you don't make that clear to the people who rely on your software, if you're not sharing with them
the need, the pieces of the story that tell them how your software is sustainable,
they're not going to know. And then you're going to have these, I remember, and this is the example
I'll finally use. What piece of software was it? Any of you could answer this and I'm not going to
pull it out of my head. But we've seen it, right? Just go to ours, Technica. Some open source project
that's used by Google has a security vulnerability in it, probably today. At some point, that's going
to be exploited. And the ours, Technica story, it's the same every time. It's like major exploit
found in this product. And at some product we all use. And then they figure out, oh yeah,
it was because they were using this library. And the maintainer stopped maintaining it 10 years ago.
Google would have much preferred that that maintainer be like
whatever it is in the repo maybe, it's just a big thing at the top. It's just like,
I can't afford rent. I'm going to have to go work at Starbucks unless somebody gives me some money
to work on this thing. I guarantee a lot of developers downstream would be like, oh, that's
really bad. We need to give this guy some money. And that's what I'm talking about. Don't be that guy.
That is a dick move. You created the thing. You're not maintaining it. And that's not the dick move.
The dick move is before you stop maintaining it, what did you do to let everybody know
who relies on it? What was happening? Why is it going away? What can you do to prevent it from
going away? And that's something we see all the time. You guys know it. I know it. So
just think about it. Think about it. Today, tomorrow, how am I going to make my software
sustainable for the future for the people who rely on it? And you'll think of something.
Try different things. Make that part of your day. Make that part of your development process. And
I know that's the most annoying thing to say. But just, you know, like I'm going to dedicate
3% of my time working on the project to just figuring out how to make it sustainable.
Because I think that's good not just for you, but for me, for open source, for
this software movement. And yeah, that's my talk. Thank you.
Thank you.
And I'm happy to take some questions you can ask me about Thunderbird. You can ask me about
sustainability. You can ask me whatever you want. You can ask me how I get my hair like this.
But we have another five minutes with each other.
Thank you for your talk this morning. Are you helping your colleagues at Firefox?
I get asked a lot of questions from those teams. It's true. At first it was an anomaly.
You know, people didn't really know what to think when we started on this path to sustainability.
And to be honest, at first it was met with like maybe some snickers of like, oh, they're funded
by donations. Well, let's see how long that lasts. Now, you know, six or seven years into it,
I get a lot more serious questions of, because it's kind of changed, right? It's like, oh,
wait, folks are paying you for no value exchange, no immediate value exchange? Maybe we should figure
out why they're doing that and whether or not we can apply that to other things. But I will say,
though, it is scary too. It's scary to run off of just pure donations.
Because, and I don't think you should always choose a donation model for your open source project.
If you have any other model available to you, use that because I do tell my team one of my biggest
worries is that in an economic downturn, for instance, donating to the Underboard would
probably be a much lower priority than buying food. And so, you know, donations is not necessarily
always the best model for sustaining an open source project. And you should use, when I put,
like, do it your way, like you should use whatever mechanism, whatever mechanisms you have available
that are going to make a project most sustainable, in my opinion. Any other questions?
Yes. What's the current size of the Thunderbird team?
I'm trying to find who said that over here, down here. It's 32. We're hiring an additional 13 roles
this year. So it'll be 45 by the end of the year. And we expect to continue growing minus an economic
downturn. So, yeah. There's one down here.
Do you get a lot of contributions from people who you have not hired, like from random people on
the internet? Or is it mostly the pay developers that are developing Thunderbird?
I didn't hear all of that. Can I get it one more time?
I was asking if you get a lot of contributions from people on the internet, as opposed to pay developers?
We used to get more, so we used to get more contributions out of necessity from
our community, because they were maintaining the project. So from 2012 to 2017,
maybe even 2018, I would say that we had to have a majority of contributions from the community.
But as I said at the beginning, the problem was people were scratching their own itch and not
addressing the actual product needs. That's right. And so that was a really weird time, because
you may have a really bad, bad thing happening in the software. And we had a few.
But if it was going to take two months of consistent development to fix it,
volunteers, they just were like, yeah, I'm really just here to fix filters, and then I'm out. And so
once again, sustainability, you have to have people around your project to work on the hard things.
So you mentioned you showed the full page thingy. Did you show it to everybody the same day, or is
it like staged? Because I feel like everybody the same day might end up in Twitter, like, oh, what is
this thing? I'm like snowballing. Yeah. Yeah. So the answer is we have not been very sophisticated.
We hit everyone. So we don't hit them on the same day, but that's not because we're clever. And we
developed a system for, you know, spreading that out and a B tested that. That's because they see
it when they update to the newest version. And not everyone updates the day of the release. In fact,
no one like, okay, I shouldn't say that. Not just it's spread out because people update on
different days. But that also gives us some data of like, hey, well, we performed better this week
than we did last week, you know, but with this group. So yeah. But in the future, we'll have a
more sophisticated mechanism and I'll come back and tell you tell you what worked and what didn't.
Two quick questions. One, do you use a particular way of collecting the money? Like is it a PayPal
driven thing? And second one is do you maintain some kind of a
pad for, you know, to try and smooth out that economic curve like a year in the bank, so to speak?
Yes. Yeah, yeah, yeah. Very good questions. On the first one, we used to have our homegrown
donations stack from Mozilla. So it's a stack that Mozilla created for the foundation.
You know, there's this thing of in any endeavor where it's like, does this make your beer taste
better? And we found out the answer was no, maintaining a donation stack does not make
our beer taste better. And so we've moved to a platform called fundraise up, which
supported supports way more ways of giving than we ever did. And so I would recommend you like,
if you don't have to create a donation stack, please don't do that. Like use some tool or
platform to do that for you. And then the second question, which I'm trying to remember what it was.
Oh, yes, we, yeah, we have a year in the bank and that's what that's,
that's how we hedge against potential donations. So far donations have only gone up, which is good,
but we're hedging against, you know, a scenario that I talked about. And I think that's
wise. It definitely gives our developers who know we're donation funded, who work for us a lot of
a sense of stability, which is good.
Well, thanks for your talk. And I see possible applications of this method also not only for
software, but also for creative commons, art projects or something like that.
Yeah, just to throw it in. Yeah, I think, I mean, it's, and it's super simple, right? And my time's
done. So I'll answer this and then I'll be done. The model is just this one that like, even if you're
creating something that's free, you should be thinking about how it is you're going to support
that work. And especially if there are people in the world who find value from what you're doing,
you should be communicating with them in order to tell them to continue to receive this value.
There just has to be some layer of support around it, which I think is it's straightforward,
but I just don't think it's a process that a lot of folks go through when they're creating something
for free. They don't think about, they're always thinking like best term, best case scenario,
like I'm going to be able to dedicate this amount of time to this in perpetuity for the rest of my
life. And then something happens, you know, like maybe you're like me and you have twins. And then
everything that you used to do, all your open source projects, for instance, in my case,
they just stopped being developed if they're only developed by me. And
if I could go back to myself like six years ago, I would, you know, like smack
myself and be like, you don't have time for this, like you don't have time for maintaining all these
different projects. How are you going to, who else you should be pulling in other people to
help maintain them, whatever it is, you know, but it was not a thought that I had. And that's what
I would like everybody to think about, you know, before you start something, or if you're in the
middle of it right now, how are you going to sustain it in the long term? Are you going to sustain it?
You know, okay. Cool. Thank you so much.
