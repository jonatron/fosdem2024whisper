Hi guys, thanks for attending.
Yesterday I gave a talk about Calculang.
This talk will be different.
Yesterday's talk was in the JavaScript Dev Room.
It was more about interacting with numbers and workings and formulas and sharing numbers
and workings using Calculang and facilitated by this diagram which I went through.
The important thing to know about this is Calculang is a language for calculations.
It doesn't do other things.
To do things with numbers you have to use another language and you call numbers from Calculang
rather than re-implement them.
This makes Calculang simple and focused.
You just write pure functions or formulas from spreadsheet parlance.
I talked about this in terms of these aims.
Shareable and communicable.
We're encapsulating numbers.
We have a thing we can share.
It doesn't have programming mixed in there.
Transparent and verifiable.
These are things I spoke about yesterday.
Today we're going to...
This talk will be more technical.
Yesterday's talk was more interactive.
Today I'm going to focus on this flexibility and reusability.
We have a language that's just for calculations.
I'm trying to develop a language which is flexible so that calculations can be reused.
We look at an example which is from...
You can find this example on Calculang.dev.
You're a shop.
You buy something for some price.
You sell it for some price, hopefully higher.
You've got some level of fixed expenses.
You've got some number of units you buy and sell.
We have these formulas.
First of all, we have the separation of concerns.
Over here we have these formulas.
Sales is units times sales price.
Purchases is units times purchase price.
Profit sales minus purchases minus expenses.
Over here, for these inputs, we have results for these formulas.
This side is calling results.
This is calling numbers from here rather than recalculating them.
As a bit last side, I'm just going to sit and point out.
If you did this in a spreadsheet, depending on how you design it, you've got one layout.
Your layout decisions are made when you key in the formulas.
But just to show you, we have separation so we can control layout.
Here we're looking at sales prices in one value.
It's a range of values.
We put it on a x-axis.
We didn't need to change that.
We had to do it with calculations.
The calculations are free from layout.
I'm coming back to properties by Calculant to make it flexible.
First of all, this isn't like the code that I showed yesterday, the Calculant code.
I'm hiding some things, so I'll unhide them for you.
These are the inputs.
This is a convention to describe an input.
The Calculant can understand it's an input.
It's a function mapping onto the same name with underscore in.
We have a convention to describe inputs.
We have these inputs up here, so I'm just going to get this out of the way.
We export constants, everything in Calculant, that's the rule.
That's redundant, so let's get rid of that.
Here are the formulas that we can focus on.
I said some things about Calculant code yesterday.
First of all, it looks like JavaScript because it's based on JavaScript and it compiles into
JavaScript, so you get a JavaScript bundle or ESM at the end, which has just got pure
functions in there, interior as portable.
Second thing I said is that functions and ... sorry, there's only two primitives in Calculant
to know about, which is formulas and inputs.
Here expenses is an input, units is an input, and these sales, purchases, profit, or formulas,
but all of them are implemented as functions, so we call units like it's a function, even
with an input.
Fourthly, Everton is a function which is a nice uniformity.
It's good for refactoring things, so if units becomes a formula later, which is a hint about
what we'll do next, then there's no refactoring.
But we also, we don't populate these brackets, so that's something the Calculant compiler
does for you.
We will analyze how inputs are used and we'll populate those brackets for you, so we'll
tread inputs through all those brackets.
You can see, in this case, it's the only thing that the Calculant compiler does.
You can see the output here.
Let's just look at where inputs are used and build in a tree, which you can see down
here.
A little bit of graph theory, a little bit of logic.
It knows that sales depends on sales price and units, profit depends on all of these
things and populates this.
This isn't in order to make formulas concise.
It's in order to make numbers flexible.
So that, supposing we're looking at different sales price here, different sales price here,
but all it's saying is that if you have a higher sales price, you're going to make more
money.
If we're thinking about changing our sales price, we might actually want to create a
constraint, a demand curve.
New requirement, let's see how that's implemented.
I'm going to turn on inputs so you can see what happens.
Units is an input.
With a demand curve, units is a formula.
Not now it's changed.
We didn't need to refactor where it's used.
But there are changes in the JavaScript.
So now purchases depends on sales price and purchase price.
Previously it depended on units.
Now units is determined by the sales price.
So that's an example of input inference.
So Calculation will infer inputs and populate them for you so you don't need to manually
trade things.
You can build functions which depend on inputs in complex ways.
Basically you've got this flexibility to create cheap inputs and change your models,
your calculations.
But there's something happening that I did here that I don't like which is I copied
all these formulas.
And this would be nicer or neater if we didn't need to do that.
So this is the same thing, nothing changed over here.
This is the same thing, just modular.
So we have a file, a calculating file which is important calculations or functions from
the original shop model.
So this is the original, exactly what we saw at the beginning, units is an input.
But it has a different definition, it has that formula for units.
And effectively this is a way that you can say I want these calculations but with these
definitions.
So Calculation gives precedence to what you define closer to the entry point, closer to
the root, then closer to the actual calculation.
So you can change how calculations work when you import them.
Now in practice you can see examples where I use this on Calculation.dev.
I indicate with this icon that modularity is being used.
So yesterday I looked at a savings calculator which estimates for some interest rate, for
some amount you're saving, it estimates an amount that you will have at the end after
five years.
You can change these things in the savings calculator.
But interest rate might not be a thing that is fixed.
So as time goes on you might find interest rates can change, we know that.
So you might want to analyse how your original calculations, you might want to update your
original calculations and analyse the gap between what you actually got and what you
expected to get.
Here we're doing that analysis for five different years.
So again five different sets of results.
And there's no copying of code, we're reusing the same savings calculations, we're updating
that in a controlled way by making interest rate something that depends on a new input
cut-off for actuals and it uses either expected or actual.
So there are analyses, we can use the properties modularity input inference to make our analysis
more contained.
What I like about this is we've got one place where savings calculations happen, we've got
one place where reconciliation calculations happen, all the logic is segregated.
So other place where I use this, I made a pension calculator, it's for some calculations
in Ireland and it's work in progress and lots of disclaimers on it.
But I try to show people the value of pension tax relief, at least pre-retirement.
And so we've got a pension calculator, but you want income tax calculations, so rather
than put income tax calculations into the pension calculator, we use modularity, we
use formulas.
Down here just to structure some of these things better, I use modularity.
And this one was my first test of modularity in calculating.
It's a model which calculates, every year around September, October there's a budget
in Ireland, the government changes tax rates and on the radio lots of people are talking
about this change causes, this impact on finances, this lets you change those things and see
an estimated impact on government finances.
And there's no two copies of the calculations, it's just reusing.
We're using calculations.
The last thing I'll briefly touch on is we have separation of concerns.
That creates an issue for Calculant because you need to make a thing on the right hand
side there in order to see or do, I don't know, a Calculant with the numbers that come
out of Calculant.
So Calculant Vinspec is a very rough visualization API based on this which is brilliant.
But it lets you map formulas and inputs directly to visual channels.
This is a presentation I link in my abstract where you can see examples, there are code
blocks here, we're passing in the model, input courses and values which don't change.
We pass in a mark, we want bars, we say on the x-axis, we want different months so you
can pass inputs in with a domain.
So in a declarative way you can make visualizations of your numbers that come out of Calculant
which is not prescribed, Calculant isn't the pinninated, you can use anything you want.
This has many disadvantages but it's a way of using this.
I'm starting to use this closer to the metal because this is far more powerful but it's
very important to have a quick way when you're developing a model to get numbers out and
see them.
So that's one thing to help to develop things for that right hand side.
So that's modularity and some of the technical details about the language and one way to
visualize.
I won't go through this but you can see examples in the tools code for different visuals.
Any questions?
Yeah?
Syntax for Calculant is JavaScript.
Do you think it would be helpful to have more human readable syntax?
Yeah, definitely.
In the medium or long term yes.
It's got the developer experience overall.
It's not something I put a huge amount of attention on but over time, of course I will.
Because you're writing the formulas in a kind of declarative way, they're kind of light
and there aren't too many different things to know.
I said there's two primitives, formulas and inputs.
I think it's conceptually simple.
The developer experience and some things about performance are hard now but I think the conceptually
can be much better.
I showed you there's redundancy in the code that you're writing.
So that is an issue that we can address in the future.
What I really like is that there's no servers in old strata.
It's all client-side.
It's all client-side but that stuff is you need to run a compiler on your machine currently.
It uses an old API.
I use webpack and babble to make the thing but that will change.
You can publish it right?
Yeah, you get a bundle that you can publish.
We will have a standalone calculator for certain sometime soon.
The blocker for developers probably isn't just running on your local machine right now.
I had a link to Calculated Party.
It's a channel on metrics.
You can join and talk more.
If people want to contribute something for a community gallery,
because that would be a nice next goal, then talk to me and we can try something.
Things are typically good at our education or things that are simple
because computationally just makes sure it works.
Thank you.
