Hello, everyone. Can you hear me? Hello, hello. So, I guess we can start. Is it working?
Hello, hello.
Quiet please. We're about to start the next presentation, guys.
Hello, again. So, welcome everybody. Can you hear me? Can you hear me? Okay, great. Hello. So, I am Francesco.
I'm here to talk about installing the IBM on an industrial embedded device. What I mean with an industrial embedded device, let's say, not a consumer device.
So, it's a device that you might find in industrial automation, building automation, or an agricultural machine, not a baby PI, okay?
And I am an embedded Linux engineer. I'm working with Uboot Linux and Open Embedded and using Debian since a very long time.
And this is my distribution of choice, but I'm not working with Debian lately.
So, what we will cover today. Why this started? I had some hardware available. I mean, that's because it's my job.
Something like that, okay? That I normally work with this with Open Embedded. And I was wondering, why can't I just install Debian on it, okay?
If we're supported by the upstream Linux kernel, everything is in place. What is preventing me to just install it, okay?
And this is where we all started. And this is a little bit of talk, which challenges I had and I was able to get there.
We will mainly talk about ARM and ARM64 devices. We will focus on the Uboot-Booter order.
And the focus really here is about installing vanilla Debian. So, there are a lot of ways you can install Debian.
Debian is running everywhere, not invented by myself. The focus here is really about doing just following the instruction and getting it done.
So, just to set a little bit of the stage, a little bit of overview of an embedded system, but also any system boot today.
After the system on chip, the CPU gets out of the system, they are going to get configured in some way.
This part can be really, really complicated. And at some point, the firmware needs to load the operating system.
What it does, it needs to figure out where is the kernel. It needs to figure out, in our case, where is the device tree.
And put everything in memory prepared and then jump into the kernel entry point.
We will really focus on this step here about preparing the binaries and jumping into the kernel.
This is our focus for this talk.
Something that is important to mention and will make our life easier is where is the firmware stored in Flash.
Traditionally, on your PC, you have an SPI in AirFlash. That is where your UFI is stored and this is completely out of band.
This is not where you are going to install your operating system.
On embedded device, it depends. Sometimes for curse saving, you have only one device in which you store everything, the firmware and the operating system.
Sometimes they are separated.
The order that I am going to consider today is using EMMC.
EMMC have very nice features that allows to do hardware partitioning.
Normally, they have a dedicated partition for the boot firmware.
This enables to not have to warn them about overwriting my firmware while doing the installation and operating system.
This is not possible, for example, using an SD card like you would do with a Raspberry Pi.
Raspberry Pi is booting from an SD card and then you cannot really do that.
This makes the stuff more complicated.
Good. In our case, our firmware is, as I said, U-boot.
U-boot is a platform firmware. It supports a lot of architecture.
In the end, it configures the hardware, as I said before, and then it is able to load the Linux kernel.
Traditionally, let's say the past millennium, this was very coupled with the operating system that was loaded.
Some time, a few years ago, probably 10, 8, I don't know exactly,
there was introduced a new feature called DistraBoot that is trying to solve this task of loading the operating system generic.
How does it work? U-boot is scriptable with shell script sort of and as environment variable.
DistraBoot is implementing with script a generic way to search for a bootable partition
and then to search for a way to boot the operating system that it found.
In short, you tell the board which are your boot devices and then you just include this header that I mentioned earlier
and that's it. It's very easy to integrate.
What it searches for normally is a boot script with a fixed file name,
searching either the first partition or the first active partition and executive content.
It can also parse an x-tlinux.com file that describes how to properly load the OS.
We will focus on the boot script that is more flexible.
It allows really to do everything because it's really code.
The reason we focus on that is that this is what is supported by default on Libyan.
X-tlinux is working in Libyan but if not out of the box experience you get from the Libyan installer.
The boot script normally what it will do in the end will be loading the kernel from some storage device,
loading the device tree, loading your init addy and then we'll just jump into your distribution.
Cool. Let's move on the operating system side.
The Libyan has a package that is called the FlashKernel and it's really a glue package between the operating system and Uboot.
I mean, FlashKernel is a little bit more generic but it's really able to integrate directly with Uboot,
generating the boot script we just talked about.
It's integrated into the Libyan installer, into the ARM one,
and integrates with the kernel packages out of the box using hook.
So it's supposedly to just put everything together.
Given that in theory it should be good.
We have Uboot, we have this package, so what I did was I tried to go through the installation.
I took one model, for instance exactly the one that I just showed you before,
probably the Libyan is still installed there, and I just followed the instruction, okay, as easy as that.
I decided to do a net installation just because it was at the moment the most convenient for me,
but again whatever is copied pasted here is just what you can find on the manual.
And the result, it was not working.
Why?
What I figured out is that FlashKernel needs to know about the actual hardware
to be able to properly generate a boot script.
This is why this is required.
This is required because it generates a boot script that are really matching the exact hardware that we are running on.
So you really need to tell the exact device tree file that will be loaded in the boot script,
and this is going to be part of the boot script.
It's also possible to have custom boot scripts and have a sort of additional customization,
but if your board is properly supported in Uboot, there is really not much to do
apart from telling you use this flavor over the kernel and use this device tree.
I mean, for instance, in Debian ARM port, it's supporting two flavors for the kernel,
ARM-HF and ARM-HF-LPAE, and you need to tell which kernel flower you want to use.
What I did was just opening a merge request on the Debian GitLab instance,
SalsaDebian.org, and I mean, I am not a Debian developer,
nor a maintainer, I'm just a user, but my merge request was just a reviewer and a sceptre.
Now, for instance, it's part of Debian Bookwork.
So it just opens for everybody to contact boot.
Cool. Then I wanted to try something else.
Distribute, at the moment, is considered a deprecated for a couple of reasons.
One of the reasons is that being implemented with shared script is a little bit cumbersome.
It's very difficult to understand how it works.
There are scripts that are set in global variables, and then other scripts will rely on the previous global variables that are set.
I mean, if you look at this for the first time, we will just get lost.
There was also a need, a long-term plan for Uboot to completely move to a Kconfig based system,
configuration system, and for that, there was a need to remove some include file,
as we saw before, Distribute is configuring through a configuration include header.
That's the main reason standard boot was done.
I didn't have any board with this enabled myself, so what I did was just enable this on the board.
I mean, it's trivial. This is just defining the boot targets that are just equivalents to what we discussed a few minutes ago regarding Distribute,
and then enabling a few configuration options.
From the integration to the distribution is pretty much the same.
Standard boot is more generic. It supports also UFI.
I mean, it's more, but in the end, it integrates the same way with the Flash kernel package, and it's able to execute the boot script.
The documentation is linked here, and I mean, it's way more than what I showed here in this.
It was a Flash USB Flash drive.
And with that, I was just running that bootstrap from my PC directly on the target using USB.
And there are a few queers to take into account because the architecture that my laptop is running is x86, while the target was an ARM.
And during the second step of the bootstrap, you are going to execute target binaries.
And this was really easy to be done also because as of today, using QAMU user static package
and using the bin format MISC support in the kernel, it's really possible to run cross-platform-byte-arm binaries on an x86 in a transparent way.
And all of that is just integrated into that bootstrap, and it's just a matter of installing this package.
So I went through my depth bootstrap installation completed.
I did all the required steps, and then it was not working.
What was missing this time apart, of course, this board also was not supported.
Today, this specific word is.
What was missing this time was that the Debian kernel was not supporting the specific architecture.
Again, the Debian kernel development is done on GitLab, on this GitLab project.
And they are just open to taking merge requests, and it was really probably a free-line change to enable this architecture in a decay config.
This is merged at the moment, and with that, finally, it was all working.
Good.
Last.
Till now, I was playing around with old ARM 32-bit architecture, and I wanted to try something more modern and faster.
I was getting older and older with the old ARM processor, so I wanted to try with an ARM 64 system.
What I realized is that the Debian-y standard for ARM 64 just expected to use UFI.
I believe that it would be possible to avoid it.
It's not like it's a master, but if you just take the standard path, this is what is expected.
And they said, okay, you would support a subset of UFI.
This is targeting this specification here that I think of here.
It has a few limitations.
It's not a full-blown UFI implementation.
One of the main limitations at the moment is that it does not support this set of variable up runtime.
We will see in a minute why this is relevant.
In a very simplified way, I hope that there is no expert on UFI here,
what UBoot is doing is searching on a GPT partitioned device for a specific partition called ESP.
It has a specific UID.
And into that, it loads a binary in a UFI format that is more or less a variation of the Windows portable executable.
And it just executed.
Anyway, moving on, UFI was not enabled in the board that I have available,
but there are really no hardware dependency on this functionality.
It's pure software and it was just a matter of enabling it.
You can see it's a lot of configuration options, but there is really just a generic code, nothing hardware specific.
Good.
So I tried again to install Debian and this time, let's say it was working more or less smoothly.
It was possible to get to the end without having to do any kind of customization.
What was a little bit scary was the fact that the installer was erroring out during the while making the system bootable.
What it complained about was exactly about this set runtime variable that I just mentioned before.
That was not working and the message is somehow scary.
How this is working?
UFI is configurable.
There are variables and the operating system is able with setting the boot order and boot 00, boot 001 variable.
To specify which device and really impractice the file name into the ESP partition.
This is really what this is about.
Normally, any modern operating system will install with a specific file.
I believe that for Debian might be something like Debian.EFI, I'm not sure.
However, this is not possible at the moment because of this limitation in Uboot.
Debian is able nevertheless to install with a fallback location.
That is what is used for removable device.
If you think about USB flash device or your CD-ROM, there is a fixed name that is sort of fallback.
Debian is able to install there and with that, I got a bootable system.
I had of course a few small issues about the fact that some functionality were not enabled in the kernel,
but that was straightforward to solve.
What I was wondering here at this moment is which device tree was being used.
Because device tree is really the hardware description of the board.
This is critical for the US to properly use the hardware.
While using this standard boot, this is really well defined and the flash kernel package is really telling you which device tree is using.
With UFI, this is really not visible.
So I started digging a little bit on that.
What is used by default is the internal device tree from Uboot.
Uboot is also using the device tree for its configuration and it is just able to pass it down to the operating system.
Here we are.
So what's next?
As you saw, as of today, with a very small effort, it is possible to run a pure Debian experience on an embedded target.
Something that I assumed here is that you have upstream support for your device.
This was the case for the hardware that I have available, but if you take a random board, this might not be the case.
Without that, Debian is not going to take your 1000 patches just to enable one board.
Okay, this doesn't exist.
Second, the integration.
What is envisioned is that the device tree is really coming from the firmware in the hardware description.
In practice, if you are familiar on how the development of the device tree works, as of now, are stored into the Git repository of the kernel,
it's really an incremental approach.
You would really like to have to update the firmware when you update the device tree.
This is just the reality that we have today.
So it would be very nice to be able to take the device tree from the root file system.
However, it's complicated.
When you boot with UFI, normally you have an intermediate boot loader.
You don't jump directly in the kernel.
So if you boot through grab, grab is able to load the device tree, but the loading on device tree is disabled once the boot is enabled, for example.
And the other issue is that normally the device tree is going through some fix up on the...
Why the boot firmware is executing.
And if we...
The grab is loading, if this fix up are not obvious to do,
there is an implementation that is able to ask Uboot to do this fix up afterwards,
but all of that is available as a patch, is integrated in Ubuntu and not in Debian and not in Mainline.
And then, I mean, we can make this even more complicated if we think about device tree overlays that are binary patches,
and they are normally used for non-discoveryable buses that are common.
Think about an embedded device, I2C, SPI, or an LBDS display.
And that's it. Opening for Q&A.
So, any questions?
Thanks for the nice talk. Just want to ask you, are you aware of the ISI integration tool for Debian?
ISAR. So we are doing heavily Debian on embedded devices, on industrial devices with that.
And it also addresses the topic of not upstream firmware.
I mean, I'm not aware of this. I mean, I will have a look.
I was really focusing here on a pristine and pure Debian experience.
There are tons of way in which you can install Debian, tons of way you can have a custom kernel.
There are really a lot of possibilities to use.
I mean, I could have built probably three slides only on the options that are available.
I was really willing to focus here.
I want to go Debian or follow the instruction and get it done.
This was really my goal here.
Thank you for this presentation.
I just didn't understand when it is booting from UEFI,
it's boot from UEFI, where U-boot is placed, where it is in which partition or in MMC,
or where it is, you said you're...
U-boot.
U-boot, boots from USB, if I understand.
No, I was using USB just for the installation purpose.
So I was just having the board available as it was a USB flash drive for the installation.
After that, U-boot was installed nevertheless together with the UFI implementation on the MMC boot partition.
Okay. This side. Thank you.
Okay. We don't have any time for any more questions, but thank you very much, Francisco.
Brilliant.
Thank you.
