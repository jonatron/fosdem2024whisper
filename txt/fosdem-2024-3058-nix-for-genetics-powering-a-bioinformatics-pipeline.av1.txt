We have now up next Alexi talking about NICS for bioinformatics pipelines.
So thank you everyone for coming.
For five minutes I will try to make a kind of different presentation and try to say how
NICS can help safe patients.
It's not a clickbait title I promise.
So I have a doctor in training but I also have a background in computer science so it's
a kind of a mixed presentation and I'm working in France in Besanson Hospital.
So when we are dealing with patients we want basically three things.
First we want to give accurate results because for these patients diagnosis can be life changing.
Second we need to be reproducible because all the doctors trust us with giving accurate
results every time.
Finally we want to be as fast as possible because there is a high demand for results.
I'm working in a rare disease setup where obviously things are rare so it's hard to find
and how do we do it?
Well it's a mix of computer science.
And expertise and state of the art technology.
So here is a very worth scheme of how everything works.
We start from a blood sample of a patient and we try to extract the DNA and sequence
it on this machine thing.
Unfortunately the machine doesn't do everything and we need some bioinformatics in there.
And also the bioinformatics doesn't do everything either.
We need a human at the end of a pipeline which is why there is a CSV file that a human has
to read.
And basically what the bioinformatics setup does is that it figures out a list of candidates
for diagnosis and try to filter down the results.
For example it can go from one million candidates to a thousand.
If it filters too much we can miss the diagnosis.
If it doesn't filter enough, well the human will have a really hard time trying to pass
the CSV.
When you say pipeline it's a really fancy word for just a set of common line utility
tools but we also have databases in there that are in our setup just text files compressed.
And when I say pipeline we just feed data from one CLE tool to another.
And now how does Nix can help it with this?
Well as a medical lab we have to be reproducible.
It's like in the law.
So Nix is a perfect fit because we can fix the software dependency and the dependency
either like byte by byte dependency.
So that's done.
So it would be great if you could run on the high performance computing cluster.
And in our region the folks in our cluster agreed to install Nix.
And now we can run our current production with Nix there.
Two things we didn't do with Nix was to manage the whole workflow.
There is actually a tool for that Nix but it's more like a niche thing so we prefer
to use a more common tool.
And the final things what we could do in Nix but we didn't is to manage this large
database because in our setup it's a different folder for Nix so we cannot install it.
But it's there in Nix.
Last last thing.
I really enjoyed the community.
It was a really nice interaction.
I'm sure everyone knows.
But it's also kind of a slow process because I tried to package something myself which
is not easy at the beginning.
And as you know there is like 5,000 pull requests on GitHub so feedback can be sometimes a bit
slow and also I'm working on my spate arm either so it can also take some time sometimes.
But for example the support for large databases has been added after a few conversations on
Matrix.
It was really fast.
I hope you take some key points there but if you want to know more you can send me an
email and I'll be glad to answer.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
