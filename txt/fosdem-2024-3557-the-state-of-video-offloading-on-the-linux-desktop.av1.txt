Yeah, hi, I'm Robert. I work for Collabora on rail and stuff. And yeah, I'm here to talk
about video offloading on Linux. And I'm a bit nervous because I haven't got this many
talks so far. But yeah, thanks for joining me here. I will give you a short introduction
about what I'm even talking about. Then mainly talk about the current status and what happened
in the recent time. I'll do one demo and show some benchmarks and then add some more notes
and then hopefully we'll have time for questions. So for everyone using a Linux, most of you
folks are probably used to or know what hardware decoding is and why it's good for your video
decoding performance, like why you like the API and so on. Many of you probably don't know that
there's a second step involved after decoding the video, like getting it into the right format
and scaling to the right size, which we usually do using GL or Vulkan these days. But actually,
most hardware does have hardware fast path to make this much faster and more efficient.
And this is usually in the display controller. They often can also rotate and so on. And yeah,
you would like to use them to get the maximum performance actually. And as you already already
maybe hear from the name, display controllers, this one sits at the very end of the rendering
pipeline. It's like after your app, after the compositor, at the very end before the buffer goes
to the screen. And yeah, this is normally not quite much used on the Linux desktop.
So what do we do in the embedded world? Over there, we have like lots of elements and lots of
software which can already use the display controllers directly by not using a windowing
system. Like you have like, yeah, things like the G-smart KMS sync. All kinds of apps have
custom backends to use the KMS slash DIM slash GBM APIs of the kernel directly.
And on X11, there was an extension to actually make that usable on the desktop. It's called Xvideo.
It never really took off and I could jump over that. Now we have Wayland. And this is a picture
from 2014, so mid 2014, which I think was the first presentation of showing a Wayland desktop
with the windowing system where video was actually offloaded. This is Daniel Stone from Colever.
Yeah, 10 years ago, we started using things, we started using Wayland and all this video
offloading in the embedded world. There is G-Stymar elements and MPV back end and so on and so on.
But practically this is still mostly limited to the embedded space.
So what happened in the last 10 years is that as you probably know Wayland made a lot on the desktop.
Now most people, I hope, are using it now. Apps actually started using hardware acceleration
like GL and Vulkan. This only just happened in the last couple of years in many cases.
And we got a lot of better kernel APIs. We got things like DMABuff modifiers.
Lots of things happened over the years.
So now what happened in the recent time? And especially in 2023 and also in the last couple
of months. And I'll start with one of the big news which is like this year,
Mada and Gnomescher finally got support to have short YUV buffers so apps can actually pass over
video buffers to the compositor which is needed to then have the offloading step.
And then GTK4, the GTK4 folks jumped in and made actually use of it and introduced a new
widget which allows you to offload content like video to Wayland compositors and that is landed
and it will ship in the upcoming 4.14 release. And we hope to have at least one actual video player
out in the wild on Flatpak using that and also hope that the GTK4 Paintable sync which is used in
a lot of GTK apps will more or less support that out of the box. Fingers crossed because it's all
getting close now. And this also depended a lot of the G-Stu-MRO work that you saw in the previous
presentation from Nicolas, the GL work there. So just to give you a short impression how this looks
like you will have a video player and it can put the video into a so-called Wayland subsurface
this is the case where the big bag bunny or the video is in front of the rest of the content
but you can also have the other case where there's actually content on top of the video
especially subtitles, controls, whatever. And yeah GTK is now able to do that
via Wayland and the Wayland compositor is then possibly, I can then in many cases
offload that directly to the hardware and I will show you that a little bit later in the demo.
Further on, another big development happening in the Wayland world that many are not probably not
so much aware of is that like Chrome OS is switching to Wayland, they are moving their main browser
to use Wayland and also to offer support for Wayland apps and that means they ported their
Wayland back end to support this kind of video offloading which they previously supported by
having Chrome OS using their own private APIs and so on. They are now supporting
the stuff using Wayland's APIs and this is mainly tailored for Chrome OS of course
but it also works on other, it can be made to work on all other Wayland compositors
and we have experimental patches for that and we hope that these will find their way upstream
in the very, yeah in the near future.
Yeah point is we have GTK 4 toolkit, we have Chrome, a browser which support this already
shortly about compositors. By now like Western as a more embedded focus compositor has been
supporting most of this for a long time, quite well but now we have Mada
supporting video offloading in fullscreen cases already,
Kwin just landed support for at least one such video format, NV12 which is the most common one,
just landed a couple of weeks ago and will apparently ship in Plasma 6, I haven't tested
that yet, it will probably also be limited to fullscreen only but it's there now so both big
desktops are covered and on the WL routes front, Sway is very actively working on getting
better hardware plane support so you can actually have the stacking of overlay over video however
yeah just landed support for the most important APIs, that doesn't mean that all
WL routes based compositors will support it automatically, like especially those with their
custom 3D engines like Wayfire, Hyperland and so on will either have to adopt these APIs or
will have to do their own stuff so yeah in the WL routes world it's a bit mixed between very well
supported and not at all but yeah the big desktops environments are there
yeah
the biggest thing missing on the video offload side in the Wayland world is
we don't yet have a proper protocol for the color representation
which is needed like for example for HDR 10 or for 10 bits video content you often use a
color space I hope I use the right word now which is called BT 2020 and we don't have a way yet to
from clients to tear compositors now that you want this but it's in development for quite a while
and will hopefully land in the not so distant future but this is one of the big missing part
and it's kind of related to the color management protocol which is generally the big Wayland
protocol needed for HDR stuff in general which has a lot more things there but all these stuff
are falling coming into place maybe at least from protocol side we will have have everything this year
so short conclusion on this part most desktops have at least basic support for graphics
offloading now and yeah there's lots of developments in many places involved
not everything is already supported but it's a good moment like to make your app or a framework
toolkit whatever maybe look into this and adopt it because yeah then we can make things happen and
get faster video playback so just because I'm so confident that everything works I even show you
a live demo now or even though it's very small and I have no idea how much you will see here this is a
Pinebook Pro with a very low power GPU but it has very good video decoder and a good display engine
and what you see is the GTK4 demo player and we have overlays from the compositor enabled so
opaque regions of the compo of the app are in green and transparent parts are overlaid in purple
and what I quickly wanted to show you is like in this case here the video is now behind the actual
GTK window and the GTK window has just has has some punched some holes so you can see through it
and the cool thing is if I move it around I know now it's offloaded
because it works and now if I go here we have rounded corners GTK4 detects that it can't offload
things to Wayland it transparently changes to rendering itself so you can easily implement this
or this things work picks up and every frame is perfect
and yeah this is running matter and I make it quick now if I start the demo and as soon as
the video just disappear you now see the overlay disappear the video plays this is now on a hardware
plane with hardware scaling on matter highly efficiently it works in short
okay I'm a quick now so I wanted to show you some nice quick new benchmarks from from intersystem
Intel GPU top and when I tried this this happened on multiple devices and I wanted to include it here
it means that the offloading works but it there's some bug somewhere in the stack outside and the
reason why I want to show it to you okay is the the the important point I want to make here
is that graphics folks are people working with graphics usually know that it's like graphics is
really hard to to test and to prevent from regressing from time to time like this is on
an Intel like this should work but somehow it regressed recently in some kernel and here I would
like to make the point that getting this stuff to work on the desktop for if you work for some vendor
or somebody who makes drivers is an awesome way to get lots of testing from lots of users who
actually give like right issues and give you good yeah go ahead so if you actually want to sell
things for embedded but want to have good driver quality just ensure you have a linux community
which uses on a desktop and prevent cases like that um blah blah blah I'm skipping over that
yeah yeah yeah better less watts and so on and so on and we are as good as the mpv native Wayland
back end on gkk4 now um I skipped that um yeah it has video uploading has significant advantages
for for battery life for resource consumption on the desktop as well as on that unembedded
and you can implement this we have all the technology now to implement this in proper toolkits
or complex apps like Chromium and it's worth it let's do it
um I am one note I don't want to skip here which is a bit controversial like it is very controversial
but I just wanted to know for everyone for transparency reasons talking about DRM like that DRM
as you know or if you just so what we are doing here is pass through from the decoder to the display
engine that actually means it becomes technically trivial to support hard DRM um I'm not saying we
should do that I'm just saying that the technical limitation to do that is no more or less done
and discussions should be heard about if you want it um but just like yeah this makes it very easy
to do all this um yeah on the more positive side we have experimental patches for various
things to to make it work also with real v4.2 decoders
no I skip that ah yeah NVIDIA just added in the news beta driver a couple of days
goes added support for something in that direction I'm not sure if it's GL if it's Vulkan if it's both
but and even the proprietary NVIDIA driver seems to be on board
ah nice it's both somebody just said yeah questions
hi
thanks a lot for the talk Chris one thing that kept me confusing wayland is the missing
color management so you could use color profiles
this is going to work similar later uh yeah the question was um or the the statement was that
one thing preventing people from using wayland is missing color management and um yeah there's a
lot of active work and a bunch of companies involved um who are very very actively working on that
we had even had a hackfest last last year where lots of companies came together and will have
another one in a couple of months I think and there's hopes that yeah things will come together
right now in the x you can apply one profile to one display and another to the second display
you just couldn't do that yeah but what what that color color color color big discussions can't
handle that in here and a bit of too much off topic
any more questions
also yeah uh firefox is looking into there are using that they want to use it especially for
10 bit video oh the question is what is the status for firefox and I've talked to some firefox
folks who said they would yeah they are looking into it for 10 bit videos to get that working and
yeah let's see I haven't seen any patches yet so but having it's working in GTK will probably
be quite a good um
yeah but make hopefully convince them to to put some more work into that
yeah so you've explained the various strategies to be able to like the underlay strategy and
overlay strategy where the video is under the uh compose and another where the video is over the
controls so do you always pick the underlay strategy in GTK or do you because some hardware only
supports underlays and some of our platforms only support overlays so it's how do you choose in
GTK do you always do underlay for now or um so do you switch to underlay and do you overlay or something
um so the question is very specific about um strategies how to layer things um
and how this is done in um GTK for now uh in short um chromium has options for that
um GTK for prefers overlay for the moment and um actually I personally would like to always use
underlay when possible in the future so you don't have to switch the surface around but that would
require a new protocol which I made um which we could discuss um yeah okay I think I'm out of time
yeah you can find me later for more questions thank you lot
