All right. Okay, I'm next. So, welcome. My name is Adolfo Garcia. I am a software engineer
with a company called StackLoc, and we do supply chain security as well. So, I'm here
to talk to you about like a project that we've been developing for the past six months, seven
months or so. It's called Protobomb. So, just to give you a quick rundown of why this project
came to be, let me start with the promise of Esbom. So, if you remember the promise of Esbom,
the Esbom is supposed to be the entire analogy of the label of ingredients in our software.
So, at some point, we had like a really good label, like ingredients label for our software,
but at some point someone decided that, well, when we had one, we needed a new one that was
almost quite the same, but not exactly compatible. So, this led to, you know, that friendly
cooperation that Gary was talking about between the formats, and at some point, so, but jokes aside,
this situation has kept Esbom applications in stock in a state that we don't want them to be in.
And the fact is that most people working on Esbom applications tend to get stuck because they
design their data models around the actual data models of the formats themselves. So,
at some point, we decided to start working on Protobomb, which is trying to solve this problem.
So, Protobomb came to be because of some public funding from the department of whole security
through their science and technology directorates, and is now a project hosted under the OpenSF
security tool in working group. And so, let me, sorry, I'm super rushing through the slides.
So, let me give you a quick overview of what Protobomb does and what it's supposed to be,
the problem that it's supposed to be solving. So, the idea of Protobomb is that while you have
software Esbom formats that are not compatible by themselves, the data in them doesn't really
have to be that incompatible. The fact that one Esbom format defines the hash labels using a hash
and the other doesn't, or uppercase or lowercase, doesn't really change the meaning, as we just
heard, of the data that's contained in them. So, what Protobomb tries to propose is that it gives
you an abstraction of a graph that captures all of the Esbom data in those documents, and it
rises one level above of the native libraries. So, the ideal of Protobomb is that you can let
the Esbom formats flourish and be as expressive as they want, and we can still capture all of that
information and make sure that we can do several interesting things with them. So, the first idea
is anybody who has done some kind of Esbom work probably has created their own abstraction to
read the Esbom data, and Protobomb keeps several definitions of the Esbom data in protocol buffers,
so libraries can use them from many languages, and you can still use those libraries in your
project. So, if right now we maintain an official Go library, another Python library is also coming,
and we're open to having more of them, so the first thing that Protobomb makes is that collection of
data structures that capture lost all of the Esbom data. We also capture how data gets degraded if
you output the Esbom data to the native format, so if the idea is that you should never lose Esbom
data, but in the cases that there's like some minor nuance that you have to, we document that and we
let you know in the ideas that you can control how that that all of this happens. The second part of
Protobomb is the library that we maintain. So, we maintain serializers and non-serializers to
read and write the data into each of the formats, so the idea is that if you're building an Esbom
application, you can read all of the data and work with the neutral representation of the data,
and then we try to solve some of the most common problems there. The first one was ingestion and
writing, and right now some new contributors on the project are solving how to pair our data
structures with Gorms so that they can be ingested. So, the idea is that if you are trying to develop
an Esbom application, you don't need to care about reading, writing, or storing that information
in a database. Protobomb also offers an API to work with the Esbom data, so if you ingest
data from Esbom, you can do some graph operations on it, so you can compare, mix, have differences
between the information, and keep in mind that since Protobomb is operating one level above the
formats, you don't care where the data came from. So, you can, for example, defend the SPDXS1 with
a second on the SS1 or a cross versions, so for example, you can read an SPDX2 and an SPDX3
document and make sure that they compare, and this is where we have that library of SPDX3
test that we had before, we were mentioning before.
And then one thing that we often get asked about is we are not trying to introduce a new,
like a new Esbom format, so our idea is that we want to make things easier for developers
while I think the actual experts do all of the expressivity that the Esbom formats need,
so if you, while some of those data structures could be rendered, there are no guarantees that
they will keep being useful if you try to exchange data in them. So, the way I want to
analogy I often like to do is if you think about a picture, you want to work with a picture, so
you don't care if that picture came to you in a JPEG or a PNG file, you just want to work with
pictures and then when you have to save it for some reason, you can choose the appropriate format
that you need to, that you prefer. So, how is Protobom, how does it handle the data? So,
it's a graph, and why is it a graph? Well, if you think about it, both formats are really graphs,
so SPDX, of course, was born as a graph, so you have packages and files connected,
which are the nodes of the graph, and then you have directed relationships between them,
and they are typed, and in Cyclone DX you have the components tree, and a tree is sort of a
simple graph, but Cyclone DX also has a dependency tree that can be used to create new relationships
between them, so that also forms a graph. So, in a graph, we start with a node, and then connect
that node in an edge to another node, and so on, and in Protobom, those nodes are the packages and
the files are represented in DSLM data, and we also add types, and the types are, I would say,
inspired, but truly stolen from SPDX, and then we capture that data structure in something that we
call a node list. So, the node list captures a fragment of our graph, which can be the whole
document, and then using that node list to create a document, we simply wrap it in a container
that's called the document, and then at some metadata, you have your S1 representation,
and then using that node list is how we can create fragments and operations of S1 data.
Finally, Protobom is an open source project hosted on the OpenSSF. We're on community
meetings every two weeks, and if people want to join the community meetings, create libraries for it,
the meetings are open to all. So, I think, hopefully, that was quick enough, and we
for questions? Oh, awesome. Yeah, I was trying to get to that. So, yeah, well, these are the
links. So, yeah. So, how do you handle the cases that you have a single S1 itself, or
multiple S1s that connected by references? That is exactly, yeah. So, how do you handle,
yeah, yeah. So, how do you handle when you have reference S1s?
Instead of a single file? Well, the external references, they are lifted into the project
itself. So, if you have a S1 that references others, we will just hold the references in the
data. We don't follow them. That's something that we could potentially view. But the more
interesting case is what happens when, for example, in SPDX, you can have many top-level
components, and then Cyclone DX has one root-level component, and that's one of the degradations
that you can control. So, you can make, if you ingest a project, like, if you try to write
Cyclone DX, S1 that has multiple top-level nodes, you can control whether your project
throws an error or just returns you the loss data or simply gives you a warning, for example.
These are like tiny hacks that we're building into the project so that you can control how it
behaves. You're treating like a monohepo for multiple root levels or a project file that's going...
So, it's like in terms of your development, you're treating the multiple root files like a
monohepo for multiple projects. Right, exactly.
Yeah, so is it like a monorepo where you have all of your projects, like one root and then all of
the projects there, or just like individual repositories breaking down the tree? Thomas?
I can barely hear you.
If you have different... So, the question, let me see if I understood. So, if you have six different
tools that write S-bombs, how does it help? Well, the idea is, well, based on this... So,
this is just a library to ingest and to write, right, so at the moment. So, based on this, you
can start building other different abstractions of that same data. So, we have some demos of other
tools that, for example, can recompose that data. So, if you have S-bombs in different structures
that have, for example, a top-level component of one thing, and then in a live-down somewhere
information about the same component, you can take those two and mix them in a new node that has
all of the complete information. And this was thought because sometimes you will have a tool
that will look at software, give you like secure information, you will have another tool that will
give you licensing information. So, you can take those two and combine them into a single one.
Yeah.
Do you have any recommended GraphDB to store these data in?
No. In fact, we're basing it on Gorm. So, right now it's more SQL table-based, but that would be enough.
So, if there's like a recommended Graph database to store this, I don't think I know.
So, let's thank everyone for...
