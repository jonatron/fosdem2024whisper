Hi everybody, I know you've heard it now, I think about four times about how the type
safety and gleam is perfect.
But guess what, we're doing it again for a fifth time in case you haven't heard it enough.
But before we do that, I'll just introduce myself.
My name is Harry Besto, I'm currently a student studying in the UK and looking to move on
to university next year.
I spoke here last year about gleam again and sort of helped start it off last year and
at the moment I currently work with Felicia's Ventures on their research team.
But while we get started, I know GraphQL isn't gleam, it isn't Erlang and it isn't Elixir,
it's none of this stuff maybe you're here to see, but it is the perfect match to go
with gleam as they both care about type safety and they care about how everything works correctly.
In case people aren't familiar with GraphQL, I thought I'd just do a quick introduction
to that so everybody can be on the same page for the rest of this.
Here's an example type in GraphQL, it's a presentation, I thought that might be a fitting
for today and we'll just imagine for a second that it's super simple, you only have a title,
a set of speakers, in case you were lucky enough to have a friend, I don't.
The amount of people who attend, whether it's one of the keynote ones and any speaker notes
that people decide to give afterwards.
So we'll break this down one by one really quick.
The title's a string and it's not nullable.
You have to have this as a string.
The next one is an array of speakers where each speaker has to be there as well, that's
what the estimation mark means.
Integer that has to be there as well, a boolean that doesn't have to be there, it could be
null, true or false, and then finally notes that also doesn't have to be there, just as
a rough sort of guide for how GraphQL works.
There's so much more to GraphQL that isn't actually fitting for this dev room and would
go into so much more detail, so I think we'll just stick with this for now and we'll go
from there.
Before you end to using the two together, I'll just do the normal sort of introduction
that everybody else has done to Gleam.
It has type safe structs, the power of Erlang and JavaScript, and also a lovely friendly
community who a lot of actually shown up this time here with the rest of their talks
to persuade you as well to use it.
So let's get to combining the two together.
Here's what looks like very complicated Gleam code if you've never seen it before for a
GraphQL request as well as sort of the request itself and then an object inside of it.
We'll take for example that it could be a mutation or a query, which isn't too important
for this, but it's just there anyway, and that you're requesting a list of objects potentially.
Each object has a name, a set of arguments, and a set of fields that you're requesting
where the field could be something as simple as just taking the name out of the presentation
or as requesting subfields of the speakers that we saw earlier.
Here's an example query that we're going to now use for the rest of this.
The rest of the presentation is built around this query, so we're trying to query this
presentation itself.
We want the notes that I've supposedly written as well as my name and my email.
This is what that looks like in Gleam, which looks absolutely awful for you guys.
So we'll remove some of the stuff that isn't particularly important and we get left with
this, which is just a simple function that would in reality take in the query as a string,
actually pass it, and then would return something similar to this where we're saying it's not
a mutation, we're requesting the presentation and the set of fields that were there before,
and then the argument is that the title has to be that.
But how on earth are we even going to use this?
Everybody knows that GraphQL is normally queried over HTTP as its sort of baseline.
Sometimes there's web sockets involved with subscriptions, and sometimes people go and
do something a bit interesting with it.
But for this example, we're going to use Wisp, which was actually written by Louis, and it
I believe one of the only sort of higher level frameworks that Gleam has at the moment
for HTTP.
So I'll do a quick intro to this just to keep everything so everybody knows what they're
doing.
Wisp has some really nice functions in it for configuring logging, for getting the secret
key for cookies and other hashing algorithms, and it builds on top of Mist, which is built
by another one of the Gleam community, and just uses core underlying fundamentals for
that.
At the bottom, we're just telling it to sleep forever.
So let's go through line by line and see what each thing does.
This is super simple.
It configures sane defaults, so info logging and all that sort of stuff, so you don't have
to go over and do all of the annoying Erlang stuff.
Then we generate a random string for this example.
This isn't great.
I guess you will have heard about it with Phoenix, Ruby on Rails, Laval, any of the
other frameworks.
You need to actually set a secret in real life, but for now we'll just ignore this as
it's not particularly important.
Then finally, we set up our handler, which is going to use this handle request function,
which we'll get onto in a minute, as well as the secret, and then saying it's going
to run on port 8000.
Finally, the process does sleep forever is something I don't think you'd be used to
in Erlang, but it's quite common in Gleam now, which is that you don't want the process
just to terminate itself at the end.
You want it to stay alive with the HTTP process running in the background.
Let's get into the router.
There's four imports we need just to start off, which is we need the request and response
from Wisp.
We need a string builder to actually send some stuff back.
We need GraphQL Web, which is just sort of a, is nothing too big.
It's just some boilerplate that's included with Wisp, and then also Gleam's HTTP for
post for some filtering.
Handle request is as simple as this.
We're given a request.
We have to return a response.
We can do whatever we want to it, and as long as that we get the response out of the end,
this, yeah, Wisp will handle returning it.
Sorry.
So in this case, we're using Gleam's powerful pattern matching to match on the tuple of
the method and the path segments.
That way, if you wanted to, you could have a get request to get info or health or sort
of the UI as well be served.
But in this case, we're just going to say everything else isn't found except for a
post request to slash GraphQL.
And then at the top, we have a use statement with web.middleware, which is something fairly
new in Gleam but not super new.
It's an abstraction for putting, for calling a function with a parameter passed into it.
Before this, Gleam code was sort of nested functions on nested functions, which maybe
wasn't the nicest to look at.
This is sort of simplified that for quite a few things and is now used across everything
from the standard library to libraries themselves to people's code.
We have this GraphQL request function, which we actually need to do something with, but
for now, we're just returning the string GraphQL response and sending that with 200 status
code.
So now if you were to send a post request to HTTP localhost 8000 slash GraphQL, you'd
just get GraphQL response sent back to you.
But you're thinking, that isn't what you came here to hear about, and it's absolutely useless.
I agree.
So let's go on to actually handling a GraphQL request and sending back some actually useful
data.
When we get the request in from GraphQL, it has the JSON structure of the query, the
operation name, and then variables.
The variables and operation name aren't important for this, but for a fully featured implementation
they would be.
Let's say you had a query that had loads of different requests inside of it, operations.
You can then specify afterwards which one you want to use, and the variables that you
pass stuff into those operations after the fact.
Here we're using Gleam's decoder to decode into three, well, to decode three things into
a custom type.
The three doesn't mean anything like a tuple or an array like you might be used to.
All it means is that the constructor of GraphQL full request has three arguments.
So we're then saying the field query should be decoded as a string and put into the first
field in the constructor.
This is entirely type safe.
I don't have anything on my slides about it, but let's say I jumbled up the order of these.
It wouldn't match what the constructor should be, and as such you'd get a compile time error
rather than ending up at the end of this talk going, why is my query looking like an object
of variables?
So I guess that's one point where Gleam's type safety comes back into being useful.
The other part is that we can do something like this using the use statement again to
say that the body has to be JSON.
It's a case of we could handle all of this ourselves, but Wisp has a function for it.
It requires that the content type's application JSON takes out the body and decodes it into
a dynamic which goes back into Gleam's dynamic system, which allows you to break out of that
box of type safety when you can't trust what you're getting in or you want to send something
out in a way that's maybe less structured.
When we want to then decode it, we have to, if we want to work with it, we can't just
work with it in that dynamic form.
It's not how Gleam wants to work, and it's going to make you could, but it would make
your life so much harder than it needs to be.
In real life, you should also be using result.try, handling this nicely and bubbling errors
up, maybe with how Hailey spoke about where you could have your phantom types so you don't
have to bubble it all the way back up.
But for this short demonstration, I'm just unwrapping it, which will panic if somebody
sends the wrong data.
I'm unwrapping it with what is a bog standard QL request, which is underscore underscore
type name, which just would in this case return query to you.
It gives you nothing useful, but it means that the program isn't going to crash.
Now that we have our body and we have the query inside of it, which we looked at earlier,
we need to do something with it.
So let's send it to that passing function that we saw at the very start and turn it
from just being a generic string into something that's actually tangible and could be used
by Gleam.
But once we have that, how are we even going to resolve it?
You have your query, you now have it as a Gleam type, but what does that even mean?
You need to somehow get all of that speaker information back in a way that keeps your
type safety, but also can be with the flexibility that GraphQL provides to people.
So let's think about resolvers for a minute.
We could go down this approach of having a type of the resolver where it has its key,
for example, speaker.notes or just speaker, where you then have granularity over how far
down you want to resolve each time.
You want to resolve the whole object with one function or do you want an individual function
for resolving each field?
And then you have that function there, which gets the request as well as the variables
and just returns a dynamic value, which can then be sent back to the client as Jason in
this case.
Being dynamic there, it will be much nicer to use a generic, but in the process of writing
this talk, I couldn't figure out a nice way to allow you to have loads of different generics
at once, which I think is something that is going to be worked on in the future maybe
so that you can have a collection of generics that also are maybe like an interface type
thing.
Here's an example of how this could look, forgetting the presentation's notes, but there
is one key problem that comes with this.
Let's say you then have a list of these resolvers.
How on earth do I find presentation.notes in a time that's actually suitable?
The bigger notation for this is going to be o of n at best, or o of n at worst maybe,
because you're going to have to go through all of them checking each one.
So maps or lists, a hash map is going to be a thousand times better, maybe not actually
a thousand times, don't quote me on that, but it is going to be significantly better
than using this sort of list and sorting method.
So let's switch it up and say that the resolver now isn't this custom type with a constructor
and everything, it's now just a function that takes in a request, has those arguments
passed in and still returns the dynamic.
And now we can use this in a much simpler way, where we have a simple function that has
resolve where it takes in a prefix, which will make a lot more sense in a minute.
The HTTP request, the object itself we're trying to resolve, so we took the string,
we pass it into this object and now we're going to resolve it.
And then a dictionary of all the resolvers that were created when you wrote it.
So you'd have your dictionary where you put in each of your resolvers, so you could have
presentation.speakers, which resolves that whole array, as well as presentation.notes
and any of the other fields that were there.
Or you could even just have one resolver that resolves the entire presentation.
Example of this is here, where you have your dictionary.
We're just creating the dictionary from a list for simplicity, but this is the same as doing
dictionary new and then inserting an element with that key and that value.
Now that we have it, we can take our prefix, prefix it to the object.name and then try
and see if we have that as a resolver.
Of course you're thinking, how on earth is this going to work?
Glean doesn't have an if statement, but we have something just as good, which is a case
statement.
We're going to say, if that resolver exists, try and just resolve using that.
If it doesn't exist, we're going to check that there's fields.
If there aren't fields, then we need to somehow handle this much nicer at the moment.
It just returns that there was no resolver set.
Then in reality, it should be erroring out properly and returning an error in the GraphQL
standard way.
And if there are fields, we then map each one, attempt to resolve it, and then we have this
function at the bottom called combine results, which I'll come back to in a second.
But you can see that the prefix actually ends up being the prefix that was passed in before
and then the object's name then a dot.
So as you go further down and into it, you get the dots.
You still get the objects that were before added in.
And then you can have your granularity that I've been speaking about of resolvers.
The combine results just simply has the list of them piped in.
It then folds the list into a dictionary and then it does dynamic.from to just turn that
into that dynamic value to be returned at the end.
So finally, I know it's been a lot, but let's finally put it all together into something
actually useful.
First, we need to resolve multiple things.
When we got our request in, we could be requesting the presentation and a speaker separately
and maybe an event separately.
So we need to take each of those objects, go through the resolution process for them
and get the values.
So to do that, we call that function.
Then we do, we say the responses after we've resolved them all, passing in the HTTP request,
the past query, and your set of resolvers.
And then this is what you finally end up with, the basic GraphQL request function in the
start that just returned a string.
Now it requires the JSON, unwraps the body, passes it, resolves everything, and then finally
sends it as a HTML response, which probably should have been changed to JSON response.
Small details there, and sends that back to the client.
So yay, you might think we're finally finished.
But in reality, we're actually missing so much from GraphQL that I wouldn't have even
had time to discuss or make for this talk, such as proper error handling.
When you return data from GraphQL, you should return data and errors separately.
We don't even have the concept of an error here.
Mutations at the moment, a mutation in the query, I just treated as the exact same thing.
We should really have them as separate things that are resolved differently and handled
differently.
Subscriptions as well, that's using web sockets, and that's a whole nother layer of GraphQL
that people, there's fairly, I guess, divisive opinions on how it should be implemented.
So I didn't even touch that.
But you might be thinking, overall, that's an absolute ton of work if you want to implement
it yourself.
So the goal with all of this is, let's make a package out of it.
We'll have a green GraphQL package that you can just plug in, pass your resolvers, and
it will pass and manage all of the query inside for you, similar to what Elixir has for Phoenix,
as well as what Laval and the other major frameworks have, which makes it easier, which
makes it super easy to use GraphQL and sometimes even easier than REST itself as it handles
most of that abstraction for you.
So thank you so much for listening as I ran through that really quickly.
And if anybody has any questions, I think I have just enough time for a couple.
Any questions?
Thank you very much.
So I know that GraphQL also has a schema, and I'm guessing from that API that you would
write your schema alongside that.
Do you have any thoughts on maybe generating some of that blue code from the schema, or
maybe just the schema from the blue code?
Yeah, when I first started, I thought, oh, the question was before I go, GraphQL has
schemas, so is there any way for us to generate that code, either the code that I showed today
or even the schema itself from Glean?
And the answer to that is I looked at it when I started, and you could generate the schema
from Glean and as such interpret some of this code, but long term I think the best bet would
be sort of code generation similar to how it's done in JavaScript or TypeScript, where
you either write your schema and then it generates some of the other Glean for you as well as
a .graphql file, or you pass in a .graphql file to sort of a CLI, and it then spits out
all of the boilerplate Glean you need.
But yeah, schema validation is something else that sort of, I didn't really have time to
do for this.
Any other questions?
Okay, thank you then.
