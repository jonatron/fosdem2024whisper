Go to an internet search of springy LED and you will only find things that I have posted.
Okay Ron, I will quickly introduce you.
Well Ron is the introduction, he is the guy that flies drones over my head every single year and every single year I survive.
Last year we did Go Without Wires, where we launched illegal weather balloons above China.
I mean above Brussels, completely illegal by the way.
And this year he strikes back.
Ron, why are you striking back? Go ahead.
A plus!
So before I get started I just want to say a big thank you to Marcia, the organizers, the staff, all of the people who work really hard to create this amazing labor of love called FOSTA.
Ron, let's give it up for them.
I'm missing one cable.
Here we go.
I know there's always a cable.
Alright.
At FOSTA 2021 we learned Go Without Wires and we introduced the Go Bluetooth package.
Then at FOSTA 2022 we learned to go further without wires and we showed lots of interesting local area networking with Wi-Fi.
Then last year at FOSTA 2023 we went to go even further without wires and in an incredible cliffhanger ending,
despite the fact that I accidentally reset my long range router to factory settings right before my talk,
somehow despite all of that we managed to release Tiny Global 1 the next day.
It was in hack a day and all of us are still walking around so it couldn't have been that illegal, right?
So yeah, it was an amazing experience.
Now it's FOSTA 2024 and Go Without Wires strikes back.
So I am Ron Evans, technologist for hire.
I run a boutique consultant called the Hybrid Group where we create the software that makes your hardware work.
And we work on some open source projects such as TinyGo.
So it turns out our secret plans for Go wireless communication are no longer secret.
Something to do with doing a series of talks at an open source conference where it's all streamed on video.
People actually watch this stuff.
It's amazing.
So let's talk about space.
These are all the different network types by spatial scale.
At the lowest we have nano which would be like body sensors that are like injected into your bloodstream.
We have body area networks which would be like your pulse oxidometer or your diabetes, blood sugar monitors.
We have personal area networking which would be Bluetooth, local area networking, wide area networking.
You get the idea.
There's a whole universe of frequencies still to explore.
And thanks to the amazing community around TinyGo we are doing exactly that.
So let's go back in time and see what's been happening.
We'll start with the personal area that we can go Bluetooth.
So of course it runs on Linux.
Actually there's a new release coming where it will run on many different versions of Linux because we got rid of the cgo dependencies.
Mac OS of course.
Windows, yes it runs on Windows.
There are Windows people out there.
And bare metal on Nordic Semiconductor microcontrollers like you saw during ICAS demo.
So we now have new bare metal support that we're just introducing where we support the Bluetooth host controller interface.
Host controller interface.
You're probably wondering some of you, what does that mean then?
So a quick overview of a typical wireless embedded device architecture.
Hello, there we go.
So we have an embedded device and a lot of the more professional, serious devices will have two microcontrollers, two processors,
the primary one which is going to communicate with your sensors and displays,
and then the secondary which is going to do your wireless communication.
Because these microcontrollers generally only have a single core.
So how do we do multitasking on single core?
It's not easy.
So many boards use this exact setup.
Boards from Arduino, boards from Adafruit, boards from Seed Studio, many other boards.
And most of them use the ExpressF ESP32 which is a very common little chip that supports both Wi-Fi and Bluetooth.
So it's so common that there is actually firmware they put on that called NINA FW,
NINA firmware created by Arduino and supported by a lot of community members.
And the way that we use that is that TinyGo runs on your application microcontroller
and then using this HCI protocol over the UART using the serial interface,
we can communicate with the wireless microcontroller.
So now we have Bluetooth support on all of these boards right out of the box today, right now,
well, if you run the DevBatch.
So how Bluetooth works?
The too long didn't read edition.
So we have central.
Central's are like your notebook computer, your tablet, your mobile phone.
They go scanning looking for stuff out there.
Then we have peripherals.
Peripherals advertise their services.
I'm a heart rate monitor.
I'm a printer.
I'm a smart light bulb.
So central connect to the peripherals and say, so what do you got?
What are your services and characteristics that you offer?
And the services and characteristics, some of them are well known like, you know,
your heart rate monitor, et cetera.
That way different companies and different manufacturers and different projects can use these same services and characteristics.
So let's take a look at something.
Tiny scan, our first demo.
So it's a Bluetooth war scanner as a conference badge.
So where's my conference badge?
So I do not have this running on the Gopher badge because I need some extra pins to actually connect.
But it's an A to the fruit pie badge, which is a microchip AT-SAM D51 processor.
It only has 256 K of memory.
Yes, 256 kilobytes of memory.
So you know your typical hello world in regular go is 1.4 megabytes.
And so luckily we have time to go.
And then we're going to use the A to the fruit air lift Wi-Fi feather wing,
which is a little daughter board, sister board, friend board for the badge that contains the ESP32 processor.
So let's take a quick look.
Hopefully my, I forgot to check my video.
Let's see if it works.
I know that some people talked about how they don't like make.
I really like make.
All right.
So there's my camera.
So let's take a look here real fast.
So here's the badge here on the back.
You can see the little board with the ESP32 microcontroller.
So let's go back over to our code.
Let's take a look at the code actually.
Yes, I have internet.
Amazing.
Can you see this?
It's kind of small.
All right.
So it looks just like your regular go program because it in fact is a regular go program.
We're even importing like your basic gigantic memory consuming packages like font.
Just a show we can.
And we're using the tiny go Bluetooth package.
And then we're using another package called tiny term, which is part of the tiny go ecosystem.
It's just a relatively simple terminal for run on any of these displays, not as cool and anti alias though.
So what we're going to do is first we're going to initialize the terminal.
We're going to output some information on that.
We're doing it.
We're going to enable the Bluetooth adapter.
Then we're going to start scanning.
When we do the scanning, whenever we find a device, we're just going to print out what the device is doing.
We're going to print out what the device is addressing.
It's relative signal strength indicator and if it has a name and then output that.
So that's all this is going to do.
So let's see if this is going to work.
So let's see make.
Tiny scan.
Let's plug in the badge.
Let's actually plug in the cable because that works a lot better.
Who here has forgotten to plug in a cable during?
Who here has not forgotten to plug in?
Who has not raised your hand or a liar?
That's what we had for a while.
Touch√©.
Some people got that joke within the joke.
All right.
So here now we see I flash the board and it's a little blurry.
Let's get some focus here.
So you can see there's the MAC addresses of some devices.
Anybody have a Bluetooth device they want to turn on?
Let's see.
I'll turn on my phone.
What could go wrong with that?
All right.
So I have some Bluetooth stuff on my phone and I have a little advertiser that I can turn on.
And you'll see here in a minute.
In a minute.
It's been over a minute.
So they enable Bluetooth.
Yes, I enable Bluetooth.
All right.
Well, you saw some other devices so hopefully my phone is going to work though because I'm going to need that in a minute.
All right.
I have to unplug my battery.
Let us continue, my friends.
Let us continue.
We have very little to do and lots of time.
Now wait.
Strike that.
Reverse it.
All right.
So we saw this very good.
We saw the code.
We saw a demo.
All right.
Cube life.
So now we saw what a central can do, right?
Can scan, look for stuff.
So now let's see Conway's Game of Life as an LED cube with Bluetooth control.
So now if you don't know about Conway's Game of Life, it's in the category of mathematics known as cellular automata.
It's basically a zero player game.
It plays against itself.
And I'm using a package called Vita from friend and collaborator, Alessandro Cipata.
And I'll give you a quick demo.
It's a very cool package written in Go.
I need to slow it down because it's way too fast.
So this is written in TinyGo and compiled to WebAssembly and running in your web browser.
But I don't have time to talk about that right now.
Just suffice to say we're going to play six parallel games of life.
And we're going to use Go channels to do it, to communicate between these six different universes that are all running on this same processor,
which is an Adafruit Metro M4 airlift with six Hub 75 displays.
So the Adafruit Metro is pretty much the same processor as the badge.
It just has slightly less RAM.
And it has an onboard ESP32 processor.
So then the Hub 75 panel is a typical LED panel that you see on billboards and other installations.
And what we're going to do, let's take a quick look at our architecture here.
Our primary processor is running the code to play the games of life.
Then our UART is going to communicate via Bluetooth using the built-in ESP32.
Then with the SPI, SPI interface, we're going to communicate with all of these six different panels so that they can communicate with each other.
Let's take a very quick look at the hardware.
Wait, where did my camera go?
I probably unplugged it.
Okay.
So this is the LifeCube, CubeLife.
And I left the front panel open so that you could see it,
because it's very hard to fit everything in there and the battery.
But you can see here is the ESP32 chip.
This is the Metro board.
So let's plug this in without destroying it.
This is like where I'm sawing the lady in half.
Okay.
So far it's plugged in.
It didn't do anything.
It's because we haven't flashed it yet.
All right.
So let's take a quick look at some of the code.
We don't have time to look at all of it because there's quite a bit.
But you can see we're bringing in the game package, which is part of the VDAP package.
We've got our multiverse, which is a slice of parallel universes.
We've got our colors defined.
And then I've got two Go variables, one for the LED color,
and one to track the number of frames per second.
You'll see why we need those in a minute.
So our main program, we initialize Bluetooth again,
same as what we did before.
We enable the adapter.
We create our multiverse, which is out of these six universes.
We connect them up.
We set the first color for the cube.
And then as quickly as we can, we draw the cube.
We display it.
We execute the universes against each other using a weight group.
And then once per second, we display the stats.
And then once per minute, we change the color.
All right.
So let's just take a very quick look at the Bluetooth side of this code,
since that's what, in fact, this talk is about.
So we can see here, it's basically the same as what we saw before.
We have the default adapter, which is the built-in Bluetooth adapter on the board.
And we have a couple of services and characteristics,
which are custom ones I defined.
These are not well known ones, like your heart rate.
This is the Conway Game of Life cube service and characteristic.
So we'll try and establish it as a standard later.
So we initialize our Bluetooth.
We set our connection handler.
So when we connect, we're going to do something.
We enable our stack.
Then this is, remember, this is the advertising side.
It's saying, what can I do?
It's going to say, my name is the tiny go life cube.
I'm going to start advertising.
And my characteristic for the color here, we can see that it's got a unique identifier to say, yes, I am that color.
The value, remember that LED variable?
You'll see why we're going to use that in a minute.
Our flags, which say we can read, write, and that's about it.
And then when we write to it, we're going to change the color to the ones that were sent to it from the other side,
the mobile phone in this case, and then reset the cube.
And then once per minute, if you recall, we're going to, sorry, once per second,
we're going to sand the number of frames per second.
That way we can see how well is this thing rendering.
All right.
Let's flash some code.
See what happens.
Let's see, make cube life.
So now it's flashing it, and I'm connected to the monitor,
so it should show me once it reboots that, in fact,
it is working on how many frames per second it's able to read.
All right, let's turn on the cameras so you can actually see how cool that looks.
So this is Conway's Game of Life, and each one of these panels is a separate universe,
and they're using these gull routines and weight groups in order to communicate with each other.
I have to be very gentle because it's been through hard journeys this cube.
Somebody say Borg, go ahead, I dare you.
All right.
So now I'm going to use my phone, which I might be able to show at the same time.
If the gods are kind, which generally they are not, but when they are, when they are, let's see.
I forgot to change.
Let's see.
This is in 2024, and that would be make show phone.
I've got a loose cable in there.
Well, when in doubt, reboot the cube.
All right, so when I say show phone, oh, I forgot to plug in the phone.
Let's plug in.
Again, you said without wires.
Okay, it should be good.
I tried to get this to work without wires, but it wouldn't.
All right, so there's my phone.
And let's see, where's the cube?
Cube didn't move.
I think I really do have a short in there.
I shouldn't have moved it quite so roughly.
Let's just flash it again real quick.
Just because, you know, that always works.
So you'll notice that we do not optimize for compilation time.
I have a very loose cable in there.
Let's just pull some stuff out and it'll be fine.
You saw love coding before.
Have you ever seen live connecting of wires?
It's even more stressful.
Well, let's just change the color anyway, because, you know.
Is this a time to remind you that the emergency exits are located in front and in back of the room?
Please locate your nearest exit.
Well, there are a lot of Bluetooth devices in here.
Let's see if we can find this one.
Somewhere, somehow.
Is there a search function?
You know, there probably is.
I just don't know how to use it.
I don't know how to use a mobile phone.
I just saw my watch.
There it is, the tiny go life cube.
All right, so let's connect to it.
We'll see if it'll actually connect.
Sorry about that loose cable.
It makes it look really neat though.
We need to combine this with the MIDI demo.
Then we're getting into something.
Okay, it's thinking because it has to render all the frames at the same time
and it also has to communicate, so that's kind of pushing it.
Plus, there's a lot of wires between me and the antenna now.
I'm probably just left it out.
Oh, there it is.
All right, so let's go and we can see the current color is supposed to be red.
And let's turn on our notifications and we can see right now it is rendering at
6.4 hex frames per second and it's able to play 0 C hex games per second.
And you see those numbers changing, it's pretty real.
Let's go and change the color, which let's go and make it like a really psychedelic color.
224488.
Yeah, I'm feeling that, you know.
All right.
Why?
Is this actually correct?
It's fine. Yes.
Really? Yes.
Well, then I got cheated in the beginning.
I cheated myself.
All right, so let's take a quick look here at,
I guess we'll make our last demo.
So I was going to show you,
well, maybe I can probably pull it off.
I want to show you flying the drone with my badge.
So I've got two different drones.
One is a Bluetooth drone, so we're going to talk from the badge to the Bluetooth drone.
And let's take a quick look at the cut.
You've seen the hardware, it's that same badge.
Like it's literally the same badge.
So what we're going to do here is we're going to connect to the drone, right?
We're scanning for it, we find it, and then we start sending it commands,
which will basically go forward and backward based on how I press the game pad keys.
All right, so let's go back to the beginning.
So if we make mini drone, also let's try,
let's not try that.
All right, I have the badge.
The badge is plugged in.
I can flash it.
No, I cannot.
Oh, I'm sorry.
There we go.
Yeah, that's it.
All right, no, not cube life, sorry.
Make mini drone.
Go mini drone, go!
Now we have to actually turn on the drone.
No, I connected a little camera to it,
which I'm not sure if we, no, we can actually do it.
We can maybe pull it off.
So it's a little first person video camera that actually is analog connected to this toy parrot drone,
because they won't let me have real drones anymore after that last time.
That was not my fault.
I mean, I don't think it was.
Honestly, I'm not sure.
It might have been my fault.
Okay, so let's stop this video.
All right, and let's plug in.
Where's my camera?
There's that camera.
Let's plug in the drone video just because, I mean, hell, what could go wrong?
Drones with cameras.
All right, yeah, and that's you.
All right, so now let's go and flash, did I flash the, yes, I flashed the badge.
It looks like.
Let's restart it.
I guess we'll find out if we're going to have connectivity.
It says flight badge on there in cool ASCII font.
Wow, there really are a lot of devices.
It's still thinking.
That really is a lot of devices.
Geez.
Hmm.
Well, when in doubt reboot because maybe it'll come up earlier in the list.
Enabling Bluetooth adapter scanning.
Searching for, oh, so many devices.
Wow, I really, I mean, there are really a lot of devices.
I didn't, I actually did not think about how many devices would be in that scan list.
Got that proper analog flicker, though, doesn't it?
Hmm.
One last try to reboot the badge and then I'll fly the other drone because that's Wi-Fi and that will for sure work better, right?
Oh, wait, I think it found it.
No, wait, no.
Oh my God, it's just like, there must be like 100 Bluetooth devices in here.
I guess we found out that it doesn't fail.
It just doesn't work.
Well, let's try the other drone then real fast because, you know, we don't have a lot of time here.
So I'll unplug the adapter.
Let's plug in this one.
Put the original camera back.
That was going to be so fun, too.
Well, this is actually going to be pretty fun as well.
All right, so this is the Tello drone.
Tello is a drone from DJI, which is one of their toy drones.
Again, I told you they won't let me have real stuff anymore.
I do have a small unmanned aerial systems license from the FAA, which means I'm supposed to know better.
That obviously is not true.
All right, and so let's see.
I'm going to, this is the same code, but instead of using Bluetooth, it's using a Wi-Fi interface using our new net package,
which gives us much more compatible networking support in tiny go.
So this regular garden variety go code that uses networking will probably work now.
Let's see if that's actually true.
So we'll flash the Tello.
Well, now it's working because it will flash.
You get to see my cool ASCII art.
Okay, now it's scanning for the drone, which, where do I have it?
Oh, right here.
Oh, it started.
Drone started.
Okay, it's ready.
All right, so let's see here.
What should happen?
Oh, yeah, so this drone is a lot more advanced.
And yeah, I can fly the round with my badge.
Look, Ma.
Wait.
Oh, man.
If I plug in the battery while it's flying, what will happen?
The batteries plugged in.
Let's unplug the power.
Can I still fly it?
Yes.
No wires.
So this is pretty real.
Now this drone does some neat stuff.
It's got tricks.
Like it can do flips.
They told me I should never do what I'm about to do ever again.
I clearly did not understand the simple instructions.
There actually is a dance function.
I just didn't get it to work.
But you know what?
I feel like I've really pushed my limits of what's safe by a pretty...
Come on, little drone.
It's okay.
Thank you, Ron.
If it takes off by itself, I swear that's not my code.
All right.
Wow.
Well, I went a little over.
All right.
Sorry about that.
But it was really fun.
You know, we did Wi-Fi.
We have a major rewrite.
I told you all that.
More flight testing.
We just did that.
So there's so much more happening.
TinyGo has over 14,000 stars on GitHub now,
and we're doing 150 contributors,
over 100 different boards supported,
over 100 different sensors, displays,
and other peripherals supported, Bluetooth, Wi-Fi, LoRa.
There is so much happening.
More wireless chips, more wireless protocols.
So connect all the things using Go without wires.
That's all we want.
Thank you, Ron.
Thank you.
