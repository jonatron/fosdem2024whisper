I'm not sure if you should attach the mic.
Maybe.
One of you should attach the mic.
Maybe.
Okay.
Do you want this one or me and Mike?
Me and Mike.
I'll give you this mic.
How can I use it?
So put this in your pocket and this one you attach to your...
Yeah.
Is it correct?
Because I'm bad with mics.
Yeah, that should work.
Can you put it up here?
Maybe like this?
No.
No.
I'll just speak and test it.
Okay.
Let's try it once.
Let's try it once.
It shows here. Yeah, it shows there but not...
It's here.
I have a green light.
Are you going to...
How do you say that?
I will do my...
Alright, next up we have a talk called Volte for Force.
It's over LTE.
I'm pretty sure we all want to see that on Linux Mobile.
And this talk was originally supposed to be given by Marius from UbiPort.
But Marius is not here today so please give it up for Nikita and Ivan instead.
So, hello everyone.
I'm Nikita Ukhenko from the UbiPort community and also looking for Yula.
People mostly know me from Telegram as NotKid.
And since Marius is not here, we cannot be here to the replacement
but we try to say what we have learned so far when trying to make the evolves in the same work
on Ubuntu Touch and other mobile industries.
Currently it's still HMS but I hope that we can get more people involved into this
and if you want you can stay here to discuss on how we can implement the Volte 3
on more Linux distros and what can we do together in our understanding.
Can you turn up the volume like...
You put the mic up or something.
Yep.
Okay, is it much better now?
Yeah.
Great.
And the chat is not yet so can you raise it up more into the...
Oh, yeah, that's a delay.
Okay, good.
Just go on, yeah.
Yeah.
So, I expect people in this room are familiar with voice over LTE and what is it for
but briefly just a communication standard for voice calls over LTE networks.
And there are similar standards for voice over Wi-Fi and voice over 5G networks
which is called VOR NR basically.
The main reason that we have to worry about the things is that GSM and LTE networks
are now becoming scarce resource and if you want to make calls from our mobile Linux distros
we need to implement this VOR LTE at some point.
And if you had voice over Wi-Fi it allows other cool things like when you're in a roaming
you can try to connect to your mobile operator endpoint and make local calls to your home
country at local prices, not roaming prices.
So, let's start from how it currently works on Android.
There's a picture with the TelephoneLinux website but the point here is that there is a modern
firmware.
On top of it there is a modern interface library or a library that is used by RIL which stands
for Radio Interface Layer on Android.
On top of it it provides an HDDL server which implements HDDL radio interface and on the
recent Android versions it became ideal instead but that's not what we care about at the moment.
So, the frameworks part are the ones that implement the communication with HDDL radio interface
and there are vendor specific IMS parts which plug into IMS Android interfaces but the vendor
implementation is closed source and unfortunately device specific as well or it is chip specific.
When we go to Ubuntu Touch we keep those four bottom layers but we don't have the frameworks
anymore.
And here the problem comes that the IMS parts are provided by the frameworks on Algam and
we have instead of frameworks we have Ophono that talks to Radio Interface and Ophono is
talked to by Telepathy, Ophono or other layers on TelepathyCondistro.
On SelfieShow as we use TelepathyRing but in just implementation details.
So, if we don't have the IMS part of frameworks what can we do now?
From here we have a motif option.
First we can reimplement the Android frameworks part of IMS so it can still talk to vendor
interface and that's how it's currently done on SelfieShow as for Xperia 10.2 and 10.3.
It's also been tested to work for other Qualcomm devices but unfortunately the plugin by YOLA
is currently closed source as it relies on Qualcomm specific headers and I think YOLA
is afraid of some legal stuff that's going to happen if it's publicly released.
On Obuntu Touch we've been trying to use the same plugin around here but the problem is
that the Qualcomm IMS part is black box and sometimes it works and sometimes it doesn't
for no reason.
It's quite hard to actually understand what's happening because basically what's the more
the Ophono part sending is just asking the model, hey can you connect to the IMS for me
and the model just answers yes I can and that's it.
So you don't know when it's connecting, why it's connecting, how it's connecting and it's a complete black box.
So, as you see in the picture we can try to write an IMS plugin and we plug it between
the radio interface and Ophono or some other telephony layer.
It works but it's device specific and it's a bit of a pain.
I've been trying to write a similar plugin for many of the devices now and the idea of it is very simple
like you tell the model, okay please enable IMS, here is the IMS IP and connect to it,
copy and config from some pass but whether it works or not it's a bit of luck.
Dependent on your career.
The positive of this approach is actually that you don't need a 4G network knowledge
and so you don't need voice over utility knowledge but it's a black box and if it works,
if it works you don't know why.
Yeah, so second option we have, it's very similar to the first I mentioned
but it's maybe interesting for mainland people and that's why I'm mentioning it.
So we can ignore completely the ICTL Android parts and you just write a library of a driver
that talks to modem firmware directly.
That's how it currently works on Pinephone actually because on Pinephone the Qualcomm modem
is a separate USB modem and you can tell the modem via QMI to enable IMS and voice over utility.
So it's the same black box approach but on a bit lower level and I don't think we will use it on Halium distros
because it will cause MS if Android and direct modem interface communication done at the same time.
But that's possible, yeah.
This approach requires at least a little bit understanding of the network stack.
And you need to also know your modem firmware protocol.
On Qualcomm it's QMI as mainland people probably know and on media it's interestingly 80 commons
but of course it modifies it up 80 commons.
And then the most annoying approach but also maybe the most interesting is that we can
attempt the modem to set up a data connection to MSAPN and interface with mobile service operator services
on network transport layer and it becomes a real mess of senders and protocols.
Basically that's the end goal but we wanted to show you how the voice over utility stack looks like
and that's the picture.
It's not only the voice over utility, here's the full 4G stack how it looks like
and the voice over utility in the network is going over just a second.
So this is the TCP IP network stack.
This is the transport protocol used for the 4G network and the voice over utility network
and then we're going for the stack which we showed you previously.
So our end goal is trying to implement this on software so it would be open source for every distro to use
but as you can imagine it's quite a challenge.
It can also allow for some interesting things to do like there is a project to perform the SIM card authentication
and set up encrypted AKV2 IPsec tunnel to the mobile operator endpoint from your laptop.
So it makes it a bit easier to debug if you can just use the phone for authentication
and then you set up the voice over Wi-Fi connection from your host PC.
And there are multiple projects who try to implement the open source telephony.
The most prominent one is currently DoaBungo for IMS services
but sadly it has been un-maintained for the last five years or so.
It's in a working shape but you'll probably need to figure out a lot of throw-angels later on.
However, courtesy of Mohammed who also wanted to make it here to Brussels
but he was refused a Belgian video suddenly.
We have a screenshot of DoaBungo connecting to the mobile operator endpoint via APsec tunnel for voice over Wi-Fi
and it tried to receive a call while it couldn't because audio part wasn't really working.
But at least it could receive an SMS.
Here are those symbols you see because SMS uses ETF16 text encoding and the console is ETF8.
It did receive something and that's where I am currently.
If to summarize the set of part is that we have voice over LTE working with device-specific...
using Android radio interface on selfish OS and we won't touch Android on this selfish OS plugin
but only for specific welcome devices.
We have something cooking for MediaTek and we tried the third option for implementing
and we are facing with IMS services in software.
Both of them are possible but we are not there yet.
Since Marius is not here he cannot speak about all the operator wordnesses he encountered over the road
but we are open for discussion and if there are other mobile projects who want to get voice over LTE working
it would be nice to see how we could collaborate.
Do we have any questions?
Maybe in the chat room?
That's a question. Can you pass the mic?
Okay, so you are going to touch. I get that right.
Who is developing a funnel?
I was wondering who is pushing these kinds of efforts forward.
It's interesting question.
Even Ophono is not...
We have multiple folks of Ophono.
The upstream one is... I don't know how other developers of upstream one.
It was sponsored by Intel at some point, by Migo,
but they have some community maintenance for Ophono.
But the Ophono version we are using for is developed by YOLO for selfish OS
and it's heavily forked from the upstream Ophono sadly,
but they have been enforced by Adam Peek to bring latest Ophono changes back into selfish OS fork.
So it's closer to upstream Ophono and it can be used for pine for selfish OS.
And the Ophono binder plugin I've been talking about has been developed by Slava Monich also inside YOLO.
Is there any cooperation with YOLO or are you just taking their stuff and developing it forward?
I have a style of fish, so I'm interested in it from the user perspective.
It never worked for me, by the way.
Obviously, the stuff on the fork is open source and when it's possible we try to make upstream MMRs,
but the code base is quite diverse, so currently we are taking from Ophono and we will be using it.
So I thought that's a question in the chat.
So somebody asked, on the Librim I learned that it can be very carrier-specific,
whether voice over AT works or not, and it carries white or black list specific modems.
Is there anything we can do in this regard, like spoofing modems?
So there are multiple carrier-level specific things.
First, each one has vendor-specific configs provided by its vendor.
For example, on Qualcomm you have vendor-firmware MNT partition, it has image-modem subfolder,
and for many carriers there is carrier-specific, modem-firmware configuration,
and it's very much assigned black box, we cannot do anything about it.
Of course, we can try to load configuration from a different carrier and whatnot,
but as Alan would say from Sony, do not do this, you will break the carrier's network.
So I think the detection of modem on carrier-level is mainly done by few parts.
First is the EMI of your phone, which you cannot spoof in most cases, and there is also user-agent.
The user-agent part when connecting to the...
I'm a service on the network stack level, of course it can be spoofed.
Okay, thanks. Any more questions from RUM? Yes, at the very back. One sec.
So a bit related to this, are you encountering any pushback from carriers,
because you could potentially be messing with our stack?
I guess we are too small for carriers to care about us, unless we break something to bed,
so not at the moment at least, but on us.
Do we have another question in the room? Yeah.
Hi, just by chance I was on the schedule for later today.
There's some talk, ProvideVol.te using OpenZips.
Have you ever heard of OpenSips?
And is that interesting for us?
Yeah, I haven't heard of them, but it would be nice to check the talk and see if it can be run on Linux.
Can I get some?
Just to expand on the previous question a little bit, in order to not have problems with the carriers,
I'm also trying to set up just a 4G network with a software-defined radio, a private one,
so we can test whatever we like without breaking stuff, you know.
Okay, maybe from the chat again.
Are there any plans to upstream Ophono changes to kernel.org or Ophono version?
I don't know, I cannot speak for Ophono developers at the other side.
Okay.
Is there another question?
Okay.
Yeah, I guess then we close it. Give another round of applause, please.
Don't forget the mic.
The mic?
Yeah.
Would you buy the pack already, the mic?
Yeah, I'll take it.
We talked in video chat at some point from SusmoCom.
Yeah, yeah, yeah, yeah.
It's good, nice.
Yeah, so this is also your, how do you say that, your field.
Did you get any further with it or?
No, not really, no.
I think it's a little bit with everyone that is like, we married that guy who's working,
but couldn't figure out why if some last work, some doesn't work.
Yeah, so I don't know, we just need people to like to have a different approach with everybody.
Is this your bag?
No, it's the Coulance here, so I like to...
Are you also late for the mobile mic?
Yeah, I guess I'll make you check it out.
Thank you.
I think the refuges are here.
I got an avid setup here.
What is the score on my...
Here's the HMI and here's the...
Just be safe, whatever you need.
Just be...
Okay.
I mean, it's also small.
Nothing that much specific.
Looks really nowhere.
And you have some more minutes for the end of the 30, so it's like 9 minutes.
Okay.
I have so many problems with the inters, because I would say like...
I mean, you're gonna do a little bit of this, but I'm like, let's say like...
Okay, er...
Check the camera.
I'm like, fuck, I can't say my name.
I'm like, seriously.
I think the ref I have is the one I was saying about.
I was like, I should be shooting myself more often.
I don't know.
I don't know.
I'm gonna get a step-by-step.
Sorry.
I'm sorry.
So I had to write something.
But they felt like, you know,
I should have written something.
I could have thought of something.
Otherwise, I could have done that.
I don't want to.
I don't want to.
I was thinking the very smallest bit.
I'm not sure.
I'm not sure.
I don't know.
I'm just wondering.
I still have a few questions.
Have you talked to me before about the Dragon Messenger?
No.
I'm just trying to set it.
What was your voice before?
I was just wondering.
I was just wondering.
I was just wondering.
I was just wondering.
I was just wondering.
I was just wondering.
I was just wondering.
I was just wondering.
I was just wondering.
I was just wondering.
I was just wondering.
