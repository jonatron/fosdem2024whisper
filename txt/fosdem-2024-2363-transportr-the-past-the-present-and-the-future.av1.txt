So we are coming towards the end of the program.
We have two short community talks as final talks of this morning.
And I'm very happy that we have Nicola here to talk about Transcorter.
Many of you probably know that as one of the free applications to take public transport information.
So yeah, it's your state. Thank you.
Perfect. Can you hear me with a microphone?
Or is it just for the recording?
Perfect.
So yeah, then welcome to my short little talk about Transcorter.
It's passed.
The current state and glimpse into the potential future.
Let me maybe start the talk with asking you who of you is using public transport regularly?
Great. I could have guessed that, I guess.
But then some of you may know this kind of problem.
You go somewhere, you travel somewhere, there's a different public transport system.
To find your way through it, they want you to download their own app.
Usually proprietary from Google Play.
And then at some point your home screen gets cluttered with all of these apps.
Some alternatives that you may know is using Debena Vigartra that works quite well in Germany.
They include a lot of regions with decent data quality as well.
But then first of all, since the new update, I think there's no map inside anymore,
which I find pretty, well, it's a bit sad.
And then there's also some people found out that Debena Vigartra is sending or connecting to a lot of tracking services,
even if you declined that.
So maybe that's not what you want to use.
Well, Google Maps, another option, I guess we don't have to talk about why you maybe don't want to use it either.
So as you guessed, a transporter, it tries to be another alternative to these kind of things.
It was created 2013 by Trosten Grote.
As you may notice from that picture, that's not me.
I'm Miko Leguccio.
I'm filming under Jallochim on GitHub.
And I started contributing to Transporter in 2017.
So when you open Transporter, it might look like this.
You have a list of networks.
You can choose where you are.
And then you can basically look for journeys as you would expect.
So in this short talk, I will, well, first of all, tell you a bit about how Transporter works, the internals.
How do we get the data, basically?
Then, as I said before, the past, present, and future of the project.
So first of all, these official apps, how they work, well, they have their data source, usually in some proprietary format.
And they have the apps that talk to some APIs that provide the data.
In the case of Google Maps, it's a bit differently.
They don't use the data directly, but they use a format called GTFS.
That's a standardized public transport format.
Initiate it by Google, but it's an open specification.
So you can create your own GTFS files and also consume GTFS files, GTFS files as you want.
And that's what Google uses internally for their public transport routing.
Now, where does Transporter come into play?
Maybe you've heard of Uffy before.
That's another app that also works on Android developed by Andreas Schildbach.
Even before Uffy itself was open-sourced, Andreas Schildbach also already open-sourced a library called Public Transport Enabler.
And that is basically the wrapper that contains the logic to connect to and understand the data from the official APIs.
And Transporter is using that same library.
So huge thanks to Andreas at that point for him to open-source this and making a Transporter possible.
Then there's also a second part in Public Transport Enabler where you can consume GTFS files by a proxy.
In that case, you don't use the GTFS files directly.
You don't perform routing on your phone.
But you use some third-party provider.
What Public Transport Enabler was using is Navicia, a French company.
They provided this service for free, basically consuming the GTFS files and then exposing them as an API to interested apps.
And that's actually how I got in contact with Transporter because when I was spending some time in Nicaragua,
I was working there with some other volunteers to gather Public Transport data,
schedule information, put that together into some GTFS file and then in the end making routing possible for a limited region,
but at least with apps such as Transporter and Auffie.
So now that you know a little bit more about the internals,
I would like to go on with the project itself, how it evolved.
This is the graph of the code frequency on GitHub.
So as you can see, there has been quite a lot of activity in the beginning.
Initial commit 2013, release 1.0 2015.
And then in 2018 with this huge spike, there was a major rewrite of the app.
Most of this was done by Torsten Grotter.
And as you can see afterwards, activity declined a bit.
Well, both Torsten and me were busy with other stuff.
So this is actually a try to get some more or attract maybe some new contributors to Transporter with this talk.
Maybe you've noticed that at some point we even got removed from the official after-ride repository
because they found out that some library or the map library that we were using was not fully open source.
And it became necessary to switch to an open source fork of that library that actually didn't include the non-free dependencies.
And another thing that happened last year is that Navicia started to change strategy.
It's like the new version of their software is not open source anymore.
And they also stopped serving a lot of regions.
So at that point, for example, Nicaragua was not available anymore, which is a bit of a shame.
So in 2023 we also got some new interest from the community.
There was people asking about the future of the Transporter app.
Well, that's got some new energy and we finally finished the migration to the new map library.
And since one month ago, we made it actually back to asteroid.
We're back there.
But as I said before, we lack some regions that were supported before because Navicia stopped providing them and because some APIs also broke over time.
Well, as I said before, there are some new contributors.
There's some effort to move to new design theme, which is great.
There are quite some open issues.
Some of them are bugs and many of them are feature requests.
And a lot of them are actually marked as so-called beginner jobs.
That means that they are supposed to be quite easy to tackle.
So if anyone watching this or being here feels like looking at some Kotlin or Java Android code,
feel free to pick one of those and try to work on them.
And apart from Transport itself, it's also nice to see that the whole ecosystem of similar public transport apps is growing.
So there's Uffy, as mentioned before.
That's open source now for some years as well.
Then there's itinerary, an app that tries to do or does even more things than what Transporter is trying to do, like saving your tickets.
There's another Linux app, GTK-based, in that case, which is pretty new, also looks really nice.
And on iOS, there's also an app that I'm not sure if it's fully open source, but at least there is some variety to choose from.
And looking at this ecosystem that is growing, I think it would be nice to try to combine efforts in some way.
And maybe what would be nice as well is find an alternative to what Navicia was providing before, some kind of shared service that is maintained by the community that can use GTFS files that are available for a lot of places in the world
and provide an API that can be used by all of these apps and even more.
So that's for me.
I have three steps for you.
If you haven't already downloaded Transporter either from Afterhood or from Google Play, if you find anything that doesn't work as you want, tell us.
Look at the code, contribute, and have fun using public transport.
Is there one quick question?
Hello there.
I tried to navigate to the results yesterday.
Yes, Bajum is one of the regions that was supposed to be broke, the API broke, and I think we would have to look into what kind of API they're using and then maybe
feel free to look into that and contribute.
Sorry, we don't have any time left for more questions.
Please talk to him, please contribute, and we are moving to the next presentation.
Thank you.
