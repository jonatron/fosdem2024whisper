
 I'm see here, I'm going to use Ruby. And I'm going to look an example of a command called file, where I'm not trying to do the arguments. It's where I'm going to take it. Let's go your Java, because I'm looking at, we'll see about it. I'll see the talk about it for this kind of thing. OK, we're going to use kind of a DAG for the C++, but we're going to add the entire reference. So we can like what I use. I'm going to do in some experience at that I'm going to talk about running, what we're building a bit of a C++ compiler. And of the, but we need to be able to figure out how we start going to offer to the thing to be the Ruby and how to debug our info here, actually a C wrapper, like we want to translate it. And I'm going to, this will be. I have to each build of those C code into sort of thing that we have never been doing and I'm going to present. And I'm trying to provide a compiler has to make that many standard execution and we want to be a C++ code base with that's going to start going to make this. This implementation that we are going to be done, maybe a, we are going to run as well, we have this, we need to make a lot of a template API and we're not want to work for example, but the first of one is the C++ running code, we're going to have a native code which I need to do for this. So we did we have it, we need to join us when we need to want to talk about a C++ code base model. So how to you can we want to have a C++. Yes, if you have this or native GCC code that works. So there is that's a definition of memory code. But of course, then the first talk was using GCC code, of the most standard code for some Rust code called C++ code base. And then we have a limited. And these code. So, in C++, the C code is the case, I'm just talk about the language. So when we have the API, the code you have an AI. And, which can do we will end of Go to make sure how to create this project. A compiler, and C++ code. So there's the C++ library that We have the library. So this is the application library and we have a software and we can we need to know about Rust features for the front, the future, we provide is the library, we have as much people to accept the code. So we have this first place, we are having those one for every code. And I'm going to set of the talk about the C code and the C code. We have many cases to look at this is going to be done for the code, but it's a few issues. But the main thing that's going to be done in C++ code. And for us, we have a new version is that we have in C, we, we have created. And we have this C++ code which is what we are work on the code base is going to work in the main function we have is the Python code, this. And we have one is a lot of it's going to be done. So it's going to have we have to run, we would like a lot of the code. And we create JavaScript code. No, we are using Ruby code. We have a little bit of object code base, we have this. First we have access to do. This is another dependencies. So we're going to add a bit mask to write, really much more, we're going to the JavaScript error. We have another compiler for example. It's just one that we have a struct, but we need to have to be able to do some kind of the vector and we do also have to start with the the libraries for a class pattern that we don't talk about the function. It's just create a function. We have. We have to look at the markdown function, then another order to look at what kind of Ruby thread, we have a stack. So for example, we just need to do is going to add the source code, but we have the pattern execution of these functions we have a pool that we have a simple, which is the pointer that we've got a return. It's going to take care. We need to create a value, the return a value value of the class load an expression, we have the entry point of the stack this implementation of the variables, which are a flag zero code. Well, we have to be in case of the thread for the pointer and some arguments that we have. So we need to remember, we're going to see the function and we look at least one would get to basically an error function, and we can also need to have this to know but it's a function called instruction. There's the symbolic value. Or this case of the code. And these functions are the idea is a string block on the instruction, which is kind of having instruction for example, which means that thing that function can be computed, because it's also the function in a string, which we will be copied, because you have a function to, but you can generate function is not care too not in the scheduler for threads to do. So we don't do the same function pointer which I don't ask the instruction would be a value to start going to match even the scheduler that we want to resolve it done, but we know that, you because we have to do so we can actually have the type method that we can put deserialize the object, you might be using the JavaScript function table. So, so we can we have this point we have a function? The default in the row function to give anything that the number of the function types the right now. Here's kind of instruction to if we have all the function in the threads may be, again. So if the first thing I'm going to do that I'm going to show you it's all of function and I'm going to implement cases, but I think about that this types, I'm going to be a string, which table, you have and there. You can be so the first one that's a JSON string because you don't have, you can call and are trying to read into JSON file. You can read the object type. You can do. You can have to compare as well in the table. You could do no array of JSON and you do that's how to output before and then we have a pattern in your program. But there's getting into a string of the next version. You can't have to run it's a register that. So that I've got the object to markdown kind of this. You see what to the function and how you can I can see the source code. And the blocks. You are kind of a number of code into that I discovered that you can say, if it's the block, you're going to get you can always read the result for the function on the object. So the size, if you can read this object on the string. You can have a result that these object map. It's the output that the function. You see the node, but, that but you can we can just output, you can write this it will say it. And then you can see the same type to read, this variable. You can do this function for example this function. You can just run. You can test. You can see that the fact for example, I'm going to get the table of the flags. And I'm going to run a string for that you how I've just have to put those events and you see the column here. And I'm going to run on it. We have another table and then you can put here. You can see all the table it or is the variable called pointer for the pixels here. You're going to prefix, which is created in the table. I'm going to add a result. And you can see here and you have a number of the table is the index that this method. And I'm hoping you can see, of the result into an error table. And then you can say, for each one more threads, okay. There's call in the table and then you can give the idea of the name. I have to have two. In this string of the variable table in which is a map and the most symbolic value that is the end and the different structure of one kind of the string. And then you can write is that and the value in order to put, which is really the return inside the table. So I'm going to talk, I said, I'm saying, I'm just going to give me to the JSON and the fact that the table, it's going to the JSON. So that's important that's the result you can I can set here, which is, I'm going to do. What I'm going to implement this is the previous one, if you have to modify the value, and then I think. The one of my table, or index is to the table. And that looks like this is going to deconinter is what this definition is I'm going to fetch. The function to see. And the deconstructured function, I'm going to make. I see the output of the number of the second case I want to be a way. I'm going to say I have access to add that I'm going to do. And with the table, I'm going to the, I'm going to, well, it's going to be a pattern that I say, I didn't create a list. It's got to be just wondering if I'm going to do a read from the result in the distance, I'm going to do it. So, I don't have the next version, I'm going to go to add this is to. It's going to the beginning of the exact privileges and then you're going to make it in the function and the function. And I'm going to focus on. The problem I'm going to look for this line page. And I have an object files in case, I'm going to know, and I think about as quickly. So that, we have to look at the first case. And now we didn't really see that's the next. So now, you can also have to use here to be able to be visible at the end some point. The ID of the results that the memory is the table, but I've got to be used in this and then I'm going to tell you can see very equal log in the object. And it's going to re-called state, I'm going to you, I've worked, I'm going to show us some interesting. And I'll come back to the API, but that we need to get the code and what I'm going to create the one, but we're going to a little bit of the, we don't need to be a lot of the most of files that we're looking at the source code that work in order to have to be done. But this case, I'll be just have this kind of the developer. So in my first one of GCC 4, it's a kernel which have is used to be executed with our code that we have another. Which allows us to build library that, I'm going to add, because Ruby++ code and everything that I think is going to be shared information about, but we have some of the Ruby and so it's where we're using and have to be happening for us for the Java code and we have to do. It means we need to translate that we have to be able to the stack function stack that we want to do the function base stack stack that we have to do that. But if you might be able to set up, right in JavaScript code base. And so we're doing an array that we don't do a memory was going to have to generate it. So we want to make code. In this work with the code, so we're going to be a lot of this to store is what people to are going in that we have just mentioned that we had the stack and we have on. We're going to do this code. That's the only a whole pool. You can see in Java GCC code that. You see what to see, and some things are, but there are ready to look at the code base language back to do is that. And another pattern that we're generating new threads that we have dynamic code in this component. So here we're going to go through. We should look at the code for that they need to have to prevent that very specific functions. So what we're going to write code base function from the context for the Ruby function back into native code. But the the code, if you could have a kind of a thread. So you can see in a few things. And the main function goes to see the execution. And so that you would be going to the code on. So I think if they're going to give me going to be to the code editor that code that it is going to give it's the same. So the stack, the code, the thing is happening. And when you know exactly what we don't want to ship the code here and it looks like it's going to do. So, you can do we are using, the test. So if it you're going to do we're going to actually going to write the stack back to the stack stack? So we're going on the VM list of this, we're going to be going to be doing this object if you just do an array that we will just got into this to be that. So that to cleandown code names of the way to be a nice. But we're going to build where it's the function, you're going to have a pointer to write to get a string because when you know that's going to the class. So we're going to have the function, we want to start writing Ruby to load average of tokens that object set, you're looking at the class. So if you're going to see the stack code, I think about the Python code over, so we can, we have the fact it's the source code. It's in the code base. And you can come to be a very interesting. It's very important. We're going to do we have like,