
 Hi FidoT is 100. It's a lot of things. Why do we look at the beginning, so important to take the new state of code. So for example, for instance, we have an application and then we have the API for that service to create which we want to think about that you have for those things. And this is the API to update LLM, we need to offer a Postgres pipeline, how to do we want to go from the whole database do this for example, which is a model. It's a very difficult to create a DAG for example that do which is that you use a message to make sure that we do that sometimes don't want to look at this case because there's a little bit. We have an early and we have a table that is a variable value is a read to a table that the table. And it's kind of create a record. So this is the first. And the previous one, the one, which is a result in this is basically the end of the previous one that when we see the number of the value, the number of three as I said, so the fact that is to handle the actual standard and so we have are going to be using in this way to pick this information and we have a particular column like that are going to remove it, so it's not going to we have to look, which is that we have five states that we're going to have a union the opposite which is not enough as event. So you can address for each. And if it's the state to add, but you're going to a value of the problem in the structure. So what one has to call is that you can be available in the value. So if you can do you have to want to give me what the table, before this first class that you need to set up here and we are allocated to clean the size on the first. And then we can see. So the load to also a variable. So, there's the function that's a function as you may be there's not the array, but if we have some output and if you start this is going to see that we support a number of the function that we are currently going to handle in the function generation the first iteration of the number of the memory. And we can't have the result instruction to check the value function has more way of bytes functions that you can be in some functions. So this computation is it's kind of what I'm going to specify to be. And because if you are the registers are going to be, you are the pointer of the heap dependencies. And I'm going to match, the memory is the function here. And I'm kind of the variable that you are a function pool of register is kind of RAM. So the analysis. But it's going to the symbol of the symbolic instruction. And then you can be able to be the queue so some function itself is usually, the memory function as close to be unstruct all the array that the function that JavaScript because the memory again the code, we try to do much as far as the value to the heap functions because we have to solve this heap instruction mode. So it's the heap level memory classes, the next function in this is the memory value that function, is quite well, but it works in which function. Now, you see the arguments and then we need to create the instruction when you know what things that is that all the execution, you need to change is this node. So within that's really the memory which we're going to be very simple, for example there's currently available at least a function to be stored in a memory you know when you know, you build, you're going to query, or node. And then the string, you have a variable in that would output, the memory and when you're just generate things we've seen at memory is good because you want to read some memory and we're a block level error between memory is going to the function the string or you're going to emit bytes in the variable should be able to be there. So you can't have to be what I use can. It's the application here that just one of the memory storage value is the input function that's kind of string and then for example, the pointer the same value to memory in the address it has as a string, but I'm not need to be worse for those string that if you're going to make it's only a single state of this value for another thing. And this means we're going to be done here, we are the thread array here, I'm going to make that time in C UID is going to be able to clean in C and this problem that the first and we're going to point, where the line's going to be the function is going to the read this one string. So if it's a value that uses it's going to add that. I don't have a value to add file, if you're going to red, this thing, I'm going to run next values and then I'm going to create a string. I'll be a server, I'm going to get the function that the table. I'm going to be going to have to be the one of this. And you got great note, but there's a very, the question, there's a table, right, MTR, but there's a variable and in the way. So as you have some IO and the cache for application, right, and I'm going to change the variable, you don't, right? So, but it's one, just the memory. And the way, you see, that we have a method of course, which is the way to the object and then we can read the function to add to monitor, okay, and see, but we wait for a function that this because it's just says that. Like we have is the main array. And we've been using deserializer. And the return the last part of the SQL file execution, you can look at having the type. I'm going to be here. Basically, that's going to be just one of time. So I'm going to have this thing I'm going to show up to be there. From the second. If you, it's a very important way the way to see if there's going to do that we have one of this thing and the file and have a variable that is that you're going to read in these stuff on the menu one machine base. And I'm going to create some kind of the variables that I'm going to do that there. I'm not sure that, I had this function that the function that will match is going to the markdown file it's the code and this file types of that they are you're going to do and work in the data and these objects to have it. And that's going to send an event that the value which is going to the object value of the des will not really well and so that it's going to go to be executed. And then we can be on the function at any string and so we go into and actually have to each one to create an is you can choose the read some type and the function value of three value and rows that's the stack a function. And I'm expecting here. So I'm going to your function like that we're not going to use this type of the instruction. So here on the first one that I'm going to, it's going to be the right, two types of the two, the heap or after this is going to be five. Obviously the table which is not just an array. And then the data in the metadata that struct. So I'm not two types. You have to get the description, the problem that is this is the first one that the point that is the array is a string that the value to be the rows. And then in the code. And I'm going to make this is going to be running the read, the result to show of the address and return is the deconstruct code is not to return that you start. And the heap type of memory is the value and states that the time and what is the case if you have at the table and then you're going to lock. So the time is the array and it's going to see which is the tail value. Instead of memory, what this type. So the value table is what happens and what's here we will be in the question. Another point where we call the number of the value are going to deal with the value for three value call value is we're actually doing. So at the optimization? Like this function of the hash map is going to do a value of the function, you get a value of value for some heap values. It's that table. So if you see the number must not actually start at the zero, that, or it's a bit kind of, I'm just wondering is just going to what kind of value of got zero result. But what we have all of the values that they're calling equal value pointer pool number three value match equal value, and then you get the pattern of strings, so it's just that is the value it happens that happens if you say because, the values and I should be an error that you can be sent the output. So the function is one is still going to do this memory usage or the function, if you have the string and if you have to do a data, for some error name is going to a function, but if you can be there's just an error function, what this pointer in JSON library. That's something that's kind of what the number of thing is the function that I'm going to think about is really in a number, what I'm going to be going to think, because it's the function that's kind of the main and that the interesting is going to be going to that the variable. And I keep me. And and things that's kind of thought of value that because it's kind of stuff, the work comes to do I think, I'm going to you know, right, but if you know, I'm going to give you know, your data here, and I mean, the things. And I said, if you the user space has now have, if you're doing the variable one thing that's what is going to do, or having a string, no way to be, I think about adding the data that just going to read the attributes, the table or you know, you know, if there's going to know, it's also the object file. But I'm also one if you have a list of you have also have to have this API. The if you're going to a good idea is like I think it's fine, because it's just is a string is going to write a bit of the number of the function that if you see in different value of different structure anymore. In this case. Because in the fact, it's like the function that it's just like the object that like that file, it's the roles, the address is a list of struct thing that's a way to look at the role here, and then you know, you know, you know, right, you are aware of the reads, because the time, something like I love that. And so it's at the command line is in the right? So there's what I can you know, right thing I'm going to read, right, or just like yeah, yes, and if you get you're just know, you know, you know, so the right? Yeah, right, yes, I want to see that, sorry, I'll show you just I'm going to put the name. So we come here. I'm not sure. So I'm thinking, all as I'm going to live. So, I'm just wondering, we're going to introduce this interesting thing to say we're interested in here. We have read here as I'm sorry. So at least, I'm the previous presentation, I'm going to show you. And I'm going to show you for the stuff that was using the one of the question, the question, so you know, you see is, but, and we have time. We are aware of the question. Okay, if you can do have some things like the question is much, if you have is to make sure, as you have to create a question about one? I was about how your question. But there's going to look at the question. So, we go like here and see. I was, okay, but I'm wondering. And it's here I discovered it's already on the slides. I'm not sure that. Okay, I mean, so I didn't think the introduction, I think about this is really like I'm out in Germany, but I was kind of my head, my first it was just wondering, and I was the first to talk, but I was being wondering, I was okay, I started to read to present here. And I was wondering, sorry, so I think of course, it was wondering, I was talking about the slides, I'm a few things already talking about, and I'm the technical folks. So, and I'm doing. Thank you about 10 years, my presentation. Thank you very much. Yeah, I'm going to run three months. He's going to keep getting paid for over the main talk, let's been working around and I'll be happy to stop around, but I'd comfortable with a little about the co-D, I'm not my colleague, I'm wondering if it. I'm going to see the last year, but I'm giving you very much time. Okay, we have a half the last year. So let me the talk, yeah, I talked about a work in the one of the last year. I'm going to the years ago. And the last year, and I have been using the company. So I think, it's been working but I've had a great to open source world and this was even as got open source. But this year are going to be talking about open source policy was about the source, but basically in France, I said, to bring the last year. And they're just open source community, there. And I know, of any thoughts on the years ago, I'm going to invest for my back to stop working around. I'm going to, so on the goal. I don't want to talk to focus out. There's going to be a bit in open source projects that I'm going to make the other companies for