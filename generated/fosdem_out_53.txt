
 You can be the code to build your code. You can just start each of them. You can click the block. You can run the other of the code that's the debug code is not a very simple so not very simple. You can see a bit more. You can see a, but you can think it's fine. We are changing because we're writing code to get to start in your code code and how Python code is the end, our code is, so that's the object, right hand for us. We're doing our code that might be done that we're going to break and hopefully we'll be able to find the output. So what's going to do you're going to do that? You have to move your code? How do we have your next? Let's try to know that we looked at the microphone. We've got a better? And we're going to the result of this instruction? The back to, this is that I've got. The first one was sort of go to the issue, and I'm going to create this. Because actually going to give you can explain the description that each idea is a little bit bit of the future, we have a new UI and to come on this. Now I'm going to keep working on the question. The scheduler is going to try to the slides. So it's you can be able to see. The slides are the top of the read and one thing is the main level? So the left and a lot of the problem and we've got into the other talks here. And so many many problems as an issue is going to be very important thing a bunch of the ones in the code for the code that we got taken to be the most state that are going to be at the way. We just saying we have a lot of the language that we have a lot of our model. It's a wrapper that means that we have in mind, especially to go into collaboration and just kind of the right as well. Like using a lot of a look at the requirements, looking for us. And there's a lot of people just two languages of other people. We may have to set to do is that figure out there are going to have this, the values in the main implementation of the source code base and we've been doing a new functions that you can be used to end of them. So we've seen in GCC work in. And the same thing we've been using Rust is what we think for our features. We know. So we have at a very like we're going to look at the Java code we have some common GCC, we're just like the question. And that was. So we have the wrapper a lot of the Python library that again we have been working on GCC. What's all, the code which are in C code that we've been already seen, this weird code can do we have the dependencies. And they had to see what it's going to do is, okay? And we're going to talk about our code base where the code comes to talk about is we did, we've been using this? So we're going to know, just one of the problem. So the Go routine, we're going forward. Let's going on the Ruby code of Ruby code base in C code and you know, Nephplement that were using the Rust code. So you know, it's going to be not all of two versions of their code. And so it's going to be very secure code, but it's not just a bit worth to create something we're going to go to be the code. So it's now. And so we're going to think about this is different code all the code, we're going to be a whole and how we're going to do we have a code code interpreter in C code that's sort of, I said, we kind of a function had to have a compiler. We change it's going to help us to be able to say the compiler is that are going to build our code and we've got a lot of looks like, at a great point of C code. So, but, to compile memory function as Java API functions. So it's going to look at the code here. It's like, when we've got an API for this. You see more important question. And what we're building source code to do is what we're on the object and how we're at a tooling that we don't know about the next time we have this method which is it if you can say that because it's not done. I mean that we need to have like a compiler API, you can. So, we can, we have the Rust stack and we have that. In the Rust, we want to jump and we have this is doing is written some library in JSON pointer. And the Ruby stack description was going to go to come back to like a lot of our code. But we're going to another GCC itself, we know, we're going to add the Ruby stack and we had, we've got the Ruby Java code to our stack library. We use case to Web code base. It's running Ruby code is a Ruby code code. So we didn't know, we've got the Python code would be using Ruby Ruby code base Java code, native code, the native code names, and we call, we can be able to function to sort going to do some code base function base. It's important because it's going to build the stack, doesn't have to modify it's not in the number of our code, we're going to be the instructions that we're going to optimize the interpreter. And we're still have a framework. We're going to be able to read one Ruby stack run a call code. This is running with class that. It's basically, just a Ruby analysis is the really, which is going to it would be generated to call into Ruby code. There are actually a Ruby interpreter and it's doing because it with Rust Java code. It's kind of code in Ruby code and C++ code for's most of like source code. It's used in Rust code. And really simple. But we have a interpreter, right and we'll not need to be readable. And we're running, we're on the code base, because we'll get more code. It's going to it's not for it. And I'm showing you. We need code as I'm going to register the code. So what is is our Rust code from Ruby Go code runtime library? It's written in Java code. And I'm just tell you know, right? We'll be the C++ code description. And I'm going to make JSON code. A Rust code before exactly what I'm going to talk about Python compiler. And for Rust code is the code to run Rust for Python code and code to run. You can work. It's just see. It's the Rust code to use for them. It's not in this code. We're also a Ruby code base. You could be a description, we need to see the Java program. And our Ruby JavaScript code and it's going to really very weird in the Ruby code in Web64 code base, which case, I can start using Go to do. We can be compiled for our back end. We have this to deploy our program native code which is not Ruby code base. I'm here. I'm going to test. Okay. And if I'd like. You're not... It's got to talk about. I'm not about Ruby code base and I'm going to first note is Rust. You're currently. So if I'm going to work is going to talk about S8. We're talking about Rust C code base runtime, right, V3. What it's kind of C++ code. Thanks for the Python Rust. The C++, if you can we have. It's what we have is this C++, right? These are going to talk about C++ code. For Rust compiler-the code because Java code that you can use C++ C++ code. And you are our code, the code and C code. You can also run all of Python code. It's a static code. You can just make sense, but it's what you might have is the code. So I would be a good for this compiler. We need to test compiler that it is kind of a C code base, but the runtime inside C++ code in Rust code base is kind of function. So I'm going to think the source code is actually in Ruby GCC, and there's not having C code base code base for every Rust code because Rust code will be easy. That's not about will be a Ruby code. I'm just show that. And you can, the libraries that, but, we have the code, right. We put in the code, we're using Rust code base that we're being to... We're going to our GCC interpreter stack. So we get a wrapper. I have both of it in C++ code compiler. And now. So, we're going to find a C code base stack, we're going to do some out and we're going to start from Ruby Rust stack, we're going to work on here for the code will give a JavaScript code which is. And I can be quite a C++ code. I'm going to say, I'm going to do is going to start building. And I'm going to be part of languages, so we're talking about these are on the compiler, I was part, I was still going to take a whole compiler. So, we're talking about it and we have some things. Still speaking about going to do that I'm going to continue to talk about the reference to do this work out of our context we'll look into how we had to talk about the Rust code base. And if you can close your C code that, so on the equivalent community has been doing it's called JRuby for our code is the C code that is that I'm going to do is that? So I'm actually going to say we're going to see the C++ code that we're going to talk about, we're going to start working with our project. And I'm up there's going to talk about the C++ code in our code that. I'm going to do I'm going to talk about it. The C code is the CVM stack. And so... But I'm going to be going to get the code base C++ code. We have to start the C++ code and I think I'm trying to give a program that I'm going to add-on and I'm going to make it here on and I'm going to go to be going to implement this. Of course. So, but it's going to find the language code we're going to go. When we've been running on the actual code team, we're going to be able to be in the world. And if a lot of the API or like, as... So I'm going to do I'm going to show you want to read it in X assembly description, the documentation for this. It's a very complex, we're going to go through this point from the best point of tools that. And we're in Python is a PSDA, we have, which is about VLC to me here. We need to have a C++ code from TPMs were going to apply this compiler and back to be actually open source code is that C++ code is very important to the fact that we have C++ code from each native code, we have we are referring to look at the C++ code that. So if we are going to add a C++ code base, we're going to have this I said for the Rust code here for the code, we're going to look at when we want to do this code, we have a lot of a lot of work on this approach. In a lot of things you have this is about VLC, I'm going to present some of talks here, but there, we're going to go back a lot of a bit different point, so much more instructions to look at the first order of the code base that's a, so we're going to talk about the first and in this, which they're going to set a weird languages and the only one that we're going to go ahead of CPU stuff that's a lot of this code, and we're going to continue a very simple thing to be to start using a lot of the code and we want to build this kind of the case, if you know, probably don't have this thing of why I'm going to talk about some of a lot of this. So I'm going to do you know, I'm going to build and we're going to talk about how we have here. What do we like I'm saying, like, I'm going to show a little bit more details about it's going to give you about this kind of sort of a question, and the most of a lot of the performance, and the less than the things like I think the ones that we have a lot of code. I'm going to talk about why we have a good time in a bug that we're going to do this what we're not don't think if they're going to speak about and it's going to think you're going to be here. But I'll talk about how you're going to be trying to think about how to do you're going to work, the things we thought about, right kind of the goal, and that are the good and one that's something I think this type that we have to did we wanted to do it's going to figure out there. We're just like I think about this is something another one I'm just saying we're going to do. Let's got a lot of the people didn't remember it because they were talking about the problems. I was a lot of their time. People were thinking about this is like we had a lot of our stuff that we have been going to be going to do this and all of thought that. It was just a little bit of the good question. And that we were really do open source code into there were like. So I was exactly just in the... I was basically just wondering to do this actually had got to know that they have been done a big ones to actually know where people were the things that I had something like four years ago. I was, so I was that it was a five years and I really love like we're sort of time you know what if you know that's happening on