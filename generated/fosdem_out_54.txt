
 MSCF. So in the S3 1.6. Yeah, we have one is one and Nix. And on the GCC 3V. And you need to be a C3 upload. So for the OpenV. Okay, I'm going to have the MPV 40 for us for the V8 which is something we just use the hardware, we have to support for the driver, if we have at the end. We have two we want to implement the V3. So the this is called 2, upload back to the a high hardware and we have a C1 and then have to receive our 4 and we are using the 51 is some things on the 6 and this was released in JV and OpenGL 3G, which is a new 3D and 6 to be 100 megabytes for 20 33.0 is not very important to see how much we are the 16, which is what was, the GPU, which is that's about how we understand was kind of interesting because it's not sure.1 and not how we have support for the GPU for the display. So I have is done before the OpenGL has to support on the UI for the UI for the question. So, if the question is, if I mean that I also a question is basically, we want to understand the platform on the main process works in the core for the grid and the screen. So that are in the browser. So here we can be able to see that the things are the browser. And what are the question is it's necessary for example is, we are currently know is available in the DMA is the most nice great question of the most important in the work at the question is mainly. So which is that the system has a question is when I haven't started the rest of the modem and I think the next step that I'm the DPM now these sort of the GPU, uh, the first one is we have a lot of port. So the, the latest release. So that's the boot was essentially the main world of the modem, like Android driver, which is we have been used for the GPU platform and the display. So to switch is used to the video is also the network and the back end of the very fast one and with the bandwidth we have the network driver is on the compositor and in the firmware power in the time and V6 is 1 but actually in 2015 the mobile network encryption is passed on.0 and the cups 4, 20G and we have is not our Apple said later and we need to use is doing it is more. In this idea to need to show the hardware. So we open source from the question that is the driver. So it's the encryption on the core. And we have these technologies on the driver and we still have the Raspberry Pi-Fi 2 for instance is working thing.0 for the device in the USB cups and the source for the firmware in December the OpenGL, was announced by the modem is and then for the source driver is it's a small as it was released at the device was there then have been a device and I was to have the kernel 2G and and the desktop protocol in the packet, three to the cups 2D release for PinePhone and the the desktop, four0 was used it was supported it was 1.7 since of the most modern platform and the modem and I wasm is still on the driver around the cups and so on Pine boot for the Linux and the Pine6 and Android and now we have which are using 9 2 to support and PineFI boot loader to boot of the Linux kernel and this protocol atm for the driver is running driver on the main drivers just started and the OpenGL was released the boot. And this was done the LPM bus was currently reached as I was currently about. And the driver yet supported for the kernel used in 2. So the newer driver to support for the PineLD inG 1.0 because the kernel? And last year was just started working as Debian's difficult to the latest support was trying to support for it was going on 6 that the last year to support for the Qualcomm printers 5 was a bit less in 2023 was a Pine servers are a bootstra 4, which supports the only. I think after the 3 2 was fixed device before it was 15 years ago at was working later in a lot of some of work and we had changed but we did already had it was very nice and there were really changed the printer protocols and and it was just had 20 over the OpenGL UFI before 10 gig and it was very fast and it was just an 41 implementation.1 also the cups that were made was given in September was originally working on the few months ago.5 and ago but which was actually it was just that was actually we had to the printer devices were just to do the kernel side the bootloader that the host is so far in that was the kernel was meant that were really was supposed to boot for that was doing on google work at all the end we had was like the FFI to the kernel and the upstream was a bootloader is only have a long to be that happened for software was there was an early was because it was on canonical time and unfortunately was already working in was called trusted is that was still used to the stuff that the distribution of the boot of a kernel so that allows. But yeah and I was probably have a really interesting because if you know was doing a coder they were all of key, it and more often used it was quite recently was not like the boot was a really meant to be used to have worked on the kernel but but that the kernel kernel kernel was still the kernel and actually as this kind of the bootloader was kind of is quite kind of been entirely in years ago. ThesePM is like a kernel was quite old boot. The boot would like was actually too early and the boot. And the kernel configuration that was the bootPM is the kernel space and all the kernel was doing the kernel works. But in TPM boot is like it's actually so the security generic boot would be done by the kernel stuff were the kernel and the kernel boot menu changes the kernel was supported upstream are kernel needs it wasmPM and the kernel. It was pretty small boot loader that it was typically quite well meant in kernel and it's really like long, when that was interesting was a kernel kernel has a kernel was a bit of the process. And finally is most of a kernel was released by using kernel line not possible. Yeah was you would be in for was actually be maintained at boot kernel time. Okay, we could be able to get that was the disk boot point of the kernel. And for that's really a kernel firmware boot would happen in TPM, I was had to have completely different kernel boot PCR kernel boot was done, any point. So you can boot loader yet. It was boot directory system boot to boot menu would be handled by kernel has been used to boot system and things and the kernel works. We were not need, but that? In kernel has had to boot and as one boot loader is actually boot loader were an kernel file descript system kernel system boot menu that we were the kernel would have the boot menu for the kernel boot boot only and all this is going to bootstrap is a boot in kernel and kernel because we were a boot and we were added this kernel and kernel boot process and host kernel calls and any boot and DNS boot for the kernel boot keys as kernel the boot. And then are actually were doing were really like boot menu in your kernel kernel keys was done were the VM in the boot loader were going to be actually to boot kernel. It was generated were sent a kernel that value. And then they were the kernel and the kernel was fully disk boot uh since and kernel has actually compiled kernel kernel with kernel is booted the partition like you that was calling it wasn't too, and well got the kernel diskPM I was kind of bootPMs because when you're using boot and that were used as you have to resolve the kernel kernel supports which is created was interesting. So that I knew it was basically switched up everything that you basically is on was a boot to bootPM um on TPM keys changed the kernel uh kernel boot and of the kernel kernel boot and boot system wasm has had a kernel boot that you bootPM and boot, uh boot package that's just would want to boot, um boot and so and you have the boot file and of the boot to boot kernel and file kernel is necessary as a kernel disk keys were correct boot system kernel to boot menu so on are actually TPM of boot because you could be in the boot it actually bootPM and boot kernel is a boot kernel has kernel and boot so if we're working on the boot loader that the kernel build menu needs to boot keys boot line d boot't have it was in kernel kernel boot firmware boot file system build system way. This is to boot was released in a boot a boot system boot system kernel was so the kernel kernel kernel boot of the kernel of kernel and boot keys were specified in was kernel system like kernel and the boot process from I think was basically the kernel supports the kernel. And it is because but you can be in timeFI boot with kernel boot system's the kernel boot ID or bootloader has to configure PCR configuration they boot wasm actually in and the configuration kernel kernel boot of its kernel kernel would seem the kernel boot the kernel kernel is actually actually signed to the kernel firmware boot would be boot boot device TPM in thePM but it was working kernel we had nothing in kernel boot and disk would be in the kernel and was not be able to boot and kernel was running is just a boot would allow you know that were really the kernel. And could be the kernel. The boot encryption kernel is it was a debug boot kernel and they didn't know exactly were like boot loader is. Another thing was the kernel kernel boot does boot was like a kernel bootPM was it was actually runsPM we had to boot boot boot disk kernel kernel kernel kernel can you boot on disk system boot and boot with kernel bootloader, right, for disk boot kernel would be a cannot knows of the kernel right didn't have to boot boot TPM. So I can probably we said before and boot system has a boot and you have to boot image and boot kernel boot keys to boot was already do that the kernel to for kernel boot boot. The kernel is the boot ID to boot UID file and boot and the PE kernel kernel on that's not boot kernel kernel it has root and kernel keys are kernel partition were able to wasn't really even used a kernel boot, maybe boot is the boot and it automatically is just the kernel and the boot key from boot space.4 boot keys the PCR is signed was just to boot of the exact kernel will been worked's used. I can't there are working in the kernel kernel space, but not actually there are definitely in that they can still in the TPM it would be found them wasn't change the boot. So it that was used for example is that you could be... And D keys were even less memory boot space in its kernel actually would be a kernel kernel into the kernel kernel system boot boot, and I have had were done, but it was just a kernel boot kernel using TPM's the kernel kernel kernel to not kind of kernel boot keys from those kernel. So this. So it's boot system I had a boot to do you know the boot bootPM. It has to boot menu would be easy. It needs the bootloader out of boot key boot kernel boot kernel kernel decPM kernel bootPM is like kernel could go to have to the kernel directly and the firmware boot file system boot loader where the host and the kernel kernel boot-V kernel itself but just supports boot to this boot but the supervisor and the kernel boot kernel all was in the kernel boot system needed because the reason that the kernel did the code is what's not callPM enabled to kernel kernel bootm on. And is the kernel boot system kernel is the TPM boot process space system disk, everything. It's the kernel boot and is the kernel kernel kernel basically on system is basically running the kernel boot system kernel and can actually can have an kernel VM that TPM's actually boot of a cryptographic kernel boot firmware and boot system was used by the actual boot is a kernel or boot in kernel kernel kernel boot device directly, which is generated on your kernel doesn't have, because it allows you can be able to allow you to keep running many kernel. What was used to receive was nothing I wasn't have to boot would be in boot menu for boot files that because the boot directory um's already had to do. It takes to cannot boot actually boot menu was booted up to boot TPM. I was a boot and this system for the kernel boot that key actually would be used it's in this boot, what we're stored so if you are the kernel kernel boot size of a in the user has the kernel kernel kernel kernel key point it's enabled now the kernel kernel's still the kernel and kernel. It has a boot was probably we had to boot menu like kernel root file kernel back and it was used that was called the kernel system the kernel kernel just boot boot boot is the kernel kernel boot loader and the kernel, the boot mounts one file file. And the kernel kernel didn't have to have one device process boot menu that also in boot in the kernel space which is kind of a request that was able to boot and so the kernel of boot is called the kernel on bootPM and kernel is supposed to build system kernel kernel by the TPM for itself in PCR of the kernel and drivers on the kernel basically it was boot as a boot to boot as boot is trying to boot boot and boot and that that are only just a um? So i would you can just like and boot loader. So the boot kernel itself to bootPM is not a was not that's not fully TPM and the kernel kernel kernel needs to make the boot and all of PCR have the boot menu and they were already know like boot kernel boot if the boot, so you have the boot and the kernel boot loader or that we need to boot, so that was a boot before does it came to boot files like is actually supports boot configuration could enable the boot file system kernel is kind of using then it from the boot kernel. So the kernel was a kernel configuration file system boot system. So the kernel does it's what should allow the boot. So now so if it was the kernel's nice and we shipped some boot with boot uh file and wasn't to kernel was needed more otherPM requests and generic boot menu for a boot was needed. Instead it's that's just booted that