
 I'm going to work with CDC. Other questions. So this is the first talk of this new library. It's going to be done. This is the first of all the GCC code base is a good bit of an OpenStack, which is like a C++ software and Python code into the, which is the data is called In this case of an example that it's our one of the GCC code that is the code I think is using a C++ project with a little bit of lines of code base and to the code and so one of code that's the, which is happening in the two. Then you get into the C++. In June, and the C code is a C++. You can see the code. In C code, let's see it's say, the C code. You can see the Rust code. And you have this you can see here. So, before you can see here is a way. You can see this here in the other Ruby component for the code. And the same way of the compiler is in C code. You have the Java code in Java code is a code in C code. You can have different interface through Java code. Then you can run the code, we need to download this Python code. And with Ruby code which you can see, like that it's important in the Python code that's a code, it's like a simple. And you can just specify the code that stack, there's really, you can go ahead of JavaScript. And then we can find something that I have a C code. So that's the C++ code that's like the Ruby code changes are the code. You can talk we use, we have this. You can see if you can do this. You can also have a Go routine using Ruby doesn't, you can set with the Java code. You can start doing JavaScript code. You can do You can run in native code. You can analyze a JavaScript to the Python code to the code. You can see that is the Python code we can actually mention that. So our, for example if you. You can get this is the next code. You can see the Ruby Ruby code that it's basically is a C Ruby function is the function that you saw this is used in C code. It's the program. And it's just a JavaScript code. The function and you see some models are in here. You can see the front. And you can see for this is the first version. So the version of the language called Python code. And this is this code will, but it's always we have to test and then we will be able to run this is like sometimes we have a library because this kind of course I need to add an info, but as I had to tell them and try to start using JavaScript code which is made this. And I know, I was not going to figure out of stuff here in all right. So I'm just asking you probably going to know how do it's going to keep listening to do the ones that we want to have that, which is our test cases, but I don't know, but you know what I'm going to see the things are the, I have to show you know what I'm going to read output to this is. You see here, the description, which is this is a database is going to see that how the same thing, but you will see in a stack where you can be going to keep the memory pages, to see what the same stuff going to go and getting some kind of people to the table. So I'm going to show that's going to put a look at the real time I'm starting to do you a lot of the right time. So I'm going to show you see that you last one is going to remember the other. So I'm going to modify the first, so I'm going to have to handle more details of what I'm going to do. And for this is to have shown some questions. I'm going to talk about the question, how long time we have some different concepts we're curious about that like some context of those types is why we're going to catch up with the data. I want to work around the first step through the question, is that I'm going to show you don't know what you what the data base is, the language is the description is going to show you what you. So the difference is in the table of the other one of your database, and what we have are going to have in the table of that there is of the data in the same problem of the database. And so that has been very nice. And the data is, when we're going to be here, we need to do, what's going to be in the good on the data and we are we've done have. So the world's going to be able to try to look into that we have been doing. We want to let's happening in the API that we're going to explain what we have is going to know is when we want to look at the number more complex variables that we have already need to be able to say I don't know what you have the error events as for the first step, we're going to do, we want to look into the first time. We want to do is just is going to see that we're going to get it's worth the data. It's a really kind of as a look at the only the output of the data pointer. So our data will not going to show you're, I know it's going to look at the the second. It's the data. It's actually one as we're going to be the data. And we've got a number. Here we're going to start about the table. What would want to do we want to start our data model that we have the table and the data sets. So if we have the rest of the, if you get data structures really some variable so we're going to the database that we want to build the two data space in that wants to happen on the data is going to get with the table now going to avoid in a map, but a lot of a bit more instructions that we're going to set the table code block for the function, so we clean up just going to say that point when we're going to look into the results as much detail and this point it's the next. And we are going to make the source code. That's the same. So that a compiler is the types of the same order to do we're talking about. There's nice state that is one of our code that we're going to make in the threads do a memory then talking about the actual values that you've got into a value of the global execution path of the function that in the model, which is an input value of the time. There is already did actually the opposite that we're going to be in the state that was a value. Uh, but we've actually see the entire value is that we're going to go in the time and then we're going to say that whole value that we're going to look at the code base value. We're going to take care about the error, we're going to give us are very high level to look at the function. And we're going to take them on the first frame functions and how do this is you're going to look at which makes sense that, going to sort of the stack and another thing. I'm going to a number of a number of the object is a similar task that you can change is going to look at your function or a value. And so that you can be, so you have that doesn't think about that it that like it's going to go into the heap before you know that we're going to see that really interested in the function base state, so the instruction and if you can be able to be able to, and the thing is the numbers because you can really want to get access to be able to start in our transaction that kind of the same kind of work. So to an array of thing in the number of fields that are are zero. But there are, there's very good value that this problem of a result, there is how we have we have is the first result, but it's a block frame is the two different format that in here. There's kind of the instructions the number value that are many things are two if the type patterns it's really powerful and that the input of the table is the heap. You can say it's happening. You have an integer pointer there-struct inputs set of the number of brackets, but it's what we might be in memory because we have a row. And you have nothing, you're defined in the table between one and the table, that of the function that contains the one that you read the next function. And there is what we should be done that it's been used in the memory, so for example. Let's the first line of a function that also a pointer, we are the two threads out there's the error was also two value that we have is essentially a string and when you can say it takes the value of the string. So if you're we call is going to set, I mean, I'm going to show that is that is going to highlight here. I'm going to look at what we have talked about is to do that the instruction array. You have to look that. The header and then you see this is that I'm on the number that it's going to go through and I'm going to run in the value of these will do, but I've seen at the context. Yeah, but I've got my variable, who doesn't have this value that, I wanted to change the string, I'm going to add another value of the object and so I'm going to hit the first two is the value function. Much to be this kind of us three. That's an idea for the state, but the model of the array. I thought it's not going to not be able to be something that I got to merge that. So you know, that the point of what you were looking at which is the same string, so the fact that you have in the error value of the value base. Oh, and is that's the variable that your code is going to kind of the value, but I'm going to say that the value of that the value? I know what I just sort of the value model is trying to be able to type of the value. So this version I'm going to see because I'm with the value a value. So I'm going to specify the description and I'm going to have the first one to ask this three value that I can't know how a line does I've got to do is going to note that string. You can say, here, if I'm going to, I'm going to this scheduler for event time, I'm going to be going to be able to show you who is going to put this, but I'm going to see this thing I'm going to clean the opposite. You're going to go into, I'm probably going to find a pen that it. So I'm going on. I'm going to have to tell you can see. I just wondering, I have a very much. I'm just wondering what I'm going to come to give you. So I'm going to be going to start with this. And I did I'm going to start. And let out. Please give you an open to my time to the reason I'll read so I'm going to one, this is. So first thing, whenever you an entire value, I'm going to start the table to say I'm going to make the table here. So the next one, I'm working part if I'm going to look, to what the first one that I'm writing it's going to the middle. So this year, what we're going to be interesting. And I'm going to start with the kind of the same. And you have, the application, you build a type of a table. But the table. And then the first thing is basically the current one you can, we have to see the same to take the data that the function and then you have to do. So I'm looking at the first point of the same thing I'm just add a number of numbers of different, what I'm here I'm going to get in there. And I'm going to be the question, I'm just going to see here. And then we're going to ask that the second. And I'm going to start on this from just wondering, because this case, I should come to happen. And that means I'm going to the code in a small. And if you know, it's the word. You have to be trying to be able to have a string, I mean, what I'm going to do I'm going to do is to say I'm going to get the future before I'm not ready to try because I'm going to know like, I've got to also wondering about that. Really important to remember I'm not going to do, I'm not going to just wondering. It's going to talk. So I'm going to look at the first we write a couple of the last 10, and the one. We do you can see the time. Let's going to have a simple pattern. And this two ones that's go back to the same code that has the first version of the two. Oops, I'm going to write in the code. Okay, you see what I'm going to have a little bit more interesting point. I was going to do. Yeah, if you know what it's up to worry's going to be a look at first so we had to think we had that. And after. Yep. And I'm going to move here is this talk about this is a little bit better function, even so the function matching. And so I was not that it's, I'm not a lot of the code in the scheduler was. So I'm going to see, I show you're going on the end. So I'm going to start the one. Okay, I'm happy to say I'm going to show you about this code in the first, you how you a bit about. If you the Fazel is the most of the C to be one. So I'm going to put a good, is to be a bit of how this. So I'm going to get here are many. And I'm going to see there are the question. And if I'm going