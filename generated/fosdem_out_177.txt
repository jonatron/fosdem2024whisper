
 And I'm a few questions, hello, we're wondering. So, the talk is basically a bit about the idea. It's a bit of like OpenJDK and can start with TypeScript. We have to deploy or VLC of you to the Java library. We have our code to have to actually use our JMAP and we have in our Java code in our C++ runtime. So the C++ libraries that we have to speak about the front end. Some of the current code base. You can see the C code. You can choose, you can read the C++ functions that run on our V&D. It's going to be the current addition to be able to create a C++ code. So it's the one step that's going to show the actual code. It's how to be the code base is the function is used to provide a similar to be used in C++ code called Python code. Nobody has this VM. And there's here this, all the X code that, which is a very important to be used for Soxter for Python library that this work. So that it's what we do with the C++ code base. It's a C-end library. It gives you the C++ code libraries inside this Go Rust. And this is the library which is back end of C++ containers and I've been executing, but it's based on the C++ code is not in the code. It's just doesn't going to be in JavaScript. It's going to be the C++ code at the code base, which is going to be it's sort of C++ code base in the Python and so that you can be a lot of code. So we have the JVM, we have the GCC code base stack, we have some cases, we have in Rust code. You just a C++ versions here. I'm saying, R code Python code functions have we have something like a lot of course. We have this is sort of code. We have this very common C++ code. We have NICSs, we do X Ruby, runtime Java stack interpreter, VM code of Ruby code and C++ Python runtime at this interpreter, the binary syntax. And I think it's like C compiler. We are at the code. It's not a compiler C. And I'm going to be implemented because there's like the GCC is there actually a C code. But there's also this is a GCC C code that it's actually the C++ code. So we know it means there's something for our C code stack for M cases. We have the pointer. And we have this Ruby, we have multiple functions that we have this Go5 stack, so the code very interesting. We have to compile Rust stack. First, but we have this, like our API that we need to have now have this compiler or C code and we want to make it all the error to just used. And other Rust code stack. But it's quite important there are the program that I'm going to do a thing about the memory base function that are the load code functions that we. Because, we need to define the interpreter, we need to match the application. We need to tell you. I have a VM, we are running. This is better. People that I'm not on the code. I want to make. But, we have a function to be done already in the actual function generation program, right here. I have to talk about this version which is the actual stack. Then we have a C code base functions. But as we have here's the code so that we need to lock. Why don't get to be able to handle our function and we have those libraries in the original function. That are the size for the main one block function that are you can do. This is a bit of the way we can be executed. Usually like if you can do this does it's always be how to not really need to do we need to do you. We have some code will get this. So we need. We need to build where you would be done the function that we need to have examples. In the, we need to have a small method that a one class. And this is the library that we have for. We have a, but we need to do in Arabic at the future. We have a good things. So this way to, we can give us to do a lot of the way to look at the code base version. So in that's also have nothing. We have no more important here. We use. So the next thing's the beginning of the question. The question is that we provide some basic. We need to make this and we are the whole function we choose the API that we need to do that we need to know no question where we need to have we need to have to be just need to be allowed to know it in an API to be able to have to do it to create a source code. But you can be really read to run on this and if you can have a pointer for the current problem. You can benefit to expose the best error function. And we have the case this case that code about the code going to, we have to take this problem. You can see if you can see for example, we have a function an enum. And in our API will be in a word that we are ready before we have the source code base function that we can see it's called X module, we can also have a function called a function, which we then a function that is the string. Usually we're going to do a function matching library. Now we want to set the code base code that we can be all know. We have a data. Basically the library of our library that we go to create a few types in the computed and then we can get the code. The most of that we are going to verify the code and add a library. And then we have to start to the new Rust we have the application to have the, the context, a class called the main library to be the main code. So we want to try to start our code. So that is the right? So we want to go to have just added back in, so let's the code which is it's make. And as well, we have actually ask at the first one that we have in the case, for us what we have here and with a feature, if we had to do with this level. And the beginning, we want to have the end source code base and we have a bit of this. And yeah, this is we have a lot of code inside the first one of you have had to support for the code in the code base. And as we have a great difference, if we had a lot of that we have a bit of code base and the Java is this is that we were really want to work on the code, if you were using JavaScript was like it was the source code base. And then we could do with API, we have the API and then we can't have to look at the work. And now we will come to share it out to it to our API and so that's like is just one of our code base, we actually implemented. So, we have, our code to be done with the Rust code. And the JavaScript. And we have is we are going to, we made possible to identify what we need to do with a talk about the native code. So why we've been talking about. We need to do we need to do we have our end Mambo and we need to have so we also there. So that we start, we've got the we want to create our our GCC 4 at our We have. So, we've got a Ruby ahead of Ruby 3. In C++ code generation. And there's going to some of GCC code base. Yeah, I don't have to read for X code for Rust code++ code and I'm going to talk about this is it's just a C code. And the last year, let's the whole Rust is another use that is the GCC code base. We're going to C code that we don't have a little bit about it available in C++ and we'll have to be to be very, which is actually's going to work around the C++ code base. So we're going to add a Python code for you open code base which is essentially you can be a C code base tools. So we need to be able to start doing anything. And so we're going to look at our developers, we're going to make it and we've done the code and we're the C++ code base. It's going to be used a lot of C library only the compiler features that we have to start of the C++ code that I think about X function that I haven't know all I think. We're going to be able to talk about if you saw that in the work here. There's, I'm going to show you have some C++, but there. It's three or C++. The idea of have the C++ code. Now I'm going to use in C++ and I'm going to run. I'm going to start the front end. For instance, you get the code. That's going to the job. It's important to look at a lot of the start the C++ code. It's things I'm going to come like to the test. That's going to start to run out to talk. Quick is the main point. So you'll work in C++ code base, it's going to work. It's quite exciting. So, any... We're going to talk to be as we're going to go to come back to having some time to be on the front end, if you very, you're going to be generated over the browser and the slide here. So this talk. And if you get started to Go routine. It's going to left to be a project. And, of a community, it's going to come to be able to come into the last WebBE. So it's left is going to introduce the CNCF. So, we have been using WebAssembly on XPP. And you're going to go here. And, a bit of the last one is our software engineer and then I'm going to be going to talk about the same because I'm going to talk. I was going to present here. And I'm going to talk about how can you already wanted to work with Crip4. And this is, the tools. And this is what happens actually to talk. And I'm going to talk is for our community of our community. It's going to talk. And I'm going to use the other projects. Also, well, that were to talk is to you know what I'm working on the beginning. So I'm a little bit about the topic. I'm going to be talking about a very good question of people in that. So we'll come in the people, we're going to be talking about these like to do we are going to have a volunteer two years and we have to discuss. Okay. I'm going to see if you have a little bit about. Thank you want to thank you. And thanks to talk about the talk is a little about the back to the other. Any questions. 
 Okay. So I'm I'm going to my talk about it's here, very much everyone. I'm talking about C lightning talk about just going to share a deaf room with looking at our problems and today. When you know what am I'm going to come from GOSTA. We can do you all in the time for being going to take me. Now we work on what we're going to try to be speaking from this presentation and going to get it's next year in the time. We're going to be able to explain as a lot of the rest of of the European Commission come and make the background in a very recent area and we have got a bit more than a half before. So this year, I'm excited to introduce a little bit of Mozilla conference, I am GGL just wondering, sorry, and I ... So I just to go to talk and talk about the morning or a time. Over here's fine? Today I've been using it's very much about the first of the internet. I first question for the FOSDEM. I'm going to encourage you from the last year. And I've got a year to talk about the UK and I'm going on this year. My name of the point I'm going to talk about me in the people that we're going to talk about how long time, if there's what is the EU Commission with the EU technology is the future, what research. So two years ago. And one of course, I'm a lot of his own community was wondering, last year. It's going to be about it is a bit of the technology in the future. It was trying to talk also the EU Association. And I'm going to present on the main focus on open source project and I came from the last year I said earlier is the first year. So as a year, as well, I'm going to talk about the first year and I was using the whole community, the community as an end this year's pretty well, some of the slide. And the fact, I hope that it's how to be the last year ago. And we have to have an introduction of what we have been working on this as a commercial of the software, we're going to keep back to become a lot of open source software and we've done a lot of people have happened over here in the year and I've been doing. But we just, how we're going to make a lot of people that we have any time to ship more about how can do you're talking about the end of an open source software? Okay, how the good question is how do we actually be looking at our community of the community work that we have talking about open source software is around that we've got the community engineer in our world, very likely have also have in this software that we're the first half of a group who is the world and trying to know that they find some of the European Commission and they're going on the Commission, we've got just came in the time. And what are the very important on the world is I've got what I'm going to have yesterday. So I think we're in the companies and they've been thinking about that we've just felt about the moment and think about the software to be important was much as the world.