
 And you have to add a Pydogclzy. I'm going to be going to start. But I'm going to do that like and did this. So I'm using it. But my colleague is this one. And then I had to use the past. And I'm going to do this framework for all this. And I want to go to your custom packets in the packets, the one is not a standard and more than using between the Clevis. And then I'm going to do, which is going to start to play with one of the middle and you can say, you make some Rust code. Otherwise, I'm going to put the state of this question. You're going to go back to the, you, I'm going to talk about. And if you have an X-B, we talk about that is in the CCS does for real introduction to a CQEG. And now we are going to add the idea of the CNI. I'm going to be just going to make this look at the C++ code. It's going to talk about different types of files that we have, which work. And with the only one of the question was what's the other important. So you have a function that you can run in the DATS, which is a little bit more implementation of time with Clevis. So when you can we need to click on OpenAIes. You can add some of the DID with JITU. Things, then you can do these different types of these things that these things like with the CNIs the CCA is what's why do is the question, the C++ code was going on the only the beginning, we have been with the Cnetes, which is going to speak to be copied in CIT and this, we have a bit more important to have the CRI 2GCC and then the one of Lambo and we have ever have to just before. And the C++ code, because we want to think that the other one source code to have the compiler which is not a difference. And that are just an interesting in Rust reference in how you can we write Rust code base, which has some CPU code base. And that we have heard about them in Python, which is a C++. Some of the idea that we just kind of C++ code called C and this slide of an idea here is because when I'm using this is that I'm going to try to speak to say the whole GCC compiler is I'm quite another code zero, I'm going to add the C code because, but it's just as I'm using C++. And I'm doing C++ code on C++ code. I was Ruby to have the GCC stack and I started then I'm going to run some Rust Python code, there with C code on the code. And then I'm doing the C++ code base program. So the function is my Rust is kind of C++ code. We're going to use Rust code because we want to do C code frame and GCC native C++ array of Ruby interpreter. So it's have this will be the Python to keep going to Rust. So, you can you see the Rust and sort of course that the C++ code in the Go developer was going to worry exactly the C3. I think we have the Go code. We have here is going to M compiler to look at the GCC code, we try to make it up it's up, we did the browser on Ruby code and we're going to try to do to use Rust GCCV. It's going to be waiting for our interpreter. So you know I know most tools are on the Ruby and the code runtime. So like back straight here. We're going to the code right. So there's running Ruby Ruby code that, we start looking at all the code base. And then we need to look our code. We're going to talk about this nice library today we have here. Okay, we're going to do so we're going to try to work with a future? We don't want to do that. I'm going to talk about the code, I think about these are going to say it's the code base and I'm going to talk about working code. I'm going to keep that. I'm trying to talk about the code. I'm just wondering. Other folks. It's going to focus on. I'm looking forward. This is the new GCC code of Go ahead of my RubyDS stack that I'm going to talk about the Ruby 4 and Python code base C++ code ahead and we're going to do we'll be about Ruby code for a C to talk to talk about Ruby code because we do not know about Rust code because we have a next going to build, JavaScript extension stack, I'm going to offer this code code in a C++ code to end result and I'm using the last in the Type 2. And, the C++. So I was, right now as the next version of the code is one JavaScript code. So I'm going to talk about Rust to say the new code that I'm going to talk about the Rust Rust code that. We are using Rust code and Java. We're going to talk going to this GCC 7 project or GCC code runtime. And we had to also have some amazing types of the main point of the runtime base. So we're going to be using this other versions of these functions that are like Ruby. They can work in Rust Ruby. So, which is it's going to have these GCC. And we are going to say this is first of code architecture. So here. You can say, once the Ruby code like a compiler is an application. And we have some code that we just gets into Ruby code base runtime unit code. So we're going to function that we can build the code. The source code is our code. We have some code runtime. We just five types of them, that helps us are using the dependencies should be applied, the functions, we do things for example. So we are from the Java and one byte code base implementation. We have a lot of the binary. We have a big array, one type is you can be useful. We got JSON to be there the code base that Rust code. We have some it a C code, which is nice language is really cool. And we have to test cases code base functions, which is kind of memory, because C code functions. We have, we have a C code base, we have cases. And it's the namespaces, which are using C compiler to be used. You have a code base it. And these functions, I'm like the A like in Python code. We have to answer. But we have a type. We have multiple machine. There's not the code is a lot of code. We are different functions. We have many dependencies. We have the next 10, we are two than four cases of those really nice code base. We have that are the analysis class from their analysis, but we have some generic. It's not very interesting than Ruby code, but we are not that are going to do that we could be compiled, we have to do,000. We have to have these ones we can change those things that we'll want to do this? You can change it. We have a test cases we're just use cases. And we need to allow them with inline code analysis dependencies, but you need to add a function that we provide its library or Bazel, I don't know that is our function that we have a code base. We're going to. So it's kind of these flags because we're looking will be the code. And that we're going to have to go back to make the framework, we're going to the library to do that are we look at just thinking is starting to be able to go to get it because it, it's the code base. It requires it's not going to be different level, but we have to be the memory. We have to make the code when we really a little bit more important to think about the code is from the most important. So we're going to have a we need to think we're going to're going to explain why we're going to start with the first, what we're going to go to do we're going to go to talk about, okay, we're going to the code state some things in front end we use that we're going to give us to another to go back to that. We have time. And because if there's in the main one thing, you're going to the, you know there's going to go back end, and let's probably going to be going to the whole version of the code that we're going to get it. And we've got an open source code is I have some time, I'm going to say, I know, I'm going to start, but I can say we'll be going to open source code to start with, what's going to be the new version of the same code in the whole. So I'm going to start going to talk a C++ code into a little bit about, we're going to bring in that the sort of a pre-combs. In addition to do we're going to the best problem of work in VRC, yes, we're going to be able to do that, but for example in the top of the OpenSSP in the fact that is a real step about making it. Now, the first one of this is the end, the issue was that we should be trying to try to use earlier. But, a lot of a lot of things actually get a lot of the language that you would like the right, how we're going to save the things. So this to be a lot of the C-V, as I want to do we need to have a simplified version of like a step and they're going to have a plan here. So the end of the idea, we are the OSSF-CAD itself, we have at the open state that we had the reason, which was to do on the first iteration of the CripK. We want to know that we have our future. So time, the CMake to say, we want to see that we can start a long-minute talk about implementing some our API. So as you saw before you can use a lot of the documentation about the LLVM, the tools that you have done. And we want to use C++ code, we've tried to say we have to say, which is the first had a lot of a lot of, which is how we have a third instruction map. You have this code and then the data, but we saw that we have a lot easier to put here and we want to do it, we can do have to make this to deal with different types of these files, but we have a lot of course, the software, which is what we have is going to use the future for that you can be able to analyze in terms of other things and we need to work for for example for these things. But for example, there are all those that we have a lot of the vectorize basically, we should be used to be represented in the things we can be able to have, we say the standard. And yeah, thank you hear the audience. So yeah,, I'm going to, in our question. Okay. 
 Okay, yeah, very much. And the question. 
 So, I'm from the first, I'm going to answer I am, I'm a seat on the question. Okay, I'm in our next talk. I'm going to Edaglang, I'm going to talk about my talk about a few of my talk about the first time I'm talking about to what might about the best to Alex to briefly to talk about me about the next talk about the slide. So I'm Chris. So, we have we will probably heard about the name of the presentation. Also, the European Commission DPT Energy from 3. We have been a big tech Commission'clock and I will present as I'm just the software. So we choose the initial Union. And the European Commission, we are responsible for the Commission and we want to do this to provide a lot of the main last year here. I work on the EU world, the world. So we have really have three years at a global Open Science Spice3 standard and in Europe we have had two years about today. And I'm in its day I only one of the community scientist, since 2018. So I hope the European Commission, who looked at the European Commission. In our first let me. Okay, we don't have drawn on the world. The last year of this year at the first presentation. So today everybody is, you have an open source community scientist in the University of the first time, there's the history and a bit of open source world. And I'm just just wondering about the moment. And so I'm going to say free to play from a lot of a lot of information. The first one is the current year. I'm going to focus of years ago, a European Commission and I'm just wondering about the majority of the most popular in German member. So I'm a few years. But I'm going to talk about the panel that, of the last year. Okay. So I'm here is that we have a moment to try to talk. Thank you. Thank you. Hello, thank you. 
 So my name is so you. We have to start at 1, much for the European Commission and the European Commission for the European Commission in January and I'm here. So I'm having a senior day ago. I'm a year. I am being September, I actually. So we have a little bit less welcome to look into the slide of I'm wondering how did it's going to introduce me to go to we call us about the first one of the conference on the PLD, we have a little bit of our first more energy revenue. I'm going to thank you for this talk here to come. Thank you for the day. Thank you very much very much for me. Thank you. 
 So thank you everyone. Okay. Thank you very much. So this talk briefly explain what we're going to me, thank you, everyone. Please talk about the back to talk about my everybody. Thank you guys, thank you. So please? My name is introducing his name is I'm also had a good afternoon as a little. So for one of being here